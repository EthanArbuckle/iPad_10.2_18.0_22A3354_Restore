unsigned int *WebCore::ViewTransition::callUpdateCallback(unsigned int *this)
{
  uint64_t v1;
  WebCore::ActiveDOMCallback *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  JSC::Structure *v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::DOMGuardedObject *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  JSC::Structure *v22;
  int v23;
  JSC::VM *v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::ActiveDOMCallback **v44;
  uint64_t v45;
  uint64_t v46;
  JSC::Structure *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::ActiveDOMCallback **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  void *v64;
  WebCore::ActiveDOMCallback *v65;
  uint64_t v66;
  void *v67;
  int v68;
  WTF::StringImpl *v69;
  WebCore::ActiveDOMCallback *v70;
  int v71;
  WebCore::ActiveDOMCallback **v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5EF00);
  }
  v5 = this;
  v6 = (_DWORD *)(v4 - 264);
  *(_DWORD *)(v4 - 264) += 2;
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    (*(void (**)(WebCore::ActiveDOMCallback **__return_ptr))(*(_QWORD *)v7 + 40))(&v70);
    if (v71)
    {
      if (v71 != 1 || !(_DWORD)v70)
        goto LABEL_136;
      v2 = 0;
    }
    else
    {
      v2 = v70;
      v70 = 0;
      if (v2)
      {
        v19 = *((_QWORD *)v2 + 3);
        if (v19
          && *(_QWORD *)v19
          && (*(_BYTE *)(v19 + 8) & 3) == 0
          && WebCore::ActiveDOMCallback::canInvokeCallback(v2, v8))
        {
          v1 = (uint64_t)v2;
          goto LABEL_51;
        }
        v20 = 0;
        goto LABEL_24;
      }
    }
    v20 = 1;
LABEL_24:
    v21 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v4 - 96));
    MEMORY[0x19AEA3294](&v69, *(_QWORD *)(v21 + 56));
    v23 = *(_DWORD *)(v21 + 1164);
    if (v23)
      v24 = (JSC::VM *)(16 * (v23 & 0xFFFFFFFE));
    else
      v24 = 0;
    v25 = JSC::JSPromise::create(*(JSC::JSPromise **)(v21 + 56), v24, v22);
    v26 = WTF::fastMalloc((WTF *)0x30);
    v27 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v26, v21, v25);
    *(_QWORD *)v27 = &off_1E3226868;
    *((_DWORD *)v27 + 10) = 0;
    *((_BYTE *)v27 + 44) = 0;
    v28 = *((_QWORD *)v27 + 3);
    if (v28 && (v29 = *(_QWORD *)v28) != 0 && (*(_BYTE *)(v28 + 8) & 3) == 0)
    {
      if ((v29 & 0xFFFE000000000002) != 0)
      {
        v30 = 0;
      }
      else if (*(_BYTE *)(v29 + 5) == 68)
      {
        v30 = *(_QWORD *)v28;
      }
      else
      {
        v30 = 0;
      }
    }
    else
    {
      v30 = 10;
    }
    v1 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v1, v21, v30) = &off_1E3251870;
    MEMORY[0x19AEA32A0](&v69);
    if (!v71)
      goto LABEL_42;
    if (v71 == 1)
    {
      if ((_DWORD)v70 == 1)
      {
        v69 = 0;
        WebCore::DeferredPromise::reject(v26, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v69, 0);
        v32 = v69;
        v69 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::destroy(v32, v31);
            if ((v20 & 1) != 0)
            {
LABEL_49:
              if (*(_DWORD *)(v26 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
              else
                --*(_DWORD *)(v26 + 16);
LABEL_51:
              if (v71 != -1)
                ((void (*)(WTF::StringImpl **, WebCore::ActiveDOMCallback **))off_1E33A88A0[v71])(&v69, &v70);
              goto LABEL_66;
            }
          }
          else
          {
            *(_DWORD *)v32 -= 2;
            if ((v20 & 1) != 0)
              goto LABEL_49;
          }
LABEL_47:
          if (*((_DWORD *)v2 + 4) == 1)
            (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v2 + 16))(v2);
          else
            --*((_DWORD *)v2 + 4);
          goto LABEL_49;
        }
LABEL_46:
        if ((v20 & 1) != 0)
          goto LABEL_49;
        goto LABEL_47;
      }
LABEL_42:
      v33 = *(_QWORD *)(v26 + 24);
      if (v33 && *(_QWORD *)v33 && (*(_BYTE *)(v33 + 8) & 3) == 0)
      {
        v34 = **(uint64_t ***)(v26 + 32);
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v26, v34, 1, (objc_class *)0xA);
        MEMORY[0x19AEA32A0](&v69);
      }
      goto LABEL_46;
    }
LABEL_136:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_137;
  }
  v9 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v4 - 96));
  MEMORY[0x19AEA3294](&v70, *(_QWORD *)(v9 + 56));
  v11 = *(_DWORD *)(v9 + 1164);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*(JSC::JSPromise **)(v9 + 56), v12, v10);
  v14 = WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v14, v9, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v16 = *((_QWORD *)v15 + 3);
  if (v16 && (v17 = *(_QWORD *)v16) != 0 && (*(_BYTE *)(v16 + 8) & 3) == 0)
  {
    if ((v17 & 0xFFFE000000000002) != 0)
    {
      v18 = 0;
    }
    else if (*(_BYTE *)(v17 + 5) == 68)
    {
      v18 = *(_QWORD *)v16;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 10;
  }
  v1 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v1, v9, v18) = &off_1E3251870;
  MEMORY[0x19AEA32A0](&v70);
  v35 = *(_QWORD *)(v14 + 24);
  if (v35 && *(_QWORD *)v35 && (*(_BYTE *)(v35 + 8) & 3) == 0)
  {
    v36 = *(_QWORD *)(v14 + 32);
    if (!v36 || (*(_BYTE *)(v36 + 8) & 3) != 0)
      v37 = 0;
    else
      v37 = *(uint64_t **)v36;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v14, v37, 0, (objc_class *)0xA);
    MEMORY[0x19AEA32A0](&v70);
  }
  if (*(_DWORD *)(v14 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  else
    --*(_DWORD *)(v14 + 16);
LABEL_66:
  if (*((_BYTE *)v5 + 72) != 4)
    *((_BYTE *)v5 + 72) = 2;
  v38 = *((_QWORD *)v5 + 4);
  if (v38)
    goto LABEL_145;
  v38 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v38 = 1;
  *(_QWORD *)(v38 + 8) = v5;
  v40 = (unsigned int *)*((_QWORD *)v5 + 4);
  *((_QWORD *)v5 + 4) = v38;
  if (!v40)
    goto LABEL_145;
  do
  {
    v41 = __ldaxr(v40);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v40));
  if (!v42)
  {
    atomic_store(1u, v40);
    WTF::fastFree((WTF *)v40, v39);
  }
  v38 = *((_QWORD *)v5 + 4);
  if (v38)
  {
LABEL_145:
    do
      v43 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v43 + 1, (unsigned int *)v38));
  }
  ++*(_DWORD *)(v1 + 16);
  v44 = (WebCore::ActiveDOMCallback **)operator new(0x20uLL);
  *v44 = (WebCore::ActiveDOMCallback *)&off_1E33A8960;
  v44[1] = (WebCore::ActiveDOMCallback *)v5;
  v44[2] = (WebCore::ActiveDOMCallback *)v38;
  v44[3] = (WebCore::ActiveDOMCallback *)v1;
  v72 = v44;
  v45 = *(_QWORD *)(v1 + 32);
  if (!v45 || (*(_BYTE *)(v45 + 8) & 3) != 0)
    v2 = 0;
  else
    v2 = *(WebCore::ActiveDOMCallback **)v45;
  v46 = **(_QWORD **)(v1 + 24);
  if ((v46 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v46 + 5) == 68)
      v47 = **(JSC::Structure ***)(v1 + 24);
    else
      v47 = 0;
    goto LABEL_82;
  }
LABEL_137:
  v47 = 0;
LABEL_82:
  v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  v49 = v48;
  *(_QWORD *)v48 = &off_1E3392A30;
  if (v72)
  {
    if (v72 == &v70)
    {
      *((_QWORD *)v48 + 4) = (char *)v48 + 8;
      (*((void (**)(WebCore::ActiveDOMCallback **))v70 + 3))(&v70);
    }
    else
    {
      *((_QWORD *)v48 + 4) = v72;
      v72 = 0;
    }
  }
  else
  {
    *((_QWORD *)v48 + 4) = 0;
  }
  v69 = v49;
  WebCore::DOMPromise::whenPromiseIsSettled(v2, v47, (uint64_t *)&v69);
  if (v69)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
  v51 = v72;
  if (v72 == &v70)
  {
    v52 = 4;
    v51 = &v70;
  }
  else
  {
    if (!v72)
      goto LABEL_94;
    v52 = 5;
  }
  (*((void (**)(void))*v51 + v52))();
LABEL_94:
  v53 = *((_QWORD *)v5 + 1);
  if (v53 && (v54 = *(_QWORD *)(v53 + 8)) != 0)
  {
    if (*(_BYTE *)(v54 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195A5EF40);
    }
    v55 = v54 - 288;
    *(_DWORD *)(v54 - 264) += 2;
  }
  else
  {
    v55 = 0;
  }
  v56 = WebCore::Document::eventLoop((WebCore::Document *)v55, v50);
  ++*(_DWORD *)(v56 + 8);
  v57 = *((_QWORD *)v5 + 4);
  if (v57)
    goto LABEL_146;
  v57 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v57 = 1;
  *(_QWORD *)(v57 + 8) = v5;
  v59 = (unsigned int *)*((_QWORD *)v5 + 4);
  *((_QWORD *)v5 + 4) = v57;
  if (!v59)
    goto LABEL_146;
  do
  {
    v60 = __ldaxr(v59);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v59));
  if (!v61)
  {
    atomic_store(1u, v59);
    WTF::fastFree((WTF *)v59, v58);
  }
  v57 = *((_QWORD *)v5 + 4);
  if (v57)
  {
LABEL_146:
    do
      v62 = __ldaxr((unsigned int *)v57);
    while (__stlxr(v62 + 1, (unsigned int *)v57));
  }
  v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v63 = &off_1E33A89A8;
  *((_QWORD *)v63 + 1) = v5;
  *((_QWORD *)v63 + 2) = v57;
  v69 = v63;
  WebCore::EventLoopTaskGroup::scheduleTask(v56, 0, (uint64_t *)&v69, &v70, 4.0);
  v65 = v70;
  if (v70)
    ++*((_DWORD *)v70 + 12);
  v66 = *((_QWORD *)v5 + 18);
  *((_QWORD *)v5 + 18) = v65;
  if (v66)
    WTF::RefCounted<WebCore::EventLoopTimer>::deref(v66 + 48, v64);
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v70, v64);
  this = (unsigned int *)v69;
  if (v69)
    this = (unsigned int *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
  v68 = *(_DWORD *)(v56 + 8);
  if (!v68)
  {
    __break(0xC471u);
    JUMPOUT(0x195A5EF20);
  }
  *(_DWORD *)(v56 + 8) = v68 - 1;
  if (v55)
  {
    if (*(_DWORD *)(v55 + 24) == 2)
    {
      if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v55, v67);
    }
    else
    {
      *(_DWORD *)(v55 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v1 + 16) == 1)
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  else
    --*(_DWORD *)(v1 + 16);
  if (*v6 == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v67);
  }
  else
  {
    *v6 -= 2;
  }
  return this;
}

uint64_t *WebCore::ViewTransition::setupViewTransition(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  CGFloat y;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  WebCore::RenderLayerModelObject **v29;
  WTF::StringImpl *v30;
  __n128 v31;
  CGFloat x;
  CGFloat v33;
  int v34;
  WebCore::RenderLayerModelObject *v35;
  WebCore::LocalFrame *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const WebCore::RenderLayerModelObject *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  CGFloat v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  void *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD **v82;
  _DWORD *v83;
  WTF *v84;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD **v90;
  _DWORD *v91;
  WTF *v92;
  uint64_t v94;
  _QWORD *v95;
  CGFloat v96;
  uint64_t v97;
  uint64_t v98;
  WebCore::LegacyInlineBox *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  const CGRect *v107;
  int v108;
  void *v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  const CGRect *v114;
  WTF *v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  _QWORD *v132;
  void *v133;
  int v134;
  WTF *v135;
  void *v136;
  WTF *v137;
  WTF::StringImpl *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  int v143;
  WebCore::RenderLayerModelObject **v144;
  WTF::StringImpl *v145;
  __int16 v146;
  char v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  WebCore::CapturedElement *v153;
  CGRect v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char v159;
  char v160;
  uint64_t v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v1 = this[1];
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5FA88);
  }
  v3 = (uint64_t)this;
  *((_BYTE *)this + 72) = 1;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v148 = 0;
  v149 = 0;
  *(_DWORD *)(v2 - 264) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v2 - 288));
  if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v4);
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5FAA8);
  }
  v6 = *(_QWORD *)(v5 + 1656);
  if (!v6)
  {
LABEL_166:
    LOBYTE(v20) = 0;
    goto LABEL_167;
  }
  ++*(_DWORD *)(v6 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 328);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v6 + 248);
  v155 = *(_OWORD *)(v10 + 1248);
  LODWORD(v156) = *(_DWORD *)(v10 + 1264);
  *(float *)(v3 + 76) = WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v10, (uint64_t)&v155);
  *(_DWORD *)(v3 + 80) = v11;
  v12 = *(float *)(v7 + 592);
  v13 = *(_QWORD *)(v7 + 24);
  v14 = 1.0;
  if (v13)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if (v15)
    {
      v16 = (*(_DWORD *)v15)++;
      if (*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7 && !*(_BYTE *)(v15 + 1098))
        v14 = *(float *)(v15 + 356);
      if (v16)
      {
        *(_DWORD *)v15 = v16;
      }
      else
      {
        WebCore::Page::~Page(v15);
        WTF::fastFree(v135, v136);
      }
    }
  }
  *(float *)(v3 + 84) = v12 * v14;
  v17 = operator new(0x20uLL);
  *v17 = &off_1E33A89F8;
  v17[1] = v3;
  v17[2] = &v150;
  v17[3] = &v148;
  *((_QWORD *)&v156 + 1) = v17;
  WebCore::forEachRendererInPaintOrder(&v154, (uint64_t)&v155, *(WebCore::RenderLayer **)(v6 + 144));
  v18 = (__int128 *)*((_QWORD *)&v156 + 1);
  if (*((__int128 **)&v156 + 1) == &v155)
  {
    v19 = 4;
    v18 = &v155;
    goto LABEL_19;
  }
  if (*((_QWORD *)&v156 + 1))
  {
    v19 = 5;
LABEL_19:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  if (LOBYTE(v154.size.width))
  {
    LOBYTE(v20) = LOBYTE(v154.origin.x);
    y = v154.origin.y;
    do
    {
      v22 = __ldaxr(v8);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v8));
    if (!v23)
    {
      atomic_store(1u, v8);
      v139 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v139 = off_1E31FE290;
      v139[1] = v8;
      *(_QWORD *)&v155 = v139;
      WTF::ensureOnMainThread();
      v140 = v155;
      *(_QWORD *)&v155 = 0;
      if (v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
    }
    v24 = *(_DWORD *)(v6 + 16);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195A5FB0CLL);
    }
    v25 = 0;
    *(_DWORD *)(v6 + 16) = v24 - 1;
    goto LABEL_168;
  }
  do
  {
    v26 = __ldaxr(v8);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v8));
  if (!v27)
  {
    atomic_store(1u, v8);
    v141 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v141 = off_1E31FE290;
    v141[1] = v8;
    *(_QWORD *)&v155 = v141;
    WTF::ensureOnMainThread();
    v142 = v155;
    *(_QWORD *)&v155 = 0;
    if (v142)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  }
  v28 = *(_DWORD *)(v6 + 16);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x195A5FC38);
  }
  *(_DWORD *)(v6 + 16) = v28 - 1;
  v25 = 1;
  if (!HIDWORD(v149))
  {
    LOBYTE(v20) = 0;
    y = 0.0;
    goto LABEL_168;
  }
  v29 = (WebCore::RenderLayerModelObject **)v148;
  v144 = (WebCore::RenderLayerModelObject **)((char *)v148 + 8 * HIDWORD(v149));
  do
  {
    LOBYTE(v155) = 0;
    BYTE8(v155) = 0;
    v160 = 0;
    v161 = 0;
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    v159 = 0;
    WebCore::ViewTransition::copyElementBaseProperties((WebCore::ViewTransition *)&v154, *v29, (WebCore::LayoutSize *)((char *)&v157 + 8));
    x = v154.origin.x;
    v154.origin.x = 0.0;
    v33 = *(double *)&v158;
    *(CGFloat *)&v158 = x;
    if (v33 == 0.0)
      goto LABEL_34;
    v34 = **(_DWORD **)&v33 - 1;
    if (**(_DWORD **)&v33 != 1)
    {
LABEL_33:
      **(_DWORD **)&v33 = v34;
      goto LABEL_34;
    }
    v80 = *(unsigned int *)(*(_QWORD *)&v33 + 28);
    if ((_DWORD)v80)
    {
      v81 = 16 * v80;
      v82 = (_DWORD **)(*(_QWORD *)(*(_QWORD *)&v33 + 16) + 8);
      do
      {
        v83 = *v82;
        *v82 = 0;
        if (v83)
        {
          if (*v83 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, v30);
          else
            *v83 -= 2;
        }
        v82 += 2;
        v81 -= 16;
      }
      while (v81);
    }
    v84 = *(WTF **)(*(_QWORD *)&v33 + 16);
    if ((WTF *)(*(_QWORD *)&v33 + 32) != v84 && v84 != 0)
    {
      *(_QWORD *)(*(_QWORD *)&v33 + 16) = 0;
      *(_DWORD *)(*(_QWORD *)&v33 + 24) = 0;
      WTF::fastFree(v84, v30);
    }
    v86 = *(_QWORD *)(*(_QWORD *)&v33 + 8);
    *(_QWORD *)(*(_QWORD *)&v33 + 8) = 0;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    WTF::fastFree(*(WTF **)&v33, v30);
    v33 = v154.origin.x;
    v154.origin.x = 0.0;
    if (v33 != 0.0)
    {
      v34 = **(_DWORD **)&v33 - 1;
      if (**(_DWORD **)&v33 != 1)
        goto LABEL_33;
      v88 = *(unsigned int *)(*(_QWORD *)&v33 + 28);
      if ((_DWORD)v88)
      {
        v89 = 16 * v88;
        v90 = (_DWORD **)(*(_QWORD *)(*(_QWORD *)&v33 + 16) + 8);
        do
        {
          v91 = *v90;
          *v90 = 0;
          if (v91)
          {
            if (*v91 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, v87);
            else
              *v91 -= 2;
          }
          v90 += 2;
          v89 -= 16;
        }
        while (v89);
      }
      v92 = *(WTF **)(*(_QWORD *)&v33 + 16);
      if ((WTF *)(*(_QWORD *)&v33 + 32) != v92 && v92 != 0)
      {
        *(_QWORD *)(*(_QWORD *)&v33 + 16) = 0;
        *(_DWORD *)(*(_QWORD *)&v33 + 24) = 0;
        WTF::fastFree(v92, v87);
      }
      v94 = *(_QWORD *)(*(_QWORD *)&v33 + 8);
      *(_QWORD *)(*(_QWORD *)&v33 + 8) = 0;
      if (v94)
        (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
      WTF::fastFree(*(WTF **)&v33, v87);
    }
LABEL_34:
    v35 = *v29;
    if ((*((_BYTE *)*v29 + 21) & 0x80) != 0)
    {
      v38 = *(_QWORD *)(*((_QWORD *)v35 + 3) + 8);
      v39 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
      if (*(_QWORD *)(v39 + 1272) == v38)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v39 + 1944) + 248);
        v42 = *(void **)(v41 + 40);
        if (v42)
        {
          if (objc_msgSend(*(id *)(v41 + 40), "conformsToProtocol:", &unk_1EE342188))
            v42 = (void *)objc_msgSend(v42, "superview");
          objc_msgSend(v42, "frame");
          v154.origin.x = v103;
          v154.origin.y = v104;
          v154.size.width = v105;
          v154.size.height = v106;
          WebCore::enclosingIntRect(&v154, v107);
          v143 = v108;
          v109 = *(void **)(v41 + 40);
          if (v109)
          {
            if (objc_msgSend(*(id *)(v41 + 40), "conformsToProtocol:", &unk_1EE342188))
              v109 = (void *)objc_msgSend(v109, "superview");
            objc_msgSend(v109, "frame");
            v154.origin.x = v110;
            v154.origin.y = v111;
            v154.size.width = v112;
            v154.size.height = v113;
            WebCore::enclosingIntRect(&v154, v114);
          }
          else
          {
            v44 = *(_QWORD *)(v41 + 56);
          }
          LODWORD(v43) = v143;
        }
        else
        {
          v43 = *(_QWORD *)(v41 + 56);
          v44 = v43;
        }
        v37 = 0;
        v45 = ((_DWORD)v43 << 6);
        if ((int)v43 < -33554432)
          v45 = 0x80000000;
        v46 = HIDWORD(v44) << 38;
        if (SHIDWORD(v44) < -33554432)
          v46 = 0x8000000000000000;
        v47 = 0x7FFFFFFF00000000;
        if (SHIDWORD(v44) <= 0x1FFFFFF)
          v47 = v46;
        v48 = (int)v43 <= 0x1FFFFFF;
        v49 = 0x7FFFFFFFLL;
        if (v48)
          v49 = v45;
        v36 = (WebCore::LocalFrame *)(v47 | v49);
      }
      else
      {
        v40 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)v35 + 18);
        v154.origin.x = 0.0;
        v37 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)v40, v40, &v154, 0x454u, v31.n128_f64[0]);
      }
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    *(_QWORD *)&v156 = v37;
    *((_QWORD *)&v156 + 1) = v36;
    v50 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
    if (*(_BYTE *)(v50 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195A5FA2CLL);
    }
    v51 = *(_QWORD *)(v50 + 240);
    if (v51)
    {
      v36 = *(WebCore::LocalFrame **)(v51 + 8);
      if (v36)
      {
        v52 = (unsigned int *)((char *)v36 + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
        WebCore::snapshotElementVisualOverflowClippedToViewport((WebCore *)&v154, v36, *v29, (const WebCore::LayoutRect *)&v156, v31);
        v54 = v154.origin.x;
        v154.origin.x = 0.0;
        if (!BYTE8(v155))
        {
          *(CGFloat *)&v155 = v54;
          BYTE8(v155) = 1;
          goto LABEL_91;
        }
        v55 = v155;
        *(CGFloat *)&v155 = v54;
        if (!v55)
          goto LABEL_91;
        v56 = *(_QWORD *)(v55 + 8);
        if (__ldaxr((unsigned __int8 *)v56))
        {
          __clrex();
          goto LABEL_61;
        }
        if (__stxr(1u, (unsigned __int8 *)v56))
LABEL_61:
          MEMORY[0x19AEA534C](v56);
        v58 = *(_QWORD *)(v56 + 8);
        v59 = v58 - 1;
        *(_QWORD *)(v56 + 8) = v58 - 1;
        if (v58 == 1)
        {
          v97 = *(_QWORD *)(v56 + 16);
          v60 = *(_QWORD *)(v56 + 24);
          *(_QWORD *)(v56 + 24) = 0;
          v61 = v97 != 0;
        }
        else
        {
          v60 = 0;
          v61 = 1;
        }
        v62 = __ldxr((unsigned __int8 *)v56);
        if (v62 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v56))
          {
            if (!v59)
            {
LABEL_70:
              if (v60)
                (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
              if (!v61)
                WTF::fastFree((WTF *)v56, v36);
            }
LABEL_74:
            v63 = v154.origin.x;
            v154.origin.x = 0.0;
            if (v63 == 0.0)
              goto LABEL_91;
            v64 = *(_QWORD *)(*(_QWORD *)&v63 + 8);
            if (__ldaxr((unsigned __int8 *)v64))
            {
              __clrex();
              goto LABEL_78;
            }
            if (__stxr(1u, (unsigned __int8 *)v64))
LABEL_78:
              MEMORY[0x19AEA534C](v64);
            v66 = *(_QWORD *)(v64 + 8);
            v67 = v66 - 1;
            *(_QWORD *)(v64 + 8) = v66 - 1;
            if (v66 == 1)
            {
              v98 = *(_QWORD *)(v64 + 16);
              v68 = *(_QWORD *)(v64 + 24);
              *(_QWORD *)(v64 + 24) = 0;
              v69 = v98 != 0;
            }
            else
            {
              v68 = 0;
              v69 = 1;
            }
            v70 = __ldxr((unsigned __int8 *)v64);
            if (v70 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v64))
              {
                if (!v67)
                {
LABEL_87:
                  if (v68)
                    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                  if (!v69)
                    WTF::fastFree((WTF *)v64, v36);
                }
                do
                {
LABEL_91:
                  v71 = __ldaxr(v52);
                  v72 = v71 - 1;
                }
                while (__stlxr(v72, v52));
                if (!v72)
                {
                  atomic_store(1u, v52);
                  v95 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v95 = off_1E31FE290;
                  v95[1] = v52;
                  *(_QWORD *)&v154.origin.x = v95;
                  WTF::ensureOnMainThread();
                  v96 = v154.origin.x;
                  v154.origin.x = 0.0;
                  if (v96 != 0.0)
                    (*(void (**)(CGFloat))(**(_QWORD **)&v96 + 8))(COERCE_CGFLOAT(*(_QWORD *)&v96));
                }
                goto LABEL_93;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v64);
            if (!v67)
              goto LABEL_87;
            goto LABEL_91;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v56);
        if (!v59)
          goto LABEL_70;
        goto LABEL_74;
      }
    }
LABEL_93:
    if ((*((_BYTE *)*v29 + 45) & 0x20) != 0)
    {
      v99 = WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)*v29, v36);
      v100 = ((_DWORD)v99 << 6);
      if ((int)v99 < -33554432)
        v100 = 0x80000000;
      v101 = (unint64_t)v99 >> 32 << 38;
      if (SHIDWORD(v99) < -33554432)
        v101 = 0x8000000000000000;
      v102 = 0x7FFFFFFF00000000;
      if (SHIDWORD(v99) <= 0x1FFFFFF)
        v102 = v101;
      if ((int)v99 > 0x1FFFFFF)
        v100 = 0x7FFFFFFFLL;
      v73 = v102 | v100;
    }
    else
    {
      v73 = 0;
    }
    *(_QWORD *)&v157 = v73;
    v74 = *(_QWORD *)(*((_QWORD *)*v29 + 11) + 40);
    LOBYTE(v145) = 0;
    v147 = 0;
    if (!*(_BYTE *)(v74 + 368))
      __break(1u);
    v75 = *(WTF::StringImpl **)(v74 + 352);
    if (v75)
      *(_DWORD *)v75 += 2;
    v145 = v75;
    v146 = *(_WORD *)(v74 + 360);
    v147 = 1;
    WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add((uint64_t *)(v3 + 40), (uint64_t)&v145, (uint64_t)&v154);
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CapturedElement,WebCore::CapturedElement&>(&v153, (uint64_t *)&v155);
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::UniqueRef<WebCore::CapturedElement>>((uint64_t)&v154, (uint64_t *)(v3 + 64), &v145, &v153);
    if (v153)
    {
      WebCore::CapturedElement::~CapturedElement(v153, v76);
      WTF::fastFree(v77, v78);
    }
    if (v147)
    {
      v79 = v145;
      v145 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v76);
        else
          *(_DWORD *)v79 -= 2;
      }
    }
    WebCore::CapturedElement::~CapturedElement((WebCore::CapturedElement *)&v155, v76);
    ++v29;
  }
  while (v29 != v144);
  if (!HIDWORD(v149))
    goto LABEL_166;
  v115 = v148;
  v20 = 8 * HIDWORD(v149);
  do
  {
    v116 = *(_QWORD *)v115;
    v115 = (WTF *)((char *)v115 + 8);
    WebCore::RenderObject::setCapturedInViewTransition(v116, 0);
    v20 -= 8;
  }
  while (v20);
LABEL_167:
  y = 0.0;
  v25 = 1;
LABEL_168:
  v117 = v148;
  if (HIDWORD(v149))
  {
    v118 = 8 * HIDWORD(v149);
    do
    {
      v119 = *(_QWORD *)v117;
      *(_QWORD *)v117 = 0;
      if (v119)
      {
        v120 = *(_DWORD *)(v119 + 16);
        if (!v120)
        {
          __break(0xC471u);
          JUMPOUT(0x195A5FA0CLL);
        }
        *(_DWORD *)(v119 + 16) = v120 - 1;
      }
      v117 = (WTF *)((char *)v117 + 8);
      v118 -= 8;
    }
    while (v118);
    v117 = v148;
  }
  if (v117)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree(v117, v4);
  }
  v121 = v151;
  while (v121)
  {
    v137 = v121;
    v121 = (WTF *)*((_QWORD *)v121 + 2);
    v138 = *(WTF::StringImpl **)v137;
    *(_QWORD *)v137 = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
        WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v138 -= 2;
    }
    WTF::fastFree(v137, v4);
  }
  if (v150)
  {
    WTF::fastFree((WTF *)(v150 - 16), v4);
    if ((v25 & 1) == 0)
      goto LABEL_215;
LABEL_180:
    v122 = *(_QWORD *)(v3 + 8);
    if (v122)
    {
      v123 = *(_QWORD *)(v122 + 8);
      if (*(_BYTE *)(v123 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195A5FBB4);
      }
      *(_BYTE *)(v123 + 3154) = 1;
      v124 = v123 - 288;
      *(_DWORD *)(v123 - 264) += 2;
    }
    else
    {
      v124 = 0;
      MEMORY[0xD72] = 1;
    }
    v125 = WebCore::Document::eventLoop((WebCore::Document *)v124, (WTF::StringImpl *)v4);
    ++*(_DWORD *)(v125 + 8);
    v126 = *(_QWORD *)(v3 + 32);
    if (v126)
      goto LABEL_235;
    v126 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v126 = 1;
    *(_QWORD *)(v126 + 8) = v3;
    v128 = *(unsigned int **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v126;
    if (!v128)
      goto LABEL_235;
    do
    {
      v129 = __ldaxr(v128);
      v130 = v129 - 1;
    }
    while (__stlxr(v130, v128));
    if (!v130)
    {
      atomic_store(1u, v128);
      WTF::fastFree((WTF *)v128, v127);
    }
    v126 = *(_QWORD *)(v3 + 32);
    if (v126)
    {
LABEL_235:
      do
        v131 = __ldaxr((unsigned int *)v126);
      while (__stlxr(v131 + 1, (unsigned int *)v126));
    }
    v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v132 = &off_1E33A89D0;
    v132[1] = v3;
    v132[2] = v126;
    *(_QWORD *)&v155 = v132;
    WebCore::EventLoopTaskGroup::queueTask(v125, 0, (uint64_t *)&v155);
    this = (uint64_t *)v155;
    *(_QWORD *)&v155 = 0;
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    v134 = *(_DWORD *)(v125 + 8);
    if (!v134)
    {
      __break(0xC471u);
      JUMPOUT(0x195A5FBD4);
    }
    *(_DWORD *)(v125 + 8) = v134 - 1;
    if (v124)
    {
      if (*(_DWORD *)(v124 + 24) == 2)
      {
        if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
          return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v124, v133);
      }
      else
      {
        *(_DWORD *)(v124 + 24) -= 2;
      }
    }
  }
  else
  {
    if ((v25 & 1) != 0)
      goto LABEL_180;
LABEL_215:
    LOBYTE(v155) = v20;
    *((CGFloat *)&v155 + 1) = y;
    LODWORD(v156) = 1;
    this = WebCore::ViewTransition::skipViewTransition((uint64_t *)v3, (WTF::StringImpl *)&v155);
    if ((_DWORD)v156 != -1)
      return (uint64_t *)((uint64_t (*)(CGRect *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v156])(&v154, &v155);
  }
  return this;
}

void sub_195A5FC68()
{
  objc_end_catch();
  JUMPOUT(0x195A5FC74);
}

void WebCore::forEachRendererInPaintOrder(_QWORD *a1, uint64_t a2, WebCore::RenderLayer *a3)
{
  uint64_t v4;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WebCore::ViewTransition *v23;
  WebCore::RenderLayerModelObject *v24;
  WebCore::LayoutSize *v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    v23 = (WebCore::ViewTransition *)std::__throw_bad_function_call[abi:sn180100]();
    WebCore::ViewTransition::copyElementBaseProperties(v23, v24, v25);
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(&v29, v4, *((_QWORD *)a3 + 4));
  if (v31)
  {
    v8 = v29;
    v9 = v30;
    v30 = 0;
  }
  else
  {
    WebCore::RenderLayer::updateLayerListsIfNeeded(a3);
    v10 = *((_QWORD *)a3 + 12);
    if (v10 && (v14 = *(unsigned int *)(v10 + 12), (_DWORD)v14))
    {
      v15 = *(_QWORD **)v10;
      v16 = 8 * v14;
      while (1)
      {
        WebCore::forEachRendererInPaintOrder(v26, a2, *v15);
        if (v28)
          break;
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v11 = *((_QWORD *)a3 + 13);
      if (v11 && (v17 = *(unsigned int *)(v11 + 12), (_DWORD)v17))
      {
        v18 = *(_QWORD **)v11;
        v19 = 8 * v17;
        while (1)
        {
          WebCore::forEachRendererInPaintOrder(v26, a2, *v18);
          if (v28)
            break;
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v12 = *((_QWORD *)a3 + 11);
        if (!v12 || (v20 = *(unsigned int *)(v12 + 12), !(_DWORD)v20))
        {
LABEL_8:
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          goto LABEL_9;
        }
        v21 = *(_QWORD **)v12;
        v22 = 8 * v20;
        while (1)
        {
          WebCore::forEachRendererInPaintOrder(v26, a2, *v21);
          if (v28)
            break;
          ++v21;
          v22 -= 8;
          if (!v22)
            goto LABEL_8;
        }
      }
    }
    v8 = v26[0];
    v9 = v27;
  }
  *(_BYTE *)a1 = v8;
  a1[1] = v9;
  *((_BYTE *)a1 + 16) = 1;
LABEL_9:
  if (v31)
  {
    v13 = v30;
    v30 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
}

WebCore::Node *WebCore::ViewTransition::copyElementBaseProperties(WebCore::ViewTransition *this, WebCore::RenderLayerModelObject *a2, WebCore::LayoutSize *a3)
{
  WebCore::Node *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  float64x2_t *v14;
  uint64_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int v32;
  int v33;
  double v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  double v44;
  int v45;
  double v46;
  CGFloat x;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WebCore::MutableStyleProperties *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  double v57;
  int v58;
  void *v59;
  uint64_t v60;
  double v61;
  int v62;
  int v63;
  float v64;
  float v65;
  float v66;
  double v67;
  int v68;
  double v69;
  double v70;
  WebCore::MutableStyleProperties *v71;
  double v72;
  uint64_t v74;
  char v75;
  int *v76;
  int v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WebCore::MutableStyleProperties *v80;
  unsigned int v81;
  uint64_t v82;
  char v83;
  int *v84;
  int v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WebCore::Node *result;
  WebCore::LegacyInlineBox *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  const CGRect *v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  const CGRect *v103;
  WebCore::Node *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  char v107;
  char v108;
  WebCore::Node *v109;
  int v110;
  WTF::StringImpl *v111;
  char v112;
  char v113;
  CGRect v114[2];
  char v115;
  WTF *v116;
  float64x2_t *v117;
  uint64_t v118;
  char v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  WebCore::Styleable::fromRenderer((uint64_t)a2, a2, (uint64_t)&v109);
  if (!v113)
  {
    __break(1u);
    goto LABEL_96;
  }
  v6 = v109;
  if (v109)
    *((_DWORD *)v109 + 6) += 2;
  v104 = v6;
  LOBYTE(v105) = 0;
  v107 = 0;
  if (v112)
  {
    LODWORD(v105) = v110;
    v7 = v111;
    if (v111)
      *(_DWORD *)v111 += 2;
    v106 = v7;
    v107 = 1;
  }
  v108 = 0;
  v122 = 0xAE001D00060003;
  v123 = 131423;
  WebCore::ComputedStyleExtractor::copyProperties((uint64_t)&v104, &v122, 6uLL, (uint64_t *)this);
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 1944) + 248);
  if (*(_QWORD *)(v9 + 1272) != v8)
  {
    if ((*((_BYTE *)a2 + 45) & 8) == 0)
      goto LABEL_54;
    ++*((_DWORD *)a2 + 4);
    (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)a2 + 912))(a2);
    *(_QWORD *)a3 = v11;
    v115 = 0;
    v117 = 0;
    v118 = 0;
    v116 = 0;
    v119 = 0;
    memset(v114, 0, 41);
    v120 = 1;
    v121 = 1;
    (*(void (**)(WebCore::RenderLayerModelObject *, _QWORD, CGRect *, uint64_t, _QWORD))(*(_QWORD *)a2 + 576))(a2, 0, v114, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v114, 0);
    v13 = v116;
    v14 = v117;
    v116 = 0;
    v117 = 0;
    if (v13)
      WTF::fastFree(v13, v12);
    if (v14)
    {
      if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
      {
        v90 = WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)a2, (WebCore::RenderObject *)v12);
        v91 = ((_DWORD)v90 << 6);
        if ((int)v90 < -33554432)
          v91 = 0x80000000;
        v92 = 0x8000000000000000;
        if (SHIDWORD(v90) >= -33554432)
          v92 = (unint64_t)v90 >> 32 << 38;
        v93 = 0x7FFFFFFF00000000;
        if (SHIDWORD(v90) <= 0x1FFFFFF)
          v93 = v92;
        if ((int)v90 > 0x1FFFFFF)
          v91 = 0x7FFFFFFFLL;
        v15 = v93 | v91;
      }
      else
      {
        v15 = 0;
      }
      v16 = (double)(int)v15 * 0.015625;
      v17 = (double)SHIDWORD(v15) * 0.015625;
      v18 = vmlaq_n_f64(vmulq_n_f64(v14[2], v17), *v14, v16);
      v19 = vaddq_f64(v14[7], vmlaq_n_f64(vmulq_n_f64(v14[3], v17), v14[1], v16));
      v14[6] = vaddq_f64(v14[6], v18);
      v14[7] = v19;
      v20 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v10 + 64) + 832))(v10 + 64, 0, 0);
      v21 = v14[1].f64[1];
      v22 = v14[3].f64[1];
      v23 = v14[7].f64[1];
      if ((_DWORD)v20)
      {
        v24 = (float)-(float)(int)v20;
        v14->f64[0] = v14->f64[0] + v21 * v24;
        v14[2].f64[0] = v14[2].f64[0] + v22 * v24;
        v25 = v14[6].f64[0];
        v14[4].f64[0] = v14[4].f64[0] + v14[5].f64[1] * v24;
        v14[6].f64[0] = v25 + v23 * v24;
      }
      v26 = v14->f64[1];
      v27 = v14[2].f64[1];
      v28 = v14[6].f64[1];
      if (HIDWORD(v20))
      {
        v29 = (float)-(float)SHIDWORD(v20);
        v26 = v26 + v21 * v29;
        v14->f64[1] = v26;
        v27 = v27 + v22 * v29;
        v14[2].f64[1] = v27;
        v14[4].f64[1] = v14[4].f64[1] + v14[5].f64[1] * v29;
        v28 = v28 + v23 * v29;
        v14[6].f64[1] = v28;
      }
      v30 = *(_DWORD *)a3;
      v31 = *((_DWORD *)a3 + 1);
      if (*(int *)a3 >= 0)
        v32 = *(_DWORD *)a3;
      else
        v32 = v30 + 1;
      v33 = v32 >> 1;
      v34 = (double)v33 * 0.015625;
      if (v31 >= 0)
        v35 = *((_DWORD *)a3 + 1);
      else
        v35 = v31 + 1;
      v36 = v35 >> 1;
      v37 = (double)v36 * 0.015625;
      v38 = v14->f64[0];
      v39 = v14[2].f64[0];
      v40 = v14[6].f64[0] + v39 * v37 + v34 * v14->f64[0];
      v41 = v28 + v37 * v27 + v34 * v26;
      v14[6].f64[0] = v40;
      v14[6].f64[1] = v41;
      v42 = v23 + v37 * v22 + v34 * v21;
      v14[7].f64[0] = v14[7].f64[0] + v37 * v14[3].f64[0] + v34 * v14[1].f64[0];
      v14[7].f64[1] = v42;
      if (v30 == 0x80000000)
        v43 = 0x3FFFFFFF;
      else
        v43 = -v33;
      v44 = (double)v43 * 0.015625;
      if (v31 == 0x80000000)
        v45 = 0x3FFFFFFF;
      else
        v45 = -v36;
      v46 = (double)v45 * 0.015625;
      if (v44 != 0.0)
      {
        v14->f64[0] = v38 + v21 * v44;
        v14[2].f64[0] = v39 + v22 * v44;
        v14[4].f64[0] = v14[4].f64[0] + v14[5].f64[1] * v44;
        v14[6].f64[0] = v40 + v42 * v44;
      }
      if (v46 != 0.0)
      {
        v14->f64[1] = v26 + v21 * v46;
        v14[2].f64[1] = v27 + v22 * v46;
        v14[4].f64[1] = v14[4].f64[1] + v14[5].f64[1] * v46;
        v14[6].f64[1] = v41 + v42 * v46;
      }
      WebCore::ComputedStyleExtractor::matrixTransformValue(v14, (WebCore::RenderLayerModelObject *)((char *)a2 + 80), v114);
      x = v114[0].origin.x;
      v114[0].origin.x = 0.0;
      v49 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v49 = 2;
      v50 = (*(unsigned __int8 *)(v49 + 6) << 16) & 0xFC0000 | 0x20000;
      *(_DWORD *)(v49 + 8) = 1;
      *(_WORD *)(v49 + 4) = 4096;
      *(_BYTE *)(v49 + 6) = BYTE2(v50);
      *(CGFloat *)(v49 + 16) = x;
      v51 = *(_QWORD *)&v114[0].origin.x;
      v114[0].origin.x = 0.0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v51, v48);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = *(WebCore::MutableStyleProperties **)this;
      *(_QWORD *)&v114[0].origin.x = v49;
      WebCore::MutableStyleProperties::setProperty(v52, 273, v114, 0);
      v54 = *(_QWORD *)&v114[0].origin.x;
      v114[0].origin.x = 0.0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      WTF::fastFree((WTF *)v14, v53);
    }
    v63 = *((_DWORD *)a2 + 4);
    if (v63)
    {
      *((_DWORD *)a2 + 4) = v63 - 1;
      goto LABEL_54;
    }
LABEL_96:
    __break(0xC471u);
    JUMPOUT(0x195A605BCLL);
  }
  v55 = *(void **)(v10 + 40);
  if (v55)
  {
    if (objc_msgSend(*(id *)(v10 + 40), "conformsToProtocol:", &unk_1EE342188))
      v55 = (void *)objc_msgSend(v55, "superview");
    objc_msgSend(v55, "frame", v104, v105);
    v114[0].origin.x = v94;
    v114[0].origin.y = v95;
    v114[0].size.width = v96;
    v114[0].size.height = v97;
    WebCore::enclosingIntRect(v114, v98);
  }
  else
  {
    v56 = *(_QWORD *)(v10 + 56);
  }
  v57 = (float)(int)v56 * 64.0;
  if (v57 >= 2147483650.0)
  {
    v58 = 0x7FFFFFFF;
  }
  else if (v57 <= -2147483650.0)
  {
    v58 = 0x80000000;
  }
  else
  {
    v58 = (int)v57;
  }
  *(_DWORD *)a3 = v58;
  v59 = *(void **)(v10 + 40);
  if (v59)
  {
    if (objc_msgSend(*(id *)(v10 + 40), "conformsToProtocol:", &unk_1EE342188))
      v59 = (void *)objc_msgSend(v59, "superview");
    objc_msgSend(v59, "frame", v104);
    v114[0].origin.x = v99;
    v114[0].origin.y = v100;
    v114[0].size.width = v101;
    v114[0].size.height = v102;
    WebCore::enclosingIntRect(v114, v103);
  }
  else
  {
    v60 = *(_QWORD *)(v10 + 56);
  }
  v61 = (float)SHIDWORD(v60) * 64.0;
  if (v61 >= 2147483650.0)
  {
    v62 = 0x7FFFFFFF;
  }
  else if (v61 <= -2147483650.0)
  {
    v62 = 0x80000000;
  }
  else
  {
    v62 = (int)v61;
  }
  *((_DWORD *)a3 + 1) = v62;
LABEL_54:
  v64 = *(float *)(*((_QWORD *)a2 + 13) + 184);
  v65 = (float)((float)*(int *)a3 * 0.015625) / v64;
  v66 = (float)((float)*((int *)a3 + 1) * 0.015625) / v64;
  v67 = v65 * 64.0;
  if (v67 >= 2147483650.0)
  {
    v68 = 0x7FFFFFFF;
  }
  else if (v67 <= -2147483650.0)
  {
    v68 = 0x80000000;
  }
  else
  {
    v68 = (int)v67;
  }
  v69 = v66 * 64.0;
  if (v69 >= 2147483650.0)
  {
    v70 = 33554432.0;
  }
  else if (v69 <= -2147483650.0)
  {
    v70 = -33554432.0;
  }
  else
  {
    v70 = (double)(int)v69 * 0.015625;
  }
  v71 = *(WebCore::MutableStyleProperties **)this;
  v72 = (double)v68 * 0.015625;
  if ((int)v72 <= 0xFF && *(_QWORD *)&v72 == COERCE__INT64((double)(int)v72))
  {
    v76 = &WebCore::staticCSSValuePool[4 * (int)v72];
    v77 = v76[16];
    v74 = (uint64_t)(v76 + 16);
    *(_DWORD *)v74 = v77 + 2;
  }
  else
  {
    v74 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v74 = 2;
    v75 = *(_BYTE *)(v74 + 6);
    *(_WORD *)(v74 + 4) = 6;
    *(_BYTE *)(v74 + 6) = v75 & 0xFC;
    *(double *)(v74 + 8) = v72;
  }
  *(_QWORD *)&v114[0].origin.x = v74;
  WebCore::MutableStyleProperties::setProperty(v71, 450, v114, 0);
  v79 = *(_QWORD *)&v114[0].origin.x;
  v114[0].origin.x = 0.0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v79, v78);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = *(WebCore::MutableStyleProperties **)this;
  v81 = (int)v70;
  if ((int)v70 <= 0xFF && *(_QWORD *)&v70 == COERCE__INT64((double)v81))
  {
    v84 = &WebCore::staticCSSValuePool[4 * v81];
    v85 = v84[16];
    v82 = (uint64_t)(v84 + 16);
    *(_DWORD *)v82 = v85 + 2;
  }
  else
  {
    v82 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v82 = 2;
    v83 = *(_BYTE *)(v82 + 6);
    *(_WORD *)(v82 + 4) = 6;
    *(_BYTE *)(v82 + 6) = v83 & 0xFC;
    *(double *)(v82 + 8) = v70;
  }
  *(_QWORD *)&v114[0].origin.x = v82;
  WebCore::MutableStyleProperties::setProperty(v80, 393, v114, 0);
  v87 = *(_QWORD *)&v114[0].origin.x;
  v114[0].origin.x = 0.0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v87, v86);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (v107)
  {
    v88 = v106;
    v106 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v86);
      else
        *(_DWORD *)v88 -= 2;
    }
  }
  result = v104;
  v104 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v86);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (v113)
  {
    if (v112)
    {
      result = v111;
      v111 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WebCore::Node *)WTF::StringImpl::destroy(result, v86);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::snapshotElementVisualOverflowClippedToViewport(WebCore *this, WebCore::LocalFrame *a2, WebCore::RenderLayerModelObject *a3, const WebCore::LayoutRect *a4, __n128 a5)
{
  WebCore *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WebCore::RenderLayerModelObject *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int32 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t i;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t j;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  int v59;
  int8x16_t v61;
  uint64_t v62;
  char v63;
  int8x16_t *v64;

  v6 = this;
  ++*((_DWORD *)a3 + 4);
  v7 = HIDWORD(*(_QWORD *)a4);
  v8 = *(_QWORD *)a4 + 63;
  if ((int)*(_QWORD *)a4 >= 0)
    v8 = *(_QWORD *)a4;
  v9 = v8 >> 6;
  v10 = *(_QWORD *)a4 - (v8 & 0xFFFFFFC0);
  v11 = (int)v7 / 64;
  v12 = v7 - (v8 & 0xFFFFFFC0);
  v14 = *((_DWORD *)a4 + 2);
  v13 = *((_DWORD *)a4 + 3);
  v15 = __OFADD__(v10, v14);
  v16 = v10 + v14;
  if (v15)
    v17 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v17 = v16;
  v15 = __OFADD__(v12, v13);
  v18 = v12 + v13;
  if (v15)
    v19 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v19 = v18;
  v20 = v12 + 32;
  v21 = (v11 + ((int)(v12 + 32) >> 6));
  v22 = v10 + 32;
  v23 = (v9 + ((int)(v10 + 32) >> 6));
  if (v17 >= 0)
    v24 = v17;
  else
    v24 = v17 + 63;
  if (v19 >= 0)
    v25 = v19;
  else
    v25 = v19 + 63;
  v26 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
  if (*(_QWORD *)(v27 + 1272) == v26)
  {
    v30 = *(_QWORD *)(v27 + 1944);
    ++*(_DWORD *)(v30 + 16);
    v31 = *((_DWORD *)a3 + 4);
    if (!v31)
    {
      __break(0xC471u);
LABEL_49:
      JUMPOUT(0x195A60B3CLL);
    }
    *((_DWORD *)a3 + 4) = v31 - 1;
    v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 248) + 64) + 832))(*(_QWORD *)(v30 + 248) + 64, 0, 1);
    v28 = (v23 + v32) | ((unint64_t)(v21 + HIDWORD(v32)) << 32);
    v29 = (WebCore::RenderLayerModelObject *)v30;
    v6 = this;
  }
  else
  {
    v28 = v23 | (v21 << 32);
    v29 = a3;
  }
  v33 = (v24 >> 6) - (v22 >> 6) + ((int)(v17 - (v24 & 0xFFFFFFC0) + 32) >> 6);
  v34 = (v25 >> 6) - (v20 >> 6) + ((int)(v19 - (v25 & 0xFFFFFFC0) + 32) >> 6);
  v35 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 364);
  v36 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 528);
  if (!v36)
    goto LABEL_39;
  v37 = *(_QWORD *)(v36 + 8);
  if (!v37)
    goto LABEL_39;
  v38 = *(_QWORD **)(v37 + 288);
  if (!v38)
    goto LABEL_39;
  for (i = v38[4]; i; i = v40[4])
  {
    v40 = *(_QWORD **)(i + 8);
    if (!v40)
      break;
    v38 = v40;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v38 + 72))(v38) & 1) == 0
    && !(*(unsigned int (**)(_QWORD *))(*v38 + 80))(v38))
  {
    goto LABEL_39;
  }
  v41 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 528);
  if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
    v43 = *(_QWORD **)(v42 + 288);
  else
    v43 = 0;
  for (j = v43[4]; j; j = v45[4])
  {
    v45 = *(_QWORD **)(j + 8);
    if (!v45)
      break;
    v43 = v45;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v43 + 72))(v43) & 1) == 0)
    (*(void (**)(_QWORD *))(*v43 + 80))(v43);
  v46 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v43 + 720))(v43) + 24);
  if (v46 && (v47 = *(_QWORD *)(v46 + 8)) != 0)
    v48 = *(_QWORD *)(v47 + 48);
  else
LABEL_39:
    v48 = 0;
  *(float *)&v62 = (float)v33;
  *((float *)&v62 + 1) = (float)v34;
  v49 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v49 != -1)
  {
    v61.i64[0] = (uint64_t)&v63;
    v64 = &v61;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  a5.n128_u32[0] = v35;
  WebCore::ImageBuffer::create((float *)&v62, 5, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 1u, v48, (uint64_t *)&v64, a5);
  if (v64)
  {
    v50 = (*(uint64_t (**)(int8x16_t *))(v64->i64[0] + 16))(v64);
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v50 + 648))(v50, (float)-(int)v28, (float)(int)((unint64_t)-(uint64_t)(v28 & 0xFFFFFFFF00000000) >> 32));
    v51 = *((_QWORD *)v29 + 18);
    v52 = (WTF *)(*(uint64_t (**)(int8x16_t *))(v64->i64[0] + 16))(v64);
    v53.i64[0] = v28;
    v53.i64[1] = __PAIR64__(v34, v33);
    v54.i64[0] = 0xFE000000FE000000;
    v54.i64[1] = 0xFE000000FE000000;
    v55 = (int8x16_t)vcgtq_s32(v53, v54);
    v56.i64[0] = 0xFE000000FE000000;
    v56.i64[1] = 0xFE000000FE000000;
    v57.i64[0] = 0x8000000080000000;
    v57.i64[1] = 0x8000000080000000;
    v61 = vorrq_s8((int8x16_t)(*(_OWORD *)&v55 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v56, v53), v57, (int8x16_t)vshlq_n_s32(v53, 6uLL)), v55));
    v62 = 0;
    WebCore::RenderLayer::paint(v51, v52, (uint64_t)&v61, &v62, 66048, 0, 0x10066u, 0, 0);
    v58 = (uint64_t)v64;
  }
  else
  {
    v58 = 0;
  }
  *(_QWORD *)v6 = v58;
  v59 = *((_DWORD *)v29 + 4);
  if (!v59)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  *((_DWORD *)v29 + 4) = v59 - 1;
}

void WebCore::ViewTransition::checkForViewportSizeChange(WebCore::ViewTransition *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  WTF *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      __break(0xC471u);
      goto LABEL_40;
    }
    v6 = v5 - 288;
    *(_DWORD *)(v5 - 264) += 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v6 + 1944);
  if (v7)
    ++*(_DWORD *)(v7 + 16);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 248) + 328);
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(v7 + 248);
    v27 = *(_OWORD *)(v11 + 1248);
    v28 = *(_DWORD *)(v11 + 1264);
    if (WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v11, (uint64_t)&v27) != *(float *)(a2 + 76)
      || v12 != *(float *)(a2 + 80))
    {
      goto LABEL_24;
    }
    v14 = *(float *)(a2 + 84);
    v15 = *(float *)(v8 + 592);
    v16 = 1.0;
    v17 = *(_QWORD *)(v8 + 24);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = (*(_DWORD *)v18)++;
        if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8 && !*(_BYTE *)(v18 + 1098))
          v16 = *(float *)(v18 + 356);
        if (v19)
        {
          *(_DWORD *)v18 = v19;
        }
        else
        {
          WebCore::Page::~Page(v18);
          WTF::fastFree(v23, v24);
        }
      }
    }
    if (v14 == (float)(v15 * v16))
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    else
    {
LABEL_24:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)this = 8;
      *((_BYTE *)this + 16) = 1;
    }
    do
    {
      v20 = __ldaxr(v9);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v9));
    if (!v21)
    {
      atomic_store(1u, v9);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E31FE290;
      v25[1] = v9;
      *(_QWORD *)&v27 = v25;
      WTF::ensureOnMainThread();
      v26 = v27;
      *(_QWORD *)&v27 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v22 = *(_DWORD *)(v7 + 16);
    if (v22)
    {
      *(_DWORD *)(v7 + 16) = v22 - 1;
      return;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x195A60D5CLL);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)this = 8;
  *((_BYTE *)this + 16) = 1;
}

void WebCore::ViewTransition::updatePseudoElementStyles(WebCore::ViewTransition *this, unint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v6;
  uint64_t v7;
  WebCore::Style::Resolver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  WTF::StringImpl *v21;
  CGFloat x;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WebCore::RenderLayerModelObject *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGFloat v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  int v55;
  WebCore::RenderElement *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::LocalFrame *v61;
  unsigned int *v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x2_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  int v92;
  int v93;
  CGFloat width;
  int v95;
  WTF::StringImpl *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::MutableStyleProperties *v100;
  char *v101;
  int v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD **v107;
  _DWORD *v108;
  WTF *v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD **v114;
  _DWORD *v115;
  WTF *v116;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  WebCore::LegacyInlineBox *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  CGFloat v130;
  const CGRect *v131;
  int v132;
  void *v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  CGFloat v137;
  const CGRect *v138;
  uint64_t v139;
  void *v140;
  bmalloc::api *v141;
  void *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  WebCore::Node *v145;
  int v146;
  WebCore::ViewTransition *v147;
  char *v148;
  WebCore::Style::Resolver *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  WTF *v153;
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  WTF::StringImpl *v159;
  char v160;
  char v161;
  _QWORD *v162;
  CGRect v163;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A61B2CLL);
  }
  v4 = (WTF::StringImpl *)a2;
  v6 = (_DWORD *)(v3 - 264);
  *(_DWORD *)(v3 - 264) += 2;
  v7 = *(_QWORD *)(v3 + 1040);
  if (!*(_QWORD *)(v7 + 32))
  {
    if (*(_QWORD *)(v7 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(v3 + 1040));
    else
      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(v3 + 1040));
    v143 = *(_QWORD *)(v7 + 32);
    if (*(_DWORD *)(v143 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v143 + 32), (WTF::StringImpl *)a2);
    if (*(_BYTE *)(v143 + 242)
      || *(_BYTE *)(v143 + 243)
      || *(_BYTE *)(v143 + 244)
      || *(_BYTE *)(v143 + 245)
      || *(_BYTE *)(v143 + 246)
      || *(_BYTE *)(v143 + 247)
      || *(_BYTE *)(v143 + 248))
    {
      *(_BYTE *)(v7 + 236) = 1;
    }
  }
  v8 = *(WebCore::Style::Resolver **)(v7 + 32);
  ++*(_DWORD *)v8;
  if (*v6 == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), (void *)a2);
  }
  else
  {
    *v6 -= 2;
  }
  v9 = *((_QWORD *)v4 + 8);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = v9 + 16 * v10;
    if (*(_DWORD *)(v9 - 12))
    {
      v12 = *((_QWORD *)v4 + 8);
      if ((_DWORD)v10)
      {
        v13 = 16 * v10;
        v12 = *((_QWORD *)v4 + 8);
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 16;
          v13 -= 16;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v12 = v9 + 16 * v10;
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = v9 + 16 * v10;
  if (v9)
  {
LABEL_12:
    v14 = v9 + 16 * *(unsigned int *)(v9 - 4);
    goto LABEL_17;
  }
  v14 = 0;
LABEL_17:
  if (v14 != v12)
  {
    v152 = 0;
    v15 = (char *)this + 8;
    while (1)
    {
      v16 = *(_QWORD *)(v12 + 8);
      v17 = *(_QWORD *)(v16 + 56);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v19 = *(_BYTE *)(v16 + 80);
      if (v19)
      {
        v20 = *(_DWORD *)(v16 + 64);
        v21 = *(WTF::StringImpl **)(v16 + 72);
        if (v21)
          *(_DWORD *)v21 += 2;
        v157 = v18;
        v158 = v20;
        v19 = 1;
        v159 = v21;
      }
      else
      {
        v157 = v18;
        LOBYTE(v158) = 0;
      }
      v160 = v19;
      v161 = 1;
      v23 = WebCore::Styleable::renderer((WebCore::Styleable *)&v157);
      if (v23)
      {
        v24 = v23;
        if ((*(_BYTE *)(v23 + 45) & 8) != 0)
        {
          ++*(_DWORD *)(v23 + 16);
          v25 = *(_QWORD *)(v23 + 32);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 8);
            if (v26)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v26 + 104) + 239) & 0x18) != 0)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *(_BYTE *)this = 8;
                *((_BYTE *)this + 16) = 1;
                v27 = *(_DWORD *)(v24 + 16);
                if (!v27)
                  goto LABEL_261;
                x = 0.0;
                v28 = 0;
                *(_DWORD *)(v24 + 16) = v27 - 1;
                goto LABEL_143;
              }
            }
          }
          v156 = 0;
          WebCore::ViewTransition::copyElementBaseProperties((WebCore::ViewTransition *)&v163, (WebCore::RenderLayerModelObject *)v23, (WebCore::LayoutSize *)&v156);
          x = v163.origin.x;
          v149 = v8;
          v150 = v14;
          v148 = v15;
          if ((*(_BYTE *)(v24 + 21) & 0x80) == 0)
          {
            v30 = 0;
            v31 = 0;
            goto LABEL_51;
          }
          v32 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8);
          v33 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 8);
          if (*(_QWORD *)(v33 + 1272) != v32)
          {
            v34 = *(const WebCore::RenderLayerModelObject **)(v24 + 144);
            v163.origin.x = 0.0;
            v31 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)v34, v34, &v163, 0x454u, v29);
            v30 = (WTF::StringImpl *)a2;
            goto LABEL_51;
          }
          v35 = v4;
          v36 = *(_QWORD *)(*(_QWORD *)(v33 + 1944) + 248);
          v37 = *(void **)(v36 + 40);
          if (!v37)
          {
            v38 = *(_QWORD *)(v36 + 56);
            goto LABEL_41;
          }
          if (objc_msgSend(*(id *)(v36 + 40), "conformsToProtocol:", &unk_1EE342188))
            v37 = (void *)objc_msgSend(v37, "superview");
          objc_msgSend(v37, "frame");
          v163.origin.x = v127;
          v163.origin.y = v128;
          v163.size.width = v129;
          v163.size.height = v130;
          WebCore::enclosingIntRect(&v163, v131);
          LODWORD(v38) = v132;
          v133 = *(void **)(v36 + 40);
          if (v133)
          {
            if (objc_msgSend(*(id *)(v36 + 40), "conformsToProtocol:", &unk_1EE342188))
              v133 = (void *)objc_msgSend(v133, "superview");
            objc_msgSend(v133, "frame");
            v163.origin.x = v134;
            v163.origin.y = v135;
            v163.size.width = v136;
            v163.size.height = v137;
            WebCore::enclosingIntRect(&v163, v138);
          }
          else
          {
LABEL_41:
            a2 = *(_QWORD *)(v36 + 56);
          }
          v31 = 0;
          v39 = ((_DWORD)v38 << 6);
          if ((int)v38 < -33554432)
            v39 = 0x80000000;
          v40 = HIDWORD(a2) << 38;
          if (SHIDWORD(a2) < -33554432)
            v40 = 0x8000000000000000;
          v41 = 0x7FFFFFFF00000000;
          if (SHIDWORD(a2) <= 0x1FFFFFF)
            v41 = v40;
          if ((int)v38 > 0x1FFFFFF)
            v39 = 0x7FFFFFFFLL;
          v30 = (WTF::StringImpl *)(v41 | v39);
          v4 = v35;
          v14 = v150;
LABEL_51:
          v155.n128_u64[0] = v31;
          v155.n128_u64[1] = (unint64_t)v30;
          v42 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
          if (*(_BYTE *)(v42 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195A61B90);
          }
          v43 = *(double *)(v42 + 984);
          if (v43 == 0.0)
          {
            v15 = v148;
            v8 = v149;
            goto LABEL_140;
          }
          *(_DWORD *)(*(_QWORD *)&v43 + 24) += 2;
          v44 = *(WTF::StringImpl **)v12;
          v147 = this;
          if (*(_QWORD *)v12)
          {
            v45 = *(_DWORD *)v44;
            v163.origin.x = v43;
            LODWORD(v163.origin.y) = 16;
            *(_DWORD *)v44 = v45 + 4;
            *(_QWORD *)&v163.size.width = v44;
            LOBYTE(v163.size.height) = 1;
            v46 = v45 + 2;
            if (v46)
              *(_DWORD *)v44 = v46;
            else
              WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
          }
          else
          {
            v163.origin.x = v43;
            LODWORD(v163.origin.y) = 16;
            v163.size.width = 0.0;
            LOBYTE(v163.size.height) = 1;
          }
          v47 = WebCore::Styleable::renderer((WebCore::Styleable *)&v163);
          if (!v47)
            goto LABEL_209;
          v48 = v47;
          v49 = (*(unsigned __int8 *)(v47 + 53) >> 3) & 1;
          if ((*(_BYTE *)(v47 + 52) & 7) != 3)
            v49 = 0;
          if (v49 != 1)
          {
LABEL_209:
            this = v147;
            v15 = v148;
            v8 = v149;
            goto LABEL_134;
          }
          v145 = *(WebCore::Node **)&v43;
          ++*(_DWORD *)(v47 + 16);
          if ((*(_BYTE *)(v24 + 45) & 0x20) != 0)
          {
            v50 = v4;
            v123 = WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)v24, (WebCore::RenderObject *)a2);
            v124 = ((_DWORD)v123 << 6);
            if ((int)v123 < -33554432)
              v124 = 0x80000000;
            v125 = (unint64_t)v123 >> 32 << 38;
            if (SHIDWORD(v123) < -33554432)
              v125 = 0x8000000000000000;
            v126 = 0x7FFFFFFF00000000;
            if (SHIDWORD(v123) <= 0x1FFFFFF)
              v126 = v125;
            if ((int)v123 > 0x1FFFFFF)
              v124 = 0x7FFFFFFFLL;
            v51 = v126 | v124;
          }
          else
          {
            v50 = v4;
            v51 = 0;
          }
          if (*(_QWORD *)(v48 + 224) != v31
            || *(WTF::StringImpl **)(v48 + 232) != v30
            || (v52 = WebCore::RenderReplaced::intrinsicSize(v48), v156 != v52)
            || *(_QWORD *)(v48 + 240) != v51)
          {
            v54 = v156;
            *(_QWORD *)(v48 + 264) = v156;
            *(_QWORD *)(v48 + 200) = v54;
            v53 = v155;
            *(__n128 *)(v48 + 224) = v155;
            *(_QWORD *)(v48 + 240) = v51;
            v55 = *(_DWORD *)(v48 + 20);
            if ((v55 & 8) == 0)
            {
              *(_DWORD *)(v48 + 20) = v55 | 8;
              v56 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v48, 0);
              WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v48, v56);
              if ((*(_BYTE *)(v48 + 21) & 0x80) != 0)
              {
                if ((*(_BYTE *)(v48 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195A61C10);
                }
                v57 = *(_QWORD *)(v48 + 144);
                if (v57)
                {
                  v58 = *(_DWORD *)(v57 + 8) + 1;
                  *(_DWORD *)(v57 + 8) = v58;
                }
                else
                {
                  v58 = MEMORY[8];
                }
                *(_QWORD *)(v57 + 24) = *(_QWORD *)(v57 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                if (!v58)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195A61C30);
                }
                *(_DWORD *)(v57 + 8) = v58 - 1;
              }
            }
          }
          v59 = *(_QWORD *)(*((_QWORD *)v50 + 1) + 8);
          if (*(_BYTE *)(v59 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195A61BB0);
          }
          v60 = *(_QWORD *)(v59 + 240);
          v144 = v50;
          if (v60)
          {
            v61 = *(WebCore::LocalFrame **)(v60 + 8);
            if (v61)
            {
              v62 = (unsigned int *)((char *)v61 + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 + 1, v62));
              v64 = 0;
LABEL_79:
              if ((*(_BYTE *)(v48 + 22) & 1) != 0)
              {
                WebCore::snapshotElementVisualOverflowClippedToViewport((WebCore *)&v162, v61, (WebCore::RenderLayerModelObject *)v24, (const WebCore::LayoutRect *)&v155, v53);
                v72 = (uint64_t)v162;
                v152 = 1;
                if ((v64 & 1) != 0)
                  goto LABEL_90;
              }
              else
              {
                v65 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8);
                v66 = *(_QWORD *)(*(_QWORD *)(v65 + 40) + 8);
                v67 = v24;
                if (*(_QWORD *)(v66 + 1272) == v65)
                  v67 = *(_QWORD *)(v66 + 1944);
                v68 = *(_QWORD *)(v67 + 144);
                if (v68)
                {
                  v69 = *(int32x2_t *)(v68 + 8);
                  LODWORD(v70) = vadd_s32(v69, (int32x2_t)0x100000001).u32[0];
                  HIDWORD(v70) = (*(_QWORD *)&v69 | 0x4000000040uLL) >> 32;
                  *(_QWORD *)(v68 + 8) = v70;
                  WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v68, 2);
                  v71 = *(_DWORD *)(v68 + 8);
                  if (!v71)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195A61BF0);
                  }
                  v72 = 0;
                  *(_DWORD *)(v68 + 8) = v71 - 1;
                  if ((v64 & 1) != 0)
                  {
LABEL_90:
                    if (!v72)
                    {
                      v154 = 0;
                      WebCore::RenderViewTransitionCapture::setImage(v48, &v154);
                      v154 = 0;
                      v4 = v144;
                      goto LABEL_132;
                    }
                    v76 = *(_QWORD *)(v72 + 8);
                    if (__ldaxr((unsigned __int8 *)v76))
                    {
                      __clrex();
                      goto LABEL_94;
                    }
                    if (__stxr(1u, (unsigned __int8 *)v76))
LABEL_94:
                      MEMORY[0x19AEA534C](v76);
                    ++*(_QWORD *)(v76 + 8);
                    v78 = __ldxr((unsigned __int8 *)v76);
                    if (v78 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v76))
                      {
LABEL_100:
                        v154 = v72;
                        WebCore::RenderViewTransitionCapture::setImage(v48, &v154);
                        v154 = 0;
                        v79 = *(_QWORD *)(v72 + 8);
                        if (__ldaxr((unsigned __int8 *)v79))
                        {
                          __clrex();
                          goto LABEL_103;
                        }
                        if (__stxr(1u, (unsigned __int8 *)v79))
LABEL_103:
                          MEMORY[0x19AEA534C](v79);
                        v81 = *(_QWORD *)(v79 + 8);
                        v82 = v81 - 1;
                        *(_QWORD *)(v79 + 8) = v81 - 1;
                        if (v81 == 1)
                        {
                          v121 = *(_QWORD *)(v79 + 16);
                          v83 = *(_QWORD *)(v79 + 24);
                          *(_QWORD *)(v79 + 24) = 0;
                          v84 = v121 != 0;
                        }
                        else
                        {
                          v83 = 0;
                          v84 = 1;
                        }
                        v85 = __ldxr((unsigned __int8 *)v79);
                        if (v85 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v79))
                          {
                            if (!v82)
                            {
LABEL_112:
                              if (v83)
                                (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
                              if (!v84)
                                WTF::fastFree((WTF *)v79, (void *)a2);
                            }
LABEL_116:
                            v86 = *(_QWORD *)(v72 + 8);
                            if (__ldaxr((unsigned __int8 *)v86))
                            {
                              __clrex();
                              v4 = v144;
                              goto LABEL_119;
                            }
                            v4 = v144;
                            if (__stxr(1u, (unsigned __int8 *)v86))
LABEL_119:
                              MEMORY[0x19AEA534C](v86);
                            v88 = *(_QWORD *)(v86 + 8);
                            v89 = v88 - 1;
                            *(_QWORD *)(v86 + 8) = v88 - 1;
                            if (v88 == 1)
                            {
                              v122 = *(_QWORD *)(v86 + 16);
                              v90 = *(_QWORD *)(v86 + 24);
                              *(_QWORD *)(v86 + 24) = 0;
                              v91 = v122 != 0;
                            }
                            else
                            {
                              v90 = 0;
                              v91 = 1;
                            }
                            v92 = __ldxr((unsigned __int8 *)v86);
                            if (v92 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v86))
                              {
                                if (!v89)
                                {
LABEL_128:
                                  if (v90)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
                                  if (!v91)
                                    WTF::fastFree((WTF *)v86, (void *)a2);
                                }
LABEL_132:
                                v93 = *(_DWORD *)(v48 + 16);
                                if (!v93)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x195A61BD0);
                                }
                                *(_DWORD *)(v48 + 16) = v93 - 1;
                                this = v147;
                                v15 = v148;
                                v8 = v149;
                                v14 = v150;
                                v43 = *(double *)&v145;
LABEL_134:
                                if (LOBYTE(v163.size.height))
                                {
                                  width = v163.size.width;
                                  v163.size.width = 0.0;
                                  if (width != 0.0)
                                  {
                                    if (**(_DWORD **)&width == 2)
                                      WTF::StringImpl::destroy(*(WTF::StringImpl **)&width, (WTF::StringImpl *)a2);
                                    else
                                      **(_DWORD **)&width -= 2;
                                  }
                                }
                                if (*(_DWORD *)(*(_QWORD *)&v43 + 24) == 2)
                                {
                                  if ((*(_WORD *)(*(_QWORD *)&v43 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(*(WebCore::Node **)&v43, (void *)a2);
                                }
                                else
                                {
                                  *(_DWORD *)(*(_QWORD *)&v43 + 24) -= 2;
                                }
LABEL_140:
                                v95 = *(_DWORD *)(v24 + 16);
                                if (!v95)
                                {
LABEL_261:
                                  __break(0xC471u);
                                  JUMPOUT(0x195A61B64);
                                }
                                *(_DWORD *)(v24 + 16) = v95 - 1;
LABEL_142:
                                v28 = 1;
                                goto LABEL_143;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v86);
                            if (!v89)
                              goto LABEL_128;
                            goto LABEL_132;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow((WTF::Lock *)v79);
                        if (!v82)
                          goto LABEL_112;
                        goto LABEL_116;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v76);
                    goto LABEL_100;
                  }
                }
                else
                {
                  v72 = 0;
                  if ((v64 & 1) != 0)
                    goto LABEL_90;
                }
              }
              v73 = (unsigned int *)((char *)v61 + 8);
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                atomic_store(1u, v73);
                v119 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v119 = off_1E31FE290;
                v119[1] = v73;
                v162 = v119;
                WTF::ensureOnMainThread();
                v120 = v162;
                v162 = 0;
                if (v120)
                  (*(void (**)(_QWORD *))(*v120 + 8))(v120);
              }
              goto LABEL_90;
            }
          }
          else
          {
            v61 = 0;
          }
          v64 = 1;
          goto LABEL_79;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      x = 0.0;
      v28 = 0;
      *(_BYTE *)this = 8;
      *((_BYTE *)this + 16) = 1;
LABEL_143:
      if (v161 && v160 && (v96 = v159, v159 = 0, v96))
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::destroy(v96, (WTF::StringImpl *)a2);
          if ((v28 & 1) == 0)
          {
LABEL_148:
            if (x == 0.0)
              goto LABEL_243;
            if (**(_DWORD **)&x != 1)
            {
              --**(_DWORD **)&x;
              goto LABEL_243;
            }
            v97 = v15;
            v98 = v14;
            v146 = 0;
            goto LABEL_171;
          }
        }
        else
        {
          *(_DWORD *)v96 -= 2;
          if ((v28 & 1) == 0)
            goto LABEL_148;
        }
      }
      else if (!v28)
      {
        goto LABEL_148;
      }
      if (x != 0.0)
      {
        v99 = *(_QWORD *)(v12 + 8);
        v100 = *(WebCore::MutableStyleProperties **)(v99 + 88);
        if (v100)
        {
          v152 |= WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v100, *(const WebCore::StyleProperties **)&x, a3);
        }
        else
        {
          v101 = v15;
          v102 = **(_DWORD **)&x;
          *(CGFloat *)(v99 + 88) = x;
          **(_DWORD **)&x = v102 + 2;
          v153 = *(WTF **)&x;
          WebCore::Style::Resolver::setViewTransitionStyles((uint64_t)v8, 22, (WTF::StringImpl **)v12, (uint64_t *)&v153);
          v103 = v153;
          v153 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 1)
            {
              v151 = v14;
              v112 = *((unsigned int *)v103 + 7);
              if ((_DWORD)v112)
              {
                v113 = 16 * v112;
                v114 = (_DWORD **)(*((_QWORD *)v103 + 2) + 8);
                do
                {
                  v115 = *v114;
                  *v114 = 0;
                  if (v115)
                  {
                    if (*v115 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v115, (WTF::StringImpl *)a2);
                    else
                      *v115 -= 2;
                  }
                  v114 += 2;
                  v113 -= 16;
                }
                while (v113);
              }
              v116 = (WTF *)*((_QWORD *)v103 + 2);
              if ((WTF *)((char *)v103 + 32) != v116 && v116 != 0)
              {
                *((_QWORD *)v103 + 2) = 0;
                *((_DWORD *)v103 + 6) = 0;
                WTF::fastFree(v116, (void *)a2);
              }
              v118 = *((_QWORD *)v103 + 1);
              *((_QWORD *)v103 + 1) = 0;
              v14 = v151;
              if (v118)
                (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
              WTF::fastFree(v103, (void *)a2);
            }
            else
            {
              --*(_DWORD *)v103;
            }
          }
          v152 = 1;
          v15 = v101;
        }
        if (**(_DWORD **)&x == 1)
        {
          v97 = v15;
          v98 = v14;
          v146 = 1;
LABEL_171:
          v105 = *(unsigned int *)(*(_QWORD *)&x + 28);
          if ((_DWORD)v105)
          {
            v106 = 16 * v105;
            v107 = (_DWORD **)(*(_QWORD *)(*(_QWORD *)&x + 16) + 8);
            do
            {
              v108 = *v107;
              *v107 = 0;
              if (v108)
              {
                if (*v108 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v108, (WTF::StringImpl *)a2);
                else
                  *v108 -= 2;
              }
              v107 += 2;
              v106 -= 16;
            }
            while (v106);
          }
          v109 = *(WTF **)(*(_QWORD *)&x + 16);
          if ((WTF *)(*(_QWORD *)&x + 32) != v109 && v109 != 0)
          {
            *(_QWORD *)(*(_QWORD *)&x + 16) = 0;
            *(_DWORD *)(*(_QWORD *)&x + 24) = 0;
            WTF::fastFree(v109, (void *)a2);
          }
          v111 = *(_QWORD *)(*(_QWORD *)&x + 8);
          *(_QWORD *)(*(_QWORD *)&x + 8) = 0;
          v14 = v98;
          v15 = v97;
          if (v111)
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
          WTF::fastFree(*(WTF **)&x, (void *)a2);
          if (!v146)
            goto LABEL_243;
          goto LABEL_161;
        }
        --**(_DWORD **)&x;
      }
LABEL_161:
      v104 = v12 + 16;
      v12 = v11;
      if (v104 != v11)
      {
        v12 = v104;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 16;
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
      if (v12 == v14)
      {
        if ((v152 & 1) != 0)
        {
          v139 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
          if (*(_BYTE *)(v139 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195A61C50);
          }
          *(_DWORD *)(v139 - 264) += 2;
          WebCore::Style::Scope::scheduleUpdate(*(uint64_t **)(v139 + 1040), (WebCore::ShadowRoot *)1);
          if (*(_DWORD *)(v139 - 264) == 2)
          {
            if ((*(_WORD *)(v139 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v139 - 288), v140);
          }
          else
          {
            *(_DWORD *)(v139 - 264) -= 2;
          }
        }
        goto LABEL_242;
      }
    }
    LOBYTE(v157) = 0;
    v161 = 0;
    x = *(double *)(v16 + 48);
    if (x == 0.0)
      goto LABEL_161;
    ++**(_DWORD **)&x;
    goto LABEL_142;
  }
LABEL_242:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
LABEL_243:
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::Style::Resolver::~Resolver(v8);
    bmalloc::api::isoDeallocate(v141, v142);
  }
  else
  {
    --*(_DWORD *)v8;
  }
}

void sub_195A61C60()
{
  objc_end_catch();
  JUMPOUT(0x195A61C6CLL);
}

unsigned int *WebCore::ViewTransition::handleTransitionFrame(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;
  char v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t *v35[2];
  unsigned int *v36;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195A62058);
      }
      v3 = *(unsigned int **)(v2 + 984);
      if (v3)
      {
        v4 = (uint64_t)this;
        v3[6] += 2;
        v36 = v3;
        v35[0] = (uint64_t *)&v36;
        v35[1] = (uint64_t *)this;
        v28 = 12;
        v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
        {
          *(_DWORD *)v5 += 2;
          v29 = v5;
          v7 = WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v28);
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v6);
          else
            *(_DWORD *)v5 -= 2;
        }
        else
        {
          v29 = 0;
          v7 = WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v28);
        }
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          while (1)
          {
            if ((v7 & 1) != 0)
              goto LABEL_44;
            v28 = 13;
            v9 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8)
              *(_DWORD *)v9 += 2;
            v29 = v9;
            if ((WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v28) & 1) != 0)
            {
              v7 = 1;
              goto LABEL_32;
            }
            v25 = 14;
            v10 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8)
              *(_DWORD *)v10 += 2;
            v26 = v10;
            if ((WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v25) & 1) != 0)
            {
              v7 = 1;
              if (v10)
                goto LABEL_30;
              goto LABEL_32;
            }
            v33 = 16;
            v11 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8)
              *(_DWORD *)v11 += 2;
            v34 = v11;
            if ((WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v33) & 1) != 0)
            {
              v7 = 1;
            }
            else
            {
              v31 = 15;
              v12 = *(WTF::StringImpl **)v8;
              if (*(_QWORD *)v8)
              {
                *(_DWORD *)v12 += 2;
                v32 = v12;
                v7 = WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v31);
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v6);
                else
                  *(_DWORD *)v12 -= 2;
              }
              else
              {
                v32 = 0;
                v7 = WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(v35, (WTF::StringImpl *)&v31);
              }
            }
            if (!v11)
              goto LABEL_29;
            if (*(_DWORD *)v11 != 2)
              break;
            WTF::StringImpl::destroy(v11, v6);
            if (v10)
            {
LABEL_30:
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v6);
              else
                *(_DWORD *)v10 -= 2;
            }
LABEL_32:
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v6);
              else
                *(_DWORD *)v9 -= 2;
            }
            v8 = *(_QWORD *)(v8 + 16);
            if (!v8)
              goto LABEL_43;
          }
          *(_DWORD *)v11 -= 2;
LABEL_29:
          if (v10)
            goto LABEL_30;
          goto LABEL_32;
        }
LABEL_43:
        if ((v7 & 1) != 0)
        {
LABEL_44:
          WebCore::ViewTransition::checkForViewportSizeChange((WebCore::ViewTransition *)&v28, v4);
          if (v30)
          {
            v14 = v29;
            v29 = 0;
            LOBYTE(v25) = v28;
            v26 = v14;
            v27 = 1;
            WebCore::ViewTransition::skipViewTransition((uint64_t *)v4, (WTF::StringImpl *)&v25);
            if (v27 != -1)
              ((void (*)(int *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v27])(&v33, &v25);
          }
          else
          {
            WebCore::ViewTransition::updatePseudoElementStyles((WebCore::ViewTransition *)&v22, v4, v13);
            if (v24)
            {
              v20 = v23;
              v23 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v15);
                else
                  *(_DWORD *)v20 -= 2;
              }
            }
          }
          if (v30)
          {
            v21 = v29;
            v29 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v15);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
        }
        else
        {
          *(_BYTE *)(v4 + 72) = 4;
          WebCore::ViewTransition::clearViewTransition((unsigned int *)v4, v6);
          v16 = *(_QWORD *)(v4 + 136);
          v17 = *(_QWORD *)(v16 + 24);
          if (v17 && *(_QWORD *)v17 && (*(_BYTE *)(v17 + 8) & 3) == 0)
          {
            v18 = *(_QWORD *)(v16 + 32);
            if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
              v19 = 0;
            else
              v19 = *(uint64_t **)v18;
            JSC::JSLockHolder::JSLockHolder();
            WebCore::DeferredPromise::callFunction(v16, v19, 0, (objc_class *)0xA);
            MEMORY[0x19AEA32A0](&v28);
          }
        }
        this = v36;
        v36 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)this, v15);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ViewTransition::handleTransitionFrame(void)::$_0::operator()(uint64_t **a1, WTF::StringImpl *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Document *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t result;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1[1];
  v5 = **a1;
  v6 = *(_DWORD *)a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (v8 && (v9 = *(unsigned int *)(v8 + 164), (_DWORD)v9))
  {
    v29 = *(uint64_t **)(v8 + 152);
    v30 = 8 * v9;
    v10 = 1;
    while (1)
    {
      v31 = *v29;
      if (*(_BYTE *)(*v29 + 96))
      {
        v32 = *(_DWORD *)(v31 + 80);
        v33 = *(WTF::StringImpl **)(v31 + 88);
        if (v32 == v6 && v33 == v7)
          break;
      }
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_6;
    }
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
LABEL_6:
  if (!v7)
  {
LABEL_9:
    if ((v10 & 1) == 0)
      goto LABEL_10;
    return 0;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v7, a2);
  if ((v10 & 1) != 0)
    return 0;
LABEL_10:
  v11 = **a1;
  v12 = *(_DWORD *)a2;
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL;
  if (v14 && (v15 = *(unsigned int *)(v14 + 164), (_DWORD)v15))
  {
    v35 = *(uint64_t **)(v14 + 152);
    v36 = 8 * v15;
    while (1)
    {
      v37 = *v35;
      if (*(_BYTE *)(*v35 + 96))
      {
        if (*(_DWORD *)(v37 + 80) == v12 && *(_QWORD *)(v37 + 88) == (_QWORD)v13)
          break;
      }
      v16 = 0;
      ++v35;
      v36 -= 8;
      if (!v36)
        goto LABEL_15;
    }
    v16 = v37 + 16;
  }
  else
  {
    v16 = 0;
  }
LABEL_15:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    return 0;
  do
  {
    v18 = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)v17) - 1;
    v19 = v18 < 2;
    if (v18 < 2)
      break;
    v20 = v4[1];
    if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0)
    {
      if (*(_BYTE *)(v21 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v22 = (WebCore::Document *)(v21 - 288);
    }
    else
    {
      v22 = 0;
    }
    v23 = *((_QWORD *)v22 + 366);
    if (!v23)
    {
      v26 = WTF::fastMalloc((WTF *)0xA0);
      v23 = WebCore::DocumentTimeline::DocumentTimeline(v26, v22, 0.0);
      v27 = (_DWORD *)*((_QWORD *)v22 + 366);
      *((_QWORD *)v22 + 366) = v23;
      if (v27)
      {
        if (v27[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
          v23 = *((_QWORD *)v22 + 366);
        }
        else
        {
          --v27[2];
        }
      }
    }
    v24 = *(unsigned int *)(v23 + 132);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v23 + 120);
      while (*(_QWORD *)(*(_QWORD *)v25 + 72) != *(_QWORD *)v17)
      {
        v25 += 8;
        if (!--v24)
          goto LABEL_30;
      }
      return 1;
    }
LABEL_30:
    v17 = *(_QWORD *)(v17 + 16);
  }
  while (v17);
  return v19;
}

uint64_t WebCore::ViewTransition::viewTransitionNewPseudoForCapturedElement(WebCore::ViewTransition *this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::RenderLayerModelObject *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  char v34;

  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (WTF::StringImpl **)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 8);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = (WTF::StringImpl **)*((_QWORD *)this + 8);
        while ((unint64_t)*v7 + 1 <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (WTF::StringImpl **)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (WTF::StringImpl **)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  if (v9 == v7)
    return 0;
  while (1)
  {
    v10 = v7[1];
    v11 = *((_QWORD *)v10 + 7);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *((_BYTE *)v10 + 80);
        if (v13)
        {
          v14 = *((_DWORD *)v10 + 16);
          v15 = (WTF::StringImpl *)*((_QWORD *)v10 + 9);
          if (v15)
            *(_DWORD *)v15 += 2;
          v30 = v12;
          v31 = v14;
          v13 = 1;
          v32 = v15;
        }
        else
        {
          v30 = v12;
          LOBYTE(v31) = 0;
        }
        v33 = v13;
        v34 = 1;
        v17 = (WebCore::RenderLayerModelObject *)WebCore::Styleable::renderer((WebCore::Styleable *)&v30);
        if (v17 == a2)
        {
          v18 = *v7;
          if (*v7)
          {
            v19 = *(_DWORD *)v18;
            v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1272);
            v27 = 16;
            *(_DWORD *)v18 = v19 + 4;
            v28 = v18;
            v29 = 1;
            if (v19 == -2)
              WTF::StringImpl::destroy(v18, v16);
            else
              *(_DWORD *)v18 = v19 + 2;
          }
          else
          {
            v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1272);
            v27 = 16;
            v28 = 0;
            v29 = 1;
          }
          v20 = WebCore::Styleable::renderer((WebCore::Styleable *)&v26);
          if (v20)
          {
            v21 = (*(unsigned __int8 *)(v20 + 53) >> 3) & 1;
            if ((*(_BYTE *)(v20 + 52) & 7) != 3)
              LOBYTE(v21) = 0;
            if ((v21 & 1) != 0)
              v2 = v20;
            else
              v2 = 0;
          }
          else
          {
            v2 = 0;
          }
          if (v29)
          {
            v22 = v28;
            v28 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v16);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
        }
        if (v34)
        {
          if (v33)
          {
            v23 = v32;
            v32 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v16);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
        }
        if (v17 == a2)
          return v2;
      }
    }
    v24 = v7 + 2;
    v7 = v6;
    if (v24 != v6)
    {
      v7 = v24;
      while ((unint64_t)*v7 + 1 <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v7 == v9)
      return 0;
  }
}

uint64_t WebCore::ViewTransition::stop(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        *(_BYTE *)(this + 72) = 4;
        if (*(_QWORD *)(v3 + 1824) == this)
          return (uint64_t)WebCore::ViewTransition::clearViewTransition((unsigned int *)this, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::ViewTransition::documentElementIsCaptured(WebCore::ViewTransition *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
    goto LABEL_22;
  v3 = (_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 264) += 2;
  v4 = *(_QWORD *)(v2 + 984);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 2;
    v6 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
      v8 = 0;
      if (v5)
        goto LABEL_9;
      goto LABEL_15;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A626C0);
    }
    v7 = *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v7 + 1;
    if (v7 != -1)
    {
      v8 = (*(_DWORD *)(v6 + 20) >> 22) & 1;
      *(_DWORD *)(v6 + 16) = v7;
      if (v5)
      {
LABEL_9:
        *(_DWORD *)(v4 + 24) = v5;
        goto LABEL_10;
      }
LABEL_15:
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      goto LABEL_10;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195A62698);
  }
  v8 = 0;
LABEL_10:
  if (*v3 == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288));
  }
  else
  {
    *v3 -= 2;
  }
  return v8;
}

float WebCore::computeViewportAttributes@<S0>(float *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  BOOL v40;
  float *v41;
  float *v42;
  float *v43;
  float v44;
  float *v45;
  float *v46;
  float v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float result;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v7 = (float)(int)a5;
  v8 = a7 == 1.0;
  v9 = (float)a4;
  v10 = a1[1];
  v11 = a1[2];
  v12 = 1.0 / a7;
  v13 = v12 * (float)a3;
  v14 = v12 * (float)a4;
  if (v8)
  {
    v15 = (float)SHIDWORD(a5);
  }
  else
  {
    v7 = v12 * (float)(int)a5;
    v15 = v12 * (float)SHIDWORD(a5);
  }
  if (v8)
  {
    v16 = (float)a3;
  }
  else
  {
    v9 = v14;
    v16 = v13;
  }
  v18 = a1[3];
  v17 = a1[4];
  v67 = v18;
  v68 = v10;
  v65 = v17;
  v66 = v11;
  v19 = a1[5];
  v20 = a1[6];
  v63 = v20;
  v64 = v19;
  v22 = a1[7];
  v21 = a1[8];
  v61 = v21;
  v62 = v22;
  v23 = a1[9];
  v60 = v23;
  if ((int)v10 == -3)
  {
    v68 = v9;
    v10 = v9;
  }
  else if ((int)v10 == -2)
  {
    v68 = v16;
    v10 = v16;
  }
  if ((int)v17 == -3)
  {
    v65 = v9;
    v17 = v9;
  }
  else if ((int)v17 == -2)
  {
    v65 = v16;
    v17 = v16;
  }
  v24 = *(unsigned __int8 *)a1;
  if (*(_BYTE *)a1)
  {
    if (v24 == 3)
    {
      if ((int)v11 == -3)
      {
        v66 = v9;
        v11 = v9;
      }
      else if ((int)v11 == -2)
      {
        v66 = v16;
        v11 = v16;
      }
      if ((int)v18 == -3)
      {
        v67 = v9;
        v18 = v9;
      }
      else if ((int)v18 == -2)
      {
        v67 = v16;
        v18 = v16;
      }
      if ((int)v19 == -3)
      {
        v64 = v9;
        v19 = v9;
      }
      else if ((int)v19 == -2)
      {
        v64 = v16;
        v19 = v16;
      }
      if ((int)v20 == -3)
      {
        v63 = v9;
        v20 = v9;
      }
      else if ((int)v20 == -2)
      {
        v63 = v16;
        v20 = v16;
      }
      if (v11 != -1.0 || v18 != -1.0)
      {
        v59 = v16;
        if (v18 == -1.0)
        {
          v35 = &v59;
        }
        else
        {
          v35 = &v67;
          if (v16 != -1.0 && v18 > v16)
            v35 = &v59;
        }
        if (v11 == -1.0)
        {
          v36 = v35;
        }
        else
        {
          v36 = &v66;
          if (*v35 != -1.0 && v11 < *v35)
            v36 = v35;
        }
        v10 = *v36;
        v68 = *v36;
      }
      if (v19 != -1.0 || v20 != -1.0)
      {
        v59 = v9;
        if (v20 == -1.0)
        {
          v37 = &v59;
        }
        else
        {
          v37 = &v63;
          if (v9 != -1.0 && v20 > v9)
            v37 = &v59;
        }
        if (v19 == -1.0)
        {
          v38 = v37;
        }
        else
        {
          v38 = &v64;
          if (*v37 != -1.0 && v19 < *v37)
            v38 = v37;
        }
        v17 = *v38;
        v65 = *v38;
      }
      v39 = -1.0;
      if (v21 != -1.0 && v23 != -1.0)
      {
        if (v21 >= v23)
          v23 = v21;
        v60 = v23;
      }
      if (v22 != -1.0)
      {
        v40 = v22 < v23 || v23 == -1.0;
        v41 = &v60;
        if (v40)
          v41 = &v62;
        if (v21 == -1.0)
        {
          v42 = v41;
        }
        else
        {
          v42 = &v61;
          if (*v41 != -1.0 && v21 < *v41)
            v42 = v41;
        }
        v39 = *v42;
        v62 = *v42;
      }
      v22 = -1.0;
      if (v10 == -1.0 && v39 == -1.0)
      {
        v68 = v16;
        v10 = v16;
      }
      if (v10 == -1.0 && v17 == -1.0)
      {
        v10 = v16 / v39;
        v68 = v16 / v39;
      }
      if (v10 == -1.0)
      {
        v10 = (float)(v16 * v17) / v9;
        v68 = v10;
      }
      if (v17 == -1.0)
      {
        v17 = (float)(v9 * v10) / v16;
        v65 = v17;
      }
      if (v39 != -1.0 || v23 != -1.0)
      {
        if (v39 == -1.0)
        {
          v43 = &v60;
        }
        else
        {
          v43 = &v62;
          if (v23 != -1.0 && v23 < v39)
            v43 = &v60;
        }
        v44 = v16 / *v43;
        v59 = v44;
        if (v10 == -1.0)
        {
          v45 = &v59;
        }
        else
        {
          v45 = &v68;
          if (v44 != -1.0 && v10 < v44)
            v45 = &v59;
        }
        if (v39 == -1.0)
        {
          v46 = &v60;
        }
        else
        {
          v46 = &v62;
          if (v23 != -1.0 && v23 < v39)
            v46 = &v60;
        }
        v10 = *v45;
        v47 = v9 / *v46;
        v59 = v47;
        if (v17 == -1.0)
        {
          v48 = &v59;
        }
        else
        {
          v48 = &v65;
          if (v47 != -1.0 && v17 < v47)
            v48 = &v59;
        }
        v17 = *v48;
        v22 = v62;
      }
      v10 = fmaxf(v10, 1.0);
      v17 = fmaxf(v17, 1.0);
    }
    else
    {
      v25 = 1.0;
      if (v10 >= 1.0)
        v26 = v10;
      else
        v26 = 1.0;
      v27 = fminf(v26, 10000.0);
      if (v10 != -1.0)
        v10 = v27;
      if (v17 >= 1.0)
        v25 = v17;
      v28 = fminf(v25, 10000.0);
      if (v17 != -1.0)
        v17 = v28;
      v29 = 0.1;
      if (v22 >= 0.1)
        v30 = v22;
      else
        v30 = 0.1;
      v31 = fminf(v30, 10.0);
      if (v22 != -1.0)
        v22 = v31;
      if (v21 >= 0.1)
        v32 = v21;
      else
        v32 = 0.1;
      v33 = fminf(v32, 10.0);
      if (v21 != -1.0)
        v21 = v33;
      if (v23 >= 0.1)
        v29 = v23;
      v34 = fminf(v29, 10.0);
      if (v23 != -1.0)
        v23 = v34;
    }
  }
  if (v21 == -1.0)
    v21 = 0.25;
  v49 = fminf(v21, 5.0);
  if (v23 == -1.0)
  {
    v21 = v49;
    v23 = 5.0;
  }
  if (v21 >= v23)
    v50 = v21;
  else
    v50 = v23;
  *(float *)(a6 + 12) = v21;
  *(float *)(a6 + 16) = v50;
  if (v22 == -1.0)
  {
    v51 = (float)a2;
    if (v10 == -1.0)
      v52 = (float)a2;
    else
      v52 = v10;
    v53 = v7 / v52;
    v54 = v15 / v17;
    if (v53 >= (float)(v15 / v17))
      v54 = v53;
    if (v17 != -1.0)
      v53 = v54;
    if (v21 < v53)
      v21 = v53;
    if (v21 >= v50)
      v21 = v50;
    *(float *)(a6 + 8) = v21;
    if (v10 != -1.0)
      goto LABEL_164;
  }
  else
  {
    if (v21 >= v22)
      v55 = v21;
    else
      v55 = v22;
    if (v55 >= v50)
      v21 = v50;
    else
      v21 = v55;
    *(float *)(a6 + 8) = v21;
    if (v10 != -1.0)
    {
LABEL_164:
      v51 = v10;
      goto LABEL_165;
    }
    if (v17 == -1.0)
      v51 = v7 / v21;
    else
      v51 = (float)(v7 / v15) * v17;
  }
LABEL_165:
  if (v17 == -1.0)
    v17 = (float)(v15 / v7) * v51;
  if (v24 == 4)
  {
    v56 = v7 / v21;
    if (v51 < v56)
      v51 = v56;
    v57 = v15 / v21;
    if (v17 < v57)
      v17 = v57;
  }
  *(float *)a6 = v51;
  *(float *)(a6 + 4) = v17;
  *(_QWORD *)(a6 + 20) = *((_QWORD *)a1 + 5);
  result = a1[12];
  *(float *)(a6 + 28) = result;
  *(_BYTE *)(a6 + 32) = *((_BYTE *)a1 + 52);
  return result;
}

float32_t WebCore::computeMinimumScaleFactorForContentContained(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  float32x2_t v3;

  v3 = vdiv_f32(vcvt_f32_s32(*a2), vcvt_f32_s32(*a3));
  if (v3.f32[0] < v3.f32[1])
    v3.f32[0] = v3.f32[1];
  if (*(float *)(a1 + 12) >= v3.f32[0])
    v3.i32[0] = *(_DWORD *)(a1 + 12);
  return v3.f32[0];
}

float *WebCore::restrictMinimumScaleFactorToViewportSize(float *result, uint64_t a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = (float)(int)a2;
  v4 = (float)SHIDWORD(a2);
  if (a3 != 1.0)
  {
    v5 = 1.0 / a3;
    v3 = v5 * v3;
    v4 = v5 * v4;
  }
  v6 = v3 / *result;
  if (v6 < (float)(v4 / result[1]))
    v6 = v4 / result[1];
  if (result[3] >= v6)
    v6 = result[3];
  result[3] = v6;
  return result;
}

float WebCore::restrictScaleFactorToInitialScaleIfNotUserScalable(float *a1)
{
  float result;

  result = a1[5];
  if (result == 0.0)
  {
    result = a1[2];
    a1[3] = result;
    a1[4] = result;
  }
  return result;
}

uint64_t WebCore::parseViewportFitValue(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5)
{
  if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "auto", 5uLL) & 1) == 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "contain", 8uLL) & 1) != 0)
      return 1;
    if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "cover", 6uLL) & 1) != 0)
      return 2;
    (*(void (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 1, a3, a4, a1, a2);
  }
  return 0;
}

uint64_t WebCore::operator<<(uint64_t a1)
{
  WTF::TextStream *v2;
  WTF::TextStream *v3;
  WTF::TextStream *v4;

  ++*(_DWORD *)(a1 + 24);
  v2 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v3 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(v3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  --*(_DWORD *)(a1 + 24);
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;

  v2 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v2 != -1)
  {
    v12 = (WTF::StringImpl *)&v10;
    v11 = &v12;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if (CGColorSpaceEqualToColorSpace())
    goto LABEL_10;
  v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
  if (v3 != -1)
  {
    v12 = (WTF::StringImpl *)&v10;
    v11 = &v12;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if (CGColorSpaceEqualToColorSpace())
    goto LABEL_10;
  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v12 = (WTF::StringImpl *)&v10;
    v11 = &v12;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if (CGColorSpaceEqualToColorSpace())
  {
LABEL_10:
    WTF::TextStream::operator<<();
  }
  else
  {
    v6 = CGColorSpaceCopyICCProfileDescription();
    if (v6)
    {
      v7 = (const void *)v6;
      MEMORY[0x19AEA5508](&v12, v6);
      WTF::TextStream::operator<<();
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      CFRelease(v7);
    }
  }
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  else
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  else
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  char v1;

  v1 = *(_BYTE *)(a1 + 28);
  WTF::TextStream::operator<<();
  if ((v1 & 4) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  else
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

{
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return WebCore::operator<<(a1);
  else
    return WebCore::operator<<(a1);
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  uint64_t v2;

  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return a1;
}

{
  uint64_t v2;

  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return a1;
}

{
  WTF::TextStream *v2;

  v2 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

{
  WTF::TextStream::operator<<();
  return a1;
}

uint64_t WebCore::ViewTransition::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::ViewTransition::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void WebCore::TrustedTypePolicyFactory::~TrustedTypePolicyFactory(WebCore::TrustedTypePolicyFactory *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::TrustedTypePolicy *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33A8AD8;
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet((_QWORD *)this + 5, a2);
  v4 = (WebCore::TrustedTypePolicy *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
    {
      WebCore::TrustedTypePolicy::~TrustedTypePolicy(v4, v3);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 2);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v3);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF::StringImpl *v3;
  WebCore::TrustedTypePolicy *v4;
  void *v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  *(_QWORD *)this = &off_1E33A8AD8;
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet((_QWORD *)this + 5, a2);
  v4 = (WebCore::TrustedTypePolicy *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
    {
      WebCore::TrustedTypePolicy::~TrustedTypePolicy(v4, v3);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 2);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v3);
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, v5);
}

uint64_t *WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **v23;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::AtomString> *,WTF::ListHashSetNode<WTF::AtomString> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::AtomString>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v7;
    v12 = (uint64_t *)(v6 + 8 * (v9 & v7));
    v13 = (_QWORD *)*v12;
    if (*v12 == -1)
    {
      v8 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_10;
    }
    if (!v13)
      break;
    if (*v13 == *(_QWORD *)a2)
    {
      v17 = 0;
      goto LABEL_28;
    }
LABEL_10:
    v9 = i + v11;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v12 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v14 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v14 += 2;
  result[1] = 0;
  result[2] = 0;
  *result = (uint64_t)v14;
  *v12 = (uint64_t)result;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
    {
LABEL_23:
      v12 = WTF::HashTable<WTF::ListHashSetNode<WTF::AtomString> *,WTF::ListHashSetNode<WTF::AtomString> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::AtomString>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>>::expand(v4, v12);
      result = (uint64_t *)*v12;
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_23;
  }
  v22 = v4[2];
  result[1] = v22;
  result[2] = 0;
  if (v22)
    v23 = (uint64_t **)(v22 + 16);
  else
    v23 = (uint64_t **)(v4 + 1);
  *v23 = result;
  v4[2] = (uint64_t)result;
  v13 = (_QWORD *)*v12;
  v17 = 1;
LABEL_28:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

WebCore::CapturedElement *WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::UniqueRef<WebCore::CapturedElement>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::CapturedElement *result;
  WTF *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_DWORD *)*a3 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v16 = v11;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *v16 = v12;
    v18 = *a4;
    *a4 = 0;
    result = v16[1];
    v16[1] = v18;
    if (result)
    {
      WebCore::CapturedElement::~CapturedElement(result, (WTF::StringImpl *)a2);
      result = (WebCore::CapturedElement *)WTF::fastFree(v20, v21);
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v29 = *a2;
    if (*a2)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
        goto LABEL_31;
    }
    else if (3 * v32 <= 4 * v31)
    {
      if (!(_DWORD)v32)
      {
        v33 = 8;
LABEL_34:
        result = (WebCore::CapturedElement *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, v33, v16);
        v16 = (WTF::StringImpl **)result;
        v29 = *a2;
        if (*a2)
          v32 = *(unsigned int *)(v29 - 4);
        else
          v32 = 0;
        goto LABEL_38;
      }
LABEL_31:
      v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
      goto LABEL_34;
    }
LABEL_38:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v29 + 16 * v32;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (v17 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a1 + 16) = 0;
  v25 = v8 + 16 * v15;
  v26 = *a4;
  *a4 = 0;
  result = *(WebCore::CapturedElement **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (result)
  {
    WebCore::CapturedElement::~CapturedElement(result, (WTF::StringImpl *)a2);
    return (WebCore::CapturedElement *)WTF::fastFree(v27, v28);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::CapturedElement *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WebCore::CapturedElement *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::CapturedElement *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v23 = v22 & v20;
            v22 = ++v21 + v23;
          }
          while (*(_QWORD *)(v19 + 16 * v23));
          v24 = (WTF::StringImpl **)(v19 + 16 * v23);
          v25 = v24[1];
          v24[1] = 0;
          if (v25)
          {
            WebCore::CapturedElement::~CapturedElement(v25, v10);
            WTF::fastFree(v26, v27);
            v28 = *v24;
            *v24 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v10);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          else
          {
            *v24 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *v24 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(WTF::StringImpl **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v24[1] = v31;
          v32 = *(WebCore::CapturedElement **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            WebCore::CapturedElement::~CapturedElement(v32, v10);
            WTF::fastFree(v33, v34);
          }
          v35 = *v13;
          *v13 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v10);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::CapturedElement **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::CapturedElement::~CapturedElement(v16, v10);
            WTF::fastFree(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_BYTE *WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CapturedElement,WebCore::CapturedElement&>(_QWORD *a1, uint64_t *a2)
{
  _BYTE *result;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;

  result = (_BYTE *)WTF::fastMalloc((WTF *)0x60);
  v5 = result;
  *result = 0;
  result[8] = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v6 = *a2;
    if (!*a2)
      goto LABEL_12;
    v7 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
LABEL_7:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      result = (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_12:
      *(_QWORD *)v5 = v6;
      v5[8] = 1;
      goto LABEL_13;
    }
    result = (_BYTE *)MEMORY[0x19AEA534C](v7);
    goto LABEL_7;
  }
LABEL_13:
  v10 = *((_OWORD *)a2 + 2);
  *((_OWORD *)v5 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)v5 + 2) = v10;
  v11 = (_DWORD *)a2[6];
  if (v11)
    ++*v11;
  *((_QWORD *)v5 + 6) = v11;
  v12 = (unsigned int *)a2[7];
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *((_QWORD *)v5 + 7) = v12;
  v5[64] = 0;
  v5[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    *((_DWORD *)v5 + 16) = *((_DWORD *)a2 + 16);
    v14 = (_DWORD *)a2[9];
    if (v14)
      *v14 += 2;
    *((_QWORD *)v5 + 9) = v14;
    v5[80] = 1;
  }
  v15 = (_DWORD *)a2[11];
  if (v15)
    ++*v15;
  *((_QWORD *)v5 + 11) = v15;
  *a1 = v5;
  return result;
}

void WebCore::CapturedElement::~CapturedElement(WebCore::CapturedElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;
  WTF *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v17 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v17)
      {
        v18 = 16 * v17;
        v19 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
          {
            if (*v20 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, a2);
            else
              *v20 -= 2;
          }
          v19 += 2;
          v18 -= 16;
        }
        while (v18);
      }
      v21 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v21 && v21 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v21, a2);
      }
      v23 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  if (*((_BYTE *)this + 80))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v31 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v31)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v31));
      v32 = *(WTF **)(v5 + 16);
      if (v32)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v32, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v24 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v24)
      {
        v25 = 16 * v24;
        v26 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*v27 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, a2);
            else
              *v27 -= 2;
          }
          v26 += 2;
          v25 -= 16;
        }
        while (v25);
      }
      v28 = *(WTF **)(v8 + 16);
      if ((WTF *)(v8 + 32) != v28 && v28 != 0)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v28, a2);
      }
      v30 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      WTF::fastFree((WTF *)v8, a2);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  if (*((_BYTE *)this + 8))
  {
    v9 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (__ldaxr((unsigned __int8 *)v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v10))
      {
        goto LABEL_20;
      }
      MEMORY[0x19AEA534C](v10);
LABEL_20:
      v12 = *(_QWORD *)(v10 + 8);
      v13 = v12 - 1;
      *(_QWORD *)(v10 + 8) = v12 - 1;
      if (v12 == 1)
      {
        v33 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        v15 = v33 != 0;
      }
      else
      {
        v14 = 0;
        v15 = 1;
      }
      v16 = __ldxr((unsigned __int8 *)v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
          if (v13)
            return;
LABEL_28:
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          if (!v15)
            WTF::fastFree((WTF *)v10, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_28;
    }
  }
}

float WebCore::numericPrefix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if ((a4 & 0xFF00000000) != 0)
    WTF::charactersToFloat();
  else
    WTF::charactersToFloat();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 1, a3, a4, a1, a2);
  return 0.0;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15)
      {
        if (v16 != -1)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          *(_DWORD *)(v26 + 8) = *(_DWORD *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            if (*(_DWORD *)(v28 + 24) == 2)
            {
              if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v28);
            }
            else
            {
              *(_DWORD *)(v28 + 24) -= 2;
            }
          }
          if (v15 == a3)
            v14 = v26;
        }
      }
      else
      {
        *v15 = 0;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A88F0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A88F0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  _DWORD *v2;
  unsigned int *v3;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)*((_QWORD *)result + 1);
      ++v2[6];
      result = WebCore::ViewTransition::callUpdateCallback(v3);
      if (v2[6] == 1)
        return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[6];
    }
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::~__func(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33A8918;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

void std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::~__func(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33A8918;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_1E33A8918;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 24);
  result[2] = v4;
  return result;
}

uint64_t std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E33A8918;
  a2[1] = v2;
  v3 = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(v3 + 24);
  a2[2] = v3;
  return result;
}

_DWORD *std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::destroy(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

void std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  _DWORD *v2;

  v2 = (_DWORD *)__p[2];
  __p[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::ViewTransition::skipViewTransition(WebCore::ExceptionOr<JSC::JSValue> &&)::$_2,std::allocator<WebCore::ExceptionOr<JSC::JSValue> &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::JSPromise *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSPromise *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  char v30[8];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 112);
  v3 = **(_QWORD **)(v2 + 24);
  if ((v3 & 0xFFFE000000000002) != 0)
  {
    v4 = 0;
  }
  else if (*(_BYTE *)(v3 + 5) == 68)
  {
    v4 = **(JSC::JSPromise ***)(v2 + 24);
  }
  else
  {
    v4 = 0;
  }
  result = JSC::JSPromise::status(v4, *(JSC::VM **)(**(_QWORD **)(v2 + 32) + 56));
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 1)
  {
    v14 = *(_QWORD *)(v1 + 136);
    v15 = *(_QWORD *)(v14 + 24);
    if (!v15 || !*(_QWORD *)v15 || (*(_BYTE *)(v15 + 8) & 3) != 0)
      return result;
    v16 = *(_QWORD *)(v14 + 32);
    if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
      v17 = 0;
    else
      v17 = *(uint64_t **)v16;
    v18 = v17[7];
    MEMORY[0x19AEA3294](v30, v18);
    v19 = *(_QWORD *)(v1 + 112);
    v20 = **(_QWORD **)(v19 + 24);
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      v21 = 0;
    }
    else if (*(_BYTE *)(v20 + 5) == 68)
    {
      v21 = **(JSC::JSPromise ***)(v19 + 24);
    }
    else
    {
      v21 = 0;
    }
    v22 = JSC::JSPromise::result(v21, *(JSC::VM **)(**(_QWORD **)(v19 + 32) + 56));
    if (!*(_QWORD *)(v18 + 16))
    {
      v13 = v22;
      v10 = v14;
      v11 = v17;
      v12 = 2;
LABEL_26:
      WebCore::DeferredPromise::callFunction(v10, v11, v12, (objc_class *)v13);
      return MEMORY[0x19AEA32A0](v30);
    }
    v29 = *(_QWORD *)(v18 + 16);
    v23 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v17);
    if (!(*(unsigned int (**)(_QWORD *))(*v23 + 64))(v23))
    {
LABEL_30:
      WebCore::reportException((JSC::JSGlobalObject *)v17, v29, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v30);
    }
    v24 = v23[43];
    if (*(_QWORD *)(v18 + 24) == v29)
    {
LABEL_45:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v14 + 44) = 1;
      goto LABEL_30;
    }
    if (!v24)
      goto LABEL_30;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_39:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_44:
        if (!v27)
          goto LABEL_30;
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_44;
  }
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
  {
    v8 = *(_QWORD *)(v6 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
      v9 = 0;
    else
      v9 = *(uint64_t **)v8;
    JSC::JSLockHolder::JSLockHolder();
    v10 = v6;
    v11 = v9;
    v12 = 0;
    v13 = 10;
    goto LABEL_26;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A8960;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A8960;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = (unsigned int *)a1[2];
  *result = &off_1E33A8960;
  result[1] = v4;
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
  }
  result[2] = v3;
  v6 = a1[3];
  if (v6)
    ++*(_DWORD *)(v6 + 16);
  result[3] = v6;
  return result;
}

_QWORD *std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = result[1];
  *a2 = &off_1E33A8960;
  a2[1] = v2;
  v3 = (unsigned int *)result[2];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  a2[2] = v3;
  v5 = result[3];
  if (v5)
    ++*(_DWORD *)(v5 + 16);
  a2[3] = v5;
  return result;
}

unsigned int *std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  _DWORD *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_DWORD *)__p[3];
  __p[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)__p[2];
  __p[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::ViewTransition::callUpdateCallback(void)::$_0,std::allocator<WebCore::ViewTransition::callUpdateCallback(void)::$_0>,void ()(void)>::operator()(WTF::StringImpl *result, void *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::JSPromise *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderLayerCompositor *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSPromise *v24;
  objc_class *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::JSPromise *v29;
  uint64_t v30;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSPromise *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF ****v51;
  uint64_t v52;
  int v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  WTF ***v64;
  char v65;
  int v66;
  WTF **v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  WTF::StringImpl *v86;
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  void *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t *v98;
  WTF *v99;
  int v100;
  WTF::StringImpl *v101;
  WTF *v102;
  uint64_t v103;
  _DWORD *v104;
  WTF *v105;
  uint64_t v107;
  WTF *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  WTF ***v113;
  uint64_t v114;
  WTF **v115;
  WTF *v116;
  WTF::StringImpl *v118;
  void *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t *v123;
  WTF::StringImpl *v124;
  void *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t *v129;
  WTF *v130;
  int v131;
  WTF::StringImpl *v132;
  WTF *v133;
  uint64_t v134;
  _DWORD *v135;
  WTF *v136;
  uint64_t v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF *v141;
  WTF *v142;
  WTF ***v143;
  uint64_t v144;
  WTF **v145;
  WTF *v146;
  uint64_t v148;
  WTF::StringImpl *v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  char v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  int v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF ***v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD **v165;
  _DWORD *v166;
  WTF *v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD **v172;
  _DWORD *v173;
  WTF *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD **v179;
  _DWORD *v180;
  WTF *v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD **v186;
  _DWORD *v187;
  WTF *v188;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF *v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  WTF ***v195;
  WTF *v196;
  WebCore::MutableStyleProperties *v197;
  WTF::StringImpl *v198;
  WTF ***v199;
  WTF::StringImpl *v200;
  WTF ***v201;
  WTF::StringImpl *v202;
  WTF ***v203;
  WTF::StringImpl *v204;
  WTF ***v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  int v210;
  uint64_t v211;
  int v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  _DWORD *v225;
  uint64_t v226;
  bmalloc::api *v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  _DWORD **v231;
  _DWORD *v232;
  WTF *v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD **v238;
  _DWORD *v239;
  WTF *v240;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD **v245;
  _DWORD *v246;
  WTF *v247;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _DWORD **v252;
  _DWORD *v253;
  WTF *v254;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  WTF ***v263;
  WTF ***v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  WTF ***v268;
  WTF ***v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  WTF ***v273;
  WTF ***v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  WTF ***v278;
  WTF ***v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  const WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  _QWORD *v293;
  WTF *v294;
  WTF::StringImpl *v295;
  uint64_t v296;
  unsigned __int8 *v297;
  int v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  _DWORD *v303;
  uint64_t v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  char v307[8];
  WTF::StringImpl *v308;
  char v309;
  WTF::StringImpl *v310;
  _DWORD *v311;
  WTF *v312;
  WTF *v313;
  WTF::StringImpl *v314;
  WTF *v315;
  WTF *v316;
  WTF::StringImpl *v317;
  _BYTE v318[32];
  WTF *v319;
  WTF *v320;
  WTF::StringImpl *v321;
  _QWORD v322[4];
  WTF::StringImpl *v323;
  WTF ***v324;
  uint64_t v325;
  WTF **v326;
  WTF ****v327;
  char v328;
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *(_DWORD **)(v2 + 8);
    if (v3)
    {
      v4 = result;
      v5 = *((_QWORD *)result + 1);
      ++v3[6];
      v6 = *(_QWORD *)(v5 + 144);
      *(_QWORD *)(v5 + 144) = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 48) == 1)
        {
          v35 = *(_QWORD *)(v6 + 64);
          *(_QWORD *)(v6 + 64) = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v36 = *(_QWORD *)(v6 + 56);
          if (v36)
          {
            *(_QWORD *)(v36 + 8) = 0;
            v37 = *(unsigned int **)(v6 + 56);
            *(_QWORD *)(v6 + 56) = 0;
            if (v37)
            {
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                atomic_store(1u, v37);
                WTF::fastFree((WTF *)v37, a2);
              }
            }
          }
          else
          {
            *(_QWORD *)(v6 + 56) = 0;
          }
          WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v6);
          WTF::fastFree(v40, v41);
        }
        else
        {
          --*(_DWORD *)(v6 + 48);
        }
      }
      v7 = *((_QWORD *)v4 + 3);
      v8 = **(_QWORD **)(v7 + 24);
      if ((v8 & 0xFFFE000000000002) != 0)
      {
        v9 = 0;
      }
      else if (*(_BYTE *)(v8 + 5) == 68)
      {
        v9 = **(JSC::JSPromise ***)(v7 + 24);
      }
      else
      {
        v9 = 0;
      }
      result = (WTF::StringImpl *)JSC::JSPromise::status(v9, *(JSC::VM **)(**(_QWORD **)(v7 + 32) + 56));
      if (!(_DWORD)result)
        goto LABEL_599;
      v303 = v3;
      if ((_DWORD)result == 1)
      {
        v10 = *(_QWORD *)(v5 + 120);
        v11 = *(_QWORD *)(v10 + 24);
        if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)(v10 + 32);
          if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
            v13 = 0;
          else
            v13 = *(uint64_t **)v12;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v10, v13, 0, (objc_class *)0xA);
          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v324);
        }
        if (*(_BYTE *)(v5 + 72) == 4)
          goto LABEL_599;
        v14 = *(_QWORD *)(v5 + 8);
        if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
        {
          if (*(_BYTE *)(v15 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195A663B0);
          }
          v16 = (WebCore::RenderLayerCompositor *)(v15 - 288);
        }
        else
        {
          v16 = 0;
        }
        WebCore::Document::clearRenderingIsSuppressedForViewTransition(v16);
        v42 = *(_QWORD *)(v5 + 8);
        if (v42 && (v43 = *(_QWORD *)(v42 + 8)) != 0)
        {
          if (*(_BYTE *)(v43 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195A663D0);
          }
          *(_DWORD *)(v43 - 264) += 2;
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v43 - 288));
          if (*(_DWORD *)(v43 - 264) == 2)
          {
            if ((*(_WORD *)(v43 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v43 - 288), v44);
          }
          else
          {
            *(_DWORD *)(v43 - 264) -= 2;
          }
        }
        else
        {
          WebCore::Document::updateStyleIfNeeded(0);
        }
        WebCore::ViewTransition::checkForViewportSizeChange((WebCore::ViewTransition *)v307, v5);
        if (v309)
        {
          v46 = v308;
          v308 = 0;
          LOBYTE(v324) = v307[0];
          v325 = (uint64_t)v46;
          LODWORD(v326) = 1;
          result = (WTF::StringImpl *)WebCore::ViewTransition::skipViewTransition((uint64_t *)v5, (WTF::StringImpl *)&v324);
          if ((_DWORD)v326 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v326])(&v320, &v324);
LABEL_595:
          if (v309)
          {
            result = v308;
            v308 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
              else
                *(_DWORD *)result -= 2;
            }
          }
LABEL_599:
          if (v3[6] == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
          --v3[6];
          return result;
        }
        v48 = *(_QWORD *)(v5 + 8);
        if (!v48 || (v49 = *(_QWORD *)(v48 + 8)) == 0)
        {
          v304 = 0;
          v305 = 0;
          v306 = 0;
          goto LABEL_89;
        }
        if (*(_BYTE *)(v49 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x195A6643CLL);
        }
        v320 = 0;
        v321 = 0;
        v322[0] = 0;
        v50 = *(_QWORD *)(v49 + 1656);
        if (!v50)
          goto LABEL_84;
        ++*(_DWORD *)(v50 + 16);
        v324 = (WTF ***)&off_1E33A8A40;
        v325 = v5;
        v326 = &v320;
        v327 = &v324;
        WebCore::forEachRendererInPaintOrder(&v316, (uint64_t)&v324, *(WebCore::RenderLayer **)(v50 + 144));
        v51 = v327;
        if (v327 == &v324)
        {
          v52 = 4;
          v51 = &v324;
        }
        else
        {
          if (!v327)
          {
LABEL_79:
            if (v318[0])
            {
              LOBYTE(v304) = (_BYTE)v316;
              v305 = v317;
              LOBYTE(v306) = 1;
              v53 = *(_DWORD *)(v50 + 16);
              if (!v53)
              {
                __break(0xC471u);
                JUMPOUT(0x195A66484);
              }
              *(_DWORD *)(v50 + 16) = v53 - 1;
LABEL_85:
              v55 = v321;
              while (v55)
              {
                v294 = v55;
                v55 = (WTF::StringImpl *)*((_QWORD *)v55 + 2);
                v295 = *(WTF::StringImpl **)v294;
                *(_QWORD *)v294 = 0;
                if (v295)
                {
                  if (*(_DWORD *)v295 == 2)
                    WTF::StringImpl::destroy(v295, v45);
                  else
                    *(_DWORD *)v295 -= 2;
                }
                WTF::fastFree(v294, v45);
              }
              if (v320)
                WTF::fastFree((WTF *)((char *)v320 - 16), v45);
              if ((_BYTE)v306)
                goto LABEL_582;
LABEL_89:
              v56 = *(_QWORD *)(v5 + 64);
              if (v56)
              {
                v57 = *(unsigned int *)(v56 - 4);
                v58 = (_QWORD *)(v56 + 16 * v57);
                if (*(_DWORD *)(v56 - 12))
                {
                  v59 = *(_QWORD **)(v5 + 64);
                  if ((_DWORD)v57)
                  {
                    v60 = 16 * v57;
                    v59 = *(_QWORD **)(v5 + 64);
                    while ((unint64_t)(*v59 + 1) <= 1)
                    {
                      v59 += 2;
                      v60 -= 16;
                      if (!v60)
                      {
                        v59 = v58;
                        break;
                      }
                    }
                  }
LABEL_99:
                  if (v56)
                    v61 = (_QWORD *)(v56 + 16 * *(unsigned int *)(v56 - 4));
                  else
                    v61 = 0;
                  while (v59 != v61)
                  {
                    v62 = v59[1];
                    v63 = *(_QWORD *)(v62 + 56);
                    if (v63)
                    {
                      v64 = *(WTF ****)(v63 + 8);
                      if (v64)
                      {
                        v65 = *(_BYTE *)(v62 + 80);
                        if (v65)
                        {
                          v66 = *(_DWORD *)(v62 + 64);
                          v67 = *(WTF ***)(v62 + 72);
                          if (v67)
                            *(_DWORD *)v67 += 2;
                          v324 = v64;
                          LODWORD(v325) = v66;
                          v65 = 1;
                          v326 = v67;
                        }
                        else
                        {
                          v324 = v64;
                          LOBYTE(v325) = 0;
                        }
                        LOBYTE(v327) = v65;
                        v328 = 1;
                        v68 = WebCore::Styleable::renderer((WebCore::Styleable *)&v324);
                        if (v68)
                        {
                          v69 = v68;
                          ++*(_DWORD *)(v68 + 16);
                          WebCore::RenderObject::setCapturedInViewTransition(v68, 1);
                          v70 = *(_DWORD *)(v69 + 16);
                          if (!v70)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195A66358);
                          }
                          *(_DWORD *)(v69 + 16) = v70 - 1;
                        }
                        if (v328)
                        {
                          if ((_BYTE)v327)
                          {
                            v71 = (WTF::StringImpl *)v326;
                            v326 = 0;
                            if (v71)
                            {
                              if (*(_DWORD *)v71 == 2)
                                WTF::StringImpl::destroy(v71, v45);
                              else
                                *(_DWORD *)v71 -= 2;
                            }
                          }
                        }
                      }
                    }
                    v72 = v59 + 2;
                    v59 = v58;
                    if (v72 != v58)
                    {
                      v59 = v72;
                      while ((unint64_t)(*v59 + 1) <= 1)
                      {
                        v59 += 2;
                        if (v59 == v58)
                        {
                          v59 = v58;
                          break;
                        }
                      }
                    }
                  }
                  v73 = *(_QWORD *)(v5 + 8);
                  if (v73 && (v74 = *(_QWORD *)(v73 + 8)) != 0)
                  {
                    if (*(_BYTE *)(v74 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195A664A4);
                    }
                    v75 = *(_DWORD *)(v74 - 264);
                    *(_DWORD *)(v74 - 264) = v75 + 2;
                    *(_BYTE *)(v74 + 3152) = 1;
                    if (v75)
                    {
                      *(_DWORD *)(v74 - 264) = v75;
                    }
                    else if ((*(_WORD *)(v74 - 258) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)(v74 - 288), v45);
                    }
                  }
                  else
                  {
                    MEMORY[0xD70] = 1;
                  }
                  v76 = *(_QWORD *)(v5 + 64);
                  if (v76)
                  {
                    v77 = *(unsigned int *)(v76 - 4);
                    v78 = v76 + 16 * v77;
                    if (*(_DWORD *)(v76 - 12))
                    {
                      v79 = *(_QWORD *)(v5 + 64);
                      if ((_DWORD)v77)
                      {
                        v80 = 16 * v77;
                        v79 = *(_QWORD *)(v5 + 64);
                        while ((unint64_t)(*(_QWORD *)v79 + 1) <= 1)
                        {
                          v79 += 16;
                          v80 -= 16;
                          if (!v80)
                          {
                            v79 = v78;
                            break;
                          }
                        }
                      }
LABEL_142:
                      if (v76)
                        v76 += 16 * *(unsigned int *)(v76 - 4);
                      v302 = v76;
                      if (v76 != v79)
                      {
                        v301 = v5;
                        do
                        {
                          v81 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
                          if (*(_BYTE *)(v81 + 178))
                          {
LABEL_662:
                            __break(0xC471u);
                            JUMPOUT(0x195A66338);
                          }
                          v82 = *(_QWORD *)(v79 + 8);
                          v83 = (_DWORD *)(v81 - 264);
                          *(_DWORD *)(v81 - 264) += 2;
                          v84 = *(_QWORD *)(v81 + 1040);
                          if (!*(_QWORD *)(v84 + 32))
                          {
                            if (*(_QWORD *)(v84 + 24))
                              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(v81 + 1040));
                            else
                              WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(v81 + 1040));
                            v257 = *(_QWORD *)(v84 + 32);
                            if (*(_DWORD *)(v257 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v257 + 32), v45);
                            if (*(_BYTE *)(v257 + 242)
                              || *(_BYTE *)(v257 + 243)
                              || *(_BYTE *)(v257 + 244)
                              || *(_BYTE *)(v257 + 245)
                              || *(_BYTE *)(v257 + 246)
                              || *(_BYTE *)(v257 + 247)
                              || *(_BYTE *)(v257 + 248))
                            {
                              *(_BYTE *)(v84 + 236) = 1;
                            }
                          }
                          v85 = *(uint64_t **)(v84 + 32);
                          ++*(_DWORD *)v85;
                          if (*v83 == 2)
                          {
                            if ((*(_WORD *)(v81 - 258) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)(v81 - 288), v45);
                          }
                          else
                          {
                            *v83 -= 2;
                          }
                          v324 = &v326;
                          v325 = 4;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v86 = v323;
                          v88 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)v88 = 2;
                          v89 = *(_BYTE *)(v88 + 6);
                          *(_WORD *)(v88 + 4) = 20;
                          *(_BYTE *)(v88 + 6) = v89 & 0xFC;
                          *(_QWORD *)(v88 + 8) = v86;
                          if (v86)
                            *(_DWORD *)v86 += 2;
                          v90 = HIDWORD(v325);
                          if (HIDWORD(v325) == (_DWORD)v325)
                          {
                            v260 = HIDWORD(v325) + ((unint64_t)HIDWORD(v325) >> 2);
                            if (v260 >= 0x10)
                              v261 = v260 + 1;
                            else
                              v261 = 16;
                            if (v261 <= (unint64_t)HIDWORD(v325) + 1)
                              v262 = HIDWORD(v325) + 1;
                            else
                              v262 = v261;
                            v263 = v324;
                            if (v262 < 5)
                            {
                              v324 = &v326;
                              LODWORD(v325) = 4;
                              v264 = &v326;
                            }
                            else
                            {
                              if (v262 >> 29)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195A665DCLL);
                              }
                              v264 = (WTF ***)WTF::fastMalloc((WTF *)(8 * v262));
                              LODWORD(v325) = v262;
                              v324 = v264;
                            }
                            memcpy(v264, v263, 8 * v90);
                            if (&v326 != v263 && v263)
                            {
                              if (v324 == v263)
                              {
                                v324 = 0;
                                LODWORD(v325) = 0;
                              }
                              WTF::fastFree((WTF *)v263, v87);
                            }
                            LODWORD(v90) = HIDWORD(v325);
                            v91 = (uint64_t *)&v324[HIDWORD(v325)];
                          }
                          else
                          {
                            v91 = (uint64_t *)&v324[HIDWORD(v325)];
                          }
                          *v91 = v88;
                          HIDWORD(v325) = v90 + 1;
                          if (v86)
                          {
                            if (*(_DWORD *)v86 == 2)
                              WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v87);
                            else
                              *(_DWORD *)v86 -= 2;
                          }
                          v92 = *(_QWORD *)(v82 + 56);
                          if (v92 && *(_QWORD *)(v92 + 8))
                          {
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v93 = v323;
                            v95 = WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v95 = 2;
                            v96 = *(_BYTE *)(v95 + 6);
                            *(_WORD *)(v95 + 4) = 20;
                            *(_BYTE *)(v95 + 6) = v96 & 0xFC;
                            *(_QWORD *)(v95 + 8) = v93;
                            if (v93)
                              *(_DWORD *)v93 += 2;
                            v97 = HIDWORD(v325);
                            if (HIDWORD(v325) == (_DWORD)v325)
                            {
                              v275 = HIDWORD(v325) + ((unint64_t)HIDWORD(v325) >> 2);
                              if (v275 >= 0x10)
                                v276 = v275 + 1;
                              else
                                v276 = 16;
                              if (v276 <= (unint64_t)HIDWORD(v325) + 1)
                                v277 = HIDWORD(v325) + 1;
                              else
                                v277 = v276;
                              v278 = v324;
                              if (v277 < 5)
                              {
                                v324 = &v326;
                                LODWORD(v325) = 4;
                                v279 = &v326;
                              }
                              else
                              {
                                if (v277 >> 29)
                                  goto LABEL_662;
                                v279 = (WTF ***)WTF::fastMalloc((WTF *)(8 * v277));
                                LODWORD(v325) = v277;
                                v324 = v279;
                              }
                              memcpy(v279, v278, 8 * v97);
                              if (&v326 != v278 && v278)
                              {
                                if (v324 == v278)
                                {
                                  v324 = 0;
                                  LODWORD(v325) = 0;
                                }
                                WTF::fastFree((WTF *)v278, v94);
                              }
                              LODWORD(v97) = HIDWORD(v325);
                              v98 = (uint64_t *)&v324[HIDWORD(v325)];
                            }
                            else
                            {
                              v98 = (uint64_t *)&v324[HIDWORD(v325)];
                            }
                            *v98 = v95;
                            HIDWORD(v325) = v97 + 1;
                            if (v93)
                            {
                              if (*(_DWORD *)v93 == 2)
                                WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v94);
                              else
                                *(_DWORD *)v93 -= 2;
                            }
                          }
                          v320 = (WTF *)v322;
                          LODWORD(v321) = 4;
                          v99 = (WTF *)v324;
                          if (v324 == &v326)
                          {
                            v100 = HIDWORD(v325);
                            memcpy(v322, &v326, 8 * HIDWORD(v325));
                          }
                          else
                          {
                            v324 = &v326;
                            v320 = v99;
                            v258 = v325;
                            v100 = HIDWORD(v325);
                            LODWORD(v325) = 4;
                            LODWORD(v321) = v258;
                          }
                          HIDWORD(v325) = 0;
                          HIDWORD(v321) = v100;
                          WebCore::CSSValueList::createCommaSeparated((uint64_t)&v320, (uint64_t *)&v323);
                          if (HIDWORD(v321))
                          {
                            v102 = v320;
                            v103 = 8 * HIDWORD(v321);
                            do
                            {
                              v104 = *(_DWORD **)v102;
                              *(_QWORD *)v102 = 0;
                              if (v104)
                              {
                                if (*v104 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v104, v101);
                                else
                                  *v104 -= 2;
                              }
                              v102 = (WTF *)((char *)v102 + 8);
                              v103 -= 8;
                            }
                            while (v103);
                          }
                          v105 = v320;
                          if (v322 != (_QWORD *)v320 && v320 != 0)
                          {
                            v320 = 0;
                            LODWORD(v321) = 0;
                            WTF::fastFree(v105, v101);
                          }
                          v107 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v107 = 0x900000001;
                          *(_QWORD *)(v107 + 8) = 0;
                          *(_QWORD *)(v107 + 16) = v107 + 32;
                          *(_QWORD *)(v107 + 24) = 4;
                          v108 = v323;
                          v323 = 0;
                          v319 = v108;
                          WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v107, 52, (_DWORD **)&v319, 0);
                          v110 = v319;
                          v319 = 0;
                          if (v110)
                          {
                            if (*(_DWORD *)v110 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v110, v109);
                            else
                              *(_DWORD *)v110 -= 2;
                          }
                          ++*(_DWORD *)v107;
                          v319 = (WTF *)v107;
                          WebCore::Style::Resolver::setViewTransitionStyles((uint64_t)v85, 25, (WTF::StringImpl **)v79, (uint64_t *)&v319);
                          v112 = v319;
                          v319 = 0;
                          if (v112)
                          {
                            if (*(_DWORD *)v112 == 1)
                            {
                              v177 = *((unsigned int *)v112 + 7);
                              if ((_DWORD)v177)
                              {
                                v178 = 16 * v177;
                                v179 = (_DWORD **)(*((_QWORD *)v112 + 2) + 8);
                                do
                                {
                                  v180 = *v179;
                                  *v179 = 0;
                                  if (v180)
                                  {
                                    if (*v180 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v180, v111);
                                    else
                                      *v180 -= 2;
                                  }
                                  v179 += 2;
                                  v178 -= 16;
                                }
                                while (v178);
                              }
                              v181 = (WTF *)*((_QWORD *)v112 + 2);
                              if ((WTF *)((char *)v112 + 32) != v181 && v181 != 0)
                              {
                                *((_QWORD *)v112 + 2) = 0;
                                *((_DWORD *)v112 + 6) = 0;
                                WTF::fastFree(v181, v111);
                              }
                              v183 = *((_QWORD *)v112 + 1);
                              *((_QWORD *)v112 + 1) = 0;
                              if (v183)
                                (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
                              WTF::fastFree(v112, v111);
                            }
                            else
                            {
                              --*(_DWORD *)v112;
                            }
                          }
                          if (*(_DWORD *)v107 == 1)
                          {
                            v163 = *(unsigned int *)(v107 + 28);
                            if ((_DWORD)v163)
                            {
                              v164 = 16 * v163;
                              v165 = (_DWORD **)(*(_QWORD *)(v107 + 16) + 8);
                              do
                              {
                                v166 = *v165;
                                *v165 = 0;
                                if (v166)
                                {
                                  if (*v166 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v166, v111);
                                  else
                                    *v166 -= 2;
                                }
                                v165 += 2;
                                v164 -= 16;
                              }
                              while (v164);
                            }
                            v167 = *(WTF **)(v107 + 16);
                            if ((WTF *)(v107 + 32) != v167 && v167 != 0)
                            {
                              *(_QWORD *)(v107 + 16) = 0;
                              *(_DWORD *)(v107 + 24) = 0;
                              WTF::fastFree(v167, v111);
                            }
                            v169 = *(_QWORD *)(v107 + 8);
                            *(_QWORD *)(v107 + 8) = 0;
                            if (v169)
                              (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
                            WTF::fastFree((WTF *)v107, v111);
                          }
                          else
                          {
                            --*(_DWORD *)v107;
                          }
                          if (HIDWORD(v325))
                          {
                            v113 = v324;
                            v114 = 8 * HIDWORD(v325);
                            do
                            {
                              v115 = *v113;
                              *v113 = 0;
                              if (v115)
                              {
                                if (*(_DWORD *)v115 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v115, v111);
                                else
                                  *(_DWORD *)v115 -= 2;
                              }
                              ++v113;
                              v114 -= 8;
                            }
                            while (v114);
                          }
                          v116 = (WTF *)v324;
                          if (&v326 != v324 && v324 != 0)
                          {
                            v324 = 0;
                            LODWORD(v325) = 0;
                            WTF::fastFree(v116, v111);
                          }
                          v324 = &v326;
                          v325 = 4;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v118 = v323;
                          v120 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)v120 = 2;
                          v121 = *(_BYTE *)(v120 + 6);
                          *(_WORD *)(v120 + 4) = 20;
                          *(_BYTE *)(v120 + 6) = v121 & 0xFC;
                          *(_QWORD *)(v120 + 8) = v118;
                          if (v118)
                            *(_DWORD *)v118 += 2;
                          v122 = HIDWORD(v325);
                          if (HIDWORD(v325) == (_DWORD)v325)
                          {
                            v265 = HIDWORD(v325) + ((unint64_t)HIDWORD(v325) >> 2);
                            if (v265 >= 0x10)
                              v266 = v265 + 1;
                            else
                              v266 = 16;
                            if (v266 <= (unint64_t)HIDWORD(v325) + 1)
                              v267 = HIDWORD(v325) + 1;
                            else
                              v267 = v266;
                            v268 = v324;
                            if (v267 < 5)
                            {
                              v324 = &v326;
                              LODWORD(v325) = 4;
                              v269 = &v326;
                            }
                            else
                            {
                              if (v267 >> 29)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195A665E4);
                              }
                              v269 = (WTF ***)WTF::fastMalloc((WTF *)(8 * v267));
                              LODWORD(v325) = v267;
                              v324 = v269;
                            }
                            memcpy(v269, v268, 8 * v122);
                            if (&v326 != v268 && v268)
                            {
                              if (v324 == v268)
                              {
                                v324 = 0;
                                LODWORD(v325) = 0;
                              }
                              WTF::fastFree((WTF *)v268, v119);
                            }
                            LODWORD(v122) = HIDWORD(v325);
                            v123 = (uint64_t *)&v324[HIDWORD(v325)];
                          }
                          else
                          {
                            v123 = (uint64_t *)&v324[HIDWORD(v325)];
                          }
                          *v123 = v120;
                          HIDWORD(v325) = v122 + 1;
                          if (v118)
                          {
                            if (*(_DWORD *)v118 == 2)
                              WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v119);
                            else
                              *(_DWORD *)v118 -= 2;
                          }
                          if (*(_BYTE *)(v82 + 8))
                          {
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v124 = v323;
                            v126 = WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v126 = 2;
                            v127 = *(_BYTE *)(v126 + 6);
                            *(_WORD *)(v126 + 4) = 20;
                            *(_BYTE *)(v126 + 6) = v127 & 0xFC;
                            *(_QWORD *)(v126 + 8) = v124;
                            if (v124)
                              *(_DWORD *)v124 += 2;
                            v128 = HIDWORD(v325);
                            if (HIDWORD(v325) == (_DWORD)v325)
                            {
                              v270 = HIDWORD(v325) + ((unint64_t)HIDWORD(v325) >> 2);
                              if (v270 >= 0x10)
                                v271 = v270 + 1;
                              else
                                v271 = 16;
                              if (v271 <= (unint64_t)HIDWORD(v325) + 1)
                                v272 = HIDWORD(v325) + 1;
                              else
                                v272 = v271;
                              v273 = v324;
                              if (v272 < 5)
                              {
                                v324 = &v326;
                                LODWORD(v325) = 4;
                                v274 = &v326;
                              }
                              else
                              {
                                if (v272 >> 29)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x195A665ECLL);
                                }
                                v274 = (WTF ***)WTF::fastMalloc((WTF *)(8 * v272));
                                LODWORD(v325) = v272;
                                v324 = v274;
                              }
                              memcpy(v274, v273, 8 * v128);
                              if (&v326 != v273 && v273)
                              {
                                if (v324 == v273)
                                {
                                  v324 = 0;
                                  LODWORD(v325) = 0;
                                }
                                WTF::fastFree((WTF *)v273, v125);
                              }
                              LODWORD(v128) = HIDWORD(v325);
                              v129 = (uint64_t *)&v324[HIDWORD(v325)];
                            }
                            else
                            {
                              v129 = (uint64_t *)&v324[HIDWORD(v325)];
                            }
                            *v129 = v126;
                            HIDWORD(v325) = v128 + 1;
                            if (v124)
                            {
                              if (*(_DWORD *)v124 == 2)
                                WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v125);
                              else
                                *(_DWORD *)v124 -= 2;
                            }
                          }
                          v316 = (WTF *)v318;
                          LODWORD(v317) = 4;
                          v130 = (WTF *)v324;
                          if (v324 == &v326)
                          {
                            v131 = HIDWORD(v325);
                            memcpy(v318, &v326, 8 * HIDWORD(v325));
                          }
                          else
                          {
                            v324 = &v326;
                            v316 = v130;
                            v259 = v325;
                            v131 = HIDWORD(v325);
                            LODWORD(v325) = 4;
                            LODWORD(v317) = v259;
                          }
                          HIDWORD(v325) = 0;
                          HIDWORD(v317) = v131;
                          WebCore::CSSValueList::createCommaSeparated((uint64_t)&v316, (uint64_t *)&v323);
                          if (HIDWORD(v317))
                          {
                            v133 = v316;
                            v134 = 8 * HIDWORD(v317);
                            do
                            {
                              v135 = *(_DWORD **)v133;
                              *(_QWORD *)v133 = 0;
                              if (v135)
                              {
                                if (*v135 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v135, v132);
                                else
                                  *v135 -= 2;
                              }
                              v133 = (WTF *)((char *)v133 + 8);
                              v134 -= 8;
                            }
                            while (v134);
                          }
                          v136 = v316;
                          if (v318 != (_BYTE *)v316 && v316 != 0)
                          {
                            v316 = 0;
                            LODWORD(v317) = 0;
                            WTF::fastFree(v136, v132);
                          }
                          v138 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v138 = 0x900000001;
                          *(_QWORD *)(v138 + 8) = 0;
                          *(_QWORD *)(v138 + 16) = v138 + 32;
                          *(_QWORD *)(v138 + 24) = 4;
                          v139 = v323;
                          v323 = 0;
                          v315 = v139;
                          WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v138, 52, (_DWORD **)&v315, 0);
                          v141 = v315;
                          v315 = 0;
                          if (v141)
                          {
                            if (*(_DWORD *)v141 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v141, v140);
                            else
                              *(_DWORD *)v141 -= 2;
                          }
                          ++*(_DWORD *)v138;
                          v315 = (WTF *)v138;
                          WebCore::Style::Resolver::setViewTransitionStyles((uint64_t)v85, 24, (WTF::StringImpl **)v79, (uint64_t *)&v315);
                          v142 = v315;
                          v315 = 0;
                          if (v142)
                          {
                            if (*(_DWORD *)v142 == 1)
                            {
                              v184 = *((unsigned int *)v142 + 7);
                              if ((_DWORD)v184)
                              {
                                v185 = 16 * v184;
                                v186 = (_DWORD **)(*((_QWORD *)v142 + 2) + 8);
                                do
                                {
                                  v187 = *v186;
                                  *v186 = 0;
                                  if (v187)
                                  {
                                    if (*v187 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v187, v45);
                                    else
                                      *v187 -= 2;
                                  }
                                  v186 += 2;
                                  v185 -= 16;
                                }
                                while (v185);
                              }
                              v188 = (WTF *)*((_QWORD *)v142 + 2);
                              if ((WTF *)((char *)v142 + 32) != v188 && v188 != 0)
                              {
                                *((_QWORD *)v142 + 2) = 0;
                                *((_DWORD *)v142 + 6) = 0;
                                WTF::fastFree(v188, v45);
                              }
                              v190 = *((_QWORD *)v142 + 1);
                              *((_QWORD *)v142 + 1) = 0;
                              if (v190)
                                (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
                              WTF::fastFree(v142, v45);
                            }
                            else
                            {
                              --*(_DWORD *)v142;
                            }
                          }
                          if (*(_DWORD *)v138 == 1)
                          {
                            v170 = *(unsigned int *)(v138 + 28);
                            if ((_DWORD)v170)
                            {
                              v171 = 16 * v170;
                              v172 = (_DWORD **)(*(_QWORD *)(v138 + 16) + 8);
                              do
                              {
                                v173 = *v172;
                                *v172 = 0;
                                if (v173)
                                {
                                  if (*v173 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v173, v45);
                                  else
                                    *v173 -= 2;
                                }
                                v172 += 2;
                                v171 -= 16;
                              }
                              while (v171);
                            }
                            v174 = *(WTF **)(v138 + 16);
                            if ((WTF *)(v138 + 32) != v174 && v174 != 0)
                            {
                              *(_QWORD *)(v138 + 16) = 0;
                              *(_DWORD *)(v138 + 24) = 0;
                              WTF::fastFree(v174, v45);
                            }
                            v176 = *(_QWORD *)(v138 + 8);
                            *(_QWORD *)(v138 + 8) = 0;
                            if (v176)
                              (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
                            WTF::fastFree((WTF *)v138, v45);
                          }
                          else
                          {
                            --*(_DWORD *)v138;
                          }
                          if (HIDWORD(v325))
                          {
                            v143 = v324;
                            v144 = 8 * HIDWORD(v325);
                            do
                            {
                              v145 = *v143;
                              *v143 = 0;
                              if (v145)
                              {
                                if (*(_DWORD *)v145 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v145, v45);
                                else
                                  *(_DWORD *)v145 -= 2;
                              }
                              ++v143;
                              v144 -= 8;
                            }
                            while (v144);
                          }
                          v146 = (WTF *)v324;
                          if (&v326 != v324 && v324 != 0)
                          {
                            v324 = 0;
                            LODWORD(v325) = 0;
                            WTF::fastFree(v146, v45);
                          }
                          if (!*(_BYTE *)(v82 + 8))
                            goto LABEL_393;
                          v148 = *(_QWORD *)(v82 + 56);
                          if (!v148 || !*(_QWORD *)(v148 + 8))
                            goto LABEL_393;
                          v149 = *(WTF::StringImpl **)v79;
                          if (*(_QWORD *)v79)
                          {
                            v150 = *((_DWORD *)v149 + 1);
                            *(_DWORD *)v149 += 2;
                            if (v150 < 0 || (v151 = (v150 + 31), __OFADD__(v150, 31)))
                            {
                              v314 = 0;
LABEL_653:
                              __break(0xC471u);
                              JUMPOUT(0x195A665B0);
                            }
                            v152 = (*((unsigned __int8 *)v149 + 16) >> 2) & 1;
                          }
                          else
                          {
                            v152 = 1;
                            v151 = 31;
                          }
                          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v151, v152, "-ua-view-transition-group-anim-", 0x1Fu, v149, &v314);
                          if (!v314)
                            goto LABEL_653;
                          v153 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)v153 = 2;
                          v154 = *(_BYTE *)(v153 + 6);
                          *(_WORD *)(v153 + 4) = 20;
                          *(_BYTE *)(v153 + 6) = v154 & 0xFC;
                          v155 = v314;
                          *(_QWORD *)(v153 + 8) = v314;
                          if (v155)
                            *(_DWORD *)v155 += 2;
                          v157 = WTF::fastCompactMalloc((WTF *)0x38);
                          *(_DWORD *)v157 = 2;
                          v158 = (*(unsigned __int8 *)(v157 + 6) << 16) & 0xFC0000;
                          *(_DWORD *)(v157 + 8) = 1;
                          *(_WORD *)(v157 + 4) = -9728;
                          *(_BYTE *)(v157 + 6) = (v158 | 0x10000u) >> 16;
                          *(_QWORD *)(v157 + 16) = v153;
                          v159 = v314;
                          v314 = 0;
                          if (v159)
                          {
                            if (*(_DWORD *)v159 == 2)
                            {
                              WTF::StringImpl::destroy(v159, v156);
                              if (!v149)
                                goto LABEL_267;
                              goto LABEL_265;
                            }
                            *(_DWORD *)v159 -= 2;
                          }
                          if (!v149)
                            goto LABEL_267;
LABEL_265:
                          if (*(_DWORD *)v149 == 2)
                            WTF::StringImpl::destroy(v149, v156);
                          else
                            *(_DWORD *)v149 -= 2;
LABEL_267:
                          v160 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v160 = 0x900000001;
                          *(_QWORD *)(v160 + 8) = 0;
                          *(_QWORD *)(v160 + 16) = v160 + 32;
                          *(_QWORD *)(v160 + 24) = 4;
                          v324 = (WTF ***)v157;
                          WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v160, 52, (_DWORD **)&v324, 0);
                          v162 = v324;
                          v324 = 0;
                          if (v162)
                          {
                            if (*(_DWORD *)v162 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v162, v161);
                            else
                              *(_DWORD *)v162 -= 2;
                          }
                          ++*(_DWORD *)v160;
                          v313 = (WTF *)v160;
                          WebCore::Style::Resolver::setViewTransitionStyles((uint64_t)v85, 22, (WTF::StringImpl **)v79, (uint64_t *)&v313);
                          v192 = v313;
                          v313 = 0;
                          if (v192)
                          {
                            if (*(_DWORD *)v192 == 1)
                            {
                              v243 = *((unsigned int *)v192 + 7);
                              if ((_DWORD)v243)
                              {
                                v244 = 16 * v243;
                                v245 = (_DWORD **)(*((_QWORD *)v192 + 2) + 8);
                                do
                                {
                                  v246 = *v245;
                                  *v245 = 0;
                                  if (v246)
                                  {
                                    if (*v246 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v246, v191);
                                    else
                                      *v246 -= 2;
                                  }
                                  v245 += 2;
                                  v244 -= 16;
                                }
                                while (v244);
                              }
                              v247 = (WTF *)*((_QWORD *)v192 + 2);
                              if ((WTF *)((char *)v192 + 32) != v247 && v247 != 0)
                              {
                                *((_QWORD *)v192 + 2) = 0;
                                *((_DWORD *)v192 + 6) = 0;
                                WTF::fastFree(v247, v191);
                              }
                              v249 = *((_QWORD *)v192 + 1);
                              *((_QWORD *)v192 + 1) = 0;
                              if (v249)
                                (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
                              WTF::fastFree(v192, v191);
                            }
                            else
                            {
                              --*(_DWORD *)v192;
                            }
                          }
                          if (*(_DWORD *)v160 == 1)
                          {
                            v229 = *(unsigned int *)(v160 + 28);
                            if ((_DWORD)v229)
                            {
                              v230 = 16 * v229;
                              v231 = (_DWORD **)(*(_QWORD *)(v160 + 16) + 8);
                              do
                              {
                                v232 = *v231;
                                *v231 = 0;
                                if (v232)
                                {
                                  if (*v232 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v232, v191);
                                  else
                                    *v232 -= 2;
                                }
                                v231 += 2;
                                v230 -= 16;
                              }
                              while (v230);
                            }
                            v233 = *(WTF **)(v160 + 16);
                            if ((WTF *)(v160 + 32) != v233 && v233 != 0)
                            {
                              *(_QWORD *)(v160 + 16) = 0;
                              *(_DWORD *)(v160 + 24) = 0;
                              WTF::fastFree(v233, v191);
                            }
                            v235 = *(_QWORD *)(v160 + 8);
                            *(_QWORD *)(v160 + 8) = 0;
                            if (v235)
                              (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
                            WTF::fastFree((WTF *)v160, v191);
                          }
                          else
                          {
                            --*(_DWORD *)v160;
                          }
                          v193 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v193 = 0x900000001;
                          *(_QWORD *)(v193 + 8) = 0;
                          *(_QWORD *)(v193 + 16) = v193 + 32;
                          *(_QWORD *)(v193 + 24) = 4;
                          WebCore::staticCSSValuePool[6108] += 2;
                          v324 = (WTF ***)&WebCore::staticCSSValuePool[6108];
                          WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v193, 147, (_DWORD **)&v324, 0);
                          v195 = v324;
                          v324 = 0;
                          if (v195)
                          {
                            if (*(_DWORD *)v195 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v195, v194);
                            else
                              *(_DWORD *)v195 -= 2;
                          }
                          ++*(_DWORD *)v193;
                          v312 = (WTF *)v193;
                          WebCore::Style::Resolver::setViewTransitionStyles((uint64_t)v85, 23, (WTF::StringImpl **)v79, (uint64_t *)&v312);
                          v196 = v312;
                          v312 = 0;
                          if (v196)
                          {
                            if (*(_DWORD *)v196 == 1)
                            {
                              v250 = *((unsigned int *)v196 + 7);
                              if ((_DWORD)v250)
                              {
                                v251 = 16 * v250;
                                v252 = (_DWORD **)(*((_QWORD *)v196 + 2) + 8);
                                do
                                {
                                  v253 = *v252;
                                  *v252 = 0;
                                  if (v253)
                                  {
                                    if (*v253 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v253, v45);
                                    else
                                      *v253 -= 2;
                                  }
                                  v252 += 2;
                                  v251 -= 16;
                                }
                                while (v251);
                              }
                              v254 = (WTF *)*((_QWORD *)v196 + 2);
                              if ((WTF *)((char *)v196 + 32) != v254 && v254 != 0)
                              {
                                *((_QWORD *)v196 + 2) = 0;
                                *((_DWORD *)v196 + 6) = 0;
                                WTF::fastFree(v254, v45);
                              }
                              v256 = *((_QWORD *)v196 + 1);
                              *((_QWORD *)v196 + 1) = 0;
                              if (v256)
                                (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
                              WTF::fastFree(v196, v45);
                            }
                            else
                            {
                              --*(_DWORD *)v196;
                            }
                          }
                          if (*(_DWORD *)v193 == 1)
                          {
                            v236 = *(unsigned int *)(v193 + 28);
                            if ((_DWORD)v236)
                            {
                              v237 = 16 * v236;
                              v238 = (_DWORD **)(*(_QWORD *)(v193 + 16) + 8);
                              do
                              {
                                v239 = *v238;
                                *v238 = 0;
                                if (v239)
                                {
                                  if (*v239 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v239, v45);
                                  else
                                    *v239 -= 2;
                                }
                                v238 += 2;
                                v237 -= 16;
                              }
                              while (v237);
                            }
                            v240 = *(WTF **)(v193 + 16);
                            if ((WTF *)(v193 + 32) != v240 && v240 != 0)
                            {
                              *(_QWORD *)(v193 + 16) = 0;
                              *(_DWORD *)(v193 + 24) = 0;
                              WTF::fastFree(v240, v45);
                            }
                            v242 = *(_QWORD *)(v193 + 8);
                            *(_QWORD *)(v193 + 8) = 0;
                            if (v242)
                              (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
                            WTF::fastFree((WTF *)v193, v45);
                          }
                          else
                          {
                            --*(_DWORD *)v193;
                          }
                          if (!*(_QWORD *)(v82 + 48))
                            goto LABEL_393;
                          v197 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v197 = 0x800000001;
                          *((_QWORD *)v197 + 1) = 0;
                          *((_QWORD *)v197 + 2) = (char *)v197 + 32;
                          *((_QWORD *)v197 + 3) = 4;
                          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v82 + 48), 450, &v324);
                          WebCore::MutableStyleProperties::setProperty(v197, 450, (_DWORD **)&v324, 0);
                          v199 = v324;
                          v324 = 0;
                          if (v199)
                          {
                            if (*(_DWORD *)v199 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v199, v198);
                            else
                              *(_DWORD *)v199 -= 2;
                          }
                          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v82 + 48), 393, &v324);
                          WebCore::MutableStyleProperties::setProperty(v197, 393, (_DWORD **)&v324, 0);
                          v201 = v324;
                          v324 = 0;
                          if (v201)
                          {
                            if (*(_DWORD *)v201 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v201, v200);
                            else
                              *(_DWORD *)v201 -= 2;
                          }
                          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v82 + 48), 273, &v324);
                          WebCore::MutableStyleProperties::setProperty(v197, 273, (_DWORD **)&v324, 0);
                          v203 = v324;
                          v324 = 0;
                          if (v203)
                          {
                            if (*(_DWORD *)v203 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v203, v202);
                            else
                              *(_DWORD *)v203 -= 2;
                          }
                          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v82 + 48), 351, &v324);
                          WebCore::MutableStyleProperties::setProperty(v197, 351, (_DWORD **)&v324, 0);
                          v205 = v324;
                          v324 = 0;
                          if (v205)
                          {
                            if (*(_DWORD *)v205 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v205, v204);
                            else
                              *(_DWORD *)v205 -= 2;
                          }
                          v206 = WTF::fastMalloc((WTF *)0x20);
                          *(_DWORD *)v206 = 1;
                          *(_BYTE *)(v206 + 4) = *(_BYTE *)(v206 + 4) & 0xC0 | 8;
                          *(_QWORD *)(v206 + 16) = 0;
                          *(_QWORD *)(v206 + 24) = 0;
                          *(_QWORD *)(v206 + 8) = v197;
                          v311 = (_DWORD *)v206;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v323 = (WTF::StringImpl *)v324;
                          WebCore::StyleRuleKeyframe::setKeyText((WebCore::StyleRuleKeyframe *)v206, (unsigned int **)&v323);
                          v208 = v323;
                          v323 = 0;
                          if (v208)
                          {
                            if (*(_DWORD *)v208 == 2)
                              WTF::StringImpl::destroy(v208, v207);
                            else
                              *(_DWORD *)v208 -= 2;
                          }
                          v209 = *(WTF::StringImpl **)v79;
                          if (*(_QWORD *)v79)
                          {
                            v210 = *((_DWORD *)v209 + 1);
                            *(_DWORD *)v209 += 2;
                            if (v210 < 0 || (v211 = (v210 + 31), __OFADD__(v210, 31)))
                            {
                              v310 = 0;
LABEL_655:
                              __break(0xC471u);
                              JUMPOUT(0x195A665BCLL);
                            }
                            v212 = (*((unsigned __int8 *)v209 + 16) >> 2) & 1;
                          }
                          else
                          {
                            v212 = 1;
                            v211 = 31;
                          }
                          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v211, v212, "-ua-view-transition-group-anim-", 0x1Fu, v209, &v310);
                          v213 = v310;
                          if (!v310)
                            goto LABEL_655;
                          v310 = 0;
                          v323 = v213;
                          if ((*((_BYTE *)v213 + 16) & 0x10) == 0)
                          {
                            WTF::AtomStringImpl::addSlowCase();
                            v215 = v323;
                            v213 = (WTF::StringImpl *)v324;
                            v323 = 0;
                            v324 = 0;
                            if (v215)
                            {
                              if (*(_DWORD *)v215 == 2)
                                WTF::StringImpl::destroy(v215, v214);
                              else
                                *(_DWORD *)v215 -= 2;
                            }
                          }
                          v216 = WTF::fastMalloc((WTF *)0x20);
                          v218 = v216;
                          *(_DWORD *)v216 = 1;
                          *(_BYTE *)(v216 + 4) = *(_BYTE *)(v216 + 4) & 0xC0 | 7;
                          *(_QWORD *)(v216 + 8) = 0;
                          v219 = v216 + 8;
                          *(_QWORD *)(v216 + 16) = 0;
                          if (v213)
                          {
                            v220 = *(_DWORD *)v213;
                            *(_DWORD *)v213 += 2;
                            *(_QWORD *)(v216 + 24) = v213;
                            v323 = (WTF::StringImpl *)v216;
                            if (v220)
                              *(_DWORD *)v213 = v220;
                            else
                              WTF::StringImpl::destroy(v213, v217);
                          }
                          else
                          {
                            *(_QWORD *)(v216 + 24) = 0;
                            v323 = (WTF::StringImpl *)v216;
                          }
                          v221 = v310;
                          v310 = 0;
                          if (!v221)
                            goto LABEL_383;
                          if (*(_DWORD *)v221 != 2)
                          {
                            *(_DWORD *)v221 -= 2;
LABEL_383:
                            if (!v209)
                              goto LABEL_386;
                            goto LABEL_384;
                          }
                          WTF::StringImpl::destroy(v221, v217);
                          if (!v209)
                            goto LABEL_386;
LABEL_384:
                          if (*(_DWORD *)v209 == 2)
                            WTF::StringImpl::destroy(v209, v217);
                          else
                            *(_DWORD *)v209 -= 2;
LABEL_386:
                          v222 = *(unsigned int *)(v218 + 20);
                          if ((_DWORD)v222 == *(_DWORD *)(v218 + 16))
                          {
                            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v219, (unint64_t)&v311);
                          }
                          else
                          {
                            v223 = *(_QWORD *)(v218 + 8);
                            v311 = 0;
                            *(_QWORD *)(v223 + 8 * v222) = v206;
                            *(_DWORD *)(v218 + 20) = v222 + 1;
                          }
                          WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>(v85 + 44, (WTF::StringImpl *)(v218 + 24), (WTF::StringImpl *)&v323, (uint64_t)&v324);
                          WebCore::Document::keyframesRuleDidChange(*(_QWORD *)(v85[2] + 8), (const WTF::StringImpl **)(v218 + 24));
                          v224 = (unsigned int *)v323;
                          v323 = 0;
                          if (v224)
                          {
                            if (*v224 == 1)
                              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v224, v45);
                            else
                              --*v224;
                          }
                          v225 = v311;
                          v311 = 0;
                          if (v225)
                          {
                            if (*v225 == 1)
                              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v225, v45);
                            else
                              --*v225;
                          }
LABEL_393:
                          if (*(_DWORD *)v85 == 1)
                          {
                            WebCore::Style::Resolver::~Resolver((WebCore::Style::Resolver *)v85);
                            bmalloc::api::isoDeallocate(v227, v228);
                          }
                          else
                          {
                            --*(_DWORD *)v85;
                          }
                          v5 = v301;
                          v226 = v79 + 16;
                          v79 = v78;
                          v3 = v303;
                          if (v226 != v78)
                          {
                            v79 = v226;
                            while ((unint64_t)(*(_QWORD *)v79 + 1) <= 1)
                            {
                              v79 += 16;
                              if (v79 == v78)
                              {
                                v79 = v78;
                                break;
                              }
                            }
                          }
                        }
                        while (v79 != v302);
                      }
                      v280 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
                      if (*(_BYTE *)(v280 + 178))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195A6645CLL);
                      }
                      v281 = *(_QWORD *)(v280 + 984);
                      if (v281)
                      {
                        *(_DWORD *)(v281 + 24) += 2;
                        WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v281);
                        if (*(_DWORD *)(v281 + 24) == 2)
                        {
                          if ((*(_WORD *)(v281 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v281, v282);
                        }
                        else
                        {
                          *(_DWORD *)(v281 + 24) -= 2;
                        }
                      }
                      v283 = *(_QWORD *)(v5 + 8);
                      if (v283 && (v284 = *(_QWORD *)(v283 + 8)) != 0)
                      {
                        if (*(_BYTE *)(v284 + 178))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195A664C4);
                        }
                        *(_DWORD *)(v284 - 264) += 2;
                        WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v284 - 288));
                        if (*(_DWORD *)(v284 - 264) == 2)
                        {
                          if ((*(_WORD *)(v284 - 258) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)(v284 - 288), v285);
                        }
                        else
                        {
                          *(_DWORD *)(v284 - 264) -= 2;
                        }
                      }
                      else
                      {
                        WebCore::Document::updateStyleIfNeeded(0);
                      }
                      WebCore::ViewTransition::updatePseudoElementStyles((WebCore::ViewTransition *)&v320, v5, v286);
                      LOBYTE(v324) = 0;
                      LOBYTE(v326) = 0;
                      if (LOBYTE(v322[0]))
                      {
                        LOBYTE(v324) = (_BYTE)v320;
                        v287 = v321;
                        v321 = 0;
                        v325 = (uint64_t)v287;
                        LOBYTE(v326) = 1;
                      }
                      result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v324, (uint64_t)&v304);
                      if ((_BYTE)v326)
                      {
                        result = (WTF::StringImpl *)v325;
                        v325 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                      if (LOBYTE(v322[0]))
                      {
                        result = v321;
                        v321 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                      if (!(_BYTE)v306)
                      {
                        *(_BYTE *)(v5 + 72) = 3;
                        v289 = *(_QWORD *)(v5 + 104);
                        v290 = *(_QWORD *)(v289 + 24);
                        if (v290 && *(_QWORD *)v290 && (*(_BYTE *)(v290 + 8) & 3) == 0)
                        {
                          v291 = *(_QWORD *)(v289 + 32);
                          if (!v291 || (*(_BYTE *)(v291 + 8) & 3) != 0)
                            v292 = 0;
                          else
                            v292 = *(uint64_t **)v291;
                          JSC::JSLockHolder::JSLockHolder();
                          WebCore::DeferredPromise::callFunction(v289, v292, 0, (objc_class *)0xA);
                          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v324);
                        }
                        goto LABEL_591;
                      }
LABEL_582:
                      v288 = v305;
                      v305 = 0;
                      LOBYTE(v324) = v304;
                      v325 = (uint64_t)v288;
                      LODWORD(v326) = 1;
                      result = (WTF::StringImpl *)WebCore::ViewTransition::skipViewTransition((uint64_t *)v5, (WTF::StringImpl *)&v324);
                      if ((_DWORD)v326 != -1)
                        result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v326])(&v320, &v324);
LABEL_591:
                      if ((_BYTE)v306)
                      {
                        result = v305;
                        v305 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                      goto LABEL_595;
                    }
                    v79 = v76 + 16 * v77;
                  }
                  else
                  {
                    v79 = 0;
                    v77 = 0;
                  }
                  v78 = v76 + 16 * v77;
                  goto LABEL_142;
                }
                v59 = (_QWORD *)(v56 + 16 * v57);
              }
              else
              {
                v59 = 0;
                v57 = 0;
              }
              v58 = (_QWORD *)(v56 + 16 * v57);
              goto LABEL_99;
            }
            v54 = *(_DWORD *)(v50 + 16);
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x195A664F0);
            }
            *(_DWORD *)(v50 + 16) = v54 - 1;
LABEL_84:
            v304 = 0;
            v305 = 0;
            v306 = 0;
            goto LABEL_85;
          }
          v52 = 5;
        }
        ((void (*)(void))(*v51)[v52])();
        goto LABEL_79;
      }
      v17 = *(_QWORD *)(v5 + 120);
      v18 = *(_QWORD *)(v17 + 24);
      if (!v18 || !*(_QWORD *)v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
      {
LABEL_37:
        if (*(_BYTE *)(v5 + 72) != 4)
        {
          v27 = *(_QWORD *)(v5 + 104);
          v28 = **(_QWORD **)(v27 + 24);
          if ((v28 & 0xFFFE000000000002) != 0)
            v29 = 0;
          else
            v29 = *(_BYTE *)(v28 + 5) == 68 ? **(JSC::JSPromise ***)(v27 + 24) : 0;
          v30 = *(_QWORD *)(v27 + 32);
          if (!v30 || (*(_BYTE *)(v30 + 8) & 3) != 0)
            v31 = 0;
          else
            v31 = *(JSC::JSGlobalObject **)v30;
          JSC::JSPromise::markAsHandled(v29, v31);
          v32 = *((_QWORD *)v4 + 3);
          v33 = **(_QWORD **)(v32 + 24);
          if ((v33 & 0xFFFE000000000002) != 0)
            v34 = 0;
          else
            v34 = *(_BYTE *)(v33 + 5) == 68 ? **(JSC::JSPromise ***)(v32 + 24) : 0;
          v324 = (WTF ***)JSC::JSPromise::result(v34, *(JSC::VM **)(**(_QWORD **)(v32 + 32) + 56));
          LODWORD(v326) = 0;
          result = (WTF::StringImpl *)WebCore::ViewTransition::skipViewTransition((uint64_t *)v5, (WTF::StringImpl *)&v324);
          if ((_DWORD)v326 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v326])(&v320, &v324);
        }
        goto LABEL_599;
      }
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19 || (*(_BYTE *)(v19 + 8) & 3) != 0)
        v20 = 0;
      else
        v20 = *(uint64_t **)v19;
      v21 = v20[7];
      MEMORY[0x19AEA3294](&v324, v21);
      v22 = *((_QWORD *)v4 + 3);
      v23 = **(_QWORD **)(v22 + 24);
      if ((v23 & 0xFFFE000000000002) != 0)
      {
        v24 = 0;
      }
      else if (*(_BYTE *)(v23 + 5) == 68)
      {
        v24 = **(JSC::JSPromise ***)(v22 + 24);
      }
      else
      {
        v24 = 0;
      }
      v25 = (objc_class *)JSC::JSPromise::result(v24, *(JSC::VM **)(**(_QWORD **)(v22 + 32) + 56));
      v26 = *(_QWORD *)(v21 + 16);
      if (!v26)
      {
        WebCore::DeferredPromise::callFunction(v17, v20, 1, v25);
LABEL_36:
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v324);
        goto LABEL_37;
      }
      v293 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v20);
      if (!(*(unsigned int (**)(_QWORD *))(*v293 + 64))(v293))
      {
LABEL_618:
        WebCore::reportException((JSC::JSGlobalObject *)v20, v26, 0, 0, 0);
        goto LABEL_36;
      }
      v296 = v293[43];
      if (*(_QWORD *)(v21 + 24) == v26)
      {
LABEL_650:
        *(_BYTE *)(*(_QWORD *)(v296 + 8) + 93442) = 1;
        *(_BYTE *)(v17 + 44) = 1;
        goto LABEL_618;
      }
      if (!v296)
        goto LABEL_618;
      v297 = (unsigned __int8 *)(v296 + 40);
      if (__ldaxr((unsigned __int8 *)(v296 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v297))
      {
        goto LABEL_644;
      }
      MEMORY[0x19AEA534C](v296 + 40);
LABEL_644:
      v299 = *(unsigned __int8 *)(v296 + 41);
      v300 = __ldxr(v297);
      if (v300 == 1)
      {
        if (!__stlxr(0, v297))
        {
LABEL_649:
          if (!v299)
            goto LABEL_618;
          goto LABEL_650;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v296 + 40));
      goto LABEL_649;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ViewTransition::callUpdateCallback(void)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A89A8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ViewTransition::callUpdateCallback(void)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A89A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::ViewTransition::callUpdateCallback(void)::$_1,void>::call(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  _BYTE v5[16];
  int v6;
  char v7;

  v1 = result[2];
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      v3 = result[1];
      v4 = v2[6];
      v2[6] = v4 + 1;
      if (*(_BYTE *)(v3 + 72) != 4)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5[0] = 19;
        v6 = 1;
        result = WebCore::ViewTransition::skipViewTransition((uint64_t *)v3, (WTF::StringImpl *)v5);
        if (v6 != -1)
          result = (uint64_t *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v6])(&v7, v5);
        v4 = v2[6] - 1;
      }
      if (v4)
        v2[6] = v4;
      else
        return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ViewTransition::setupViewTransition(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A89D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ViewTransition::setupViewTransition(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A89D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::ViewTransition::setupViewTransition(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      result = (unsigned int *)*((_QWORD *)result + 1);
      v3 = v2[6];
      v2[6] = v3 + 1;
      if (*((_BYTE *)result + 72) != 4)
      {
        result = WebCore::ViewTransition::callUpdateCallback(result);
        v3 = v2[6] - 1;
      }
      if (v3)
        v2[6] = v3;
      else
        return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return result;
}

void std::__function::__func<WebCore::ViewTransition::captureOldState(void)::$_0,std::allocator<WebCore::ViewTransition::captureOldState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ViewTransition::captureOldState(void)::$_0,std::allocator<WebCore::ViewTransition::captureOldState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E33A89F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<WebCore::ViewTransition::captureOldState(void)::$_0,std::allocator<WebCore::ViewTransition::captureOldState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E33A89F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ViewTransition::captureOldState(void)::$_0,std::allocator<WebCore::ViewTransition::captureOldState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::operator()@<X0>(WebCore::RenderLayerModelObject **this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::RenderLayerModelObject ***v23;
  BOOL v24;
  _BYTE v25[8];
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  WebCore::Style::Scope *v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;

  v6 = *(_QWORD *)(a2 + 8);
  result = (WTF::StringImpl *)WebCore::Styleable::fromRenderer((uint64_t)this, (const WebCore::RenderElement *)this, (uint64_t)&v29);
  if (!v32)
    goto LABEL_32;
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A66B84);
  }
  result = (WTF::StringImpl *)WebCore::effectiveViewTransitionName(&v28, this[4], this[11], v29, *(WTF::StringImpl ***)(v9 + 1040));
  if (!v28)
  {
LABEL_32:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_33;
  }
  WebCore::checkDuplicateViewTransitionName((uint64_t)v25, (uint64_t)&v28, *(uint64_t **)(a2 + 16));
  if (!v27)
  {
    WebCore::RenderObject::setCapturedInViewTransition((uint64_t)this, 1);
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v11 + 8))
    {
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v12 + 1)
        v15 = v12 + 1;
      else
        v15 = v14;
      if (v15 >> 29)
      {
LABEL_46:
        __break(0xC471u);
        JUMPOUT(0x195A66B64);
      }
      v16 = *(WTF **)v11;
      v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(v11 + 8) = v15;
      *(_QWORD *)v11 = v17;
      if ((_DWORD)v12)
      {
        v18 = 8 * v12;
        v19 = v16;
        do
        {
          v20 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)v17 = v20;
          v21 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            v22 = *(_DWORD *)(v21 + 16);
            if (!v22)
              goto LABEL_46;
            *(_DWORD *)(v21 + 16) = v22 - 1;
          }
          v17 = (WTF *)((char *)v17 + 8);
          v19 = (WTF *)((char *)v19 + 8);
          v18 -= 8;
        }
        while (v18);
        v17 = *(WTF **)v11;
      }
      if (v16)
      {
        if (v17 == v16)
        {
          *(_QWORD *)v11 = 0;
          *(_DWORD *)(v11 + 8) = 0;
        }
        WTF::fastFree(v16, v8);
        v17 = *(WTF **)v11;
      }
      v12 = *(unsigned int *)(v11 + 12);
      v23 = (WebCore::RenderLayerModelObject ***)((char *)v17 + 8 * v12);
    }
    else
    {
      v23 = (WebCore::RenderLayerModelObject ***)(*(_QWORD *)v11 + 8 * v12);
    }
    *v23 = this;
    ++*((_DWORD *)this + 4);
    *(_DWORD *)(v11 + 12) = v12 + 1;
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_32;
  }
  v10 = v26;
  *(_BYTE *)a3 = v25[0];
  a3[1] = v10;
  *((_BYTE *)a3 + 16) = 1;
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_33:
  if (v32)
    v24 = v31 == 0;
  else
    v24 = 1;
  if (!v24)
  {
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::effectiveViewTransitionName(WTF::StringImpl **this, WebCore::RenderLayerModelObject *a2, WebCore::Element *a3, WebCore::Style::Scope *a4, WTF::StringImpl **a5)
{
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  int v14;

  v6 = this;
  if (a2 && (v7 = *((_QWORD *)a2 + 1)) != 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 0x18) != 0
    || (v9 = *((_QWORD *)a3 + 5), !*(_BYTE *)(v9 + 368)))
  {
    v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v8 += 2;
    *this = v8;
  }
  else
  {
    v10 = *(WTF::StringImpl **)(v9 + 352);
    if (v10)
      *(_DWORD *)v10 += 2;
    this = (WTF::StringImpl **)WebCore::Style::Scope::forOrdinal((uint64_t)a4, *(char *)(v9 + 360));
    if (this)
      v12 = this == a5;
    else
      v12 = 0;
    if (v12)
    {
      if (!v10)
      {
        *v6 = 0;
        return this;
      }
      v14 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      *v6 = v10;
      goto LABEL_20;
    }
    v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v13 += 2;
    *v6 = v13;
    if (v10)
    {
      v14 = *(_DWORD *)v10 - 2;
LABEL_20:
      if (v14)
        *(_DWORD *)v10 = v14;
      else
        return (WTF::StringImpl **)WTF::StringImpl::destroy(v10, v11);
    }
  }
  return this;
}

uint64_t WebCore::checkDuplicateViewTransitionName(uint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int i;
  unsigned int v9;
  WTF::StringImpl **v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (_QWORD *)result;
  v4 = *a3;
  if (!*a3)
  {
LABEL_7:
    result = (uint64_t)WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add(a3, a2, (uint64_t)&v15);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    return result;
  }
  v5 = 0;
  v6 = *(WTF::StringImpl **)a2;
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  for (i = v7 >> 8; ; i = v5 + v9)
  {
    v9 = i & *(_DWORD *)(v4 - 8);
    v10 = *(WTF::StringImpl ***)(v4 + 8 * v9);
    if (v10 != (WTF::StringImpl **)-1)
    {
      if (!v10)
        goto LABEL_7;
      if (*v10 == v6)
        break;
    }
    ++v5;
  }
  if (v6)
  {
    v11 = *((_DWORD *)v6 + 1);
    *(_DWORD *)v6 += 2;
    if (v11 < 0 || (result = (v11 + 51), __OFADD__(v11, 51)))
    {
      v16 = 0;
      goto LABEL_20;
    }
    v12 = (v7 >> 2) & 1;
  }
  else
  {
    v12 = 1;
    result = 51;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(result, v12, "Multiple elements found with view-transition-name: ", 0x33u, v6, &v16);
  v14 = v16;
  if (!v16)
  {
LABEL_20:
    __break(0xC471u);
    return result;
  }
  *(_BYTE *)v3 = 8;
  v3[1] = v14;
  *((_BYTE *)v3 + 16) = 1;
  v16 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v13);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ViewTransition::captureNewState(void)::$_0,std::allocator<WebCore::ViewTransition::captureNewState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ViewTransition::captureNewState(void)::$_0,std::allocator<WebCore::ViewTransition::captureNewState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E33A8A40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ViewTransition::captureNewState(void)::$_0,std::allocator<WebCore::ViewTransition::captureNewState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E33A8A40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ViewTransition::captureNewState(void)::$_0,std::allocator<WebCore::ViewTransition::captureNewState(void)::$_0>,WebCore::ExceptionOr<void> ()(WebCore::RenderLayerModelObject &)>::operator()@<X0>(WebCore::RenderLayerModelObject **this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v6;
  WTF::StringImpl *result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int i;
  unsigned int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  int v21;
  unsigned int j;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  BOOL v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::Style::Scope *v48;
  int v49;
  WTF::StringImpl *v50;
  unsigned __int8 v51;
  char v52;
  WTF::StringImpl *v53;
  _BYTE v54[24];

  v4 = a2;
  v6 = (_QWORD *)a2[1];
  result = (WTF::StringImpl *)WebCore::Styleable::fromRenderer((uint64_t)this, (const WebCore::RenderElement *)this, (uint64_t)&v48);
  if (!v52)
    goto LABEL_49;
  v9 = *(_QWORD *)(v6[1] + 8);
  if (*(_BYTE *)(v9 + 178))
  {
    v8 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    v11 = 105;
    __break(0xC471u);
    goto LABEL_65;
  }
  result = (WTF::StringImpl *)WebCore::effectiveViewTransitionName(&v47, this[4], this[11], v48, *(WTF::StringImpl ***)(v9 + 1040));
  if (!v47)
  {
LABEL_49:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_50;
  }
  WebCore::checkDuplicateViewTransitionName((uint64_t)&v39, (uint64_t)&v47, (uint64_t *)v4[2]);
  if (!(_BYTE)v41)
  {
    v11 = (uint64_t)(v6 + 5);
    v12 = v6[5];
    if (v12)
    {
      v13 = 0;
      for (i = *((_DWORD *)v47 + 4) >> 8; ; i = v13 + v15)
      {
        v15 = i & *(_DWORD *)(v12 - 8);
        v16 = *(WTF::StringImpl ***)(v12 + 8 * v15);
        if (v16 != (WTF::StringImpl **)-1)
        {
          if (!v16)
            goto LABEL_14;
          if (*v16 == v47)
            break;
        }
        ++v13;
      }
    }
    else
    {
LABEL_14:
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v45 = 0;
      v46 = 0;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0;
      WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add((uint64_t *)v11, (uint64_t)&v47, (uint64_t)v54);
      v4 = v6 + 8;
      WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CapturedElement,WebCore::CapturedElement&>(&v53, &v39);
      WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CapturedElement>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CapturedElement>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::UniqueRef<WebCore::CapturedElement>>((uint64_t)v54, v6 + 8, &v47, &v53);
      if (v53)
      {
        WebCore::CapturedElement::~CapturedElement(v53, v17);
        WTF::fastFree(v18, v19);
      }
      WebCore::CapturedElement::~CapturedElement((WebCore::CapturedElement *)&v39, v17);
    }
    if (v52)
    {
      v20 = v6[8];
      if (!v20)
        goto LABEL_25;
      v21 = 0;
      for (j = *((_DWORD *)v47 + 4) >> 8; ; j = ++v21 + v23)
      {
        v23 = j & *(_DWORD *)(v20 - 8);
        v24 = *(WTF::StringImpl **)(v20 + 16 * v23);
        if (v24 != (WTF::StringImpl *)-1)
        {
          if (!v24)
            goto LABEL_25;
          if (v24 == v47)
            break;
        }
      }
      if ((_DWORD)v23 != *(_DWORD *)(v20 - 4))
        v4 = *(_QWORD **)(v20 + 16 * v23 + 8);
      else
LABEL_25:
        v4 = 0;
      v25 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v48);
      v26 = v25;
      if (v25)
      {
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 + 1, v25));
      }
      v11 = v4[7];
      v4[7] = v26;
      if (!v11)
        goto LABEL_31;
      do
      {
        v28 = __ldaxr((unsigned int *)v11);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v11));
      if (v29)
        goto LABEL_31;
      goto LABEL_66;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    atomic_store(1u, (unsigned int *)v11);
    v35 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v35)
    {
      v38 = v11;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v35));
      v11 = v38;
    }
    v36 = *(WTF **)(v11 + 16);
    if (v36)
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      v37 = v11;
      WTF::fastFree(v36, v8);
      v11 = v37;
    }
    WTF::fastFree((WTF *)v11, v8);
LABEL_31:
    if (*((unsigned __int8 *)v4 + 80) == v51)
    {
      if (*((_BYTE *)v4 + 80))
      {
        *((_DWORD *)v4 + 16) = v49;
        v30 = v50;
        if (v50)
          *(_DWORD *)v50 += 2;
        v31 = (WTF::StringImpl *)v4[9];
        v4[9] = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
    }
    else if (*((_BYTE *)v4 + 80))
    {
      v32 = (WTF::StringImpl *)v4[9];
      v4[9] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v32 -= 2;
      }
      *((_BYTE *)v4 + 80) = 0;
    }
    else
    {
      *((_DWORD *)v4 + 16) = v49;
      v33 = v50;
      if (v50)
        *(_DWORD *)v50 += 2;
      v4[9] = v33;
      *((_BYTE *)v4 + 80) = 1;
    }
    result = v47;
    v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_49;
  }
  v10 = v40;
  *(_BYTE *)a3 = v39;
  a3[1] = v10;
  *((_BYTE *)a3 + 16) = 1;
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_50:
  if (v52)
    v34 = v51 == 0;
  else
    v34 = 1;
  if (!v34)
  {
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::setViewportFeature(WebCore::ViewportArguments &,WTF::StringView,WTF::StringView,WTF::Function<void ()(WebCore::ViewportErrorCode,WTF::String const&)> const&)::$_0,void,WebCore::ViewportErrorCode,WTF::StringView,WTF::StringView>::call(uint64_t a1, uint64_t a2, int16x8_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int16x8_t *v24;
  int16x8_t *v25;
  int16x8_t v26;
  int16x8_t *v27;
  int8x16_t v28;
  char *v29;
  int16x8_t v30;
  __int16 *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v9 = *(_QWORD **)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v36;
  if (a3)
  {
    if (v36)
    {
      WTF::StringImpl::replace();
      v12 = v36;
      v35 = v36;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v11);
        if (!a5)
          goto LABEL_16;
      }
      else
      {
        *(_DWORD *)v36 -= 2;
        if (!a5)
          goto LABEL_16;
      }
    }
    else
    {
      v12 = 0;
      v35 = 0;
      if (!a5)
      {
LABEL_16:
        v14 = v12;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v12 = v36;
    if (!a5)
      goto LABEL_16;
  }
  if (v12)
  {
    WTF::StringImpl::replace();
    v14 = v36;
    v35 = v36;
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  else
  {
    v14 = 0;
    v35 = 0;
  }
LABEL_17:
  if ((a2 - 1) > 1u)
    goto LABEL_60;
  if ((a4 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a4)
      goto LABEL_60;
    v23 = 2 * a4;
    if (v23 <= -2)
    {
      __break(1u);
      goto LABEL_68;
    }
    v24 = (int16x8_t *)((char *)a3 + 2 * a4);
    if ((unint64_t)v23 <= 0x3E)
    {
      v31 = (__int16 *)a3;
      while (*v31 != 59)
      {
        ++v31;
        v23 -= 2;
        if (!v23)
          goto LABEL_60;
      }
    }
    else
    {
      v25 = a3;
      if (a4 < 8uLL)
      {
LABEL_47:
        if (v25 >= v24)
          goto LABEL_60;
        v27 = v24 - 1;
        v30.i64[0] = 0x3B003B003B003BLL;
        v30.i64[1] = 0x3B003B003B003BLL;
        v28 = (int8x16_t)vceqq_s16(v24[-1], v30);
        v30.i16[0] = vmaxvq_u16((uint16x8_t)v28);
        if (!v30.i32[0])
          goto LABEL_60;
      }
      else
      {
        v26.i64[0] = 0x3B003B003B003BLL;
        v26.i64[1] = 0x3B003B003B003BLL;
        v27 = a3;
        while (1)
        {
          v28 = (int8x16_t)vceqq_s16(*v27, v26);
          LOWORD(v10) = vmaxvq_u16((uint16x8_t)v28);
          if (v10)
            break;
          v25 = v27 + 1;
          v29 = &v27[1].i8[14];
          ++v27;
          if (v29 >= (char *)v24)
            goto LABEL_47;
        }
      }
      v31 = &v27->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v28))];
    }
    if (v31 == (__int16 *)v24)
      goto LABEL_60;
    v18 = ((char *)v31 - (char *)a3) >> 1;
LABEL_28:
    if (v18 == -1)
      goto LABEL_60;
    if (!v14)
    {
      v20 = 89;
      goto LABEL_33;
    }
    v19 = *((_DWORD *)v14 + 1);
    *(_DWORD *)v14 += 2;
    if ((v19 & 0x80000000) == 0)
    {
      v20 = (v19 + 89);
      if (!__OFADD__(v19, 89))
      {
        if ((*((_BYTE *)v14 + 16) & 4) == 0)
        {
          v21 = 0;
LABEL_34:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v20, v21, (uint64_t)v14, (int8x16_t *)" Note that ';' is not a separator in viewport values. The list should be comma-separated.",
            0x59u,
            &v36);
          if (v36)
          {
            v35 = v36;
            v36 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::destroy(v14, v22);
                v32 = v36;
                v36 = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2)
                    WTF::StringImpl::destroy(v32, v22);
                  else
                    *(_DWORD *)v32 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v14 -= 2;
                v36 = 0;
              }
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v22);
              else
                *(_DWORD *)v14 -= 2;
            }
            goto LABEL_60;
          }
LABEL_69:
          __break(0xC471u);
          JUMPOUT(0x195A67610);
        }
LABEL_33:
        v21 = 1;
        goto LABEL_34;
      }
    }
LABEL_68:
    v36 = 0;
    goto LABEL_69;
  }
  if ((_DWORD)a4)
  {
    v15 = 16;
    if (a4 < 0x10uLL)
      v15 = a4;
    v16 = v15;
    v17 = a3;
    do
    {
      if (*v17 == 59)
        goto LABEL_27;
      ++v17;
      --v16;
    }
    while (v16);
    if (a4 >= 0x11uLL)
    {
      v17 = memchr(&a3->i8[v15], 59, a4 - v15);
      if (v17)
      {
LABEL_27:
        v18 = v17 - (_BYTE *)a3;
        goto LABEL_28;
      }
    }
  }
LABEL_60:
  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **))(*(_QWORD *)*v9 + 16))(*v9, a2, &v35);
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::setViewportFeature(WebCore::ViewportArguments &,WebCore::Document &,WTF::StringView,WTF::StringView)::$_0,void,WebCore::ViewportErrorCode,WTF::String const&>::call(uint64_t a1, unsigned int a2, WTF::StringImpl **a3)
{
  _QWORD *result;
  uint64_t v4;
  unsigned int v5;

  result = *(_QWORD **)(a1 + 8);
  v4 = result[66];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = 0x2010202u >> (8 * a2);
    if (a2 >= 4)
      LOBYTE(v5) = 2;
    return (_QWORD *)WebCore::Document::addConsoleMessage(result, 6, v5 & 3, a3, 0);
  }
  return result;
}

uint64_t *WebCore::VisitedLinkState::invalidateStyleForAllLinks(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this[2];
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v2 = *(_QWORD *)(this[1] + 8);
    *(_DWORD *)(v2 + 24) += 2;
    v7 = v2;
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
    {
      while ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v7);
      }
      v5 = v2;
      v6 = v3;
      do
      {
        *(_DWORD *)(v3 + 24) += 2;
        v4 = v3;
        if ((*(_WORD *)(v3 + 30) & 1) != 0)
          WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)v3);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v4);
        WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v5);
        v3 = v6;
      }
      while (v6);
    }
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v7);
  }
  return this;
}

WebCore::MouseRelatedEvent *WebCore::WheelEvent::create@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, WebCore::MouseRelatedEvent **a3@<X8>)
{
  WebCore::MouseRelatedEvent *v6;
  WebCore::MouseRelatedEvent *result;
  int v8;
  int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  uint64_t v19;

  v6 = (WebCore::MouseRelatedEvent *)bmalloc::api::isoAllocate();
  result = WebCore::MouseEvent::MouseEvent(v6, 96, a1, (int32x2_t *)a2);
  *(_QWORD *)result = off_1E33A8E68;
  v8 = *(_DWORD *)(a2 + 108);
  v9 = v8;
  if (!v8)
  {
    v10 = *(double *)(a2 + 80);
    if (v10 <= -2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else
    {
      v9 = (int)-v10;
      if (v10 >= 2147483650.0)
        v9 = 0x80000000;
    }
  }
  v11 = *(_DWORD *)(a2 + 112);
  v12 = v11;
  if (!v11)
  {
    v13 = *(double *)(a2 + 88);
    if (v13 < 2147483650.0)
      v14 = (int)-v13;
    else
      v14 = 0x80000000;
    if (v13 > -2147483650.0)
      v12 = v14;
    else
      v12 = 0x7FFFFFFF;
  }
  *((_DWORD *)result + 44) = v9;
  *((_DWORD *)result + 45) = v12;
  v15 = *(double *)(a2 + 80);
  v16 = v15 == 0.0;
  v17 = 0.0;
  if (v15 == 0.0)
    v15 = 0.0;
  if (v8 && v16)
    v15 = -(double)v8;
  *((double *)result + 23) = v15;
  v18 = *(double *)(a2 + 88);
  if (v18 != 0.0)
    v17 = *(double *)(a2 + 88);
  if (v11 && v18 == 0.0)
    v17 = -(double)v11;
  v19 = *(_QWORD *)(a2 + 96);
  *((double *)result + 24) = v17;
  *((_QWORD *)result + 25) = v19;
  *((_DWORD *)result + 52) = *(_DWORD *)(a2 + 104);
  *((_BYTE *)result + 224) = 0;
  *((_BYTE *)result + 352) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::WheelEvent::isWheelEvent(WebCore::WheelEvent *this)
{
  return 1;
}

uint64_t WebCore::windowEventLoopMap(WebCore *this)
{
  uint64_t result;

  result = WTF::isMainThread(this);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A6789CLL);
  }
  if ((_MergedGlobals_175 & 1) == 0)
  {
    qword_1ECE83240 = 0;
    *(_QWORD *)&dword_1ECE83248 = 0;
    qword_1ECE83250 = 0;
    _MergedGlobals_175 = 1;
  }
  return result;
}

BOOL WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(const WTF::StringImpl **a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  const WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  WTF::StringImpl **v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v40;

  v3 = qword_1ECE83240;
  v4 = dword_1ECE83248;
  if (qword_1ECE83240)
  {
    v6 = dword_1ECE83248 - 1;
    v7 = qword_1ECE83250;
    v8 = *a1;
    v9 = *((_DWORD *)v8 + 4);
    if (v9 < 0x100)
    {
      v10 = WTF::StringImpl::hashSlowCase(v8);
      v3 = qword_1ECE83240;
    }
    else
    {
      v10 = v9 >> 8;
    }
    v12 = (v10 ^ v7) & v6;
    v11 = v3 + 16 * v12;
    v13 = *(WTF **)v11;
    if (*(_QWORD *)v11)
    {
      v14 = -1;
      while (1)
      {
        v15 = *((_DWORD *)v13 + 4);
        v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
        if (++v14 > ((v12 + v4 - ((v16 ^ v7) & v6)) & v6))
          break;
        if (v16 == v10)
        {
          v17 = WTF::equal(*(WTF **)v11, *a1, a3);
          v3 = qword_1ECE83240;
          if ((v17 & 1) != 0)
          {
            v4 = dword_1ECE83248;
            goto LABEL_20;
          }
        }
        else
        {
          v3 = qword_1ECE83240;
        }
        v12 = (v12 + 1) & v6;
        v11 = v3 + 16 * v12;
        v13 = *(WTF **)v11;
        if (!*(_QWORD *)v11)
          goto LABEL_19;
      }
      v3 = qword_1ECE83240;
    }
LABEL_19:
    v4 = dword_1ECE83248;
    v11 = v3 + 16 * dword_1ECE83248;
  }
  else
  {
    v11 = 16 * dword_1ECE83248;
  }
LABEL_20:
  v18 = v3 + 16 * v4;
  if (v18 != v11)
  {
    v19 = *(WTF::StringImpl **)v11;
    *(_QWORD *)v11 = -1;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    v20 = dword_1ECE83248;
    v21 = --dword_1ECE8324C;
    v22 = dword_1ECE83248 - 1;
    v23 = qword_1ECE83240;
    v24 = (unint64_t)(v11 - qword_1ECE83240) >> 4;
    v25 = ((_DWORD)v24 + 1) & (dword_1ECE83248 - 1);
    v26 = qword_1ECE83240 + 16 * v25;
    v27 = *(WTF::StringImpl **)v26;
    if (*(_QWORD *)v26)
    {
      v40 = v18;
      v28 = qword_1ECE83250;
      v29 = ((unint64_t)(v11 - qword_1ECE83240) >> 4);
      v30 = &qword_1ECE83000;
      v31 = (v24 + 1) & v22;
      v32 = (WTF::StringImpl **)(qword_1ECE83240 + 16 * v24);
      do
      {
        v33 = *((_DWORD *)v27 + 4);
        if (v33 < 0x100)
        {
          v34 = WTF::StringImpl::hashSlowCase(v27);
          v30 = &qword_1ECE83000;
        }
        else
        {
          v34 = v33 >> 8;
        }
        if (((v31 + v20 - ((v34 ^ v28) & v22)) & v22) == 0)
          break;
        v35 = *(WTF::StringImpl **)v26;
        *(_QWORD *)v26 = 0;
        v36 = *v32;
        *v32 = v35;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::destroy(v36, a2);
            v30 = &qword_1ECE83000;
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        *(_QWORD *)(v23 + 16 * v29 + 8) = *(_QWORD *)(v23 + 16 * v25 + 8);
        v37 = *(WTF::StringImpl **)v26;
        *(_QWORD *)v26 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::destroy(v37, a2);
            v30 = &qword_1ECE83000;
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v25 = (v31 + 1) & v22;
        v23 = v30[72];
        v29 = v31;
        v32 = (WTF::StringImpl **)(v23 + 16 * v31);
        v26 = v23 + 16 * v25;
        v27 = *(WTF::StringImpl **)v26;
        v31 = (v31 + 1) & v22;
      }
      while (*(_QWORD *)v26);
      v20 = dword_1ECE83248;
      v21 = dword_1ECE8324C;
      v18 = v40;
    }
    if (v20 >= 9 && 6 * v21 < v20)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v20 >> 1);
  }
  return v18 != v11;
}

uint64_t WebCore::WindowEventLoop::scheduleIdlePeriod(uint64_t this, WebCore::Page *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  ++*(_DWORD *)(this + 304);
  v2 = *((_QWORD *)a2 + 2);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(this + 296);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 16 * v8);
          if (v10 != -1)
          {
            if (!v10)
              goto LABEL_11;
            if (v10 == v2)
              break;
          }
          v8 = (v8 + i) & v4;
        }
        v11 = *((_QWORD *)a2 + 223);
        if (*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16))
          *(_BYTE *)(v11 + 56) = 1;
      }
    }
  }
LABEL_11:
  if (!*(_BYTE *)(this + 120))
  {
    *(_BYTE *)(this + 120) = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
  }
  return this;
}

void WebCore::WindowEventLoop::didScheduleRenderingUpdate(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int i;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;

  v5 = (uint64_t *)(a1 + 296);
  v6 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = v6 + 1;
  if (v6 > *(_DWORD *)(a1 + 308))
    WTF::WeakHashMap<WebCore::Page,WTF::MonotonicTime,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1 + 296, a2);
  v7 = a2[2];
  if (v7
    || (v7 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v7 = 1,
        *(_QWORD *)(v7 + 8) = a2,
        v10 = (unsigned int *)a2[2],
        a2[2] = v7,
        !v10))
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
    do
      v9 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v9 + 1, (unsigned int *)v7));
  }
  else
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    v7 = a2[2];
    do
      v13 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v13 + 1, (unsigned int *)v7));
    do
      v14 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v14 + 1, (unsigned int *)v7));
    if (!v7)
      goto LABEL_18;
  }
  do
  {
    v15 = __ldaxr((unsigned int *)v7);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v7));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, a2);
  }
LABEL_18:
  v17 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v5, 8u), (v17 = *v5) != 0))
  {
    v18 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = 0;
  v20 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = (v22 >> 31) ^ v22;
  for (i = 1; ; ++i)
  {
    v25 = v23 & v18;
    v26 = (uint64_t *)(v17 + 16 * v25);
    v27 = *v26;
    if (*v26 == -1)
    {
      v19 = (uint64_t *)(v17 + 16 * v25);
      goto LABEL_22;
    }
    if (!v27)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        *v19 = v7;
      }
      else
      {
        *v26 = v7;
        v19 = (uint64_t *)(v17 + 16 * v25);
      }
      *((double *)v19 + 1) = a3;
      v30 = *v5;
      if (*v5)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v5;
      if (*v5)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 > 2 * v34)
          return;
      }
      else
      {
        if (3 * v35 > 4 * v34)
          return;
        if (!(_DWORD)v35)
        {
          v36 = 8;
          goto LABEL_41;
        }
      }
      v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_41:
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v5, v36);
      return;
    }
    if (v27 == v7)
      break;
LABEL_22:
    v23 = i + v25;
  }
  *(double *)(v17 + 16 * v25 + 8) = a3;
  if (v7)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)v7);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)v7));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

double WebCore::WindowEventLoop::opportunisticallyRunIdleCallbacks(WebCore::WindowEventLoop *this)
{
  double v2;
  double v3;
  double *v4;
  double v5;
  WTF::MonotonicTime *v6;
  WTF::MonotonicTime *v7;
  double v8;
  double result;
  WTF::MonotonicTime *v10;

  WTF::MonotonicTime::now(this);
  v3 = v2;
  if (WebCore::WindowEventLoop::shouldEndIdlePeriod((uint64_t)this, v2))
  {
    v4 = (double *)((char *)this + 336);
    v5 = *((double *)this + 42);
  }
  else
  {
    *((double *)this + 41) = v3;
    v6 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E33A8FE8;
    v10 = v6;
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((_QWORD *)this + 13, &v10);
    v7 = v10;
    v10 = 0;
    if (v7)
      v7 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v7 + 8))(v7);
    WTF::MonotonicTime::now(v7);
    v4 = (double *)((char *)this + 336);
    v5 = *((double *)this + 42) + v8 - *((double *)this + 41);
  }
  result = v5 * 0.5;
  *v4 = result;
  return result;
}

BOOL WebCore::WindowEventLoop::shouldEndIdlePeriod(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;
  unsigned int *v16;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::MicrotaskQueue *v26;
  WTF *v27;
  void *v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 40) & 0xFD) != 1)
            return 1;
        }
      }
      v4 += 8;
    }
    while (--v3);
  }
  v7 = *(_QWORD **)(a1 + 200);
  if (!v7)
  {
    v30 = a2;
    v16 = (unsigned int *)WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_26:
      v18 = WTF::fastMalloc((WTF *)0x38);
      *(_BYTE *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      do
        v20 = __ldaxr(v16);
      while (__stlxr(v20 + 1, v16));
      v29 = (_QWORD *)v18;
      *(_QWORD *)(v18 + 24) = v16;
      v21 = *(_QWORD *)(a1 + 16);
      if (v21)
        goto LABEL_39;
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = a1;
      v22 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v21;
      if (!v22)
        goto LABEL_39;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v19);
      }
      v21 = *(_QWORD *)(a1 + 16);
      if (v21)
      {
LABEL_39:
        do
          v25 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v25 + 1, (unsigned int *)v21));
      }
      v7 = v29;
      v29[5] = 0;
      v29[6] = 0;
      v29[4] = v21;
      v26 = *(WebCore::MicrotaskQueue **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v29;
      a2 = v30;
      if (v26)
      {
        WebCore::MicrotaskQueue::~MicrotaskQueue(v26, v19);
        WTF::fastFree(v27, v28);
        a2 = v30;
        v7 = *(_QWORD **)(a1 + 200);
      }
      goto LABEL_8;
    }
    WTF::RunLoop::webIfExists((WTF::RunLoop *)a1);
    JSC::VM::create();
    v16 = (unsigned int *)v31;
    WebCore::g_commonVMOrNull = v31;
    if (__ldaxr((unsigned int *)(v31 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v31 + 1096)))
    {
LABEL_23:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v31 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v31 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v31, 0);
      goto LABEL_26;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v31 + 192));
    goto LABEL_23;
  }
LABEL_8:
  v8 = *((unsigned int *)v7 + 5);
  if ((_DWORD)v8)
  {
    v9 = v7[1];
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 40) & 0xFD) != 1)
            return 1;
        }
      }
      v9 += 8;
    }
    while (--v8);
  }
  v12 = a2 + *(double *)(a1 + 336);
  v13 = COERCE_DOUBLE(WebCore::WindowEventLoop::nextRenderingTime((WebCore::WindowEventLoop *)a1));
  if (v14 && v12 > v13)
    return 1;
  return *(double *)(a1 + 128) < v12;
}

uint64_t WebCore::WindowEventLoop::nextRenderingTime(WebCore::WindowEventLoop *this)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  int v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double *v14;

  v1 = (double *)*((_QWORD *)this + 37);
  if (!v1)
  {
    v3 = 0;
    v2 = 0;
LABEL_10:
    v5 = v3;
    v3 = &v1[2 * v2];
    if (!v1)
    {
      v7 = 0;
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[2 * v2];
  if (!*((_DWORD *)v1 - 3))
    goto LABEL_10;
  if (!(_DWORD)v2)
  {
    v6 = 0;
    v5 = (double *)*((_QWORD *)this + 37);
    goto LABEL_13;
  }
  v4 = 16 * v2;
  v5 = (double *)*((_QWORD *)this + 37);
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 2;
    v4 -= 16;
    if (!v4)
    {
      v5 = v3;
      break;
    }
  }
LABEL_8:
  v6 = *((unsigned int *)v1 - 1);
LABEL_13:
  v7 = &v1[2 * v6];
LABEL_14:
  if (v7 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v8 = v5 + 2;
      v5 = v3;
      if (v8 != v3)
      {
        v5 = v8;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v7)
      {
        v5 = v7;
        break;
      }
    }
  }
  if (v1)
    v1 += 2 * *((unsigned int *)v1 - 1);
  if (v5 == v1)
    return 0;
  v9 = *((_DWORD *)this + 76);
  v10 = 0.0;
  v11 = 1;
  do
  {
    if (v11 & 1 | (v5[1] < v10))
      v10 = v5[1];
    v12 = v5 + 2;
    v13 = v3;
    if (v12 != v3)
    {
      v13 = v12;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 2;
        if (v13 == v3)
        {
          v13 = v3;
          break;
        }
      }
    }
    v5 = v7;
    if (v13 != v7)
    {
      v5 = v13;
      if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
      {
        while (1)
        {
          v14 = v5 + 2;
          v5 = v3;
          if (v14 != v3)
          {
            v5 = v14;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 2;
              if (v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v7)
            break;
          if (*(_QWORD *)(*(_QWORD *)v5 + 8))
            goto LABEL_45;
        }
        v5 = v7;
      }
    }
LABEL_45:
    v11 = 0;
    *((_DWORD *)this + 76) = ++v9;
  }
  while (v5 != v1);
  return *(_QWORD *)&v10;
}

uint64_t WebCore::WindowEventLoop::backupElementQueue(WebCore::WindowEventLoop *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;

  if (!*((_BYTE *)this + 320))
  {
    *((_BYTE *)this + 320) = 1;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33A9060;
    v2[1] = this;
    v15 = v2;
    WebCore::EventLoopTaskGroup::queueMicrotask((uint64_t)this + 208, (uint64_t *)&v15);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  v3 = *((_QWORD *)this + 39);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = 0;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)v3 = v3 + 16;
    *(_QWORD *)(v3 + 8) = 4;
    v5 = (WTF *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v3;
    if (v5)
    {
      v6 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v6)
      {
        v11 = *(WTF **)v5;
        v12 = 8 * v6;
        v14 = v5;
        do
        {
          v13 = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v13);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
          v11 = (WTF *)((char *)v11 + 8);
          v12 -= 8;
          v5 = v14;
        }
        while (v12);
      }
      v7 = *(WTF **)v5;
      if ((WTF *)((char *)v5 + 16) != *(WTF **)v5 && v7 != 0)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        v10 = v5;
        WTF::fastFree(v7, v4);
        v5 = v10;
      }
      WTF::fastFree(v5, v4);
      return *((_QWORD *)this + 39);
    }
  }
  return v3;
}

uint64_t WebCore::DOMWindowTrustedTypes::from(WebCore::DOMWindowTrustedTypes *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  const char *v11[3];
  const char *v12[2];

  v3 = (uint64_t *)((char *)this + 80);
  v11[0] = "DOMWindowTrustedTypes";
  v11[1] = (const char *)22;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 10, v11);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = &unk_1E3353630;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)v5 = off_1E33A8C48;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
    v10 = (unsigned __int8 *)v5;
    v12[0] = "DOMWindowTrustedTypes";
    v12[1] = (const char *)22;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v12, &v10, (uint64_t)v11);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

uint64_t WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(WebCore::WindowOrWorkerGlobalScopeTrustedTypes *this, WebCore::DOMWindow *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  _DWORD *v8;
  uint64_t result;

  if (*((_BYTE *)this + 56))
    return 0;
  ++*((_DWORD *)this + 6);
  v3 = WebCore::DOMWindowTrustedTypes::from(this, a2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
LABEL_10:
    if (*((_DWORD *)this + 6) == 1)
      (*(void (**)(WebCore::WindowOrWorkerGlobalScopeTrustedTypes *))(*(_QWORD *)this + 72))(this);
    else
      --*((_DWORD *)this + 6);
    return v4;
  }
  v5 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 72);
  if (!v6 || (v6 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_7:
    v7 = (WebCore::ScriptExecutionContext *)(v6 + 192);
    v4 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v4 + 24) = 1;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &off_1E33A18C0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v4, v7);
    *(_QWORD *)v4 = &off_1E33A8AD8;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    v8 = *(_DWORD **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v4;
    if (v8)
    {
      if (v8[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        v4 = *(_QWORD *)(v5 + 16);
      }
      else
      {
        --v8[6];
      }
    }
    goto LABEL_10;
  }
  if (!*(_BYTE *)(v6 + 178))
  {
    v6 -= 288;
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(WebCore::WindowOrWorkerGlobalScopeTrustedTypes *this, WebCore::WorkerGlobalScope *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  _DWORD *v9;
  unsigned __int8 *v11;
  const char *v12[3];
  const char *v13[2];

  v3 = (uint64_t *)((char *)this + 432);
  v12[0] = "WorkerGlobalScopeTrustedTypes";
  v12[1] = (const char *)30;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 54, v12);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E33A8C68;
    *(_QWORD *)(v5 + 8) = this;
    *(_QWORD *)(v5 + 16) = 0;
    v11 = (unsigned __int8 *)v5;
    v13[0] = "WorkerGlobalScopeTrustedTypes";
    v13[1] = (const char *)30;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>(v3, v13, &v11, (uint64_t)v12);
    v6 = v11;
    v11 = 0;
    if (v6)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    v8 = *(WebCore::ScriptExecutionContext **)(v5 + 8);
    v7 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v7 + 24) = 1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = &off_1E33A18C0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v7, v8);
    *(_QWORD *)v7 = &off_1E33A8AD8;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    v9 = *(_DWORD **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v7;
    if (v9)
    {
      if (v9[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        return *(_QWORD *)(v5 + 16);
      }
      else
      {
        --v9[6];
      }
    }
  }
  return v7;
}

uint64_t WebCore::XMLDocument::createXHTML@<X0>(WebCore::XMLDocument *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::Settings *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v9 = bmalloc::api::isoAllocate();
  v10 = WebCore::XMLDocument::XMLDocument(v9, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0x82u);
  *a4 = v10;
  v11 = (uint64_t)(v10 + 24);
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v16 = v11;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v9 + 416), &v16, (uint64_t)&v15);
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

WTF::StringImpl *WebCore::MouseEvent::create@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, WTF **a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  WebCore *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WebCore *v29;
  WebCore *v30;
  WebCore *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  v10 = (WebCore *)bmalloc::api::isoAllocate();
  if (*((_DWORD *)a1 + 15) <= a2)
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v11 = (uint64_t)v10;
  v12 = *(_DWORD *)(a1[6] + 72 * a2 + 12);
  if ((v12 - 1) < 2)
  {
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v16 || (v10 = *(WebCore **)(v16 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v17 = *((_QWORD *)v10 + 5);
    if (!v17)
    {
      v29 = v10;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v17 = *((_QWORD *)v29 + 5);
    }
    v15 = *(WTF::StringImpl **)(v17 + 1232);
    if (v15)
      goto LABEL_17;
  }
  else
  {
    if ((v12 - 3) < 2)
    {
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v10 = *(WebCore **)(v13 + 96)) == 0)
        v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
      v14 = *((_QWORD *)v10 + 5);
      if (!v14)
      {
        v30 = v10;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
        v14 = *((_QWORD *)v30 + 5);
      }
      v15 = *(WTF::StringImpl **)(v14 + 1256);
      if (!v15)
        goto LABEL_18;
LABEL_17:
      *(_DWORD *)v15 += 2;
      goto LABEL_18;
    }
    if (v12)
    {
      v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (!*MEMORY[0x1E0CBF2F8])
        goto LABEL_18;
      goto LABEL_17;
    }
    v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v23 || (v10 = *(WebCore **)(v23 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v24 = *((_QWORD *)v10 + 5);
    if (!v24)
    {
      v31 = v10;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v24 = *((_QWORD *)v31 + 5);
    }
    v15 = *(WTF::StringImpl **)(v24 + 1208);
    if (v15)
      goto LABEL_17;
  }
LABEL_18:
  v36 = v15;
  v35 = *a1;
  WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v35);
  v19 = *a3;
  *a3 = 0;
  v34 = v19;
  if (*((_DWORD *)a1 + 15) <= a2)
  {
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x195A68C54);
  }
  v32 = *(_QWORD *)(a1[6] + 72 * a2 + 4);
  v33 = v32;
  WebCore::MouseRelatedEvent::MouseRelatedEvent(v11, 76, &v36, 1, a4, 1, (uint64_t *)&v34, 0, v18, 0.0, 0.0, &v33, (const WebCore::IntPoint *)&v32, *((_BYTE *)a1 + 9), 0, 0, 1);
  *(_QWORD *)v11 = off_1E33A5C38;
  *(_DWORD *)(v11 + 154) = 0;
  *(_WORD *)(v11 + 158) = 256;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 168) = 0;
  *a5 = v11;
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      v25 = (uint64_t *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      if (v25)
      {
        if (*v25)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v25, v20);
        WTF::fastFree((WTF *)v25, v20);
      }
      v26 = (unsigned int *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v20);
        }
      }
      WTF::fastFree(v21, v20);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::EventNames **WebCore::PointerEvent::create@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, WebCore::EventNames **a4@<X3>, uint64_t *a5@<X4>, WebCore::EventNames ***a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::EventNames **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore *v25;
  WebCore::EventNames **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WebCore::EventNames **result;

  if (*(_DWORD *)(a1 + 60) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A68E7CLL);
  }
  switch(*(_DWORD *)(*(_QWORD *)(a1 + 48) + 72 * a2 + 12))
  {
    case 0:
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow((WebCore *)a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      v15 = (WebCore::EventNames **)(v14 + 1488);
      break;
    case 1:
    case 2:
      v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
        v23 = WebCore::threadGlobalDataSlow((WebCore *)a1);
      v24 = *(_QWORD *)(v23 + 40);
      if (!v24)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
        v24 = *(_QWORD *)(v23 + 40);
      }
      v15 = (WebCore::EventNames **)(v24 + 1528);
      break;
    case 3:
      v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
        v20 = WebCore::threadGlobalDataSlow((WebCore *)a1);
      v21 = *(_QWORD *)(v20 + 40);
      if (!v21)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
        v21 = *(_QWORD *)(v20 + 40);
      }
      v15 = (WebCore::EventNames **)(v21 + 1552);
      break;
    case 4:
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
        v17 = WebCore::threadGlobalDataSlow((WebCore *)a1);
      v18 = *(_QWORD *)(v17 + 40);
      if (!v18)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
        v18 = *(_QWORD *)(v17 + 40);
      }
      v15 = (WebCore::EventNames **)(v18 + 1480);
      break;
    default:
      v15 = (WebCore::EventNames **)MEMORY[0x1E0CBF2F8];
      break;
  }
  v25 = (WebCore *)bmalloc::api::isoAllocate();
  v26 = (WebCore::EventNames **)v25;
  v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
    v28 = WebCore::threadGlobalDataSlow(v25);
  v29 = *(_QWORD *)(v28 + 40);
  if (!v29)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v28);
    v29 = *(_QWORD *)(v28 + 40);
  }
  v30 = *v15 != *(WebCore::EventNames **)(v29 + 1496) && *v15 != *(WebCore::EventNames **)(v29 + 1504);
  result = WebCore::PointerEvent::PointerEvent(v26, v15, (uint64_t *)a1, v30, a2, a3, a4, a5);
  *a6 = v26;
  return result;
}

WebCore::EventNames **WebCore::PointerEvent::PointerEvent(WebCore::EventNames **a1, WebCore::EventNames **a2, uint64_t *a3, int a4, unsigned int a5, char a6, WebCore::EventNames **a7, uint64_t *a8)
{
  WebCore::EventNames **v13;
  unint64_t StatusReg;
  uint64_t v15;
  WebCore::EventNames **v16;
  WebCore::EventNames *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  WebCore *v22;
  WebCore::EventNames *v23;
  WebCore::EventNames *v24;
  WebCore::EventNames *v25;
  WebCore::EventNames *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  WebCore *v30;
  WebCore::EventNames *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::EventNames *v36;
  uint64_t v37;
  _QWORD *v38;
  int64x2_t v39;
  int64x2_t v40;
  WebCore::EventNames *v41;
  _BOOL4 v42;
  int v43;
  __int16 v44;
  float64x2_t v45;
  _BOOL4 v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  WebCore::EventNames *v51;
  uint64_t v52;
  float v53;
  uint64_t *v54;
  int *v55;
  int v56;
  uint64_t v57;
  long double v58;
  __double2 v59;
  double v60;
  float64x2_t v61;
  WebCore::EventNames *v63;
  WebCore::EventNames *v64;
  char *v65;
  _BOOL4 v66;
  WebCore::EventNames *v69;
  uint64_t v70;

  v13 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 736);
  if (!v15 || (v16 = *(WebCore::EventNames ***)(v15 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v16 = a1;
  }
  v17 = v16[5];
  if (!v17)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v16);
    v17 = v16[5];
  }
  v66 = *a2 != *((WebCore::EventNames **)v17 + 187) && *a2 != *((WebCore::EventNames **)v17 + 188);
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
    v19 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v20 = *(_QWORD *)(v19 + 40);
  if (!v20)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
    v20 = *(_QWORD *)(v19 + 40);
  }
  v21 = *a2 != *(WebCore::EventNames **)(v20 + 1496) && *a2 != *(WebCore::EventNames **)(v20 + 1504);
  v70 = *a3;
  v22 = (WebCore *)WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v70);
  v24 = *a7;
  *a7 = 0;
  if (*((_DWORD *)a3 + 15) <= a5)
  {
    __break(0xC471u);
    goto LABEL_65;
  }
  v25 = v23;
  v26 = *(WebCore::EventNames **)(a3[6] + 72 * a5 + 4);
  v69 = v26;
  v27 = *a8;
  v28 = *((_BYTE *)a3 + 9);
  v29 = *(_QWORD *)(StatusReg + 736);
  if (!v29 || (v30 = *(WebCore **)(v29 + 96)) == 0)
  {
    v31 = v24;
    v22 = (WebCore *)WebCore::threadGlobalDataSlow(v22);
    v24 = v31;
    v30 = v22;
  }
  v32 = *((_QWORD *)v30 + 5);
  if (!v32)
  {
    v63 = v24;
    v22 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v30);
    v24 = v63;
    v32 = *((_QWORD *)v30 + 5);
  }
  v33 = *a2 != *(WebCore::EventNames **)(v32 + 1552) && *a2 != *(WebCore::EventNames **)(v32 + 1488);
  v34 = *(_QWORD *)(StatusReg + 736);
  if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
  {
    v36 = v24;
    v37 = WebCore::threadGlobalDataSlow(v22);
    v24 = v36;
    v35 = v37;
  }
  v38 = *(_QWORD **)(v35 + 40);
  if (!v38)
  {
    v64 = v24;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
    v24 = v64;
    v38 = *(_QWORD **)(v35 + 40);
  }
  v39.i64[0] = (int)v27;
  v39.i64[1] = SHIDWORD(v27);
  v40 = v39;
  v41 = *a2;
  if (*a2 == (WebCore::EventNames *)v38[194])
  {
    v44 = 0;
    v42 = v66;
    v43 = a4;
  }
  else
  {
    v42 = v66;
    v43 = a4;
    v44 = v41 != (WebCore::EventNames *)v38[192]
       && v41 != (WebCore::EventNames *)v38[188]
       && v41 != (WebCore::EventNames *)v38[185];
  }
  v45 = vcvtq_f64_s64(v40);
  v13[1] = 0;
  v46 = v41 != 0;
  if (v21)
    v47 = 8;
  else
    v47 = 0;
  if (v42)
    v48 = 2686978;
  else
    v48 = 2686976;
  if (v43)
    v49 = 516;
  else
    v49 = 512;
  v50 = v49 | v48 | v47 | *((_DWORD *)v13 + 5) & 0xFFC00000;
  *((_DWORD *)v13 + 4) = 1;
  *((_DWORD *)v13 + 5) = v50 | v46;
  v51 = *a2;
  if (*a2)
    *(_DWORD *)v51 += 2;
  v13[3] = v51;
  v13[4] = 0;
  v13[5] = 0;
  v13[6] = 0;
  v13[7] = v25;
  v13[8] = 0;
  v13[9] = v24;
  *((_DWORD *)v13 + 20) = 0;
  *((_BYTE *)v13 + 84) = v28;
  *v13 = (WebCore::EventNames *)off_1E33A5D38;
  v13[11] = v26;
  v13[12] = 0;
  *(float64x2_t *)(v13 + 13) = v45;
  *(_OWORD *)(v13 + 15) = 0u;
  *(_OWORD *)(v13 + 17) = 0u;
  *((_WORD *)v13 + 76) = 0;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v13, 0, (const WebCore::IntPoint *)&v69);
  *((_WORD *)v13 + 77) = (__int16)(v33 << 15) >> 15;
  *((_WORD *)v13 + 78) = v44;
  *((_WORD *)v13 + 79) = 256;
  v13[20] = 0;
  v13[21] = 0;
  *v13 = (WebCore::EventNames *)off_1E33A6AB8;
  if (*((_DWORD *)a3 + 15) <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x195A69328);
  }
  v52 = a3[6] + 72 * a5;
  *((_DWORD *)v13 + 44) = *(_DWORD *)v52;
  *(float64x2_t *)(v13 + 23) = vaddq_f64(*(float64x2_t *)(v52 + 16), *(float64x2_t *)(v52 + 16));
  v53 = *(double *)(v52 + 40);
  *((float *)v13 + 50) = v53;
  *(WebCore::EventNames **)((char *)v13 + 204) = 0;
  *(WebCore::EventNames **)((char *)v13 + 220) = 0;
  *(WebCore::EventNames **)((char *)v13 + 212) = 0;
  *((_DWORD *)v13 + 57) = 0;
  if (*(_DWORD *)(v52 + 64) != 1)
  {
    {
      v54 = &WebCore::touchPointerEventType(void)::touchType;
      goto LABEL_54;
    }
    v55 = &WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
    v56 = WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::touchPointerEventType(void)::touchType = (uint64_t)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
LABEL_61:
    *v65 = 1;
    goto LABEL_56;
  }
  {
    v55 = &WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    v56 = WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_61;
  }
  v54 = &WebCore::penPointerEventType(void)::penType;
LABEL_54:
  v55 = (int *)*v54;
  if (!v55)
    goto LABEL_57;
  v56 = *v55;
LABEL_56:
  *v55 = v56 + 2;
LABEL_57:
  v13[29] = (WebCore::EventNames *)v55;
  *((_BYTE *)v13 + 240) = a6;
  if (*((_DWORD *)a3 + 15) <= a5)
  {
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x195A69320);
  }
  v57 = a3[6] + 72 * a5;
  v58 = *(double *)(v57 + 48);
  v59 = __sincos_stret(*(double *)(v57 + 56));
  v60 = cos(v58);
  v61.f64[0] = v59.__cosval;
  v61.f64[1] = v59.__sinval;
  *((int64x2_t *)v13 + 13) = vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vmulq_n_f64(v61, v60), (float64x2_t)vdupq_n_s64(0x4056800000000000uLL))));
  return v13;
}

uint64_t *WebCore::Document::addTouchEventListener(WebCore::Document *this, WebCore::Node *a2)
{
  WebCore::Document *v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v21;
  char v22;
  unsigned __int32 v23;

  v2 = this;
  v20 = a2;
  v23 = 0;
  result = WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 78, (unint64_t *)&v20, &v23, (uint64_t)&v21);
  ++*(_DWORD *)(v21 + 8);
  if (v22)
  {
    if (*((_BYTE *)v2 + 3362) || *((_BYTE *)v2 + 3405))
    {
      while (1)
      {
        v16 = *((_QWORD *)v2 + 66);
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 8);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 120);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 8);
        if (!v19)
          break;
        v2 = *(WebCore::Document **)(*(_QWORD *)(v19 + 40) + 8);
      }
    }
    else
    {
      v4 = *((_QWORD *)v2 + 66);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
          if (v6 && *(_BYTE *)(v6 + 144) == 0)
          {
            v8 = *(WebCore::Document **)(v6 + 296);
            if (v8)
              v2 = v8;
          }
        }
      }
    }
    if (!*((_BYTE *)v2 + 672))
    {
      *((_BYTE *)v2 + 672) = 1;
      v9 = *((_QWORD *)v2 + 66);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(_QWORD *)(v10 + 288);
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
              v14 = v12 == 0;
            else
              v14 = 1;
            if (!v14)
            {
              v15 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v11 + 8));
              if (v15)
                return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 88))(v15, v12);
              else
                return (uint64_t *)WebCore::Page::scheduleRenderingUpdate(v13, 0x2000);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::removeTouchEventListener(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = result;
  v4 = (uint64_t *)(result + 624);
  if (!a3)
  {
    v36 = a2;
    result = WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::find((uint64_t *)(result + 624), &v36);
    v13 = *v4;
    if (*v4)
      v13 += 16 * *(unsigned int *)(v13 - 4);
    if (v13 == result)
      return result;
    if (*(_DWORD *)(result + 8) != 1)
    {
      --*(_DWORD *)(result + 8);
      return result;
    }
    result = WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(v4, (_QWORD *)result);
LABEL_17:
    if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
    {
      while (1)
      {
        v32 = *(_QWORD *)(v3 + 528);
        if (!v32)
          break;
        v33 = *(_QWORD *)(v32 + 8);
        if (!v33)
          break;
        v34 = *(_QWORD *)(v33 + 120);
        if (!v34)
          break;
        v35 = *(_QWORD *)(v34 + 8);
        if (!v35)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v35 + 40) + 8);
      }
    }
    else
    {
      v14 = *(_QWORD *)(v3 + 528);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
          if (v16 && *(_BYTE *)(v16 + 144) == 0)
          {
            v18 = *(_QWORD *)(v16 + 296);
            if (v18)
              v3 = v18;
          }
        }
      }
    }
    if (!*(_BYTE *)(v3 + 672))
    {
      *(_BYTE *)(v3 + 672) = 1;
      v19 = *(_QWORD *)(v3 + 528);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 24);
          if (v21)
          {
            v22 = *(_QWORD *)(v20 + 288);
            v23 = *(_QWORD *)(v21 + 8);
            if (v23)
              v24 = v22 == 0;
            else
              v24 = 1;
            if (!v24)
            {
              v25 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v21 + 8));
              if (v25)
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 88))(v25, v22);
              else
                return WebCore::Page::scheduleRenderingUpdate(v23, 0x2000);
            }
          }
        }
      }
    }
    return result;
  }
  v5 = *v4;
  if (*v4)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_14;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_14:
    if (v10 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 16 * v10) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v26 = *v4;
      if (*v4)
        v27 = *(_DWORD *)(v26 - 12) - 1;
      else
        v27 = -1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v4;
      if (*v4)
      {
        v29 = 6 * *(_DWORD *)(v28 - 12);
        v30 = *(_DWORD *)(v28 - 4);
        if (v29 < v30 && v30 >= 9)
          result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash((uint64_t *)(result + 624), v30 >> 1, 0);
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t *WebCore::Document::addTouchEventHandler(WebCore::Document *this, WebCore::Node *a2)
{
  WebCore::Document *v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v21;
  char v22;
  unsigned __int32 v23;

  v2 = this;
  v20 = a2;
  v23 = 0;
  result = WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 79, (unint64_t *)&v20, &v23, (uint64_t)&v21);
  ++*(_DWORD *)(v21 + 8);
  if (v22)
  {
    if (*((_BYTE *)v2 + 3362) || *((_BYTE *)v2 + 3405))
    {
      while (1)
      {
        v16 = *((_QWORD *)v2 + 66);
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 8);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 120);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 8);
        if (!v19)
          break;
        v2 = *(WebCore::Document **)(*(_QWORD *)(v19 + 40) + 8);
      }
    }
    else
    {
      v4 = *((_QWORD *)v2 + 66);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
          if (v6 && *(_BYTE *)(v6 + 144) == 0)
          {
            v8 = *(WebCore::Document **)(v6 + 296);
            if (v8)
              v2 = v8;
          }
        }
      }
    }
    if (!*((_BYTE *)v2 + 672))
    {
      *((_BYTE *)v2 + 672) = 1;
      v9 = *((_QWORD *)v2 + 66);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(_QWORD *)(v10 + 288);
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
              v14 = v12 == 0;
            else
              v14 = 1;
            if (!v14)
            {
              v15 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v11 + 8));
              if (v15)
                return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 88))(v15, v12);
              else
                return (uint64_t *)WebCore::Page::scheduleRenderingUpdate(v13, 0x2000);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::removeTouchEventHandler(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = result;
  v4 = (uint64_t *)(result + 632);
  if (!a3)
  {
    v36 = a2;
    result = WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::find((uint64_t *)(result + 632), &v36);
    v13 = *v4;
    if (*v4)
      v13 += 16 * *(unsigned int *)(v13 - 4);
    if (v13 == result)
      return result;
    if (*(_DWORD *)(result + 8) != 1)
    {
      --*(_DWORD *)(result + 8);
      return result;
    }
    result = WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(v4, (_QWORD *)result);
LABEL_17:
    if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
    {
      while (1)
      {
        v32 = *(_QWORD *)(v3 + 528);
        if (!v32)
          break;
        v33 = *(_QWORD *)(v32 + 8);
        if (!v33)
          break;
        v34 = *(_QWORD *)(v33 + 120);
        if (!v34)
          break;
        v35 = *(_QWORD *)(v34 + 8);
        if (!v35)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v35 + 40) + 8);
      }
    }
    else
    {
      v14 = *(_QWORD *)(v3 + 528);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
          if (v16 && *(_BYTE *)(v16 + 144) == 0)
          {
            v18 = *(_QWORD *)(v16 + 296);
            if (v18)
              v3 = v18;
          }
        }
      }
    }
    if (!*(_BYTE *)(v3 + 672))
    {
      *(_BYTE *)(v3 + 672) = 1;
      v19 = *(_QWORD *)(v3 + 528);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 24);
          if (v21)
          {
            v22 = *(_QWORD *)(v20 + 288);
            v23 = *(_QWORD *)(v21 + 8);
            if (v23)
              v24 = v22 == 0;
            else
              v24 = 1;
            if (!v24)
            {
              v25 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v21 + 8));
              if (v25)
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 88))(v25, v22);
              else
                return WebCore::Page::scheduleRenderingUpdate(v23, 0x2000);
            }
          }
        }
      }
    }
    return result;
  }
  v5 = *v4;
  if (*v4)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_14;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_14:
    if (v10 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 16 * v10) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v26 = *v4;
      if (*v4)
        v27 = *(_DWORD *)(v26 - 12) - 1;
      else
        v27 = -1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v4;
      if (*v4)
      {
        v29 = 6 * *(_DWORD *)(v28 - 12);
        v30 = *(_DWORD *)(v28 - 4);
        if (v29 < v30 && v30 >= 9)
          result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash((uint64_t *)(result + 632), v30 >> 1, 0);
      }
      goto LABEL_17;
    }
  }
  return result;
}

WebCore::Document *WebCore::Document::eventTrackingRegions(void)const::$_0::operator()(uint64_t a1, int a2)
{
  WebCore::Document *result;
  _QWORD *v4;
  _QWORD *v5;
  const WebCore::EventTarget *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::Quirks *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::EventTarget *v22;
  char v23[31];
  char v24;

  v24 = a2;
  result = *(WebCore::Document **)(a1 + 16);
  v4 = *(_QWORD **)a1;
  switch(a2)
  {
    case 0:
      v5 = v4 + 151;
      break;
    case 1:
      v5 = v4 + 154;
      break;
    case 2:
      v5 = v4 + 157;
      break;
    case 3:
      v5 = v4 + 158;
      break;
    case 4:
      v5 = v4 + 186;
      break;
    case 5:
      v5 = v4 + 187;
      break;
    case 6:
      v5 = v4 + 188;
      break;
    case 7:
      v5 = v4 + 191;
      break;
    case 8:
      v5 = v4 + 192;
      break;
    case 9:
      v5 = v4 + 193;
      break;
    case 10:
      v5 = v4 + 194;
      break;
    case 11:
      v5 = v4 + 260;
      break;
    case 12:
      v5 = v4 + 261;
      break;
    case 13:
      v5 = v4 + 262;
      break;
    case 14:
      v5 = v4 + 263;
      break;
    case 15:
      v5 = v4 + 314;
      break;
    default:
      v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
  }
  v6 = **(const WebCore::EventTarget ***)(a1 + 8);
  v7 = *((_QWORD *)v6 + 2);
  if ((v7 & 0x1000000000000) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    v9 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)(v8 + 16);
      v11 = 32 * v9;
      while (*v10 != *v5)
      {
        v10 += 4;
        v11 -= 32;
        if (!v11)
          return result;
      }
      v12 = (WebCore::Quirks *)*((_QWORD *)result + 86);
      if (!v12)
      {
        v22 = **(const WebCore::EventTarget ***)(a1 + 8);
        v21 = WebCore::Document::ensureQuirks(result);
        v6 = v22;
        v12 = (WebCore::Quirks *)v21;
      }
      if (!WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v12, v6))
        return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
      v13 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
      if ((v13 & 0x1000000000000) == 0)
        return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
      v14 = v13 & 0xFFFFFFFFFFFFLL;
      v15 = *(unsigned int *)(v14 + 28);
      if (!(_DWORD)v15)
        return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
      v16 = *(_QWORD *)(v14 + 16);
      v17 = 32 * v15;
      while (*(_QWORD *)v16 != *v5)
      {
        v16 += 32;
        v17 -= 32;
        if (!v17)
          return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
      }
      v18 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(v16 + 8);
        v20 = 8 * v18;
        while ((*(_BYTE *)(*(_QWORD *)v19 + 4) & 2) != 0)
        {
          v19 += 8;
          v20 -= 8;
          if (!v20)
            return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
        }
        return (WebCore::Document *)WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>((uint64_t)v23, (uint64_t *)(*(_QWORD *)(a1 + 24) + 24), &v24, *(_QWORD **)(a1 + 32));
      }
      else
      {
        return (WebCore::Document *)WebCore::Region::operator=(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32));
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::getTouchRects(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  unsigned int v17;
  uint64_t v18;
  __int128 *v20;
  __int128 v21;

  v4 = (pthread_mutex_t *)(a1 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 560));
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12))
      *(_DWORD *)(a2 + 12) = 0;
    v6 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v6, v5);
    }
  }
  v7 = *(_QWORD *)(a1 + 696);
  if (v7 && *(_DWORD *)(v7 + 236))
  {
    v21 = xmmword_1969F08A0;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
    {
      v20 = (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)&v21);
      v8 = *(unsigned int *)(a2 + 12);
      v9 = *(WTF **)a2;
      v10 = *v20;
    }
    else
    {
      v9 = *(WTF **)a2;
      v10 = v21;
    }
    *((_OWORD *)v9 + v8) = v10;
    ++*(_DWORD *)(a2 + 12);
  }
  else
  {
    WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, *(unsigned int *)(a1 + 668) + (unint64_t)*(unsigned int *)(a1 + 652));
    v11 = *(unsigned int *)(a1 + 652);
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD *)(a2 + 12);
      v13 = 24 * v11;
      v14 = (_OWORD *)(*(_QWORD *)(a1 + 640) + 4);
      do
      {
        if (v12 == *(_DWORD *)(a2 + 8))
          *(_OWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)) = *(_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)v14);
        else
          *(_OWORD *)(*(_QWORD *)a2 + 16 * v12) = *v14;
        v12 = *(_DWORD *)(a2 + 12) + 1;
        *(_DWORD *)(a2 + 12) = v12;
        v14 = (_OWORD *)((char *)v14 + 24);
        v13 -= 24;
      }
      while (v13);
    }
    v15 = *(unsigned int *)(a1 + 668);
    if ((_DWORD)v15)
    {
      v16 = *(_OWORD **)(a1 + 656);
      v17 = *(_DWORD *)(a2 + 12);
      v18 = 16 * v15;
      do
      {
        if (v17 == *(_DWORD *)(a2 + 8))
          *(_OWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)) = *(_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v17 + 1, (unint64_t)v16);
        else
          *(_OWORD *)(*(_QWORD *)a2 + 16 * v17) = *v16;
        v17 = *(_DWORD *)(a2 + 12) + 1;
        *(_DWORD *)(a2 + 12) = v17;
        ++v16;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t WebCore::Document::collectTouchHandlerRectsForChildRenderers(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  WebCore::RenderObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  char v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  __int128 v27;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (result)
  {
    v9 = result;
    while (1)
    {
      if ((*(_BYTE *)(v9 + 45) & 1) == 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8))
        {
          *(_QWORD *)&v27 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
          if (*(_QWORD *)(a1 + 632))
          {
            result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>((uint64_t *)(a1 + 632), &v27);
            if (result)
              goto LABEL_24;
          }
        }
      }
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x800) != 0 || (v10 & 0x1800000) == 0x1000000)
        break;
      if ((v10 & 0x20000) != 0)
      {
        v14 = *(_BYTE *)(v9 + 45);
        v23 = v9;
        if ((v14 & 2) != 0)
          v23 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
        v24 = *(_QWORD *)(v23 + 88);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 40) + 20))
          goto LABEL_12;
        v25 = *(_QWORD **)(v24 + 40);
        if (v25[41] || v25[38] || v25[39] || v25[40] || (v10 & 0x100000) != 0)
          goto LABEL_12;
      }
      v11 = a1;
      v12 = v9;
      v13 = a3;
LABEL_23:
      result = WebCore::Document::collectTouchHandlerRectsForChildRenderers(v11, v12, v13, a4);
LABEL_24:
      v22 = *(unsigned int *)(v9 + 47);
      if (v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
      {
        v9 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
        if (v9)
          continue;
      }
      return result;
    }
    v14 = *(_BYTE *)(v9 + 45);
LABEL_12:
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = *(WebCore **)(*(_QWORD *)(v9 + 24) + 8);
    v16 = WebCore::eventRectRelativeToRoot(v15, (WebCore::RenderLayer **)v9, v8);
    *(_QWORD *)&v27 = v16;
    *((_QWORD *)&v27 + 1) = v17;
    if (*(_DWORD *)a3 <= (int)v16
      && *((_DWORD *)a3 + 2) + *(_DWORD *)a3 >= (int)v17 + (int)v16
      && (v18 = *((_DWORD *)a3 + 1), v18 <= SHIDWORD(v16))
      && *((_DWORD *)a3 + 3) + v18 >= HIDWORD(v17) + HIDWORD(v16))
    {
      v27 = *a3;
    }
    else
    {
      v19 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(a4 + 8))
      {
        v26 = (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v19 + 1, (unint64_t)&v27);
        v19 = *(unsigned int *)(a4 + 12);
        v20 = *(_QWORD *)a4;
        v21 = *v26;
      }
      else
      {
        v20 = *(_QWORD *)a4;
        v21 = v27;
      }
      *(_OWORD *)(v20 + 16 * v19) = v21;
      ++*(_DWORD *)(a4 + 12);
    }
    v13 = &v27;
    v11 = a1;
    v12 = v9;
    goto LABEL_23;
  }
  return result;
}

char *WebCore::Document::collectTouchRectsForDocument(WebCore::Document&,WTF::Vector<WebCore::Document::TouchEventRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()(char *result, unsigned int a2, char a3)
{
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  const WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WebCore::Quirks *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::EventTarget *v32;
  _BYTE v33[24];

  v5 = result;
  v6 = *(_QWORD **)result;
  switch(a2)
  {
    case 0u:
      v7 = v6 + 151;
      break;
    case 1u:
      v7 = v6 + 154;
      break;
    case 2u:
      v7 = v6 + 157;
      break;
    case 3u:
      v7 = v6 + 158;
      break;
    case 4u:
      v7 = v6 + 186;
      break;
    case 5u:
      v7 = v6 + 187;
      break;
    case 6u:
      v7 = v6 + 188;
      break;
    case 7u:
      v7 = v6 + 191;
      break;
    case 8u:
      v7 = v6 + 192;
      break;
    case 9u:
      v7 = v6 + 193;
      break;
    case 0xAu:
      v7 = v6 + 194;
      break;
    case 0xBu:
      v7 = v6 + 260;
      break;
    case 0xCu:
      v7 = v6 + 261;
      break;
    case 0xDu:
      v7 = v6 + 262;
      break;
    case 0xEu:
      v7 = v6 + 263;
      break;
    case 0xFu:
      v7 = v6 + 314;
      break;
    default:
      v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
  }
  v8 = (const WebCore::EventTarget *)**((_QWORD **)result + 1);
  v9 = *((_QWORD *)v8 + 2);
  if ((v9 & 0x1000000000000) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFLL;
    v11 = *(unsigned int *)(v10 + 28);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)(v10 + 16);
      v13 = 32 * v11;
      while (*v12 != *v7)
      {
        v12 += 4;
        v13 -= 32;
        if (!v13)
          return result;
      }
      v14 = *(WebCore::Quirks **)(*((_QWORD *)result + 2) + 688);
      if (!v14)
      {
        v32 = (const WebCore::EventTarget *)**((_QWORD **)v5 + 1);
        v14 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*((WebCore::Document **)v5 + 2));
        v8 = v32;
      }
      result = (char *)WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v14, v8);
      v15 = 0;
      if (a2 <= 2 && (_DWORD)result)
      {
        v16 = *(_QWORD *)(**((_QWORD **)v5 + 1) + 16);
        if ((v16 & 0x1000000000000) == 0)
          goto LABEL_31;
        v17 = v16 & 0xFFFFFFFFFFFFLL;
        v18 = *(unsigned int *)(v17 + 28);
        if (!(_DWORD)v18)
          goto LABEL_31;
        v19 = *(_QWORD *)(v17 + 16);
        v20 = 32 * v18;
        while (*(_QWORD *)v19 != *v7)
        {
          v15 = 0;
          v19 += 32;
          v20 -= 32;
          if (!v20)
            goto LABEL_36;
        }
        v27 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v27)
        {
          v28 = *(uint64_t **)(v19 + 8);
          v29 = 8 * v27 - 8;
          do
          {
            v30 = *v28++;
            v15 = (*(_BYTE *)(v30 + 4) & 2) == 0;
            if ((*(_BYTE *)(v30 + 4) & 2) == 0)
              break;
            v31 = v29;
            v29 -= 8;
          }
          while (v31);
        }
        else
        {
LABEL_31:
          v15 = 0;
        }
      }
LABEL_36:
      v33[0] = a2;
      v21 = *((_QWORD *)v5 + 3);
      *(_OWORD *)&v33[4] = *(_OWORD *)*((_QWORD *)v5 + 4);
      v33[20] = v15;
      v22 = *(unsigned int *)(v21 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(v21 + 8))
      {
        result = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)v33);
        v23 = *(_QWORD *)v21 + 24 * *(unsigned int *)(v21 + 12);
        v24 = *(_OWORD *)result;
        v25 = *((_QWORD *)result + 2);
      }
      else
      {
        v23 = *(_QWORD *)v21 + 24 * v22;
        v24 = *(_OWORD *)v33;
        v25 = *(_QWORD *)&v33[16];
      }
      *(_QWORD *)(v23 + 16) = v25;
      *(_OWORD *)v23 = v24;
      ++*(_DWORD *)(v21 + 12);
      v26 = 48;
      if (v15)
        v26 = 40;
      **(_DWORD **)&v5[v26] |= 1 << a3;
    }
  }
  return result;
}

double WebCore::Touch::create@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  WebCore::WindowProxy *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  double result;

  v25 = WTF::fastMalloc((WTF *)0x88);
  v26 = (double)a4;
  v27 = (double)a5;
  *(_DWORD *)v25 = 1;
  v28 = *a1;
  *a1 = 0;
  *(_QWORD *)(v25 + 8) = v28;
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 22) & 2) != 0)
      *(_DWORD *)(a2 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  }
  *(_QWORD *)(v25 + 16) = a2;
  *(_DWORD *)(v25 + 24) = a3;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(double *)(v25 + 48) = v26;
  *(double *)(v25 + 56) = v27;
  *(double *)(v25 + 64) = (double)a6;
  *(double *)(v25 + 72) = (double)a7;
  *(double *)(v25 + 80) = a10;
  *(double *)(v25 + 88) = a11;
  *(double *)(v25 + 96) = a12;
  *(double *)(v25 + 104) = a9;
  v29 = v26 * 64.0;
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = 0;
  *(_DWORD *)(v25 + 128) = 0;
  if (v26 * 64.0 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFFLL;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
  v31 = v27 * 64.0;
  if (v27 * 64.0 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF00000000;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x8000000000000000;
  }
  else
  {
    v32 = (unint64_t)(int)v31 << 32;
  }
  v33 = WebCore::MouseRelatedEvent::frameViewFromWindowProxy(*(_QWORD **)(v25 + 8), v24);
  v34 = WebCore::MouseRelatedEvent::pagePointToClientPoint(v32 | v30, (uint64_t)v33);
  result = (double)(int)v34 * 0.015625;
  *(double *)(v25 + 32) = result;
  *(double *)(v25 + 40) = (double)SHIDWORD(v34) * 0.015625;
  *a8 = v25;
  return result;
}

unsigned int *WebCore::GestureEvent::initGestureEvent(unsigned int *result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, int a6, unsigned int a7, uint64_t a8, float a9, float a10, int32x2_t a11, char a12, char a13, char a14, char a15, uint64_t a16)
{
  unsigned int *v20;
  uint64_t v21;
  char v22;
  char v23;
  int8x8_t v24;
  void *v25;
  uint64_t *v26;
  int8x8_t v27;

  if ((*((_BYTE *)result + 21) & 0x30) == 0)
  {
    v20 = result;
    v21 = a16;
    WebCore::UIEvent::initUIEvent((uint64_t)result, a2, a3, a4, a5, a6);
    *((_QWORD *)v20 + 11) = a7 | (unint64_t)(a8 << 32);
    if (a12)
      v22 = 2;
    else
      v22 = 0;
    v23 = v22 | a13;
    if (a14)
      v23 |= 8u;
    if (a15)
      v23 |= 4u;
    *((_BYTE *)v20 + 84) = v23;
    v24 = (int8x8_t)vcgt_s32(a11, (int32x2_t)0xFE000000FE000000);
    v27 = vorr_s8((int8x8_t)(*(_QWORD *)&v24 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, a11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(a11, 6uLL)), v24));
    WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v20, (const WebCore::LayoutPoint *)&v27);
    if (a16)
    {
      if ((*(_BYTE *)(a16 + 22) & 2) != 0)
        *(_DWORD *)(a16 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)a16 + 88))(a16);
      v26 = (uint64_t *)(v20 + 12);
      result = (unsigned int *)*((_QWORD *)v20 + 6);
      if (result == (unsigned int *)a16)
      {
        if ((*(_BYTE *)(a16 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(a16 + 24) == 2)
          {
            if ((*(_WORD *)(a16 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)a16, v25);
          }
          else
          {
            *(_DWORD *)(a16 + 24) -= 2;
          }
        }
        else
        {
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a16 + 96))(a16);
        }
        goto LABEL_16;
      }
    }
    else
    {
      v26 = (uint64_t *)(v20 + 12);
      result = (unsigned int *)*((_QWORD *)v20 + 6);
      if (!result)
      {
LABEL_16:
        *((float *)v20 + 39) = a9;
        *((float *)v20 + 40) = a10;
        return result;
      }
    }
    *v26 = a16;
    if (result)
    {
      if ((*((_BYTE *)result + 22) & 2) != 0)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v25);
        }
        else
        {
          result[6] -= 2;
        }
      }
      else
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
      }
      v21 = *v26;
    }
    if (v21)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v20 + 176))(v20);
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::toTouchList(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = (_QWORD *)result;
  if (!*(_BYTE *)(a2 + 24))
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *v2 = result;
    return result;
  }
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 != 1)
  {
    if (!v4)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      return result;
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_16;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v5 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  v6 = (char **)(result + 8);
  *(_QWORD *)(result + 16) = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v7)
  {
LABEL_14:
    *v2 = v5;
    return result;
  }
  if (!(v7 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 8) = result;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)a2;
      LODWORD(v10) = *(_DWORD *)(v5 + 20);
      v11 = 8 * v8;
      do
      {
        if ((_DWORD)v10 == *(_DWORD *)(v5 + 16))
        {
          result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v10 + 1, v9);
          v10 = *(unsigned int *)(v5 + 20);
          v12 = (char *)(*(_QWORD *)(v5 + 8) + 8 * v10);
        }
        else
        {
          v12 = &(*v6)[8 * v10];
          result = v9;
        }
        v13 = *(_QWORD *)result;
        *(_QWORD *)result = 0;
        *(_QWORD *)v12 = v13;
        LODWORD(v10) = v10 + 1;
        *(_DWORD *)(v5 + 20) = v10;
        v9 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    goto LABEL_14;
  }
LABEL_16:
  __break(0xC471u);
  return result;
}

void WebCore::TouchEvent::~TouchEvent(WebCore::TouchEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  WTF **v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;

  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(WTF ***)(v3 + 8);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
            WTF::RefCounted<WebCore::Touch>::deref(v11, a2);
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v12 = *(WTF **)(v3 + 8);
      if (v12)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v12, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v13 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v13)
      {
        v14 = *(WTF ***)(v4 + 8);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
            WTF::RefCounted<WebCore::Touch>::deref(v16, a2);
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
      v17 = *(WTF **)(v4 + 8);
      if (v17)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v17, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v18 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v18)
      {
        v19 = *(WTF ***)(v5 + 8);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          *v19 = 0;
          if (v21)
            WTF::RefCounted<WebCore::Touch>::deref(v21, a2);
          ++v19;
          v20 -= 8;
        }
        while (v20);
      }
      v22 = *(WTF **)(v5 + 8);
      if (v22)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v22, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v6)
  {
    v7 = *(WTF **)(v6 + 48);
    if (v7)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_DWORD *)(v6 + 56) = 0;
      WTF::fastFree(v7, a2);
    }
    MEMORY[0x19AEA7644](v6, 0x1020C4089604D1DLL);
  }
  WebCore::UIEvent::~UIEvent(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TouchEvent::~TouchEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::TouchEvent::initTouchEvent(uint64_t result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, int a6, unsigned int a7, uint64_t a8, float a9, float a10, unsigned int a11, unsigned int a12, char a13, char a14, char a15, unsigned __int8 a16, _DWORD *a17, _DWORD *a18, _DWORD *a19)
{
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  int8x8_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF **v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  WTF **v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF **v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  WTF **v59;
  uint64_t v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  WTF **v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  uint64_t v69;
  int8x8_t v70;

  if ((*(_BYTE *)(result + 21) & 0x30) != 0)
    return result;
  v23 = result;
  WebCore::UIEvent::initUIEvent(result, a2, a3, a4, a5, a6);
  if (a17)
    ++*a17;
  v25 = *(_QWORD *)(v23 + 168);
  *(_QWORD *)(v23 + 168) = a17;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v38 = *(unsigned int *)(v25 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(WTF ***)(v25 + 8);
        v40 = 8 * v38;
        do
        {
          v41 = *v39;
          *v39 = 0;
          if (v41)
            WTF::RefCounted<WebCore::Touch>::deref(v41, v24);
          ++v39;
          v40 -= 8;
        }
        while (v40);
      }
      v42 = *(WTF **)(v25 + 8);
      if (v42)
      {
        *(_QWORD *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 16) = 0;
        WTF::fastFree(v42, v24);
      }
      WTF::fastFree((WTF *)v25, v24);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  if (a18)
    ++*a18;
  v26 = *(_QWORD *)(v23 + 176);
  *(_QWORD *)(v23 + 176) = a18;
  if (!v26)
  {
LABEL_12:
    if (!a19)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*(_DWORD *)v26 != 1)
  {
    --*(_DWORD *)v26;
    goto LABEL_12;
  }
  v43 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v43)
  {
    v44 = *(WTF ***)(v26 + 8);
    v45 = 8 * v43;
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
        WTF::RefCounted<WebCore::Touch>::deref(v46, v24);
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
  v47 = *(WTF **)(v26 + 8);
  if (v47)
  {
    *(_QWORD *)(v26 + 8) = 0;
    *(_DWORD *)(v26 + 16) = 0;
    WTF::fastFree(v47, v24);
  }
  WTF::fastFree((WTF *)v26, v24);
  if (a19)
LABEL_13:
    ++*a19;
LABEL_14:
  v27 = a16;
  v29 = a11;
  v28 = a12;
  v30 = *(_QWORD *)(v23 + 184);
  *(_QWORD *)(v23 + 184) = a19;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v68 = a7;
      v69 = a8;
      v48 = *(unsigned int *)(v30 + 20);
      if ((_DWORD)v48)
      {
        v49 = *(WTF ***)(v30 + 8);
        v50 = 8 * v48;
        do
        {
          v51 = *v49;
          *v49 = 0;
          if (v51)
            WTF::RefCounted<WebCore::Touch>::deref(v51, v24);
          ++v49;
          v50 -= 8;
        }
        while (v50);
      }
      v52 = *(WTF **)(v30 + 8);
      if (v52)
      {
        *(_QWORD *)(v30 + 8) = 0;
        *(_DWORD *)(v30 + 16) = 0;
        WTF::fastFree(v52, v24);
      }
      WTF::fastFree((WTF *)v30, v24);
      a8 = v69;
      v28 = a12;
      a7 = v68;
      v29 = a11;
      v27 = a16;
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  *(_QWORD *)(v23 + 88) = a7 | (unint64_t)(a8 << 32);
  if (a13)
    v31 = 2;
  else
    v31 = 0;
  v32 = v31 | a14;
  if (a15)
    v32 |= 8u;
  if (v27)
    v32 |= 4u;
  *(_BYTE *)(v23 + 84) = v32;
  v33 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v28, v29), (int32x2_t)0xFE000000FE000000);
  v70 = vorr_s8((int8x8_t)(*(_QWORD *)&v33 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v28, v29)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v28, v29), 6uLL)), v33));
  result = (uint64_t)WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v23, (const WebCore::LayoutPoint *)&v70);
  if (a17)
    ++*a17;
  v35 = *(_QWORD *)(v23 + 168);
  *(_QWORD *)(v23 + 168) = a17;
  if (!v35)
  {
LABEL_29:
    if (!a18)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (*(_DWORD *)v35 != 1)
  {
    --*(_DWORD *)v35;
    goto LABEL_29;
  }
  v53 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v53)
  {
    v54 = *(WTF ***)(v35 + 8);
    v55 = 8 * v53;
    do
    {
      v56 = *v54;
      *v54 = 0;
      if (v56)
        WTF::RefCounted<WebCore::Touch>::deref(v56, v34);
      ++v54;
      v55 -= 8;
    }
    while (v55);
  }
  v57 = *(WTF **)(v35 + 8);
  if (v57)
  {
    *(_QWORD *)(v35 + 8) = 0;
    *(_DWORD *)(v35 + 16) = 0;
    WTF::fastFree(v57, v34);
  }
  result = WTF::fastFree((WTF *)v35, v34);
  if (a18)
LABEL_30:
    ++*a18;
LABEL_31:
  v36 = *(_QWORD *)(v23 + 176);
  *(_QWORD *)(v23 + 176) = a18;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      v58 = *(unsigned int *)(v36 + 20);
      if ((_DWORD)v58)
      {
        v59 = *(WTF ***)(v36 + 8);
        v60 = 8 * v58;
        do
        {
          v61 = *v59;
          *v59 = 0;
          if (v61)
            WTF::RefCounted<WebCore::Touch>::deref(v61, v34);
          ++v59;
          v60 -= 8;
        }
        while (v60);
      }
      v62 = *(WTF **)(v36 + 8);
      if (v62)
      {
        *(_QWORD *)(v36 + 8) = 0;
        *(_DWORD *)(v36 + 16) = 0;
        WTF::fastFree(v62, v34);
      }
      result = WTF::fastFree((WTF *)v36, v34);
      if (!a19)
        goto LABEL_36;
      goto LABEL_35;
    }
    --*(_DWORD *)v36;
  }
  if (a19)
LABEL_35:
    ++*a19;
LABEL_36:
  v37 = *(_QWORD *)(v23 + 184);
  *(_QWORD *)(v23 + 184) = a19;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      v63 = *(unsigned int *)(v37 + 20);
      if ((_DWORD)v63)
      {
        v64 = *(WTF ***)(v37 + 8);
        v65 = 8 * v63;
        do
        {
          v66 = *v64;
          *v64 = 0;
          if (v66)
            WTF::RefCounted<WebCore::Touch>::deref(v66, v34);
          ++v64;
          v65 -= 8;
        }
        while (v65);
      }
      v67 = *(WTF **)(v37 + 8);
      if (v67)
      {
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 16) = 0;
        WTF::fastFree(v67, v34);
      }
      result = WTF::fastFree((WTF *)v37, v34);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  *(float *)(v23 + 192) = a9;
  *(float *)(v23 + 196) = a10;
  return result;
}

__n128 WebCore::TouchEvent::setPlatformTouchEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  uint64_t v19;
  WTF *v20;

  v4 = operator new();
  v6 = v4;
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 9);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_BYTE *)(v4 + 8) = v7;
  *(_BYTE *)(v4 + 9) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if ((v8 & 0xF) != 0)
    *(_BYTE *)(v4 + 9) = v8 & 0xF;
  v9 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 60) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >= 0x38E38E4)
    {
      __break(0xC471u);
      goto LABEL_14;
    }
    v10 = 72 * v9;
    v11 = WTF::fastMalloc((WTF *)(72 * v9));
    *(_DWORD *)(v6 + 56) = (v10 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)(v6 + 48) = v11;
    v12 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a2 + 48);
      v14 = 72 * v12;
      do
      {
        *(_OWORD *)v11 = *(_OWORD *)v13;
        v15 = *(_OWORD *)(v13 + 16);
        v16 = *(_OWORD *)(v13 + 32);
        v17 = *(_OWORD *)(v13 + 48);
        *(_QWORD *)(v11 + 64) = *(_QWORD *)(v13 + 64);
        *(_OWORD *)(v11 + 32) = v16;
        *(_OWORD *)(v11 + 48) = v17;
        *(_OWORD *)(v11 + 16) = v15;
        v11 += 72;
        v13 += 72;
        v14 -= 72;
      }
      while (v14);
    }
  }
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(v6 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(v6 + 73) = *(_WORD *)(a2 + 73);
  result = *(__n128 *)(a2 + 76);
  *(__n128 *)(v6 + 76) = result;
  v19 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v6;
  if (v19)
  {
    v20 = *(WTF **)(v19 + 48);
    if (v20)
    {
      *(_QWORD *)(v19 + 48) = 0;
      *(_DWORD *)(v19 + 56) = 0;
      WTF::fastFree(v20, v5);
    }
LABEL_14:
    JUMPOUT(0x19AEA7644);
  }
  return result;
}

uint64_t WebCore::TouchEvent::isTouchEvent(WebCore::TouchEvent *this)
{
  return 1;
}

uint64_t WebCore::Touch::Touch(uint64_t a1, WebCore::WindowProxy *a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  double v36;
  double v37;

  *(_DWORD *)a1 = 1;
  v28 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = v28;
  if (a3)
  {
    if ((*(_BYTE *)(a3 + 22) & 2) != 0)
    {
      *(_DWORD *)(a3 + 24) += 2;
    }
    else
    {
      v36 = a12;
      v37 = a13;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3);
      a12 = v36;
      a13 = v37;
    }
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = a6;
  *(double *)(a1 + 56) = a7;
  *(double *)(a1 + 64) = a8;
  *(double *)(a1 + 72) = a9;
  *(double *)(a1 + 80) = a10;
  *(double *)(a1 + 88) = a11;
  *(double *)(a1 + 96) = a12;
  *(double *)(a1 + 104) = a13;
  *(_QWORD *)(a1 + 112) = a17;
  *(_QWORD *)(a1 + 120) = a18;
  *(_DWORD *)(a1 + 128) = a5;
  v29 = a6 * 64.0;
  if (a6 * 64.0 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFFLL;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
  v31 = a7 * 64.0;
  if (a7 * 64.0 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF00000000;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x8000000000000000;
  }
  else
  {
    v32 = (unint64_t)(int)v31 << 32;
  }
  v33 = WebCore::MouseRelatedEvent::frameViewFromWindowProxy(*(_QWORD **)(a1 + 8), a2);
  v34 = WebCore::MouseRelatedEvent::pagePointToClientPoint(v32 | v30, (uint64_t)v33);
  *(double *)(a1 + 32) = (double)(int)v34 * 0.015625;
  *(double *)(a1 + 40) = (double)SHIDWORD(v34) * 0.015625;
  return a1;
}

uint64_t WebCore::Touch::updateLocation(WebCore::Touch *this, double a2, double a3, double a4, double a5, WebCore::WindowProxy *a6)
{
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  if (*((double *)this + 6) == a2
    && *((double *)this + 7) == a3
    && *((double *)this + 8) == a4
    && *((double *)this + 9) == a5)
  {
    return 0;
  }
  *((double *)this + 6) = a2;
  *((double *)this + 7) = a3;
  *((double *)this + 8) = a4;
  *((double *)this + 9) = a5;
  v8 = a2 * 64.0;
  if (a2 * 64.0 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFFLL;
  }
  else if (v8 <= -2147483650.0)
  {
    v9 = 0x80000000;
  }
  else
  {
    v9 = (int)v8;
  }
  v10 = a3 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF00000000;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x8000000000000000;
  }
  else
  {
    v11 = (unint64_t)(int)v10 << 32;
  }
  v12 = WebCore::MouseRelatedEvent::frameViewFromWindowProxy(*((_QWORD **)this + 1), a6);
  v13 = WebCore::MouseRelatedEvent::pagePointToClientPoint(v11 | v9, (uint64_t)v12);
  *((double *)this + 4) = (double)(int)v13 * 0.015625;
  *((double *)this + 5) = (double)SHIDWORD(v13) * 0.015625;
  return 1;
}

uint64_t WebCore::Touch::cloneWithNewTarget@<X0>(WebCore::Touch *this@<X0>, WebCore::EventTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  result = WTF::fastMalloc((WTF *)0x88);
  v7 = result;
  *(_DWORD *)result = 1;
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  if (v8)
    ++*v8;
  *(_QWORD *)(result + 8) = v8;
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 22) & 2) != 0)
      *(_DWORD *)(v9 + 24) += 2;
    else
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 88))(*((_QWORD *)this + 2));
  }
  *(_QWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 24) = *((_DWORD *)this + 6);
  *(_OWORD *)(v7 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(v7 + 48) = *((_OWORD *)this + 3);
  *(_OWORD *)(v7 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(v7 + 80) = *((_OWORD *)this + 5);
  *(_OWORD *)(v7 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(v7 + 112) = *((_OWORD *)this + 7);
  *(_DWORD *)(v7 + 128) = *((_DWORD *)this + 32);
  *a3 = v7;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 22) & 2) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 88))(a2);
      v9 = *(_QWORD *)(v7 + 16);
    }
  }
  *(_QWORD *)(v7 + 16) = a2;
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    }
  }
  return result;
}

uint64_t WebCore::TouchList::TouchList(uint64_t a1, unsigned int **a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD **v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  char *v22;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  if (*a2)
  {
    v4 = **a2;
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
LABEL_23:
        __break(0xC471u);
        JUMPOUT(0x195A6B3D0);
      }
      v6 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = *a2;
      if (v7)
      {
        v10 = *v7;
        v9 = (_DWORD **)(v7 + 2);
        v8 = v10;
        if (v10)
        {
          v11 = (char *)v6;
          LODWORD(v12) = *(_DWORD *)(a1 + 20);
          for (i = 8 * v8; i; i -= 8)
          {
            v14 = *v9;
            v15 = v12;
            if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
            {
              v16 = v12 + 1;
              v17 = v15 + (v15 >> 2);
              if (v17 >= 0x10)
                v18 = v17 + 1;
              else
                v18 = 16;
              if (v18 <= v16)
                v19 = v15 + 1;
              else
                v19 = v18;
              if (v19 >> 29)
                goto LABEL_23;
              v20 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
              *(_DWORD *)(a1 + 16) = v19;
              *(_QWORD *)(a1 + 8) = v20;
              memcpy(v20, v11, 8 * v15);
              if (v11)
              {
                if (*v3 == v11)
                {
                  *(_QWORD *)(a1 + 8) = 0;
                  *(_DWORD *)(a1 + 16) = 0;
                }
                WTF::fastFree((WTF *)v11, v21);
              }
              v12 = *(unsigned int *)(a1 + 20);
              v11 = *(char **)(a1 + 8);
              v22 = &v11[8 * v12];
            }
            else
            {
              v22 = &v11[8 * v12];
            }
            ++*v14;
            *(_QWORD *)v22 = v14;
            LODWORD(v12) = v12 + 1;
            *(_DWORD *)(a1 + 20) = v12;
            ++v9;
          }
        }
      }
    }
  }
  return a1;
}

void WebCore::WheelEvent::~WheelEvent(WebCore::WheelEvent *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::DOMWindowTrustedTypes::~DOMWindowTrustedTypes(WebCore::DOMWindowTrustedTypes *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33A8C48;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33A8C48;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::WorkerGlobalScopeTrustedTypes::~WorkerGlobalScopeTrustedTypes(WebCore::WorkerGlobalScopeTrustedTypes *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E33A8C68;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
}

void WebCore::WorkerGlobalScopeTrustedTypes::~WorkerGlobalScopeTrustedTypes(WebCore::WorkerGlobalScopeTrustedTypes *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33A8C68;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WTF::fastFree(this, a2);
}

void WebCore::GestureEvent::~GestureEvent(WebCore::GestureEvent *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::UIEvent::~UIEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_QWORD *WebCore::Element::getAttribute<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>(WebCore::Element *a1)
{
  _QWORD *result;

  result = (_QWORD *)WebCore::Element::getAttribute(a1, (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr);
  if (!*result)
    return (_QWORD *)WebCore::Element::getAttribute(a1, (const WebCore::QualifiedName *)&WebCore::XLinkNames::hrefAttr);
  return result;
}

uint64_t WebCore::WheelEvent::WheelEvent(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v25 = *a2;
  WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v25);
  v12 = *((_BYTE *)a2 + 9);
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_QWORD *)(v10 + 2512) != 0;
  v14 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  if (a4)
    v15 = 3146254;
  else
    v15 = 3146250;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v15 | v14 | v13;
  v16 = *(_DWORD **)(v10 + 2512);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = 0;
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 72) = v17;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = v12;
  *(_QWORD *)a1 = off_1E33A5D38;
  *(_QWORD *)(a1 + 88) = *(uint64_t *)((char *)a2 + 60);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)a1, 0, (const WebCore::IntPoint *)((char *)a2 + 52));
  *(_DWORD *)(a1 + 154) = 0;
  *(_WORD *)(a1 + 158) = 256;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)a1 = off_1E33A8E68;
  *(int32x2_t *)(a1 + 176) = vcvt_s32_f32(vmul_f32(*(float32x2_t *)((char *)a2 + 76), (float32x2_t)vdup_n_s32(0x42F00000u)));
  *(float64x2_t *)(a1 + 184) = vcvtq_f64_f32(vneg_f32(*(float32x2_t *)((char *)a2 + 68)));
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 2 * (*((_BYTE *)a2 + 48) == 0);
  v19 = *((_OWORD *)a2 + 6);
  v18 = *((_OWORD *)a2 + 7);
  v20 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 304) = v20;
  *(_OWORD *)(a1 + 320) = v19;
  *(_OWORD *)(a1 + 336) = v18;
  v22 = *((_OWORD *)a2 + 2);
  v21 = *((_OWORD *)a2 + 3);
  v23 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v23;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v21;
  *(_BYTE *)(a1 + 352) = 1;
  return a1;
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;

  v3 = dword_1ECE83248;
  v4 = dword_1ECE83248 - 1;
  v5 = qword_1ECE83250;
  v6 = *(WTF::StringImpl **)a1;
  v7 = *((_DWORD *)v6 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(v6);
  else
    v8 = v7 >> 8;
  v9 = (v8 ^ v5) & v4;
  v10 = &qword_1ECE83000;
  v11 = qword_1ECE83240;
  v12 = (WTF::StringImpl **)(qword_1ECE83240 + 16 * v9);
  v13 = *v12;
  if (*v12)
  {
    v14 = 0;
    do
    {
      v15 = *((_DWORD *)v13 + 4);
      if (v15 < 0x100)
      {
        v16 = WTF::StringImpl::hashSlowCase(v13);
        v10 = &qword_1ECE83000;
      }
      else
      {
        v16 = v15 >> 8;
      }
      v17 = (v9 + v3 - ((v16 ^ v5) & v4)) & v4;
      if (v14 > v17)
      {
        v18 = *(WTF::StringImpl **)a1;
        v19 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 = 0;
        v20 = *v12;
        *v12 = 0;
        v21 = *(WTF::StringImpl **)a1;
        *(_QWORD *)a1 = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, a2);
            v10 = &qword_1ECE83000;
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
        v22 = v11 + 16 * v9;
        v24 = *(_QWORD *)(v22 + 8);
        v23 = (_QWORD *)(v22 + 8);
        *(_QWORD *)(a1 + 8) = v24;
        v25 = *v12;
        *v12 = v18;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, a2);
            v10 = &qword_1ECE83000;
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        *v23 = v19;
        v14 = v17;
      }
      v9 = ((_DWORD)v9 + 1) & v4;
      ++v14;
      v11 = v10[72];
      v12 = (WTF::StringImpl **)(v11 + 16 * v9);
      v13 = *v12;
    }
    while (*v12);
  }
  v26 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  result = *v12;
  *v12 = v26;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(v11 + 16 * v9 + 8) = *(_QWORD *)(a1 + 8);
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Page,WTF::MonotonicTime,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if (!(_DWORD)v4)
      goto LABEL_24;
    v5 = 0;
    do
    {
      LODWORD(v4) = v4 - 1;
      v6 = (uint64_t *)(v3 + 16 * v4);
      v7 = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
      {
        *v6 = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          WTF::fastFree((WTF *)v7, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while ((_DWORD)v4);
    v3 = *(_QWORD *)a1;
    v4 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v18 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13)
            goto LABEL_35;
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_33:
          v21 = (double)v13;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_36;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_33;
LABEL_35:
        v21 = (double)v13;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_36:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_28;
        }
LABEL_25:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_24:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v4 = 0;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
  v16 = v15;
LABEL_29:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v4;
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (unsigned int **)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != (unsigned int *)-1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (unsigned int **)(v14 + 16 * v21);
          *v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *v23 = v24;
          v23[1] = *(unsigned int **)(v4 + 16 * i + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v8);
            }
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, WTF *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  WTF *v10;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v21;
  uint64_t *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(WTF **)(v2 + 16 * v7);
    if (v10 != (WTF *)-1)
    {
      if (!v10)
        return 0;
      if (v10 == this)
        break;
    }
  }
  if ((_DWORD)v9 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v9);
  *v12 = 0;
  if (this)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)this);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)this));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)this);
      v21 = v12;
      v22 = a1;
      WTF::fastFree(this, this);
      v12 = v21;
      a1 = v22;
    }
  }
  *v12 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v19 >> 1);
  }
  return 1;
}

void WTF::Detail::CallableWrapper<WebCore::WindowEventLoop::opportunisticallyRunIdleCallbacks(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  WebCore::IdleCallbackController *v4;

  if (!*(_BYTE *)(a2 + 274))
  {
    v3 = *(_DWORD *)(a2 - 168);
    *(_DWORD *)(a2 - 168) = v3 + 2;
    v4 = *(WebCore::IdleCallbackController **)(a2 + 2144);
    if (v4)
    {
      WebCore::IdleCallbackController::startIdlePeriod(v4, (void *)a2);
      v3 = *(_DWORD *)(a2 - 168) - 2;
    }
    if (v3)
    {
      *(_DWORD *)(a2 - 168) = v3;
    }
    else if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), (void *)a2);
    }
  }
}

BOOL WTF::Detail::CallableWrapper<WebCore::WindowEventLoop::didReachTimeToRun(void)::$_0,BOOL,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  _BOOL8 v4;

  if (*(_BYTE *)(a2 + 274))
    return 0;
  v2 = *(_DWORD *)(a2 - 168);
  *(_DWORD *)(a2 - 168) = v2 + 2;
  if (*(unsigned __int8 *)(a2 + 275) | *(unsigned __int8 *)(a2 + 276) || (v3 = *(_QWORD **)(a2 + 2144)) == 0)
  {
    v4 = 0;
    if (!v2)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (v3[2] != v3[3])
  {
    v4 = 1;
    if (!v2)
      goto LABEL_11;
LABEL_8:
    *(_DWORD *)(a2 - 168) = v2;
    return v4;
  }
  v4 = v3[6] != v3[7];
  if (v2)
    goto LABEL_8;
LABEL_11:
  if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), (void *)a2);
  return v4;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WindowEventLoop::queueMutationObserverCompoundMicrotask(void)::$_0,void>::call(uint64_t result, WebCore::WindowEventLoop *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v2 + 8) = v3 + 1;
  *(_BYTE *)(v2 + 256) = 0;
  if (!*(_BYTE *)(v2 + 257))
  {
    *(_BYTE *)(v2 + 257) = 1;
    result = WebCore::MutationObserver::notifyMutationObservers(v2, a2);
    *(_BYTE *)(v2 + 257) = 0;
    v3 = *(_DWORD *)(v2 + 8) - 1;
  }
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_DWORD *)(v2 + 8) = v3;
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WindowEventLoop::backupElementQueue(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t *result;

  v2 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v2 + 8);
  *(_BYTE *)(v2 + 320) = 0;
  result = WebCore::CustomElementQueue::invokeAll(*(uint64_t **)(v2 + 312), a2);
  if (*(_DWORD *)(v2 + 8) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  --*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(uint64_t *a1, unsigned int a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  __n128 *v13;
  uint64_t v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (__n128 *)v6;
    do
    {
      if (v13->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::reinsert(a1, v13);
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_11;
  }
  result = 0;
  if (v6)
  {
LABEL_11:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = 16 * v5;
        v8 = v4;
        do
        {
          v9 = *(_OWORD *)v8;
          v8 = (WTF *)((char *)v8 + 16);
          *(_OWORD *)result = v9;
          result += 16;
          v7 -= 16;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WebCore::MessagePortChannel::~MessagePortChannel(WebCore::MessagePortChannel *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  int v6;
  WebCore::MessagePortChannel *v7;
  WebCore::MessagePortChannel *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  WTF *v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  WTF *v38;
  void *v39;
  unsigned int *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *((_QWORD *)this + 22);
  ++*(_DWORD *)(v2 + 8);
  WebCore::MessagePortChannelRegistry::messagePortChannelDestroyed(v2, this);
  v4 = *(_DWORD *)(v2 + 8);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195A6C548);
  }
  *(_DWORD *)(v2 + 8) = v4 - 1;
  v5 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195A6C568);
    }
    *(_DWORD *)(v5 + 8) = v6 - 1;
  }
  v7 = (WebCore::MessagePortChannel *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::MessagePortChannel::~MessagePortChannel(v7);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = (WebCore::MessagePortChannel *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::MessagePortChannel::~MessagePortChannel(v8);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (uint64_t *)*((_QWORD *)this + 18);
  if (v9)
    WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::deallocateTable(v9, v3);
  v10 = (uint64_t *)*((_QWORD *)this + 17);
  if (v10)
    WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::deallocateTable(v10, v3);
  v11 = *((_DWORD *)this + 33);
  if (v11)
  {
    v25 = *((_QWORD *)this + 15);
    v26 = v25 + 24 * v11;
    do
    {
      v27 = *(WTF **)(v25 + 8);
      if (v27)
      {
        *(_QWORD *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 16) = 0;
        v47 = v26;
        WTF::fastFree(v27, v3);
        v26 = v47;
      }
      v28 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          v43 = v25;
          v45 = v26;
          v37 = v28;
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v28 + 2), v3);
          v38 = (WTF *)v37;
          v25 = v43;
          WTF::fastFree(v38, v39);
          v26 = v45;
        }
      }
      v25 += 24;
    }
    while (v25 != v26);
  }
  v12 = (WTF *)*((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v12, v3);
  }
  v13 = *((_DWORD *)this + 29);
  if (v13)
  {
    v31 = *((_QWORD *)this + 13);
    v32 = v31 + 24 * v13;
    do
    {
      v33 = *(WTF **)(v31 + 8);
      if (v33)
      {
        *(_QWORD *)(v31 + 8) = 0;
        *(_DWORD *)(v31 + 16) = 0;
        v48 = v32;
        WTF::fastFree(v33, v3);
        v32 = v48;
      }
      v34 = *(unsigned int **)v31;
      *(_QWORD *)v31 = 0;
      if (v34)
      {
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          v44 = v31;
          v46 = v32;
          v40 = v34;
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v34 + 2), v3);
          v41 = (WTF *)v40;
          v31 = v44;
          WTF::fastFree(v41, v42);
          v32 = v46;
        }
      }
      v31 += 24;
    }
    while (v31 != v32);
  }
  v14 = (WTF *)*((_QWORD *)this + 13);
  if (v14)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v14, v3);
  }
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref();
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref();
  v17 = *((_QWORD *)this + 1);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::MessagePortChannelRegistry::messagePortChannelDestroyed(uint64_t this, WebCore::MessagePortChannel *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  void *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v2 = (uint64_t *)(this + 16);
  v3 = *(_QWORD *)(this + 16);
  if (v3)
  {
    v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(this + 16), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3));
    v7 = *(_DWORD *)(v3 - 4);
    v8 = (uint64_t *)(v3 + 24 * v7);
    if (v5)
      v8 = v5;
    if ((uint64_t *)(v3 + 24 * v7) == v8)
      goto LABEL_13;
    *v8 = -1;
    this = v8[2];
    v8[2] = 0;
    if (this)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)this);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)this));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v6);
      }
    }
    ++*(_DWORD *)(*v2 - 16);
    v9 = *v2;
    v10 = *v2 ? *(_DWORD *)(v9 - 12) - 1 : -1;
    *(_DWORD *)(v9 - 12) = v10;
    v3 = *v2;
    if (*v2)
    {
      v11 = *(_DWORD *)(v3 - 4);
      v12 = 6 * *(_DWORD *)(v3 - 12) < v11 && v11 >= 9;
      if (!v12
        || (this = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v2, v11 >> 1, 0), (v3 = *v2) != 0))
      {
LABEL_13:
        this = (uint64_t)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(v3, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v14 = *(_DWORD *)(v3 - 4);
        v15 = (_QWORD *)(v3 + 24 * v14);
        if (this)
          v15 = (_QWORD *)this;
        if ((_QWORD *)(v3 + 24 * v14) != v15)
        {
          *v15 = -1;
          this = v15[2];
          v15[2] = 0;
          if (this)
          {
            do
            {
              v24 = __ldaxr((unsigned int *)this);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, (unsigned int *)this));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)this);
              this = WTF::fastFree((WTF *)this, v13);
            }
          }
          ++*(_DWORD *)(*v2 - 16);
          v16 = *v2;
          if (*v2)
            v17 = *(_DWORD *)(v16 - 12) - 1;
          else
            v17 = -1;
          *(_DWORD *)(v16 - 12) = v17;
          v18 = *v2;
          if (*v2)
          {
            v19 = 6 * *(_DWORD *)(v18 - 12);
            v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9)
              return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v2, v20 >> 1, 0);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 24 * v3;
    do
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        v17 = v7;
        WTF::fastFree(v8, a2);
        v7 = v17;
      }
      v9 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v15 = v6;
          v16 = v7;
          v12 = v9;
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v9 + 2), a2);
          v13 = (WTF *)v12;
          v6 = v15;
          WTF::fastFree(v13, v14);
          v7 = v16;
        }
      }
      v6 = (WTF *)((char *)v6 + 24);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::MessagePortChannel::processForPort(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v3;

  v3 = *a2 != *(_QWORD *)(a1 + 16) || a2[1] != *(_QWORD *)(a1 + 24);
  return *(_QWORD *)(a1 + 16 * v3 + 56);
}

WebCore::MessagePortChannel *WebCore::MessagePortChannel::closePort(uint64_t a1, void *a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::MessagePortChannel *v12;
  uint64_t v13;
  WebCore::MessagePortChannel *result;
  WTF *v15;
  WTF *v16;

  v5 = *(void **)(a1 + 16) != a2 || *(_QWORD *)(a1 + 24) != a3;
  v6 = a1 + 16 * v5;
  v8 = *(unsigned __int8 *)(v6 + 64);
  v7 = (_BYTE *)(v6 + 64);
  if (v8)
    *v7 = 0;
  *(_BYTE *)(a1 + v5 + 48) = 1;
  v9 = (_DWORD *)(a1 + 16 * v5);
  if (v9[28])
  {
    v15 = (WTF *)(v9 + 26);
    if (v9[29])
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v15, a2);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15)
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      WTF::fastFree(v16, a2);
    }
  }
  v10 = a1 + 8 * v5;
  v11 = *(uint64_t **)(v10 + 136);
  if (v11)
  {
    *(_QWORD *)(v10 + 136) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::deallocateTable(v11, a2);
  }
  v12 = *(WebCore::MessagePortChannel **)(v10 + 152);
  *(_QWORD *)(v10 + 152) = 0;
  if (v12)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref(v12);
  v13 = a1 + 8 * v5;
  result = *(WebCore::MessagePortChannel **)(v13 + 88);
  *(_QWORD *)(v13 + 88) = 0;
  if (result)
    return WTF::RefCounted<WebCore::MessagePortChannel>::deref(result);
  return result;
}

BOOL WebCore::MessagePortChannel::postMessageToRemote(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::MessagePortChannel *v19;

  v6 = *(_QWORD *)(a1 + 16) != a3 || *(_QWORD *)(a1 + 24) != a4;
  v7 = (unsigned int *)(a1 + 16 * v6);
  v8 = v7 + 26;
  v9 = v7[29];
  if ((_DWORD)v9 == v7[28])
  {
    v10 = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, a2);
    v11 = *(_QWORD *)v8 + 24 * v8[3];
    v12 = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = v12;
    v13 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v11 + 8) = v13;
    LODWORD(v13) = *(_DWORD *)(v10 + 16);
    *(_DWORD *)(v10 + 16) = 0;
    *(_DWORD *)(v11 + 16) = v13;
    LODWORD(v13) = *(_DWORD *)(v10 + 20);
    *(_DWORD *)(v10 + 20) = 0;
    *(_DWORD *)(v11 + 20) = v13;
  }
  else
  {
    v14 = *(_QWORD *)v8 + 24 * v9;
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = v15;
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v14 + 8) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(v14 + 16) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(v14 + 20) = v16;
  }
  v17 = v8[3];
  v8[3] = v17 + 1;
  if (!v17)
  {
    v18 = a1 + 8 * v6;
    ++*(_DWORD *)a1;
    v19 = *(WebCore::MessagePortChannel **)(v18 + 152);
    *(_QWORD *)(v18 + 152) = a1;
    if (v19)
      WTF::RefCounted<WebCore::MessagePortChannel>::deref(v19);
  }
  return v17 == 0;
}

uint64_t WebCore::MessagePortChannelProvider::fromContext(WebCore::MessagePortChannelProvider *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (!*((_BYTE *)this + 274))
  {
    {
      if (WebCore::globalProvider(void)::globalProvider
        && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
      {
        goto LABEL_5;
      }
    }
    else
    {
      WebCore::globalProvider(void)::globalProvider = 0;
    }
    v5 = operator new();
    *(_QWORD *)v5 = &off_1E33A90B8;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (uint64_t *)(v5 + 8);
    *(_DWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
    v2 = *v6;
    if (*v6)
    {
      do
        v8 = __ldaxr((unsigned int *)v2);
      while (__stlxr(v8 + 1, (unsigned int *)v2));
    }
    v9 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
    WebCore::globalProvider(void)::globalProvider = v2;
    if (!v9)
      goto LABEL_6;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
LABEL_5:
    v2 = WebCore::globalProvider(void)::globalProvider;
LABEL_6:
    if (v2)
      return *(_QWORD *)(v2 + 8);
    else
      return 0;
  }
  if ((*(unsigned int (**)(WebCore::MessagePortChannelProvider *, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 80))(this, a2))
  {
    return WebCore::WorkletGlobalScope::messagePortChannelProvider(this);
  }
  if (((*(uint64_t (**)(WebCore::MessagePortChannelProvider *))(*(_QWORD *)this + 64))(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A6CC20);
  }
  return WebCore::WorkerGlobalScope::messagePortChannelProvider(this);
}

void WebCore::MessagePortChannelProviderImpl::~MessagePortChannelProviderImpl(WebCore::MessagePortChannelProviderImpl *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(unsigned int **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::MessagePortChannelProviderImpl::~MessagePortChannelProviderImpl(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::MessagePortChannelRegistry::~MessagePortChannelRegistry(WebCore::MessagePortChannelRegistry *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(unsigned int **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v10 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(unsigned int **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v10 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::MessagePortChannelProviderImpl::createNewMessagePortChannel(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  unsigned int **v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v6 = (unsigned int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    goto LABEL_12;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v6;
  v8 = *v6;
  *v6 = (unsigned int *)v5;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = (uint64_t)*v6;
  if (*v6)
  {
LABEL_12:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  v14 = *a2;
  v15 = *a3;
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v12 = &off_1E33A91A8;
  *(_QWORD *)(v12 + 8) = v5;
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = v15;
  v16 = v12;
  WTF::ensureOnMainThread();
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

uint64_t WebCore::MessagePortChannelProviderImpl::entangleLocalPortInThisProcessToRemote(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  unsigned int **v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v6 = (unsigned int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    goto LABEL_12;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v6;
  v8 = *v6;
  *v6 = (unsigned int *)v5;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = (uint64_t)*v6;
  if (*v6)
  {
LABEL_12:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  v14 = *a2;
  v15 = *a3;
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v12 = &off_1E33A91D0;
  *(_QWORD *)(v12 + 8) = v5;
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = v15;
  v16 = v12;
  WTF::ensureOnMainThread();
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

uint64_t WebCore::MessagePortChannelProviderImpl::messagePortDisentangled(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;

  v4 = (unsigned int **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    goto LABEL_12;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v4;
  v6 = *v4;
  *v4 = (unsigned int *)v3;
  if (!v6)
    goto LABEL_12;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = (uint64_t)*v4;
  if (*v4)
  {
LABEL_12:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  v12 = *a2;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = &off_1E33A91F8;
  *(_QWORD *)(v10 + 8) = v3;
  *(_OWORD *)(v10 + 16) = v12;
  v13 = v10;
  WTF::ensureOnMainThread();
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::MessagePortChannelProviderImpl::messagePortClosed(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;

  v4 = (unsigned int **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    goto LABEL_12;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v4;
  v6 = *v4;
  *v4 = (unsigned int *)v3;
  if (!v6)
    goto LABEL_12;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = (uint64_t)*v4;
  if (*v4)
  {
LABEL_12:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  v12 = *a2;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = &off_1E33A9220;
  *(_QWORD *)(v10 + 8) = v3;
  *(_OWORD *)(v10 + 16) = v12;
  v13 = v10;
  WTF::ensureOnMainThread();
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::MessagePortChannelProviderImpl::postMessageToRemote(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  unsigned int **v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v6 = (unsigned int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    goto LABEL_12;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v6;
  v8 = *v6;
  *v6 = (unsigned int *)v5;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = (uint64_t)*v6;
  if (*v6)
  {
LABEL_12:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  v12 = *((_QWORD *)a2 + 2);
  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v16 = v13;
  v17 = *a3;
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v14 = &off_1E33A9248;
  *(_QWORD *)(v14 + 8) = v5;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = v12;
  *(_OWORD *)(v14 + 40) = v17;
  v18 = v14;
  WTF::ensureOnMainThread();
  result = v18;
  if (v18)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return result;
}

uint64_t WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;

  v4 = *a3;
  *a3 = 0;
  v5 = (unsigned int **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    goto LABEL_12;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v5;
  v8 = *v5;
  *v5 = (unsigned int *)v6;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = (uint64_t)*v5;
  if (*v5)
  {
LABEL_12:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v14 = *a2;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E33A9270;
  *(_QWORD *)(v12 + 8) = v6;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = v4;
  v15 = v12;
  WTF::ensureOnMainThread();
  result = v15;
  if (v15)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

uint64_t *WebCore::MessagePortChannelRegistry::didEntangleLocalToRemote(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;
  WebCore::MessagePortChannel *v9;
  int v10;
  _BOOL8 v12;
  _QWORD *v13;
  _QWORD *v14;
  WebCore::MessagePortChannel *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WebCore::MessagePortChannel *v24;
  int v25;
  WebCore::MessagePortChannel *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v6 = *a2;
  result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a2, a2[1]);
  if (result)
  {
    v8 = result[2];
    if (v8)
    {
      v9 = *(WebCore::MessagePortChannel **)(v8 + 8);
      if (v9)
      {
        v10 = (*(_DWORD *)v9)++;
        v12 = v6 != *((_QWORD *)v9 + 2) || a2[1] != *((_QWORD *)v9 + 3);
        v13 = (_QWORD *)((char *)v9 + 16 * v12);
        if (!*((_BYTE *)v13 + 64))
          *((_BYTE *)v13 + 64) = 1;
        v13[7] = a4;
        v14 = (_QWORD *)((char *)v9 + 8 * v12);
        *(_DWORD *)v9 = v10 + 2;
        v15 = (WebCore::MessagePortChannel *)v14[11];
        v14[11] = v9;
        if (v15)
          WTF::RefCounted<WebCore::MessagePortChannel>::deref(v15);
        v18 = v14[17];
        v17 = v14 + 17;
        v16 = v18;
        if (v18)
        {
          v19 = *(_DWORD *)(v16 - 8);
          v20 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = *(WebCore::MessagePortChannel **)(v16 + 8 * v23);
          if (v24 != v9)
          {
            v25 = 1;
            while (v24)
            {
              v23 = ((_DWORD)v23 + v25) & v19;
              v24 = *(WebCore::MessagePortChannel **)(v16 + 8 * v23);
              ++v25;
              if (v24 == v9)
                goto LABEL_22;
            }
            v23 = *(unsigned int *)(v16 - 4);
          }
LABEL_22:
          if (v23 != *(_DWORD *)(v16 - 4))
          {
            v26 = *(WebCore::MessagePortChannel **)(v16 + 8 * v23);
            *(_QWORD *)(v16 + 8 * v23) = -1;
            if (v26)
              WTF::RefCounted<WebCore::MessagePortChannel>::deref(v26);
            ++*(_DWORD *)(*v17 - 16);
            v27 = *v17;
            if (*v17)
              v28 = *(_DWORD *)(v27 - 12) - 1;
            else
              v28 = -1;
            *(_DWORD *)(v27 - 12) = v28;
            v29 = *v17;
            if (*v17)
            {
              v30 = 6 * *(_DWORD *)(v29 - 12);
              v31 = *(_DWORD *)(v29 - 4);
              if (v30 < v31 && v31 >= 9)
                WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::rehash(v17, v31 >> 1);
            }
          }
        }
        return (uint64_t *)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v9);
      }
    }
  }
  return result;
}

uint64_t *WebCore::MessagePortChannelRegistry::didCloseMessagePort(uint64_t a1, unint64_t *a2)
{
  void *v3;
  uint64_t *result;
  uint64_t v5;
  WebCore::MessagePortChannel *v6;

  v3 = (void *)*a2;
  result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a2, a2[1]);
  if (result)
  {
    v5 = result[2];
    if (v5)
    {
      v6 = *(WebCore::MessagePortChannel **)(v5 + 8);
      if (v6)
      {
        ++*(_DWORD *)v6;
        WebCore::MessagePortChannel::closePort((uint64_t)v6, v3, a2[1]);
        return (uint64_t *)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v6);
      }
    }
  }
  return result;
}

BOOL WebCore::MessagePortChannelRegistry::didPostMessageToRemote(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WebCore::MessagePortChannel *v8;
  _BOOL8 v9;

  v5 = *a3;
  v6 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a3, a3[1]);
  if (!v6)
    return 0;
  v7 = v6[2];
  if (!v7)
    return 0;
  v8 = *(WebCore::MessagePortChannel **)(v7 + 8);
  if (!v8)
    return 0;
  ++*(_DWORD *)v8;
  v9 = WebCore::MessagePortChannel::postMessageToRemote((uint64_t)v8, a2, v5, a3[1]);
  WTF::RefCounted<WebCore::MessagePortChannel>::deref(v8);
  return v9;
}

void WebCore::WorkerMessagePortChannelProvider::~WorkerMessagePortChannelProvider(WebCore::WorkerMessagePortChannelProvider *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  WTF *v36;
  uint64_t v37;

  v3 = (uint64_t *)((char *)this + 40);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    while (1)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if (!*(_DWORD *)(v4 - 12))
        break;
      v6 = (_QWORD *)v4;
      if ((_DWORD)v5)
      {
        v7 = 16 * v5;
        v6 = (_QWORD *)v4;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
            goto LABEL_14;
        }
      }
      if ((_QWORD *)(v4 + 16 * v5) == v6)
      {
LABEL_14:
        v8 = 0;
      }
      else
      {
        v8 = v6[1];
        v6[1] = 0;
        v9 = *v3;
        if (!*v3 || (v9 += 16 * *(unsigned int *)(v9 - 4), (_QWORD *)v9 != v6))
        {
          if ((_QWORD *)v9 != v6)
          {
            *v6 = -1;
            v6[1] = 0;
            ++*(_DWORD *)(*v3 - 16);
            v10 = *v3;
            v11 = *v3 ? *(_DWORD *)(v10 - 12) - 1 : -1;
            *(_DWORD *)(v10 - 12) = v11;
            v15 = *v3;
            if (*v3)
            {
              v16 = 6 * *(_DWORD *)(v15 - 12);
              v17 = *(_DWORD *)(v15 - 4);
              if (v16 < v17 && v17 >= 9)
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v3, v17 >> 1);
            }
          }
        }
      }
      v36 = 0;
      v37 = 0;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E33A92E8;
      v35 = v12;
      (*(void (**)(uint64_t, WTF **, _QWORD **))(*(_QWORD *)v8 + 16))(v8, &v36, &v35);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v13 = v35;
      v35 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      if (HIDWORD(v37))
      {
        v19 = v36;
        v20 = (WTF *)((char *)v36 + 24 * HIDWORD(v37));
        do
        {
          v21 = (WTF *)*((_QWORD *)v19 + 1);
          if (v21)
          {
            *((_QWORD *)v19 + 1) = 0;
            *((_DWORD *)v19 + 4) = 0;
            WTF::fastFree(v21, a2);
          }
          v22 = *(unsigned int **)v19;
          *(_QWORD *)v19 = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v22 + 2), a2);
              WTF::fastFree((WTF *)v22, v25);
            }
          }
          v19 = (WTF *)((char *)v19 + 24);
        }
        while (v19 != v20);
      }
      v14 = v36;
      if (v36)
      {
        v36 = 0;
        LODWORD(v37) = 0;
        WTF::fastFree(v14, a2);
      }
      v4 = *v3;
      if (!*v3)
        goto LABEL_46;
    }
    if ((_DWORD)v5)
    {
      v26 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        v26 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
LABEL_46:
  v28 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, a2);
    }
  }
  v31 = *((_QWORD *)this + 1);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 0;
    v32 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerMessagePortChannelProvider::~WorkerMessagePortChannelProvider(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
}

uint64_t WebCore::WorkerMessagePortChannelProvider::createNewMessagePortChannel(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  v6 = *a3;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = off_1E33A9310;
  *(_OWORD *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 24) = v6;
  v7 = v3;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebCore::WorkerMessagePortChannelProvider::entangleLocalPortInThisProcessToRemote(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  v6 = *a3;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = off_1E33A9338;
  *(_OWORD *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 24) = v6;
  v7 = v3;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebCore::WorkerMessagePortChannelProvider::messagePortDisentangled(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E33A9360;
  *(_OWORD *)(v2 + 8) = v4;
  v5 = v2;
  WTF::callOnMainThread();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WebCore::WorkerMessagePortChannelProvider::postMessageToRemote(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v7 = v4;
  v8 = *a3;
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v5 = &off_1E33A9388;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v8;
  v9 = v5;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t result;
  __int128 v39;
  uint64_t v40;

  v7 = (uint64_t *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v8 + 1;
  *(_QWORD *)(a1 + 32) = v8 + 1;
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash((uint64_t *)(a1 + 40), 8u), (v6 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (v8 - (v9 << 32)) ^ ((unint64_t)(v8 - (v9 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (_QWORD *)(v6 + 16 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_12:
    *v15 = v9;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = &off_1E33A93B0;
    v20 = *a3;
    *a3 = 0;
    v19[1] = v20;
    v21 = v15[1];
    v15[1] = v19;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *v7;
    if (*v7)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v7;
    if (*v7)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_28;
    }
    else
    {
      if (3 * v27 > 4 * v26)
        goto LABEL_28;
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_27:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v7, v28);
        goto LABEL_28;
      }
    }
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_27;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v9)
  {
    if (v16 == -1)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (_QWORD *)(v6 + 16 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
LABEL_28:
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v29 = *(unsigned int **)(a1 + 8);
  if (v29)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v31)
    v32 = v31 - 96;
  else
    v32 = 0;
  v33 = *(_QWORD *)(v32 + 360);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (__ldaxr((unsigned __int8 *)v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v34))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v34);
LABEL_38:
    ++*(_QWORD *)(v34 + 8);
    v36 = __ldxr((unsigned __int8 *)v34);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
        goto LABEL_43;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
  }
LABEL_43:
  v39 = *a2;
  v37 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v37 = &off_1E33A93D8;
  *(_QWORD *)(v37 + 8) = v29;
  *(_QWORD *)(v37 + 16) = v33;
  *(_QWORD *)(v37 + 24) = v9;
  *(_OWORD *)(v37 + 32) = v39;
  v40 = v37;
  WTF::callOnMainThread();
  result = v40;
  if (v40)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebCore::MessagePortChannel>::deref();
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebCore::MessagePortChannel *WTF::RefCounted<WebCore::MessagePortChannel>::deref(WebCore::MessagePortChannel *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::MessagePortChannel::~MessagePortChannel(result);
    return (WebCore::MessagePortChannel *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF *WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(WTF *result, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  v2 = result;
  v3 = *((_DWORD *)result + 3);
  if (v3)
  {
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 24 * v3;
    do
    {
      result = *(WTF **)(v4 + 8);
      if (result)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v6 = *(unsigned int **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v6 + 2), a2);
          result = (WTF *)WTF::fastFree((WTF *)v6, v9);
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  *((_DWORD *)v2 + 3) = 0;
  return result;
}

unint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((_DWORD *)v9 + 4) = 0;
          v7[4] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 5);
          *((_DWORD *)v9 + 5) = 0;
          v7[5] = v11;
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          if (result)
          {
            *((_QWORD *)v9 + 1) = 0;
            *((_DWORD *)v9 + 4) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v12 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v12);
              WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v12 + 2), v6);
              result = (unsigned int *)WTF::fastFree((WTF *)v12, v15);
            }
          }
          v7 += 6;
          v9 = (WTF *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannel::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  WebCore::MessagePortChannel *v2;

  *a1 = &off_1E33A9180;
  v2 = (WebCore::MessagePortChannel *)a1[4];
  a1[4] = 0;
  if (v2)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannel::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::MessagePortChannel *v3;

  *(_QWORD *)this = &off_1E33A9180;
  v3 = (WebCore::MessagePortChannel *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannel::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::call(uint64_t result)
{
  --*(_QWORD *)(*(_QWORD *)(result + 32) + 168);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::createNewMessagePortChannel(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A91A8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::createNewMessagePortChannel(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A91A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::createNewMessagePortChannel(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  WebCore::MessagePortChannel *v6;
  int v7;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = (_OWORD *)(result + 16);
      v4 = (_OWORD *)(result + 32);
      v5 = WTF::fastMalloc((WTF *)0xB8);
      v6 = (WebCore::MessagePortChannel *)WebCore::MessagePortChannel::MessagePortChannel(v5, v2, v3, v4);
      result = (uint64_t)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v6);
      v7 = *(_DWORD *)(v2 + 8);
      if (v7)
      {
        *(_DWORD *)(v2 + 8) = v7 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::entangleLocalPortInThisProcessToRemote(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A91D0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::entangleLocalPortInThisProcessToRemote(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A91D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::entangleLocalPortInThisProcessToRemote(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  char **v9;
  char *v10;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = result;
      ++*(_DWORD *)(v4 + 8);
      v6 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v6 != -1)
      {
        v10 = &v8;
        v9 = &v10;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) != 0)
      {
        result = (uint64_t)WebCore::MessagePortChannelRegistry::didEntangleLocalToRemote(v4, (unint64_t *)(v5 + 16), a3, WebCore::Process::globalIdentifier);
        v7 = *(_DWORD *)(v4 + 8);
        if (v7)
        {
          *(_DWORD *)(v4 + 8) = v7 - 1;
          return result;
        }
      }
      else
      {
        __break(1u);
      }
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortDisentangled(WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A91F8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortDisentangled(WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A91F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortDisentangled(WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)(v2 + 8);
      result = (uint64_t)WebCore::MessagePortChannelRegistry::didDisentangleMessagePort(v2, (unint64_t *)(result + 16));
      v3 = *(_DWORD *)(v2 + 8);
      if (v3)
      {
        *(_DWORD *)(v2 + 8) = v3 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortClosed(WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A9220;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortClosed(WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A9220;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::messagePortClosed(WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  WebCore::MessagePortChannel *v7;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_DWORD *)(v2 + 8) + 1;
      *(_DWORD *)(v2 + 8) = v4;
      v5 = *(void **)(result + 16);
      result = (uint64_t)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(v2 + 16), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
      if (result)
      {
        v6 = *(_QWORD *)(result + 16);
        if (v6)
        {
          v7 = *(WebCore::MessagePortChannel **)(v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)v7;
            WebCore::MessagePortChannel::closePort((uint64_t)v7, v5, *(_QWORD *)(v3 + 24));
            result = (uint64_t)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
            v4 = *(_DWORD *)(v2 + 8);
          }
        }
      }
      if (v4)
      {
        *(_DWORD *)(v2 + 8) = v4 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v11;

  *(_QWORD *)a1 = &off_1E33A9248;
  v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v11);
    }
  }
  v7 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v11;

  *(_QWORD *)this = &off_1E33A9248;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v11);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  WebCore::MessagePortChannel *v7;
  _BOOL4 v8;
  void *v9;
  int v10;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      ++*(_DWORD *)(v2 + 8);
      v5 = *(_QWORD *)(result + 40);
      v4 = (unint64_t *)(result + 40);
      result = (uint64_t)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(v2 + 16), v5, *(_QWORD *)(result + 48));
      if (result)
      {
        v6 = *(_QWORD *)(result + 16);
        if (v6)
        {
          v7 = *(WebCore::MessagePortChannel **)(v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)v7;
            v8 = WebCore::MessagePortChannel::postMessageToRemote((uint64_t)v7, (unint64_t)(v4 - 3), v5, *(_QWORD *)(v3 + 48));
            result = (uint64_t)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
            if (v8)
              result = (uint64_t)WebCore::MessagePort::notifyMessageAvailable(v4, v9);
          }
        }
      }
      v10 = *(_DWORD *)(v2 + 8);
      if (v10)
      {
        *(_DWORD *)(v2 + 8) = v10 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A9270;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33A9270;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      ++*(_DWORD *)(v2 + 8);
      v4 = (unint64_t *)(result + 16);
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v6 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      *v5 = &off_1E33A9298;
      v5[1] = v6;
      v8 = v5;
      WebCore::MessagePortChannelRegistry::takeAllMessagesForPort(v2, v4, (uint64_t *)&v8);
      result = (uint64_t)v8;
      if (v8)
        result = (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
      v7 = *(_DWORD *)(v2 + 8);
      if (v7)
      {
        *(_DWORD *)(v2 + 8) = v7 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33A9298;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A9298;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePortChannelProviderImpl::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

__n128 WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::reinsert(uint64_t a1, unint64_t *a2)
{
  _OWORD *v3;
  void *v4;
  unsigned int *v5;
  __n128 result;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _OWORD *v10;

  v3 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(a1, *a2, a2[1]);
  v5 = (unsigned int *)*((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = 0;
  if (v5)
  {
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, v5);
      v10 = v3;
      WTF::fastFree((WTF *)v5, v4);
      v3 = v10;
    }
  }
  result = *(__n128 *)a2;
  *v3 = *(_OWORD *)a2;
  v7 = a2[2];
  a2[2] = 0;
  *((_QWORD *)v3 + 2) = v7;
  return result;
}

_OWORD *WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4;
  int v5;
  int v6;
  _OWORD *v7;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(a2, a3);
  v6 = 0;
  do
  {
    v7 = (_OWORD *)(a1 + 24 * (v5 & v4));
    v5 = ++v6 + (v5 & v4);
  }
  while (*v7 != 0);
  return v7;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (a1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a1 - 1640531527) << 16) ^ ((unsigned __int16)a1
                                                                                          - 1640531527);
  v3 = (a1 >> 37) & 0x7FFF800 ^ ((v2 + WORD2(a1) + (v2 >> 11)) << 16) ^ (v2 + WORD2(a1) + (v2 >> 11));
  v4 = (a2 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)a2 + (v3 >> 11)) << 16) ^ (v3
                                                                                               + (unsigned __int16)a2
                                                                                               + (v3 >> 11));
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (v5 + (v5 >> 11)) ^ (8 * (v5 + (v5 >> 11)));
  v7 = (v6 + (v6 >> 5)) ^ (4 * (v6 + (v6 >> 5)));
  v8 = (v7 + (v7 >> 15)) ^ ((v7 + (v7 >> 15)) << 10);
  if (v8)
    return v8;
  else
    return 0x800000;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::createNewMessagePortChannel(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 24);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E33A90B8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (uint64_t *)(v4 + 8);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v2 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 24);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::entangleLocalPortInThisProcessToRemote(WebCore::MessagePortIdentifier const&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 24))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 24);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E33A90B8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (uint64_t *)(v4 + 8);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v2 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 24))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 24);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::messagePortDisentangled(WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 32))(*(_QWORD *)(v2 + 8), a1 + 8);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E33A90B8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (uint64_t *)(v4 + 8);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v2 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 32))(*(_QWORD *)(v2 + 8), a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v8;

  *(_QWORD *)a1 = &off_1E33A9388;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v8;

  *(_QWORD *)this = &off_1E33A9388;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::postMessageToRemote(WebCore::MessageWithMessagePorts &&,WebCore::MessagePortIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 56))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 32);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E33A90B8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (uint64_t *)(v4 + 8);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v2 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 56))(*(_QWORD *)(v2 + 8), a1 + 8, a1 + 32);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33A93B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A93B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a3;
  *a3 = 0;
  v6 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, a2, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *a1 = &off_1E33A93D8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *(_QWORD *)this = &off_1E33A93D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      goto LABEL_5;
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E33A90B8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = (uint64_t *)(v7 + 8);
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v7);
  v2 = *v8;
  if (*v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v10 + 1, (unsigned int *)v2));
  }
  v11 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
    goto LABEL_4;
  }
LABEL_5:
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E33A9400;
  *(_OWORD *)(v5 + 8) = v14;
  *(_QWORD *)(v5 + 24) = v4;
  v15 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, a1 + 32, &v15);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&)#1},void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *a1 = &off_1E33A9400;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&)#1},void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *(_QWORD *)this = &off_1E33A9400;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Function<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&> &&)#1},void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)>>::call(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  uint64_t result;
  WTF::StringImpl *v19;
  _QWORD v20[5];
  _QWORD *v21;
  char v22;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E335A710;
  v7 = *a3;
  *a3 = 0;
  v6[1] = v7;
  if (v7)
  {
    v8 = v6;
    v9 = a1[1];
    v10 = *(_QWORD *)(a1[2] + 48);
    a1[1] = 0;
    v11 = a1[3];
    v20[1] = v11;
    v12 = *a2;
    *a2 = 0;
    v13 = a2[1];
    a2[1] = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v14 = off_1E33A9428;
    v14[1] = v9;
    v14[2] = v11;
    v14[3] = v12;
    v19 = 0;
    v20[0] = 0;
    v20[2] = 0;
    v20[3] = 0;
    v14[4] = v13;
    v20[4] = 0;
    v21 = v14;
    v14[5] = v8;
    v22 = 0;
    (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v10 + 32))(v10, &v21, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return _ZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS_21MessagePortIdentifierEON3WTF17CompletionHandlerIFvONS4_6VectorINS_23MessageWithMessagePortsELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS5_IFvvEEEEEEEN3__0clEvENUlSB_ONS4_8FunctionISC_EEE_clESB_SL_ENUlRT_E_D1Ev((uint64_t)v20, v15);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS_21MessagePortIdentifierEON3WTF17CompletionHandlerIFvONS4_6VectorINS_23MessageWithMessagePortsELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS5_IFvvEEEEEEEN3__0clEvENUlSB_ONS4_8FunctionISC_EEE_clESB_SL_ENUlRT_E_D1Ev(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    *v3 = &off_1E335A710;
    v3[1] = v4;
    if (!v4)
    {
      result = 139;
      __break(0xC471u);
      return result;
    }
    v24 = v3;
    WTF::callOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  v6 = *(_DWORD *)(a1 + 28);
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 + 24 * v6;
    do
    {
      v14 = *(WTF **)(v12 + 8);
      if (v14)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        v23 = v13;
        WTF::fastFree(v14, a2);
        v13 = v23;
      }
      v15 = *(unsigned int **)v12;
      *(_QWORD *)v12 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v21 = v12;
          v22 = v13;
          v18 = v15;
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v15 + 2), a2);
          v19 = (WTF *)v18;
          v12 = v21;
          WTF::fastFree(v19, v20);
          v13 = v22;
        }
      }
      v12 += 24;
    }
    while (v12 != v13);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E33A9428;
  _ZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS_21MessagePortIdentifierEON3WTF17CompletionHandlerIFvONS4_6VectorINS_23MessageWithMessagePortsELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS5_IFvvEEEEEEEN3__0clEvENUlSB_ONS4_8FunctionISC_EEE_clESB_SL_ENUlRT_E_D1Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33A9428;
  _ZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS_21MessagePortIdentifierEON3WTF17CompletionHandlerIFvONS4_6VectorINS_23MessageWithMessagePortsELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS5_IFvvEEEEEEEN3__0clEvENUlSB_ONS4_8FunctionISC_EEE_clESB_SL_ENUlRT_E_D1Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_EUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callEST_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v26;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = (uint64_t *)(v2 + 40);
      v5 = *(_QWORD *)(v2 + 40);
      ++*(_DWORD *)(v2 + 16);
      if (!v5)
        goto LABEL_11;
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *(_DWORD *)(v5 - 8);
      v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(v5 + 16 * v11);
      if (v12 != v6)
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v7;
          v12 = *(_QWORD *)(v5 + 16 * v11);
          ++v13;
          if (v12 == v6)
            goto LABEL_10;
        }
        v11 = *(unsigned int *)(v5 - 4);
      }
LABEL_10:
      if (v11 != *(_DWORD *)(v5 - 4))
      {
        v18 = (_QWORD *)(v5 + 16 * v11);
        v14 = v18[1];
        v18[1] = 0;
        v19 = *v4;
        if (!*v4 || (v19 += 16 * *(unsigned int *)(v19 - 4), (_QWORD *)v19 != v18))
        {
          if ((_QWORD *)v19 != v18)
          {
            *v18 = -1;
            v18[1] = 0;
            ++*(_DWORD *)(*v4 - 16);
            v20 = *v4;
            v21 = *v4 ? *(_DWORD *)(v20 - 12) - 1 : -1;
            *(_DWORD *)(v20 - 12) = v21;
            v22 = *v4;
            if (*v4)
            {
              v23 = 6 * *(_DWORD *)(v22 - 12);
              v24 = *(_DWORD *)(v22 - 4);
              if (v23 < v24 && v24 >= 9)
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v4, v24 >> 1);
            }
          }
        }
      }
      else
      {
LABEL_11:
        v14 = 0;
      }
      v15 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E33A9450;
      v16[1] = v15;
      v26 = v16;
      (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v14 + 16))(v14, v3 + 24, &v26);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v17 = *(_DWORD *)(v2 + 16);
      if (v17)
      {
        *(_DWORD *)(v2 + 16) = v17 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_ENUlRT_E_clINS2_22ScriptExecutionContextEEEDaSQ_EUlvE_vJEED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  *a1 = off_1E33A9450;
  if (!a1[1])
  {
    a1[1] = 0;
    return (uint64_t)a1;
  }
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = a1[1];
  a1[1] = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (v3)
  {
    v6 = v2;
    WTF::callOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    v4 = a1[1];
    a1[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (uint64_t)a1;
  }
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_ENUlRT_E_clINS2_22ScriptExecutionContextEEEDaSQ_EUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E33A9450;
  if (!*((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
    return WTF::fastFree(a1, a2);
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  *v3 = &off_1E335A710;
  v3[1] = v4;
  if (v4)
  {
    v7 = v3;
    WTF::callOnMainThread();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    v5 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WTF::fastFree(a1, a2);
  }
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore32WorkerMessagePortChannelProvider22takeAllMessagesForPortERKNS2_21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS2_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS7_IFvvEEEEEEEN3__0clEvENUlSD_ONS_8FunctionISE_EEE_clESD_SN_ENUlRT_E_clINS2_22ScriptExecutionContextEEEDaSQ_EUlvE_vJEE4callEv(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (v3)
  {
    v5 = v2;
    WTF::callOnMainThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WebCore::checkSubClassSnippetForJSDocument@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9478;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::compileDocumentDocumentElementAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  unsigned int *result;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  result = JSC::Snippet::setGenerator<WebCore::compileDocumentDocumentElementAttribute(void)::$_0>(v3);
  *(_QWORD *)(v3 + 20) = -4294508538;
  *(_DWORD *)(v3 + 28) = 458758;
  return result;
}

unsigned int *JSC::Snippet::setGenerator<WebCore::compileDocumentDocumentElementAttribute(void)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33A94A0;
  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::compileDocumentBodyAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A94C8;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294443001;
  *(_DWORD *)(v9 + 28) = 524295;
  return result;
}

unint64_t operationToJSElement(JSC::JSGlobalObject *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return WebCore::toJS(a1, a1, a2, a4);
}

uint64_t operationToJSHTMLElement(JSC::JSGlobalObject *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3, WebCore::HTMLElement *a4)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return WebCore::toJS(a1, a1, a2, a4);
}

unint64_t operationToJSDocument(JSC::JSGlobalObject *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v6;
  unint64_t v7;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *var28[6];

  *(WebCore::Node **)(*((_QWORD *)a1 + 7) + 40) = var28[5];
  v6 = WebCore::cachedDocumentWrapper((WebCore::DOMWrapperWorld **)a1, a1, a2, a4);
  if (v6)
    return v6;
  *((_DWORD *)a2 + 6) += 2;
  var28[0] = a2;
  v7 = WebCore::toJSNewlyCreated((uint64_t)a1, a1, var28);
  v10 = var28[0];
  var28[0] = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return v7;
}

uint64_t operationToJSNode(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t OutOfLineCachedWrapper;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *var28[6];

  *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 40) = var28[5];
  if (*(_BYTE *)(a1 + 3328))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper(a1, a2);
    if (OutOfLineCachedWrapper)
      return OutOfLineCachedWrapper;
  }
  *(_DWORD *)(a2 + 24) += 2;
  var28[0] = (WebCore::Node *)a2;
  Wrapper = WebCore::createWrapper((WebCore::DOMWrapperWorld **)a1, (JSC::VM *)a1, (WebCore::JSDOMGlobalObject *)var28, a4);
  v11 = var28[0];
  var28[0] = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return Wrapper;
}

uint64_t operationToJSContainerNode(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t OutOfLineCachedWrapper;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *var28[6];

  *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 40) = var28[5];
  if (*(_BYTE *)(a1 + 3328))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper(a1, a2);
    if (OutOfLineCachedWrapper)
      return OutOfLineCachedWrapper;
  }
  *(_DWORD *)(a2 + 24) += 2;
  var28[0] = (WebCore::Node *)a2;
  Wrapper = WebCore::createWrapper((WebCore::DOMWrapperWorld **)a1, (JSC::VM *)a1, (WebCore::JSDOMGlobalObject *)var28, a4);
  v11 = var28[0];
  var28[0] = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return Wrapper;
}

unsigned int *WebCore::checkSubClassSnippetForJSDocumentFragment@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A94F0;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::checkSubClassSnippetForJSElement@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9518;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::checkSubClassSnippetForJSEvent@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9540;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::checkSubClassSnippetForJSNode@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9568;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::compileNodeFirstChildAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9590;
  *(_DWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = xmmword_1969F08D0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = operationToJSNode;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = 0xFFFFFFFF00010000;
  *(_DWORD *)(v9 + 28) = 0x10000;
  return result;
}

unsigned int *WebCore::compileNodeLastChildAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9590;
  *(_DWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = xmmword_1969F08E0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = operationToJSNode;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294836223;
  *(_DWORD *)(v9 + 28) = 131073;
  return result;
}

unsigned int *WebCore::compileNodeNextSiblingAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9590;
  *(_DWORD *)(v4 + 16) = 1;
  *(_OWORD *)(v4 + 24) = xmmword_1969F08F0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = operationToJSNode;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294705149;
  *(_DWORD *)(v9 + 28) = 262147;
  return result;
}

unsigned int *WebCore::compileNodePreviousSiblingAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9590;
  *(_DWORD *)(v4 + 16) = 1;
  *(_OWORD *)(v4 + 24) = xmmword_1969F0900;
  *(_BYTE *)(v4 + 40) = 1;
  *(_QWORD *)(v4 + 48) = operationToJSNode;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294639612;
  *(_DWORD *)(v9 + 28) = 327684;
  return result;
}

unsigned int *WebCore::compileNodeParentNodeAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A95B8;
  *(_DWORD *)(v4 + 16) = 1;
  *(_OWORD *)(v4 + 24) = xmmword_1969F0910;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = operationToJSContainerNode;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294770686;
  *(_DWORD *)(v9 + 28) = 196610;
  return result;
}

unsigned int *WebCore::compileNodeOwnerDocumentAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 4) = 2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A9608;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *a1;
  *(_QWORD *)(v9 + 20) = -4294574075;
  *(_DWORD *)(v9 + 28) = 393221;
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>> WebCore::DOMJIT::checkDOM<WebCore::Document>(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195A70F80);
  }
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v4 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_9;
  v6 = *v4 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v6, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branch32(a1, 1u, 17, 249, (uint64_t)&v8);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 2;
  v7 = v8;
  if (v8 != -1)
  {
    *(_QWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
}

char *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(char *result, char *a2)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != -1)
  {
    v3 = a2;
    v4 = result;
    v5 = *((unsigned int *)result + 3);
    if ((_DWORD)v5 == *((_DWORD *)result + 2))
    {
      result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v5 + 1), (unint64_t)a2);
      v3 = result;
      v6 = *(_QWORD *)v4 + 12 * *((unsigned int *)v4 + 3);
      v2 = *(_DWORD *)result;
    }
    else
    {
      v6 = *(_QWORD *)result + 12 * v5;
    }
    *(_DWORD *)v6 = v2;
    *(_QWORD *)(v6 + 4) = *(_QWORD *)(v3 + 4);
    ++*((_DWORD *)v4 + 3);
  }
  return result;
}

double WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WebCore::compileDocumentDocumentElementAttribute(void)::$_0>::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  return WebCore::compileDocumentDocumentElementAttribute(void)::$_0::operator()(a3, a1, a2);
}

double WebCore::compileDocumentDocumentElementAttribute(void)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  signed __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  int8x8_t v12;
  char v13;
  double result;
  unsigned int v15[2];
  char v16;
  __int16 v17;
  char v18;
  unsigned int v19[3];
  unsigned int v20;

  v3 = *(_DWORD *)(a3 + 28);
  if (!v3)
    goto LABEL_16;
  v5 = *(_QWORD *)(a3 + 16);
  if (*(_DWORD *)(v5 + 4) != 2)
    goto LABEL_12;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A711B8);
  }
  if (*(_DWORD *)(v5 + 20))
    goto LABEL_12;
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A711C0);
  }
  if (*(_DWORD *)(v5 + 36))
  {
LABEL_12:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_16;
  }
  if (!*(_DWORD *)(a3 + 44))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x195A711B0);
  }
  v8 = *(_BYTE *)v5;
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(_BYTE *)(v5 + 32);
  v11 = **(unsigned __int8 **)(a3 + 32);
  JSC::MacroAssemblerARM64::load64(a2, *(unsigned __int8 *)(v5 + 16) | 0x1800000000, **(_BYTE **)(a3 + 32));
  JSC::MacroAssemblerARM64::load64(a2, v11 | 0x4F800000000, v11);
  JSC::MacroAssemblerARM64::branchTest64(a2, 0, v11, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v19, v12);
  WebCore::DOMJIT::toWrapper<WebCore::Element,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *)>(a2, (WTF *)a3, v11, v10, v8, v9);
  JSC::ARM64Assembler::label((int *)&v20, (_DWORD *)(a2 + 32));
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320);
  if (*(_BYTE *)(a2 + 328))
    v13 = 69;
  else
    v13 = 65;
  v15[0] = v20;
  v15[1] = 0;
  v16 = v13;
  v17 = 15;
  v18 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v19, a2);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a2, 2uLL, v8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v15, a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  *a1 = a1 + 2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

WTF *WebCore::DOMJIT::toWrapper<WebCore::Element,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *)>(uint64_t a1, WTF *a2, unsigned __int8 a3, unsigned __int8 a4, signed __int8 a5, uint64_t a6)
{
  void *v11;
  WTF *v12;
  uint64_t *v13;
  WTF *result;
  char v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19[12];
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v23[2];
  char v24;
  __int16 v25;
  char v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[28];
  int v30;

  v27 = (WTF *)v29;
  v28 = 2;
  if (a6)
  {
    if (!*(_BYTE *)(a6 + 3328))
    {
      JSC::ARM64Assembler::label(&v30, (_DWORD *)(a1 + 32));
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320);
      if (*(_BYTE *)(a1 + 328))
        v15 = 69;
      else
        v15 = 65;
      v23[0] = v30;
      v23[1] = 0;
      v24 = v15;
      v25 = 15;
      v26 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((char *)&v27, (char *)v23);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v20, (uint64_t *)&v27);
      JSC::SnippetParams::addSlowPathCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a2, (uint64_t *)&v20, a1, (uint64_t)operationToJSElement, a5, a4, a3);
      v12 = v20;
      if (&v22 == (uint64_t *)v20 || !v20)
        goto LABEL_7;
      v13 = &v21;
      v20 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest8((uint64_t)v19, a1, a4 | 0xD0000000000);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((char *)&v27, v19);
  }
  WebCore::DOMJIT::tryLookUpWrapperCache<WebCore::Element>(a1, (uint64_t)&v27, a3, a5);
  JSC::AssemblyHelpers::boxCell((_DWORD *)a1, a5, a5);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v16, (uint64_t *)&v27);
  JSC::SnippetParams::addSlowPathCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a2, (uint64_t *)&v16, a1, (uint64_t)operationToJSElement, a5, a4, a3);
  v12 = v16;
  if (&v18 != (uint64_t *)v16 && v16)
  {
    v13 = &v17;
    v16 = 0;
LABEL_6:
    *(_DWORD *)v13 = 0;
    WTF::fastFree(v12, v11);
  }
LABEL_7:
  result = v27;
  if (v29 != (_BYTE *)v27)
  {
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      return (WTF *)WTF::fastFree(result, v11);
    }
  }
  return result;
}

WTF *JSC::SnippetParams::addSlowPathCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(WTF *result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7)
{
  WTF *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v21;
  unsigned int v22;
  int v23;
  _BYTE v24[24];

  v13 = result;
  v14 = *((unsigned int *)a2 + 3);
  v21 = (WTF *)v24;
  v22 = 2;
  v23 = v14;
  if (v14 < 3)
  {
    v16 = v24;
    if (!(_DWORD)v14)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v14 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v15 = 12 * v14;
  v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v14));
  v22 = (v15 & 0xFFFFFFFC) / 0xC;
  v21 = (WTF *)v16;
  LODWORD(v14) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v14)
  {
LABEL_6:
    v17 = *a2;
    v18 = *a2 + 12 * v14;
    do
    {
      *(_DWORD *)v16 = *(_DWORD *)v17;
      *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
      v17 += 12;
      v16 += 12;
    }
    while (v17 != v18);
  }
LABEL_8:
  (*(void (**)(WTF *, WTF **, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)v13 + 16))(v13, &v21, a3, a4, a5, a6 | ((unint64_t)a7 << 8));
  result = v21;
  if (v24 != (_BYTE *)v21 && v21 != 0)
  {
    v21 = 0;
    v22 = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned int *)a2 + 3);
  result = a1 + 16;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
      return result;
    }
    v6 = 12 * v4;
    result = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = result;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)result = *(_DWORD *)v8;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      result += 12;
    }
    while (v8 != v9);
  }
  return a1;
}

void WebCore::DOMJIT::tryLookUpWrapperCache<WebCore::Element>(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4)
{
  int8x8_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int8x8_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  JSC::MacroAssemblerARM64::load64(a1, a3 | 0x800000000, a4);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, a4, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v23, v7);
  v8 = v23;
  if (v23 != -1)
  {
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
    {
      v10 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v9 + 1), (unint64_t)&v23);
      v12 = *(_DWORD *)v10;
      v11 = (uint64_t *)(v10 + 4);
      v8 = v12;
      LODWORD(v9) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v11 = &v24;
    }
    v13 = *(_QWORD *)a2 + 12 * v9;
    *(_DWORD *)v13 = v8;
    *(_QWORD *)(v13 + 4) = *v11;
    ++*(_DWORD *)(a2 + 12);
  }
  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, a4 | 0x800000000, *(_BYTE *)(a1 + 272));
    JSC::MacroAssemblerARM64::branchTest64(a1, 1u, 16, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v21, v14);
    v15 = v21;
    if (v21 != -1)
    {
      v16 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
      {
        v17 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v16 + 1), (unint64_t)&v21);
        v19 = *(_DWORD *)v17;
        v18 = (int *)(v17 + 4);
        v15 = v19;
        LODWORD(v16) = *(_DWORD *)(a2 + 12);
      }
      else
      {
        v18 = &v22;
      }
      v20 = *(_QWORD *)a2 + 12 * v16;
      *(_DWORD *)v20 = v15;
      *(_QWORD *)(v20 + 4) = *(_QWORD *)v18;
      ++*(_DWORD *)(a2 + 12);
    }
    JSC::MacroAssemblerARM64::load64(a1, a4, a4);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::AssemblyHelpers::boxCell(_DWORD *a1, int a2, unsigned __int8 a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 == a2)
    return;
  if (a2 == 63)
  {
    if (a3 != 31)
    {
      v6 = a3 & 0x1F | 0xD2800000;
      goto LABEL_11;
    }
LABEL_10:
    v6 = (char)a3 | (32 * a2) | 0x91000000;
LABEL_11:
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v6);
    return;
  }
  if (a2 == 31 || a3 == 31)
    goto LABEL_10;
  v4 = a3 & 0x1F | ((a2 & 0x1F) << 16) | 0xAA0003E0;
  v5 = a1[50];
  if (v5 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
    v5 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v5) = v4;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::branchTest8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5;

  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load8(a2, a3, *(_BYTE *)(a2 + 304));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, 17, a1, v5);
  }
  else
  {
    __break(0xC471u);
  }
}

WTF *WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WebCore::compileDocumentBodyAttribute(void)::$_0>::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  uint64_t *v19;
  int v20;
  char *v21;
  int8x8_t v22;
  int v23;
  unsigned int v24;
  char *v25;
  int *v26;
  int v27;
  char *v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t *v32;
  int v33;
  char *v34;
  double v35;
  int i;
  int v37;
  unsigned int v38;
  char *v39;
  int *v40;
  int v41;
  char *v42;
  int8x8_t v43;
  int v44;
  unsigned int v45;
  char *v46;
  int *v47;
  int v48;
  char *v49;
  int v50;
  unsigned int v51;
  char *v52;
  uint64_t *v53;
  int v54;
  char *v55;
  unsigned int j;
  unsigned int v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  int v63;
  unsigned int v64;
  char *v65;
  _QWORD *v66;
  int v67;
  _BYTE *v68;
  int8x8_t v69;
  int v70;
  unsigned int v71;
  char *v72;
  _QWORD *v73;
  int v74;
  _BYTE *v75;
  unsigned int v76;
  int v77;
  _BYTE *v78;
  WTF *v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  _BYTE *v83;
  WTF *v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  WTF *v89;
  WTF *v91;
  unsigned int m;
  unsigned int v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  WTF *v99;
  WTF *result;
  int8x8_t v101;
  int v102;
  unsigned int v103;
  char *v104;
  uint64_t *v105;
  int v106;
  _BYTE *v107;
  int k;
  unsigned int v109;
  char v110;
  unsigned int v111;
  char *v112;
  int *v113;
  int v114;
  _BYTE *v115;
  unsigned int v116;
  int v117;
  _BYTE *v118;
  WTF *v119;
  WTF *v120;
  unsigned int v121;
  int v122;
  _BYTE *v123;
  WTF *v124;
  WTF *v125;
  JSC::AssemblerBuffer *v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned int v133[3];
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  _BYTE v144[24];
  WTF *v145;
  uint64_t v146;
  _BYTE v147[28];
  int v148;
  uint64_t v149;
  WTF *v150;
  unsigned int v151;
  unsigned int v152;
  _BYTE v153[28];
  int v154;
  int v155;
  char v156;
  __int16 v157;
  char v158;
  WTF *v159;
  uint64_t v160;
  _BYTE v161[24];
  WTF *v162;
  unsigned int v163;
  unsigned int v164;
  _BYTE v165[32];

  v3 = *(_DWORD *)(a2 + 28);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A72774);
  }
  v6 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v6 + 1) != 2)
    goto LABEL_161;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A7277CLL);
  }
  if (*((_DWORD *)v6 + 5))
    goto LABEL_161;
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A72784);
  }
  if (*((_DWORD *)v6 + 9))
  {
LABEL_161:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_162;
  }
  v7 = *(_DWORD *)(a2 + 44);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195A7278CLL);
  }
  if (v7 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A72794);
  }
  v9 = *v6;
  v10 = v6[16];
  v127 = v6[32];
  v11 = *((_QWORD *)v6 + 5);
  v12 = *(char **)(a2 + 32);
  v13 = *v12;
  v14 = v12[1];
  JSC::MacroAssemblerARM64::load64(a1, v10 | 0x1800000000, *v12);
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x4F800000000, v13);
  v145 = (WTF *)v147;
  v146 = 2;
  v142 = (WTF *)v144;
  v143 = 2;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v13, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v140, v15);
  v16 = v140;
  if (v140 != -1)
  {
    v17 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      v18 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, (void *)(HIDWORD(v146) + 1), (unint64_t)&v140);
      v20 = *(_DWORD *)v18;
      v19 = (uint64_t *)(v18 + 4);
      v16 = v20;
      v17 = HIDWORD(v146);
    }
    else
    {
      v19 = &v141;
    }
    v21 = (char *)v145 + 12 * v17;
    *(_DWORD *)v21 = v16;
    *(_QWORD *)(v21 + 4) = *v19;
    ++HIDWORD(v146);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_173;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, v13 | 0x1C00000000, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a1, 0, 17, (uint64_t)&v138, v22);
  v23 = v138;
  if (v138 != -1)
  {
    v24 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      v25 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, (void *)(HIDWORD(v146) + 1), (unint64_t)&v138);
      v27 = *(_DWORD *)v25;
      v26 = (int *)(v25 + 4);
      v23 = v27;
      v24 = HIDWORD(v146);
    }
    else
    {
      v26 = &v139;
    }
    v28 = (char *)v145 + 12 * v24;
    *(_DWORD *)v28 = v23;
    *(_QWORD *)(v28 + 4) = *(_QWORD *)v26;
    ++HIDWORD(v146);
  }
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x6000000000, v14);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, v14);
  JSC::MacroAssemblerARM64::branch64(a1, 1u, (char)v14, *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24), (uint64_t)&v136);
  v29 = v136;
  if (v136 != -1)
  {
    v30 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, (void *)(HIDWORD(v146) + 1), (unint64_t)&v136);
      v33 = *(_DWORD *)v31;
      v32 = (uint64_t *)(v31 + 4);
      v29 = v33;
      v30 = HIDWORD(v146);
    }
    else
    {
      v32 = &v137;
    }
    v34 = (char *)v145 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++HIDWORD(v146);
  }
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x5000000000, v13);
  v126 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v35 = JSC::AssemblerBuffer::outOfLineGrow(v126);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v13, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v134, *(int8x8_t *)&v35);
  v37 = v134;
  if (v134 != -1)
  {
    v38 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      v39 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, (void *)(HIDWORD(v146) + 1), (unint64_t)&v134);
      v41 = *(_DWORD *)v39;
      v40 = (int *)(v39 + 4);
      v37 = v41;
      v38 = HIDWORD(v146);
    }
    else
    {
      v40 = &v135;
    }
    v42 = (char *)v145 + 12 * v38;
    *(_DWORD *)v42 = v37;
    *(_QWORD *)(v42 + 4) = *(_QWORD *)v40;
    ++HIDWORD(v146);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x195A72604);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, v13 | 0x1C00000000, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a1, 0, 17, (uint64_t)v133, v43);
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x6000000000, v14);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, v14);
  JSC::MacroAssemblerARM64::branch64(a1, 0, (char)v14, *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24), (uint64_t)&v131);
  v44 = v131;
  if (v131 != -1)
  {
    v45 = HIDWORD(v143);
    if (HIDWORD(v143) == (_DWORD)v143)
    {
      v46 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, (void *)(HIDWORD(v143) + 1), (unint64_t)&v131);
      v48 = *(_DWORD *)v46;
      v47 = (int *)(v46 + 4);
      v44 = v48;
      v45 = HIDWORD(v143);
    }
    else
    {
      v47 = &v132;
    }
    v49 = (char *)v142 + 12 * v45;
    *(_DWORD *)v49 = v44;
    *(_QWORD *)(v49 + 4) = *(_QWORD *)v47;
    ++HIDWORD(v143);
  }
  JSC::MacroAssemblerARM64::branch64(a1, 0, (char)v14, *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24), (uint64_t)&v129);
  v50 = v129;
  if (v129 != -1)
  {
    v51 = HIDWORD(v143);
    if (HIDWORD(v143) == (_DWORD)v143)
    {
      v52 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, (void *)(HIDWORD(v143) + 1), (unint64_t)&v129);
      v54 = *(_DWORD *)v52;
      v53 = (uint64_t *)(v52 + 4);
      v50 = v54;
      v51 = HIDWORD(v143);
    }
    else
    {
      v53 = &v130;
    }
    v55 = (char *)v142 + 12 * v51;
    *(_DWORD *)v55 = v50;
    *(_QWORD *)(v55 + 4) = *v53;
    ++HIDWORD(v143);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v133, a1);
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x3800000000, v13);
  for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v126);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v57 = j;
  if (j + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v126);
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v58 = 69;
  else
    v58 = 65;
  v162 = (WTF *)j;
  LOBYTE(v163) = v58;
  *(_WORD *)((char *)&v163 + 1) = 15;
  HIBYTE(v163) = -1;
  v128 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v162, (unsigned int *)&v128, a1);
  if (HIDWORD(v143))
  {
    v59 = 0;
    v60 = 0;
    v61 = 12 * HIDWORD(v143);
    while (v60 < HIDWORD(v143))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v142 + v59), a1);
      ++v60;
      v59 += 12;
      if (v61 == v59)
        goto LABEL_52;
    }
LABEL_162:
    __break(0xC471u);
    JUMPOUT(0x195A72764);
  }
LABEL_52:
  v159 = (WTF *)v161;
  v160 = 2;
  if (!v11)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195A726FCLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v127 | 0xD0000000000, *(_BYTE *)(a1 + 304));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 17, (uint64_t)&v148, v101);
    v102 = v148;
    if (v148 != -1)
    {
      v103 = HIDWORD(v160);
      if (HIDWORD(v160) == (_DWORD)v160)
      {
        v104 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, (void *)(HIDWORD(v160) + 1), (unint64_t)&v148);
        v106 = *(_DWORD *)v104;
        v105 = (uint64_t *)(v104 + 4);
        v102 = v106;
        v103 = HIDWORD(v160);
      }
      else
      {
        v105 = &v149;
      }
      v107 = (char *)v159 + 12 * v103;
      *(_DWORD *)v107 = v102;
      *(_QWORD *)(v107 + 4) = *v105;
      ++HIDWORD(v160);
    }
LABEL_54:
    JSC::MacroAssemblerARM64::load64(a1, v13 | 0x800000000, v9);
    JSC::MacroAssemblerARM64::branchTest64(a1, 0, v9, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v162, v62);
    v63 = (int)v162;
    if ((_DWORD)v162 != -1)
    {
      v64 = HIDWORD(v160);
      if (HIDWORD(v160) == (_DWORD)v160)
      {
        v65 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, (void *)(HIDWORD(v160) + 1), (unint64_t)&v162);
        v67 = *(_DWORD *)v65;
        v66 = v65 + 4;
        v63 = v67;
        v64 = HIDWORD(v160);
      }
      else
      {
        v66 = (WTF **)((char *)&v162 + 4);
      }
      v68 = (char *)v159 + 12 * v64;
      *(_DWORD *)v68 = v63;
      *(_QWORD *)(v68 + 4) = *v66;
      ++HIDWORD(v160);
    }
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195A726DCLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, v9 | 0x800000000, *(_BYTE *)(a1 + 272));
    JSC::MacroAssemblerARM64::branchTest64(a1, 1u, 16, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v150, v69);
    v70 = (int)v150;
    if ((_DWORD)v150 != -1)
    {
      v71 = HIDWORD(v160);
      if (HIDWORD(v160) == (_DWORD)v160)
      {
        v72 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, (void *)(HIDWORD(v160) + 1), (unint64_t)&v150);
        v74 = *(_DWORD *)v72;
        v73 = v72 + 4;
        v70 = v74;
        v71 = HIDWORD(v160);
      }
      else
      {
        v73 = (WTF **)((char *)&v150 + 4);
      }
      v75 = (char *)v159 + 12 * v71;
      *(_DWORD *)v75 = v70;
      *(_QWORD *)(v75 + 4) = *v73;
      ++HIDWORD(v160);
    }
    JSC::MacroAssemblerARM64::load64(a1, v9, v9);
    v76 = HIDWORD(v160);
    v150 = (WTF *)v153;
    v151 = 2;
    v152 = HIDWORD(v160);
    if (HIDWORD(v160) < 3)
    {
      v78 = v153;
      if (!HIDWORD(v160))
        goto LABEL_72;
    }
    else
    {
      if (HIDWORD(v160) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x195A7279CLL);
      }
      v77 = 12 * HIDWORD(v160);
      v78 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v160)));
      v151 = (v77 & 0xFFFFFFFC) / 0xC;
      v150 = (WTF *)v78;
      v76 = HIDWORD(v160);
      if (!HIDWORD(v160))
      {
LABEL_72:
        v81 = v152;
        v162 = (WTF *)v165;
        v163 = 2;
        v164 = v152;
        if (v152 < 3)
        {
          v83 = v165;
          if (!v152)
            goto LABEL_79;
        }
        else
        {
          if (v152 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x195A727A4);
          }
          v82 = 12 * v152;
          v83 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v152));
          v163 = (v82 & 0xFFFFFFFC) / 0xC;
          v162 = (WTF *)v83;
          v81 = v152;
          if (!v152)
            goto LABEL_79;
        }
        v84 = v150;
        v85 = (WTF *)((char *)v150 + 12 * v81);
        do
        {
          *(_DWORD *)v83 = *(_DWORD *)v84;
          *(_QWORD *)(v83 + 4) = *(_QWORD *)((char *)v84 + 4);
          v84 = (WTF *)((char *)v84 + 12);
          v83 += 12;
        }
        while (v84 != v85);
        goto LABEL_79;
      }
    }
    v79 = v159;
    v80 = (WTF *)((char *)v159 + 12 * v76);
    do
    {
      *(_DWORD *)v78 = *(_DWORD *)v79;
      *(_QWORD *)(v78 + 4) = *(_QWORD *)((char *)v79 + 4);
      v79 = (WTF *)((char *)v79 + 12);
      v78 += 12;
    }
    while (v79 != v80);
    goto LABEL_72;
  }
  if (*(_BYTE *)(v11 + 3328))
    goto LABEL_54;
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v126);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v109 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v126);
    v109 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v109) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v110 = 69;
  else
    v110 = 65;
  v154 = k;
  v155 = 0;
  v156 = v110;
  v157 = 15;
  v158 = -1;
  v111 = HIDWORD(v160);
  if (k != -1)
  {
    if (HIDWORD(v160) == (_DWORD)v160)
    {
      v112 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, (void *)(HIDWORD(v160) + 1), (unint64_t)&v154);
      v114 = *(_DWORD *)v112;
      v113 = (int *)(v112 + 4);
      v115 = (char *)v159 + 12 * HIDWORD(v160);
      *(_DWORD *)v115 = v114;
    }
    else
    {
      v113 = &v155;
      v115 = (char *)v159 + 12 * HIDWORD(v160);
      *(_DWORD *)v115 = k;
    }
    *(_QWORD *)(v115 + 4) = *(_QWORD *)v113;
    v111 = ++HIDWORD(v160);
  }
  v116 = v111;
  v150 = (WTF *)v153;
  v151 = 2;
  v152 = v111;
  if (v111 < 3)
  {
    v118 = v153;
  }
  else
  {
    if (v111 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x195A727ACLL);
    }
    v117 = 12 * v111;
    v118 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v111));
    v151 = (v117 & 0xFFFFFFFC) / 0xC;
    v150 = (WTF *)v118;
    v116 = HIDWORD(v160);
    v111 = HIDWORD(v160);
  }
  if (v111)
  {
    v119 = v159;
    v120 = (WTF *)((char *)v159 + 12 * v116);
    do
    {
      *(_DWORD *)v118 = *(_DWORD *)v119;
      *(_QWORD *)(v118 + 4) = *(_QWORD *)((char *)v119 + 4);
      v119 = (WTF *)((char *)v119 + 12);
      v118 += 12;
    }
    while (v119 != v120);
  }
  v121 = v152;
  v162 = (WTF *)v165;
  v163 = 2;
  v164 = v152;
  if (v152 >= 3)
  {
    if (v152 < 0x15555556)
    {
      v122 = 12 * v152;
      v123 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v152));
      v163 = (v122 & 0xFFFFFFFC) / 0xC;
      v162 = (WTF *)v123;
      v121 = v152;
      goto LABEL_137;
    }
    __break(0xC471u);
LABEL_173:
    JUMPOUT(0x195A72590);
  }
  v123 = v165;
LABEL_137:
  if (v121)
  {
    v124 = v150;
    v125 = (WTF *)((char *)v150 + 12 * v121);
    do
    {
      *(_DWORD *)v123 = *(_DWORD *)v124;
      *(_QWORD *)(v123 + 4) = *(_QWORD *)((char *)v124 + 4);
      v124 = (WTF *)((char *)v124 + 12);
      v123 += 12;
    }
    while (v124 != v125);
  }
LABEL_79:
  (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t (*)(JSC::JSGlobalObject *, WebCore::JSDOMGlobalObject *, uint64_t, WebCore::HTMLElement *), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v162, a1, operationToJSHTMLElement, v9, v127 | (v13 << 8));
  v87 = v162;
  if (v165 != (_BYTE *)v162 && v162 != 0)
  {
    v162 = 0;
    v163 = 0;
    WTF::fastFree(v87, v86);
  }
  v89 = v150;
  if (v153 != (_BYTE *)v150 && v150 != 0)
  {
    v150 = 0;
    v151 = 0;
    WTF::fastFree(v89, v86);
  }
  v91 = v159;
  if (v161 != (_BYTE *)v159 && v159)
  {
    v159 = 0;
    LODWORD(v160) = 0;
    WTF::fastFree(v91, v86);
  }
  for (m = *(_DWORD *)(a1 + 200); (signed int)m < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = m)
  {
    if (m + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v126);
      m = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + m) = -721215457;
    m = *(_DWORD *)(a1 + 200) + 4;
  }
  v93 = m;
  if (m + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v126);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v94 = 69;
  else
    v94 = 65;
  v162 = (WTF *)m;
  LOBYTE(v163) = v94;
  *(_WORD *)((char *)&v163 + 1) = 15;
  HIBYTE(v163) = -1;
  if (HIDWORD(v146))
  {
    v95 = 0;
    v96 = 0;
    v97 = 12 * HIDWORD(v146);
    do
    {
      if (v96 >= HIDWORD(v146))
      {
        __break(0xC471u);
        JUMPOUT(0x195A7276CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v145 + v95), a1);
      ++v96;
      v95 += 12;
    }
    while (v97 != v95);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, 2uLL, (char)v9);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v162, a1);
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
  *a3 = a3 + 2;
  a3[1] = 2;
  v99 = v142;
  if (v144 != (_BYTE *)v142 && v142)
  {
    v142 = 0;
    LODWORD(v143) = 0;
    WTF::fastFree(v99, v98);
  }
  result = v145;
  if (v147 != (_BYTE *)v145)
  {
    if (v145)
    {
      v145 = 0;
      LODWORD(v146) = 0;
      return (WTF *)WTF::fastFree(result, v98);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>> WebCore::DOMJIT::checkDOM<WebCore::DocumentFragment>(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195A7289CLL);
  }
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v4 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_9;
  v6 = *v4 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v6, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branch32(a1, 1u, 17, 251, (uint64_t)&v8);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 2;
  v7 = v8;
  if (v8 != -1)
  {
    *(_QWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>> WebCore::DOMJIT::checkDOM<WebCore::Element>(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195A72990);
  }
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v4 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_9;
  v6 = *v4 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v6, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branch32(a1, 1u, 17, 241, (uint64_t)&v8);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 2;
  v7 = v8;
  if (v8 != -1)
  {
    *(_QWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>> WebCore::DOMJIT::checkDOM<WebCore::Event>(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195A72A84);
  }
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v4 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_9;
  v6 = *v4 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v6, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branch32(a1, 1u, 17, 239, (uint64_t)&v8);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 2;
  v7 = v8;
  if (v8 != -1)
  {
    *(_QWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>> WebCore::DOMJIT::checkDOM<WebCore::Node>(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195A72B70);
  }
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v4 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_9;
  v6 = *v4 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v6, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branch32(a1, 3u, 17, 240, (uint64_t)&v8);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 2;
  v7 = v8;
  if (v8 != -1)
  {
    *(_QWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
}

WTF *WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::DOMJIT::CallDOMGetterSnippet,WTF::RawPtrTraits<JSC::DOMJIT::CallDOMGetterSnippet>,WTF::DefaultRefDerefTraits<JSC::DOMJIT::CallDOMGetterSnippet>> WebCore::createCallDOMGetterForOffsetAccess<WebCore::Node,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *)>(long,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),WebCore::IsContainerGuardRequirement,std::optional<unsigned long>)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF *a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v13;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  int v24;
  char *v25;
  int8x8_t v26;
  int v27;
  unsigned int v28;
  char *v29;
  int *v30;
  int v31;
  char *v32;
  uint64_t v33;
  int8x8_t v34;
  int v35;
  unsigned int v36;
  char *v37;
  _QWORD *v38;
  int v39;
  char *v40;
  char v41;
  int8x8_t v42;
  int v43;
  unsigned int v44;
  char *v45;
  _QWORD *v46;
  int v47;
  char *v48;
  unsigned int v49;
  int v50;
  _BYTE *v51;
  WTF *v52;
  WTF *v53;
  unsigned int v54;
  int v55;
  _BYTE *v56;
  WTF *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  WTF *v62;
  WTF *v64;
  unsigned int i;
  unsigned int v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  WTF *result;
  int8x8_t v73;
  int v74;
  unsigned int v75;
  char *v76;
  uint64_t *v77;
  int v78;
  char *v79;
  JSC::AssemblerBuffer *v80;
  unsigned int v81;
  char v82;
  unsigned int v83;
  char *v84;
  int *v85;
  int v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  _BYTE *v91;
  WTF *v92;
  WTF *v93;
  unsigned int v94;
  int v95;
  _BYTE *v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  JSC::AssemblerBuffer *v102;
  WTF *v103;
  WTF *v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[28];
  int v113;
  uint64_t v114;
  WTF *v115;
  unsigned int v116;
  unsigned int v117;
  _BYTE v118[28];
  int v119;
  int v120;
  char v121;
  __int16 v122;
  char v123;
  WTF *v124;
  uint64_t v125;
  _BYTE v126[24];
  WTF *v127;
  unsigned int v128;
  unsigned int v129;
  _BYTE v130[32];

  v10 = *(_DWORD *)(a3 + 28);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195A73648);
  }
  v13 = *(unsigned __int8 **)(a3 + 16);
  if (*((_DWORD *)v13 + 1) != 2)
    goto LABEL_125;
  if (v10 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A73650);
  }
  if (*((_DWORD *)v13 + 5))
    goto LABEL_125;
  if (v10 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A73658);
  }
  if (*((_DWORD *)v13 + 9))
  {
LABEL_125:
    v80 = (JSC::AssemblerBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_126;
  }
  if (!*(_DWORD *)(a3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x195A73660);
  }
  v4 = a2;
  v7 = *v13;
  v15 = v13[16];
  v8 = v13[32];
  v16 = **(_BYTE **)(a3 + 32);
  v17 = v16;
  v18 = *((_QWORD *)v13 + 5);
  v110 = (WTF *)v112;
  v9 = 2;
  v111 = 2;
  JSC::MacroAssemblerARM64::load64(a2, v15 | 0x1800000000, v16);
  if (!*(_DWORD *)(a1 + 16))
  {
    if (!*(_BYTE *)(v4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195A733E0);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 296) + 208) &= ~*(_DWORD *)(v4 + 320);
    JSC::MacroAssemblerARM64::load16(v4, v17 | 0x1C00000000, *(_BYTE *)(v4 + 304));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, v4, 0, 17, (uint64_t)&v108, v19);
    v20 = v108;
    if (v108 != -1)
    {
      v21 = HIDWORD(v111);
      if (HIDWORD(v111) == (_DWORD)v111)
      {
        v22 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, (void *)(HIDWORD(v111) + 1), (unint64_t)&v108);
        v24 = *(_DWORD *)v22;
        v23 = (uint64_t *)(v22 + 4);
        v20 = v24;
        v21 = HIDWORD(v111);
      }
      else
      {
        v23 = &v109;
      }
      v25 = (char *)v110 + 12 * v21;
      *(_DWORD *)v25 = v20;
      *(_QWORD *)(v25 + 4) = *v23;
      ++HIDWORD(v111);
    }
  }
  JSC::MacroAssemblerARM64::load64(v4, v17 | (*(_QWORD *)(a1 + 24) << 32), v17);
  if (*(_BYTE *)(a1 + 40))
    JSC::MacroAssemblerARM64::and64(v4, *(JSC::ARM64LogicalImmediate **)(a1 + 32), (char)v17);
  JSC::MacroAssemblerARM64::branchTest64(v4, 0, v17, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v106, v26);
  v27 = v106;
  if (v106 != -1)
  {
    v28 = HIDWORD(v111);
    if (HIDWORD(v111) == (_DWORD)v111)
    {
      v29 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, (void *)(HIDWORD(v111) + 1), (unint64_t)&v106);
      v31 = *(_DWORD *)v29;
      v30 = (int *)(v29 + 4);
      v27 = v31;
      v28 = HIDWORD(v111);
    }
    else
    {
      v30 = &v107;
    }
    v32 = (char *)v110 + 12 * v28;
    *(_DWORD *)v32 = v27;
    *(_QWORD *)(v32 + 4) = *(_QWORD *)v30;
    ++HIDWORD(v111);
  }
  v105 = v17;
  v103 = a4;
  v104 = (WTF *)v112;
  v33 = *(_QWORD *)(a1 + 48);
  a4 = (WTF *)v126;
  v124 = (WTF *)v126;
  v125 = 2;
  if (v18)
  {
    if (*(_BYTE *)(v18 + 3328))
      goto LABEL_24;
    v6 = v33;
    v80 = (JSC::AssemblerBuffer *)(v4 + 56);
    v5 = *(_DWORD *)(v4 + 200);
    if (v5 >= *(_DWORD *)(v4 + 52))
    {
LABEL_88:
      v81 = v5;
      if ((v5 + 4) > *(_DWORD *)(v4 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80);
        v81 = *(_DWORD *)(v4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v4 + 56) + v81) = 335544320;
      *(_DWORD *)(v4 + 200) += 4;
      if (*(_BYTE *)(v4 + 328))
        v82 = 69;
      else
        v82 = 65;
      v119 = v5;
      v120 = 0;
      v121 = v82;
      v122 = 15;
      v123 = -1;
      v83 = HIDWORD(v125);
      if (v5 == -1)
      {
        v88 = v6;
      }
      else
      {
        if (HIDWORD(v125) == (_DWORD)v125)
        {
          v84 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, (void *)(HIDWORD(v125) + 1), (unint64_t)&v119);
          v86 = *(_DWORD *)v84;
          v85 = (int *)(v84 + 4);
          v87 = (char *)v124 + 12 * HIDWORD(v125);
          *(_DWORD *)v87 = v86;
        }
        else
        {
          v85 = &v120;
          v87 = (char *)v124 + 12 * HIDWORD(v125);
          *(_DWORD *)v87 = v5;
        }
        v88 = v6;
        *(_QWORD *)(v87 + 4) = *(_QWORD *)v85;
        v83 = ++HIDWORD(v125);
      }
      v89 = v83;
      v115 = (WTF *)v118;
      v116 = 2;
      v117 = v83;
      if (v83 < 3)
      {
        v91 = v118;
      }
      else
      {
        if (v83 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x195A73678);
        }
        v90 = 12 * v83;
        v91 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v83));
        v116 = (v90 & 0xFFFFFFFC) / 0xC;
        v115 = (WTF *)v91;
        v89 = HIDWORD(v125);
        v83 = HIDWORD(v125);
      }
      if (v83)
      {
        v92 = v124;
        v93 = (WTF *)((char *)v124 + 12 * v89);
        do
        {
          *(_DWORD *)v91 = *(_DWORD *)v92;
          *(_QWORD *)(v91 + 4) = *(_QWORD *)((char *)v92 + 4);
          v92 = (WTF *)((char *)v92 + 12);
          v91 += 12;
        }
        while (v92 != v93);
      }
      v94 = v117;
      v127 = (WTF *)v130;
      v128 = 2;
      v129 = v117;
      v41 = v7;
      if (v117 < 3)
      {
        v96 = v130;
      }
      else
      {
        if (v117 >= 0x15555556)
          goto LABEL_139;
        v95 = 12 * v117;
        v96 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v117));
        v128 = (v95 & 0xFFFFFFFC) / 0xC;
        v127 = (WTF *)v96;
        v94 = v117;
      }
      if (v94)
      {
        v97 = v115;
        v98 = (WTF *)((char *)v115 + 12 * v94);
        do
        {
          *(_DWORD *)v96 = *(_DWORD *)v97;
          *(_QWORD *)(v96 + 4) = *(_QWORD *)((char *)v97 + 4);
          v97 = (WTF *)((char *)v97 + 12);
          v96 += 12;
        }
        while (v97 != v98);
      }
      (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v127, v4, v88, v7, v8 | (v105 << 8));
      v99 = v127;
      if (v130 != (_BYTE *)v127 && v127 != 0)
      {
        v127 = 0;
        v128 = 0;
        WTF::fastFree(v99, v59);
      }
      v62 = v115;
      if (v118 != (_BYTE *)v115 && v115 != 0)
        goto LABEL_58;
      goto LABEL_59;
    }
LABEL_126:
    v102 = v80;
    do
    {
      if ((v5 + 4) > *(_DWORD *)(v4 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v102);
        v5 = *(_DWORD *)(v4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v4 + 56) + v5) = -721215457;
      v5 = *(_DWORD *)(v4 + 200) + 4;
      *(_DWORD *)(v4 + 200) = v5;
      v80 = v102;
    }
    while (v5 < *(_DWORD *)(v4 + 52));
    goto LABEL_88;
  }
  if (!*(_BYTE *)(v4 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x195A735D0);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 296) + 208) &= ~*(_DWORD *)(v4 + 320);
  JSC::MacroAssemblerARM64::load8(v4, v8 | 0xD0000000000, *(_BYTE *)(v4 + 304));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v4, 0, 17, (uint64_t)&v113, v73);
  v74 = v113;
  if (v113 != -1)
  {
    v75 = HIDWORD(v125);
    if (HIDWORD(v125) == (_DWORD)v125)
    {
      v76 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, (void *)(HIDWORD(v125) + 1), (unint64_t)&v113);
      v78 = *(_DWORD *)v76;
      v77 = (uint64_t *)(v76 + 4);
      v74 = v78;
      v75 = HIDWORD(v125);
    }
    else
    {
      v77 = &v114;
    }
    v79 = (char *)v124 + 12 * v75;
    *(_DWORD *)v79 = v74;
    *(_QWORD *)(v79 + 4) = *v77;
    ++HIDWORD(v125);
  }
LABEL_24:
  JSC::MacroAssemblerARM64::load64(v4, v17 | 0x800000000, v7);
  JSC::MacroAssemblerARM64::branchTest64(v4, 0, v7, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v127, v34);
  v35 = (int)v127;
  if ((_DWORD)v127 != -1)
  {
    v36 = HIDWORD(v125);
    if (HIDWORD(v125) == (_DWORD)v125)
    {
      v37 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, (void *)(HIDWORD(v125) + 1), (unint64_t)&v127);
      v39 = *(_DWORD *)v37;
      v38 = v37 + 4;
      v35 = v39;
      v36 = HIDWORD(v125);
    }
    else
    {
      v38 = (WTF **)((char *)&v127 + 4);
    }
    v40 = (char *)v124 + 12 * v36;
    *(_DWORD *)v40 = v35;
    *(_QWORD *)(v40 + 4) = *v38;
    ++HIDWORD(v125);
  }
  if (!*(_BYTE *)(v4 + 212))
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x195A732B0);
  }
  v41 = v7;
  *(_DWORD *)(*(_QWORD *)(v4 + 264) + 208) &= ~*(_DWORD *)(v4 + 288);
  JSC::MacroAssemblerARM64::load64(v4, v7 | 0x800000000, *(_BYTE *)(v4 + 272));
  JSC::MacroAssemblerARM64::branchTest64(v4, 1u, 16, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v115, v42);
  v43 = (int)v115;
  if ((_DWORD)v115 != -1)
  {
    v44 = HIDWORD(v125);
    if (HIDWORD(v125) == (_DWORD)v125)
    {
      v45 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, (void *)(HIDWORD(v125) + 1), (unint64_t)&v115);
      v47 = *(_DWORD *)v45;
      v46 = v45 + 4;
      v43 = v47;
      v44 = HIDWORD(v125);
    }
    else
    {
      v46 = (WTF **)((char *)&v115 + 4);
    }
    v48 = (char *)v124 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *v46;
    ++HIDWORD(v125);
  }
  JSC::MacroAssemblerARM64::load64(v4, v7, v7);
  v49 = HIDWORD(v125);
  v115 = (WTF *)v118;
  v116 = 2;
  v117 = HIDWORD(v125);
  if (HIDWORD(v125) < 3)
  {
    v51 = v118;
    if (!HIDWORD(v125))
      goto LABEL_42;
    goto LABEL_40;
  }
  if (HIDWORD(v125) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x195A73668);
  }
  v50 = 12 * HIDWORD(v125);
  v51 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v125)));
  v116 = (v50 & 0xFFFFFFFC) / 0xC;
  v115 = (WTF *)v51;
  v49 = HIDWORD(v125);
  if (HIDWORD(v125))
  {
LABEL_40:
    v52 = v124;
    v53 = (WTF *)((char *)v124 + 12 * v49);
    do
    {
      *(_DWORD *)v51 = *(_DWORD *)v52;
      *(_QWORD *)(v51 + 4) = *(_QWORD *)((char *)v52 + 4);
      v52 = (WTF *)((char *)v52 + 12);
      v51 += 12;
    }
    while (v52 != v53);
  }
LABEL_42:
  v54 = v117;
  v127 = (WTF *)v130;
  v128 = 2;
  v129 = v117;
  if (v117 < 3)
  {
    v56 = v130;
    if (!v117)
      goto LABEL_49;
LABEL_47:
    v57 = v115;
    v58 = (WTF *)((char *)v115 + 12 * v54);
    do
    {
      *(_DWORD *)v56 = *(_DWORD *)v57;
      *(_QWORD *)(v56 + 4) = *(_QWORD *)((char *)v57 + 4);
      v57 = (WTF *)((char *)v57 + 12);
      v56 += 12;
    }
    while (v57 != v58);
    goto LABEL_49;
  }
  if (v117 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x195A73670);
  }
  v55 = 12 * v117;
  v56 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v117));
  v128 = (v55 & 0xFFFFFFFC) / 0xC;
  v127 = (WTF *)v56;
  v54 = v117;
  if (v117)
    goto LABEL_47;
LABEL_49:
  (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v127, v4, v33, v7, v8 | (v105 << 8));
  v60 = v127;
  if (v130 != (_BYTE *)v127 && v127 != 0)
  {
    v127 = 0;
    v128 = 0;
    WTF::fastFree(v60, v59);
  }
  v62 = v115;
  if (v118 != (_BYTE *)v115 && v115 != 0)
  {
LABEL_58:
    v115 = 0;
    v116 = 0;
    WTF::fastFree(v62, v59);
  }
LABEL_59:
  v64 = v124;
  if (a4 != v124 && v124)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree(v64, v59);
  }
  for (i = *(_DWORD *)(v4 + 200); (signed int)i < *(_DWORD *)(v4 + 52); *(_DWORD *)(v4 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(v4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56));
      i = *(_DWORD *)(v4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + i) = -721215457;
    i = *(_DWORD *)(v4 + 200) + 4;
  }
  v66 = i;
  if (i + 4 > *(_DWORD *)(v4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56));
    v66 = *(_DWORD *)(v4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 56) + v66) = 335544320;
  *(_DWORD *)(v4 + 200) += 4;
  if (*(_BYTE *)(v4 + 328))
    v67 = 69;
  else
    v67 = 65;
  v127 = (WTF *)i;
  LOBYTE(v128) = v67;
  *(_WORD *)((char *)&v128 + 1) = 15;
  HIBYTE(v128) = -1;
  if (HIDWORD(v111))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v111);
    do
    {
      if (v69 >= HIDWORD(v111))
      {
        __break(0xC471u);
        JUMPOUT(0x195A73640);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v110 + v68), v4);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)v4, 2uLL, v41);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v127, v4);
  *((_QWORD *)v103 + 3) = 0;
  *((_QWORD *)v103 + 4) = 0;
  *((_QWORD *)v103 + 2) = 0;
  *(_QWORD *)v103 = (char *)v103 + 16;
  *((_QWORD *)v103 + 1) = v9;
  result = v110;
  if (v104 != v110)
  {
    if (v110)
    {
      v110 = 0;
      LODWORD(v111) = 0;
      return (WTF *)WTF::fastFree(result, v71);
    }
  }
  return result;
}

WTF *WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WTF::Ref<JSC::DOMJIT::CallDOMGetterSnippet,WTF::RawPtrTraits<JSC::DOMJIT::CallDOMGetterSnippet>,WTF::DefaultRefDerefTraits<JSC::DOMJIT::CallDOMGetterSnippet>> WebCore::createCallDOMGetterForOffsetAccess<WebCore::ContainerNode,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *)>(long,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),WebCore::IsContainerGuardRequirement,std::optional<unsigned long>)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  int *v19;
  int v20;
  char *v21;
  uint64_t v22;
  int8x8_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  _QWORD *v27;
  int v28;
  char *v29;
  int8x8_t v30;
  int v31;
  unsigned int v32;
  char *v33;
  _QWORD *v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  _BYTE *v39;
  WTF *v40;
  WTF *v41;
  unsigned int v42;
  int v43;
  _BYTE *v44;
  WTF *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  BOOL v49;
  WTF *v51;
  WTF *v53;
  unsigned int j;
  unsigned int v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  WTF *result;
  int8x8_t v62;
  int v63;
  unsigned int v64;
  char *v65;
  uint64_t *v66;
  int v67;
  char *v68;
  int8x8_t v69;
  int v70;
  unsigned int v71;
  char *v72;
  uint64_t *v73;
  int v74;
  JSC::AssemblerBuffer *v75;
  int i;
  unsigned int v77;
  char v78;
  unsigned int v79;
  char *v80;
  int *v81;
  int v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  int v87;
  _BYTE *v88;
  WTF *v89;
  WTF *v90;
  unsigned int v91;
  int v92;
  _BYTE *v93;
  WTF *v94;
  WTF *v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  _BYTE v102[28];
  int v103;
  uint64_t v104;
  WTF *v105;
  unsigned int v106;
  unsigned int v107;
  _BYTE v108[28];
  int v109;
  int v110;
  char v111;
  __int16 v112;
  char v113;
  WTF *v114;
  uint64_t v115;
  _BYTE v116[24];
  WTF *v117;
  unsigned int v118;
  unsigned int v119;
  _BYTE v120[32];

  v4 = *(_DWORD *)(a3 + 28);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74118);
  }
  v7 = *(unsigned __int8 **)(a3 + 16);
  if (*((_DWORD *)v7 + 1) != 2)
    goto LABEL_115;
  if (v4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74120);
  }
  if (*((_DWORD *)v7 + 5))
    goto LABEL_115;
  if (v4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74128);
  }
  if (*((_DWORD *)v7 + 9))
  {
LABEL_115:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_116;
  }
  if (!*(_DWORD *)(a3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x195A74130);
  }
  v10 = *v7;
  v11 = v7[16];
  v12 = v7[32];
  v13 = **(unsigned __int8 **)(a3 + 32);
  v14 = *((_QWORD *)v7 + 5);
  v100 = (WTF *)v102;
  v101 = 2;
  JSC::MacroAssemblerARM64::load64(a2, v11 | 0x1800000000, v13);
  if (!*(_DWORD *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195A740A4);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load16(a2, v13 | 0x1C00000000, *(_BYTE *)(a2 + 304));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, a2, 0, 17, (uint64_t)&v98, v69);
    v70 = v98;
    if (v98 != -1)
    {
      v71 = HIDWORD(v101);
      if (HIDWORD(v101) == (_DWORD)v101)
      {
        v72 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v98);
        v74 = *(_DWORD *)v72;
        v73 = (uint64_t *)(v72 + 4);
        v70 = v74;
        v71 = HIDWORD(v101);
      }
      else
      {
        v73 = &v99;
      }
      v85 = (char *)v100 + 12 * v71;
      *(_DWORD *)v85 = v70;
      *(_QWORD *)(v85 + 4) = *v73;
      ++HIDWORD(v101);
    }
  }
  JSC::MacroAssemblerARM64::load64(a2, v13 | (*(_QWORD *)(a1 + 24) << 32), v13);
  if (*(_BYTE *)(a1 + 40))
    JSC::MacroAssemblerARM64::and64(a2, *(JSC::ARM64LogicalImmediate **)(a1 + 32), (char)v13);
  JSC::MacroAssemblerARM64::branchTest64(a2, 0, v13, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v96, v15);
  v16 = v96;
  if (v96 != -1)
  {
    v17 = HIDWORD(v101);
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v18 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v96);
      v20 = *(_DWORD *)v18;
      v19 = (int *)(v18 + 4);
      v16 = v20;
      v17 = HIDWORD(v101);
    }
    else
    {
      v19 = &v97;
    }
    v21 = (char *)v100 + 12 * v17;
    *(_DWORD *)v21 = v16;
    *(_QWORD *)(v21 + 4) = *(_QWORD *)v19;
    ++HIDWORD(v101);
  }
  v22 = *(_QWORD *)(a1 + 48);
  v114 = (WTF *)v116;
  v115 = 2;
  if (!v14)
  {
    if (*(_BYTE *)(a2 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
      JSC::MacroAssemblerARM64::load8(a2, v12 | 0xD0000000000, *(_BYTE *)(a2 + 304));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, 17, (uint64_t)&v103, v62);
      v63 = v103;
      if (v103 != -1)
      {
        v64 = HIDWORD(v115);
        if (HIDWORD(v115) == (_DWORD)v115)
        {
          v65 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v103);
          v67 = *(_DWORD *)v65;
          v66 = (uint64_t *)(v65 + 4);
          v63 = v67;
          v64 = HIDWORD(v115);
        }
        else
        {
          v66 = &v104;
        }
        v68 = (char *)v114 + 12 * v64;
        *(_DWORD *)v68 = v63;
        *(_QWORD *)(v68 + 4) = *v66;
        ++HIDWORD(v115);
      }
LABEL_18:
      JSC::MacroAssemblerARM64::load64(a2, v13 | 0x800000000, v10);
      JSC::MacroAssemblerARM64::branchTest64(a2, 0, v10, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v117, v23);
      v24 = (int)v117;
      if ((_DWORD)v117 != -1)
      {
        v25 = HIDWORD(v115);
        if (HIDWORD(v115) == (_DWORD)v115)
        {
          v26 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v117);
          v28 = *(_DWORD *)v26;
          v27 = v26 + 4;
          v24 = v28;
          v25 = HIDWORD(v115);
        }
        else
        {
          v27 = (WTF **)((char *)&v117 + 4);
        }
        v29 = (char *)v114 + 12 * v25;
        *(_DWORD *)v29 = v24;
        *(_QWORD *)(v29 + 4) = *v27;
        ++HIDWORD(v115);
      }
      if (*(_BYTE *)(a2 + 212))
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
        JSC::MacroAssemblerARM64::load64(a2, v10 | 0x800000000, *(_BYTE *)(a2 + 272));
        JSC::MacroAssemblerARM64::branchTest64(a2, 1u, 16, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v105, v30);
        v31 = (int)v105;
        if ((_DWORD)v105 != -1)
        {
          v32 = HIDWORD(v115);
          if (HIDWORD(v115) == (_DWORD)v115)
          {
            v33 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v105);
            v35 = *(_DWORD *)v33;
            v34 = v33 + 4;
            v31 = v35;
            v32 = HIDWORD(v115);
          }
          else
          {
            v34 = (WTF **)((char *)&v105 + 4);
          }
          v36 = (char *)v114 + 12 * v32;
          *(_DWORD *)v36 = v31;
          *(_QWORD *)(v36 + 4) = *v34;
          ++HIDWORD(v115);
        }
        JSC::MacroAssemblerARM64::load64(a2, v10, v10);
        v37 = HIDWORD(v115);
        v105 = (WTF *)v108;
        v106 = 2;
        v107 = HIDWORD(v115);
        if (HIDWORD(v115) < 3)
        {
          v39 = v108;
          if (!HIDWORD(v115))
            goto LABEL_36;
        }
        else
        {
          if (HIDWORD(v115) >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x195A74138);
          }
          v38 = 12 * HIDWORD(v115);
          v39 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v115)));
          v106 = (v38 & 0xFFFFFFFC) / 0xC;
          v105 = (WTF *)v39;
          v37 = HIDWORD(v115);
          if (!HIDWORD(v115))
          {
LABEL_36:
            v42 = v107;
            v117 = (WTF *)v120;
            v118 = 2;
            v119 = v107;
            if (v107 < 3)
            {
              v44 = v120;
              if (!v107)
              {
LABEL_43:
                (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v117, a2, v22, v10, v12 | (v13 << 8));
                v48 = v117;
                v49 = v120 == (_BYTE *)v117;
                goto LABEL_44;
              }
            }
            else
            {
              if (v107 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x195A74140);
              }
              v43 = 12 * v107;
              v44 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v107));
              v118 = (v43 & 0xFFFFFFFC) / 0xC;
              v117 = (WTF *)v44;
              v42 = v107;
              if (!v107)
                goto LABEL_43;
            }
            v45 = v105;
            v46 = (WTF *)((char *)v105 + 12 * v42);
            do
            {
              *(_DWORD *)v44 = *(_DWORD *)v45;
              *(_QWORD *)(v44 + 4) = *(_QWORD *)((char *)v45 + 4);
              v45 = (WTF *)((char *)v45 + 12);
              v44 += 12;
            }
            while (v45 != v46);
            goto LABEL_43;
          }
        }
        v40 = v114;
        v41 = (WTF *)((char *)v114 + 12 * v37);
        do
        {
          *(_DWORD *)v39 = *(_DWORD *)v40;
          *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)v40 + 4);
          v40 = (WTF *)((char *)v40 + 12);
          v39 += 12;
        }
        while (v40 != v41);
        goto LABEL_36;
      }
LABEL_130:
      __break(0xC471u);
      JUMPOUT(0x195A73E94);
    }
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x195A74084);
  }
  if (*(_BYTE *)(v14 + 3328))
    goto LABEL_18;
  v75 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); v75 = (JSC::AssemblerBuffer *)(a2 + 56))
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = i;
  }
  v77 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75);
    v77 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v77) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v78 = 69;
  else
    v78 = 65;
  v109 = i;
  v110 = 0;
  v111 = v78;
  v112 = 15;
  v113 = -1;
  v79 = HIDWORD(v115);
  if (i == -1)
  {
    v84 = v22;
  }
  else
  {
    if (HIDWORD(v115) == (_DWORD)v115)
    {
      v80 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v109);
      v82 = *(_DWORD *)v80;
      v81 = (int *)(v80 + 4);
      v83 = (char *)v114 + 12 * HIDWORD(v115);
      *(_DWORD *)v83 = v82;
    }
    else
    {
      v81 = &v110;
      v83 = (char *)v114 + 12 * HIDWORD(v115);
      *(_DWORD *)v83 = i;
    }
    v84 = v22;
    *(_QWORD *)(v83 + 4) = *(_QWORD *)v81;
    v79 = ++HIDWORD(v115);
  }
  v86 = v79;
  v105 = (WTF *)v108;
  v106 = 2;
  v107 = v79;
  if (v79 < 3)
  {
    v88 = v108;
  }
  else
  {
    if (v79 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x195A74148);
    }
    v87 = 12 * v79;
    v88 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v79));
    v106 = (v87 & 0xFFFFFFFC) / 0xC;
    v105 = (WTF *)v88;
    v86 = HIDWORD(v115);
    v79 = HIDWORD(v115);
  }
  if (v79)
  {
    v89 = v114;
    v90 = (WTF *)((char *)v114 + 12 * v86);
    do
    {
      *(_DWORD *)v88 = *(_DWORD *)v89;
      *(_QWORD *)(v88 + 4) = *(_QWORD *)((char *)v89 + 4);
      v89 = (WTF *)((char *)v89 + 12);
      v88 += 12;
    }
    while (v89 != v90);
  }
  v91 = v107;
  v117 = (WTF *)v120;
  v118 = 2;
  v119 = v107;
  if (v107 < 3)
  {
    v93 = v120;
  }
  else
  {
    if (v107 >= 0x15555556)
      goto LABEL_130;
    v92 = 12 * v107;
    v93 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v107));
    v118 = (v92 & 0xFFFFFFFC) / 0xC;
    v117 = (WTF *)v93;
    v91 = v107;
  }
  if (v91)
  {
    v94 = v105;
    v95 = (WTF *)((char *)v105 + 12 * v91);
    do
    {
      *(_DWORD *)v93 = *(_DWORD *)v94;
      *(_QWORD *)(v93 + 4) = *(_QWORD *)((char *)v94 + 4);
      v94 = (WTF *)((char *)v94 + 12);
      v93 += 12;
    }
    while (v94 != v95);
  }
  (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v117, a2, v84, v10, v12 | (v13 << 8));
  v48 = v117;
  v49 = v120 == (_BYTE *)v117;
LABEL_44:
  if (!v49 && v48 != 0)
  {
    v117 = 0;
    v118 = 0;
    WTF::fastFree(v48, v47);
  }
  v51 = v105;
  if (v108 != (_BYTE *)v105 && v105 != 0)
  {
    v105 = 0;
    v106 = 0;
    WTF::fastFree(v51, v47);
  }
  v53 = v114;
  if (v116 != (_BYTE *)v114 && v114)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree(v53, v47);
  }
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v55 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v55 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v55) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v56 = 69;
  else
    v56 = 65;
  v117 = (WTF *)j;
  LOBYTE(v118) = v56;
  *(_WORD *)((char *)&v118 + 1) = 15;
  HIBYTE(v118) = -1;
  if (HIDWORD(v101))
  {
    v57 = 0;
    v58 = 0;
    v59 = 12 * HIDWORD(v101);
    do
    {
      if (v58 >= HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x195A74110);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v100 + v57), a2);
      ++v58;
      v57 += 12;
    }
    while (v59 != v57);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a2, 2uLL, (char)v10);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v117, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[2] = 0;
  *a4 = a4 + 2;
  a4[1] = 2;
  result = v100;
  if (v102 != (_BYTE *)v100)
  {
    if (v100)
    {
      v100 = 0;
      LODWORD(v101) = 0;
      return (WTF *)WTF::fastFree(result, v60);
    }
  }
  return result;
}

double WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WebCore::compileNodeNodeTypeAttribute(void)::$_0>::run@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  char *v5;
  char v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  double result;

  v3 = *(_DWORD *)(a2 + 28);
  if (!v3)
    goto LABEL_11;
  v5 = *(char **)(a2 + 16);
  if (*((_DWORD *)v5 + 1) != 2)
  {
LABEL_10:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_11;
  }
  if (v3 <= 1)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x195A7428CLL);
  }
  if (*((_DWORD *)v5 + 5))
    goto LABEL_10;
  v7 = *v5;
  v8 = *v5;
  JSC::MacroAssemblerARM64::load8((uint64_t)a1, v5[16] | 0x500000000, *v5);
  v9 = a1[50];
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
    v9 = a1[50];
  }
  v10 = v7 & 0x1F;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = v8 | (32 * v10) | 0x12000C00;
  v11 = a1[50];
  v12 = v11 + 4;
  a1[50] = v11 + 4;
  if ((v11 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v10 | (v10 << 16) | 0xAA000360;
  a1[50] += 4;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
  *a3 = a3 + 2;
  *(_QWORD *)&result = 2;
  a3[1] = 2;
  return result;
}

WTF *WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),WebCore::compileNodeOwnerDocumentAttribute(void)::$_0>::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  char *v17;
  uint64_t *v18;
  int v19;
  char *v20;
  int8x8_t v21;
  int v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  int8x8_t v28;
  int v29;
  unsigned int v30;
  char *v31;
  _QWORD *v32;
  int v33;
  char *v34;
  unsigned int v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  unsigned int v40;
  int v41;
  _BYTE *v42;
  WTF *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  WTF *v48;
  WTF *v50;
  unsigned int j;
  unsigned int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  WTF *result;
  int8x8_t v59;
  int v60;
  unsigned int v61;
  char *v62;
  uint64_t *v63;
  int v64;
  char *v65;
  int i;
  unsigned int v67;
  char v68;
  unsigned int v69;
  char *v70;
  int *v71;
  int v72;
  char *v73;
  unsigned int v74;
  int v75;
  _BYTE *v76;
  WTF *v77;
  WTF *v78;
  unsigned int v79;
  int v80;
  _BYTE *v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[28];
  int v93;
  uint64_t v94;
  WTF *v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE v98[28];
  int v99;
  int v100;
  char v101;
  __int16 v102;
  char v103;
  WTF *v104;
  uint64_t v105;
  _BYTE v106[24];
  WTF *v107;
  unsigned int v108;
  unsigned int v109;
  _BYTE v110[32];

  v3 = *(_DWORD *)(a2 + 28);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CB0);
  }
  v6 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v6 + 1) != 2)
    goto LABEL_114;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CB8);
  }
  if (*((_DWORD *)v6 + 5))
    goto LABEL_114;
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CC0);
  }
  if (*((_DWORD *)v6 + 9))
  {
LABEL_114:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_115;
  }
  v7 = *(_DWORD *)(a2 + 44);
  if (v7 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CC8);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CD0);
  }
  v9 = *v6;
  v10 = v6[16];
  v87 = v6[32];
  v11 = *((_QWORD *)v6 + 5);
  v12 = *(char **)(a2 + 32);
  v13 = *v12;
  v14 = v12[1];
  JSC::MacroAssemblerARM64::load64(a1, v10 | 0x1800000000, *v12);
  JSC::MacroAssemblerARM64::load64(a1, v13 | 0x2800000000, v14);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x800000000, v14);
  v90 = (WTF *)v92;
  v91 = 2;
  JSC::MacroAssemblerARM64::branch64(a1, 0, (char)v13, (char)v14, (uint64_t)&v88);
  v15 = v88;
  if (v88 != -1)
  {
    v16 = HIDWORD(v91);
    if (HIDWORD(v91) == (_DWORD)v91)
    {
      v17 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, (void *)(HIDWORD(v91) + 1), (unint64_t)&v88);
      v19 = *(_DWORD *)v17;
      v18 = (uint64_t *)(v17 + 4);
      v15 = v19;
      v16 = HIDWORD(v91);
    }
    else
    {
      v18 = &v89;
    }
    v20 = (char *)v90 + 12 * v16;
    *(_DWORD *)v20 = v15;
    *(_QWORD *)(v20 + 4) = *v18;
    ++HIDWORD(v91);
  }
  v104 = (WTF *)v106;
  v105 = 2;
  if (!v11)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v87 | 0xD0000000000, *(_BYTE *)(a1 + 304));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 17, (uint64_t)&v93, v59);
      v60 = v93;
      if (v93 != -1)
      {
        v61 = HIDWORD(v105);
        if (HIDWORD(v105) == (_DWORD)v105)
        {
          v62 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v93);
          v64 = *(_DWORD *)v62;
          v63 = (uint64_t *)(v62 + 4);
          v60 = v64;
          v61 = HIDWORD(v105);
        }
        else
        {
          v63 = &v94;
        }
        v65 = (char *)v104 + 12 * v61;
        *(_DWORD *)v65 = v60;
        *(_QWORD *)(v65 + 4) = *v63;
        ++HIDWORD(v105);
      }
      goto LABEL_16;
    }
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x195A74C44);
  }
  if (!*(_BYTE *)(v11 + 3328))
  {
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v67 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v67 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v68 = 69;
    else
      v68 = 65;
    v99 = i;
    v100 = 0;
    v101 = v68;
    v102 = 15;
    v103 = -1;
    v69 = HIDWORD(v105);
    if (i != -1)
    {
      if (HIDWORD(v105) == (_DWORD)v105)
      {
        v70 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v99);
        v72 = *(_DWORD *)v70;
        v71 = (int *)(v70 + 4);
        v73 = (char *)v104 + 12 * HIDWORD(v105);
        *(_DWORD *)v73 = v72;
      }
      else
      {
        v71 = &v100;
        v73 = (char *)v104 + 12 * HIDWORD(v105);
        *(_DWORD *)v73 = i;
      }
      *(_QWORD *)(v73 + 4) = *(_QWORD *)v71;
      v69 = ++HIDWORD(v105);
    }
    v74 = v69;
    v95 = (WTF *)v98;
    v96 = 2;
    v97 = v69;
    if (v69 < 3)
    {
      v76 = v98;
    }
    else
    {
      if (v69 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x195A74CE8);
      }
      v75 = 12 * v69;
      v76 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v69));
      v96 = (v75 & 0xFFFFFFFC) / 0xC;
      v95 = (WTF *)v76;
      v74 = HIDWORD(v105);
      v69 = HIDWORD(v105);
    }
    if (v69)
    {
      v77 = v104;
      v78 = (WTF *)((char *)v104 + 12 * v74);
      do
      {
        *(_DWORD *)v76 = *(_DWORD *)v77;
        *(_QWORD *)(v76 + 4) = *(_QWORD *)((char *)v77 + 4);
        v77 = (WTF *)((char *)v77 + 12);
        v76 += 12;
      }
      while (v77 != v78);
    }
    v79 = v97;
    v107 = (WTF *)v110;
    v108 = 2;
    v109 = v97;
    if (v97 < 3)
    {
      v81 = v110;
    }
    else
    {
      if (v97 >= 0x15555556)
        goto LABEL_129;
      v80 = 12 * v97;
      v81 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v97));
      v108 = (v80 & 0xFFFFFFFC) / 0xC;
      v107 = (WTF *)v81;
      v79 = v97;
    }
    if (v79)
    {
      v82 = v95;
      v83 = (WTF *)((char *)v95 + 12 * v79);
      do
      {
        *(_DWORD *)v81 = *(_DWORD *)v82;
        *(_QWORD *)(v81 + 4) = *(_QWORD *)((char *)v82 + 4);
        v82 = (WTF *)((char *)v82 + 12);
        v81 += 12;
      }
      while (v82 != v83);
    }
    (*(void (**)(uint64_t, WTF **, uint64_t, unint64_t (*)(JSC::JSGlobalObject *, WebCore::JSDOMGlobalObject *, uint64_t, WebCore::Document *), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v107, a1, operationToJSDocument, v9, v87 | (v14 << 8));
    v84 = v107;
    if (v110 != (_BYTE *)v107 && v107 != 0)
    {
      v107 = 0;
      v108 = 0;
      WTF::fastFree(v84, v45);
    }
    v48 = v95;
    if (v98 != (_BYTE *)v95 && v95 != 0)
      goto LABEL_50;
    goto LABEL_51;
  }
LABEL_16:
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x800000000, v9);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v9, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v107, v21);
  v22 = (int)v107;
  if ((_DWORD)v107 != -1)
  {
    v23 = HIDWORD(v105);
    if (HIDWORD(v105) == (_DWORD)v105)
    {
      v24 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v107);
      v26 = *(_DWORD *)v24;
      v25 = v24 + 4;
      v22 = v26;
      v23 = HIDWORD(v105);
    }
    else
    {
      v25 = (WTF **)((char *)&v107 + 4);
    }
    v27 = (char *)v104 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++HIDWORD(v105);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x195A74A4CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, v9 | 0x800000000, *(_BYTE *)(a1 + 272));
  JSC::MacroAssemblerARM64::branchTest64(a1, 1u, 16, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v95, v28);
  v29 = (int)v95;
  if ((_DWORD)v95 != -1)
  {
    v30 = HIDWORD(v105);
    if (HIDWORD(v105) == (_DWORD)v105)
    {
      v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v95);
      v33 = *(_DWORD *)v31;
      v32 = v31 + 4;
      v29 = v33;
      v30 = HIDWORD(v105);
    }
    else
    {
      v32 = (WTF **)((char *)&v95 + 4);
    }
    v34 = (char *)v104 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++HIDWORD(v105);
  }
  JSC::MacroAssemblerARM64::load64(a1, v9, v9);
  v35 = HIDWORD(v105);
  v95 = (WTF *)v98;
  v96 = 2;
  v97 = HIDWORD(v105);
  if (HIDWORD(v105) < 3)
  {
    v37 = v98;
  }
  else
  {
    if (HIDWORD(v105) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x195A74CD8);
    }
    v36 = 12 * HIDWORD(v105);
    v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v105)));
    v96 = (v36 & 0xFFFFFFFC) / 0xC;
    v95 = (WTF *)v37;
    v35 = HIDWORD(v105);
  }
  if (v35)
  {
    v38 = v104;
    v39 = (WTF *)((char *)v104 + 12 * v35);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
  }
  v40 = v97;
  v107 = (WTF *)v110;
  v108 = 2;
  v109 = v97;
  if (v97 < 3)
  {
    v42 = v110;
    if (!v97)
      goto LABEL_41;
LABEL_39:
    v43 = v95;
    v44 = (WTF *)((char *)v95 + 12 * v40);
    do
    {
      *(_DWORD *)v42 = *(_DWORD *)v43;
      *(_QWORD *)(v42 + 4) = *(_QWORD *)((char *)v43 + 4);
      v43 = (WTF *)((char *)v43 + 12);
      v42 += 12;
    }
    while (v43 != v44);
    goto LABEL_41;
  }
  if (v97 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x195A74CE0);
  }
  v41 = 12 * v97;
  v42 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v97));
  v108 = (v41 & 0xFFFFFFFC) / 0xC;
  v107 = (WTF *)v42;
  v40 = v97;
  if (v97)
    goto LABEL_39;
LABEL_41:
  (*(void (**)(uint64_t, WTF **, uint64_t, unint64_t (*)(JSC::JSGlobalObject *, WebCore::JSDOMGlobalObject *, uint64_t, WebCore::Document *), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v107, a1, operationToJSDocument, v9, v87 | (v14 << 8));
  v46 = v107;
  if (v110 != (_BYTE *)v107 && v107 != 0)
  {
    v107 = 0;
    v108 = 0;
    WTF::fastFree(v46, v45);
  }
  v48 = v95;
  if (v98 != (_BYTE *)v95 && v95 != 0)
  {
LABEL_50:
    v95 = 0;
    v96 = 0;
    WTF::fastFree(v48, v45);
  }
LABEL_51:
  v50 = v104;
  if (v106 != (_BYTE *)v104 && v104)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v50, v45);
  }
  for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v52 = j;
  if (j + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v53 = 69;
  else
    v53 = 65;
  v107 = (WTF *)j;
  LOBYTE(v108) = v53;
  *(_WORD *)((char *)&v108 + 1) = 15;
  HIBYTE(v108) = -1;
  if (HIDWORD(v91))
  {
    v54 = 0;
    v55 = 0;
    v56 = 12 * HIDWORD(v91);
    do
    {
      if (v55 >= HIDWORD(v91))
      {
        __break(0xC471u);
        JUMPOUT(0x195A74CA8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v90 + v54), a1);
      ++v55;
      v54 += 12;
    }
    while (v56 != v54);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, 2uLL, (char)v9);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v107, a1);
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
  *a3 = a3 + 2;
  a3[1] = 2;
  result = v90;
  if (v92 != (_BYTE *)v90)
  {
    if (v90)
    {
      v90 = 0;
      LODWORD(v91) = 0;
      return (WTF *)WTF::fastFree(result, v57);
    }
  }
  return result;
}

uint64_t WebCore::CompositeEditCommand::apply(WebCore::CompositeEditCommand *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  void *v15;
  int v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;

  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_BYTE *)this + 204) & 7;
    if (v3 <= 4 && (((1 << v3) & 0x19) != 0 || (v2 = *(_QWORD *)(v2 + 32)) != 0))
    {
      *(_DWORD *)(v2 + 24) += 2;
      v4 = WebCore::Node::computeEditability(v2, 0, 1);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      if (v4 == 2)
        goto LABEL_11;
    }
  }
  result = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
  if (result <= 0x3B && ((1 << result) & 0x8FFFC048202CF00) != 0)
  {
LABEL_11:
    WebCore::CompositeEditCommand::ensureComposition(this);
    v7 = *((_QWORD *)this + 2);
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Document::updateLayout(v7, 2, 0);
    v8 = *(_QWORD *)(v7 + 528);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0 || (v10 = *(_QWORD *)(v9 + 288)) == 0)
    {
      v11 = 0;
LABEL_21:
      result = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 152))(this);
      if (!(_DWORD)result)
        goto LABEL_29;
      {
        v16 = qword_1EE2F5808 + 1;
      }
      else
      {
        WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
        unk_1EE2F5800 = 0;
        qword_1EE2F5808 = 0;
        v16 = 1;
      }
      LODWORD(qword_1EE2F5808) = v16;
      (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 48))(this);
      {
        unk_1EE2F5800 = 0;
        qword_1EE2F5808 = 0xFFFFFFFFLL;
        WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
        goto LABEL_28;
      }
      LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
      if (!(_DWORD)qword_1EE2F5808)
      {
        v18 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
        v19 = dword_1EE2F5804;
        WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
        unk_1EE2F5800 = 0;
        if ((_DWORD)v19)
        {
          v24 = 0;
          v25 = 16 * v19;
          v26 = v18;
          v27 = (_DWORD *)((char *)v18 + 16 * v19);
          do
          {
            v18 = (WTF *)WebCore::ScopedEventQueue::dispatchEvent((uint64_t)v18, (WTF *)((char *)v26 + v24));
            v24 += 16;
          }
          while (v25 != v24);
          WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v26, v27);
          v18 = v26;
          if (!v26)
            goto LABEL_28;
        }
        else if (!v18)
        {
          goto LABEL_28;
        }
        WTF::fastFree(v18, v17);
      }
LABEL_28:
      (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 160))(this);
      result = (*(uint64_t (**)(WebCore::CompositeEditCommand *, _QWORD))(*(_QWORD *)this + 88))(this, 0);
LABEL_29:
      if (!v11)
        goto LABEL_39;
      v20 = *(WTF **)v11;
      if (*(_QWORD *)v11)
      {
        v21 = (_DWORD *)*((_QWORD *)v20 + 1);
        if (!v21 || (v22 = v21[77]) == 0 || (v23 = v22 - 1, (v21[77] = v23) != 0))
        {
          *(_QWORD *)v11 = 0;
          goto LABEL_35;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 664))(v21);
        v20 = *(WTF **)v11;
        *(_QWORD *)v11 = 0;
        if (v20)
        {
LABEL_35:
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, v15);
          else
            --*(_DWORD *)v20;
        }
      }
      else
      {
        *(_QWORD *)v11 = 0;
      }
      result = WTF::fastFree(v11, v15);
LABEL_39:
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      return result;
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)8);
    v12 = *(_QWORD *)(v10 + 16);
    if (!v12)
    {
      v12 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = v10;
      v14 = *(WTF **)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v12;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WTF::fastFree(v14, v13);
          v12 = *(_QWORD *)(v10 + 16);
          if (!v12)
            goto LABEL_19;
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    ++*(_DWORD *)v12;
LABEL_19:
    *(_QWORD *)v11 = v12;
    ++*(_DWORD *)(v10 + 308);
    goto LABEL_21;
  }
  return result;
}

uint64_t WebCore::AlternativeTextController::respondToAppliedEditing(WebCore::AlternativeTextController *this, WebCore::CompositeEditCommand *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  _QWORD *v8;
  char v9;

  result = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 80))(a2);
  if ((result & 1) == 0)
  {
    result = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v4 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v4 + 2;
    v5 = *(_QWORD *)(result + 1496);
    if (v5)
      ++*(_DWORD *)v5;
    if (v4)
    {
      *(_DWORD *)(result + 24) = v4;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 16) & 0x10) != 0)
      {
        v9 = 0;
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E33A3C38;
        v6[1] = &v9;
        v8 = v6;
        WebCore::DocumentMarkerController::forEachOfTypes(v5, 16, &v8);
        result = (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
        if (v9)
        {
          if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v5 + 56) = 0x3FA1111111111111;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
            result = WebCore::TimerBase::setNextFireTime(v5 + 32, v7 + 0.0333333333);
          }
        }
      }
      if (!*(_DWORD *)v5)
      {
        __break(0xC471u);
        JUMPOUT(0x195A75198);
      }
      --*(_DWORD *)v5;
    }
  }
  return result;
}

uint64_t WebCore::AlternativeTextController::insertDictatedText(uint64_t a1, WebCore::Document *a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  if (a4)
  {
    v8 = *(_QWORD *)(a4 + 48);
    if (v8)
      goto LABEL_3;
LABEL_14:
    v14 = 0;
    v15 = 1;
    goto LABEL_31;
  }
  v8 = WebCore::eventTargetElementForDocument(v7, a2);
  if (!v8)
    goto LABEL_14;
LABEL_3:
  if ((*(_BYTE *)(v8 + 22) & 2) != 0)
    *(_DWORD *)(v8 + 24) += 2;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  v9 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v7 + 528) + 8) + 112);
  *(_DWORD *)v9 += 2;
  v26 = v9;
  v10 = bmalloc::api::isoAllocate();
  WebCore::TextEvent::TextEvent((WebCore::EventNames **)v10, &v26, (WebCore::EventNames **)a2, a3);
  v12 = v26;
  v26 = 0;
  if (!v12)
  {
LABEL_8:
    if (a4)
      goto LABEL_9;
    goto LABEL_24;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    goto LABEL_8;
  }
  v16 = (uint64_t *)*((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = 0;
  if (v16)
  {
    if (*v16)
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v16, v11);
    WTF::fastFree((WTF *)v16, v11);
  }
  v17 = (unsigned int *)*((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v11);
    }
  }
  WTF::fastFree(v12, v11);
  if (a4)
  {
LABEL_9:
    v13 = a4;
    while (v13 != v10)
    {
      v13 = *(_QWORD *)(v13 + 64);
      if (!v13)
      {
        ++*(_DWORD *)(a4 + 16);
        goto LABEL_24;
      }
    }
    goto LABEL_27;
  }
LABEL_24:
  v20 = *(_DWORD **)(v10 + 64);
  *(_QWORD *)(v10 + 64) = a4;
  if (v20)
  {
    if (v20[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[4];
  }
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v10);
  v14 = *(unsigned __int8 *)(v10 + 20) >> 7;
  if (*(_DWORD *)(v10 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  else
    --*(_DWORD *)(v10 + 16);
  if (*(_DWORD *)v9 == 1)
  {
    v22 = (uint64_t *)*((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 2) = 0;
    if (v22)
    {
      if (*v22)
        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v22, a2);
      WTF::fastFree((WTF *)v22, a2);
    }
    v23 = (unsigned int *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
    WTF::fastFree(v9, a2);
    v15 = 0;
  }
  else
  {
    v15 = 0;
    --*(_DWORD *)v9;
  }
LABEL_31:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if ((v15 & 1) == 0)
  {
    if ((*(_BYTE *)(v8 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    }
  }
  return v14;
}

uint64_t WebCore::AppendNodeCommand::doApply(WebCore::AppendNodeCommand *this)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl *v4;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  result = WebCore::Node::computeEditability(v2, 0, 1);
  if ((_DWORD)result || (*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    result = WebCore::ContainerNode::appendChild(v2, *((WebCore::Node **)this + 32), (uint64_t)v5);
    if (v7)
    {
      result = (uint64_t)v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::AppendNodeCommand::doUnapply(WebCore::AppendNodeCommand *this)
{
  unsigned int *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  result = (unsigned int *)WebCore::Node::computeEditability(*((_QWORD *)this + 31), 0, 1);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 32);
    *(_DWORD *)(v4 + 24) += 2;
    v5 = *(_QWORD *)(v4 + 32);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v5, (WebCore::Node *)v4, &v8);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        v6 = *(_WORD *)(v5 + 30);
        if ((v6 & 0x400) == 0)
        {
          v7 = *(_WORD *)(v5 + 28);
          if ((v7 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef((WebCore::Document *)v5, v3);
          }
          else
          {
            if ((v7 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
              v6 = *(_WORD *)(v5 + 30);
            }
            *(_WORD *)(v5 + 30) = v6 | 0x400;
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
    if ((_BYTE)v10)
    {
      result = (unsigned int *)v9;
      v9 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
        else
          *result -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplyBlockElementCommand::doApply(WebCore::ApplyBlockElementCommand *this)
{
  WebCore::VisiblePosition *v2;
  unsigned int *result;
  int v4;
  const WebCore::VisiblePosition *v5;
  int v6;
  void *v7;
  const WebCore::VisiblePosition *v8;
  void *v10;
  _BOOL4 v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;
  int v15;
  int v16;
  const WebCore::VisiblePosition *v17;
  int v18;
  int v19;
  WebCore::Node *v20;
  const WebCore::VisiblePosition *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  void *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  uint64_t (*v28)();
  WebCore::Node *v29;
  WebCore::Node *v30;
  __int16 v31;
  uint64_t v32;
  char v33;
  WebCore::Node *v34;
  uint64_t (*v35)();
  void *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Node *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::Node *v50;
  void *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55[2];
  char v56;
  WebCore::Node *v57[2];
  char v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  _BYTE v67[24];
  WebCore::Node *v68;
  int v69;
  char v70;
  char v71;
  WebCore::Node *v72[3];
  WebCore::Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  int v76;
  char v77;
  char v78;
  WebCore::Node *v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  int v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  WebCore::Node *v95;
  int v96;
  char v97;
  char v98;

  v2 = (WebCore::ApplyBlockElementCommand *)((char *)this + 192);
  result = (unsigned int *)WebCore::editableRootForPosition((uint64_t)this + 192, 0);
  if (!result)
    return result;
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::ApplyBlockElementCommand *)((char *)this + 208), (uint64_t)&v95);
    v98 = 1;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition((WebCore::ApplyBlockElementCommand *)((char *)this + 208), (uint64_t)&v95);
    v98 = 1;
    if (v4)
      goto LABEL_4;
  }
  v45 = v95;
  if (v95)
  {
    *((_DWORD *)v95 + 6) += 2;
    v83 = (uint64_t)v45;
    v84 = v96;
    v85 = v97;
    v86 = 0;
    if (!WebCore::inSameLine((WebCore *)&v95, (const WebCore::VisiblePosition *)&v83, v5))
      v98 = 0;
    v47 = v83;
    v83 = 0;
    if (v47)
    {
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47, v46);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
  }
LABEL_4:
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v2, (uint64_t)&v91);
    v94 = 1;
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition(v2, (uint64_t)&v91);
    v94 = 1;
    if (!v6)
    {
      v48 = v91;
      if (!v91)
        goto LABEL_88;
      *(_DWORD *)(v91 + 24) += 2;
      v83 = v48;
      v84 = v92;
      v85 = v93;
      v86 = 0;
      if (!WebCore::inSameLine((WebCore *)&v91, (const WebCore::VisiblePosition *)&v83, v8))
        v94 = 0;
      v49 = v83;
      v83 = 0;
      if (v49)
      {
        if (*(_DWORD *)(v49 + 24) == 2)
        {
          if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v49, v7);
        }
        else
        {
          *(_DWORD *)(v49 + 24) -= 2;
        }
      }
    }
  }
  if (v91)
  {
    if ((*(_BYTE *)(v91 + 22) & 8) == 0 || !v95 || (*((_BYTE *)v95 + 22) & 8) == 0)
    {
LABEL_85:
      v44 = v91;
      v91 = 0;
      if (v44)
      {
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v44, v7);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
        }
      }
      goto LABEL_88;
    }
    if (!WebCore::operator==((uint64_t *)&v95, &v91))
    {
      if (v95
         ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
         : 0)
      {
        WebCore::startOfParagraph((uint64_t)&v95, 1, &v83);
        v11 = WebCore::operator==((uint64_t *)&v95, &v83);
        v12 = v83;
        v83 = 0;
        if (v12)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
        if (v11)
        {
          WebCore::VisiblePosition::previous(&v95, 1, 0, (uint64_t)&v62);
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v83, (const WebCore::VisiblePosition *)&v91, (const WebCore::VisiblePosition *)&v62, (*((unsigned __int8 *)this + 226) >> 1) & 1);
          v14 = v62;
          v62 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14, v13);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
          if (!v90)
            goto LABEL_84;
          WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v83);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v83);
        }
      }
    }
    WebCore::selectionForParagraphIteration((WebCore::ApplyBlockElementCommand *)((char *)this + 128), (uint64_t)&v83);
    v15 = v90;
    v16 = v89;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v87, (uint64_t)&v79);
    v82 = 1;
    if (v15 != 2 && !v16)
    {
      v50 = v79;
      if (!v79)
        goto LABEL_84;
      *((_DWORD *)v79 + 6) += 2;
      v62 = v50;
      v63 = v80;
      v64 = v81;
      v65 = 0;
      if (!WebCore::inSameLine((WebCore *)&v79, (const WebCore::VisiblePosition *)&v62, v17))
        v82 = 0;
      v52 = v62;
      v62 = 0;
      if (v52)
      {
        if (*((_DWORD *)v52 + 6) == 2)
        {
          if ((*((_WORD *)v52 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v52, v51);
        }
        else
        {
          *((_DWORD *)v52 + 6) -= 2;
        }
      }
    }
    if (v79)
    {
      v18 = v90;
      v19 = v89;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v88, (uint64_t)&v75);
      v78 = 1;
      if (v18 == 2 || !v19)
      {
        v53 = v75;
        if (!v75)
        {
LABEL_81:
          v43 = (uint64_t)v79;
          v79 = 0;
          if (v43)
          {
            if (*(_DWORD *)(v43 + 24) == 2)
            {
              if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v43, v20);
            }
            else
            {
              *(_DWORD *)(v43 + 24) -= 2;
            }
          }
          goto LABEL_84;
        }
        *((_DWORD *)v75 + 6) += 2;
        v62 = v53;
        v63 = v76;
        v64 = v77;
        v65 = 0;
        if (!WebCore::inSameLine((WebCore *)&v75, (const WebCore::VisiblePosition *)&v62, v21))
          v78 = 0;
        v54 = v62;
        v62 = 0;
        if (v54)
        {
          if (*((_DWORD *)v54 + 6) == 2)
          {
            if ((*((_WORD *)v54 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v54, v20);
          }
          else
          {
            *((_DWORD *)v54 + 6) -= 2;
          }
        }
      }
      if (v75)
      {
        v74 = 0;
        v22 = WebCore::indexForVisiblePosition((uint64_t *)&v79, (uint64_t)&v74);
        v73 = 0;
        v23 = (unsigned int *)WebCore::indexForVisiblePosition((uint64_t *)&v75, (uint64_t)&v73);
        (*(void (**)(WebCore::ApplyBlockElementCommand *, WebCore::Node **, WebCore::Node **))(*(_QWORD *)this + 192))(this, &v79, &v75);
        v24 = *((_QWORD *)this + 2);
        *(_DWORD *)(v24 + 24) += 2;
        WebCore::Document::updateLayout(v24, 2u, 0);
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
        v20 = v74;
        v26 = v73;
        if (v74 == v73 && (v22 & 0x80000000) == 0 && (int)v22 <= (int)v23)
        {
          WebCore::visiblePositionForIndex((unsigned int *)v22, (uint64_t)v74, 1, v72);
          WebCore::visiblePositionForIndex(v23, (uint64_t)v73, 1, &v68);
          v27 = v72[0];
          if (v72[0])
            v28 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v28 = 0;
          v29 = v68;
          if (v28 && !v68)
          {
            v30 = v73;
            v31 = *((_WORD *)v73 + 14);
            *((_DWORD *)v73 + 6) += 2;
            if ((v31 & 1) != 0)
            {
              v32 = *((_QWORD *)v30 + 10);
              v33 = 0;
              if (v32)
                LODWORD(v32) = *(_DWORD *)(v32 + 4);
            }
            else
            {
              LODWORD(v32) = 0;
              v33 = 4;
            }
            v59 = v30;
            v60 = v32;
            v61 = v33;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v59, (uint64_t)&v62);
            v65 = 1;
            v34 = v68;
            v68 = v62;
            if (v34)
            {
              if (*((_DWORD *)v34 + 6) == 2)
              {
                if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v34, v20);
              }
              else
              {
                *((_DWORD *)v34 + 6) -= 2;
              }
            }
            v69 = v63;
            v70 = v64;
            v71 = 1;
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30, v20);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
            v27 = v72[0];
            v29 = v68;
          }
          if (v27)
            v35 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v35 = 0;
          if (v35)
          {
            if (v29
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0)
            {
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v62, (const WebCore::VisiblePosition *)v72, (const WebCore::VisiblePosition *)&v68, (*((unsigned __int8 *)this + 226) >> 1) & 1);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v66, (uint64_t)v57);
              v58 = 1;
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v67, (uint64_t)v55);
              v56 = 1;
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v59, (const WebCore::VisiblePosition *)v57, (const WebCore::VisiblePosition *)v55, (v67[18] >> 1) & 1);
              WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v59);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v59);
              v38 = v55[0];
              v55[0] = 0;
              if (v38)
              {
                if (*((_DWORD *)v38 + 6) == 2)
                {
                  if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v38, v37);
                }
                else
                {
                  *((_DWORD *)v38 + 6) -= 2;
                }
              }
              v39 = v57[0];
              v57[0] = 0;
              if (v39)
              {
                if (*((_DWORD *)v39 + 6) == 2)
                {
                  if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v39, v37);
                }
                else
                {
                  *((_DWORD *)v39 + 6) -= 2;
                }
              }
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v62);
              v29 = v68;
            }
          }
          v68 = 0;
          if (v29)
          {
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v29, v20);
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
          v40 = v72[0];
          v72[0] = 0;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40, v20);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
          v26 = v73;
        }
        v73 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 6) == 2)
          {
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v26, v20);
          }
          else
          {
            *((_DWORD *)v26 + 6) -= 2;
          }
        }
        v41 = v74;
        v74 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v41, v20);
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
        v42 = (uint64_t)v75;
        v75 = 0;
        if (v42)
        {
          if (*(_DWORD *)(v42 + 24) == 2)
          {
            if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v42, v20);
          }
          else
          {
            *(_DWORD *)(v42 + 24) -= 2;
          }
        }
      }
      goto LABEL_81;
    }
LABEL_84:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v83);
    goto LABEL_85;
  }
LABEL_88:
  result = (unsigned int *)v95;
  v95 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplyBlockElementCommand::formatSelection(WebCore::ApplyBlockElementCommand *this, VisiblePosition *a2, VisiblePosition *a3)
{
  Node *var0;
  void *v7;
  WebCore::Node *v8;
  void *v9;
  _BOOL4 v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Node *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  char v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  uint64_t v30;
  BOOL v31;
  const WebCore::Position *v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  int v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  unsigned int *v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  unsigned int v46;
  void *v47;
  WebCore::Node *v48;
  unsigned int *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  WebCore::Node *v56;
  unsigned int v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  char v75;
  BOOL v77;
  uint64_t v78;
  int v79;
  unsigned int *v80;
  int v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  int v85;
  int v86;
  BOOL v87;
  WebCore::Node *v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  int v92;
  WebCore::Node *v93;
  unsigned int v94;
  __int16 v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  char v102;
  uint64_t v103;
  WebCore::Node *v104;
  unsigned int v105;
  int v106;
  WebCore::Node *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _BOOL4 v119;
  void *v120;
  WebCore::Node *v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::Node *v131;
  void *v132;
  WebCore::Node *v133;
  unsigned int *v134;
  uint64_t v135;
  WebCore::Node *v136;
  int v137;
  unsigned int *v138;
  void *v139;
  char v140;
  char v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  WebCore::Node *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  WebCore::Node *v151;
  unsigned int v152;
  _BOOL4 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  WebCore::Node *v158;
  WebCore::Node *v159;
  WebCore::Node *v160;
  WebCore::Node *v161;
  WebCore::Node *v162;
  char v163;
  WebCore::Node *v164;
  unsigned int v165;
  int v166;
  WebCore::Node *v167;
  __int16 v168;
  uint64_t v169;
  uint64_t v170;
  WebCore::Node *v171;
  uint64_t v172;
  WebCore::Node *v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  __int16 v177;
  BOOL v178;
  char v179;
  unsigned int *v180;
  WebCore::Node *v181;
  WebCore::Node *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  unsigned int v187;
  char v188;
  uint64_t v189;
  WebCore::Node *v190;
  void *v191;
  WebCore::Node *v192;
  unsigned int *v193;
  int v194;
  int v195;
  __int16 v196;
  uint64_t v197;
  int v198;
  int v199;
  BOOL v200;
  WebCore::Node *v201;
  int v202;
  __int16 v203;
  uint64_t v204;
  int v205;
  void *v206;
  _BOOL4 v207;
  uint64_t (*v208)();
  BOOL v209;
  WebCore::Node *v210;
  WebCore::Node *v211;
  WebCore::Node *v212;
  WebCore::Node *v213;
  WebCore::Node *v214;
  WebCore::Node *v215;
  WebCore::Node *v216;
  WebCore::Node *v217;
  uint64_t v218;
  WebCore::Node *v219;
  void *v220;
  WebCore::Node *v221;
  WebCore::Node *v222;
  uint64_t v223;
  WebCore::Node *v224;
  WebCore::Node *v225;
  void *v226;
  uint64_t v227;
  WebCore::Node *v228;
  uint64_t v229;
  void *v230;
  unsigned int v231;
  int v232;
  char v233;
  char v234;
  WebCore::Node *v235;
  WebCore::Node *v236;
  WebCore::Node *v237;
  WebCore::Node *v238;
  uint64_t v239;
  WebCore::Node *v240;
  WebCore::Node *v241;
  WebCore::Node *v242;
  uint64_t (*v243)();
  int v244;
  uint64_t v245;
  int v246;
  WebCore::Node *v247;
  char v248;
  uint64_t (*v249)();
  int v250;
  uint64_t v251;
  int v252;
  WebCore::Node *v253;
  WebCore::Node *v254;
  WebCore::Node *v255;
  int v256;
  signed int v257;
  uint64_t v258;
  unsigned __int8 *v259;
  int v260;
  _BOOL4 v261;
  int v262;
  int v263;
  int v264;
  int v265;
  void *v266;
  uint64_t v267;
  int v268;
  unsigned int *v269;
  unsigned int v270;
  int v271;
  unsigned int *v272;
  int v273;
  BOOL v274;
  WebCore::Node *v275;
  unsigned int v276;
  int v277;
  WebCore::Node *v278;
  unsigned int v279;
  WebCore::Node *v280;
  unsigned int v281;
  int v282;
  WebCore::Node *v283;
  unsigned int v284;
  uint64_t v285;
  WebCore::Node *v286;
  WebCore::Node *v287;
  WebCore::Node *v288;
  __int16 v289;
  char v290;
  WebCore::Node *v291;
  uint64_t v292;
  uint64_t v293;
  WebCore::Node *v294;
  WebCore::Node *v295;
  WebCore::Node *v296;
  WebCore::Node *v297;
  WebCore::Node *v298;
  unsigned int *result;
  _BOOL4 v300;
  unsigned int *v301;
  WebCore::Node **v302;
  _BOOL4 v303;
  WebCore::Node *v304[2];
  char v305;
  WebCore::Node *v306[3];
  WebCore::Node *v307[3];
  WebCore::Node *v308[2];
  char v309;
  WebCore::Node *v310[2];
  char v311;
  WebCore::Node *v312;
  int v313;
  char v314;
  WebCore::Node *v315;
  unsigned int v316;
  char v317;
  char v318;
  WebCore::Node *v319;
  unsigned int v320;
  char v321;
  WebCore::Node *v322[3];
  WebCore::Node *v323;
  int v324;
  char v325;
  WebCore::Node *v326;
  WebCore::Node **v327;
  unsigned int var1;
  char v329;
  uint64_t v330;
  int v331;
  char v332;
  uint64_t v333;
  int v334;
  char v335;
  uint64_t v336;
  int v337;
  char v338;
  uint64_t v339;
  int v340;
  char v341;
  uint64_t v342;
  int v343;
  char v344;
  __int16 v345;
  char v346;
  WebCore::Node *v347;
  unsigned int v348;
  unsigned __int8 v349;
  char v350;
  unsigned int *v351;
  int v352;
  char v353;
  WebCore::Node *v354;
  unsigned int v355;
  char v356;
  char v357;

  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    *((_DWORD *)var0 + 6) += 2;
  v327 = (WebCore::Node **)var0;
  var1 = a2->var0.var1;
  v329 = *((_BYTE *)&a2->var0 + 12);
  WebCore::Position::downstream((uint64_t)&v327, (WebCore::Node *)1, (uint64_t)&v351);
  v8 = (WebCore::Node *)v327;
  v327 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (WebCore::isAtUnsplittableElement((WebCore *)&v351, (const WebCore::Position *)v7))
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v351, (uint64_t)&v354);
    v357 = 1;
    WebCore::startOfParagraph((uint64_t)&v354, 1, &v327);
    WebCore::endOfParagraph((WebCore::Node *)a3, 1, &v347);
    v10 = WebCore::operator==((uint64_t *)&v327, (uint64_t *)&v347);
    v11 = v347;
    v347 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v9);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v12 = (WebCore::Node *)v327;
    v327 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v9);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v13 = (uint64_t)v354;
    v354 = 0;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    if (v10)
    {
      WebCore::ApplyBlockElementCommand::createBlockElement(this, (uint64_t *)&v354);
      v14 = v354;
      *((_DWORD *)v354 + 6) += 2;
      v327 = (WebCore::Node **)v14;
      WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v327, (WebCore::Position *)&v351);
      if (v327)
      {
        if (*((_DWORD *)v327 + 6) == 2)
        {
          if ((*((_WORD *)v327 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v327, v15);
        }
        else
        {
          *((_DWORD *)v327 + 6) -= 2;
        }
      }
      v16 = *((_QWORD *)this + 2);
      *(_DWORD *)(v16 + 24) += 2;
      v17 = bmalloc::api::isoAllocate();
      v19 = v17;
      *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v17 + 24) = 0x101C00000002;
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = v16 + 96;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      ++*(_DWORD *)(v16 + 3324);
      *(_QWORD *)(v17 + 80) = 0;
      *(_QWORD *)(v17 + 88) = 0;
      v20 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v17 + 96) = v20;
      *(_QWORD *)(v17 + 104) = 0;
      *(_QWORD *)v17 = off_1E33B4C28;
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v18);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      *(_DWORD *)(v19 + 24) += 2;
      v327 = (WebCore::Node **)v19;
      v347 = v14;
      WebCore::CompositeEditCommand::appendNode(this, (uint64_t *)&v327, (uint64_t *)&v347);
      if (v347)
      {
        if (*((_DWORD *)v347 + 6) == 2)
        {
          if ((*((_WORD *)v347 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v347, v21);
        }
        else
        {
          *((_DWORD *)v347 + 6) -= 2;
        }
      }
      if (v327)
      {
        if (*((_DWORD *)v327 + 6) == 2)
        {
          if ((*((_WORD *)v327 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v327, v21);
        }
        else
        {
          *((_DWORD *)v327 + 6) -= 2;
        }
      }
      v22 = *(_DWORD *)(v19 + 24);
      *(_DWORD *)(v19 + 24) = v22 + 2;
      v23 = *((_BYTE *)this + 226) & 2;
      v327 = (WebCore::Node **)v19;
      var1 = 0;
      v329 = 1;
      *(_DWORD *)(v19 + 24) = v22 + 6;
      v330 = v19;
      v331 = 0;
      v332 = 1;
      v333 = 0;
      v334 = 0;
      v335 = 0;
      v336 = 0;
      v337 = 0;
      v338 = 0;
      v339 = 0;
      v340 = 0;
      v341 = 0;
      v342 = 0;
      v343 = 0;
      v344 = 0;
      v345 = 1;
      v346 = v23;
      WebCore::VisibleSelection::validate((uint64_t)&v327, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v327);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v327);
      v25 = *(_DWORD *)(v19 + 24) - 2;
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) != 0)
        {
LABEL_904:
          if ((*(_WORD *)(v19 + 30) & 0x400) != 0)
            goto LABEL_872;
          v298 = (WebCore::Node *)v19;
          goto LABEL_906;
        }
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v24);
        v25 = *(_DWORD *)(v19 + 24);
      }
      else
      {
        *(_DWORD *)(v19 + 24) = v25;
      }
      v26 = v25 - 2;
      if (v26)
      {
        *(_DWORD *)(v19 + 24) = v26;
        goto LABEL_872;
      }
      goto LABEL_904;
    }
  }
  v326 = 0;
  WebCore::endOfParagraph((WebCore::Node *)a2, 1, &v347);
  WebCore::endOfParagraph((WebCore::Node *)a3, 1, &v323);
  WebCore::VisiblePosition::next((unsigned __int8 *)&v323, 0, 0, (uint64_t)&v327);
  WebCore::endOfParagraph((WebCore::Node *)&v327, 1, v322);
  v28 = (WebCore::Node *)v327;
  v327 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v27);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  v29 = v323;
  if (v323)
    *((_DWORD *)v323 + 6) += 2;
  LODWORD(v327) = v324;
  BYTE4(v327) = v325;
  v30 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v29;
  if (v30)
  {
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30, v27);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
  }
  v31 = 0;
  v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
  v301 = (unsigned int *)((char *)this + 304);
  v33 = v321 & 0xF0;
  *((_DWORD *)this + 76) = (_DWORD)v327;
  *((_BYTE *)this + 308) = BYTE4(v327);
  v319 = 0;
  v320 = 0;
  v302 = (WebCore::Node **)((char *)this + 296);
  v321 = v33;
  while (!WebCore::operator==((uint64_t *)&v347, (uint64_t *)v322) && !v31)
  {
    v34 = v347;
    if (v347)
      *((_DWORD *)v347 + 6) += 2;
    if (v34 != *(WebCore::Node **)v32)
    {
      v31 = 0;
      if (!v34)
        goto LABEL_79;
LABEL_77:
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v24);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
      goto LABEL_79;
    }
    v35 = v348;
    v36 = v349;
    if ((v349 & 8) == 0 && ((v349 & 7) == 4 || (v349 & 7) == 2))
    {
      if (v34)
      {
        v37 = *((_DWORD *)v34 + 6);
        *((_DWORD *)v34 + 6) = v37 + 2;
        v38 = *((_WORD *)v34 + 14);
        if ((v38 & 1) != 0)
        {
          v130 = *((_QWORD *)v34 + 10);
          if (v130)
            v35 = *(_DWORD *)(v130 + 4);
          else
            v35 = 0;
        }
        else if ((v38 & 4) != 0 && (v39 = *((_QWORD *)v34 + 10)) != 0)
        {
          v35 = 0;
          do
          {
            ++v35;
            v39 = *(_QWORD *)(v39 + 56);
          }
          while (v39);
        }
        else
        {
          v35 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v34 + 208))(v34) ^ 1;
          v37 = *((_DWORD *)v34 + 6) - 2;
        }
        if (v37)
        {
          *((_DWORD *)v34 + 6) = v37;
        }
        else if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v34, v24);
        }
      }
      else
      {
        v35 = 0;
      }
    }
    if ((*((_BYTE *)this + 308) & 8) == 0
      && ((v40 = *((_BYTE *)this + 308) & 7, v40 != 4) ? (v41 = v40 == 2) : (v41 = 1), v41))
    {
      v42 = *(unsigned int **)v32;
      if (*(_QWORD *)v32)
      {
        v43 = v42[6];
        v42[6] = v43 + 2;
        v44 = *((_WORD *)v42 + 14);
        if ((v44 & 1) != 0)
        {
          v129 = *((_QWORD *)v42 + 10);
          if (v129)
            v46 = *(_DWORD *)(v129 + 4);
          else
            v46 = 0;
        }
        else if ((v44 & 4) != 0 && (v45 = *((_QWORD *)v42 + 10)) != 0)
        {
          v46 = 0;
          do
          {
            ++v46;
            v45 = *(_QWORD *)(v45 + 56);
          }
          while (v45);
        }
        else
        {
          v46 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 208))(v42) ^ 1;
          v43 = v42[6] - 2;
        }
        if (v43)
        {
          v42[6] = v43;
        }
        else if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v42, v24);
        }
      }
      else
      {
        v46 = 0;
      }
    }
    else
    {
      v46 = *v301;
    }
    v31 = v35 == v46 && ((*((unsigned __int8 *)this + 308) ^ v36) & 7) == 0;
    if (v34)
      goto LABEL_77;
LABEL_79:
    WebCore::startOfParagraph((uint64_t)&v347, 1, &v327);
    v48 = (WebCore::Node *)v327;
    if (v327)
      *((_DWORD *)v327 + 6) += 2;
    LODWORD(v354) = var1;
    BYTE4(v354) = v329;
    v49 = v351;
    v351 = (unsigned int *)v48;
    if (v49)
    {
      if (v49[6] == 2)
      {
        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v49, v47);
          v48 = (WebCore::Node *)v327;
        }
      }
      else
      {
        v49[6] -= 2;
      }
    }
    v352 = (int)v354;
    v353 = BYTE4(v354);
    v327 = 0;
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 2)
      {
        if ((*((_WORD *)v48 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v48, v47);
      }
      else
      {
        *((_DWORD *)v48 + 6) -= 2;
      }
    }
    v50 = v347;
    if (v347)
      *((_DWORD *)v347 + 6) += 2;
    LODWORD(v327) = v348;
    BYTE4(v327) = v349;
    v51 = v319;
    v319 = v50;
    if (v51)
    {
      if (*((_DWORD *)v51 + 6) == 2)
      {
        if ((*((_WORD *)v51 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v51, v47);
      }
      else
      {
        *((_DWORD *)v51 + 6) -= 2;
      }
    }
    v320 = v327;
    v321 = BYTE4(v327);
    v52 = WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, (const WebCore::Position *)&v351);
    if (!v52)
    {
      v303 = 0;
      goto LABEL_119;
    }
    v53 = v52;
    if (WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, (const WebCore::Position *)&v319))
    {
      v54 = v351;
      if (v351)
      {
        v55 = v353 & 7;
        if (v55 > 4)
        {
          v54 = 0;
        }
        else if (((1 << v55) & 0x19) == 0)
        {
          v54 = (unsigned int *)*((_QWORD *)v351 + 4);
        }
      }
      v56 = v319;
      if (v319)
      {
        v57 = v321 & 7;
        if (v57 > 4)
        {
          v56 = 0;
        }
        else if (((1 << v57) & 0x19) == 0)
        {
          v56 = (WebCore::Node *)*((_QWORD *)v319 + 4);
        }
      }
      v303 = v54 == (unsigned int *)v56;
    }
    else
    {
      v303 = 0;
    }
    if (WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, v32))
    {
      v59 = v351;
      if (v351)
      {
        v60 = v353 & 7;
        if (v60 > 4)
        {
          v59 = 0;
        }
        else if (((1 << v60) & 0x19) == 0)
        {
          v59 = (unsigned int *)*((_QWORD *)v351 + 4);
        }
      }
      v61 = *(unsigned int **)v32;
      if (*(_QWORD *)v32)
      {
        v62 = *((_BYTE *)this + 308) & 7;
        if (v62 > 4)
        {
          v61 = 0;
        }
        else if (((1 << v62) & 0x19) == 0)
        {
          v61 = (unsigned int *)*((_QWORD *)v61 + 4);
        }
      }
      v63 = v59 == v61;
    }
    else
    {
      v63 = 0;
    }
    v64 = *(_DWORD *)(v53 + 40);
    v65 = (v64 >> 27) & 7;
    if ((v64 & 0x40000000) == 0 && v65 == 3)
    {
      v102 = 5;
      goto LABEL_230;
    }
    if (!v65)
      goto LABEL_119;
    if ((v64 & 0x40000000) != 0)
      v98 = 1;
    else
      v98 = 2;
    if (v65 == v98)
    {
      LOBYTE(v99) = 0;
      if ((v64 & 0x40000000) != 0)
        goto LABEL_221;
    }
    else
    {
      v99 = (v64 >> 30) & 1;
      if (v65 != 1)
        LOBYTE(v99) = 1;
      if ((v64 & 0x40000000) != 0)
      {
LABEL_221:
        if (v65 == 1)
        {
          v102 = 1;
          if ((v99 & 1) != 0)
            goto LABEL_322;
          goto LABEL_230;
        }
      }
    }
    if ((v64 & 0x40000000) == 0 && v65 == 2)
    {
      v102 = 3;
      if ((v99 & 1) != 0)
        goto LABEL_322;
    }
    else
    {
      if (v65 == 1 && (v64 & 0x40000000) == 0)
        v102 = 2;
      else
        v102 = 0;
      if ((v99 & 1) != 0)
        goto LABEL_322;
    }
LABEL_230:
    v113 = v351;
    if (v351)
    {
      v114 = v353 & 7;
      if (v114 <= 4)
      {
        if (((1 << v114) & 0x19) == 0)
        {
          v113 = (unsigned int *)*((_QWORD *)v351 + 4);
          if (!v113)
          {
            v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
            goto LABEL_322;
          }
          v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
        }
        if ((v113[7] & 2) != 0)
        {
          v115 = v113[6];
          v113[6] = v115 + 2;
          v116 = *((_QWORD *)v113 + 10);
          if (v116 && v352 < *(_DWORD *)(v116 + 4))
          {
            v117 = *(_QWORD *)(v116 + 8);
            if ((*(_BYTE *)(v116 + 16) & 4) != 0)
              v118 = *(unsigned __int8 *)(v117 + v352);
            else
              v118 = *(unsigned __int16 *)(v117 + 2 * v352);
            v119 = v118 == 10;
          }
          else
          {
            v119 = 0;
          }
          if (v115)
          {
            v113[6] = v115;
            if (!v119)
              goto LABEL_322;
          }
          else if ((*((_WORD *)v113 + 15) & 0x400) != 0)
          {
            if (!v119)
              goto LABEL_322;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v113, v58);
            if (!v119)
              goto LABEL_322;
          }
          WebCore::Position::previous((uint64_t)&v351, 0, (uint64_t)&v327);
          v121 = (WebCore::Node *)v327;
          if (v327
            && (v122 = v329 & 7, v122 <= 4)
            && (((1 << v122) & 0x19) != 0 || (v121 = v327[4]) != 0)
            && (*((_WORD *)v121 + 14) & 2) != 0)
          {
            v123 = *((_DWORD *)v121 + 6);
            *((_DWORD *)v121 + 6) = v123 + 2;
            v124 = *((_QWORD *)v121 + 10);
            if (v124 && var1 < *(_DWORD *)(v124 + 4))
            {
              v125 = *(_QWORD *)(v124 + 8);
              if ((*(_BYTE *)(v124 + 16) & 4) != 0)
                v126 = *(unsigned __int8 *)(v125 + var1);
              else
                v126 = *(unsigned __int16 *)(v125 + 2 * var1);
              v127 = v126 == 10;
            }
            else
            {
              v127 = 0;
            }
            if (v123)
            {
              *((_DWORD *)v121 + 6) = v123;
              goto LABEL_275;
            }
            if ((*((_WORD *)v121 + 15) & 0x400) != 0)
            {
LABEL_275:
              if (!v127)
                goto LABEL_303;
            }
            else
            {
              WebCore::Node::removedLastRef(v121, v120);
              if (!v127)
                goto LABEL_303;
            }
            v128 = 0;
          }
          else
          {
LABEL_303:
            v128 = v352 > 0;
          }
          v131 = (WebCore::Node *)v327;
          v327 = 0;
          if (v131)
          {
            if (*((_DWORD *)v131 + 6) == 2)
            {
              if ((*((_WORD *)v131 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v131, v120);
            }
            else
            {
              *((_DWORD *)v131 + 6) -= 2;
            }
          }
          if (v128)
          {
            WebCore::Position::previous((uint64_t)&v319, 0, (uint64_t)&v315);
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v315, (uint64_t)&v354);
            v357 = 1;
            WebCore::startOfParagraph((uint64_t)&v354, 1, &v327);
            v133 = (WebCore::Node *)v327;
            if (v327)
              *((_DWORD *)v327 + 6) += 2;
            LODWORD(v312) = var1;
            BYTE4(v312) = v329;
            v134 = v351;
            v351 = (unsigned int *)v133;
            if (v134)
            {
              if (v134[6] == 2)
              {
                if ((*((_WORD *)v134 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v134, v132);
                  v133 = (WebCore::Node *)v327;
                }
              }
              else
              {
                v134[6] -= 2;
              }
            }
            v352 = (int)v312;
            v353 = BYTE4(v312);
            v327 = 0;
            if (v133)
            {
              if (*((_DWORD *)v133 + 6) == 2)
              {
                if ((*((_WORD *)v133 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v133, v132);
              }
              else
              {
                *((_DWORD *)v133 + 6) -= 2;
              }
            }
            v135 = (uint64_t)v354;
            v354 = 0;
            if (v135)
            {
              if (*(_DWORD *)(v135 + 24) == 2)
              {
                if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v135, v132);
              }
              else
              {
                *(_DWORD *)(v135 + 24) -= 2;
              }
            }
            v136 = v315;
            v315 = 0;
            if (v136)
            {
              if (*((_DWORD *)v136 + 6) == 2)
              {
                if ((*((_WORD *)v136 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v136, v132);
              }
              else
              {
                *((_DWORD *)v136 + 6) -= 2;
              }
            }
          }
        }
      }
    }
LABEL_322:
    if (((1 << v102) & 0x26) == 0)
      goto LABEL_119;
    v137 = v352;
    if (v352 < 1)
      goto LABEL_119;
    if ((v353 & 7) == 0)
    {
      v138 = v351;
      if (!v351)
        goto LABEL_326;
      if ((v351[7] & 2) != 0)
      {
        v351[6] += 2;
        goto LABEL_326;
      }
    }
    v138 = 0;
LABEL_326:
    WebCore::CompositeEditCommand::splitTextNode(this, (WebCore::Text *)v138, v137);
    v140 = *((_WORD *)v138 + 14);
    v138[6] += 2;
    if ((v140 & 1) != 0)
      v141 = 0;
    else
      v141 = 3;
    v142 = v351;
    v351 = v138;
    if (v142)
    {
      if (v142[6] == 2)
      {
        if ((*((_WORD *)v142 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v142, v139);
      }
      else
      {
        v142[6] -= 2;
      }
    }
    v352 = 0;
    v353 = v141;
    v143 = v138[6];
    if (v303)
    {
      v138[6] = v143 + 2;
      v144 = v320;
      v145 = v319;
      v319 = (WebCore::Node *)v138;
      if (v145)
      {
        if (*((_DWORD *)v145 + 6) == 2)
        {
          if ((*((_WORD *)v145 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v145, v139);
        }
        else
        {
          *((_DWORD *)v145 + 6) -= 2;
        }
      }
      v320 = v144 - v137;
      v321 = 0;
      v143 = v138[6];
    }
    if (v63)
    {
      v138[6] = v143 + 2;
      v146 = *v301;
      v147 = *(unsigned int **)v32;
      *(_QWORD *)v32 = v138;
      if (v147)
      {
        if (v147[6] == 2)
        {
          if ((*((_WORD *)v147 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v147, v139);
        }
        else
        {
          v147[6] -= 2;
        }
      }
      *((_DWORD *)this + 76) = v146 - v137;
      *((_BYTE *)this + 308) = 0;
      v143 = v138[6];
    }
    v148 = v143 - 2;
    if (v148)
    {
      v138[6] = v148;
    }
    else if ((*((_WORD *)v138 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v138, v139);
    }
LABEL_119:
    v66 = WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, (const WebCore::Position *)&v319);
    if (!v66)
      goto LABEL_495;
    v67 = v66;
    if (WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, v32))
      v68 = v319 == *(WebCore::Node **)v32;
    else
      v68 = 0;
    v69 = v320;
    v70 = *(_DWORD *)(v67 + 40);
    v71 = (v70 >> 27) & 7;
    v72 = v70 & 0x40000000;
    v73 = (v70 & 0x40000000) == 0;
    if ((v70 & 0x40000000) == 0 && v71 == 3)
    {
      v74 = v31;
      v75 = 0;
      v71 = 5;
      goto LABEL_127;
    }
    if (!v71)
    {
      v74 = v31;
      v71 = v72 >> 28;
      v75 = 1;
      goto LABEL_127;
    }
    if (v72)
      v100 = 1;
    else
      v100 = 2;
    if (v71 == v100)
    {
      v75 = 0;
      if (!v72)
        goto LABEL_242;
    }
    else
    {
      if (v72)
        v101 = 0;
      else
        v101 = v71 == 1;
      v75 = !v101;
      if (!v72)
        goto LABEL_242;
    }
    if (v71 == 1)
    {
      v74 = v31;
      goto LABEL_127;
    }
LABEL_242:
    if (!v72 && v71 == 2)
    {
      v74 = v31;
      v71 = 3;
    }
    else
    {
      v74 = v31;
      if (v71 == 1 && v73)
        v71 = 2;
      else
        v71 = 0;
    }
LABEL_127:
    v77 = v71 != 5 && (v71 - 3) < 0xFFFFFFFE;
    v78 = *(_QWORD *)(v67 + 24);
    if ((*(_BYTE *)(v78 + 239) & 1) != 0)
    {
      v79 = 0;
      if ((v75 & 1) != 0)
        goto LABEL_432;
    }
    else
    {
      v79 = (*(_DWORD *)(v78 + 228) >> 4) & 3;
      if ((v75 & 1) != 0)
        goto LABEL_432;
    }
    v80 = v351;
    if (v351 != (unsigned int *)v319)
      goto LABEL_432;
    v300 = v68;
    if ((v353 & 8) == 0 && ((v81 = v353 & 7, v81 == 4) || v81 == 2))
    {
      if (v351)
      {
        v82 = v351[6];
        v351[6] = v82 + 2;
        v83 = *((_WORD *)v80 + 14);
        if ((v83 & 1) != 0)
        {
          v150 = *((_QWORD *)v80 + 10);
          if (v150)
            v85 = *(_DWORD *)(v150 + 4);
          else
            v85 = 0;
        }
        else if ((v83 & 4) != 0 && (v84 = *((_QWORD *)v80 + 10)) != 0)
        {
          v85 = 0;
          do
          {
            ++v85;
            v84 = *(_QWORD *)(v84 + 56);
          }
          while (v84);
        }
        else
        {
          v85 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v80 + 208))(v80) ^ 1;
          v82 = v80[6] - 2;
        }
        if (v82)
        {
          v80[6] = v82;
        }
        else if ((*((_WORD *)v80 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v80, v24);
        }
      }
      else
      {
        v85 = 0;
      }
    }
    else
    {
      v85 = v352;
    }
    if ((v321 & 8) == 0 && ((v86 = v321 & 7, v86 != 4) ? (v87 = v86 == 2) : (v87 = 1), v87))
    {
      v88 = v319;
      if (v319)
      {
        v89 = *((_DWORD *)v319 + 6);
        *((_DWORD *)v319 + 6) = v89 + 2;
        v90 = *((_WORD *)v88 + 14);
        if ((v90 & 1) != 0)
        {
          v149 = *((_QWORD *)v88 + 10);
          if (v149)
            v92 = *(_DWORD *)(v149 + 4);
          else
            v92 = 0;
        }
        else if ((v90 & 4) != 0 && (v91 = *((_QWORD *)v88 + 10)) != 0)
        {
          v92 = 0;
          do
          {
            ++v92;
            v91 = *(_QWORD *)(v91 + 56);
          }
          while (v91);
        }
        else
        {
          v92 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v88 + 208))(v88) ^ 1;
          v89 = *((_DWORD *)v88 + 6) - 2;
        }
        if (v89)
        {
          *((_DWORD *)v88 + 6) = v89;
        }
        else if ((*((_WORD *)v88 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v88, v24);
        }
      }
      else
      {
        v92 = 0;
      }
    }
    else
    {
      v92 = v320;
    }
    if (v85 != v92)
    {
      v68 = v300;
      goto LABEL_432;
    }
    v68 = v300;
    if (((v321 ^ v353) & 7) != 0)
      goto LABEL_432;
    v93 = v319;
    if (!v319 || (v94 = v321 & 7, v94 > 4))
    {
      v93 = 0;
      if ((MEMORY[0x1C] & 4) == 0)
        goto LABEL_432;
      goto LABEL_170;
    }
    if (((1 << v94) & 0x19) == 0)
      v93 = (WebCore::Node *)*((_QWORD *)v319 + 4);
    v95 = *((_WORD *)v93 + 14);
    if (!v93 || (v95 & 1) == 0)
    {
      if ((v95 & 4) == 0)
        goto LABEL_432;
LABEL_170:
      v96 = *((_QWORD *)v93 + 10);
      if (!v96)
        goto LABEL_432;
      v97 = 0;
      do
      {
        ++v97;
        v96 = *(_QWORD *)(v96 + 56);
      }
      while (v96);
      goto LABEL_210;
    }
    v103 = *((_QWORD *)v93 + 10);
    if (!v103)
      goto LABEL_432;
    v97 = *(_DWORD *)(v103 + 4);
LABEL_210:
    if (v69 >= v97)
      goto LABEL_432;
    WebCore::Position::previous((uint64_t)&v319, 0, (uint64_t)&v327);
    v104 = (WebCore::Node *)v327;
    if (!v327)
      goto LABEL_395;
    v105 = v329 & 7;
    if (v105 > 4)
      goto LABEL_395;
    v106 = 1 << v105;
    v107 = (WebCore::Node *)v327;
    if ((v106 & 0x19) == 0)
    {
      v107 = v327[4];
      if (!v107)
        goto LABEL_395;
    }
    if ((*((_WORD *)v107 + 14) & 2) == 0)
      goto LABEL_395;
    v108 = *((_DWORD *)v107 + 6);
    *((_DWORD *)v107 + 6) = v108 + 2;
    v109 = *((_QWORD *)v107 + 10);
    if (v109 && var1 < *(_DWORD *)(v109 + 4))
    {
      v110 = *(_QWORD *)(v109 + 8);
      if ((*(_BYTE *)(v109 + 16) & 4) != 0)
        v111 = *(unsigned __int8 *)(v110 + var1);
      else
        v111 = *(unsigned __int16 *)(v110 + 2 * var1);
      v112 = v111 == 10;
    }
    else
    {
      v112 = 0;
    }
    if (v108)
    {
      *((_DWORD *)v107 + 6) = v108;
LABEL_266:
      if (v112)
      {
        v327 = 0;
LABEL_268:
        if (*((_DWORD *)v104 + 6) == 2)
        {
          if ((*((_WORD *)v104 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v104, v24);
        }
        else
        {
          *((_DWORD *)v104 + 6) -= 2;
        }
        goto LABEL_424;
      }
LABEL_395:
      v151 = v319;
      if (!v319)
        goto LABEL_399;
      v152 = v321 & 7;
      if (v152 > 4)
        goto LABEL_399;
      if (((1 << v152) & 0x19) == 0)
      {
        v151 = (WebCore::Node *)*((_QWORD *)v319 + 4);
        if (!v151)
        {
          v153 = 0;
          goto LABEL_408;
        }
      }
      if ((*((_WORD *)v151 + 14) & 2) == 0)
      {
LABEL_399:
        v153 = 0;
        goto LABEL_408;
      }
      v154 = *((_DWORD *)v151 + 6);
      *((_DWORD *)v151 + 6) = v154 + 2;
      v155 = *((_QWORD *)v151 + 10);
      if (v155 && v320 < *(_DWORD *)(v155 + 4))
      {
        v156 = *(_QWORD *)(v155 + 8);
        if ((*(_BYTE *)(v155 + 16) & 4) != 0)
          v157 = *(unsigned __int8 *)(v156 + v320);
        else
          v157 = *(unsigned __int16 *)(v156 + 2 * v320);
        v153 = v157 == 10;
      }
      else
      {
        v153 = 0;
      }
      if (v154)
      {
        *((_DWORD *)v151 + 6) = v154;
      }
      else if ((*((_WORD *)v151 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v151, v24);
      }
LABEL_408:
      v158 = (WebCore::Node *)v327;
      v327 = 0;
      if (v158)
      {
        if (*((_DWORD *)v158 + 6) == 2)
        {
          if ((*((_WORD *)v158 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v158, v24);
        }
        else
        {
          *((_DWORD *)v158 + 6) -= 2;
        }
      }
      if (!v153)
        goto LABEL_424;
      v159 = v319;
      if ((v321 & 7) != 0)
      {
        ++v69;
        v319 = 0;
        if (!v159)
          goto LABEL_423;
      }
      else
      {
        if (!v319)
        {
          ++v69;
          v319 = 0;
LABEL_423:
          v320 = v69;
          v321 = 0;
          goto LABEL_424;
        }
        if ((*((_WORD *)v319 + 14) & 2) != 0)
        {
          *((_DWORD *)v319 + 6) += 2;
          v160 = v159;
        }
        else
        {
          v160 = 0;
        }
        ++v69;
        v319 = v160;
      }
      if (*((_DWORD *)v159 + 6) == 2)
      {
        if ((*((_WORD *)v159 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v159, v24);
      }
      else
      {
        *((_DWORD *)v159 + 6) -= 2;
      }
      goto LABEL_423;
    }
    if ((*((_WORD *)v107 + 15) & 0x400) != 0)
      goto LABEL_266;
    WebCore::Node::removedLastRef(v107, v24);
    if (!v112)
      goto LABEL_395;
    v104 = (WebCore::Node *)v327;
    v327 = 0;
    if (v104)
      goto LABEL_268;
LABEL_424:
    v68 = v300;
    if (v300 && (int)v320 >= (int)*v301)
    {
      v161 = v319;
      if (v319)
        *((_DWORD *)v319 + 6) += 2;
      v162 = *v302;
      *v302 = v161;
      if (v162)
      {
        if (*((_DWORD *)v162 + 6) == 2)
        {
          if ((*((_WORD *)v162 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v162, v24);
        }
        else
        {
          *((_DWORD *)v162 + 6) -= 2;
        }
      }
      *v301 = v320;
      *((_BYTE *)this + 308) = v321;
    }
LABEL_432:
    if (v79)
      v163 = v77;
    else
      v163 = 1;
    v31 = v74;
    v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
    if ((v163 & 1) != 0 || !v69)
      goto LABEL_495;
    v164 = v319;
    if (v319 && (v165 = v321 & 7, v165 <= 4))
    {
      v166 = 1 << v165;
      v167 = v319;
      if ((v166 & 0x19) == 0)
        v167 = (WebCore::Node *)*((_QWORD *)v319 + 4);
      v168 = *((_WORD *)v167 + 14);
      if (v167 && (v168 & 1) != 0)
      {
        v170 = *((_QWORD *)v167 + 10);
        if (v170)
          LODWORD(v170) = *(_DWORD *)(v170 + 4);
        goto LABEL_451;
      }
      if ((v168 & 4) == 0)
        goto LABEL_445;
    }
    else
    {
      v167 = 0;
      if ((MEMORY[0x1C] & 4) == 0)
      {
LABEL_445:
        LODWORD(v170) = 0;
        goto LABEL_451;
      }
    }
    v169 = *((_QWORD *)v167 + 10);
    if (!v169)
      goto LABEL_445;
    LODWORD(v170) = 0;
    do
    {
      LODWORD(v170) = v170 + 1;
      v169 = *(_QWORD *)(v169 + 56);
    }
    while (v169);
LABEL_451:
    if (v69 >= v170)
      goto LABEL_495;
    v171 = 0;
    if (v319 && (v321 & 7) == 0)
    {
      if ((*((_WORD *)v319 + 14) & 2) != 0)
      {
        *((_DWORD *)v319 + 6) += 2;
        v171 = v164;
      }
      else
      {
        v171 = 0;
      }
    }
    WebCore::CompositeEditCommand::splitTextNode(this, v171, v69);
    v172 = *((_QWORD *)v171 + 6) & 0xFFFFFFFFFFFFLL;
    if (!v172)
    {
      v180 = v351;
      v351 = 0;
      if (v180)
      {
        if (v180[6] == 2)
        {
          if ((*((_WORD *)v180 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v180, v24);
        }
        else
        {
          v180[6] -= 2;
        }
      }
      v352 = 0;
      v353 = 0;
      v181 = v319;
      v319 = 0;
      if (v181)
      {
        if (*((_DWORD *)v181 + 6) == 2)
        {
          if ((*((_WORD *)v181 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v181, v24);
        }
        else
        {
          *((_DWORD *)v181 + 6) -= 2;
        }
      }
      v320 = 0;
      v321 = 0;
      goto LABEL_493;
    }
    if (v303)
    {
      WebCore::firstPositionInOrBeforeNode(v172, (WebCore::Node *)v24, (uint64_t)&v327);
      v173 = (WebCore::Node *)v327;
      v327 = 0;
      v174 = v351;
      v351 = (unsigned int *)v173;
      if (!v174)
        goto LABEL_462;
      if (v174[6] != 2)
      {
        v174[6] -= 2;
LABEL_462:
        v352 = var1;
        v353 = v329;
        goto LABEL_463;
      }
      if ((*((_WORD *)v174 + 15) & 0x400) != 0)
        goto LABEL_462;
      WebCore::Node::removedLastRef((WebCore::Node *)v174, v24);
      v288 = (WebCore::Node *)v327;
      v352 = var1;
      v353 = v329;
      v327 = 0;
      if (v288)
      {
        if (*((_DWORD *)v288 + 6) == 2)
        {
          if ((*((_WORD *)v288 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v288, v24);
        }
        else
        {
          *((_DWORD *)v288 + 6) -= 2;
        }
      }
    }
LABEL_463:
    if (v68)
    {
      v175 = *v301 - v69;
      if (*v301 == v69)
      {
        v176 = *((_QWORD *)v171 + 6) & 0xFFFFFFFFFFFFLL;
        if (!v176)
        {
          v178 = v31;
          goto LABEL_843;
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 208))(*((_QWORD *)v171 + 6) & 0xFFFFFFFFFFFFLL) & 1) != 0)
        {
          v177 = *(_WORD *)(v176 + 28);
          *(_DWORD *)(v176 + 24) += 2;
          v178 = v31;
          if ((v177 & 1) == 0)
          {
            v175 = 0;
            v179 = 4;
            goto LABEL_481;
          }
          v184 = *(_QWORD *)(v176 + 80);
          if (v184)
          {
            v179 = 0;
            v175 = *(_DWORD *)(v184 + 4);
            goto LABEL_481;
          }
LABEL_843:
          v179 = 0;
          v175 = 0;
        }
        else
        {
          v178 = v31;
          v175 = 0;
          *(_DWORD *)(v176 + 24) += 2;
          v179 = 2;
        }
LABEL_481:
        v182 = *v302;
        *v302 = (WebCore::Node *)v176;
        if (v182)
        {
          v183 = *((_DWORD *)v182 + 6) - 2;
          if (*((_DWORD *)v182 + 6) == 2)
          {
            if ((*((_WORD *)v182 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v182, v24);
          }
          else
          {
LABEL_483:
            *((_DWORD *)v182 + 6) = v183;
          }
        }
      }
      else
      {
        *((_DWORD *)v171 + 6) += 2;
        v182 = *v302;
        *v302 = v171;
        if (v182)
        {
          v178 = v31;
          v183 = *((_DWORD *)v182 + 6) - 2;
          if (*((_DWORD *)v182 + 6) != 2)
          {
            v179 = 0;
            goto LABEL_483;
          }
          if ((*((_WORD *)v182 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v182, v24);
        }
        else
        {
          v178 = v31;
        }
        v179 = 0;
      }
      *((_DWORD *)this + 76) = v175;
      *((_BYTE *)this + 308) = v179;
      v31 = v178;
      v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
    }
    v185 = *((_QWORD *)v171 + 6) & 0xFFFFFFFFFFFFLL;
    v186 = *(_WORD *)(v185 + 0x1C);
    *(_DWORD *)(v185 + 0x18) += 2;
    if ((v186 & 1) != 0)
    {
      v189 = *(_QWORD *)(v185 + 80);
      v188 = 0;
      if (v189)
        v187 = *(_DWORD *)(v189 + 4);
      else
        v187 = 0;
    }
    else
    {
      v187 = 0;
      v188 = 4;
    }
    v190 = v319;
    v319 = (WebCore::Node *)v185;
    if (v190)
    {
      if (*((_DWORD *)v190 + 6) == 2)
      {
        if ((*((_WORD *)v190 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v190, v24);
      }
      else
      {
        *((_DWORD *)v190 + 6) -= 2;
      }
    }
    v320 = v187;
    v321 = v188;
LABEL_493:
    if (*((_DWORD *)v171 + 6) == 2)
    {
      if ((*((_WORD *)v171 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v171, v24);
    }
    else
    {
      *((_DWORD *)v171 + 6) -= 2;
    }
LABEL_495:
    if (!v351)
      break;
    if (!v319)
      goto LABEL_860;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v319, (uint64_t)&v327);
    v192 = v347;
    v347 = (WebCore::Node *)v327;
    if (v192)
    {
      if (*((_DWORD *)v192 + 6) == 2)
      {
        if ((*((_WORD *)v192 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v192, v191);
      }
      else
      {
        *((_DWORD *)v192 + 6) -= 2;
      }
    }
    v348 = var1;
    v349 = v329;
    v350 = 1;
    v193 = v351;
    if (v351 == (unsigned int *)v319)
    {
      if ((v353 & 8) == 0 && ((v194 = v353 & 7, v194 == 4) || v194 == 2))
      {
        if (v351)
        {
          v195 = v351[6];
          v351[6] = v195 + 2;
          v196 = *((_WORD *)v193 + 14);
          if ((v196 & 1) != 0)
          {
            v293 = *((_QWORD *)v193 + 10);
            v198 = v293 ? *(_DWORD *)(v293 + 4) : 0;
          }
          else if ((v196 & 4) != 0 && (v197 = *((_QWORD *)v193 + 10)) != 0)
          {
            v198 = 0;
            do
            {
              ++v198;
              v197 = *(_QWORD *)(v197 + 56);
            }
            while (v197);
          }
          else
          {
            v198 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v193 + 208))(v193) ^ 1;
            v195 = v193[6] - 2;
          }
          if (v195)
          {
            v193[6] = v195;
          }
          else if ((*((_WORD *)v193 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v193, v191);
          }
        }
        else
        {
          v198 = 0;
        }
      }
      else
      {
        v198 = v352;
      }
      if ((v321 & 8) == 0 && ((v199 = v321 & 7, v199 != 4) ? (v200 = v199 == 2) : (v200 = 1), v200))
      {
        v201 = v319;
        if (v319)
        {
          v202 = *((_DWORD *)v319 + 6);
          *((_DWORD *)v319 + 6) = v202 + 2;
          v203 = *((_WORD *)v201 + 14);
          if ((v203 & 1) != 0)
          {
            v292 = *((_QWORD *)v201 + 10);
            v205 = v292 ? *(_DWORD *)(v292 + 4) : 0;
          }
          else if ((v203 & 4) != 0 && (v204 = *((_QWORD *)v201 + 10)) != 0)
          {
            v205 = 0;
            do
            {
              ++v205;
              v204 = *(_QWORD *)(v204 + 56);
            }
            while (v204);
          }
          else
          {
            v205 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v201 + 208))(v201) ^ 1;
            v202 = *((_DWORD *)v201 + 6) - 2;
          }
          if (v202)
          {
            *((_DWORD *)v201 + 6) = v202;
          }
          else if ((*((_WORD *)v201 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v201, v191);
          }
        }
        else
        {
          v205 = 0;
        }
      }
      else
      {
        v205 = v320;
      }
      if (v198 == v205 && ((v321 ^ v353) & 7) == 0)
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v351, (uint64_t)&v315);
        v318 = 1;
        WebCore::startOfBlock((unsigned int *)&v315, (WebCore::Node *)1, &v354);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v351, (uint64_t)v310);
        v311 = 1;
        WebCore::endOfBlock((unsigned int *)v310, (WebCore::Node *)1, &v312);
        if (WebCore::operator==((uint64_t *)&v354, (uint64_t *)&v312))
        {
          v207 = 0;
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v319, (uint64_t)v308);
          v309 = 1;
          v208 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          if (!v308[0])
            v208 = 0;
          if (!v208)
            goto LABEL_538;
          WebCore::endOfBlock((unsigned int *)v308, 0, &v327);
          v209 = WebCore::operator==((uint64_t *)v308, (uint64_t *)&v327);
          v210 = (WebCore::Node *)v327;
          v327 = 0;
          if (v210)
          {
            if (*((_DWORD *)v210 + 6) == 2)
            {
              if ((*((_WORD *)v210 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v210, v206);
            }
            else
            {
              *((_DWORD *)v210 + 6) -= 2;
            }
          }
          if (v209)
          {
            v207 = 0;
          }
          else
          {
LABEL_538:
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v351, (uint64_t)&v327);
            LOBYTE(v330) = 1;
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v351, (uint64_t)v304);
            v305 = 1;
            WebCore::endOfBlock((unsigned int *)v304, (WebCore::Node *)1, v306);
            WebCore::startOfParagraph((uint64_t)v306, 1, v307);
            v207 = WebCore::operator==((uint64_t *)&v327, (uint64_t *)v307);
            v211 = v307[0];
            v307[0] = 0;
            if (v211)
            {
              if (*((_DWORD *)v211 + 6) == 2)
              {
                if ((*((_WORD *)v211 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v211, v206);
              }
              else
              {
                *((_DWORD *)v211 + 6) -= 2;
              }
            }
            v212 = v306[0];
            v306[0] = 0;
            if (v212)
            {
              if (*((_DWORD *)v212 + 6) == 2)
              {
                if ((*((_WORD *)v212 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v212, v206);
              }
              else
              {
                *((_DWORD *)v212 + 6) -= 2;
              }
            }
            v213 = v304[0];
            v304[0] = 0;
            if (v213)
            {
              if (*((_DWORD *)v213 + 6) == 2)
              {
                if ((*((_WORD *)v213 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v213, v206);
              }
              else
              {
                *((_DWORD *)v213 + 6) -= 2;
              }
            }
            v214 = (WebCore::Node *)v327;
            v327 = 0;
            if (v214)
            {
              if (*((_DWORD *)v214 + 6) == 2)
              {
                if ((*((_WORD *)v214 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v214, v206);
              }
              else
              {
                *((_DWORD *)v214 + 6) -= 2;
              }
            }
          }
          v215 = v308[0];
          v308[0] = 0;
          if (v215)
          {
            if (*((_DWORD *)v215 + 6) == 2)
            {
              if ((*((_WORD *)v215 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v215, v206);
            }
            else
            {
              *((_DWORD *)v215 + 6) -= 2;
            }
          }
        }
        v216 = v312;
        v312 = 0;
        if (v216)
        {
          if (*((_DWORD *)v216 + 6) == 2)
          {
            if ((*((_WORD *)v216 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v216, v206);
          }
          else
          {
            *((_DWORD *)v216 + 6) -= 2;
          }
        }
        v217 = v310[0];
        v310[0] = 0;
        if (v217)
        {
          if (*((_DWORD *)v217 + 6) == 2)
          {
            if ((*((_WORD *)v217 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v217, v206);
          }
          else
          {
            *((_DWORD *)v217 + 6) -= 2;
          }
        }
        v218 = (uint64_t)v354;
        v354 = 0;
        if (v218)
        {
          if (*(_DWORD *)(v218 + 24) == 2)
          {
            if ((*(_WORD *)(v218 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v218, v206);
          }
          else
          {
            *(_DWORD *)(v218 + 24) -= 2;
          }
        }
        v219 = v315;
        v315 = 0;
        if (v219)
        {
          if (*((_DWORD *)v219 + 6) == 2)
          {
            if ((*((_WORD *)v219 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v219, v206);
          }
          else
          {
            *((_DWORD *)v219 + 6) -= 2;
          }
        }
        if (v207)
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v319, (uint64_t)&v354);
          v357 = 1;
          WebCore::endOfBlock((unsigned int *)&v354, (WebCore::Node *)1, &v327);
          v221 = (WebCore::Node *)v327;
          v327 = 0;
          v222 = v347;
          v347 = v221;
          if (!v222)
            goto LABEL_569;
          if (*((_DWORD *)v222 + 6) != 2)
          {
            *((_DWORD *)v222 + 6) -= 2;
            goto LABEL_569;
          }
          if ((*((_WORD *)v222 + 15) & 0x400) != 0)
          {
LABEL_569:
            v348 = var1;
            v349 = v329;
            v350 = v330;
            v327 = 0;
          }
          else
          {
            WebCore::Node::removedLastRef(v222, v220);
            v286 = (WebCore::Node *)v327;
            v348 = var1;
            v349 = v329;
            v350 = v330;
            v327 = 0;
            if (v286)
            {
              if (*((_DWORD *)v286 + 6) == 2)
              {
                if ((*((_WORD *)v286 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v286, v220);
              }
              else
              {
                *((_DWORD *)v286 + 6) -= 2;
              }
            }
          }
          v223 = (uint64_t)v354;
          v354 = 0;
          if (v223)
          {
            if (*(_DWORD *)(v223 + 24) == 2)
            {
              if ((*(_WORD *)(v223 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v223, v220);
            }
            else
            {
              *(_DWORD *)(v223 + 24) -= 2;
            }
          }
          v224 = v347;
          if (v347)
            *((_DWORD *)v347 + 6) += 2;
          LODWORD(v327) = v348;
          BYTE4(v327) = v349;
          v225 = v319;
          v319 = v224;
          if (v225)
          {
            if (*((_DWORD *)v225 + 6) == 2)
            {
              if ((*((_WORD *)v225 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v225, v220);
            }
            else
            {
              *((_DWORD *)v225 + 6) -= 2;
            }
          }
          v320 = v327;
          v321 = BYTE4(v327);
        }
      }
    }
    WebCore::enclosingNodeOfType((uint64_t)&v351, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)v310);
    WebCore::VisiblePosition::next((unsigned __int8 *)&v347, 0, 0, (uint64_t)&v354);
    WebCore::endOfParagraph((WebCore::Node *)&v354, 1, &v327);
    v227 = (uint64_t)v354;
    v354 = 0;
    if (v227)
    {
      if (*(_DWORD *)(v227 + 24) == 2)
      {
        if ((*(_WORD *)(v227 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v227, v226);
      }
      else
      {
        *(_DWORD *)(v227 + 24) -= 2;
      }
    }
    v228 = (WebCore::Node *)v327;
    if (v327)
      *((_DWORD *)v327 + 6) += 2;
    v354 = v228;
    v355 = var1;
    v356 = v329;
    v229 = WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(this, (const WebCore::Position *)&v354);
    if (!v229)
      goto LABEL_597;
    v231 = *(_DWORD *)(v229 + 40);
    v232 = (v231 >> 27) & 7;
    if ((v231 & 0x40000000) == 0 && v232 == 3)
    {
LABEL_683:
      v233 = 0;
      goto LABEL_589;
    }
    if (v232)
    {
      if ((v231 & 0x40000000) != 0)
        v262 = 1;
      else
        v262 = 2;
      if (v232 == v262)
        goto LABEL_683;
      v263 = (v231 >> 30) & 1;
      if (v232 == 1)
        v233 = v263;
      else
        v233 = 1;
    }
    else
    {
      v233 = 1;
    }
LABEL_589:
    if (!v228 || (v356 & 7) != 0 || (*((_WORD *)v228 + 14) & 2) == 0)
    {
      if (v355)
        v234 = v233;
      else
        v234 = 1;
      if ((v234 & 1) == 0)
      {
        MEMORY[0x18] += 2;
LABEL_597:
        v235 = (WebCore::Node *)v327;
        v327 = 0;
        v315 = v235;
        v316 = var1;
        v317 = v329;
        v318 = v330;
        goto LABEL_598;
      }
      v287 = 0;
      v290 = 1;
LABEL_789:
      v291 = (WebCore::Node *)v327;
      v327 = 0;
      v315 = v291;
      v316 = var1;
      v317 = v329;
      v318 = v330;
      if ((v290 & 1) != 0)
        goto LABEL_598;
      goto LABEL_790;
    }
    v256 = *((_DWORD *)v228 + 6);
    *((_DWORD *)v228 + 6) = v256 + 2;
    v257 = v355;
    if (!v355)
      v233 = 1;
    if ((v233 & 1) != 0)
    {
LABEL_788:
      v290 = 0;
      v287 = v228;
      goto LABEL_789;
    }
    *((_DWORD *)v228 + 6) = v256 + 6;
    v258 = *((_QWORD *)v228 + 10);
    if (v258 && *(_DWORD *)(v258 + 4))
    {
      v259 = *(unsigned __int8 **)(v258 + 8);
      if ((*(_BYTE *)(v258 + 16) & 4) != 0)
        v260 = *v259;
      else
        v260 = *(unsigned __int16 *)v259;
      v261 = v260 == 10;
    }
    else
    {
      v261 = 0;
    }
    v264 = v256 + 4;
    if (v264)
    {
      *((_DWORD *)v228 + 6) = v264;
    }
    else
    {
      v289 = *((_WORD *)v228 + 15);
      if ((v289 & 0x400) != 0)
        goto LABEL_786;
      WebCore::Node::removedLastRef(v228, v230);
      v264 = *((_DWORD *)v228 + 6);
    }
    v265 = v264 - 2;
    if (v265)
    {
      *((_DWORD *)v228 + 6) = v265;
      if (!v261)
        goto LABEL_788;
      goto LABEL_693;
    }
    v289 = *((_WORD *)v228 + 15);
LABEL_786:
    if ((v289 & 0x400) != 0)
    {
      if (!v261)
        goto LABEL_788;
    }
    else
    {
      WebCore::Node::removedLastRef(v228, v230);
      if (!v261)
        goto LABEL_788;
    }
LABEL_693:
    WebCore::CompositeEditCommand::splitTextNode(this, v228, 1);
    v267 = *((_QWORD *)v228 + 6) & 0xFFFFFFFFFFFFLL;
    if (v267)
    {
      v268 = *(_DWORD *)((*((_QWORD *)v228 + 6) & 0xFFFFFFFFFFFFLL) + 0x18);
      *(_DWORD *)((*((_QWORD *)v228 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) = v268 + 2;
      v269 = v351;
      if (v351)
      {
        v270 = v353 & 7;
        if (v270 <= 4)
        {
          v271 = 1 << v270;
          v272 = v351;
          if ((v271 & 0x19) == 0)
            v272 = (unsigned int *)*((_QWORD *)v351 + 4);
          if (v228 == (WebCore::Node *)v272 && (*(_WORD *)(v267 + 28) & 2) != 0)
          {
            *(_DWORD *)(v267 + 24) = v268 + 4;
            v273 = v352;
            v351 = (unsigned int *)v267;
            if (v269[6] == 2)
            {
              if ((*((_WORD *)v269 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v269, v266);
            }
            else
            {
              v269[6] -= 2;
            }
            v352 = v273;
            v353 = 0;
          }
        }
      }
    }
    v274 = v31;
    v275 = v319;
    if (v319)
    {
      v276 = v321 & 7;
      if (v276 <= 4)
      {
        v277 = 1 << v276;
        v278 = v319;
        if ((v277 & 0x19) != 0)
        {
          if (!v267)
            goto LABEL_712;
        }
        else
        {
          v278 = (WebCore::Node *)*((_QWORD *)v319 + 4);
          if (!v267)
            goto LABEL_712;
        }
        if (v228 == v278 && (*(_WORD *)(v267 + 28) & 2) != 0)
        {
          *(_DWORD *)(v267 + 24) += 2;
          v279 = v320;
          v319 = (WebCore::Node *)v267;
          if (*((_DWORD *)v275 + 6) == 2)
          {
            if ((*((_WORD *)v275 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v275, v266);
          }
          else
          {
            *((_DWORD *)v275 + 6) -= 2;
          }
          v320 = v279;
          v321 = 0;
        }
      }
    }
LABEL_712:
    v280 = *v302;
    if (*v302)
    {
      v281 = *((_BYTE *)this + 308) & 7;
      if (v281 <= 4)
      {
        v282 = 1 << v281;
        v283 = *v302;
        if ((v282 & 0x19) == 0)
          v283 = (WebCore::Node *)*((_QWORD *)v280 + 4);
        if (v228 == v283)
        {
          v284 = *v301;
          if ((int)*v301 >= v257)
          {
            *((_DWORD *)v228 + 6) += 2;
            --v284;
            *v302 = v228;
            goto LABEL_754;
          }
          if (v267 && (*(_WORD *)(v267 + 28) & 2) != 0)
          {
            v285 = *(_QWORD *)(v267 + 80);
            if (v285)
              LODWORD(v285) = *(_DWORD *)(v285 + 4);
            if (v284 <= v285)
            {
              *(_DWORD *)(v267 + 24) += 2;
              *v302 = (WebCore::Node *)v267;
LABEL_754:
              if (*((_DWORD *)v280 + 6) == 2)
              {
                if ((*((_WORD *)v280 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v280, v266);
              }
              else
              {
                *((_DWORD *)v280 + 6) -= 2;
              }
              *((_DWORD *)this + 76) = v284;
              *((_BYTE *)this + 308) = 0;
            }
          }
        }
      }
    }
    *((_DWORD *)v228 + 6) += 2;
    v312 = v228;
    v313 = v257 - 1;
    v314 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v312, (uint64_t)&v315);
    v318 = 1;
    if (*((_DWORD *)v228 + 6) == 2)
    {
      v31 = v274;
      if ((*((_WORD *)v228 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v228, v230);
    }
    else
    {
      *((_DWORD *)v228 + 6) -= 2;
      v31 = v274;
    }
    v287 = v228;
    v32 = (WebCore::ApplyBlockElementCommand *)((char *)this + 296);
    if (!v267)
      goto LABEL_790;
    if (*(_DWORD *)(v267 + 24) != 2)
    {
      *(_DWORD *)(v267 + 24) -= 2;
LABEL_762:
      v287 = v228;
      goto LABEL_790;
    }
    v287 = v228;
    if ((*(_WORD *)(v267 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v267, v230);
      goto LABEL_762;
    }
LABEL_790:
    if (*((_DWORD *)v287 + 6) == 2)
    {
      if ((*((_WORD *)v287 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v287, v230);
    }
    else
    {
      *((_DWORD *)v287 + 6) -= 2;
    }
LABEL_598:
    if (v228)
    {
      if (*((_DWORD *)v228 + 6) == 2)
      {
        if ((*((_WORD *)v228 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v228, v230);
      }
      else
      {
        *((_DWORD *)v228 + 6) -= 2;
      }
    }
    v236 = (WebCore::Node *)v327;
    v327 = 0;
    if (v236)
    {
      if (*((_DWORD *)v236 + 6) == 2)
      {
        if ((*((_WORD *)v236 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v236, v230);
      }
      else
      {
        *((_DWORD *)v236 + 6) -= 2;
      }
    }
    (*(void (**)(WebCore::ApplyBlockElementCommand *, unsigned int **, WebCore::Node **, const WebCore::Position *, WebCore::Node **))(*(_QWORD *)this + 200))(this, &v351, &v319, v32, &v326);
    if (v310[0])
    {
      v237 = v315;
      if (v315)
        *((_DWORD *)v315 + 6) += 2;
      v327 = (WebCore::Node **)v237;
      var1 = v316;
      v329 = v317;
      WebCore::enclosingNodeOfType((uint64_t)&v327, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)&v354);
      v238 = v310[0];
      v239 = (uint64_t)v354;
      v354 = 0;
      if (v239)
      {
        if (*(_DWORD *)(v239 + 24) == 2)
        {
          if ((*(_WORD *)(v239 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v239, v24);
        }
        else
        {
          *(_DWORD *)(v239 + 24) -= 2;
        }
      }
      v240 = (WebCore::Node *)v327;
      v327 = 0;
      if (v240)
      {
        if (*((_DWORD *)v240 + 6) == 2)
        {
          if ((*((_WORD *)v240 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v240, v24);
        }
        else
        {
          *((_DWORD *)v240 + 6) -= 2;
        }
      }
      if (v238 != (WebCore::Node *)v239)
      {
        v241 = v326;
        v326 = 0;
        if (v241)
        {
          if (*((_DWORD *)v241 + 6) == 2)
          {
            if ((*((_WORD *)v241 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v241, v24);
          }
          else
          {
            *((_DWORD *)v241 + 6) -= 2;
          }
        }
      }
    }
    v242 = v322[0];
    v243 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v322[0])
      v243 = 0;
    if (v243)
    {
      if (v322[0])
      {
        v244 = *((_DWORD *)v322[0] + 6) + 2;
        *((_DWORD *)v322[0] + 6) = v244;
      }
      else
      {
        v244 = MEMORY[0x18];
      }
      v245 = *((_QWORD *)v242 + 2);
      v246 = v244 - 2;
      if (v246)
      {
        *((_DWORD *)v242 + 6) = v246;
      }
      else if ((*((_WORD *)v242 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v242, v24);
      }
      v247 = v315;
      if ((v245 & 0x8000000000000) == 0)
      {
        v248 = 0;
        goto LABEL_642;
      }
    }
    else
    {
      v247 = v315;
    }
    v249 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v247)
      v249 = 0;
    if (v249)
    {
      if (v247)
      {
        v250 = *((_DWORD *)v247 + 6) + 2;
        *((_DWORD *)v247 + 6) = v250;
      }
      else
      {
        v250 = MEMORY[0x18];
      }
      v251 = *((_QWORD *)v247 + 2);
      v252 = v250 - 2;
      if (v252)
      {
        *((_DWORD *)v247 + 6) = v252;
      }
      else if ((*((_WORD *)v247 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v247, v24);
      }
      if ((v251 & 0x8000000000000) == 0)
      {
        v248 = 0;
        v315 = 0;
LABEL_643:
        if (*((_DWORD *)v247 + 6) == 2)
        {
          if ((*((_WORD *)v247 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v247, v24);
        }
        else
        {
          *((_DWORD *)v247 + 6) -= 2;
        }
        goto LABEL_645;
      }
    }
    else if (!v247)
    {
      v253 = 0;
      goto LABEL_638;
    }
    *((_DWORD *)v247 + 6) += 2;
    v253 = v247;
LABEL_638:
    v254 = v347;
    v347 = v253;
    if (v254)
    {
      if (*((_DWORD *)v254 + 6) == 2)
      {
        if ((*((_WORD *)v254 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v254, v24);
      }
      else
      {
        *((_DWORD *)v254 + 6) -= 2;
      }
    }
    v348 = v316;
    v349 = v317;
    v350 = v318;
    v248 = 1;
LABEL_642:
    v315 = 0;
    if (v247)
      goto LABEL_643;
LABEL_645:
    v255 = v310[0];
    v310[0] = 0;
    if (v255)
    {
      if (*((_DWORD *)v255 + 6) == 2)
      {
        if ((*((_WORD *)v255 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v255, v24);
      }
      else
      {
        *((_DWORD *)v255 + 6) -= 2;
      }
    }
    if ((v248 & 1) == 0)
      break;
  }
  v294 = v319;
  v319 = 0;
  if (v294)
  {
    if (*((_DWORD *)v294 + 6) == 2)
    {
      if ((*((_WORD *)v294 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v294, v24);
    }
    else
    {
      *((_DWORD *)v294 + 6) -= 2;
    }
  }
LABEL_860:
  v295 = v322[0];
  v322[0] = 0;
  if (v295)
  {
    if (*((_DWORD *)v295 + 6) == 2)
    {
      if ((*((_WORD *)v295 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v295, v24);
    }
    else
    {
      *((_DWORD *)v295 + 6) -= 2;
    }
  }
  v296 = v323;
  v323 = 0;
  if (v296)
  {
    if (*((_DWORD *)v296 + 6) == 2)
    {
      if ((*((_WORD *)v296 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v296, v24);
    }
    else
    {
      *((_DWORD *)v296 + 6) -= 2;
    }
  }
  v297 = v347;
  v347 = 0;
  if (v297)
  {
    if (*((_DWORD *)v297 + 6) == 2)
    {
      if ((*((_WORD *)v297 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v297, v24);
    }
    else
    {
      *((_DWORD *)v297 + 6) -= 2;
    }
  }
  v298 = v326;
  v326 = 0;
  if (v298)
  {
    if (*((_DWORD *)v298 + 6) != 2)
    {
      *((_DWORD *)v298 + 6) -= 2;
      goto LABEL_872;
    }
    if ((*((_WORD *)v298 + 15) & 0x400) == 0)
LABEL_906:
      WebCore::Node::removedLastRef(v298, v24);
  }
LABEL_872:
  result = v351;
  v351 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v24);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void WebCore::ApplyBlockElementCommand::createBlockElement(WebCore::ApplyBlockElementCommand *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  __n128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *((_QWORD *)this + 2);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::HTMLElementFactory::createElement((WebCore::ApplyBlockElementCommand *)((char *)this + 280), (const WebCore::QualifiedName *)v4, 0, 0, a2);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v7 = *((_QWORD *)this + 36);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 4))
    {
      WebCore::Element::setAttribute((WebCore::Element *)*a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (WTF::StringImpl **)this + 36, 0, &v10, v6);
      if (v12)
      {
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
}

unsigned int *WebCore::CompositeEditCommand::insertNodeAt(unsigned int *a1, uint64_t *a2, WebCore::Position *this)
{
  void *v5;
  WebCore::Node *v6;
  int v7;
  BOOL v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int16 v20;
  WebCore::RenderText *v21;
  uint64_t v22;
  signed int v23;
  void *v24;
  WebCore::Node *v25;
  unsigned int *result;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  int v31;
  char v32;

  WebCore::Position::parentAnchoredEquivalent((uint64_t)this, (uint64_t)&v30);
  v6 = v30;
  if (v30)
    *((_DWORD *)v30 + 6) += 2;
  if ((v32 & 8) == 0 && ((v7 = v32 & 7, v7 != 4) ? (v8 = v7 == 2) : (v8 = 1), v8))
  {
    if (v6)
    {
      v9 = *((_DWORD *)v6 + 6);
      *((_DWORD *)v6 + 6) = v9 + 2;
      v10 = *((_WORD *)v6 + 14);
      if ((v10 & 1) != 0)
      {
        v27 = *((_QWORD *)v6 + 10);
        if (v27)
          v12 = *(_DWORD *)(v27 + 4);
        else
          v12 = 0;
      }
      else if ((v10 & 4) != 0 && (v11 = *((_QWORD *)v6 + 10)) != 0)
      {
        v12 = 0;
        do
        {
          ++v12;
          v11 = *(_QWORD *)(v11 + 56);
        }
        while (v11);
      }
      else
      {
        v12 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 208))(v6) ^ 1;
        v9 = *((_DWORD *)v6 + 6) - 2;
      }
      if (v9)
      {
        *((_DWORD *)v6 + 6) = v9;
      }
      else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v6, v5);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = v31;
  }
  v13 = *((_WORD *)v6 + 14);
  if ((v13 & 2) != 0
    || (v13 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v6 + 208))(v6))
  {
    v19 = *((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL;
    if (v19)
      LODWORD(v19) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 528))(v19);
    if ((int)v19 < v12)
    {
      v20 = *((_WORD *)v6 + 14);
      if ((v20 & 2) == 0)
        goto LABEL_58;
      v21 = (WebCore::RenderText *)(*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL);
      if (v21)
      {
        if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195A789F8);
        }
        v23 = WebCore::RenderText::caretMaxOffset(v21, (WebCore::RenderObject *)v5);
      }
      else if ((v20 & 1) != 0)
      {
        v28 = *((_QWORD *)v6 + 10);
        v23 = v28 ? *(_DWORD *)(v28 + 4) : 0;
      }
      else if ((v20 & 4) != 0 && (v22 = *((_QWORD *)v6 + 10)) != 0)
      {
        v23 = 0;
        do
        {
          ++v23;
          v22 = *(_QWORD *)(v22 + 56);
        }
        while (v22);
      }
      else
      {
        v23 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 208))(v6) ^ 1;
      }
      if (v23 <= v12)
      {
LABEL_58:
        WebCore::CompositeEditCommand::insertNodeAfter(a1, a2, (uint64_t)v6);
        goto LABEL_59;
      }
      WebCore::CompositeEditCommand::splitTextNode((WebCore::CompositeEditCommand *)a1, v6, v12);
      if ((*((_BYTE *)v6 + 22) & 8) == 0)
        goto LABEL_59;
    }
    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, a2, (uint64_t)v6, 1);
    goto LABEL_59;
  }
  v14 = *((_WORD *)v6 + 14);
  if ((v14 & 4) == 0 || (v15 = *((_QWORD *)v6 + 10)) == 0)
  {
LABEL_49:
    if ((v14 & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A789B4);
    }
    *((_DWORD *)v6 + 6) += 2;
    v29 = v6;
    WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, a2, (uint64_t *)&v29);
    v25 = v29;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) != 2)
      {
        *((_DWORD *)v29 + 6) -= 2;
        goto LABEL_59;
      }
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        goto LABEL_74;
    }
    goto LABEL_59;
  }
  *(_DWORD *)(v15 + 24) += 2;
  if (v12 >= 1)
  {
    v16 = 1;
    do
    {
      v17 = v15;
      v15 = *(_QWORD *)(v15 + 56);
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17, v5);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
      if (v15)
        v18 = v16 < v12;
      else
        v18 = 0;
      ++v16;
    }
    while (v18);
    if (!v15)
    {
      v14 = *((_WORD *)v6 + 14);
      goto LABEL_49;
    }
  }
  WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, a2, v15, 1);
  if (*(_DWORD *)(v15 + 24) != 2)
  {
    *(_DWORD *)(v15 + 24) -= 2;
    goto LABEL_59;
  }
  if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
  {
    v25 = (WebCore::Node *)v15;
LABEL_74:
    WebCore::Node::removedLastRef(v25, v24);
  }
LABEL_59:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, v24);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  result = (unsigned int *)v30;
  v30 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v24);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::appendNode(WebCore::CompositeEditCommand *a1, uint64_t *a2, uint64_t *a3)
{
  char v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *result;
  WebCore::Node *v14;

  v6 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a1 + 16))(a1);
  v7 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x108);
  v8 = *(WebCore::Node **)(*(_QWORD *)(*a3 + 40) + 8);
  *((_DWORD *)v8 + 6) += 2;
  v14 = v8;
  *(_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)v7, (uint64_t *)&v14, v6) = off_1E33A9E80;
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  *(_QWORD *)v7 = off_1E33A9630;
  v11 = *a3;
  *a3 = 0;
  *((_QWORD *)v7 + 31) = v11;
  v12 = *a2;
  *a2 = 0;
  *((_QWORD *)v7 + 32) = v12;
  v14 = v7;
  WebCore::CompositeEditCommand::applyCommandToComposite(a1, (uint64_t **)&v14);
  result = v14;
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --*((_DWORD *)v14 + 2);
  }
  return result;
}

uint64_t WebCore::ApplyBlockElementCommand::renderStyleOfEnclosingTextNode(WebCore::ApplyBlockElementCommand *this, const WebCore::Position *a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((*((_BYTE *)a2 + 12) & 7) != 0 || !*(_QWORD *)a2 || (*(_WORD *)(*(_QWORD *)a2 + 28) & 2) == 0)
    return 0;
  v4 = *((_QWORD *)this + 2);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v6 = *(_QWORD *)a2;
  if ((*((_BYTE *)a2 + 12) & 7u) - 1 <= 1)
    v6 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 16) = v8 + 1;
  v9 = v7;
  if ((*(_BYTE *)(v7 + 45) & 2) != 0)
  {
    v9 = *(_QWORD *)(v7 + 32);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
  }
  if (v8 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A78C10);
  }
  result = v9 + 80;
  *(_DWORD *)(v7 + 16) = v8;
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::splitTextNode(WebCore::CompositeEditCommand *this, WebCore::Text *a2, int a3)
{
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *result;
  WebCore::Node *v11;

  *((_DWORD *)a2 + 6) += 2;
  v6 = WTF::fastMalloc((WTF *)0x110);
  v7 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v7 + 6) += 2;
  v11 = v7;
  *(_QWORD *)WebCore::EditCommand::EditCommand(v6, (uint64_t *)&v11, 59) = off_1E33A9E80;
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  *(_QWORD *)v6 = off_1E33ADDF0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 256) = a2;
  *(_DWORD *)(v6 + 264) = a3;
  v11 = (WebCore::Node *)v6;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v11);
  result = v11;
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --*((_DWORD *)v11 + 2);
  }
  return result;
}

uint64_t WebCore::isLegacyAppleStyleSpan(uint64_t this, const WebCore::Node *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;

  if (!this)
    return this;
  if ((*(_WORD *)(this + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(this + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
  {
    return 0;
  }
  v3 = *(_QWORD *)(this + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_7:
        v6 = v6;
        v7 = (WTF **)(v5 + 8);
        while (1)
        {
          v8 = (uint64_t)*(v7 - 1);
          if (v8 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            goto LABEL_17;
          }
          v7 += 2;
          if (!--v6)
          {
            v7 = (WTF **)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_7;
    }
  }
  v7 = (WTF **)MEMORY[0x1E0CBF2F8];
LABEL_17:
  {
    v9 = (const WTF::StringImpl *)WebCore::styleSpanClassString(void)::styleSpanClassString;
  }
  else
  {
    v10 = v7;
    WTF::String::String((WTF::String *)&v11, "Apple-style-span");
    v7 = v10;
    v9 = (const WTF::StringImpl *)v11;
    WebCore::styleSpanClassString(void)::styleSpanClassString = v11;
  }
  return WTF::equal(*v7, v9, a3);
}

BOOL WebCore::hasNoAttributeOrOnlyStyleAttribute(WebCore::StyledElement *this, unsigned __int8 *a2, const WTF::StringImpl *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  const WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  WTF::String *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return 1;
  v6 = (int)a2;
  if ((*(_BYTE *)(v5 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, a2, a5, (uint64_t)a3, a4);
  if ((*((_WORD *)this + 14) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes(this);
  v8 = *((_QWORD *)this + 13);
  if (!v8)
    return 1;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
  {
    LODWORD(v11) = *(_DWORD *)(v8 + 52);
    if ((_DWORD)v11)
    {
      v10 = *(_QWORD *)(v8 + 40);
      goto LABEL_10;
    }
    return 1;
  }
  if (v9 < 0x20)
    return 1;
  v10 = v8 + 32;
  LODWORD(v11) = v9 >> 5;
  if (!(_DWORD)v11)
  {
    v12 = (WTF **)MEMORY[0x1E0CBF2F8];
    goto LABEL_21;
  }
LABEL_10:
  v11 = v11;
  v12 = (WTF **)(v10 + 8);
  while (1)
  {
    v13 = (uint64_t)*(v12 - 1);
    if (v13 == WebCore::HTMLNames::classAttr
      || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
      && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
    {
      break;
    }
    v12 += 2;
    if (!--v11)
    {
      v12 = (WTF **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_21:
  {
    v15 = (const WTF::StringImpl *)WebCore::styleSpanClassString(void)::styleSpanClassString;
  }
  else
  {
    WTF::String::String((WTF::String *)&v26, "Apple-style-span");
    v15 = (const WTF::StringImpl *)v26;
    WebCore::styleSpanClassString(void)::styleSpanClassString = v26;
  }
  v16 = WTF::equal(*v12, v15, a3);
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v17, v18, v19))
  {
    if (!v6)
      goto LABEL_29;
    v20 = *((_QWORD *)this + 13);
    if (!v20)
      goto LABEL_29;
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
      goto LABEL_29;
    v22 = *(_DWORD *)(v21 + 4);
    if ((v22 & 8) != 0)
    {
      if (!*(_DWORD *)(v21 + 28))
      {
LABEL_29:
        if (v16)
          v16 = 2;
        else
          v16 = 1;
      }
    }
    else if (!(v22 >> 4))
    {
      goto LABEL_29;
    }
  }
  v23 = *((_QWORD *)this + 13);
  v24 = *(_DWORD *)(v23 + 4);
  if (v23 && (v24 & 1) != 0)
    v25 = *(_DWORD *)(v23 + 52);
  else
    v25 = v24 >> 5;
  return v16 == v25;
}

uint64_t WebCore::ApplyStyleCommand::ApplyStyleCommand(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  WebCore::Node *v7;
  _QWORD *v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v14;

  v7 = *(WebCore::Node **)(*(_QWORD *)(*a2 + 40) + 8);
  *((_DWORD *)v7 + 6) += 2;
  v14 = v7;
  v8 = (_QWORD *)WebCore::EditCommand::EditCommand(a1, (uint64_t *)&v14, a4);
  v8[31] = 0;
  v8[32] = 0;
  *v8 = off_1E33A9870;
  v8[33] = 0;
  v8[34] = 0;
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  *(_QWORD *)a1 = off_1E33A9688;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) &= 0xE0u;
  *(_DWORD *)(v11 + 20) = WebCore::EditingStyle::NoFontDelta;
  *(_QWORD *)(a1 + 280) = v11;
  *(_BYTE *)(a1 + 288) = 0;
  WebCore::Position::downstream(a1 + 192, (WebCore::Node *)1, a1 + 296);
  WebCore::Position::upstream(a1 + 208, (WebCore::Node *)1, a1 + 312);
  *(_BYTE *)(a1 + 328) = 1;
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 336) = v12;
  *(_BYTE *)(a1 + 344) = a3;
  *(_QWORD *)(a1 + 352) = 0;
  return a1;
}

unsigned int *WebCore::ApplyStyleCommand::updateStartEnd(WebCore::ApplyStyleCommand *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  _WORD *v6;
  int v7;
  BOOL v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  _WORD *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  _WORD *v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  _WORD *v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  WebCore::VisiblePosition *v33;
  void *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *result;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v47[2];
  char v48;
  WebCore::Node *v49[2];
  char v50;
  _BYTE v51[104];

  if (!*((_BYTE *)this + 328))
  {
    v6 = *(_WORD **)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)this + 37))
      goto LABEL_61;
    if ((*((_BYTE *)a2 + 12) & 8) == 0 && ((v7 = *((_BYTE *)a2 + 12) & 7, v7 != 4) ? (v8 = v7 == 2) : (v8 = 1), v8))
    {
      if (v6)
      {
        v9 = *((_DWORD *)v6 + 6);
        *((_DWORD *)v6 + 6) = v9 + 2;
        v10 = v6[14];
        if ((v10 & 1) != 0)
        {
          v43 = *((_QWORD *)v6 + 10);
          v12 = v43 ? *(_DWORD *)(v43 + 4) : 0;
        }
        else if ((v10 & 4) != 0 && (v11 = *((_QWORD *)v6 + 10)) != 0)
        {
          v12 = 0;
          do
          {
            ++v12;
            v11 = *(_QWORD *)(v11 + 56);
          }
          while (v11);
        }
        else
        {
          v12 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v6 + 208))(v6) ^ 1;
          v9 = *((_DWORD *)v6 + 6) - 2;
        }
        if (v9)
        {
          *((_DWORD *)v6 + 6) = v9;
        }
        else if ((v6[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = *((_DWORD *)a2 + 2);
    }
    if ((*((_BYTE *)this + 308) & 8) == 0
      && ((v13 = *((_BYTE *)this + 308) & 7, v13 != 4) ? (v14 = v13 == 2) : (v14 = 1), v14))
    {
      v15 = (_WORD *)*((_QWORD *)this + 37);
      if (v15)
      {
        v16 = *((_DWORD *)v15 + 6);
        *((_DWORD *)v15 + 6) = v16 + 2;
        v17 = v15[14];
        if ((v17 & 1) != 0)
        {
          v44 = *((_QWORD *)v15 + 10);
          v19 = v44 ? *(_DWORD *)(v44 + 4) : 0;
        }
        else if ((v17 & 4) != 0 && (v18 = *((_QWORD *)v15 + 10)) != 0)
        {
          v19 = 0;
          do
          {
            ++v19;
            v18 = *(_QWORD *)(v18 + 56);
          }
          while (v18);
        }
        else
        {
          v19 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v15 + 208))(v15) ^ 1;
          v16 = *((_DWORD *)v15 + 6) - 2;
        }
        if (v16)
        {
          *((_DWORD *)v15 + 6) = v16;
        }
        else if ((v15[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
        }
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = *((_DWORD *)this + 76);
    }
    if (v12 != v19)
      goto LABEL_61;
    if (((*((_BYTE *)this + 308) ^ *((_BYTE *)a2 + 12)) & 7) != 0)
      goto LABEL_61;
    v20 = *(_WORD **)a3;
    if (*(_QWORD *)a3 != *((_QWORD *)this + 39))
      goto LABEL_61;
    if ((*((_BYTE *)a3 + 12) & 8) == 0 && ((v21 = *((_BYTE *)a3 + 12) & 7, v21 == 4) || v21 == 2))
    {
      if (v20)
      {
        v22 = *((_DWORD *)v20 + 6);
        *((_DWORD *)v20 + 6) = v22 + 2;
        v23 = v20[14];
        if ((v23 & 1) != 0)
        {
          v45 = *((_QWORD *)v20 + 10);
          v25 = v45 ? *(_DWORD *)(v45 + 4) : 0;
        }
        else if ((v23 & 4) != 0 && (v24 = *((_QWORD *)v20 + 10)) != 0)
        {
          v25 = 0;
          do
          {
            ++v25;
            v24 = *(_QWORD *)(v24 + 56);
          }
          while (v24);
        }
        else
        {
          v25 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v20 + 208))(v20) ^ 1;
          v22 = *((_DWORD *)v20 + 6) - 2;
        }
        if (v22)
        {
          *((_DWORD *)v20 + 6) = v22;
        }
        else if ((v20[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
        }
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = *((_DWORD *)a3 + 2);
    }
    if ((*((_BYTE *)this + 324) & 8) == 0
      && ((v26 = *((_BYTE *)this + 324) & 7, v26 != 4) ? (v27 = v26 == 2) : (v27 = 1), v27))
    {
      v28 = (_WORD *)*((_QWORD *)this + 39);
      if (v28)
      {
        v29 = *((_DWORD *)v28 + 6);
        *((_DWORD *)v28 + 6) = v29 + 2;
        v30 = v28[14];
        if ((v30 & 1) != 0)
        {
          v46 = *((_QWORD *)v28 + 10);
          v32 = v46 ? *(_DWORD *)(v46 + 4) : 0;
        }
        else if ((v30 & 4) != 0 && (v31 = *((_QWORD *)v28 + 10)) != 0)
        {
          v32 = 0;
          do
          {
            ++v32;
            v31 = *(_QWORD *)(v31 + 56);
          }
          while (v31);
        }
        else
        {
          v32 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v28 + 208))(v28) ^ 1;
          v29 = *((_DWORD *)v28 + 6) - 2;
        }
        if (v29)
        {
          *((_DWORD *)v28 + 6) = v29;
        }
        else if ((v28[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v28, a2);
        }
      }
      else
      {
        v32 = 0;
      }
    }
    else
    {
      v32 = *((_DWORD *)this + 80);
    }
    if (v25 != v32 || ((*((_BYTE *)this + 324) ^ *((_BYTE *)a3 + 12)) & 7) != 0)
LABEL_61:
      *((_BYTE *)this + 328) = 1;
  }
  if ((*((_BYTE *)this + 122) & 1) == 0 && (*((_BYTE *)this + 122) & 2) != 0)
  {
    WebCore::VisiblePosition::canonicalPosition(a3, (uint64_t)v49);
    v50 = 1;
    v33 = a2;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)v49);
    v50 = 1;
    v33 = a3;
  }
  WebCore::VisiblePosition::canonicalPosition(v33, (uint64_t)v47);
  v48 = 1;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v51, (const WebCore::VisiblePosition *)v49, (const WebCore::VisiblePosition *)v47, (*((unsigned __int8 *)this + 226) >> 1) & 1);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)v51);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v51);
  v35 = v47[0];
  v47[0] = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v34);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  v36 = v49[0];
  v49[0] = 0;
  if (v36)
  {
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v34);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
  }
  v37 = *(_WORD **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v37 + 6) += 2;
  v38 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v37;
  if (v38)
  {
    if (*(_DWORD *)(v38 + 24) == 2)
    {
      if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v38, v34);
    }
    else
    {
      *(_DWORD *)(v38 + 24) -= 2;
    }
  }
  v39 = *((_DWORD *)a2 + 2);
  *((_BYTE *)this + 308) = *((_BYTE *)a2 + 12);
  *((_DWORD *)this + 76) = v39;
  v40 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v40 + 24) += 2;
  result = (unsigned int *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = v40;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v34);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v42 = *((_DWORD *)a3 + 2);
  *((_BYTE *)this + 324) = *((_BYTE *)a3 + 12);
  *((_DWORD *)this + 80) = v42;
  return result;
}

unsigned int *WebCore::ApplyStyleCommand::doApply(WebCore::ApplyStyleCommand *this)
{
  unsigned int *result;
  WTF::StringImpl *v3;
  WebCore::EditingStyle *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  char v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  unsigned __int8 v15;
  void *v16;
  WebCore::Node *v17;
  char v18;
  int v19;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  char *v25;
  WTF *v26;
  void *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  char *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  char *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  char *v36;
  WebCore::Node *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  WebCore::RenderText *v42;
  uint64_t v43;
  signed int v44;
  _BOOL4 v45;
  WebCore::Node *v46;
  char *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  char *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  WebCore::RenderText *v57;
  uint64_t v58;
  signed int v59;
  _BOOL4 v60;
  WebCore::Node *v61;
  char *v62;
  WebCore::Node *v63;
  WebCore::Node *v64;
  char *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  __int16 v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const WebCore::Position *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  int v77;
  int v78;
  WebCore::Node *v79;
  uint64_t v80;
  WebCore::Node *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  BOOL v93;
  WebCore::Node *v94;
  WebCore::Node *v95;
  int v97;
  int v98;
  __int16 v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  signed int v104;
  __int16 v105;
  WebCore::RenderText *v106;
  uint64_t v107;
  signed int v108;
  char v109;
  WebCore::ApplyStyleCommand *v110;
  WebCore::Node *v111;
  float v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  int i;
  uint64_t v121;
  WebCore::Node **v122;
  WebCore::Node *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  WebCore::Node *v129;
  uint64_t v130;
  WebCore::Node *v131;
  uint64_t v132;
  __int16 v133;
  WebCore::Node *v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  int v139;
  int v140;
  uint64_t v141;
  const WebCore::StyleProperties *v142;
  uint64_t v143;
  WebCore::Node *v144;
  float v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  int j;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  uint64_t v154;
  WebCore::MutableStyleProperties *v155;
  WTF::String *v156;
  __n128 v157;
  uint64_t v158;
  WTF::String *v159;
  __n128 v160;
  float v161;
  double v162;
  uint64_t v164;
  char v165;
  int *v166;
  int v167;
  WTF::StringImpl *v168;
  WTF::String *v169;
  __n128 v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  const WTF::StringImpl *v173;
  __n128 v174;
  uint64_t v175;
  char *v176;
  WebCore::Node *v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD **v183;
  _DWORD *v184;
  WTF *v185;
  uint64_t v187;
  uint64_t v188;
  WebCore::Node *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  WebCore::Node *v196;
  char v197;
  WebCore::Node *v198;
  WebCore::Node *v199;
  uint64_t v200;
  uint64_t v201;
  WebCore::EditingStyle *v202;
  WTF::StringImpl *v203;
  WebCore::Node *v204;
  _QWORD *v205;
  WebCore::Node *v206;
  uint64_t v207;
  WebCore::Node *v208;
  int v209;
  char v210;
  WebCore::Node *v211;
  int v212;
  char v213;

  if (*((_BYTE *)this + 288))
    return WebCore::ApplyStyleCommand::applyBlockStyle((uint64_t)this, *((Node **)this + 35));
  result = (unsigned int *)WebCore::EditingStyle::extractAndRemoveBlockProperties(*((WebCore::EditingStyle **)this + 35), (uint64_t *)&v202);
  v4 = v202;
  v5 = *((_QWORD *)v202 + 1);
  if (v5 && *(_DWORD *)(v5 + 28)
    || *((float *)v202 + 5) != *(float *)&WebCore::EditingStyle::NoFontDelta
    || (*((_BYTE *)v202 + 16) & 0x1E) != 0)
  {
    result = WebCore::ApplyStyleCommand::applyBlockStyle((uint64_t)this, (Node *)v202);
  }
  v6 = *((_QWORD *)this + 35);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v8 = *(float *)&WebCore::EditingStyle::NoFontDelta;
    if (*(_DWORD *)(v7 + 28))
    {
      v9 = *(float *)(v6 + 20);
      goto LABEL_16;
    }
  }
  else
  {
    v8 = *(float *)&WebCore::EditingStyle::NoFontDelta;
  }
  v9 = *(float *)(v6 + 20);
  if (v9 != v8 || (*(_BYTE *)(v6 + 16) & 0x1E) != 0 || *((_QWORD *)this + 42) || *((_QWORD *)this + 44))
  {
LABEL_16:
    if (v9 == v8)
      goto LABEL_45;
    if (*((_BYTE *)this + 328))
    {
      v10 = (WebCore::Node *)*((_QWORD *)this + 24);
      if (v10)
        *((_DWORD *)v10 + 6) += 2;
      v211 = v10;
      v212 = *((_DWORD *)this + 50);
      v213 = *((_BYTE *)this + 204);
      v11 = (WebCore::Node *)*((_QWORD *)this + 26);
      if (v11)
        *((_DWORD *)v11 + 6) += 2;
      v208 = v11;
      v209 = *((_DWORD *)this + 54);
      v12 = *((_BYTE *)this + 220);
    }
    else
    {
      v13 = (WebCore::Node *)*((_QWORD *)this + 37);
      if (v13)
        *((_DWORD *)v13 + 6) += 2;
      v211 = v13;
      v212 = *((_DWORD *)this + 76);
      v213 = *((_BYTE *)this + 308);
      v14 = (WebCore::Node *)*((_QWORD *)this + 39);
      if (v14)
        *((_DWORD *)v14 + 6) += 2;
      v208 = v14;
      v209 = *((_DWORD *)this + 80);
      v12 = *((_BYTE *)this + 324);
    }
    v210 = v12;
    v15 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v208, (uint64_t)&v211);
    v17 = v211;
    if (v15 != 129 && (char)v15 < 0)
    {
      v18 = v213;
      v19 = v212;
      v211 = v208;
      v212 = v209;
      v213 = v210;
      v208 = v17;
      v209 = v19;
      v17 = v211;
      v210 = v18;
    }
    if (v17)
      v20 = *((_QWORD *)v17 + 5);
    else
      v20 = 0;
    v21 = v208;
    if (v208)
    {
      v22 = *((_QWORD *)v208 + 5);
      if (!v17)
      {
LABEL_39:
        v23 = v208;
        v208 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23, v16);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
LABEL_42:
        v17 = v211;
        v211 = 0;
        if (!v17)
          goto LABEL_45;
        goto LABEL_43;
      }
    }
    else
    {
      v22 = 0;
      if (!v17)
        goto LABEL_39;
    }
    if (v20 != v22)
      goto LABEL_39;
    if ((*((_WORD *)v17 + 14) & 2) != 0)
    {
      WebCore::ApplyStyleCommand::joinChildTextNodes((unsigned int *)this, *((WebCore::Node **)v17 + 4), &v211, &v208);
      if (*((_BYTE *)this + 328))
      {
        v24 = (WebCore::Node *)*((_QWORD *)this + 24);
        if (v24)
          *((_DWORD *)v24 + 6) += 2;
        v25 = (char *)this + 200;
      }
      else
      {
        v24 = (WebCore::Node *)*((_QWORD *)this + 37);
        if (v24)
          *((_DWORD *)v24 + 6) += 2;
        v25 = (char *)this + 304;
      }
      LODWORD(v206) = *(_DWORD *)v25;
      BYTE4(v206) = v25[4];
      v28 = v211;
      v211 = v24;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v16);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      v212 = (int)v206;
      v213 = BYTE4(v206);
      if (*((_BYTE *)this + 328))
      {
        v29 = (WebCore::Node *)*((_QWORD *)this + 26);
        if (v29)
          *((_DWORD *)v29 + 6) += 2;
        v30 = (char *)this + 216;
      }
      else
      {
        v29 = (WebCore::Node *)*((_QWORD *)this + 39);
        if (v29)
          *((_DWORD *)v29 + 6) += 2;
        v30 = (char *)this + 320;
      }
      LODWORD(v206) = *(_DWORD *)v30;
      BYTE4(v206) = v30[4];
      v31 = v208;
      v208 = v29;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v31, v16);
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
      v209 = (int)v206;
      v210 = BYTE4(v206);
      v17 = v211;
      if (!v211)
        goto LABEL_39;
      v21 = v208;
    }
    if (!v21)
      goto LABEL_42;
    if ((*((_WORD *)v21 + 14) & 2) != 0)
    {
      v16 = (void *)*((_QWORD *)v21 + 4);
      if (*((void **)v17 + 4) != v16)
      {
        WebCore::ApplyStyleCommand::joinChildTextNodes((unsigned int *)this, (WebCore::Node *)v16, &v211, &v208);
        if (*((_BYTE *)this + 328))
        {
          v32 = (WebCore::Node *)*((_QWORD *)this + 24);
          if (v32)
            *((_DWORD *)v32 + 6) += 2;
          v33 = (char *)this + 200;
        }
        else
        {
          v32 = (WebCore::Node *)*((_QWORD *)this + 37);
          if (v32)
            *((_DWORD *)v32 + 6) += 2;
          v33 = (char *)this + 304;
        }
        LODWORD(v206) = *(_DWORD *)v33;
        BYTE4(v206) = v33[4];
        v34 = v211;
        v211 = v32;
        if (v34)
        {
          if (*((_DWORD *)v34 + 6) == 2)
          {
            if ((*((_WORD *)v34 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v34, v16);
          }
          else
          {
            *((_DWORD *)v34 + 6) -= 2;
          }
        }
        v212 = (int)v206;
        v213 = BYTE4(v206);
        if (*((_BYTE *)this + 328))
        {
          v35 = (WebCore::Node *)*((_QWORD *)this + 26);
          if (v35)
            *((_DWORD *)v35 + 6) += 2;
          v36 = (char *)this + 216;
        }
        else
        {
          v35 = (WebCore::Node *)*((_QWORD *)this + 39);
          if (v35)
            *((_DWORD *)v35 + 6) += 2;
          v36 = (char *)this + 320;
        }
        LODWORD(v206) = *(_DWORD *)v36;
        BYTE4(v206) = v36[4];
        v37 = v208;
        v208 = v35;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v16);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
        v209 = (int)v206;
        v210 = BYTE4(v206);
        v17 = v211;
        if (!v211)
          goto LABEL_39;
        if (!v208)
          goto LABEL_196;
      }
    }
    v38 = v213 & 7;
    if (v38 <= 4 && (((1 << v38) & 0x19) != 0 || (v17 = (WebCore::Node *)*((_QWORD *)v17 + 4)) != 0))
    {
      *((_DWORD *)v17 + 6) += 2;
      if (v38 || (*((_WORD *)v17 + 14) & 2) == 0)
        goto LABEL_116;
      v39 = v212;
      v40 = *((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL;
      if (v40)
        LODWORD(v40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 528))(v40);
      if (v39 <= (int)v40)
      {
LABEL_116:
        v45 = 0;
      }
      else
      {
        v41 = *((_WORD *)v17 + 14);
        if ((v41 & 2) != 0 && (v42 = (WebCore::RenderText *)(*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
        {
          if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A7A078);
          }
          v44 = WebCore::RenderText::caretMaxOffset(v42, (WebCore::RenderObject *)v16);
        }
        else if ((v41 & 1) != 0)
        {
          v71 = *((_QWORD *)v17 + 10);
          if (v71)
            v44 = *(_DWORD *)(v71 + 4);
          else
            v44 = 0;
        }
        else if ((v41 & 4) != 0 && (v43 = *((_QWORD *)v17 + 10)) != 0)
        {
          v44 = 0;
          do
          {
            ++v44;
            v43 = *(_QWORD *)(v43 + 56);
          }
          while (v43);
        }
        else
        {
          v44 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v17 + 208))(v17) ^ 1;
        }
        v45 = v39 < v44;
      }
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) != 0)
        {
          if (!v45)
            goto LABEL_140;
        }
        else
        {
          WebCore::Node::removedLastRef(v17, v16);
          if (!v45)
            goto LABEL_140;
        }
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
        if (!v45)
          goto LABEL_140;
      }
      WebCore::ApplyStyleCommand::splitTextAtStart(this, (const WebCore::Position *)&v211, (const WebCore::Position *)&v208);
      if (*((_BYTE *)this + 328))
      {
        v46 = (WebCore::Node *)*((_QWORD *)this + 24);
        if (v46)
          *((_DWORD *)v46 + 6) += 2;
        v47 = (char *)this + 200;
      }
      else
      {
        v46 = (WebCore::Node *)*((_QWORD *)this + 37);
        if (v46)
          *((_DWORD *)v46 + 6) += 2;
        v47 = (char *)this + 304;
      }
      LODWORD(v206) = *(_DWORD *)v47;
      BYTE4(v206) = v47[4];
      v48 = v211;
      v211 = v46;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v16);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      v212 = (int)v206;
      v213 = BYTE4(v206);
      if (*((_BYTE *)this + 328))
      {
        v49 = (WebCore::Node *)*((_QWORD *)this + 26);
        if (v49)
          *((_DWORD *)v49 + 6) += 2;
        v50 = (char *)this + 216;
      }
      else
      {
        v49 = (WebCore::Node *)*((_QWORD *)this + 39);
        if (v49)
          *((_DWORD *)v49 + 6) += 2;
        v50 = (char *)this + 320;
      }
      LODWORD(v206) = *(_DWORD *)v50;
      BYTE4(v206) = v50[4];
      v51 = v208;
      v208 = v49;
      if (v51)
      {
        if (*((_DWORD *)v51 + 6) == 2)
        {
          if ((*((_WORD *)v51 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v51, v16);
        }
        else
        {
          *((_DWORD *)v51 + 6) -= 2;
        }
      }
      v209 = (int)v206;
      v210 = BYTE4(v206);
    }
LABEL_140:
    v17 = v211;
    if (!v211)
      goto LABEL_39;
    v52 = v208;
    if (!v208)
      goto LABEL_196;
    v53 = v210 & 7;
    if (v53 > 4)
      goto LABEL_180;
    if (((1 << v53) & 0x19) == 0)
    {
      v52 = (WebCore::Node *)*((_QWORD *)v208 + 4);
      if (!v52)
        goto LABEL_180;
    }
    *((_DWORD *)v52 + 6) += 2;
    if (v53 || (*((_WORD *)v52 + 14) & 2) == 0)
      goto LABEL_156;
    v54 = v209;
    v55 = *((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL;
    if (v55)
      LODWORD(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 528))(v55);
    if (v54 <= (int)v55)
    {
LABEL_156:
      v60 = 0;
    }
    else
    {
      v56 = *((_WORD *)v52 + 14);
      if ((v56 & 2) != 0 && (v57 = (WebCore::RenderText *)(*((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195A7A098);
        }
        v59 = WebCore::RenderText::caretMaxOffset(v57, (WebCore::RenderObject *)v16);
      }
      else if ((v56 & 1) != 0)
      {
        v72 = *((_QWORD *)v52 + 10);
        if (v72)
          v59 = *(_DWORD *)(v72 + 4);
        else
          v59 = 0;
      }
      else if ((v56 & 4) != 0 && (v58 = *((_QWORD *)v52 + 10)) != 0)
      {
        v59 = 0;
        do
        {
          ++v59;
          v58 = *(_QWORD *)(v58 + 56);
        }
        while (v58);
      }
      else
      {
        v59 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v52 + 208))(v52) ^ 1;
      }
      v60 = v54 < v59;
    }
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) != 0)
      {
        if (!v60)
          goto LABEL_180;
      }
      else
      {
        WebCore::Node::removedLastRef(v52, v16);
        if (!v60)
          goto LABEL_180;
      }
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
      if (!v60)
        goto LABEL_180;
    }
    WebCore::ApplyStyleCommand::splitTextAtEnd(this, (const WebCore::Position *)&v211, (const WebCore::Position *)&v208);
    if (*((_BYTE *)this + 328))
    {
      v61 = (WebCore::Node *)*((_QWORD *)this + 24);
      if (v61)
        *((_DWORD *)v61 + 6) += 2;
      v62 = (char *)this + 200;
    }
    else
    {
      v61 = (WebCore::Node *)*((_QWORD *)this + 37);
      if (v61)
        *((_DWORD *)v61 + 6) += 2;
      v62 = (char *)this + 304;
    }
    LODWORD(v206) = *(_DWORD *)v62;
    BYTE4(v206) = v62[4];
    v63 = v211;
    v211 = v61;
    if (v63)
    {
      if (*((_DWORD *)v63 + 6) == 2)
      {
        if ((*((_WORD *)v63 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v63, v16);
      }
      else
      {
        *((_DWORD *)v63 + 6) -= 2;
      }
    }
    v212 = (int)v206;
    v213 = BYTE4(v206);
    if (*((_BYTE *)this + 328))
    {
      v64 = (WebCore::Node *)*((_QWORD *)this + 26);
      if (v64)
        *((_DWORD *)v64 + 6) += 2;
      v65 = (char *)this + 216;
    }
    else
    {
      v64 = (WebCore::Node *)*((_QWORD *)this + 39);
      if (v64)
        *((_DWORD *)v64 + 6) += 2;
      v65 = (char *)this + 320;
    }
    LODWORD(v206) = *(_DWORD *)v65;
    BYTE4(v206) = v65[4];
    v66 = v208;
    v208 = v64;
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v66, v16);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    v209 = (int)v206;
    v210 = BYTE4(v206);
LABEL_180:
    v17 = v211;
    if (!v211)
      goto LABEL_39;
    v67 = v208;
    if (v208)
    {
      if (v208 == v211)
        goto LABEL_193;
      v68 = *((_WORD *)v208 + 14);
      if ((v68 & 0xF000) == 0x9000)
      {
        if (**((WebCore::Node ***)v211 + 5) == v208
          && (*((_WORD *)v211 + 14) & 0xF000) != 0x9000
          && (*((_BYTE *)v211 + 22) & 8) != 0)
        {
          goto LABEL_193;
        }
      }
      else if ((v68 & 4) != 0
             && *((_QWORD *)v208 + 10)
             && ((*((unsigned __int8 *)v211 + 22) ^ *((unsigned __int8 *)v208 + 22)) & 8) == 0)
      {
        do
          v17 = (WebCore::Node *)*((_QWORD *)v17 + 4);
        while (v17 != v208 && v17 != 0);
        if (v17)
        {
LABEL_193:
          while (1)
          {
            v70 = *((_QWORD *)v67 + 7);
            if (v70)
              goto LABEL_252;
            v67 = (WebCore::Node *)*((_QWORD *)v67 + 4);
            if (!v67)
              goto LABEL_251;
          }
        }
      }
      if ((v68 & 4) == 0 || (v70 = *((_QWORD *)v208 + 10)) == 0)
      {
        while (1)
        {
          v70 = *((_QWORD *)v67 + 7);
          if (v70)
            break;
          v67 = (WebCore::Node *)*((_QWORD *)v67 + 4);
          if (!v67)
          {
LABEL_251:
            v70 = 0;
            goto LABEL_253;
          }
        }
      }
LABEL_252:
      *(_DWORD *)(v70 + 24) += 2;
LABEL_253:
      WebCore::Position::upstream((uint64_t)&v211, (WebCore::Node *)1, (uint64_t)&v206);
      v74 = v206;
      v206 = 0;
      v75 = v211;
      v211 = v74;
      if (v75)
      {
        if (*((_DWORD *)v75 + 6) == 2)
        {
          if ((*((_WORD *)v75 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v75, v16);
            v198 = v206;
            v212 = v207;
            v213 = BYTE4(v207);
            v206 = 0;
            if (v198)
            {
              if (*((_DWORD *)v198 + 6) == 2)
              {
                if ((*((_WORD *)v198 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v198, v16);
              }
              else
              {
                *((_DWORD *)v198 + 6) -= 2;
              }
            }
LABEL_257:
            v76 = v211;
            if (!v211)
              goto LABEL_528;
            v77 = *((_DWORD *)v211 + 6);
            v78 = v77 + 2;
            *((_DWORD *)v211 + 6) = v77 + 2;
            if (v70)
            {
              v79 = (WebCore::Node *)v70;
              if (v76 == (WebCore::Node *)v70)
                goto LABEL_526;
              v80 = 0;
              v81 = v76;
              do
              {
                v81 = (WebCore::Node *)*((_QWORD *)v81 + 4);
                ++v80;
              }
              while (v81);
              v82 = 0;
              v83 = v80 - 1;
              v84 = v70;
              do
              {
                v84 = *(_QWORD *)(v84 + 32);
                ++v82;
              }
              while (v84);
              v85 = v82 - 1;
              v86 = v82 - v80;
              v87 = v80 - v82;
              if (v83 >= v85)
                v88 = v76;
              else
                v88 = (WebCore::Node *)v70;
              if (v83 >= v85)
                v89 = (WebCore::Node *)v70;
              else
                v89 = v76;
              if (v83 >= v85)
                v86 = v87;
              if (v86)
              {
                v199 = v88;
                do
                {
                  v88 = (WebCore::Node *)*((_QWORD *)v199 + 4);
                  v90 = v199;
                  v199 = v88;
                  --v86;
                }
                while (v86);
              }
              else
              {
                v90 = 0;
              }
              if (v88 == v89)
              {
                v92 = 0;
              }
              else
              {
                v91 = v89;
                v89 = v88;
                do
                {
                  v90 = v89;
                  v92 = v91;
                  v89 = (WebCore::Node *)*((_QWORD *)v89 + 4);
                  v91 = (WebCore::Node *)*((_QWORD *)v91 + 4);
                }
                while (v89 != v91);
              }
              v93 = v83 >= v85;
              v94 = v83 < v85 ? v92 : v90;
              v95 = v93 ? v92 : v90;
              if (v89 && v94 != 0)
              {
                if (!v95)
                  goto LABEL_585;
                v97 = *((unsigned __int16 *)v94 + 14);
                v98 = *((unsigned __int16 *)v95 + 14);
                if (((v97 | v98) & 0x80) == 0)
                {
                  if (v94 == v95)
                    goto LABEL_298;
                  do
                    v94 = (WebCore::Node *)*((_QWORD *)v94 + 7);
                  while (v94 != v95 && v94 != 0);
                  if (v94)
                    goto LABEL_298;
LABEL_585:
                  v79 = v76;
                  goto LABEL_526;
                }
                if ((v97 & 0x80) == 0 && (v98 & 0x80) != 0)
                  goto LABEL_585;
              }
            }
LABEL_298:
            v100 = *((_WORD *)v76 + 14);
            if ((v100 & 2) == 0)
              goto LABEL_319;
            if ((v213 & 8) == 0 && ((v101 = v213 & 7, v101 != 4) ? (v102 = v101 == 2) : (v102 = 1), v102))
            {
              *((_DWORD *)v76 + 6) = v77 + 4;
              if ((v100 & 1) != 0)
              {
                v201 = *((_QWORD *)v76 + 10);
                v104 = v201 ? *(_DWORD *)(v201 + 4) : 0;
              }
              else if ((v100 & 4) != 0 && (v103 = *((_QWORD *)v76 + 10)) != 0)
              {
                v104 = 0;
                do
                {
                  ++v104;
                  v103 = *(_QWORD *)(v103 + 56);
                }
                while (v103);
              }
              else
              {
                v104 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v76 + 208))(v76) ^ 1;
                v78 = *((_DWORD *)v76 + 6) - 2;
              }
              if (v78)
              {
                *((_DWORD *)v76 + 6) = v78;
              }
              else if ((*((_WORD *)v76 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v76, v16);
              }
            }
            else
            {
              v104 = v212;
            }
            v105 = *((_WORD *)v76 + 14);
            if ((v105 & 2) != 0 && (v106 = (WebCore::RenderText *)(*((_QWORD *)v76 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
            {
              if ((*(_BYTE *)((*((_QWORD *)v76 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195A7AEA8);
              }
              v108 = WebCore::RenderText::caretMaxOffset(v106, (WebCore::RenderObject *)v16);
            }
            else if ((v105 & 1) != 0)
            {
              v200 = *((_QWORD *)v76 + 10);
              v108 = v200 ? *(_DWORD *)(v200 + 4) : 0;
            }
            else if ((v105 & 4) != 0 && (v107 = *((_QWORD *)v76 + 10)) != 0)
            {
              v108 = 0;
              do
              {
                ++v108;
                v107 = *(_QWORD *)(v107 + 56);
              }
              while (v107);
            }
            else
            {
              v108 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v76 + 208))(v76) ^ 1;
            }
            if (v104 >= v108)
            {
              if ((*((_WORD *)v76 + 14) & 4) != 0 && (v79 = (WebCore::Node *)*((_QWORD *)v76 + 10)) != 0
                || (v79 = (WebCore::Node *)*((_QWORD *)v76 + 7)) != 0)
              {
LABEL_537:
                v197 = 0;
                *((_DWORD *)v79 + 6) += 2;
              }
              else
              {
                v196 = v76;
                while (1)
                {
                  v196 = (WebCore::Node *)*((_QWORD *)v196 + 4);
                  if (!v196)
                    break;
                  v79 = (WebCore::Node *)*((_QWORD *)v196 + 7);
                  if (v79)
                    goto LABEL_537;
                }
                v79 = 0;
                v197 = 1;
              }
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76, v16);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
              if ((v197 & 1) != 0)
                goto LABEL_525;
              v205 = 0;
              v76 = v79;
              if (!v79)
              {
                v109 = 1;
                goto LABEL_321;
              }
            }
            else
            {
LABEL_319:
              v205 = 0;
              v79 = v76;
            }
            v109 = 0;
            *((_DWORD *)v76 + 6) += 2;
LABEL_321:
            if (v79 == (WebCore::Node *)v70)
              goto LABEL_367;
            v110 = v79;
            while (1)
            {
              if (!v110)
              {
                __break(0xC471u);
                JUMPOUT(0x195A7ADD0);
              }
              v111 = v110;
              *((_DWORD *)v110 + 6) += 2;
              v112 = WebCore::ApplyStyleCommand::computedFontSize(v110, (WebCore::Node *)v16);
              v113 = (uint64_t)v205;
              if (v205
                || (WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash((uint64_t *)&v205, 8u), (v113 = (uint64_t)v205) != 0))
              {
                v114 = *(_DWORD *)(v113 - 8);
              }
              else
              {
                v114 = 0;
              }
              v115 = 0;
              v116 = ((unint64_t)v110 + ~((_QWORD)v110 << 32)) ^ (((unint64_t)v110 + ~((_QWORD)v110 << 32)) >> 22);
              v117 = 9 * ((v116 + ~(v116 << 13)) ^ ((v116 + ~(v116 << 13)) >> 8));
              v118 = (v117 ^ (v117 >> 15)) + ~((v117 ^ (v117 >> 15)) << 27);
              v119 = (v118 >> 31) ^ v118;
              for (i = 1; ; ++i)
              {
                v121 = v119 & v114;
                v122 = (WebCore::Node **)(v113 + 16 * v121);
                v123 = *v122;
                if (*v122 == (WebCore::Node *)-1)
                {
                  v115 = v113 + 16 * v121;
                  goto LABEL_333;
                }
                if (!v123)
                {
                  if (v115)
                  {
                    *(_QWORD *)v115 = 0;
                    *(_DWORD *)(v115 + 8) = 2139095040;
                    --*((_DWORD *)v205 - 4);
                    *(_QWORD *)v115 = v111;
                  }
                  else
                  {
                    *v122 = v111;
                    v115 = v113 + 16 * v121;
                  }
                  *(float *)(v115 + 8) = v112;
                  v124 = (uint64_t)v205;
                  if (v205)
                    v125 = *((_DWORD *)v205 - 3) + 1;
                  else
                    v125 = 1;
                  *((_DWORD *)v205 - 3) = v125;
                  v126 = (*(_DWORD *)(v124 - 16) + v125);
                  v127 = *(unsigned int *)(v124 - 4);
                  if (v127 > 0x400)
                  {
                    if (v127 > 2 * v126)
                      goto LABEL_349;
LABEL_345:
                    v128 = (_DWORD)v127 << (6 * v125 >= (2 * v127));
                  }
                  else
                  {
                    if (3 * v127 > 4 * v126)
                      goto LABEL_349;
                    if ((_DWORD)v127)
                      goto LABEL_345;
                    v128 = 8;
                  }
                  WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash((uint64_t *)&v205, v128);
                  goto LABEL_349;
                }
                if (v123 == v111)
                  break;
LABEL_333:
                v119 = i + v121;
              }
              *(float *)(v113 + 16 * v121 + 8) = v112;
              if (*((_DWORD *)v111 + 6) == 2)
              {
                if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v111, v16);
              }
              else
              {
                *((_DWORD *)v111 + 6) -= 2;
              }
LABEL_349:
              if ((*((_WORD *)v111 + 14) & 4) != 0
                && (v110 = (WebCore::ApplyStyleCommand *)*((_QWORD *)v111 + 10)) != 0
                || (v110 = (WebCore::ApplyStyleCommand *)*((_QWORD *)v111 + 7)) != 0)
              {
LABEL_355:
                *((_DWORD *)v110 + 6) += 2;
              }
              else
              {
                v129 = v111;
                while (1)
                {
                  v129 = (WebCore::Node *)*((_QWORD *)v129 + 4);
                  if (!v129)
                    break;
                  v110 = (WebCore::ApplyStyleCommand *)*((_QWORD *)v129 + 7);
                  if (v110)
                    goto LABEL_355;
                }
                v110 = 0;
              }
              if (*((_DWORD *)v111 + 6) == 2)
              {
                if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v111, v16);
              }
              else
              {
                *((_DWORD *)v111 + 6) -= 2;
              }
              if (v110 == (WebCore::ApplyStyleCommand *)v70)
              {
LABEL_367:
                if (v70)
                {
                  if (*(_DWORD *)(v70 + 24) == 2)
                  {
                    if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v70, v16);
                  }
                  else
                  {
                    *(_DWORD *)(v70 + 24) -= 2;
                  }
                }
                v206 = 0;
                v207 = 0;
                if ((v109 & 1) == 0)
                  *((_DWORD *)v79 + 6) += 2;
                if (v79 != (WebCore::Node *)v70)
                {
                  v130 = 0;
                  v131 = v79;
                  while (1)
                  {
                    if (!v131)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195A7ADF0);
                    }
                    v132 = (uint64_t)v131;
                    v133 = *((_WORD *)v131 + 14);
                    if ((v133 & 0x10) != 0)
                    {
                      if (WebCore::ApplyStyleCommand::nodeFullySelected(v131, (WebCore::Element *)&v211, (const WebCore::Position *)&v208, v73))
                      {
                        v139 = 0;
                        v140 = *((_DWORD *)v131 + 6) + 2;
                        goto LABEL_398;
                      }
                      if ((*((_BYTE *)v131 + 22) & 8) == 0)
                        goto LABEL_543;
                    }
                    else if ((v133 & 2) != 0
                           && (*((_QWORD *)v131 + 8) & 0xFFFFFFFFFFFFLL) != 0
                           && v130 != *((_QWORD *)v131 + 4))
                    {
                      WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::spanTag, *((const WebCore::QualifiedName **)this + 2), 0, 0, (uint64_t *)&v204);
                      v134 = v204;
                      *((_DWORD *)v204 + 6) += 2;
                      v203 = v134;
                      v135 = WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(this, (uint64_t)v131, (uint64_t)v131, (uint64_t *)&v203);
                      if (v203)
                      {
                        if (*((_DWORD *)v203 + 6) == 2)
                        {
                          if ((*((_WORD *)v203 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v203, v16);
                        }
                        else
                        {
                          *((_DWORD *)v203 + 6) -= 2;
                        }
                      }
                      if (v135)
                      {
                        if (v70)
                        {
                          v136 = *(_WORD *)(v70 + 28);
                          if ((v136 & 0xF000) == 0x9000)
                          {
                            if (**(_QWORD **)(v132 + 40) == v70
                              && (*(_WORD *)(v132 + 28) & 0xF000) != 0x9000
                              && (*(_BYTE *)(v132 + 22) & 8) != 0)
                            {
                              goto LABEL_395;
                            }
                          }
                          else if ((v136 & 4) != 0
                                 && *(_QWORD *)(v70 + 80)
                                 && ((*(unsigned __int8 *)(v132 + 22) ^ *(unsigned __int8 *)(v70 + 22)) & 8) == 0)
                          {
                            v137 = v132;
                            do
                              v137 = *(_QWORD *)(v137 + 32);
                            while (v137 != v70 && v137 != 0);
                            if (v137)
                            {
LABEL_395:
                              v139 = 1;
                              goto LABEL_504;
                            }
                          }
                        }
                        v188 = *(_QWORD *)(v132 + 32);
                        if (!v188)
                          goto LABEL_395;
                        v139 = (*(_WORD *)(v188 + 28) & 8) == 0;
LABEL_504:
                        v131 = v204;
                        v140 = *(_DWORD *)(v132 + 24);
LABEL_398:
                        *(_DWORD *)(v132 + 24) = v140 + 2;
                        if (v130)
                        {
                          if (*(_DWORD *)(v130 + 24) == 2)
                          {
                            if ((*(_WORD *)(v130 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v130, v16);
                          }
                          else
                          {
                            *(_DWORD *)(v130 + 24) -= 2;
                          }
                        }
                        v141 = *((_QWORD *)v131 + 13);
                        if (v141 && (v142 = *(const WebCore::StyleProperties **)(v141 + 8)) != 0)
                        {
                          v143 = WTF::fastMalloc((WTF *)0x60);
                          WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v143, v142);
                        }
                        else
                        {
                          v143 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v143 = 0x900000001;
                          *(_QWORD *)(v143 + 8) = 0;
                          *(_QWORD *)(v143 + 16) = v143 + 32;
                          *(_QWORD *)(v143 + 24) = 4;
                        }
                        v145 = WebCore::ApplyStyleCommand::computedFontSize((WebCore::ApplyStyleCommand *)v132, v144);
                        v146 = (uint64_t)v205;
                        if (v205)
                        {
                          v147 = *((_DWORD *)v205 - 2);
                          v148 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v132);
                          for (j = 0; ; v148 = j + v150)
                          {
                            v150 = v148 & v147;
                            v151 = *(_QWORD *)(v146 + 16 * v150);
                            if (v151 != -1)
                            {
                              if (!v151)
                                goto LABEL_413;
                              if (v151 == v132)
                                break;
                            }
                            ++j;
                          }
                          v152 = *(float *)(v146 + 16 * v150 + 8);
                        }
                        else
                        {
LABEL_413:
                          v152 = INFINITY;
                        }
                        v153 = *(float *)(v6 + 20);
                        WebCore::StyleProperties::getPropertyCSSValue(v143, 13, &v204);
                        if (v204)
                        {
                          v154 = *((_QWORD *)v131 + 13);
                          if (v154)
                          {
                            if (*(_QWORD *)(v154 + 8))
                            {
                              v155 = WebCore::StyledElement::ensureMutableInlineStyle(v131, (WTF::StringImpl *)v16);
                              if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v155, (WTF::StringImpl *)0xD, 0, v156, v157))
                              {
                                WebCore::StyledElement::inlineStyleChanged(v131, (uint64_t)v16, v158, v159, v160);
                              }
                            }
                          }
                          v145 = WebCore::ApplyStyleCommand::computedFontSize((WebCore::ApplyStyleCommand *)v132, (WebCore::Node *)v16);
                        }
                        v161 = fmaxf(v152 + v153, 0.1);
                        if (v145 != v161)
                        {
                          v162 = v161;
                          if ((int)v161 <= 0xFF
                            && *(_QWORD *)&v162 == COERCE__INT64((double)(int)v161))
                          {
                            v166 = &WebCore::staticCSSValuePool[4 * (int)v161];
                            v167 = v166[16];
                            v164 = (uint64_t)(v166 + 16);
                            *(_DWORD *)v164 = v167 + 2;
                          }
                          else
                          {
                            v164 = WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v164 = 2;
                            v165 = *(_BYTE *)(v164 + 6);
                            *(_WORD *)(v164 + 4) = 6;
                            *(_BYTE *)(v164 + 6) = v165 & 0xFC;
                            *(double *)(v164 + 8) = v162;
                          }
                          v203 = (WTF::StringImpl *)v164;
                          WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v143, 13, (_DWORD **)&v203, 0);
                          v171 = v203;
                          v203 = 0;
                          if (v171)
                          {
                            if (*(_DWORD *)v171 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v171, v168);
                            else
                              *(_DWORD *)v171 -= 2;
                          }
                          WebCore::StyleProperties::asTextAtom((WebCore::StyleProperties *)v143, (unsigned __int8 *)v168, v169, (WTF::AtomString *)&v203, v170);
                          WebCore::CompositeEditCommand::setNodeAttribute(this, v131, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v203);
                          v172 = v203;
                          v203 = 0;
                          if (v172)
                          {
                            if (*(_DWORD *)v172 == 2)
                              WTF::StringImpl::destroy(v172, (WTF::StringImpl *)v16);
                            else
                              *(_DWORD *)v172 -= 2;
                          }
                        }
                        if (!*(_DWORD *)(v143 + 28))
                        {
                          WebCore::CompositeEditCommand::setNodeAttribute(this, v131, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, MEMORY[0x1E0CBF2F8]);
                          if ((*((_WORD *)v131 + 14) & 0x10) != 0
                            && *(_QWORD *)(*((_QWORD *)v131 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24)
                            && WebCore::hasNoAttributeOrOnlyStyleAttribute(v131, (unsigned __int8 *)1, v173, v73, v174))
                          {
                            v203 = v131;
                            LODWORD(v175) = HIDWORD(v207);
                            if (HIDWORD(v207) == (_DWORD)v207)
                            {
                              v176 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v206, HIDWORD(v207) + 1, (unint64_t)&v203);
                              v175 = HIDWORD(v207);
                              v177 = v206;
                              v178 = *(_QWORD *)v176;
                              *(_QWORD *)v176 = 0;
                              *((_QWORD *)v177 + v175) = v178;
                            }
                            else
                            {
                              v203 = 0;
                              *((_QWORD *)v206 + HIDWORD(v207)) = v131;
                            }
                            HIDWORD(v207) = v175 + 1;
                            v179 = v203;
                            v203 = 0;
                            if (v179)
                            {
                              if (*((_DWORD *)v179 + 6) == 2)
                              {
                                if ((*((_WORD *)v179 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v179, v16);
                              }
                              else
                              {
                                *((_DWORD *)v179 + 6) -= 2;
                              }
                            }
                            v131 = 0;
                          }
                        }
                        if (v204)
                        {
                          if (*(_DWORD *)v204 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v204, (WTF::StringImpl *)v16);
                          else
                            *(_DWORD *)v204 -= 2;
                        }
                        if (*(_DWORD *)v143 == 1)
                        {
                          v181 = *(unsigned int *)(v143 + 28);
                          if ((_DWORD)v181)
                          {
                            v182 = 16 * v181;
                            v183 = (_DWORD **)(*(_QWORD *)(v143 + 16) + 8);
                            do
                            {
                              v184 = *v183;
                              *v183 = 0;
                              if (v184)
                              {
                                if (*v184 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v184, (WTF::StringImpl *)v16);
                                else
                                  *v184 -= 2;
                              }
                              v183 += 2;
                              v182 -= 16;
                            }
                            while (v182);
                          }
                          v185 = *(WTF **)(v143 + 16);
                          if ((WTF *)(v143 + 32) != v185 && v185 != 0)
                          {
                            *(_QWORD *)(v143 + 16) = 0;
                            *(_DWORD *)(v143 + 24) = 0;
                            WTF::fastFree(v185, v16);
                          }
                          v187 = *(_QWORD *)(v143 + 8);
                          *(_QWORD *)(v143 + 8) = 0;
                          if (v187)
                            (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
                          WTF::fastFree((WTF *)v143, v16);
                          if (v131)
                          {
LABEL_454:
                            if (*((_DWORD *)v131 + 6) == 2)
                            {
                              if ((*((_WORD *)v131 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v131, v16);
                            }
                            else
                            {
                              *((_DWORD *)v131 + 6) -= 2;
                            }
                          }
                        }
                        else
                        {
                          --*(_DWORD *)v143;
                          if (v131)
                            goto LABEL_454;
                        }
                        v130 = v132;
                        goto LABEL_457;
                      }
                      if (v204)
                      {
                        if (*((_DWORD *)v204 + 6) == 2)
                        {
                          if ((*((_WORD *)v204 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v204, v16);
                        }
                        else
                        {
                          *((_DWORD *)v204 + 6) -= 2;
                        }
                      }
                    }
                    v139 = 0;
LABEL_457:
                    if ((*(_WORD *)(v132 + 28) & 4) != 0 && (v131 = *(WebCore::Node **)(v132 + 80)) != 0
                      || (v131 = *(WebCore::Node **)(v132 + 56)) != 0)
                    {
LABEL_463:
                      *((_DWORD *)v131 + 6) += 2;
                    }
                    else
                    {
                      v180 = v132;
                      while (1)
                      {
                        v180 = *(_QWORD *)(v180 + 32);
                        if (!v180)
                          break;
                        v131 = *(WebCore::Node **)(v180 + 56);
                        if (v131)
                          goto LABEL_463;
                      }
                      v131 = 0;
                    }
                    if (*(_DWORD *)(v132 + 24) == 2)
                    {
                      if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v132, v16);
                    }
                    else
                    {
                      *(_DWORD *)(v132 + 24) -= 2;
                    }
                    if (((v131 != (WebCore::Node *)v70) & ~v139) == 0)
                      goto LABEL_506;
                  }
                }
                v130 = 0;
                v131 = (WebCore::Node *)v70;
LABEL_506:
                v132 = (uint64_t)v131;
                if (v131)
                {
LABEL_543:
                  if (*(_DWORD *)(v132 + 24) == 2)
                  {
                    if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v132, v16);
                  }
                  else
                  {
                    *(_DWORD *)(v132 + 24) -= 2;
                  }
                }
                if (HIDWORD(v207))
                {
                  v189 = v206;
                  v190 = 8 * HIDWORD(v207);
                  do
                  {
                    v191 = *(_QWORD *)v189;
                    v189 = (WebCore::Node *)((char *)v189 + 8);
                    WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v191, 1);
                    v190 -= 8;
                  }
                  while (v190);
                }
                if (v130)
                {
                  if (*(_DWORD *)(v130 + 24) == 2)
                  {
                    if ((*(_WORD *)(v130 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v130, v16);
                  }
                  else
                  {
                    *(_DWORD *)(v130 + 24) -= 2;
                  }
                }
                WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v206, v16);
                v192 = (uint64_t)v205;
                if (v205)
                {
                  v193 = *((unsigned int *)v205 - 1);
                  if ((_DWORD)v193)
                  {
                    v194 = v205;
                    do
                    {
                      v195 = *v194;
                      if (*v194 != -1)
                      {
                        *v194 = 0;
                        if (v195)
                        {
                          if (*(_DWORD *)(v195 + 24) == 2)
                          {
                            if ((*(_WORD *)(v195 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v195, v16);
                          }
                          else
                          {
                            *(_DWORD *)(v195 + 24) -= 2;
                          }
                        }
                      }
                      v194 += 2;
                      --v193;
                    }
                    while (v193);
                  }
                  WTF::fastFree((WTF *)(v192 - 16), v16);
                }
LABEL_525:
                if (v79)
                {
LABEL_526:
                  if (*((_DWORD *)v79 + 6) == 2)
                  {
                    if ((*((_WORD *)v79 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v79, v16);
                  }
                  else
                  {
                    *((_DWORD *)v79 + 6) -= 2;
                  }
                }
LABEL_528:
                if (v70)
                {
                  if (*(_DWORD *)(v70 + 24) == 2)
                  {
                    if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v70, v16);
                  }
                  else
                  {
                    *(_DWORD *)(v70 + 24) -= 2;
                  }
                }
                goto LABEL_39;
              }
            }
          }
        }
        else
        {
          *((_DWORD *)v75 + 6) -= 2;
        }
      }
      v212 = v207;
      v213 = BYTE4(v207);
      goto LABEL_257;
    }
LABEL_196:
    v211 = 0;
LABEL_43:
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
LABEL_45:
    result = WebCore::ApplyStyleCommand::applyInlineStyle((uint64_t)this, *((uint64_t **)this + 35));
    v4 = v202;
    if (!v202)
      return result;
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::EditingStyle::~EditingStyle(v4, v3);
    return (unsigned int *)WTF::fastFree(v26, v27);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

unsigned int *WebCore::ApplyStyleCommand::applyBlockStyle(uint64_t a1, Node *a2)
{
  uint64_t v4;
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  char v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  unsigned __int8 v11;
  WebCore::Node *v12;
  char v13;
  int v14;
  unsigned int v15;
  void *v16;
  Node *v17;
  Node *var0;
  WebCore::Node *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Node *v24;
  unsigned int var1;
  WebCore::Node *v26;
  unsigned int v27;
  Node *v28;
  void *v29;
  uint64_t v30;
  Node *v31;
  Node *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  Node *v36;
  void *v37;
  Node *v38;
  void *v40;
  _BOOL4 v41;
  Node *v42;
  void *v43;
  Node *v44;
  WebCore::Node *v45;
  void *v46;
  Node *v47;
  uint64_t (*v48)();
  Node *v49;
  unint64_t v50;
  Node *v51;
  WebCore::Node *v52;
  Node *v53;
  int v54;
  int v55;
  char v56;
  WebCore::Node *v57;
  uint64_t v58;
  void *v59;
  WebCore::Node *v60;
  Node *v61;
  WebCore::Node *v62;
  uint64_t (*v63)();
  BOOL v64;
  unsigned int *v65;
  BOOL *v66;
  Node *v67;
  void *v68;
  Node *v69;
  Node *v70;
  void *v71;
  Node *v72;
  unsigned __int8 v73;
  int v74;
  int v75;
  WebCore::Node *v76;
  int v77;
  int v78;
  char v79;
  WebCore::Node *v80;
  int v81;
  __int16 v82;
  WebCore::Node *v83;
  int v84;
  WebCore::Node *v86;
  unsigned int v87;
  int v88;
  int v89;
  void *v90;
  Node *v91;
  int v92;
  BOOL v93;
  __int16 v94;
  char v95;
  void *v96;
  Node *v97;
  WebCore::Node *v99;
  Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  __int16 v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  int v106;
  uint64_t (*v108)();
  Node *v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  WebCore::Node *v112;
  WebCore::Node *v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  Node *v116;
  uint64_t v117;
  WebCore::Node *v118;
  WTF::String *v119;
  __n128 v120;
  uint64_t v121;
  WTF::String *v122;
  __n128 v123;
  uint64_t *Attribute;
  WTF::StringImpl *v125;
  Node *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  Node *v129;
  Node *v130;
  WebCore::Node *v131;
  uint64_t v132;
  WebCore::Node *v133;
  WebCore::Node *v134;
  void *v135;
  Node *v136;
  WebCore::Node *v137;
  uint64_t v138;
  uint64_t (*v139)();
  int v140;
  Node *v141;
  Node *v142;
  int v143;
  BOOL v144;
  int v145;
  BOOL v146;
  uint64_t v147;
  _WORD *v148;
  uint64_t v149;
  uint64_t v150;
  _WORD *v151;
  char *v152;
  int8x16_t *v153;
  uint64_t v154;
  unsigned int v155;
  size_t v156;
  _BYTE *v157;
  _BYTE *v158;
  size_t v159;
  _BYTE *v160;
  int v161;
  Node *v162;
  char *v163;
  char *v164;
  __int16 v165;
  int8x16_t *v166;
  VisiblePosition *v167;
  __int16 v168;
  char *v169;
  int8x16_t v170;
  int8x16_t v171;
  char *v172;
  char *v173;
  char *v174;
  VisiblePosition *p_dst;
  int8x16_t v176;
  int8x16_t v177;
  char *v178;
  char *p_var1;
  char *v180;
  void *v181;
  Node *v182;
  int v183;
  char v184;
  void *v185;
  Node *v186;
  unsigned int v187;
  Node *v188;
  int v189;
  void *v190;
  char v191;
  WebCore::Node *v192;
  WebCore::Node *v193;
  WebCore::Node *v194;
  WebCore::Node *v195;
  WebCore::Node *v196;
  WebCore::Node *v197;
  WebCore::Node *v198;
  WebCore::Node *v199;
  WebCore::Node *v200;
  WebCore::Node *v201;
  WebCore::Node *v202;
  unsigned int *result;
  void *v204;
  void *v205;
  WebCore::Node *v206;
  WebCore::Node *v207;
  WebCore::Node *v208;
  WebCore::Node *v209;
  char v210;
  unint64_t v211;
  unint64_t v212;
  WebCore::Node *v213;
  WebCore::Node *v214;
  WebCore::Node *v215;
  unsigned int v216;
  char v217;
  WebCore::Node *v218;
  WebCore::StyleProperties *v219;
  unsigned int v220;
  char v221;
  WebCore::Node *v222[3];
  WebCore::Node *v223;
  unsigned int v224;
  char v225;
  BOOL v226;
  WebCore::Node *v227;
  unsigned int v228;
  char v229;
  BOOL v230;
  WebCore::Node *v231;
  unsigned int v232;
  WebCore::Node *v233;
  int v234;
  WebCore::Node *v235;
  WebCore::Node *v236;
  unsigned int v237;
  char v238;
  BOOL v239;
  WebCore::Node *v240;
  unsigned int v241;
  char v242;
  char v243;
  WebCore::Node *v244;
  int v245;
  char v246;
  WebCore::Node *v247;
  int v248;
  char v249;
  WebCore::Node *v250;
  int v251;
  char v252;
  WebCore::Node *v253;
  WebCore::Node *v254;
  WebCore::Node *v255;
  WebCore::Node *v256;
  WebCore::Node *v257;
  char v258;
  WebCore::Node *v259;
  unsigned int v260;
  char v261;
  BOOL v262;
  WebCore::Node *v263;
  uint64_t v264;
  uint64_t v265;
  VisiblePosition v266;
  VisiblePosition v267;
  unsigned __int8 v268[16];
  char v269;
  VisiblePosition __dst;
  unsigned int v271;
  char v272;
  uint64_t v273;
  int8x16x2_t v274;
  int8x16x2_t v275;
  int8x16x2_t v276;
  int8x16x2_t v277;
  int8x16x2_t v278;
  int8x16x2_t v279;
  int8x16x2_t v280;
  int8x16x2_t v281;

  v273 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 2u, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    v6 = *(WebCore::Node **)(a1 + 192);
    if (v6)
      *((_DWORD *)v6 + 6) += 2;
    v247 = v6;
    v248 = *(_DWORD *)(a1 + 200);
    v249 = *(_BYTE *)(a1 + 204);
    v7 = *(WebCore::Node **)(a1 + 208);
    if (v7)
      *((_DWORD *)v7 + 6) += 2;
    v244 = v7;
    v245 = *(_DWORD *)(a1 + 216);
    v8 = *(_BYTE *)(a1 + 220);
  }
  else
  {
    v9 = *(WebCore::Node **)(a1 + 296);
    if (v9)
      *((_DWORD *)v9 + 6) += 2;
    v247 = v9;
    v248 = *(_DWORD *)(a1 + 304);
    v249 = *(_BYTE *)(a1 + 308);
    v10 = *(WebCore::Node **)(a1 + 312);
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v244 = v10;
    v245 = *(_DWORD *)(a1 + 320);
    v8 = *(_BYTE *)(a1 + 324);
  }
  v246 = v8;
  v11 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v244, (uint64_t)&v247);
  if (v11 != 129 && (char)v11 < 0)
  {
    v12 = v247;
    v13 = v249;
    v14 = v248;
    v247 = v244;
    v248 = v245;
    v249 = v246;
    v244 = v12;
    v245 = v14;
    v246 = v13;
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v247, (uint64_t)&v240);
  v15 = 1;
  v243 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v244, (uint64_t)&v236);
  v239 = 1;
  v17 = (Node *)v240;
  if (v240 && (*((_BYTE *)v240 + 22) & 8) != 0)
  {
    if (!v236)
      goto LABEL_535;
    if ((*((_BYTE *)v236 + 22) & 8) != 0)
    {
      *((_DWORD *)v240 + 6) += 2;
      __dst.var0.var0.var0 = v17;
      __dst.var0.var1 = v241;
      *((_BYTE *)&__dst.var0 + 12) = v242;
      WebCore::highestEditableRoot((uint64_t)&__dst, 0, (uint64_t *)&v235);
      var0 = __dst.var0.var0.var0;
      __dst.var0.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 6) == 2)
        {
          if ((*((_WORD *)var0 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)var0, v16);
        }
        else
        {
          *((_DWORD *)var0 + 6) -= 2;
        }
      }
      v19 = v235;
      if (v235)
      {
        *((_DWORD *)v235 + 6) += 4;
        v20 = *((_WORD *)v19 + 14);
        if ((v20 & 1) != 0)
        {
          v22 = *((_QWORD *)v19 + 10);
          if (v22)
            LODWORD(v22) = *(_DWORD *)(v22 + 4);
        }
        else if ((v20 & 4) != 0 && (v21 = *((_QWORD *)v19 + 10)) != 0)
        {
          LODWORD(v22) = 0;
          do
          {
            LODWORD(v22) = v22 + 1;
            v21 = *(_QWORD *)(v21 + 56);
          }
          while (v21);
        }
        else
        {
          LODWORD(v22) = 0;
        }
        v231 = v19;
        v232 = 0;
        v233 = v19;
        v234 = v22;
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v240, (uint64_t)&v236, (uint64_t)&__dst);
        if (!v272)
        {
          __break(1u);
          goto LABEL_606;
        }
        v24 = __dst.var0.var0.var0;
        var1 = __dst.var0.var1;
        v26 = *(WebCore::Node **)&__dst.var1;
        v27 = v271;
        v28 = (Node *)v231;
        *((_DWORD *)v231 + 6) += 2;
        __dst.var0.var0.var0 = v28;
        __dst.var0.var1 = v232;
        *((_DWORD *)v24 + 6) += 2;
        v214 = (WebCore::Node *)v24;
        *(_QWORD *)&__dst.var1 = v24;
        v271 = var1;
        v211 = WebCore::characterCount((int *)&__dst, 1);
        v30 = *(_QWORD *)&__dst.var1;
        *(_QWORD *)&__dst.var1 = 0;
        if (v30)
        {
          if (*(_DWORD *)(v30 + 24) == 2)
          {
            if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v30, v29);
          }
          else
          {
            *(_DWORD *)(v30 + 24) -= 2;
          }
        }
        v31 = __dst.var0.var0.var0;
        __dst.var0.var0.var0 = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 6) == 2)
          {
            if ((*((_WORD *)v31 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31, v29);
          }
          else
          {
            *((_DWORD *)v31 + 6) -= 2;
          }
        }
        v32 = (Node *)v231;
        *((_DWORD *)v231 + 6) += 2;
        __dst.var0.var0.var0 = v32;
        __dst.var0.var1 = v232;
        *((_DWORD *)v26 + 6) += 2;
        *(_QWORD *)&__dst.var1 = v26;
        v271 = v27;
        v34 = WebCore::characterCount((int *)&__dst, 1);
        v35 = *(_QWORD *)&__dst.var1;
        *(_QWORD *)&__dst.var1 = 0;
        if (v35)
        {
          if (*(_DWORD *)(v35 + 24) == 2)
          {
            if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v35, v33);
          }
          else
          {
            *(_DWORD *)(v35 + 24) -= 2;
          }
        }
        v36 = __dst.var0.var0.var0;
        __dst.var0.var0.var0 = 0;
        if (v36)
        {
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v36, v33);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        WebCore::startOfParagraph((uint64_t)&v240, 1, &v227);
        WebCore::endOfParagraph((WebCore::Node *)&v227, 1, &__dst);
        WebCore::VisiblePosition::next((unsigned __int8 *)&__dst, 0, 0, (uint64_t)&v223);
        v38 = __dst.var0.var0.var0;
        __dst.var0.var0.var0 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v38, v37);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        if (!WebCore::operator==((uint64_t *)&v236, (uint64_t *)&v240))
        {
          if (v236
             ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
             : 0)
          {
            WebCore::startOfParagraph((uint64_t)&v236, 1, &__dst);
            v41 = WebCore::operator==((uint64_t *)&v236, (uint64_t *)&__dst);
            v42 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            if (v42)
            {
              if (*((_DWORD *)v42 + 6) == 2)
              {
                if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v42, v40);
              }
              else
              {
                *((_DWORD *)v42 + 6) -= 2;
              }
            }
            if (v41)
            {
              WebCore::VisiblePosition::previous(&v236, 1, 0, (uint64_t)&__dst);
              v44 = __dst.var0.var0.var0;
              __dst.var0.var0.var0 = 0;
              v45 = v236;
              v236 = (WebCore::Node *)v44;
              if (v45)
              {
                if (*((_DWORD *)v45 + 6) == 2)
                {
                  if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v45, v43);
                }
                else
                {
                  *((_DWORD *)v45 + 6) -= 2;
                }
              }
              v237 = __dst.var0.var1;
              v238 = *((_BYTE *)&__dst.var0 + 12);
              v239 = __dst.var1;
            }
          }
        }
        WebCore::endOfParagraph((WebCore::Node *)&v236, 1, &__dst);
        WebCore::VisiblePosition::next((unsigned __int8 *)&__dst, 0, 0, (uint64_t)v222);
        v47 = __dst.var0.var0.var0;
        __dst.var0.var0.var0 = 0;
        if (v47)
        {
          if (*((_DWORD *)v47 + 6) == 2)
          {
            if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v47, v46);
          }
          else
          {
            *((_DWORD *)v47 + 6) -= 2;
          }
        }
        v212 = v34;
        v213 = v26;
        if (v227)
          v48 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v48 = 0;
        if (v48)
        {
          while (1)
          {
            if (WebCore::operator==((uint64_t *)&v227, (uint64_t *)v222))
              goto LABEL_490;
            v49 = (Node *)v227;
            if (v227)
              *((_DWORD *)v227 + 6) += 2;
            __dst.var0.var0.var0 = v49;
            __dst.var0.var1 = v228;
            *((_BYTE *)&__dst.var0 + 12) = v229;
            WebCore::StyleChange::StyleChange((WebCore::StyleChange *)&v219, (WebCore::EditingStyle *)a2, (const WebCore::Position *)&__dst);
            v51 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            if (v51)
            {
              if (*((_DWORD *)v51 + 6) == 2)
              {
                if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v51, (void *)v50);
              }
              else
              {
                *((_DWORD *)v51 + 6) -= 2;
              }
            }
            if (v219 || *(_BYTE *)(a1 + 344))
              break;
LABEL_343:
            v133 = v223;
            if (v223)
              *((_DWORD *)v223 + 6) += 2;
            v134 = v227;
            v227 = v133;
            if (v134)
            {
              if (*((_DWORD *)v134 + 6) == 2)
              {
                if ((*((_WORD *)v134 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v134, (void *)v50);
              }
              else
              {
                *((_DWORD *)v134 + 6) -= 2;
              }
            }
            v228 = v224;
            v229 = v225;
            v230 = v226;
            WebCore::endOfParagraph((WebCore::Node *)&v227, 1, v268);
            WebCore::VisiblePosition::next(v268, 0, 0, (uint64_t)&__dst);
            v136 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            v137 = v223;
            v223 = (WebCore::Node *)v136;
            if (v137)
            {
              if (*((_DWORD *)v137 + 6) == 2)
              {
                if ((*((_WORD *)v137 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v137, v135);
                  v141 = __dst.var0.var0.var0;
                  v224 = __dst.var0.var1;
                  v225 = *((_BYTE *)&__dst.var0 + 12);
                  v226 = __dst.var1;
                  __dst.var0.var0.var0 = 0;
                  if (v141)
                  {
                    if (*((_DWORD *)v141 + 6) == 2)
                    {
                      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v141, v135);
                    }
                    else
                    {
                      *((_DWORD *)v141 + 6) -= 2;
                    }
                  }
                  goto LABEL_352;
                }
              }
              else
              {
                *((_DWORD *)v137 + 6) -= 2;
              }
            }
            v224 = __dst.var0.var1;
            v225 = *((_BYTE *)&__dst.var0 + 12);
            v226 = __dst.var1;
            __dst.var0.var0.var0 = 0;
LABEL_352:
            v138 = *(_QWORD *)v268;
            *(_QWORD *)v268 = 0;
            if (v138)
            {
              if (*(_DWORD *)(v138 + 24) == 2)
              {
                if ((*(_WORD *)(v138 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v138, v135);
              }
              else
              {
                *(_DWORD *)(v138 + 24) -= 2;
              }
            }
            WebCore::StyleChange::~StyleChange((WebCore::StyleChange *)&v219, (WTF::StringImpl *)v135);
            if (v227)
              v139 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v139 = 0;
            if (!v139)
              goto LABEL_490;
          }
          v52 = v227;
          if (v227)
            *((_DWORD *)v227 + 6) += 4;
          v218 = v52;
          WebCore::enclosingBlock((uint64_t *)&v218, (WebCore::Node *)1, (WebCore::Node **)&__dst);
          v53 = __dst.var0.var0.var0;
          v218 = 0;
          if (!v52)
          {
LABEL_87:
            if (*(_BYTE *)(a1 + 344))
              goto LABEL_88;
            v57 = v227;
            if (!v227)
              goto LABEL_88;
            *((_DWORD *)v227 + 6) += 2;
            v215 = v57;
            v216 = v228;
            v217 = v229;
            v58 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(v58 + 24) += 2;
            WebCore::Document::updateLayout(v58, 2u, 0);
            if (*(_DWORD *)(v58 + 24) == 2)
            {
              if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v58, v59);
            }
            else
            {
              *(_DWORD *)(v58 + 24) -= 2;
            }
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v215, (uint64_t)v268);
            v269 = 1;
            WebCore::startOfParagraph((uint64_t)v268, 1, &v267);
            WebCore::endOfParagraph((WebCore::Node *)v268, 1, &v266);
            v60 = 0;
            v61 = v266.var0.var0.var0;
            if (!v267.var0.var0.var0 || !v266.var0.var0.var0)
            {
LABEL_299:
              v266.var0.var0.var0 = 0;
              if (v61)
              {
                if (*((_DWORD *)v61 + 6) == 2)
                {
                  if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v61, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v61 + 6) -= 2;
                }
              }
              v116 = v267.var0.var0.var0;
              v267.var0.var0.var0 = 0;
              if (v116)
              {
                if (*((_DWORD *)v116 + 6) == 2)
                {
                  if ((*((_WORD *)v116 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v116, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v116 + 6) -= 2;
                }
              }
              v117 = *(_QWORD *)v268;
              *(_QWORD *)v268 = 0;
              if (v117)
              {
                if (*(_DWORD *)(v117 + 24) == 2)
                {
                  if ((*(_WORD *)(v117 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v117, (void *)v50);
                }
                else
                {
                  *(_DWORD *)(v117 + 24) -= 2;
                }
              }
              v118 = v215;
              v215 = 0;
              if (v118)
              {
                if (*((_DWORD *)v118 + 6) == 2)
                {
                  if ((*((_WORD *)v118 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v118, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v118 + 6) -= 2;
                }
              }
              if (v60)
              {
                *((_DWORD *)v60 + 6) += 2;
                if (v53)
                {
                  if (*((_DWORD *)v53 + 6) == 2)
                  {
                    if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v53, (void *)v50);
                  }
                  else
                  {
                    *((_DWORD *)v53 + 6) -= 2;
                  }
                }
                if (*((_DWORD *)v60 + 6) == 2)
                {
                  if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v60, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v60 + 6) -= 2;
                }
                v53 = (Node *)v60;
                goto LABEL_318;
              }
LABEL_88:
              if (!v53)
              {
                v56 = 1;
LABEL_331:
                if (!v223 || (*((_BYTE *)v223 + 22) & 8) != 0)
                {
LABEL_340:
                  if ((v56 & 1) == 0)
                  {
                    if (*((_DWORD *)v53 + 6) == 2)
                    {
                      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v53, (void *)v50);
                    }
                    else
                    {
                      *((_DWORD *)v53 + 6) -= 2;
                    }
                  }
                  goto LABEL_343;
                }
                WebCore::endOfParagraph((WebCore::Node *)&v227, 1, v268);
                WebCore::VisiblePosition::next(v268, 0, 0, (uint64_t)&__dst);
                v130 = __dst.var0.var0.var0;
                __dst.var0.var0.var0 = 0;
                v131 = v223;
                v223 = (WebCore::Node *)v130;
                if (v131)
                {
                  if (*((_DWORD *)v131 + 6) == 2)
                  {
                    if ((*((_WORD *)v131 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v131, (void *)v50);
                      v142 = __dst.var0.var0.var0;
                      v224 = __dst.var0.var1;
                      v225 = *((_BYTE *)&__dst.var0 + 12);
                      v226 = __dst.var1;
                      __dst.var0.var0.var0 = 0;
                      if (v142)
                      {
                        if (*((_DWORD *)v142 + 6) == 2)
                        {
                          if ((*((_WORD *)v142 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v142, (void *)v50);
                        }
                        else
                        {
                          *((_DWORD *)v142 + 6) -= 2;
                        }
                      }
                      goto LABEL_337;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v131 + 6) -= 2;
                  }
                }
                v224 = __dst.var0.var1;
                v225 = *((_BYTE *)&__dst.var0 + 12);
                v226 = __dst.var1;
                __dst.var0.var0.var0 = 0;
LABEL_337:
                v132 = *(_QWORD *)v268;
                *(_QWORD *)v268 = 0;
                if (v132)
                {
                  if (*(_DWORD *)(v132 + 24) == 2)
                  {
                    if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v132, (void *)v50);
                  }
                  else
                  {
                    *(_DWORD *)(v132 + 24) -= 2;
                  }
                }
                goto LABEL_340;
              }
LABEL_318:
              if ((*((_WORD *)v53 + 14) & 0x10) == 0
                || (WebCore::ApplyStyleCommand::removeCSSStyle((WebCore::CompositeEditCommand *)a1, (uint64_t)a2, (uint64_t)v53, 0), *(_BYTE *)(a1 + 344)))
              {
LABEL_330:
                v56 = 0;
                goto LABEL_331;
              }
              WebCore::StyleProperties::asText(v219, (unsigned __int8 *)v50, v119, &v267, v120);
              Attribute = (uint64_t *)WebCore::Element::getAttribute((WebCore::Element *)v53, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v121, v122, v123);
              v126 = v267.var0.var0.var0;
              v127 = *Attribute;
              if (v267.var0.var0.var0 && (v140 = *((_DWORD *)v267.var0.var0.var0 + 1)) != 0)
              {
                if (v127)
                {
                  v143 = *(_DWORD *)(v127 + 4);
                  if (v143)
                  {
                    *(_DWORD *)v267.var0.var0.var0 += 2;
                    *(_DWORD *)v127 += 2;
                    *(_DWORD *)v126 += 2;
                    *(_DWORD *)v127 += 2;
                    if (v143 < 0)
                      goto LABEL_472;
                    v144 = __OFADD__(v143, 1);
                    v145 = v143 + 1;
                    v146 = v144;
                    if (v140 < 0)
                      goto LABEL_472;
                    if (v146)
                      goto LABEL_472;
                    v147 = (v140 + v145);
                    if (__OFADD__(v140, v145))
                      goto LABEL_472;
                    if ((*((_BYTE *)v126 + 16) & 4) != 0)
                    {
                      v155 = *(_DWORD *)(v127 + 16);
                      if (v147 < 0x40)
                      {
                        if ((v155 & 4) != 0)
                        {
                          v156 = *((unsigned int *)v126 + 1);
                          if ((_DWORD)v156)
                          {
                            v157 = (_BYTE *)*((_QWORD *)v126 + 1);
                            if ((_DWORD)v156 == 1)
                            {
                              LOBYTE(__dst.var0.var0.var0) = *v157;
                            }
                            else
                            {
                              v208 = (WebCore::Node *)*((unsigned int *)v126 + 1);
                              memcpy(&__dst, v157, v156);
                              v156 = (size_t)v208;
                            }
                          }
                          *((_BYTE *)&__dst.var0.var0.var0 + v156) = 32;
                          v158 = (char *)&__dst.var0.var0.var0 + v156 + 1;
                          v159 = *(unsigned int *)(v127 + 4);
                          if ((_DWORD)v159)
                          {
                            v160 = *(_BYTE **)(v127 + 8);
                            if ((_DWORD)v159 == 1)
                              *v158 = *v160;
                            else
                              memcpy(v158, v160, v159);
                          }
                          WTF::AtomStringImpl::add();
                          goto LABEL_437;
                        }
                        v166 = (int8x16_t *)*((_QWORD *)v126 + 1);
                        v150 = *((unsigned int *)v126 + 1);
                        if (v150 >= 0x40)
                        {
                          v167 = (VisiblePosition *)((char *)&__dst + 2 * (v150 & 0xFFFFFFC0));
                          p_dst = &__dst;
                          do
                          {
                            v275.val[0] = *v166;
                            v176 = v166[1];
                            v277.val[0] = v166[2];
                            v177 = v166[3];
                            v166 += 4;
                            v281.val[1] = 0u;
                            v281.val[0] = v177;
                            v277.val[1] = 0u;
                            v279.val[0] = v176;
                            v275.val[1] = 0u;
                            v178 = (char *)p_dst;
                            vst2q_s8(v178, v275);
                            v178 += 32;
                            v279.val[1] = 0u;
                            vst2q_s8(v178, v279);
                            p_var1 = (char *)&p_dst[2].var1;
                            vst2q_s8(p_var1, v277);
                            v180 = (char *)&p_dst[4];
                            vst2q_s8(v180, v281);
                            p_dst = (VisiblePosition *)((char *)p_dst + 128);
                          }
                          while (p_dst != v167);
                        }
                        else
                        {
                          v167 = &__dst;
                        }
                        while (v167 != (VisiblePosition *)((char *)&__dst + 2 * v150))
                        {
                          v168 = v166->u8[0];
                          v166 = (int8x16_t *)((char *)v166 + 1);
                          LOWORD(v167->var0.var0.var0) = v168;
                          v167 = (VisiblePosition *)((char *)v167 + 2);
                        }
                        goto LABEL_407;
                      }
                      v161 = (v155 >> 2) & 1;
                    }
                    else
                    {
                      if (v147 < 0x40)
                      {
                        v148 = (_WORD *)*((_QWORD *)v126 + 1);
                        v149 = *((unsigned int *)v126 + 1);
                        if ((_DWORD)v149 == 1)
                        {
                          LOWORD(__dst.var0.var0.var0) = *v148;
                          v150 = 1;
                        }
                        else
                        {
                          v150 = *((unsigned int *)v126 + 1);
                          if (*((_DWORD *)v126 + 1))
                          {
                            v209 = (WebCore::Node *)*((unsigned int *)v126 + 1);
                            memcpy(&__dst, v148, 2 * v149);
                            v150 = (uint64_t)v209;
                          }
                        }
LABEL_407:
                        v151 = (_WORD *)((char *)&__dst + 2 * v150);
                        *v151 = 32;
                        v152 = (char *)(v151 + 1);
                        v153 = *(int8x16_t **)(v127 + 8);
                        v154 = *(unsigned int *)(v127 + 4);
                        if ((*(_BYTE *)(v127 + 16) & 4) != 0)
                        {
                          if (v154 >= 0x40)
                          {
                            v163 = &v152[2 * (v154 & 0xFFFFFFC0)];
                            v169 = v152;
                            do
                            {
                              v274.val[0] = *v153;
                              v170 = v153[1];
                              v276.val[0] = v153[2];
                              v171 = v153[3];
                              v153 += 4;
                              v278.val[0] = v171;
                              v276.val[1] = 0u;
                              v280.val[0] = v170;
                              v274.val[1] = 0u;
                              v172 = v169;
                              vst2q_s8(v172, v274);
                              v172 += 32;
                              v278.val[1] = 0u;
                              v280.val[1] = 0u;
                              vst2q_s8(v172, v280);
                              v173 = v169 + 64;
                              vst2q_s8(v173, v276);
                              v174 = v169 + 96;
                              v169 += 128;
                              vst2q_s8(v174, v278);
                            }
                            while (v169 != v163);
                          }
                          else
                          {
                            v163 = v152;
                          }
                          v164 = &v152[2 * v154];
                          while (v163 != v164)
                          {
                            v165 = v153->u8[0];
                            v153 = (int8x16_t *)((char *)v153 + 1);
                            *(_WORD *)v163 = v165;
                            v163 += 2;
                          }
                        }
                        else if ((_DWORD)v154 == 1)
                        {
                          *(_WORD *)v152 = v153->i16[0];
                        }
                        else if ((_DWORD)v154)
                        {
                          memcpy(v152, v153, 2 * v154);
                        }
                        WTF::AtomStringImpl::add();
                        goto LABEL_437;
                      }
                      v161 = 0;
                    }
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v147, v161, (uint64_t)v126, 32, v127, &__dst);
                    v162 = __dst.var0.var0.var0;
                    if (!__dst.var0.var0.var0)
                    {
LABEL_472:
                      *(_QWORD *)v268 = 0;
                    }
                    else
                    {
                      if ((*((_BYTE *)__dst.var0.var0.var0 + 16) & 0x10) != 0)
                      {
                        *(_DWORD *)__dst.var0.var0.var0 += 2;
                        *(_QWORD *)v268 = v162;
                        __dst.var0.var0.var0 = 0;
                      }
                      else
                      {
                        WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)__dst.var0.var0.var0, v125);
                        v162 = __dst.var0.var0.var0;
                        __dst.var0.var0.var0 = 0;
                        if (!v162)
                          goto LABEL_437;
                      }
                      if (*(_DWORD *)v162 == 2)
                        WTF::StringImpl::destroy((WTF::StringImpl *)v162, v125);
                      else
                        *(_DWORD *)v162 -= 2;
                    }
LABEL_437:
                    if (*(_DWORD *)v127 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v127, v125);
                    else
                      *(_DWORD *)v127 -= 2;
                    if (*(_DWORD *)v126 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v126, v125);
                    else
                      *(_DWORD *)v126 -= 2;
                    if (!*(_QWORD *)v268)
                    {
LABEL_612:
                      __break(0xC471u);
                      JUMPOUT(0x195A7CC00);
                    }
                    if (*(_DWORD *)v127 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v127, v125);
                    else
                      *(_DWORD *)v127 -= 2;
                    if (*(_DWORD *)v126 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v126, v125);
                    else
                      *(_DWORD *)v126 -= 2;
                    goto LABEL_324;
                  }
                }
                if ((*((_BYTE *)v267.var0.var0.var0 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v267.var0.var0.var0 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v267.var0.var0.var0, v125);
                  v126 = __dst.var0.var0.var0;
                }
                *(_QWORD *)v268 = v126;
              }
              else
              {
                if (v127)
                  *(_DWORD *)v127 += 2;
                *(_QWORD *)v268 = v127;
              }
LABEL_324:
              WebCore::CompositeEditCommand::setNodeAttribute((WebCore::CompositeEditCommand *)a1, (WebCore::Element *)v53, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)v268);
              v128 = *(WTF::StringImpl **)v268;
              *(_QWORD *)v268 = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 2)
                  WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v50);
                else
                  *(_DWORD *)v128 -= 2;
              }
              v129 = v267.var0.var0.var0;
              v267.var0.var0.var0 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v129, (WTF::StringImpl *)v50);
                else
                  *(_DWORD *)v129 -= 2;
              }
              goto LABEL_330;
            }
            WebCore::VisiblePosition::next((unsigned __int8 *)&v266, 0, 0, (uint64_t)&v263);
            v62 = v263;
            if (v263)
              v63 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v63 = 0;
            if (!v63)
              v62 = (WebCore::Node *)v266.var0.var0.var0;
            if (v62)
              *((_DWORD *)v62 + 6) += 2;
            v259 = v62;
            v64 = v63 == 0;
            v65 = (unsigned int *)&v264;
            if (v64)
              v65 = &v266.var0.var1;
            v260 = *v65;
            v261 = *((_BYTE *)v65 + 4);
            v66 = &v266.var1;
            if (!v64)
              v66 = (BOOL *)&v265;
            v262 = *v66;
            v67 = v267.var0.var0.var0;
            if (v267.var0.var0.var0)
              *((_DWORD *)v267.var0.var0.var0 + 6) += 2;
            __dst.var0.var0.var0 = v67;
            __dst.var0.var1 = v267.var0.var1;
            *((_BYTE *)&__dst.var0 + 12) = *((_BYTE *)&v267.var0 + 12);
            WebCore::Position::upstream((uint64_t)&__dst, (WebCore::Node *)1, (uint64_t)&v257);
            v69 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            if (v69)
            {
              if (*((_DWORD *)v69 + 6) == 2)
              {
                if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v69, v68);
              }
              else
              {
                *((_DWORD *)v69 + 6) -= 2;
              }
            }
            v70 = (Node *)v259;
            if (v259)
              *((_DWORD *)v259 + 6) += 2;
            __dst.var0.var0.var0 = v70;
            __dst.var0.var1 = v260;
            *((_BYTE *)&__dst.var0 + 12) = v261;
            WebCore::Position::upstream((uint64_t)&__dst, (WebCore::Node *)1, (uint64_t)&v256);
            v72 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            if (v72)
            {
              if (*((_DWORD *)v72 + 6) == 2)
              {
                if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v72, v71);
              }
              else
              {
                *((_DWORD *)v72 + 6) -= 2;
              }
            }
            v73 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v215, (uint64_t)&v257);
            if (v73 != 129 && (char)v73 < 0)
            {
              v60 = 0;
LABEL_286:
              v112 = v256;
              v256 = 0;
              if (v112)
              {
                if (*((_DWORD *)v112 + 6) == 2)
                {
                  if ((*((_WORD *)v112 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v112, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v112 + 6) -= 2;
                }
              }
              v113 = v257;
              v257 = 0;
              if (v113)
              {
                if (*((_DWORD *)v113 + 6) == 2)
                {
                  if ((*((_WORD *)v113 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v113, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v113 + 6) -= 2;
                }
              }
              v114 = v259;
              v259 = 0;
              if (v114)
              {
                if (*((_DWORD *)v114 + 6) == 2)
                {
                  if ((*((_WORD *)v114 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v114, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v114 + 6) -= 2;
                }
              }
              v115 = v263;
              v263 = 0;
              if (v115)
              {
                if (*((_DWORD *)v115 + 6) == 2)
                {
                  if ((*((_WORD *)v115 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v115, (void *)v50);
                }
                else
                {
                  *((_DWORD *)v115 + 6) -= 2;
                }
              }
              v61 = v266.var0.var0.var0;
              goto LABEL_299;
            }
            v60 = v257;
            if (!v257)
              goto LABEL_286;
            v74 = *((_DWORD *)v257 + 6);
            *((_DWORD *)v257 + 6) = v74 + 2;
            if ((*((_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFLL) == 0)
            {
              if (v74)
              {
                *((_DWORD *)v60 + 6) = v74;
                goto LABEL_150;
              }
              if ((*((_WORD *)v60 + 15) & 0x400) != 0)
                goto LABEL_150;
              v109 = (Node *)v60;
              goto LABEL_243;
            }
            v75 = *(_DWORD *)((*((_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
            if (v74)
            {
              *((_DWORD *)v60 + 6) = v74;
            }
            else if ((*((_WORD *)v60 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v60, (void *)v50);
              if ((v75 & 1) == 0)
                goto LABEL_150;
              v60 = v257;
LABEL_124:
              if (v60 == (WebCore::Node *)WebCore::editableRootForPosition((uint64_t)&v257, 0))
              {
                if ((*(_BYTE *)((*((_QWORD *)v257 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  goto LABEL_612;
                if ((WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight((WebCore::Position *)(*((_QWORD *)v257 + 8) & 0xFFFFFFFFFFFFLL), v50) & 1) == 0)
                {
                  WebCore::CompositeEditCommand::insertNewDefaultParagraphElementAt((WebCore::Node **)&__dst, (const WebCore::Position *)a1, (WebCore::Position *)&v257);
                  v60 = (WebCore::Node *)__dst.var0.var0.var0;
                  goto LABEL_286;
                }
                goto LABEL_150;
              }
              v76 = v256;
              if (!v256)
                goto LABEL_190;
              v77 = *((_DWORD *)v256 + 6);
              *((_DWORD *)v256 + 6) = v77 + 2;
              if ((*((_QWORD *)v76 + 8) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v78 = *(_DWORD *)((*((_QWORD *)v76 + 8) & 0xFFFFFFFFFFFFLL) + 0x14);
                if (v77)
                {
                  *((_DWORD *)v76 + 6) = v77;
                  if ((v78 & 1) != 0)
                    goto LABEL_129;
                  goto LABEL_189;
                }
                if ((*((_WORD *)v76 + 15) & 0x400) != 0)
                {
                  v77 = 2;
                  if ((v78 & 1) != 0)
                    goto LABEL_129;
                  goto LABEL_189;
                }
                WebCore::Node::removedLastRef(v76, (void *)v50);
                v76 = v256;
                if ((v78 & 1) != 0)
                {
                  if (!v256)
                  {
                    v79 = 1;
LABEL_130:
                    v80 = v257;
                    if (!v257)
                    {
                      LOBYTE(v84) = 0;
                      if ((v79 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_282;
                    }
                    v81 = *((_DWORD *)v257 + 6);
                    *((_DWORD *)v257 + 6) = v81 + 2;
                    v82 = *((_WORD *)v80 + 14);
                    if ((v82 & 0xF000) == 0x9000)
                    {
                      if (**((WebCore::Node ***)v76 + 5) == v80 && (*((_WORD *)v76 + 14) & 0xF000) != 0x9000)
                      {
                        v84 = (*((unsigned __int8 *)v76 + 22) >> 3) & 1;
                        if (v81)
                        {
LABEL_281:
                          *((_DWORD *)v80 + 6) = v81;
                          if ((v79 & 1) != 0)
                            goto LABEL_284;
                          goto LABEL_282;
                        }
LABEL_486:
                        v210 = v79;
                        if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v80, (void *)v50);
                        if ((v210 & 1) != 0)
                        {
LABEL_284:
                          if ((v84 & 1) == 0)
                            goto LABEL_285;
                          goto LABEL_150;
                        }
LABEL_282:
                        if (*((_DWORD *)v76 + 6) == 2)
                        {
                          if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v76, (void *)v50);
                        }
                        else
                        {
                          *((_DWORD *)v76 + 6) -= 2;
                        }
                        goto LABEL_284;
                      }
                    }
                    else if ((v82 & 4) != 0
                           && *((_QWORD *)v80 + 10)
                           && ((*((unsigned __int8 *)v76 + 22) ^ *((unsigned __int8 *)v80 + 22)) & 8) == 0)
                    {
                      v83 = v76;
                      do
                      {
                        v83 = (WebCore::Node *)*((_QWORD *)v83 + 4);
                        LOBYTE(v84) = v83 != 0;
                      }
                      while (v83 != v80 && v83 != 0);
LABEL_280:
                      if (v81)
                        goto LABEL_281;
                      goto LABEL_486;
                    }
                    LOBYTE(v84) = 0;
                    goto LABEL_280;
                  }
                  v77 = *((_DWORD *)v256 + 6);
LABEL_129:
                  v79 = 0;
                  *((_DWORD *)v76 + 6) = v77 + 2;
                  goto LABEL_130;
                }
              }
              else
              {
                if (v77)
                {
                  *((_DWORD *)v76 + 6) = v77;
                  goto LABEL_189;
                }
                if ((*((_WORD *)v76 + 15) & 0x400) != 0)
                {
                  v77 = 2;
                  goto LABEL_189;
                }
                WebCore::Node::removedLastRef(v76, (void *)v50);
                v76 = v256;
              }
              if (!v76)
                goto LABEL_190;
              v77 = *((_DWORD *)v76 + 6);
LABEL_189:
              *((_DWORD *)v76 + 6) = v77 + 2;
LABEL_190:
              v255 = v76;
              WebCore::enclosingBlock((uint64_t *)&v255, (WebCore::Node *)1, (WebCore::Node **)&__dst);
              v99 = v257;
              v100 = __dst.var0.var0.var0;
              __dst.var0.var0.var0 = 0;
              if (v100)
              {
                if (*((_DWORD *)v100 + 6) == 2)
                {
                  if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                  {
                    v207 = v257;
                    WebCore::Node::removedLastRef((WebCore::Node *)v100, (void *)v50);
                    v99 = v207;
                  }
                }
                else
                {
                  *((_DWORD *)v100 + 6) -= 2;
                }
              }
              v255 = 0;
              if (v76)
              {
                if (*((_DWORD *)v76 + 6) == 2)
                {
                  if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  {
                    v110 = v76;
                    v111 = v99;
                    WebCore::Node::removedLastRef(v110, (void *)v50);
                    v99 = v111;
                  }
                }
                else
                {
                  *((_DWORD *)v76 + 6) -= 2;
                }
              }
              if (v100 != (Node *)v99)
              {
                v101 = v257;
                if (v257)
                  *((_DWORD *)v257 + 6) += 2;
                v206 = v101;
                v102 = v256;
                if (v256)
                  *((_DWORD *)v256 + 6) += 2;
                v254 = v102;
                WebCore::enclosingBlock((uint64_t *)&v254, (WebCore::Node *)1, (WebCore::Node **)&__dst);
                if (__dst.var0.var0.var0)
                {
                  v103 = *((_WORD *)__dst.var0.var0.var0 + 14);
                  if ((v103 & 0xF000) == 0x9000)
                  {
                    if ((Node *)**((_QWORD **)v206 + 5) == __dst.var0.var0.var0
                      && (*((_WORD *)v206 + 14) & 0xF000) != 0x9000)
                    {
                      v104 = v206;
                      v106 = (*((unsigned __int8 *)v206 + 22) >> 3) & 1;
                    }
                    else
                    {
                      LOBYTE(v106) = 0;
                      v104 = v206;
                    }
                  }
                  else
                  {
                    v104 = v206;
                    if ((v103 & 4) != 0
                      && *((_QWORD *)__dst.var0.var0.var0 + 10)
                      && ((*((unsigned __int8 *)v206 + 22) ^ *((unsigned __int8 *)__dst.var0.var0.var0 + 22)) & 8) == 0)
                    {
                      v105 = v206;
                      do
                      {
                        v105 = (WebCore::Node *)*((_QWORD *)v105 + 4);
                        LOBYTE(v106) = v105 != 0;
                      }
                      while (v105 != (WebCore::Node *)__dst.var0.var0.var0 && v105 != 0);
                    }
                    else
                    {
                      LOBYTE(v106) = 0;
                    }
                  }
                  if (*((_DWORD *)__dst.var0.var0.var0 + 6) != 2)
                  {
                    *((_DWORD *)__dst.var0.var0.var0 + 6) -= 2;
                    goto LABEL_224;
                  }
                  if ((*((_WORD *)__dst.var0.var0.var0 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)__dst.var0.var0.var0, (void *)v50);
                }
                else
                {
                  LOBYTE(v106) = 0;
                }
                v104 = v206;
LABEL_224:
                v254 = 0;
                if (v102)
                {
                  if (*((_DWORD *)v102 + 6) == 2)
                  {
                    if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v102, (void *)v50);
                      v104 = v206;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v102 + 6) -= 2;
                  }
                }
                if (v104)
                {
                  if (*((_DWORD *)v104 + 6) == 2)
                  {
                    if ((*((_WORD *)v104 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v104, (void *)v50);
                  }
                  else
                  {
                    *((_DWORD *)v104 + 6) -= 2;
                  }
                }
                if ((v106 & 1) != 0)
                  goto LABEL_285;
                goto LABEL_150;
              }
              v108 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
              if (!v259)
                v108 = 0;
              if (!v108)
                goto LABEL_150;
              WebCore::VisiblePosition::next((unsigned __int8 *)&v259, 0, 0, (uint64_t)&__dst);
              v109 = __dst.var0.var0.var0;
              if (!__dst.var0.var0.var0)
                goto LABEL_285;
              if (*((_DWORD *)__dst.var0.var0.var0 + 6) != 2)
              {
                *((_DWORD *)__dst.var0.var0.var0 + 6) -= 2;
                goto LABEL_150;
              }
              if ((*((_WORD *)__dst.var0.var0.var0 + 15) & 0x400) != 0)
              {
LABEL_150:
                v86 = v257;
                if (!v257)
                  goto LABEL_285;
                v87 = v258 & 7;
                if (v87 > 4)
                  goto LABEL_285;
                if (((1 << v87) & 0x19) == 0)
                {
                  v86 = (WebCore::Node *)*((_QWORD *)v257 + 4);
                  if (!v86)
                    goto LABEL_285;
                }
                *((_DWORD *)v86 + 6) += 2;
                v88 = WebCore::Node::computeEditability((uint64_t)v86, 0, 0);
                v89 = *((_DWORD *)v86 + 6) - 2;
                if (v88)
                {
                  if (*((_DWORD *)v86 + 6) == 2)
                  {
                    if ((*((_WORD *)v86 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v86, (void *)v50);
                  }
                  else
                  {
                    *((_DWORD *)v86 + 6) = v89;
                  }
                  WebCore::CompositeEditCommand::insertNewDefaultParagraphElementAt(&v253, (const WebCore::Position *)a1, (WebCore::Position *)&v257);
                  v91 = v266.var0.var0.var0;
                  if (!v266.var0.var0.var0)
                  {
                    v93 = 0;
                    goto LABEL_160;
                  }
                  v92 = *((_DWORD *)v266.var0.var0.var0 + 6);
                  *((_DWORD *)v266.var0.var0.var0 + 6) = v92 + 2;
                  if ((*((_WORD *)v91 + 14) & 0x10) != 0)
                  {
                    v93 = *(_QWORD *)(*((_QWORD *)v91 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
                    if (v92)
                    {
LABEL_159:
                      *((_DWORD *)v91 + 6) = v92;
LABEL_160:
                      v60 = v253;
                      v94 = *((_WORD *)v253 + 14);
                      *((_DWORD *)v253 + 6) += 2;
                      v250 = v60;
                      v251 = 0;
                      if ((v94 & 1) != 0)
                        v95 = v252 & 0xF0;
                      else
                        v95 = v252 & 0xF0 | 3;
                      v252 = v95;
                      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v250, (uint64_t)&__dst);
                      __dst.var1 = 1;
                      WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)a1, &v267, &v266, &__dst, 0, 1);
                      v97 = __dst.var0.var0.var0;
                      __dst.var0.var0.var0 = 0;
                      if (v97)
                      {
                        if (*((_DWORD *)v97 + 6) == 2)
                        {
                          if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v97, v96);
                        }
                        else
                        {
                          *((_DWORD *)v97 + 6) -= 2;
                        }
                      }
                      if (*((_DWORD *)v60 + 6) == 2)
                      {
                        if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v60, v96);
                      }
                      else
                      {
                        *((_DWORD *)v60 + 6) -= 2;
                      }
                      v50 = *((_QWORD *)v60 + 11);
                      if (v50
                        && (*(_WORD *)(v50 + 28) & 0x10) != 0
                        && *(_QWORD *)(*(_QWORD *)(v50 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
                        && !v93)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
                      }
                      goto LABEL_286;
                    }
                  }
                  else
                  {
                    v93 = 0;
                    if (v92)
                      goto LABEL_159;
                  }
                  if ((*((_WORD *)v91 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v91, v90);
                  goto LABEL_160;
                }
                if (*((_DWORD *)v86 + 6) != 2)
                {
                  v60 = 0;
                  *((_DWORD *)v86 + 6) = v89;
                  goto LABEL_286;
                }
                if ((*((_WORD *)v86 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v86, (void *)v50);
LABEL_285:
                v60 = 0;
                goto LABEL_286;
              }
LABEL_243:
              WebCore::Node::removedLastRef((WebCore::Node *)v109, (void *)v50);
              goto LABEL_150;
            }
            if ((v75 & 1) == 0)
              goto LABEL_150;
            goto LABEL_124;
          }
          v54 = *((_DWORD *)v52 + 6) - 2;
          if (*((_DWORD *)v52 + 6) == 2)
          {
            if ((*((_WORD *)v52 + 15) & 0x400) != 0)
            {
LABEL_146:
              if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v52, (void *)v50);
              goto LABEL_87;
            }
            WebCore::Node::removedLastRef(v52, (void *)v50);
            v54 = *((_DWORD *)v52 + 6);
          }
          else
          {
            *((_DWORD *)v52 + 6) = v54;
          }
          v55 = v54 - 2;
          if (v55)
          {
            *((_DWORD *)v52 + 6) = v55;
            goto LABEL_87;
          }
          goto LABEL_146;
        }
LABEL_490:
        WebCore::resolveCharacterRange(&v231, v211, 0, 1, (WebCore::Node **)&__dst);
        a2 = __dst.var0.var0.var0;
        v15 = __dst.var0.var1;
        v182 = *(Node **)&__dst.var1;
        __dst.var0.var0.var0 = 0;
        *(_QWORD *)&__dst.var1 = 0;
        if (v182)
        {
          v183 = *((_DWORD *)v182 + 6) - 2;
          if (*((_DWORD *)v182 + 6) != 2)
          {
LABEL_492:
            *((_DWORD *)v182 + 6) = v183;
            goto LABEL_493;
          }
          if ((*((_WORD *)v182 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v182, v181);
            v182 = __dst.var0.var0.var0;
            __dst.var0.var0.var0 = 0;
            if (v182)
            {
              v183 = *((_DWORD *)v182 + 6) - 2;
              if (*((_DWORD *)v182 + 6) != 2)
                goto LABEL_492;
              if ((*((_WORD *)v182 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v182, v204);
            }
          }
        }
LABEL_493:
        *((_DWORD *)a2 + 6) += 2;
        v219 = (WebCore::StyleProperties *)a2;
        v220 = v15;
        if (((*(uint64_t (**)(Node *))(*(_QWORD *)a2 + 208))(a2) & 1) != 0)
        {
          v184 = 8;
          goto LABEL_495;
        }
LABEL_606:
        if (v15)
          v184 = 10;
        else
          v184 = 9;
LABEL_495:
        v221 = v221 & 0xF0 | v184;
        if (*((_DWORD *)a2 + 6) == 2)
        {
          if ((*((_WORD *)a2 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a2, v23);
        }
        else
        {
          *((_DWORD *)a2 + 6) -= 2;
        }
        WebCore::resolveCharacterRange(&v231, v212, 0, 1, (WebCore::Node **)&__dst);
        v186 = __dst.var0.var0.var0;
        v187 = __dst.var0.var1;
        v188 = *(Node **)&__dst.var1;
        __dst.var0.var0.var0 = 0;
        *(_QWORD *)&__dst.var1 = 0;
        if (!v188)
          goto LABEL_500;
        v189 = *((_DWORD *)v188 + 6) - 2;
        if (*((_DWORD *)v188 + 6) == 2)
        {
          if ((*((_WORD *)v188 + 15) & 0x400) != 0
            || (WebCore::Node::removedLastRef((WebCore::Node *)v188, v185),
                v188 = __dst.var0.var0.var0,
                __dst.var0.var0.var0 = 0,
                !v188))
          {
LABEL_500:
            *((_DWORD *)v186 + 6) += 2;
            __dst.var0.var0.var0 = v186;
            __dst.var0.var1 = v187;
            if (((*(uint64_t (**)(Node *))(*(_QWORD *)v186 + 208))(v186) & 1) != 0)
            {
              v191 = 8;
            }
            else if (v187)
            {
              v191 = 10;
            }
            else
            {
              v191 = 9;
            }
            *((_BYTE *)&__dst.var0 + 12) = *((_BYTE *)&__dst.var0 + 12) & 0xF0 | v191;
            if (*((_DWORD *)v186 + 6) == 2)
            {
              if ((*((_WORD *)v186 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v186, v190);
            }
            else
            {
              *((_DWORD *)v186 + 6) -= 2;
            }
            WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v219, (const WebCore::Position *)&__dst);
            if (*((_DWORD *)v186 + 6) == 2)
            {
              v192 = v214;
              if ((*((_WORD *)v186 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v186, v16);
            }
            else
            {
              *((_DWORD *)v186 + 6) -= 2;
              v192 = v214;
            }
            if (*((_DWORD *)a2 + 6) == 2)
            {
              v193 = v213;
              if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)a2, v16);
            }
            else
            {
              *((_DWORD *)a2 + 6) -= 2;
              v193 = v213;
            }
            v194 = v222[0];
            v222[0] = 0;
            if (v194)
            {
              if (*((_DWORD *)v194 + 6) == 2)
              {
                if ((*((_WORD *)v194 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v194, v16);
              }
              else
              {
                *((_DWORD *)v194 + 6) -= 2;
              }
            }
            v195 = v223;
            v223 = 0;
            if (v195)
            {
              if (*((_DWORD *)v195 + 6) == 2)
              {
                if ((*((_WORD *)v195 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v195, v16);
              }
              else
              {
                *((_DWORD *)v195 + 6) -= 2;
              }
            }
            v196 = v227;
            v227 = 0;
            if (v196)
            {
              if (*((_DWORD *)v196 + 6) == 2)
              {
                if ((*((_WORD *)v196 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v196, v16);
              }
              else
              {
                *((_DWORD *)v196 + 6) -= 2;
              }
            }
            if (v193)
            {
              if (*((_DWORD *)v193 + 6) == 2)
              {
                if ((*((_WORD *)v193 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v193, v16);
              }
              else
              {
                *((_DWORD *)v193 + 6) -= 2;
              }
            }
            if (v192)
            {
              if (*((_DWORD *)v192 + 6) == 2)
              {
                if ((*((_WORD *)v192 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v192, v16);
              }
              else
              {
                *((_DWORD *)v192 + 6) -= 2;
              }
            }
            v197 = v233;
            v233 = 0;
            if (v197)
            {
              if (*((_DWORD *)v197 + 6) == 2)
              {
                if ((*((_WORD *)v197 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v197, v16);
              }
              else
              {
                *((_DWORD *)v197 + 6) -= 2;
              }
            }
            v198 = v231;
            v231 = 0;
            if (v198)
            {
              if (*((_DWORD *)v198 + 6) == 2)
              {
                if ((*((_WORD *)v198 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v198, v16);
              }
              else
              {
                *((_DWORD *)v198 + 6) -= 2;
              }
            }
            v199 = v235;
            v235 = 0;
            if (v199)
            {
              if (*((_DWORD *)v199 + 6) == 2)
              {
                if ((*((_WORD *)v199 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v199, v16);
              }
              else
              {
                *((_DWORD *)v199 + 6) -= 2;
              }
            }
            goto LABEL_532;
          }
          v189 = *((_DWORD *)v188 + 6) - 2;
          if (*((_DWORD *)v188 + 6) == 2)
          {
            if ((*((_WORD *)v188 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v188, v205);
            goto LABEL_500;
          }
        }
        *((_DWORD *)v188 + 6) = v189;
        goto LABEL_500;
      }
    }
  }
LABEL_532:
  v200 = v236;
  v236 = 0;
  if (v200)
  {
    if (*((_DWORD *)v200 + 6) == 2)
    {
      if ((*((_WORD *)v200 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v200, v16);
    }
    else
    {
      *((_DWORD *)v200 + 6) -= 2;
    }
  }
LABEL_535:
  v201 = v240;
  v240 = 0;
  if (v201)
  {
    if (*((_DWORD *)v201 + 6) == 2)
    {
      if ((*((_WORD *)v201 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v201, v16);
    }
    else
    {
      *((_DWORD *)v201 + 6) -= 2;
    }
  }
  v202 = v244;
  v244 = 0;
  if (v202)
  {
    if (*((_DWORD *)v202 + 6) == 2)
    {
      if ((*((_WORD *)v202 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v202, v16);
    }
    else
    {
      *((_DWORD *)v202 + 6) -= 2;
    }
  }
  result = (unsigned int *)v247;
  v247 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplyStyleCommand::applyInlineStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore *v5;
  WebCore::Node *v6;
  char v7;
  WebCore *v8;
  WebCore::Node *v9;
  unsigned __int8 v10;
  WebCore::RenderObject *v11;
  WebCore *v12;
  char v13;
  unsigned int v14;
  WebCore::Node *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  WebCore::RenderText *v20;
  uint64_t v21;
  signed int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  WebCore *v26;
  unsigned int v27;
  int v28;
  WebCore *v29;
  WebCore::Node *v30;
  unsigned int v31;
  WebCore::Node *v32;
  const WTF::StringImpl *v33;
  WTF::String *v34;
  __n128 v35;
  WebCore *v36;
  void *v37;
  WebCore *v38;
  unsigned int v39;
  char v40;
  int v41;
  int v42;
  WebCore *v43;
  uint64_t v44;
  WebCore *v45;
  WebCore::Node *v46;
  uint64_t v47;
  WebCore::Node *v48;
  unsigned int *result;
  WebCore *v50;
  int v51;
  WebCore::Node *v52;
  unsigned int v53;
  signed int v54;
  uint64_t v55;
  __int16 v56;
  WebCore::RenderText *v57;
  uint64_t v58;
  signed int v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  WebCore *v63;
  unsigned int v64;
  WebCore::Node *v65;
  unsigned int v66;
  WebCore::Node *v67;
  const WTF::StringImpl *v68;
  WTF::String *v69;
  __n128 v70;
  WebCore::Node *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  WebCore *v76;
  int v77;
  WebCore *v78;
  uint64_t v79;
  WebCore *v80;
  WebCore::Node *v81;
  uint64_t v82;
  WebCore::Node *v83;
  WebCore *v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int8 v89;
  WebCore *v90;
  WebCore::Node *v91;
  WebCore *v92;
  int v93;
  WebCore::Node *v94;
  WebCore::Node *v95;
  WebCore::Node *v96;
  const WebCore::Position *v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore *v103;
  WebCore::Node *v104;
  int v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  int v109;
  __int16 v110;
  int v111;
  BOOL v112;
  WebCore::Node *v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  int v117;
  WebCore *v118;
  int v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  WebCore::Node *v126;
  int v127;
  __int16 v128;
  uint64_t v129;
  int v130;
  unsigned __int8 v131;
  WebCore *v132;
  WebCore::Node *v133;
  uint64_t v134;
  WTF::String *v135;
  __n128 v136;
  WebCore *v137;
  uint64_t v138;
  WebCore *v139;
  WebCore::Node *v140;
  uint64_t v141;
  WebCore::Node *v142;
  WebCore *v143;
  unsigned int v144;
  WebCore *v145;
  unsigned int v146;
  __int16 v147;
  uint64_t v148;
  int v149;
  WebCore *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  WebCore *v156;
  uint64_t v157;
  WebCore *v158;
  WebCore::Node *v159;
  uint64_t v160;
  WebCore::Node *v161;
  WebCore *v162;
  WebCore::Node *v163;
  BOOL v164;
  unsigned int v165;
  WebCore::Node *v166;
  uint64_t v167;
  WebCore::Node *v168;
  WebCore *v169;
  WebCore::Node *v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  unsigned int v176;
  BOOL v177;
  uint64_t v178;
  __int16 v179;
  BOOL v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  WebCore *v186;
  uint64_t v187;
  WebCore *v188;
  uint64_t v189;
  WebCore::Node *v190;
  char *v191;
  WebCore *v192;
  char *v193;
  WebCore::Node *v194;
  void *v195;
  WebCore::Node *v196;
  WebCore::Node *v197;
  void *v198;
  WebCore *v199;
  WebCore::Node *v200;
  WebCore::Node *v201;
  WTF::StringImpl *v202;
  WebCore *v203;
  WebCore::Node *v204;
  const WTF::StringImpl *v205;
  WTF::String *v206;
  __n128 v207;
  const WTF::StringImpl *v208;
  WTF::String *v209;
  __n128 v210;
  WebCore::Node *v211;
  WebCore::Node *v212;
  WTF *v213;
  void *v214;
  WTF *v215;
  void *v216;
  WTF *v217;
  void *v218;
  uint64_t v219;
  WTF *v220;
  void *v221;
  uint64_t v222;
  WTF *v223;
  void *v224;
  WTF::StringImpl *v225;
  __int16 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  WTF *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BOOL4 hasEquivalentAttributes;
  void *v239;
  uint64_t v240;
  int v241;
  BOOL v242;
  int v243;
  __int16 v244;
  uint64_t v245;
  WebCore::Node *v246;
  unsigned int v247;
  uint64_t v248;
  _BOOL4 v249;
  WebCore *v250;
  unsigned int v251;
  WebCore *v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  int v259;
  unsigned int v260;
  WebCore::Node *v261;
  WebCore::Node *v262;
  WebCore::Node *v263;
  WebCore::Node *v264;
  WebCore::Node *v265;
  WebCore::Node *v266;
  WebCore::Node *v267;
  WebCore::Node *v268;
  WebCore::Node *v269;
  WebCore::Node *v270;
  WebCore *v271;
  WebCore::Node *v272[2];
  WebCore::Node *v273;
  unsigned int v274;
  char v275;
  WebCore::Node *v276;
  WebCore::Node *v277;
  WebCore::Node *v278;
  unsigned int v279;
  char v280;
  WebCore::Node *v281;
  unsigned int v282;
  char v283;
  WebCore *v284;
  unsigned int v285;
  char v286;
  WebCore *v287;
  unsigned int v288;
  char v289;
  WebCore::Node *v290;
  unsigned int v291;
  char v292;

  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 2u, 0);
  if (*(_BYTE *)(a1 + 328))
  {
    v5 = *(WebCore **)(a1 + 192);
    if (v5)
      *((_DWORD *)v5 + 6) += 2;
    v284 = v5;
    v285 = *(_DWORD *)(a1 + 200);
    v286 = *(_BYTE *)(a1 + 204);
    v6 = *(WebCore::Node **)(a1 + 208);
    if (v6)
      *((_DWORD *)v6 + 6) += 2;
    v281 = v6;
    v282 = *(_DWORD *)(a1 + 216);
    v7 = *(_BYTE *)(a1 + 220);
  }
  else
  {
    v8 = *(WebCore **)(a1 + 296);
    if (v8)
      *((_DWORD *)v8 + 6) += 2;
    v284 = v8;
    v285 = *(_DWORD *)(a1 + 304);
    v286 = *(_BYTE *)(a1 + 308);
    v9 = *(WebCore::Node **)(a1 + 312);
    if (v9)
      *((_DWORD *)v9 + 6) += 2;
    v281 = v9;
    v282 = *(_DWORD *)(a1 + 320);
    v7 = *(_BYTE *)(a1 + 324);
  }
  v283 = v7;
  v10 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v281, (uint64_t)&v284);
  v12 = v284;
  if (v10 != 129 && (char)v10 < 0)
  {
    v13 = v286;
    v14 = v285;
    v15 = v281;
    v284 = v281;
    v285 = v282;
    v286 = v283;
    v281 = v12;
    v282 = v14;
    v12 = v15;
    v283 = v13;
  }
  if (!v12)
    goto LABEL_743;
  v16 = v286 & 7;
  if (v16 > 4)
    goto LABEL_101;
  if (((1 << v16) & 0x19) == 0)
  {
    v12 = (WebCore *)*((_QWORD *)v12 + 4);
    if (!v12)
    {
LABEL_743:
      v51 = 0;
      goto LABEL_102;
    }
  }
  *((_DWORD *)v12 + 6) += 2;
  if (v16 || (*((_WORD *)v12 + 14) & 2) == 0)
    goto LABEL_30;
  v17 = v285;
  v18 = *((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL;
  if (v18)
    LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 528))(v18);
  if (v17 <= (int)v18)
  {
LABEL_30:
    v23 = 0;
  }
  else
  {
    v19 = *((_WORD *)v12 + 14);
    if ((v19 & 2) != 0 && (v20 = (WebCore::RenderText *)(*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A7EB94);
      }
      v22 = WebCore::RenderText::caretMaxOffset(v20, v11);
    }
    else if ((v19 & 1) != 0)
    {
      v219 = *((_QWORD *)v12 + 10);
      if (v219)
        v22 = *(_DWORD *)(v219 + 4);
      else
        v22 = 0;
    }
    else if ((v19 & 4) != 0 && (v21 = *((_QWORD *)v12 + 10)) != 0)
    {
      v22 = 0;
      do
      {
        ++v22;
        v21 = *(_QWORD *)(v21 + 56);
      }
      while (v21);
    }
    else
    {
      v22 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v12 + 208))(v12) ^ 1;
    }
    v23 = v17 < v22;
  }
  if (*((_DWORD *)v12 + 6) != 2)
  {
    *((_DWORD *)v12 + 6) -= 2;
    if (v23)
      goto LABEL_33;
LABEL_101:
    v51 = 0;
    v12 = 0;
    goto LABEL_102;
  }
  if ((*((_WORD *)v12 + 15) & 0x400) != 0)
  {
    if (!v23)
      goto LABEL_101;
  }
  else
  {
    WebCore::Node::removedLastRef(v12, v11);
    if (!v23)
      goto LABEL_101;
  }
LABEL_33:
  v24 = *((_QWORD *)v284 + 4);
  if (v24)
  {
    if ((*(_WORD *)(v24 + 28) & 8) != 0)
      v25 = *((_QWORD *)v284 + 4);
    else
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  if (WebCore::ApplyStyleCommand::shouldSplitTextElement(a1, v25, (uint64_t)a2))
  {
    v26 = v284;
    if (v284 && (v27 = v286 & 7, v27 <= 4))
    {
      v28 = 1 << v27;
      v29 = v284;
      if ((v28 & 0x19) == 0)
        v29 = (WebCore *)*((_QWORD *)v284 + 4);
    }
    else
    {
      v29 = 0;
    }
    v30 = v281;
    if (v281)
    {
      v31 = v283 & 7;
      if (v31 > 4)
      {
        v32 = 0;
      }
      else
      {
        v32 = v281;
        if (((1 << v31) & 0x19) == 0)
          v32 = (WebCore::Node *)*((_QWORD *)v281 + 4);
      }
      if (v29 != v32)
      {
        *((_DWORD *)v281 + 6) += 2;
LABEL_48:
        v290 = v30;
        v291 = v282;
        v292 = v283;
LABEL_53:
        v36 = 0;
        if (v26 && (v286 & 7) == 0)
        {
          if ((*((_WORD *)v26 + 14) & 2) != 0)
          {
            *((_DWORD *)v26 + 6) += 2;
            v36 = v26;
          }
          else
          {
            v36 = 0;
          }
        }
        WebCore::CompositeEditCommand::splitTextNodeContainingElement((WebCore::CompositeEditCommand *)a1, v36, v285);
        if (*((_DWORD *)v36 + 6) == 2)
        {
          if ((*((_WORD *)v36 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v36, v37);
        }
        else
        {
          *((_DWORD *)v36 + 6) -= 2;
        }
        v38 = v284;
        if (v284)
        {
          v39 = v286 & 7;
          v40 = 1;
          if (v39 > 4)
          {
            v38 = 0;
          }
          else if (((1 << v39) & 0x19) != 0 || (v38 = (WebCore *)*((_QWORD *)v284 + 4)) != 0)
          {
            v40 = 0;
            *((_DWORD *)v38 + 6) += 4;
          }
        }
        else
        {
          v40 = 1;
        }
        v287 = v38;
        v288 = 0;
        v289 = 1;
        WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v287, (const WebCore::Position *)&v290);
        if ((v40 & 1) != 0)
          goto LABEL_69;
        v41 = *((_DWORD *)v38 + 6) - 2;
        if (*((_DWORD *)v38 + 6) == 2)
        {
          v110 = *((_WORD *)v38 + 15);
          if ((v110 & 0x400) != 0)
            goto LABEL_255;
          WebCore::Node::removedLastRef(v38, v11);
          v41 = *((_DWORD *)v38 + 6);
        }
        else
        {
          *((_DWORD *)v38 + 6) = v41;
        }
        v42 = v41 - 2;
        if (v42)
        {
          *((_DWORD *)v38 + 6) = v42;
LABEL_69:
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30, v11);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
          goto LABEL_72;
        }
        v110 = *((_WORD *)v38 + 15);
LABEL_255:
        if ((v110 & 0x400) == 0)
          WebCore::Node::removedLastRef(v38, v11);
        goto LABEL_69;
      }
      if ((v283 & 7) == 0 && (*((_WORD *)v281 + 14) & 2) != 0)
      {
        *((_DWORD *)v281 + 6) += 2;
        goto LABEL_52;
      }
    }
    else if (v29)
    {
      goto LABEL_48;
    }
    v30 = 0;
LABEL_52:
    v290 = v30;
    v291 = v282 - v285;
    v292 = 0;
    goto LABEL_53;
  }
  WebCore::ApplyStyleCommand::splitTextAtStart((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v284, (const WebCore::Position *)&v281);
LABEL_72:
  if (*(_BYTE *)(a1 + 328))
  {
    v43 = *(WebCore **)(a1 + 192);
    if (v43)
      *((_DWORD *)v43 + 6) += 2;
    v44 = a1 + 200;
  }
  else
  {
    v43 = *(WebCore **)(a1 + 296);
    if (v43)
      *((_DWORD *)v43 + 6) += 2;
    v44 = a1 + 304;
  }
  LODWORD(v290) = *(_DWORD *)v44;
  BYTE4(v290) = *(_BYTE *)(v44 + 4);
  v45 = v284;
  v284 = v43;
  if (v45)
  {
    if (*((_DWORD *)v45 + 6) == 2)
    {
      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v45, v11);
    }
    else
    {
      *((_DWORD *)v45 + 6) -= 2;
    }
  }
  v285 = v290;
  v286 = BYTE4(v290);
  if (*(_BYTE *)(a1 + 328))
  {
    v46 = *(WebCore::Node **)(a1 + 208);
    if (v46)
      *((_DWORD *)v46 + 6) += 2;
    v47 = a1 + 216;
  }
  else
  {
    v46 = *(WebCore::Node **)(a1 + 312);
    if (v46)
      *((_DWORD *)v46 + 6) += 2;
    v47 = a1 + 320;
  }
  LODWORD(v290) = *(_DWORD *)v47;
  BYTE4(v290) = *(_BYTE *)(v47 + 4);
  v48 = v281;
  v281 = v46;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48, v11);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  v282 = v290;
  v283 = BYTE4(v290);
  result = (unsigned int *)v284;
  if (!v284)
  {
    v52 = 0;
    v12 = 0;
    goto LABEL_619;
  }
  if (!v281)
  {
    v12 = 0;
    goto LABEL_208;
  }
  v50 = WebCore::dummySpanAncestorForNode(v284, v11, v33, v34, v35);
  v12 = v50;
  if (v50)
    *((_DWORD *)v50 + 6) += 2;
  v51 = 1;
LABEL_102:
  v52 = v281;
  if (!v281)
  {
LABEL_746:
    v77 = 0;
LABEL_197:
    if (v284 && (*((_BYTE *)v284 + 22) & 8) != 0)
    {
      if (!v281)
        goto LABEL_622;
      if ((*((_BYTE *)v281 + 22) & 8) != 0)
      {
        v85 = 1;
        WebCore::Position::upstream((uint64_t)&v284, (WebCore::Node *)1, (uint64_t)&v278);
        v86 = a2[1];
        if (v86)
        {
          v87 = WebCore::StyleProperties::propertyAsValueID(v86, (WTF::StringImpl *)0x11D);
          if ((v87 & 0xFF0000) == 0 || (unsigned __int16)v87 != 457)
          {
            v90 = 0;
            v91 = 0;
            v92 = (WebCore *)a2;
            if ((v87 & 0xFF0000) == 0 || (unsigned __int16)v87 != 90)
              goto LABEL_335;
            v89 = 0;
LABEL_214:
            v93 = v89;
            WebCore::ApplyStyleCommand::splitAncestorsWithUnicodeBidi(&v277, (WebCore::CompositeEditCommand *)a1, (uint64_t)v284, 1, v89);
            WebCore::ApplyStyleCommand::splitAncestorsWithUnicodeBidi(&v276, (WebCore::CompositeEditCommand *)a1, (uint64_t)v281, 0, v93);
            v94 = v277;
            WebCore::ApplyStyleCommand::removeEmbeddingUpToEnclosingBlock((WebCore::ApplyStyleCommand *)a1, v284, v277);
            v95 = v276;
            WebCore::ApplyStyleCommand::removeEmbeddingUpToEnclosingBlock((WebCore::ApplyStyleCommand *)a1, v281, v276);
            v98 = v278;
            if (v278)
              *((_DWORD *)v278 + 6) += 2;
            v290 = v98;
            v291 = v279;
            v292 = v280;
            if (v94
              && WebCore::ApplyStyleCommand::nodeFullySelected(v94, (WebCore::Element *)&v278, (const WebCore::Position *)&v281, v97))
            {
              WebCore::positionInParentAfterNode((uint64_t)v94, v96, (uint64_t)&v287);
              v99 = v287;
              v287 = 0;
              v100 = v290;
              v290 = v99;
              if (!v100)
              {
LABEL_221:
                v291 = v288;
                v292 = v289;
                goto LABEL_222;
              }
              if (*((_DWORD *)v100 + 6) != 2)
              {
                *((_DWORD *)v100 + 6) -= 2;
                goto LABEL_221;
              }
              if ((*((_WORD *)v100 + 15) & 0x400) != 0)
                goto LABEL_221;
              WebCore::Node::removedLastRef(v100, v96);
              v169 = v287;
              v291 = v288;
              v292 = v289;
              v287 = 0;
              if (v169)
              {
                if (*((_DWORD *)v169 + 6) == 2)
                {
                  if ((*((_WORD *)v169 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v169, v96);
                }
                else
                {
                  *((_DWORD *)v169 + 6) -= 2;
                }
              }
            }
LABEL_222:
            v101 = v281;
            if (v281)
              *((_DWORD *)v281 + 6) += 2;
            v287 = v101;
            v288 = v282;
            v289 = v283;
            if (!v95)
              goto LABEL_234;
            if (!WebCore::ApplyStyleCommand::nodeFullySelected(v95, (WebCore::Element *)&v278, (const WebCore::Position *)&v281, v97))
            {
LABEL_233:
              v101 = v287;
LABEL_234:
              v267 = v95;
              if (v101 != v278)
                goto LABEL_317;
              v266 = v94;
              if ((v289 & 8) == 0 && ((v105 = v289 & 7, v105 == 4) || v105 == 2))
              {
                if (v101)
                {
                  v106 = *((_DWORD *)v101 + 6);
                  *((_DWORD *)v101 + 6) = v106 + 2;
                  v107 = *((_WORD *)v101 + 14);
                  if ((v107 & 1) != 0)
                  {
                    v228 = *((_QWORD *)v101 + 10);
                    v109 = v228 ? *(_DWORD *)(v228 + 4) : 0;
                  }
                  else if ((v107 & 4) != 0 && (v108 = *((_QWORD *)v101 + 10)) != 0)
                  {
                    v109 = 0;
                    do
                    {
                      ++v109;
                      v108 = *(_QWORD *)(v108 + 56);
                    }
                    while (v108);
                  }
                  else
                  {
                    v109 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v101 + 208))(v101) ^ 1;
                    v106 = *((_DWORD *)v101 + 6) - 2;
                  }
                  if (v106)
                  {
                    *((_DWORD *)v101 + 6) = v106;
                  }
                  else if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v101, v96);
                  }
                }
                else
                {
                  v109 = 0;
                }
              }
              else
              {
                v109 = v288;
              }
              if ((v280 & 8) == 0 && ((v111 = v280 & 7, v111 != 4) ? (v112 = v111 == 2) : (v112 = 1), v112))
              {
                v113 = v278;
                if (v278)
                {
                  v114 = *((_DWORD *)v278 + 6);
                  *((_DWORD *)v278 + 6) = v114 + 2;
                  v115 = *((_WORD *)v113 + 14);
                  if ((v115 & 1) != 0)
                  {
                    v227 = *((_QWORD *)v113 + 10);
                    v117 = v227 ? *(_DWORD *)(v227 + 4) : 0;
                  }
                  else if ((v115 & 4) != 0 && (v116 = *((_QWORD *)v113 + 10)) != 0)
                  {
                    v117 = 0;
                    do
                    {
                      ++v117;
                      v116 = *(_QWORD *)(v116 + 56);
                    }
                    while (v116);
                  }
                  else
                  {
                    v117 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v113 + 208))(v113) ^ 1;
                    v114 = *((_DWORD *)v113 + 6) - 2;
                  }
                  if (v114)
                  {
                    *((_DWORD *)v113 + 6) = v114;
                  }
                  else if ((*((_WORD *)v113 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v113, v96);
                  }
                }
                else
                {
                  v117 = 0;
                }
              }
              else
              {
                v117 = v279;
              }
              v112 = v109 == v117;
              v94 = v266;
              if (!v112)
                goto LABEL_317;
              if (((v280 ^ v289) & 7) != 0)
                goto LABEL_317;
              v118 = v287;
              if (v287 != v281)
                goto LABEL_317;
              if ((v289 & 8) == 0 && ((v119 = v289 & 7, v119 == 4) || v119 == 2))
              {
                if (v287)
                {
                  v120 = *((_DWORD *)v287 + 6);
                  *((_DWORD *)v287 + 6) = v120 + 2;
                  v121 = *((_WORD *)v118 + 14);
                  if ((v121 & 1) != 0)
                  {
                    v230 = *((_QWORD *)v118 + 10);
                    v123 = v230 ? *(_DWORD *)(v230 + 4) : 0;
                  }
                  else if ((v121 & 4) != 0 && (v122 = *((_QWORD *)v118 + 10)) != 0)
                  {
                    v123 = 0;
                    do
                    {
                      ++v123;
                      v122 = *(_QWORD *)(v122 + 56);
                    }
                    while (v122);
                  }
                  else
                  {
                    v123 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v118 + 208))(v118) ^ 1;
                    v120 = *((_DWORD *)v118 + 6) - 2;
                  }
                  if (v120)
                  {
                    *((_DWORD *)v118 + 6) = v120;
                  }
                  else if ((*((_WORD *)v118 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v118, v96);
                  }
                }
                else
                {
                  v123 = 0;
                }
              }
              else
              {
                v123 = v288;
              }
              if ((v283 & 8) == 0 && ((v124 = v283 & 7, v124 != 4) ? (v125 = v124 == 2) : (v125 = 1), v125))
              {
                v126 = v281;
                if (v281)
                {
                  v127 = *((_DWORD *)v281 + 6);
                  *((_DWORD *)v281 + 6) = v127 + 2;
                  v128 = *((_WORD *)v126 + 14);
                  if ((v128 & 1) != 0)
                  {
                    v229 = *((_QWORD *)v126 + 10);
                    v130 = v229 ? *(_DWORD *)(v229 + 4) : 0;
                  }
                  else if ((v128 & 4) != 0 && (v129 = *((_QWORD *)v126 + 10)) != 0)
                  {
                    v130 = 0;
                    do
                    {
                      ++v130;
                      v129 = *(_QWORD *)(v129 + 56);
                    }
                    while (v129);
                  }
                  else
                  {
                    v130 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v126 + 208))(v126) ^ 1;
                    v127 = *((_DWORD *)v126 + 6) - 2;
                  }
                  if (v127)
                  {
                    *((_DWORD *)v126 + 6) = v127;
                  }
                  else if ((*((_WORD *)v126 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v126, v96);
                  }
                }
                else
                {
                  v130 = 0;
                }
              }
              else
              {
                v130 = v282;
              }
              v112 = v123 == v130;
              v94 = v266;
              if (v112 && ((v283 ^ v289) & 7) == 0)
              {
                v91 = 0;
                v90 = 0;
              }
              else
              {
LABEL_317:
                WebCore::EditingStyle::copy((WebCore::EditingStyle *)a2, (uint64_t *)&v273);
                v91 = v273;
                WebCore::EditingStyle::extractAndRemoveTextDirection(v273, (uint64_t *)&v273);
                v90 = v273;
                v131 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v290, (uint64_t)&v287);
                if (v131 != 129 && (char)v131 <= 0)
                  WebCore::ApplyStyleCommand::removeInlineStyle((WebCore::ApplyStyleCommand *)a1, v90, (uint64_t)&v290, (const WebCore::Position *)&v287);
              }
              v132 = v287;
              v287 = 0;
              if (v132)
              {
                if (*((_DWORD *)v132 + 6) == 2)
                {
                  if ((*((_WORD *)v132 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v132, v96);
                }
                else
                {
                  *((_DWORD *)v132 + 6) -= 2;
                }
              }
              v133 = v290;
              v290 = 0;
              if (v133)
              {
                if (*((_DWORD *)v133 + 6) == 2)
                {
                  if ((*((_WORD *)v133 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v133, v96);
                }
                else
                {
                  *((_DWORD *)v133 + 6) -= 2;
                }
              }
              if (v267)
              {
                if (*((_DWORD *)v267 + 6) == 2)
                {
                  if ((*((_WORD *)v267 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v267, v96);
                }
                else
                {
                  *((_DWORD *)v267 + 6) -= 2;
                }
              }
              if (v94)
              {
                if (*((_DWORD *)v94 + 6) == 2)
                {
                  if ((*((_WORD *)v94 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v94, v96);
                }
                else
                {
                  *((_DWORD *)v94 + 6) -= 2;
                }
              }
              v85 = 0;
              if (v91)
                v92 = v91;
              else
                v92 = (WebCore *)a2;
LABEL_335:
              WebCore::ApplyStyleCommand::removeInlineStyle((WebCore::ApplyStyleCommand *)a1, v92, (uint64_t)&v278, (const WebCore::Position *)&v281);
              if (*(_BYTE *)(a1 + 328))
              {
                v137 = *(WebCore **)(a1 + 192);
                if (v137)
                  *((_DWORD *)v137 + 6) += 2;
                v138 = a1 + 200;
              }
              else
              {
                v137 = *(WebCore **)(a1 + 296);
                if (v137)
                  *((_DWORD *)v137 + 6) += 2;
                v138 = a1 + 304;
              }
              LODWORD(v290) = *(_DWORD *)v138;
              BYTE4(v290) = *(_BYTE *)(v138 + 4);
              v139 = v284;
              v284 = v137;
              if (v139)
              {
                if (*((_DWORD *)v139 + 6) == 2)
                {
                  if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v139, v11);
                }
                else
                {
                  *((_DWORD *)v139 + 6) -= 2;
                }
              }
              v285 = v290;
              v286 = BYTE4(v290);
              if (*(_BYTE *)(a1 + 328))
              {
                v140 = *(WebCore::Node **)(a1 + 208);
                if (v140)
                  *((_DWORD *)v140 + 6) += 2;
                v141 = a1 + 216;
              }
              else
              {
                v140 = *(WebCore::Node **)(a1 + 312);
                if (v140)
                  *((_DWORD *)v140 + 6) += 2;
                v141 = a1 + 320;
              }
              LODWORD(v290) = *(_DWORD *)v141;
              BYTE4(v290) = *(_BYTE *)(v141 + 4);
              v142 = v281;
              v281 = v140;
              if (v142)
              {
                if (*((_DWORD *)v142 + 6) == 2)
                {
                  if ((*((_WORD *)v142 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v142, v11);
                }
                else
                {
                  *((_DWORD *)v142 + 6) -= 2;
                }
              }
              v282 = v290;
              v283 = BYTE4(v290);
              v143 = v284;
              if (!v284 || (*((_BYTE *)v284 + 22) & 8) == 0 || !v281 || (*((_BYTE *)v281 + 22) & 8) == 0)
                goto LABEL_610;
              if (!v51)
                goto LABEL_439;
              v268 = v90;
              v144 = v286 & 7;
              if (v144 > 4)
                goto LABEL_905;
              v145 = v284;
              if (((1 << v144) & 0x19) == 0)
              {
                v145 = (WebCore *)*((_QWORD *)v284 + 4);
                if (!v145)
                {
                  if (v144 == 2)
                  {
                    v257 = *((_QWORD *)v284 + 6) & 0xFFFFFFFFFFFFLL;
                    v90 = v268;
                    if (!v257)
                      goto LABEL_439;
                    v258 = 1;
                    do
                    {
                      ++v258;
                      v257 = *(_QWORD *)(v257 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v257);
                  }
                  else
                  {
                    if (v144 != 1 || (v237 = *((_QWORD *)v284 + 6) & 0xFFFFFFFFFFFFLL) == 0)
                    {
                      v149 = 0;
                      v145 = 0;
                      goto LABEL_416;
                    }
                    v258 = 0;
                    do
                    {
                      ++v258;
                      v237 = *(_QWORD *)(v237 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v237);
                  }
                  v90 = v268;
                  if (v258)
                    goto LABEL_439;
LABEL_905:
                  v149 = 0;
                  v145 = 0;
                  goto LABEL_416;
                }
              }
              *((_DWORD *)v145 + 6) += 2;
              switch(v144)
              {
                case 0u:
                  v146 = v285;
                  goto LABEL_364;
                case 4u:
                  v147 = *((_WORD *)v143 + 14);
                  if ((v147 & 1) == 0)
                  {
                    if ((v147 & 4) == 0)
                      break;
                    v148 = *((_QWORD *)v143 + 10);
                    if (!v148)
                      break;
                    v146 = 0;
                    do
                    {
                      ++v146;
                      v148 = *(_QWORD *)(v148 + 56);
                    }
                    while (v148);
LABEL_364:
                    if (v146)
                      goto LABEL_385;
                    break;
                  }
                  v171 = *((_QWORD *)v143 + 10);
                  if (v171)
                  {
                    v146 = *(_DWORD *)(v171 + 4);
                    goto LABEL_364;
                  }
                  break;
                case 1u:
                  v235 = *((_QWORD *)v143 + 6) & 0xFFFFFFFFFFFFLL;
                  if (v235)
                  {
                    v146 = 0;
                    do
                    {
                      ++v146;
                      v235 = *(_QWORD *)(v235 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v235);
                    goto LABEL_364;
                  }
                  break;
                case 2u:
                  v233 = *((_QWORD *)v143 + 6) & 0xFFFFFFFFFFFFLL;
                  if (!v233)
                  {
                    v149 = 0;
                    goto LABEL_416;
                  }
                  v146 = 1;
                  do
                  {
                    ++v146;
                    v233 = *(_QWORD *)(v233 + 48) & 0xFFFFFFFFFFFFLL;
                  }
                  while (v233);
                  goto LABEL_364;
              }
              if ((*((_WORD *)v145 + 14) & 4) != 0
                && *((_QWORD *)v145 + 10)
                && ((*(uint64_t (**)(WebCore *))(*(_QWORD *)v145 + 208))(v145) & 1) != 0)
              {
                v150 = v145;
                goto LABEL_404;
              }
              if ((*((_QWORD *)v145 + 6) & 0xFFFFFFFFFFFFLL) == 0)
              {
                v150 = (WebCore *)*((_QWORD *)v145 + 4);
                if (v150)
                  *((_DWORD *)v150 + 6) += 2;
                if (*((_DWORD *)v145 + 6) == 2)
                {
                  v264 = v150;
                  if ((*((_WORD *)v145 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v145, v11);
                  v150 = v264;
                }
                else
                {
                  *((_DWORD *)v145 + 6) -= 2;
                }
LABEL_404:
                v149 = 0;
                if (!v150 || (*((_WORD *)v150 + 14) & 8) == 0)
                {
LABEL_415:
                  v145 = v150;
                  goto LABEL_416;
                }
                *((_DWORD *)v150 + 6) += 2;
                v151 = *((_QWORD *)v150 + 6) & 0xFFFFFFFFFFFFLL;
                if (!v151)
                {
                  v149 = 0;
                  goto LABEL_413;
                }
                v152 = *(_DWORD *)((*((_QWORD *)v150 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) + 2;
                *(_DWORD *)((*((_QWORD *)v150 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) = v152;
                if ((*(_WORD *)(v151 + 28) & 8) == 0
                  || (v153 = *((_QWORD *)v150 + 12), v154 = *(_QWORD *)(v151 + 96), v153 != v154)
                  && (*(_QWORD *)(v153 + 24) != *(_QWORD *)(v154 + 24)
                   || *(_QWORD *)(v153 + 32) != *(_QWORD *)(v154 + 32)))
                {
                  v149 = 0;
LABEL_411:
                  v155 = v152 - 2;
                  if (v155)
                  {
                    *(_DWORD *)(v151 + 24) = v155;
LABEL_413:
                    if (*((_DWORD *)v150 + 6) == 2)
                    {
                      v145 = v150;
                      if ((*((_WORD *)v150 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v150, v11);
                      goto LABEL_416;
                    }
                    *((_DWORD *)v150 + 6) -= 2;
                    goto LABEL_415;
                  }
                  v263 = v150;
                  if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v151, v11);
LABEL_691:
                  v150 = v263;
                  goto LABEL_413;
                }
                v263 = v150;
                hasEquivalentAttributes = WebCore::Element::hasEquivalentAttributes(v150, (const WebCore::Element *)v151, v134, v135, v136);
                v152 = *(_DWORD *)(v151 + 24);
                if (!hasEquivalentAttributes)
                {
                  v149 = 0;
LABEL_823:
                  v150 = v263;
                  goto LABEL_411;
                }
                *(_DWORD *)(v151 + 24) = v152 + 2;
                v262 = (WebCore::Node *)*((_QWORD *)v263 + 10);
                if (v262)
                  *((_DWORD *)v262 + 6) += 2;
                WebCore::CompositeEditCommand::mergeIdenticalElements((WebCore::CompositeEditCommand *)a1, (WebCore::Element *)v151, v263);
                v240 = *((_QWORD *)v262 + 6) & 0xFFFFFFFFFFFFLL;
                if (v240)
                {
                  v260 = 0;
                  do
                  {
                    ++v260;
                    v240 = *(_QWORD *)(v240 + 48) & 0xFFFFFFFFFFFFLL;
                  }
                  while (v240);
                }
                else
                {
                  v260 = 0;
                }
                if ((v283 & 8) == 0 && ((v241 = v283 & 7, v241 != 4) ? (v242 = v241 == 2) : (v242 = 1), v242))
                {
                  v261 = v281;
                  if (!v281)
                  {
                    v246 = 0;
                    v259 = 0;
                    goto LABEL_809;
                  }
                  v243 = *((_DWORD *)v281 + 6);
                  *((_DWORD *)v281 + 6) = v243 + 2;
                  v244 = *((_WORD *)v261 + 14);
                  if ((v244 & 1) != 0)
                  {
                    v248 = *((_QWORD *)v261 + 10);
                    if (v248)
                      v259 = *(_DWORD *)(v248 + 4);
                    else
                      v259 = 0;
                  }
                  else if ((v244 & 4) != 0 && (v245 = *((_QWORD *)v261 + 10)) != 0)
                  {
                    v259 = 0;
                    do
                    {
                      ++v259;
                      v245 = *(_QWORD *)(v245 + 56);
                    }
                    while (v245);
                  }
                  else
                  {
                    v259 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v261 + 208))(v261) ^ 1;
                    v243 = *((_DWORD *)v261 + 6) - 2;
                  }
                  if (v243)
                  {
                    *((_DWORD *)v261 + 6) = v243;
                  }
                  else if ((*((_WORD *)v261 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v261, v239);
                  }
                }
                else
                {
                  v259 = v282;
                }
                v246 = v281;
LABEL_809:
                if (v263 == v246)
                  v247 = v260;
                else
                  v247 = 0;
                *((_DWORD *)v263 + 6) += 2;
                v290 = v263;
                v291 = v260;
                v292 = 0;
                if (v246)
                {
                  *((_DWORD *)v246 + 6) += 2;
                  v287 = v246;
                  v288 = v247 + v259;
                  v289 = 0;
                  WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v290, (const WebCore::Position *)&v287);
                  if (*((_DWORD *)v246 + 6) == 2)
                  {
                    if ((*((_WORD *)v246 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v246, v11);
                  }
                  else
                  {
                    *((_DWORD *)v246 + 6) -= 2;
                  }
                }
                else
                {
                  v287 = 0;
                  v288 = v247 + v259;
                  v289 = 0;
                  WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v290, (const WebCore::Position *)&v287);
                }
                if (*((_DWORD *)v263 + 6) == 2)
                {
                  if ((*((_WORD *)v263 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v263, v11);
                }
                else
                {
                  *((_DWORD *)v263 + 6) -= 2;
                }
                if (v262)
                {
                  if (*((_DWORD *)v262 + 6) == 2)
                  {
                    if ((*((_WORD *)v262 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v262, v11);
                  }
                  else
                  {
                    *((_DWORD *)v262 + 6) -= 2;
                  }
                }
                v152 = *(_DWORD *)(v151 + 24) - 2;
                if (*(_DWORD *)(v151 + 24) == 2)
                {
                  if ((*(_WORD *)(v151 + 30) & 0x400) != 0)
                  {
                    v149 = 1;
                    goto LABEL_691;
                  }
                  WebCore::Node::removedLastRef((WebCore::Node *)v151, v11);
                  v152 = *(_DWORD *)(v151 + 24);
                }
                else
                {
                  *(_DWORD *)(v151 + 24) = v152;
                }
                v149 = 1;
                goto LABEL_823;
              }
LABEL_385:
              v149 = 0;
LABEL_416:
              if (*((_DWORD *)v145 + 6) == 2)
              {
                if ((*((_WORD *)v145 + 15) & 0x400) != 0)
                {
                  v90 = v268;
                  if (!v149)
                    goto LABEL_439;
                }
                else
                {
                  WebCore::Node::removedLastRef(v145, v11);
                  v90 = v268;
                  if ((v149 & 1) == 0)
                    goto LABEL_439;
                }
              }
              else
              {
                *((_DWORD *)v145 + 6) -= 2;
                v90 = v268;
                if ((v149 & 1) == 0)
                  goto LABEL_439;
              }
              if (*(_BYTE *)(a1 + 328))
              {
                v156 = *(WebCore **)(a1 + 192);
                if (v156)
                  *((_DWORD *)v156 + 6) += 2;
                v157 = a1 + 200;
              }
              else
              {
                v156 = *(WebCore **)(a1 + 296);
                if (v156)
                  *((_DWORD *)v156 + 6) += 2;
                v157 = a1 + 304;
              }
              LODWORD(v290) = *(_DWORD *)v157;
              BYTE4(v290) = *(_BYTE *)(v157 + 4);
              v158 = v284;
              v284 = v156;
              if (v158)
              {
                if (*((_DWORD *)v158 + 6) == 2)
                {
                  if ((*((_WORD *)v158 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v158, v11);
                }
                else
                {
                  *((_DWORD *)v158 + 6) -= 2;
                }
              }
              v285 = v290;
              v286 = BYTE4(v290);
              if (*(_BYTE *)(a1 + 328))
              {
                v159 = *(WebCore::Node **)(a1 + 208);
                if (v159)
                  *((_DWORD *)v159 + 6) += 2;
                v160 = a1 + 216;
              }
              else
              {
                v159 = *(WebCore::Node **)(a1 + 312);
                if (v159)
                  *((_DWORD *)v159 + 6) += 2;
                v160 = a1 + 320;
              }
              LODWORD(v290) = *(_DWORD *)v160;
              BYTE4(v290) = *(_BYTE *)(v160 + 4);
              v161 = v281;
              v281 = v159;
              if (v161)
              {
                if (*((_DWORD *)v161 + 6) == 2)
                {
                  if ((*((_WORD *)v161 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v161, v11);
                }
                else
                {
                  *((_DWORD *)v161 + 6) -= 2;
                }
              }
              v282 = v290;
              v283 = BYTE4(v290);
LABEL_439:
              v162 = v284;
              v163 = v281;
              if (v284)
                v164 = v281 == 0;
              else
                v164 = 1;
              if (v164)
                goto LABEL_610;
              if (!v77)
              {
LABEL_548:
                if (!v162 || !v163)
                  goto LABEL_610;
                WebCore::Document::updateLayout(v4, 2u, 0);
                ++*(_DWORD *)a2;
                if ((v85 & 1) != 0)
                {
                  v191 = (char *)a2;
LABEL_606:
                  WebCore::ApplyStyleCommand::fixRangeAndApplyInlineStyle((unsigned int *)a1, v191, (uint64_t)&v284, (uint64_t)&v281);
                  WebCore::ApplyStyleCommand::cleanupUnstyledAppleStyleSpans(a1, v12, v205, v206, v207);
                  if (v52 != v12)
                    WebCore::ApplyStyleCommand::cleanupUnstyledAppleStyleSpans(a1, v52, v208, v209, v210);
                  if (*(_DWORD *)v191 == 1)
                  {
                    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v191, v11);
                    WTF::fastFree(v217, v218);
                    if (v90)
                    {
LABEL_611:
                      if (*(_DWORD *)v90 == 1)
                      {
                        WebCore::EditingStyle::~EditingStyle(v90, v11);
                        WTF::fastFree(v213, v214);
                      }
                      else
                      {
                        --*(_DWORD *)v90;
                      }
                    }
LABEL_613:
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 1)
                      {
                        WebCore::EditingStyle::~EditingStyle(v91, v11);
                        WTF::fastFree(v215, v216);
                      }
                      else
                      {
                        --*(_DWORD *)v91;
                      }
                    }
                    v211 = v278;
                    v278 = 0;
                    if (v211)
                    {
                      if (*((_DWORD *)v211 + 6) == 2)
                      {
                        if ((*((_WORD *)v211 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v211, v11);
                      }
                      else
                      {
                        *((_DWORD *)v211 + 6) -= 2;
                      }
                    }
                    goto LABEL_619;
                  }
                  --*(_DWORD *)v191;
LABEL_610:
                  if (v90)
                    goto LABEL_611;
                  goto LABEL_613;
                }
                v192 = v284;
                v193 = (char *)v90;
                if (v284)
                  *((_DWORD *)v284 + 6) += 4;
                v271 = v192;
                WebCore::enclosingBlock((uint64_t *)&v271, (WebCore::Node *)1, &v290);
                v194 = v290;
                WebCore::highestEmbeddingAncestor(&v273, v192, v290);
                if (v194)
                {
                  if (*((_DWORD *)v194 + 6) == 2)
                  {
                    if ((*((_WORD *)v194 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v194, v195);
                  }
                  else
                  {
                    *((_DWORD *)v194 + 6) -= 2;
                  }
                }
                v271 = 0;
                if (v192)
                {
                  if (*((_DWORD *)v192 + 6) == 2)
                  {
                    if ((*((_WORD *)v192 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v192, v195);
                  }
                  else
                  {
                    *((_DWORD *)v192 + 6) -= 2;
                  }
                }
                v196 = v281;
                if (v281)
                  *((_DWORD *)v281 + 6) += 4;
                v270 = v196;
                WebCore::enclosingBlock((uint64_t *)&v270, (WebCore::Node *)1, &v290);
                v197 = v290;
                WebCore::highestEmbeddingAncestor(v272, v196, v290);
                if (v197)
                {
                  if (*((_DWORD *)v197 + 6) == 2)
                  {
                    if ((*((_WORD *)v197 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v197, v198);
                  }
                  else
                  {
                    *((_DWORD *)v197 + 6) -= 2;
                  }
                }
                v270 = 0;
                if (v196)
                {
                  if (*((_DWORD *)v196 + 6) == 2)
                  {
                    if ((*((_WORD *)v196 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v196, v198);
                  }
                  else
                  {
                    *((_DWORD *)v196 + 6) -= 2;
                  }
                }
                if (v273)
                {
                  WebCore::positionInParentAfterNode((uint64_t)v273, (WebCore::Node *)v198, (uint64_t)&v290);
                  v199 = v272[0];
                  if (!v272[0])
                  {
                    v200 = v281;
                    if (v281)
                      *((_DWORD *)v281 + 6) += 2;
                    v287 = v200;
                    v288 = v282;
                    v289 = v283;
LABEL_578:
                    if (v193)
                    {
                      v191 = (char *)v91;
                    }
                    else
                    {
                      WebCore::EditingStyle::copy((WebCore::EditingStyle *)a2, (uint64_t *)&v277);
                      v191 = (char *)v277;
                      v277 = 0;
                      if (v91)
                      {
                        if (*(_DWORD *)v91 == 1)
                        {
                          WebCore::EditingStyle::~EditingStyle(v91, v202);
                          WTF::fastFree(v223, v224);
                          if (v277)
                          {
                            if (*(_DWORD *)v277 == 1)
                            {
                              WebCore::EditingStyle::~EditingStyle(v277, v225);
                              WTF::fastFree(v231, v232);
                            }
                            else
                            {
                              --*(_DWORD *)v277;
                            }
                          }
                        }
                        else
                        {
                          --*(_DWORD *)v91;
                        }
                      }
                      WebCore::EditingStyle::extractAndRemoveTextDirection((WebCore::EditingStyle *)v191, (uint64_t *)&v277);
                      v193 = (char *)v277;
                    }
                    WebCore::ApplyStyleCommand::fixRangeAndApplyInlineStyle((unsigned int *)a1, v193, (uint64_t)&v290, (uint64_t)&v287);
                    if (v191)
                      ++*(_DWORD *)v191;
                    if (*(_DWORD *)a2 == 1)
                    {
                      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)a2, (WTF::StringImpl *)v198);
                      WTF::fastFree(v220, v221);
                    }
                    else
                    {
                      --*(_DWORD *)a2;
                    }
                    v203 = v287;
                    v287 = 0;
                    if (v203)
                    {
                      if (*((_DWORD *)v203 + 6) == 2)
                      {
                        if ((*((_WORD *)v203 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v203, v198);
                      }
                      else
                      {
                        *((_DWORD *)v203 + 6) -= 2;
                      }
                    }
                    v204 = v290;
                    v290 = 0;
                    if (v204)
                    {
                      if (*((_DWORD *)v204 + 6) == 2)
                      {
                        if ((*((_WORD *)v204 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v204, v198);
                      }
                      else
                      {
                        *((_DWORD *)v204 + 6) -= 2;
                      }
                    }
                    if (v272[0])
                    {
                      if (*((_DWORD *)v272[0] + 6) == 2)
                      {
                        if ((*((_WORD *)v272[0] + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v272[0], v198);
                      }
                      else
                      {
                        *((_DWORD *)v272[0] + 6) -= 2;
                      }
                    }
                    v91 = (WebCore::Node *)v191;
                    if (!v196)
                      goto LABEL_600;
                    goto LABEL_598;
                  }
                }
                else
                {
                  v199 = v272[0];
                  if (!v272[0])
                  {
                    v191 = (char *)a2;
                    if (!v196)
                    {
LABEL_600:
                      v90 = (WebCore *)v193;
                      if (v273)
                      {
                        if (*((_DWORD *)v273 + 6) == 2)
                        {
                          if ((*((_WORD *)v273 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v273, v198);
                        }
                        else
                        {
                          *((_DWORD *)v273 + 6) -= 2;
                        }
                      }
                      if (v192)
                      {
                        if (*((_DWORD *)v192 + 6) == 2)
                        {
                          if ((*((_WORD *)v192 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v192, v198);
                          v90 = (WebCore *)v193;
                        }
                        else
                        {
                          *((_DWORD *)v192 + 6) -= 2;
                        }
                      }
                      goto LABEL_606;
                    }
LABEL_598:
                    if (*((_DWORD *)v196 + 6) == 2)
                    {
                      if ((*((_WORD *)v196 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v196, v198);
                    }
                    else
                    {
                      *((_DWORD *)v196 + 6) -= 2;
                    }
                    goto LABEL_600;
                  }
                  v201 = v284;
                  if (v284)
                    *((_DWORD *)v284 + 6) += 2;
                  v290 = v201;
                  v291 = v285;
                  v292 = v286;
                }
                WebCore::positionInParentBeforeNode(v199, (WebCore::Node *)v198, (uint64_t)&v287);
                goto LABEL_578;
              }
              v269 = v90;
              v165 = v283 & 7;
              if (v165 > 4
                || (v166 = v281, ((1 << v165) & 0x19) == 0) && (v166 = (WebCore::Node *)*((_QWORD *)v281 + 4)) == 0)
              {
                v168 = 0;
                goto LABEL_524;
              }
              *((_DWORD *)v166 + 6) += 2;
              if ((*((_WORD *)v166 + 14) & 4) != 0 && *((_QWORD *)v166 + 10))
              {
                if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v166 + 208))(v166) & 1) != 0)
                {
                  v168 = v166;
                  goto LABEL_510;
                }
                v163 = v281;
                if (!v281)
                {
                  LODWORD(v167) = 0;
                  goto LABEL_490;
                }
                v165 = v283 & 7;
                if ((v283 & 7) == 0)
                  goto LABEL_449;
              }
              else if (!v165)
              {
LABEL_449:
                LODWORD(v167) = v282;
                goto LABEL_490;
              }
              switch(v165)
              {
                case 4u:
                  v172 = *((_WORD *)v163 + 14);
                  if ((v172 & 1) != 0)
                  {
                    v167 = *((_QWORD *)v163 + 10);
                    if (v167)
                      LODWORD(v167) = *(_DWORD *)(v167 + 4);
                  }
                  else
                  {
                    if ((v172 & 4) == 0)
                      break;
                    v173 = *((_QWORD *)v163 + 10);
                    if (!v173)
                      break;
                    LODWORD(v167) = 0;
                    do
                    {
                      LODWORD(v167) = v167 + 1;
                      v173 = *(_QWORD *)(v173 + 56);
                    }
                    while (v173);
                  }
LABEL_490:
                  v174 = *((_WORD *)v166 + 14);
                  if ((v174 & 1) != 0)
                  {
                    v178 = *((_QWORD *)v166 + 10);
                    if (v178)
                    {
                      v176 = *(_DWORD *)(v178 + 4);
                      goto LABEL_503;
                    }
                  }
                  else if ((v174 & 4) != 0)
                  {
                    if ((_DWORD)v167)
                    {
                      v175 = *((_QWORD *)v166 + 10);
                      if (v175)
                      {
                        v176 = 0;
                        do
                        {
                          ++v176;
                          v175 = *(_QWORD *)(v175 + 56);
                          if (v175)
                            v177 = v176 >= v167;
                          else
                            v177 = 1;
                        }
                        while (!v177);
LABEL_503:
                        if (v176 > v167)
                        {
LABEL_505:
                          v168 = v166;
LABEL_524:
                          v90 = v269;
                          goto LABEL_525;
                        }
                      }
                    }
                  }
                  if (*((_QWORD *)v163 + 7))
                    goto LABEL_505;
                  v168 = (WebCore::Node *)*((_QWORD *)v163 + 4);
                  if (v168)
                    *((_DWORD *)v168 + 6) += 2;
                  if (*((_DWORD *)v166 + 6) == 2)
                  {
                    if ((*((_WORD *)v166 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v166, v11);
                  }
                  else
                  {
                    *((_DWORD *)v166 + 6) -= 2;
                  }
LABEL_510:
                  v179 = *((_WORD *)v168 + 14);
                  v180 = v168 == 0;
                  v90 = v269;
                  if (v168 && (v179 & 0x10) != 0)
                  {
                    if (*(_QWORD *)(*((_QWORD *)v168 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
                      goto LABEL_525;
                    v180 = 0;
                  }
                  if ((v179 & 8) != 0)
                  {
                    if (v180)
                      goto LABEL_524;
                    *((_DWORD *)v168 + 6) += 2;
                    v181 = *((_QWORD *)v168 + 7);
                    if (!v181)
                    {
LABEL_522:
                      if (*((_DWORD *)v168 + 6) == 2)
                      {
                        if ((*((_WORD *)v168 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v168, v11);
                        v90 = v269;
                        goto LABEL_525;
                      }
                      *((_DWORD *)v168 + 6) -= 2;
                      goto LABEL_524;
                    }
                    v182 = *(_DWORD *)(v181 + 24) + 2;
                    *(_DWORD *)(v181 + 24) = v182;
                    if ((*(_WORD *)(v181 + 28) & 8) == 0)
                      goto LABEL_520;
                    v183 = *((_QWORD *)v168 + 12);
                    v184 = *(_QWORD *)(v181 + 96);
                    if (v183 != v184
                      && (*(_QWORD *)(v183 + 24) != *(_QWORD *)(v184 + 24)
                       || *(_QWORD *)(v183 + 32) != *(_QWORD *)(v184 + 32)))
                    {
                      goto LABEL_520;
                    }
                    v249 = WebCore::Element::hasEquivalentAttributes(v168, (const WebCore::Element *)v181, v134, v135, v136);
                    v182 = *(_DWORD *)(v181 + 24);
                    if (!v249)
                      goto LABEL_520;
                    *(_DWORD *)(v181 + 24) = v182 + 2;
                    v265 = *(WebCore::Node **)(v181 + 80);
                    if (v265)
                      *((_DWORD *)v265 + 6) += 2;
                    WebCore::CompositeEditCommand::mergeIdenticalElements((WebCore::CompositeEditCommand *)a1, v168, (WebCore::Element *)v181);
                    v250 = v284;
                    if (v284 && (v251 = v286 & 7, v251 <= 4))
                    {
                      v252 = v284;
                      if (((1 << v251) & 0x19) == 0)
                        v252 = (WebCore *)*((_QWORD *)v284 + 4);
                    }
                    else
                    {
                      v252 = 0;
                    }
                    if (v265)
                    {
                      v253 = *((_QWORD *)v265 + 6) & 0xFFFFFFFFFFFFLL;
                      if (v253)
                      {
                        v254 = 0;
                        do
                        {
                          ++v254;
                          v253 = *(_QWORD *)(v253 + 48) & 0xFFFFFFFFFFFFLL;
                        }
                        while (v253);
                        goto LABEL_863;
                      }
                    }
                    else
                    {
                      v255 = *(_QWORD *)(v181 + 80);
                      if (v255)
                      {
                        v254 = 0;
                        do
                        {
                          ++v254;
                          v255 = *(_QWORD *)(v255 + 56);
                        }
                        while (v255);
LABEL_863:
                        if (v168 == v252)
                        {
                          v256 = *(_DWORD *)(v181 + 24) + 2;
                          v290 = (WebCore::Node *)v181;
                          v291 = v285;
                          v292 = 0;
                          v250 = (WebCore *)v181;
                        }
                        else
                        {
                          if (v284)
                            *((_DWORD *)v284 + 6) += 2;
                          v290 = v250;
                          v291 = v285;
                          v292 = v286;
                          v256 = *(_DWORD *)(v181 + 24);
                        }
                        *(_DWORD *)(v181 + 24) = v256 + 2;
                        v287 = (WebCore *)v181;
                        v288 = v254;
                        v289 = 0;
                        WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v290, (const WebCore::Position *)&v287);
                        if (*(_DWORD *)(v181 + 24) == 2)
                        {
                          if ((*(_WORD *)(v181 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v181, v11);
                        }
                        else
                        {
                          *(_DWORD *)(v181 + 24) -= 2;
                        }
                        if (v250)
                        {
                          if (*((_DWORD *)v250 + 6) == 2)
                          {
                            if ((*((_WORD *)v250 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v250, v11);
                          }
                          else
                          {
                            *((_DWORD *)v250 + 6) -= 2;
                          }
                        }
                        if (v265)
                        {
                          if (*((_DWORD *)v265 + 6) == 2)
                          {
                            if ((*((_WORD *)v265 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v265, v11);
                          }
                          else
                          {
                            *((_DWORD *)v265 + 6) -= 2;
                          }
                        }
                        v182 = *(_DWORD *)(v181 + 24) - 2;
                        if (*(_DWORD *)(v181 + 24) == 2)
                        {
                          v226 = *(_WORD *)(v181 + 30);
                          if ((v226 & 0x400) != 0)
                            goto LABEL_710;
                          WebCore::Node::removedLastRef((WebCore::Node *)v181, v11);
                          v182 = *(_DWORD *)(v181 + 24);
                        }
                        else
                        {
                          *(_DWORD *)(v181 + 24) = v182;
                        }
LABEL_520:
                        v185 = v182 - 2;
                        if (v185)
                        {
                          *(_DWORD *)(v181 + 24) = v185;
                          goto LABEL_522;
                        }
                        v226 = *(_WORD *)(v181 + 30);
LABEL_710:
                        if ((v226 & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v181, v11);
                        goto LABEL_522;
                      }
                    }
                    v254 = 0;
                    goto LABEL_863;
                  }
LABEL_525:
                  if (*((_DWORD *)v168 + 6) == 2)
                  {
                    if ((*((_WORD *)v168 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v168, v11);
                  }
                  else
                  {
                    *((_DWORD *)v168 + 6) -= 2;
                  }
                  if (*(_BYTE *)(a1 + 328))
                  {
                    v186 = *(WebCore **)(a1 + 192);
                    if (v186)
                      *((_DWORD *)v186 + 6) += 2;
                    v187 = a1 + 200;
                  }
                  else
                  {
                    v186 = *(WebCore **)(a1 + 296);
                    if (v186)
                      *((_DWORD *)v186 + 6) += 2;
                    v187 = a1 + 304;
                  }
                  LODWORD(v290) = *(_DWORD *)v187;
                  BYTE4(v290) = *(_BYTE *)(v187 + 4);
                  v188 = v284;
                  v284 = v186;
                  if (v188)
                  {
                    if (*((_DWORD *)v188 + 6) == 2)
                    {
                      if ((*((_WORD *)v188 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v188, v11);
                    }
                    else
                    {
                      *((_DWORD *)v188 + 6) -= 2;
                    }
                  }
                  v285 = v290;
                  v286 = BYTE4(v290);
                  if (*(_BYTE *)(a1 + 328))
                  {
                    v163 = *(WebCore::Node **)(a1 + 208);
                    if (v163)
                      *((_DWORD *)v163 + 6) += 2;
                    v189 = a1 + 216;
                  }
                  else
                  {
                    v163 = *(WebCore::Node **)(a1 + 312);
                    if (v163)
                      *((_DWORD *)v163 + 6) += 2;
                    v189 = a1 + 320;
                  }
                  LODWORD(v290) = *(_DWORD *)v189;
                  BYTE4(v290) = *(_BYTE *)(v189 + 4);
                  v190 = v281;
                  v281 = v163;
                  if (v190)
                  {
                    if (*((_DWORD *)v190 + 6) == 2)
                    {
                      if ((*((_WORD *)v190 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef(v190, v11);
                        v163 = v281;
                      }
                    }
                    else
                    {
                      *((_DWORD *)v190 + 6) -= 2;
                    }
                  }
                  v282 = v290;
                  v283 = BYTE4(v290);
                  v162 = v284;
                  goto LABEL_548;
                case 1u:
                  v236 = *((_QWORD *)v163 + 6) & 0xFFFFFFFFFFFFLL;
                  if (v236)
                  {
                    LODWORD(v167) = 0;
                    do
                    {
                      LODWORD(v167) = v167 + 1;
                      v236 = *(_QWORD *)(v236 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v236);
                    goto LABEL_490;
                  }
                  break;
                case 2u:
                  v234 = *((_QWORD *)v163 + 6) & 0xFFFFFFFFFFFFLL;
                  if (v234)
                  {
                    LODWORD(v167) = 1;
                    do
                    {
                      LODWORD(v167) = v167 + 1;
                      v234 = *(_QWORD *)(v234 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v234);
                  }
                  else
                  {
                    LODWORD(v167) = 1;
                  }
                  goto LABEL_490;
              }
              LODWORD(v167) = 0;
              goto LABEL_490;
            }
            WebCore::positionInParentBeforeNode(v95, v96, (uint64_t)v272);
            WebCore::Position::downstream((uint64_t)v272, (WebCore::Node *)1, (uint64_t)&v273);
            v102 = v273;
            v273 = 0;
            v103 = v287;
            v287 = v102;
            if (v103)
            {
              if (*((_DWORD *)v103 + 6) == 2)
              {
                if ((*((_WORD *)v103 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v103, v96);
                  v170 = v273;
                  v288 = v274;
                  v289 = v275;
                  v273 = 0;
                  if (v170)
                  {
                    if (*((_DWORD *)v170 + 6) == 2)
                    {
                      if ((*((_WORD *)v170 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v170, v96);
                    }
                    else
                    {
                      *((_DWORD *)v170 + 6) -= 2;
                    }
                  }
                  goto LABEL_230;
                }
              }
              else
              {
                *((_DWORD *)v103 + 6) -= 2;
              }
            }
            v288 = v274;
            v289 = v275;
            v273 = 0;
LABEL_230:
            v104 = v272[0];
            v272[0] = 0;
            if (v104)
            {
              if (*((_DWORD *)v104 + 6) == 2)
              {
                if ((*((_WORD *)v104 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v104, v96);
              }
              else
              {
                *((_DWORD *)v104 + 6) -= 2;
              }
            }
            goto LABEL_233;
          }
          v88 = WebCore::StyleProperties::propertyAsValueID(a2[1], (WTF::StringImpl *)6);
          if ((v88 & 0xFF0000) != 0)
          {
            if ((unsigned __int16)v88 == 433)
              v89 = 1;
            else
              v89 = 2;
            goto LABEL_214;
          }
        }
        v90 = 0;
        v91 = 0;
        v92 = (WebCore *)a2;
        goto LABEL_335;
      }
    }
LABEL_619:
    v212 = v281;
    v281 = 0;
    if (v212)
    {
      if (*((_DWORD *)v212 + 6) == 2)
      {
        if ((*((_WORD *)v212 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v212, v11);
      }
      else
      {
        *((_DWORD *)v212 + 6) -= 2;
      }
    }
LABEL_622:
    result = (unsigned int *)v284;
    v284 = 0;
    if (!result)
      goto LABEL_625;
    goto LABEL_623;
  }
  v53 = v283 & 7;
  if (v53 > 4)
    goto LABEL_155;
  if (((1 << v53) & 0x19) == 0)
  {
    v52 = (WebCore::Node *)*((_QWORD *)v281 + 4);
    if (!v52)
      goto LABEL_746;
  }
  *((_DWORD *)v52 + 6) += 2;
  if (v53 || (*((_WORD *)v52 + 14) & 2) == 0)
    goto LABEL_117;
  v54 = v282;
  v55 = *((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL;
  if (v55)
    LODWORD(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 528))(v55);
  if (v54 <= (int)v55)
  {
LABEL_117:
    v60 = 0;
  }
  else
  {
    v56 = *((_WORD *)v52 + 14);
    if ((v56 & 2) != 0 && (v57 = (WebCore::RenderText *)(*((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A7EBD4);
      }
      v59 = WebCore::RenderText::caretMaxOffset(v57, v11);
    }
    else if ((v56 & 1) != 0)
    {
      v222 = *((_QWORD *)v52 + 10);
      if (v222)
        v59 = *(_DWORD *)(v222 + 4);
      else
        v59 = 0;
    }
    else if ((v56 & 4) != 0 && (v58 = *((_QWORD *)v52 + 10)) != 0)
    {
      v59 = 0;
      do
      {
        ++v59;
        v58 = *(_QWORD *)(v58 + 56);
      }
      while (v58);
    }
    else
    {
      v59 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v52 + 208))(v52) ^ 1;
    }
    v60 = v54 < v59;
  }
  if (*((_DWORD *)v52 + 6) != 2)
  {
    *((_DWORD *)v52 + 6) -= 2;
    if (v60)
      goto LABEL_120;
LABEL_155:
    v77 = 0;
    v52 = 0;
    goto LABEL_197;
  }
  if ((*((_WORD *)v52 + 15) & 0x400) != 0)
  {
    if (!v60)
      goto LABEL_155;
  }
  else
  {
    WebCore::Node::removedLastRef(v52, v11);
    if (!v60)
      goto LABEL_155;
  }
LABEL_120:
  v61 = *((_QWORD *)v281 + 4);
  if (v61)
  {
    if ((*(_WORD *)(v61 + 28) & 8) != 0)
      v62 = *((_QWORD *)v281 + 4);
    else
      v62 = 0;
  }
  else
  {
    v62 = 0;
  }
  if (WebCore::ApplyStyleCommand::shouldSplitTextElement(a1, v62, (uint64_t)a2))
  {
    v63 = v284;
    if (v284)
    {
      v64 = v286 & 7;
      if (v64 > 4)
      {
        v63 = 0;
      }
      else if (((1 << v64) & 0x19) == 0)
      {
        v63 = (WebCore *)*((_QWORD *)v284 + 4);
      }
    }
    v65 = v281;
    if (v281)
    {
      v66 = v283 & 7;
      if (v66 > 4)
      {
        v67 = 0;
      }
      else
      {
        v67 = v281;
        if (((1 << v66) & 0x19) == 0)
          v67 = (WebCore::Node *)*((_QWORD *)v281 + 4);
      }
      if ((v283 & 7) != 0 || (*((_WORD *)v281 + 14) & 2) == 0)
        v65 = 0;
      else
        *((_DWORD *)v281 + 6) += 2;
    }
    else
    {
      v67 = 0;
    }
    WebCore::CompositeEditCommand::splitTextNodeContainingElement((WebCore::CompositeEditCommand *)a1, v65, v282);
    if (*((_DWORD *)v65 + 6) == 2)
    {
      if ((*((_WORD *)v65 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v65, v11);
    }
    else
    {
      *((_DWORD *)v65 + 6) -= 2;
    }
    v71 = v281;
    if ((v283 & 7u) - 1 <= 1)
      v71 = (WebCore::Node *)*((_QWORD *)v281 + 4);
    v72 = *((_QWORD *)v71 + 4);
    if (v72)
    {
      *(_DWORD *)(v72 + 24) += 2;
      if ((*(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_WORD *)((*(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v73 = *(_QWORD *)((*(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v73)
        {
          if ((*(_WORD *)(v73 + 28) & 2) != 0)
          {
            v74 = *(_DWORD *)(v73 + 24);
            v75 = v74 + 2;
            *(_DWORD *)(v73 + 24) = v74 + 2;
            if (v63 == v67)
            {
              v75 = v74 + 4;
              v290 = (WebCore::Node *)v73;
              v291 = v285;
              v292 = 0;
              v76 = (WebCore *)v73;
            }
            else
            {
              v76 = v284;
              if (v284)
              {
                *((_DWORD *)v284 + 6) += 2;
                v75 = *(_DWORD *)(v73 + 24);
              }
              v290 = v76;
              v291 = v285;
              v292 = v286;
            }
            *(_DWORD *)(v73 + 24) = v75 + 2;
            v287 = (WebCore *)v73;
            v288 = 0;
            v289 = 2;
            WebCore::ApplyStyleCommand::updateStartEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v290, (const WebCore::Position *)&v287);
            if (*(_DWORD *)(v73 + 24) == 2)
            {
              if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v73, v11);
            }
            else
            {
              *(_DWORD *)(v73 + 24) -= 2;
            }
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76, v11);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
            if (*(_DWORD *)(v73 + 24) == 2)
            {
              if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v73, v11);
            }
            else
            {
              *(_DWORD *)(v73 + 24) -= 2;
            }
          }
        }
      }
      if (*(_DWORD *)(v72 + 24) == 2)
      {
        if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v72, v11);
      }
      else
      {
        *(_DWORD *)(v72 + 24) -= 2;
      }
    }
  }
  else
  {
    WebCore::ApplyStyleCommand::splitTextAtEnd((WebCore::ApplyStyleCommand *)a1, (const WebCore::Position *)&v284, (const WebCore::Position *)&v281);
  }
  if (*(_BYTE *)(a1 + 328))
  {
    v78 = *(WebCore **)(a1 + 192);
    if (v78)
      *((_DWORD *)v78 + 6) += 2;
    v79 = a1 + 200;
  }
  else
  {
    v78 = *(WebCore **)(a1 + 296);
    if (v78)
      *((_DWORD *)v78 + 6) += 2;
    v79 = a1 + 304;
  }
  LODWORD(v290) = *(_DWORD *)v79;
  BYTE4(v290) = *(_BYTE *)(v79 + 4);
  v80 = v284;
  v284 = v78;
  if (v80)
  {
    if (*((_DWORD *)v80 + 6) == 2)
    {
      if ((*((_WORD *)v80 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v80, v11);
    }
    else
    {
      *((_DWORD *)v80 + 6) -= 2;
    }
  }
  v285 = v290;
  v286 = BYTE4(v290);
  if (*(_BYTE *)(a1 + 328))
  {
    v81 = *(WebCore::Node **)(a1 + 208);
    if (v81)
      *((_DWORD *)v81 + 6) += 2;
    v82 = a1 + 216;
  }
  else
  {
    v81 = *(WebCore::Node **)(a1 + 312);
    if (v81)
      *((_DWORD *)v81 + 6) += 2;
    v82 = a1 + 320;
  }
  LODWORD(v290) = *(_DWORD *)v82;
  BYTE4(v290) = *(_BYTE *)(v82 + 4);
  v83 = v281;
  v281 = v81;
  if (v83)
  {
    if (*((_DWORD *)v83 + 6) == 2)
    {
      if ((*((_WORD *)v83 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v83, v11);
    }
    else
    {
      *((_DWORD *)v83 + 6) -= 2;
    }
  }
  v282 = v290;
  v283 = BYTE4(v290);
  result = (unsigned int *)v284;
  if (!v284)
  {
    v52 = 0;
    goto LABEL_619;
  }
  if (v281)
  {
    v84 = WebCore::dummySpanAncestorForNode(v281, v11, v68, v69, v70);
    v52 = v84;
    if (v84)
      *((_DWORD *)v84 + 6) += 2;
    v77 = 1;
    goto LABEL_197;
  }
LABEL_208:
  v52 = 0;
  v284 = 0;
LABEL_623:
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
  }
  else
  {
    result[6] -= 2;
  }
LABEL_625:
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v11);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v52, v11);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ApplyStyleCommand::removeCSSStyle(WebCore::CompositeEditCommand *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  WTF::String *v7;
  uint64_t v8;
  __n128 v9;
  const WTF::StringImpl *v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;

  v24 = 0;
  v8 = WebCore::EditingStyle::conflictsWithInlineStyleOfElement(a2, (WTF::StringImpl *)a3, &v24, a4);
  if ((_DWORD)v8)
  {
    if (*((_DWORD *)v24 + 7))
    {
      WebCore::StyleProperties::asTextAtom(v24, v6, v7, (WTF::AtomString *)&v23, v9);
      WebCore::CompositeEditCommand::setNodeAttribute(a1, (WebCore::Element *)a3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v23);
      v13 = v23;
      v23 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      WebCore::CompositeEditCommand::setNodeAttribute(a1, (WebCore::Element *)a3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, MEMORY[0x1E0CBF2F8]);
    }
    if ((*(_WORD *)(a3 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24)
      && WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)a3, (unsigned __int8 *)1, v10, v11, v12))
    {
      WebCore::CompositeEditCommand::removeNodePreservingChildren(a1, a3, 1);
    }
  }
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v16 = *((unsigned int *)v14 + 7);
      if ((_DWORD)v16)
      {
        v17 = 16 * v16;
        v18 = (_DWORD **)(*((_QWORD *)v14 + 2) + 8);
        do
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
          {
            if (*v19 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v6);
            else
              *v19 -= 2;
          }
          v18 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      v20 = (WTF *)*((_QWORD *)v14 + 2);
      if ((WTF *)((char *)v14 + 32) != v20 && v20 != 0)
      {
        *((_QWORD *)v14 + 2) = 0;
        *((_DWORD *)v14 + 6) = 0;
        WTF::fastFree(v20, v6);
      }
      v22 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      WTF::fastFree(v14, v6);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return v8;
}

unsigned int *WebCore::ApplyStyleCommand::joinChildTextNodes(unsigned int *this, WebCore::Node *a2, WebCore::Node **a3, WebCore::Node **a4)
{
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::Node *v26;
  WTF::StringImpl *v27;
  WebCore::Text *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int *v44;
  int v45;
  int v46;
  WTF::StringImpl *v47;
  WebCore::Node *v48;
  int v49;
  char v50;
  WebCore::Node *v51;
  int v52;
  char v53;

  if (!a2)
    return this;
  v6 = (WebCore::Node *)this;
  v7 = *a3;
  if (*a3)
    *((_DWORD *)v7 + 6) += 2;
  v51 = v7;
  v52 = *((_DWORD *)a3 + 2);
  v53 = *((_BYTE *)a3 + 12);
  v8 = *a4;
  if (*a4)
    *((_DWORD *)v8 + 6) += 2;
  v48 = v8;
  v49 = *((_DWORD *)a4 + 2);
  v50 = *((_BYTE *)a4 + 12);
  if ((*((_BYTE *)a2 + 28) & 4) != 0 && (v9 = *((_QWORD *)a2 + 10)) != 0)
  {
    while ((*(_WORD *)(v9 + 28) & 2) == 0)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_10;
    }
    v44 = (int *)(a4 + 1);
    v12 = 0;
    LODWORD(v13) = 0;
    v10 = 0;
    v14 = 1;
LABEL_22:
    v15 = v12;
    if (v12 == (_DWORD)v13)
    {
      v16 = v12 + 1;
      v17 = v15 + (v15 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v16)
        v13 = v15 + 1;
      else
        v13 = v18;
      if (v13 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v19 = (char *)WTF::fastMalloc((WTF *)(8 * v13));
      this = (unsigned int *)memcpy(v19, v10, 8 * v15);
      if (v10)
      {
        if (v19 == v10)
        {
          v19 = 0;
          LODWORD(v13) = 0;
        }
        this = (unsigned int *)WTF::fastFree((WTF *)v10, a2);
      }
      v10 = v19;
    }
    *(_DWORD *)(v9 + 24) += 2;
    *(_QWORD *)&v10[8 * v15] = v9;
    v12 = v15 + 1;
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        break;
      if ((*(_WORD *)(v9 + 28) & 2) != 0)
      {
        ++v14;
        goto LABEL_22;
      }
    }
    if ((_DWORD)v15 != -1)
    {
      v43 = v14;
      v20 = 0;
      v21 = v51;
      v22 = v48;
      v23 = 8 * v14;
      do
      {
        v24 = *(WebCore::Node **)&v10[v20];
        v25 = *((_QWORD *)v24 + 7);
        if (v25 && (*(_WORD *)(v25 + 28) & 2) != 0)
        {
          *(_DWORD *)(v25 + 24) += 2;
          if ((*((_BYTE *)a3 + 12) & 7) == 0 && *a3 && (WebCore::Node *)v25 == *a3)
          {
            *((_DWORD *)v24 + 6) += 2;
            v31 = *((_QWORD *)v24 + 10);
            if (v31)
              v32 = *(_DWORD *)(v31 + 4);
            else
              v32 = 0;
            v33 = *((_DWORD *)a3 + 2);
            v51 = v24;
            if (v21)
            {
              if (*((_DWORD *)v21 + 6) == 2)
              {
                if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                {
                  v41 = v32;
                  WebCore::Node::removedLastRef(v21, a2);
                  v32 = v41;
                }
              }
              else
              {
                *((_DWORD *)v21 + 6) -= 2;
              }
            }
            v52 = v33 + v32;
            v45 &= 0xFFFFFFF0;
            v53 = v45;
          }
          else
          {
            v24 = v21;
          }
          if ((*((_BYTE *)a4 + 12) & 7) == 0 && *a4 && (WebCore::Node *)v25 == *a4)
          {
            v26 = *(WebCore::Node **)&v10[v20];
            *((_DWORD *)v26 + 6) += 2;
            v34 = *((_QWORD *)v26 + 10);
            if (v34)
              v35 = *(_DWORD *)(v34 + 4);
            else
              v35 = 0;
            v36 = *v44;
            v48 = v26;
            if (v22)
            {
              if (*((_DWORD *)v22 + 6) == 2)
              {
                if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                {
                  v37 = v22;
                  v42 = v35;
                  v38 = v36;
                  WebCore::Node::removedLastRef(v37, a2);
                  v36 = v38;
                  v35 = v42;
                }
              }
              else
              {
                *((_DWORD *)v22 + 6) -= 2;
              }
            }
            v49 = v36 + v35;
            v46 &= 0xFFFFFFF0;
            v50 = v46;
          }
          else
          {
            v26 = v22;
          }
          v27 = *(WTF::StringImpl **)(v25 + 80);
          if (v27)
            *(_DWORD *)v27 += 2;
          v47 = v27;
          v28 = *(WebCore::Text **)&v10[v20];
          v29 = *((_QWORD *)v28 + 10);
          if (v29)
            v30 = *(_DWORD *)(v29 + 4);
          else
            v30 = 0;
          WebCore::CompositeEditCommand::insertTextIntoNode(v6, v28, v30, (const WTF::String *)&v47);
          (*(void (**)(WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, v25, 1);
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, a2);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        else
        {
          v26 = v22;
          v24 = v21;
        }
        v20 += 8;
        v22 = v26;
        v21 = v24;
      }
      while (v23 != v20);
      WebCore::ApplyStyleCommand::updateStartEnd(v6, (const WebCore::Position *)&v51, (const WebCore::Position *)&v48);
      v39 = 0;
      do
      {
        v40 = *(_QWORD *)&v10[v39];
        *(_QWORD *)&v10[v39] = 0;
        if (v40)
        {
          if (*(_DWORD *)(v40 + 24) == 2)
          {
            if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v40, v11);
          }
          else
          {
            *(_DWORD *)(v40 + 24) -= 2;
          }
        }
        v39 += 8;
      }
      while (8 * v43 != v39);
      goto LABEL_12;
    }
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  WebCore::ApplyStyleCommand::updateStartEnd(v6, (const WebCore::Position *)&v51, (const WebCore::Position *)&v48);
LABEL_12:
  if (v10)
    WTF::fastFree((WTF *)v10, v11);
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48, v11);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  this = (unsigned int *)v51;
  if (v51)
  {
    if (*((_DWORD *)v51 + 6) == 2)
    {
      if ((*((_WORD *)v51 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v51, v11);
    }
    else
    {
      *((_DWORD *)v51 + 6) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::ApplyStyleCommand::splitTextAtStart(WebCore::ApplyStyleCommand *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int *result;
  void *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;

  if ((*((_BYTE *)a3 + 12) & 7) != 0)
  {
    v4 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *((_BYTE *)a2 + 12) & 7;
    if (v6 > 4)
    {
      v5 = 0;
    }
    else if (((1 << v6) & 0x19) == 0)
    {
      v5 = *(_QWORD *)(v5 + 32);
    }
  }
  v4 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (v5 != v4)
    {
LABEL_10:
      *(_DWORD *)(v4 + 24) += 2;
LABEL_11:
      v18 = v4;
      v19 = *((_DWORD *)a3 + 2);
      v20 = *((_BYTE *)a3 + 12);
      goto LABEL_12;
    }
    if ((*(_WORD *)(v5 + 28) & 2) != 0)
    {
      *(_DWORD *)(v5 + 24) += 2;
      v4 = v5;
    }
    else
    {
      v4 = 0;
    }
  }
  else if (v5)
  {
    goto LABEL_11;
  }
  v14 = *((_DWORD *)a3 + 2) - *((_DWORD *)a2 + 2);
  v18 = v4;
  v19 = v14;
  v20 = 0;
LABEL_12:
  if ((*((_BYTE *)a2 + 12) & 7) != 0)
  {
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if ((*(_WORD *)(v7 + 28) & 2) == 0)
      goto LABEL_13;
    *(_DWORD *)(v7 + 24) += 2;
  }
LABEL_14:
  WebCore::CompositeEditCommand::splitTextNode(this, (WebCore::Text *)v7, *((_DWORD *)a2 + 2));
  v8 = *(_WORD *)(v7 + 28);
  *(_DWORD *)(v7 + 24) += 2;
  v15 = v7;
  v16 = 0;
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = 3;
  v17 = v9;
  result = WebCore::ApplyStyleCommand::updateStartEnd(this, (const WebCore::Position *)&v15, (const WebCore::Position *)&v18);
  v12 = *(_DWORD *)(v7 + 24) - 2;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
      goto LABEL_34;
    result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    v12 = *(_DWORD *)(v7 + 24);
  }
  else
  {
    *(_DWORD *)(v7 + 24) = v12;
  }
  v13 = v12 - 2;
  if (v13)
  {
    *(_DWORD *)(v7 + 24) = v13;
    goto LABEL_21;
  }
LABEL_34:
  if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
LABEL_21:
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v11);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplyStyleCommand::splitTextAtEnd(WebCore::ApplyStyleCommand *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;

  v5 = *(_QWORD *)a3;
  if ((*((_BYTE *)a2 + 12) & 7) != 0)
  {
    v6 = 0;
  }
  else
  {
    if (v5 && (v7 = *((_BYTE *)a3 + 12) & 7, v7 <= 4))
    {
      v8 = 1 << v7;
      v9 = *(_QWORD *)a3;
      if ((v8 & 0x19) == 0)
        v9 = *(_QWORD *)(v5 + 32);
    }
    else
    {
      v9 = 0;
    }
    v6 = *(_QWORD *)a2 == v9;
  }
  if ((*(_WORD *)(v5 + 28) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A7FDECLL);
  }
  *(_DWORD *)(v5 + 24) += 2;
  result = (unsigned int *)WebCore::CompositeEditCommand::splitTextNode(this, (WebCore::Text *)v5, *((_DWORD *)a3 + 2));
  v12 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    v13 = *(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C);
    if ((v13 & 2) != 0)
    {
      v14 = *(_DWORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x18);
      v15 = v14 + 2;
      *(_DWORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) = v14 + 2;
      if (v6)
      {
        v15 = v14 + 4;
        v16 = *((_DWORD *)a2 + 2);
        v23 = v12;
        v24 = v16;
        v25 = 0;
        v17 = v12;
      }
      else
      {
        v17 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          *(_DWORD *)(v17 + 24) += 2;
          v15 = *(_DWORD *)(v12 + 24);
        }
        v23 = v17;
        v24 = *((_DWORD *)a2 + 2);
        v25 = *((_BYTE *)a2 + 12);
      }
      *(_DWORD *)(v12 + 24) = v15 + 2;
      if ((v13 & 1) != 0)
      {
        v18 = *(_QWORD *)(v12 + 80);
        v19 = 0;
        if (v18)
          LODWORD(v18) = *(_DWORD *)(v18 + 4);
      }
      else
      {
        LODWORD(v18) = 0;
        v19 = 4;
      }
      v20 = v12;
      v21 = v18;
      v22 = v19;
      result = WebCore::ApplyStyleCommand::updateStartEnd(this, (const WebCore::Position *)&v23, (const WebCore::Position *)&v20);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v17, v11);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

float WebCore::ApplyStyleCommand::computedFontSize(WebCore::ApplyStyleCommand *this, WebCore::Node *a2)
{
  WebCore *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore::Node *v5;
  WTF::StringImpl *v6;
  double v7;
  float v8;
  _DWORD *v9;
  int v11;
  WebCore::Node *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  uint64_t v17;

  v2 = WebCore::styleElementForNode(this, a2);
  if (v2)
    *((_DWORD *)v2 + 6) += 2;
  v12 = v2;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v12, 13, 1, 0, &v17);
  if (v15)
  {
    v4 = v14;
    v14 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v3);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (!v17)
    return 0.0;
  if (((*(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A7FF50);
  }
  v7 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v17, 6u));
  if (!(_BYTE)v6)
    v7 = 0.0;
  if (v7 >= 3.40282347e38)
  {
    v11 = 2139095039;
  }
  else
  {
    if (v7 > -3.40282347e38)
    {
      v8 = v7;
      goto LABEL_17;
    }
    v11 = -8388609;
  }
  v8 = *(float *)&v11;
LABEL_17:
  v9 = (_DWORD *)v17;
  v17 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
    else
      *v9 -= 2;
  }
  return v8;
}

BOOL WebCore::ApplyStyleCommand::nodeFullySelected(WebCore::ApplyStyleCommand *this, WebCore::Element *a2, const WebCore::Position *a3, const WebCore::Position *a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  _BOOL8 v13;
  unsigned __int8 v14;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v20;
  int v21;
  char v22;
  WebCore::Node *v23[2];
  WebCore::Node *v24[2];

  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::Document::updateLayout(v7, 2u, 0);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  WebCore::firstPositionInOrBeforeNode((uint64_t)this, (WebCore::Node *)v8, (uint64_t)v24);
  if ((WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)v24, (uint64_t)a2) & 0x80) != 0)
  {
    v13 = 0;
  }
  else
  {
    if (((*(uint64_t (**)(WebCore::ApplyStyleCommand *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    {
      v10 = *((_WORD *)this + 14);
      *((_DWORD *)this + 6) += 2;
      if ((v10 & 1) != 0)
      {
        v11 = *((_QWORD *)this + 10);
        if (v11)
          LODWORD(v11) = *(_DWORD *)(v11 + 4);
        v12 = 0;
        v20 = this;
      }
      else
      {
        LODWORD(v11) = 0;
        v20 = this;
        v12 = 4;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      *((_DWORD *)this + 6) += 2;
      v20 = this;
      v12 = 2;
    }
    v21 = v11;
    v22 = v12;
    WebCore::Position::upstream((uint64_t)&v20, (WebCore::Node *)1, (uint64_t)v23);
    v14 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)v23, (uint64_t)a3);
    v13 = v14 != 129 && (char)v14 < 1;
    v16 = v23[0];
    v23[0] = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v9);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v9);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
  }
  v18 = v24[0];
  v24[0] = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v9);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return v13;
}

uint64_t WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(WebCore::CompositeEditCommand *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::String *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::String *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v30;
  WebCore::Node *v31;

  *(_DWORD *)(a2 + 24) += 2;
  v7 = *a4;
  *a4 = 0;
  *(_DWORD *)(v7 + 24) += 2;
  v31 = (WebCore::Node *)v7;
  if (!WebCore::CompositeEditCommand::insertNodeBefore(a1, (uint64_t *)&v31, a2, 1))
  {
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v8);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    goto LABEL_39;
  }
  v10 = WebCore::Node::computeEditability(v7, 0, 0);
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v9);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  if (v10 != 2)
  {
LABEL_39:
    (*(void (**)(WebCore::CompositeEditCommand *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7, 1);
    v14 = 0;
    goto LABEL_68;
  }
  *(_DWORD *)(a2 + 24) += 2;
  v11 = a2;
  while (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 56);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (WebCore::Node::computeEditability(v11, 0, 0))
    {
      (*(void (**)(WebCore::CompositeEditCommand *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v11, 1);
      *(_DWORD *)(v11 + 24) += 2;
      v30 = (WebCore::Node *)v7;
      v31 = (WebCore::Node *)v11;
      *(_DWORD *)(v7 + 24) += 2;
      WebCore::CompositeEditCommand::appendNode(a1, (uint64_t *)&v31, (uint64_t *)&v30);
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v9);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v31, v9);
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
    }
    v11 = a3;
    if (v12 == a3)
      goto LABEL_23;
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v11 = v13;
      if ((*(_WORD *)(v12 + 30) & 0x400) != 0)
        goto LABEL_23;
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v11 = v13;
LABEL_23:
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    if (v12 == a3)
      break;
  }
  v15 = *(_QWORD *)(v7 + 56);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v16 = *(_QWORD *)(v7 + 48);
  v17 = v16 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
    *(_DWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  if (v15)
  {
    if (WebCore::Node::computeEditability(v15, 0, 1))
    {
      if ((*(_WORD *)(v15 + 28) & 8) != 0)
      {
        v21 = *(_QWORD *)(v7 + 96);
        v22 = *(_QWORD *)(v15 + 96);
        if ((v21 == v22
           || *(_QWORD *)(v21 + 24) == *(_QWORD *)(v22 + 24) && *(_QWORD *)(v21 + 32) == *(_QWORD *)(v22 + 32))
          && WebCore::Element::hasEquivalentAttributes((WebCore::Element *)v7, (const WebCore::Element *)v15, v18, v19, v20))
        {
          *(_DWORD *)(v15 + 24) += 2;
          WebCore::CompositeEditCommand::mergeIdenticalElements(a1, (WebCore::Element *)v7, (WebCore::Element *)v15);
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
      }
    }
  }
  if (v17)
  {
    if ((*(_WORD *)(v17 + 28) & 8) != 0 && WebCore::Node::computeEditability(v17, 0, 1))
    {
      v23 = *(_QWORD *)(v17 + 56);
      if (v23)
      {
        *(_DWORD *)(v23 + 24) += 2;
        if (WebCore::Node::computeEditability(v23, 0, 1))
        {
LABEL_54:
          if ((*(_WORD *)(v23 + 28) & 8) != 0)
          {
            v27 = *(_QWORD *)(v17 + 96);
            v28 = *(_QWORD *)(v23 + 96);
            if ((v27 == v28
               || *(_QWORD *)(v27 + 24) == *(_QWORD *)(v28 + 24) && *(_QWORD *)(v27 + 32) == *(_QWORD *)(v28 + 32))
              && WebCore::Element::hasEquivalentAttributes((WebCore::Element *)v17, (const WebCore::Element *)v23, v24, v25, v26))
            {
              *(_DWORD *)(v23 + 24) += 2;
              WebCore::CompositeEditCommand::mergeIdenticalElements(a1, (WebCore::Element *)v17, (WebCore::Element *)v23);
              if (*(_DWORD *)(v23 + 24) == 2)
              {
                if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v23, v9);
              }
              else
              {
                *(_DWORD *)(v23 + 24) -= 2;
              }
            }
          }
        }
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v23, v9);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
      }
      else if (WebCore::Node::computeEditability(0, 0, 1))
      {
        goto LABEL_54;
      }
    }
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v9);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v14 = 1;
LABEL_68:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a2, v9);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  return v14;
}

WebCore::Node *WebCore::CompositeEditCommand::setNodeAttribute(WebCore::CompositeEditCommand *this, WebCore::Element *a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4)
{
  WebCore::Node *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  _DWORD *v12;
  _DWORD *v13;
  WebCore::Node *result;
  WebCore::Node *v15;

  *((_DWORD *)a2 + 6) += 2;
  v8 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x118);
  v9 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v9 + 6) += 2;
  v15 = v9;
  *(_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)v8, (uint64_t *)&v15, 59) = off_1E33A9E80;
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  *(_QWORD *)v8 = off_1E33ADAE8;
  *((_QWORD *)v8 + 31) = a2;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    ++*v12;
  *((_QWORD *)v8 + 32) = v12;
  v13 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v13 += 2;
  *((_QWORD *)v8 + 33) = v13;
  *((_QWORD *)v8 + 34) = 0;
  v15 = v8;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v15);
  result = v15;
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8))();
    else
      --*((_DWORD *)v15 + 2);
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::removeNodePreservingChildren(WebCore::CompositeEditCommand *a1, uint64_t a2, int a3)
{
  char v6;
  uint64_t v7;
  WebCore::Node *v8;
  _QWORD *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *result;
  WebCore::Node *v13;

  *(_DWORD *)(a2 + 24) += 2;
  v6 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a1 + 16))(a1);
  v7 = WTF::fastMalloc((WTF *)0x128);
  v8 = *(WebCore::Node **)(*(_QWORD *)(a2 + 40) + 8);
  *((_DWORD *)v8 + 6) += 2;
  v13 = v8;
  v9 = (_QWORD *)WebCore::EditCommand::EditCommand(v7, (uint64_t *)&v13, v6);
  v9[31] = 0;
  v9[32] = 0;
  *v9 = off_1E33A9870;
  v9[33] = 0;
  v9[34] = 0;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  *(_QWORD *)v7 = off_1E33AD6C8;
  *(_QWORD *)(v7 + 280) = a2;
  *(_DWORD *)(v7 + 288) = a3;
  v13 = (WebCore::Node *)v7;
  WebCore::CompositeEditCommand::applyCommandToComposite(a1, (uint64_t **)&v13);
  result = v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
    else
      --*((_DWORD *)v13 + 2);
  }
  return result;
}

uint64_t WebCore::ApplyStyleCommand::cleanupUnstyledAppleStyleSpans(uint64_t this, WebCore::ContainerNode *a2, const WTF::StringImpl *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::CompositeEditCommand *v6;
  __int16 v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;

  if (a2)
  {
    v5 = *((_QWORD *)a2 + 10);
    if (v5)
    {
      v6 = (WebCore::CompositeEditCommand *)this;
      while (1)
      {
        v7 = *(_WORD *)(v5 + 28);
        if ((v7 & 8) != 0)
          break;
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          return this;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
LABEL_8:
      if ((v7 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24)
        && (this = WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)v5, (unsigned __int8 *)1, a3, a4, a5), (_DWORD)this))
      {
        v11 = v10;
        if (v10 != (_DWORD)v9)
        {
          v12 = v8;
          v13 = v9;
LABEL_13:
          ++v10;
          *(_DWORD *)(v5 + 24) += 2;
          v12[v11] = v5;
          v9 = v13;
          v8 = v12;
          goto LABEL_14;
        }
        v14 = ((unint64_t)v9 >> 2) + v9;
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= (unint64_t)v10 + 1)
          v13 = v10 + 1;
        else
          v13 = v15;
        if (!(v13 >> 29))
        {
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
          this = (uint64_t)memcpy(v12, v8, 8 * v10);
          if (v8)
          {
            if (v12 == v8)
              v13 = 0;
            else
              v13 = v13;
            if (v12 == v8)
              v12 = 0;
            this = WTF::fastFree((WTF *)v8, a2);
          }
          v10 = v9;
          goto LABEL_13;
        }
        __break(0xC471u);
      }
      else
      {
LABEL_14:
        while (1)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            break;
          v7 = *(_WORD *)(v5 + 28);
          if ((v7 & 8) != 0)
            goto LABEL_8;
        }
        if (v10)
        {
          v16 = 8 * v10;
          v17 = v16;
          v18 = v8;
          do
          {
            v19 = *v18++;
            WebCore::CompositeEditCommand::removeNodePreservingChildren(v6, v19, 1);
            v17 -= 8;
          }
          while (v17);
          v20 = v8;
          do
          {
            this = *v20;
            *v20 = 0;
            if (this)
            {
              if (*(_DWORD *)(this + 24) == 2)
              {
                if ((*(_WORD *)(this + 30) & 0x400) == 0)
                  this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
              }
              else
              {
                *(_DWORD *)(this + 24) -= 2;
              }
            }
            ++v20;
            v16 -= 8;
          }
          while (v16);
        }
        if (v8)
          return WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  return this;
}

unsigned int *WebCore::ApplyStyleCommand::splitAncestorsWithUnicodeBidi(WebCore::Node **a1, WebCore::CompositeEditCommand *a2, uint64_t a3, char a4, int a5)
{
  uint64_t v7;
  void *v10;
  WebCore::Node *v11;
  BOOL v12;
  WebCore::Node *v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore *v18;
  _DWORD *v19;
  unsigned __int16 v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  unsigned __int8 v29;
  WebCore::Node *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *result;
  WTF *v38;
  void *v39;
  WebCore::Node *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v47;

  v7 = a3;
  if (a3)
  {
    *(_DWORD *)(a3 + 24) += 2;
    v46 = a3;
    WebCore::enclosingBlock(&v46, (WebCore::Node *)1, &v47);
    v46 = 0;
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v46 = 0;
    WebCore::enclosingBlock(&v46, (WebCore::Node *)1, &v47);
    v46 = 0;
  }
  v11 = v47;
  if (v47)
    v12 = v47 == (WebCore::Node *)v7;
  else
    v12 = 1;
  if (v12)
  {
    *a1 = 0;
    goto LABEL_155;
  }
  v13 = *(WebCore::Node **)(v7 + 32);
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  if (v13 == v11)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v13 = v11;
LABEL_66:
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v10);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
    goto LABEL_68;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = v13;
    v18 = WebCore::styleElementForNode(v13, (WebCore::Node *)v10);
    if (v18)
      *((_DWORD *)v18 + 6) += 2;
    v40 = v18;
    v41 = 0;
    v43 = 0;
    v44 = 0;
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v40, 285, 1, 0, &v45);
    v19 = (_DWORD *)v45;
    if (v45)
    {
      if (((*(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16)) & 0x3F800) != 0)
      {
        v20 = 0;
      }
      else if ((*(_WORD *)(v45 + 4) & 0x7F) == 0x50)
      {
        v20 = *(_WORD *)(v45 + 8);
      }
      else
      {
        v20 = 0;
      }
      v45 = 0;
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v10);
      else
        *v19 -= 2;
    }
    else
    {
      v20 = 0;
      v45 = 0;
    }
    if (v43)
    {
      v21 = v42;
      v42 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = v40;
    v40 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v10);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if (v20 && v20 != 90)
    {
      if (v15)
        *((_DWORD *)v15 + 6) += 2;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v10);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      if (v17)
        *((_DWORD *)v17 + 6) += 2;
      v14 = v20;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v10);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
        v16 = v15;
      }
      else
      {
        v16 = 0;
      }
      v15 = v17;
    }
    v13 = (WebCore::Node *)*((_QWORD *)v17 + 4);
    if (v13)
      *((_DWORD *)v13 + 6) += 2;
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v10);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  while (v13 != v47);
  if (v13)
    goto LABEL_66;
LABEL_68:
  if (!v15)
  {
    *a1 = 0;
    goto LABEL_149;
  }
  v23 = 0;
  if (!a5 || v14 == 451)
    goto LABEL_96;
  if ((*((_WORD *)v15 + 14) & 0x10) == 0)
  {
    v23 = 0;
    goto LABEL_96;
  }
  v24 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = 0;
  *(_BYTE *)(v24 + 16) &= 0xE0u;
  *(_DWORD *)(v24 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::init(v24, v15, 0);
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
  {
LABEL_83:
    v29 = 0;
    v28 = 0;
    goto LABEL_90;
  }
  v26 = WebCore::StyleProperties::propertyAsValueID(v25, (WTF::StringImpl *)0x11D);
  if ((v26 & 0xFF0000) != 0 && (unsigned __int16)v26 == 457)
  {
    v27 = WebCore::StyleProperties::propertyAsValueID(*(_QWORD *)(v24 + 8), (WTF::StringImpl *)6);
    if ((v27 & 0xFF0000) != 0)
    {
      v28 = 1;
      if ((unsigned __int16)v27 == 433)
        v29 = 1;
      else
        v29 = 2;
      goto LABEL_90;
    }
    goto LABEL_83;
  }
  v29 = 0;
  v28 = (v26 & 0xFF0000) != 0 && (unsigned __int16)v26 == 90;
LABEL_90:
  if (*(_DWORD *)v24 == 1)
  {
    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v24, (WTF::StringImpl *)v10);
    WTF::fastFree(v38, v39);
  }
  else
  {
    --*(_DWORD *)v24;
  }
  v23 = 0;
  if (a5 == v29 && v28)
  {
    if (!v16)
    {
      *a1 = v15;
      goto LABEL_155;
    }
    *((_DWORD *)v16 + 6) += 2;
    v23 = v15;
    v15 = v16;
  }
LABEL_96:
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  if ((a4 & 1) != 0)
  {
    while (1)
    {
      if (!v7)
        goto LABEL_145;
      v31 = (WebCore::Node *)v7;
      v32 = *(_QWORD *)(v7 + 32);
      if (v32)
      {
        if ((*(_WORD *)(v32 + 28) & 8) == 0)
          goto LABEL_171;
        *(_DWORD *)(v32 + 24) += 2;
      }
      if ((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::CompositeEditCommand::splitElement(a2, (WebCore::Element *)v32, (WebCore::Node *)v7);
      if ((WebCore::Node *)v32 != v15)
      {
        if (v32)
          *(_DWORD *)(v32 + 24) += 2;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          v33 = *(_WORD *)(v7 + 30);
          v7 = v32;
          if ((v33 & 0x400) != 0)
            goto LABEL_111;
          WebCore::Node::removedLastRef(v31, v10);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
        v7 = v32;
      }
LABEL_111:
      if (v32)
      {
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32, v10);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
      }
      if ((WebCore::Node *)v32 == v15)
        goto LABEL_146;
    }
  }
  do
  {
    if (!v7)
    {
LABEL_145:
      *a1 = v23;
      goto LABEL_149;
    }
    v34 = v7;
    v35 = *(_QWORD *)(v7 + 32);
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 8) == 0)
      {
LABEL_171:
        __break(0xC471u);
        JUMPOUT(0x195A810E4);
      }
      *(_DWORD *)(v35 + 24) += 2;
    }
    v36 = *(_QWORD *)(v7 + 56);
    if (v36)
    {
      *(_DWORD *)(v36 + 24) += 2;
      WebCore::CompositeEditCommand::splitElement(a2, (WebCore::Element *)v35, (WebCore::Node *)v36);
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v10);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
    }
    if ((WebCore::Node *)v35 == v15)
    {
      v7 = v34;
    }
    else
    {
      if (v35)
        *(_DWORD *)(v35 + 24) += 2;
      if (*(_DWORD *)(v34 + 24) != 2)
      {
        *(_DWORD *)(v34 + 24) -= 2;
LABEL_132:
        v7 = v35;
        goto LABEL_134;
      }
      v7 = v35;
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v34, v10);
        goto LABEL_132;
      }
    }
LABEL_134:
    if (v35)
    {
      if (*(_DWORD *)(v35 + 24) == 2)
      {
        if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v35, v10);
      }
      else
      {
        *(_DWORD *)(v35 + 24) -= 2;
      }
    }
  }
  while ((WebCore::Node *)v35 != v15);
LABEL_146:
  *a1 = v23;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
LABEL_149:
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v10);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v10);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
LABEL_155:
  result = (unsigned int *)v47;
  if (v47)
  {
    if (*((_DWORD *)v47 + 6) == 2)
    {
      if ((*((_WORD *)v47 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v47, v10);
    }
    else
    {
      *((_DWORD *)v47 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::splitElement(WebCore::CompositeEditCommand *this, WebCore::Element *a2, WebCore::Node *a3)
{
  WebCore::Node *v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *result;
  WebCore::Node *v11;

  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  v6 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x110);
  v7 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v7 + 6) += 2;
  v11 = v7;
  *(_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)v6, (uint64_t *)&v11, 59) = off_1E33A9E80;
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  *(_QWORD *)v6 = off_1E33ADD98;
  *((_QWORD *)v6 + 31) = 0;
  *((_QWORD *)v6 + 32) = a2;
  *((_QWORD *)v6 + 33) = a3;
  v11 = v6;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v11);
  result = v11;
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --*((_DWORD *)v11 + 2);
  }
  return result;
}

uint64_t WebCore::ApplyStyleCommand::removeEmbeddingUpToEnclosingBlock(WebCore::ApplyStyleCommand *this, WebCore::Node *a2, WebCore::Node *a3)
{
  uint64_t result;
  void *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t *v10;
  const WebCore::QualifiedName *v11;
  uint64_t v12;
  _DWORD *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::StyleProperties *v22;
  uint64_t v23;
  WTF::String *v24;
  __n128 v25;
  unsigned __int8 *v26;
  WTF::String *v27;
  __n128 v28;
  const WTF::StringImpl *v29;
  WTF::String *v30;
  __n128 v31;
  uint64_t *v32;
  const WebCore::QualifiedName *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  char v45;
  uint64_t v46;
  WebCore::Node *v47;
  WebCore::Node *v48;

  if (a2)
  {
    *((_DWORD *)a2 + 6) += 2;
    v47 = a2;
    result = (uint64_t)WebCore::enclosingBlock((uint64_t *)&v47, (WebCore::Node *)1, &v48);
    v47 = 0;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(a2, v7);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    v47 = 0;
    result = (uint64_t)WebCore::enclosingBlock((uint64_t *)&v47, (WebCore::Node *)1, &v48);
    v47 = 0;
  }
  v8 = v48;
  if (!v48)
    return result;
  if (v48 == a2)
  {
    v8 = a2;
    goto LABEL_98;
  }
  v9 = *((_QWORD *)a2 + 4);
  if (v9)
  {
    *(_DWORD *)(v9 + 24) += 2;
    if ((WebCore::Node *)v9 == a3 || (WebCore::Node *)v9 == v8)
    {
      v12 = v9;
      goto LABEL_96;
    }
  }
  else if (!a3)
  {
    goto LABEL_98;
  }
  result = 0;
  v10 = &WebCore::HTMLNames::spanTag;
  v11 = (const WebCore::QualifiedName *)&WebCore::HTMLNames::dirAttr;
  do
  {
    v12 = *(_QWORD *)(v9 + 32);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if ((*(_WORD *)(v9 + 28) & 0x70) == 0)
      goto LABEL_60;
    *(_DWORD *)(v9 + 24) += 2;
    v41 = (WTF::StringImpl *)v9;
    v42 = 0;
    v44 = 0;
    v45 = 0;
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v41, 285, 1, 0, &v46);
    v13 = (_DWORD *)v46;
    if (v46)
    {
      if (((*(unsigned __int16 *)(v46 + 4) | (*(unsigned __int8 *)(v46 + 6) << 16)) & 0x3F800) != 0)
      {
        v14 = 0;
      }
      else if ((*(_WORD *)(v46 + 4) & 0x7F) == 0x50)
      {
        v14 = *(_WORD *)(v46 + 8);
      }
      else
      {
        v14 = 0;
      }
      v46 = 0;
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, (WTF::StringImpl *)v7);
      else
        *v13 -= 2;
    }
    else
    {
      v14 = 0;
      v46 = 0;
    }
    if (v44)
    {
      v15 = v43;
      v43 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    result = (uint64_t)v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (!v14 || v14 == 90)
      goto LABEL_60;
    v16 = *(_QWORD *)(v9 + 104);
    if (!v16)
      goto LABEL_50;
    v17 = *(unsigned int *)(v16 + 4);
    if ((v17 & 1) != 0)
    {
      v18 = *(uint64_t **)(v16 + 40);
      v19 = *(unsigned int *)(v16 + 52);
      if (*(_DWORD *)(v16 + 52))
      {
LABEL_40:
        v20 = *(_QWORD *)v11;
        while (1)
        {
          v21 = *v18;
          if (*v18 == v20
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(v20 + 24) && *(_QWORD *)(v21 + 32) == *(_QWORD *)(v20 + 32))
          {
            break;
          }
          v18 += 2;
          if (!--v19)
            goto LABEL_48;
        }
        result = (uint64_t)WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v9, v11, MEMORY[0x1E0CBF2F8]);
        if (v12)
          goto LABEL_61;
        goto LABEL_62;
      }
    }
    else
    {
      v18 = (uint64_t *)(v16 + 32);
      v19 = v17 >> 5;
      if (v19)
        goto LABEL_40;
    }
LABEL_48:
    v22 = *(const WebCore::StyleProperties **)(v16 + 8);
    if (v22)
    {
      v23 = WTF::fastMalloc((WTF *)0x60);
      WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v23, v22);
    }
    else
    {
LABEL_50:
      v23 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v23 = 0x900000001;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = v23 + 32;
      *(_QWORD *)(v23 + 24) = 4;
    }
    WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v23, 285, 0x5Au, 0);
    WebCore::MutableStyleProperties::removeProperty(v23, (WTF::StringImpl *)6, 0, v24, v25);
    WebCore::StyleProperties::asTextAtom((WebCore::StyleProperties *)v23, v26, v27, (WTF::AtomString *)&v41, v28);
    WebCore::CompositeEditCommand::setNodeAttribute(this, (WebCore::Element *)v9, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v41);
    result = (uint64_t)v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)result -= 2;
    }
    if ((*(_WORD *)(v9 + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(*v10 + 24))
    {
      result = WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)v9, (unsigned __int8 *)1, v29, v30, v31);
      if ((_DWORD)result)
        result = (uint64_t)WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v9, 1);
    }
    if (*(_DWORD *)v23 != 1)
    {
      --*(_DWORD *)v23;
LABEL_60:
      if (!v12)
        goto LABEL_62;
LABEL_61:
      *(_DWORD *)(v12 + 24) += 2;
      goto LABEL_62;
    }
    v32 = v10;
    v33 = v11;
    v34 = *(unsigned int *)(v23 + 28);
    if ((_DWORD)v34)
    {
      v35 = 16 * v34;
      v36 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
      do
      {
        v37 = *v36;
        *v36 = 0;
        if (v37)
        {
          if (*v37 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, (WTF::StringImpl *)v7);
          else
            *v37 -= 2;
        }
        v36 += 2;
        v35 -= 16;
      }
      while (v35);
    }
    v38 = *(WTF **)(v23 + 16);
    if ((WTF *)(v23 + 32) != v38 && v38 != 0)
    {
      *(_QWORD *)(v23 + 16) = 0;
      *(_DWORD *)(v23 + 24) = 0;
      WTF::fastFree(v38, v7);
    }
    v40 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    v11 = v33;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    result = WTF::fastFree((WTF *)v23, v7);
    v10 = v32;
    if (v12)
      goto LABEL_61;
LABEL_62:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if ((WebCore::Node *)v12 == a3)
      break;
    result = v12;
    v9 = v12;
  }
  while ((WebCore::Node *)v12 != v8);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
LABEL_96:
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
LABEL_98:
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v8, v7);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::ApplyStyleCommand::shouldSplitTextElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  if (!a2)
    return 0;
  if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
    return 0;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
    return 0;
  v7 = WebCore::Node::computeEditability(v5, 0, 0);
  if (!(_DWORD)v7)
    return 0;
  v8 = *(_QWORD *)(a1 + 336);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 96);
    v10 = *(_QWORD *)(v8 + 96);
    if (v9 == v10 || *(_QWORD *)(v9 + 24) == *(_QWORD *)(v10 + 24) && *(_QWORD *)(v9 + 32) == *(_QWORD *)(v10 + 32))
      return 1;
  }
  v11 = *(uint64_t (**)(uint64_t))(a1 + 352);
  if (v11)
  {
    v7 = v11(a2);
    if ((v7 & 1) != 0)
      return 1;
  }
  v14 = *(_QWORD *)(a3 + 8);
  if ((v14 && *(_DWORD *)(v14 + 28)
     || *(float *)(a3 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
     || (*(_BYTE *)(a3 + 16) & 0x1E) != 0)
    && (v7 = (uint64_t)WebCore::htmlElementEquivalents((WebCore *)v7), v15))
  {
    v16 = (_QWORD *)v7;
    v17 = 8 * v15;
    while (1)
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 16))(*v16, a2);
      if ((_DWORD)v7)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 32))(*v16, a3);
        if ((_DWORD)v7)
        {
          v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v16 + 40))(*v16, a2, a3);
          if (!(_DWORD)v7)
            break;
        }
      }
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_23;
    }
  }
  else
  {
LABEL_23:
    v18 = *(_QWORD *)(a3 + 8);
    if ((!v18 || !*(_DWORD *)(v18 + 28))
      && *(float *)(a3 + 20) == *(float *)&WebCore::EditingStyle::NoFontDelta
      && (*(_BYTE *)(a3 + 16) & 0x1E) == 0
      || (v19 = WebCore::htmlAttributeEquivalents((WebCore *)v7), !v20))
    {
LABEL_33:
      v12 = 0;
      goto LABEL_35;
    }
    v21 = v19;
    v22 = 8 * v20;
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v21 + 16))(*v21, a2)
         || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v21 + 32))(*v21, a3)
         || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v21 + 40))(*v21, a2, a3))
    {
      ++v21;
      v22 -= 8;
      if (!v22)
        goto LABEL_33;
    }
  }
  v12 = 1;
LABEL_35:
  if ((*(_BYTE *)(a2 + 22) & 8) != 0)
    return v12 | WebCore::EditingStyle::conflictsWithInlineStyleOfElement(a3, (WTF::StringImpl *)a2, 0, 0);
  return v12;
}

WebCore *WebCore::dummySpanAncestorForNode(WebCore *this, WebCore::Node *a2, const WTF::StringImpl *a3, WTF::String *a4, __n128 a5)
{
  WebCore *v5;
  WebCore *v6;

  v5 = this;
  *((_DWORD *)this + 6) += 2;
  while (1)
  {
    v6 = v5;
    if ((~*((unsigned __int16 *)v5 + 14) & 0x18) == 0
      && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24)
      && WebCore::hasNoAttributeOrOnlyStyleAttribute(v5, 0, a3, a4, a5))
    {
      break;
    }
    v5 = (WebCore *)*((_QWORD *)v5 + 4);
    if (v5)
      *((_DWORD *)v5 + 6) += 2;
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, a2);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
    if (!v5)
      return v5;
  }
  v5 = (WebCore *)*((_QWORD *)v5 + 4);
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, a2);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return v5;
}

unsigned int *WebCore::ApplyStyleCommand::removeInlineStyle(WebCore::ApplyStyleCommand *a1, WebCore *a2, uint64_t a3, const WebCore::Position *a4)
{
  WebCore::Element *v5;
  WebCore *v7;
  unsigned int v8;
  WebCore *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore *v15;
  WebCore *v16;
  char v17;
  WebCore::Node *v18;
  unsigned int v19;
  WebCore::Node *v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  void *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  uint64_t v27;
  WebCore **v28;
  WebCore *v29;
  WebCore::Node **v30;
  WebCore::Node *v31;
  uint64_t v32;
  WebCore::Node *v33;
  const WebCore::Position *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::Node *v57;
  uint64_t v58;
  WTF *v59;
  void *v60;
  WebCore::Node *v61;
  char v62;
  void *v63;
  WebCore::Node *v64;
  unsigned int *result;
  uint64_t v66;
  void *v67;
  WebCore::Node *v68;
  void *v69;
  WebCore::Node *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  WebCore::Node *v76;
  char v77;
  WebCore::Node *v78;
  unsigned int v79;
  const WebCore::Position *v80;
  WebCore::Element *v81;
  WebCore::Node *v83;
  int v84;
  char v85;
  WebCore::Node *v86;
  int v87;
  char v88;
  WebCore::Node *v89;
  int v90;
  char v91;
  WebCore::Node **v92;
  int v93;
  char v94;
  WebCore **v95;
  int v96;
  char v97;

  v5 = (WebCore::Element *)a3;
  WebCore::Position::downstream(a3, (WebCore::Node *)1, (uint64_t)&v95);
  v7 = (WebCore *)v95;
  v80 = a4;
  if (!v95 || (v8 = v97 & 7, v8 > 4))
  {
    v77 = 1;
    v9 = 0;
    goto LABEL_25;
  }
  v9 = (WebCore *)v95;
  if (((1 << v8) & 0x19) == 0)
  {
    v9 = v95[4];
    if (!v9)
    {
      v77 = 1;
      goto LABEL_25;
    }
  }
  *((_DWORD *)v9 + 6) += 2;
  if ((*((_WORD *)v9 + 14) & 2) == 0)
    goto LABEL_24;
  if (v8)
  {
    switch(v8)
    {
      case 4u:
        v11 = *((_WORD *)v7 + 14);
        if ((v11 & 1) != 0)
        {
          v10 = *((_QWORD *)v7 + 10);
          if (v10)
            LODWORD(v10) = *(_DWORD *)(v10 + 4);
        }
        else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)v7 + 10)) != 0)
        {
          LODWORD(v10) = 0;
          do
          {
            LODWORD(v10) = v10 + 1;
            v12 = *(_QWORD *)(v12 + 56);
          }
          while (v12);
        }
        else
        {
          LODWORD(v10) = 0;
        }
        goto LABEL_17;
      case 1u:
        v73 = *((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFLL;
        if (v73)
        {
          LODWORD(v10) = 0;
          do
          {
            LODWORD(v10) = v10 + 1;
            v73 = *(_QWORD *)(v73 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v73);
          goto LABEL_17;
        }
        break;
      case 2u:
        v71 = *((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFLL;
        if (v71)
        {
          LODWORD(v10) = 1;
          do
          {
            LODWORD(v10) = v10 + 1;
            v71 = *(_QWORD *)(v71 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v71);
        }
        else
        {
          LODWORD(v10) = 1;
        }
        goto LABEL_17;
    }
    LODWORD(v10) = 0;
  }
  else
  {
    LODWORD(v10) = v96;
  }
LABEL_17:
  v13 = *((_QWORD *)v9 + 10);
  if (v13)
    LODWORD(v13) = *(_DWORD *)(v13 + 4);
  if ((_DWORD)v10 != (_DWORD)v13)
    goto LABEL_24;
  WebCore::nextVisuallyDistinctCandidate((uint64_t)&v95, 1, (uint64_t)&v92);
  v15 = (WebCore *)v92;
  v92 = 0;
  v16 = (WebCore *)v95;
  v95 = (WebCore **)v15;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v16, v14);
        v68 = (WebCore::Node *)v92;
        v96 = v93;
        v97 = v94;
        v92 = 0;
        if (v68)
        {
          if (*((_DWORD *)v68 + 6) == 2)
          {
            if ((*((_WORD *)v68 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v68, v67);
          }
          else
          {
            *((_DWORD *)v68 + 6) -= 2;
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  v96 = v93;
  v97 = v94;
LABEL_24:
  v77 = 0;
LABEL_25:
  v17 = 1;
  WebCore::Position::upstream((uint64_t)a4, (WebCore::Node *)1, (uint64_t)&v92);
  v18 = (WebCore::Node *)v92;
  v78 = v9;
  if (v92)
  {
    v19 = v94 & 7;
    if (v19 <= 4)
    {
      v20 = (WebCore::Node *)v92;
      if (((1 << v19) & 0x19) != 0 || (v20 = v92[4]) != 0)
      {
        *((_DWORD *)v20 + 6) += 2;
        v76 = v20;
        if ((*((_WORD *)v20 + 14) & 2) == 0)
          goto LABEL_41;
        switch(v19)
        {
          case 0u:
            v21 = v93;
            goto LABEL_31;
          case 4u:
            v22 = *((_WORD *)v18 + 14);
            if ((v22 & 1) == 0)
            {
              if ((v22 & 4) == 0)
                break;
              v23 = *((_QWORD *)v18 + 10);
              if (!v23)
                break;
              v21 = 0;
              do
              {
                ++v21;
                v23 = *(_QWORD *)(v23 + 56);
              }
              while (v23);
LABEL_31:
              if (v21)
                goto LABEL_41;
              break;
            }
            v66 = *((_QWORD *)v18 + 10);
            if (v66)
            {
              v21 = *(_DWORD *)(v66 + 4);
              goto LABEL_31;
            }
            break;
          case 1u:
            v74 = *((_QWORD *)v18 + 6) & 0xFFFFFFFFFFFFLL;
            if (v74)
            {
              v21 = 0;
              do
              {
                ++v21;
                v74 = *(_QWORD *)(v74 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v74);
              goto LABEL_31;
            }
            break;
          case 2u:
            v72 = *((_QWORD *)v18 + 6) & 0xFFFFFFFFFFFFLL;
            if (!v72)
            {
              v17 = 0;
              goto LABEL_42;
            }
            v21 = 1;
            do
            {
              ++v21;
              v72 = *(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v72);
            goto LABEL_31;
        }
        WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v92, (uint64_t)&v89);
        v25 = v89;
        v89 = 0;
        v26 = (WebCore::Node *)v92;
        v92 = (WebCore::Node **)v25;
        if (v26)
        {
          if (*((_DWORD *)v26 + 6) == 2)
          {
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v26, v24);
              v70 = v89;
              v93 = v90;
              v94 = v91;
              v89 = 0;
              if (v70)
              {
                if (*((_DWORD *)v70 + 6) == 2)
                {
                  if ((*((_WORD *)v70 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v70, v69);
                }
                else
                {
                  *((_DWORD *)v70 + 6) -= 2;
                }
              }
              goto LABEL_41;
            }
          }
          else
          {
            *((_DWORD *)v26 + 6) -= 2;
          }
        }
        v93 = v90;
        v94 = v91;
LABEL_41:
        v17 = 0;
        goto LABEL_42;
      }
    }
  }
  v76 = 0;
LABEL_42:
  WebCore::ApplyStyleCommand::pushDownInlineStyleAroundNode((uint64_t)a1, (uint64_t)a2, (WebCore *)v95);
  WebCore::ApplyStyleCommand::pushDownInlineStyleAroundNode((uint64_t)a1, (uint64_t)a2, (WebCore *)v92);
  v27 = *(_QWORD *)v5;
  v28 = (WebCore **)&v95;
  if (*(_QWORD *)v5 && (*(_BYTE *)(v27 + 22) & 8) != 0)
    v28 = (WebCore **)v5;
  v29 = *v28;
  if (*v28)
    *((_DWORD *)v29 + 6) += 2;
  v89 = v29;
  v90 = *((_DWORD *)v28 + 2);
  v91 = *((_BYTE *)v28 + 12);
  v30 = (WebCore::Node **)&v92;
  if (*(_QWORD *)a4 && (*(_BYTE *)(*(_QWORD *)a4 + 22) & 8) != 0)
    v30 = (WebCore::Node **)a4;
  v75 = v17;
  v31 = *v30;
  if (*v30)
    *((_DWORD *)v31 + 6) += 2;
  v86 = v31;
  v87 = *((_DWORD *)v30 + 2);
  v88 = *((_BYTE *)v30 + 12);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v81 = v5;
  do
  {
    if (!v27)
    {
      WebCore::ApplyStyleCommand::updateStartEnd(a1, (const WebCore::Position *)&v89, (const WebCore::Position *)&v86);
      v62 = v75;
      goto LABEL_179;
    }
    v32 = v27;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 208))(v27) & 1) != 0)
    {
      if ((*(_WORD *)(v27 + 28) & 4) != 0 && (v35 = *(_QWORD *)(v27 + 80)) != 0 || (v35 = *(_QWORD *)(v27 + 56)) != 0)
      {
LABEL_68:
        *(_DWORD *)(v35 + 24) += 2;
        goto LABEL_69;
      }
      v36 = v27;
      while (1)
      {
        v36 = *(_QWORD *)(v36 + 32);
        if (!v36)
          break;
        v35 = *(_QWORD *)(v36 + 56);
        if (v35)
          goto LABEL_68;
      }
    }
    else
    {
      v35 = *(_QWORD *)(v27 + 56);
      if (v35)
        goto LABEL_68;
      v37 = v27;
      while (1)
      {
        v37 = *(_QWORD *)(v37 + 32);
        if (!v37)
          break;
        v35 = *(_QWORD *)(v37 + 56);
        if (v35)
          goto LABEL_68;
      }
    }
    v35 = 0;
LABEL_69:
    if ((*(_WORD *)(v27 + 28) & 0x10) == 0)
      goto LABEL_137;
    *(_DWORD *)(v27 + 24) += 2;
    if (WebCore::ApplyStyleCommand::nodeFullySelected((WebCore::ApplyStyleCommand *)v27, v5, a4, v34))
    {
      if ((*(_WORD *)(v27 + 28) & 4) != 0)
      {
        v38 = *(_QWORD *)(v27 + 88);
        if (v38)
          goto LABEL_74;
      }
      v38 = *(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFLL;
      if (v38)
        goto LABEL_74;
      v55 = *(_QWORD *)(v27 + 32);
      if (v55)
      {
        while (1)
        {
          v38 = *(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL;
          if (v38)
            break;
          v55 = *(_QWORD *)(v55 + 32);
          if (!v55)
            goto LABEL_117;
        }
LABEL_74:
        v39 = 0;
        *(_DWORD *)(v38 + 24) += 2;
      }
      else
      {
LABEL_117:
        v38 = 0;
        v39 = 1;
      }
      v40 = *(_QWORD *)(v27 + 80);
      if (v40 || (v40 = *(_QWORD *)(v27 + 56)) != 0)
      {
LABEL_80:
        v42 = 0;
        *(_DWORD *)(v40 + 24) += 2;
      }
      else
      {
        v41 = v27;
        while (1)
        {
          v41 = *(_QWORD *)(v41 + 32);
          if (!v41)
            break;
          v40 = *(_QWORD *)(v41 + 56);
          if (v40)
            goto LABEL_80;
        }
        v40 = 0;
        v42 = 1;
      }
      v43 = *((_QWORD *)a1 + 42);
      if (v43
        && ((v44 = *(_QWORD *)(v27 + 96), v45 = *(_QWORD *)(v43 + 96), v44 == v45)
         || *(_QWORD *)(v44 + 24) == *(_QWORD *)(v45 + 24) && *(_QWORD *)(v44 + 32) == *(_QWORD *)(v45 + 32))
        || (v46 = (unsigned int (*)(uint64_t))*((_QWORD *)a1 + 44)) != 0 && v46(v27))
      {
        v47 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v47 = 1;
        *(_QWORD *)(v47 + 8) = 0;
        *(_BYTE *)(v47 + 16) &= 0xE0u;
        *(_DWORD *)(v47 + 20) = WebCore::EditingStyle::NoFontDelta;
        v48 = *(_QWORD *)(v32 + 80);
        if (v48)
          *(_DWORD *)(v48 + 24) += 2;
      }
      else
      {
        v47 = 0;
        v48 = 0;
      }
      WebCore::ApplyStyleCommand::removeInlineStyleFromElement(a1, a2, v32, 0, (WebCore::MutableStyleProperties *)v47);
      if ((*(_BYTE *)(v32 + 22) & 8) != 0)
        goto LABEL_96;
      if (v89 == (WebCore::Node *)v32)
      {
        WebCore::firstPositionInOrBeforeNode(v40, v33, (uint64_t)&v83);
        v49 = v83;
        v83 = 0;
        v50 = v89;
        v89 = v49;
        if (!v50)
          goto LABEL_94;
        if (*((_DWORD *)v50 + 6) != 2)
        {
          *((_DWORD *)v50 + 6) -= 2;
          goto LABEL_94;
        }
        if ((*((_WORD *)v50 + 15) & 0x400) != 0)
        {
LABEL_94:
          v90 = v84;
          v91 = v85;
        }
        else
        {
          WebCore::Node::removedLastRef(v50, v33);
          v61 = v83;
          v90 = v84;
          v91 = v85;
          v83 = 0;
          if (v61)
          {
            if (*((_DWORD *)v61 + 6) == 2)
            {
              if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v61, v33);
            }
            else
            {
              *((_DWORD *)v61 + 6) -= 2;
            }
          }
        }
      }
      if (v86 == (WebCore::Node *)v32)
      {
        if (v39)
        {
          v53 = 0;
          v57 = 0;
          v79 &= 0xFFFFFFF0;
        }
        else
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 208))(v38) & 1) != 0)
          {
            v52 = *(_WORD *)(v38 + 28);
            *(_DWORD *)(v38 + 24) += 2;
            if ((v52 & 1) != 0)
            {
              v56 = *(_QWORD *)(v38 + 80);
              if (v56)
                v53 = *(_DWORD *)(v56 + 4);
              else
                v53 = 0;
              v54 = v79 & 0xFFFFFFF0;
            }
            else
            {
              v53 = 0;
              v54 = v79 & 0xFFFFFFF0 | 4;
            }
          }
          else
          {
            v53 = 0;
            *(_DWORD *)(v38 + 24) += 2;
            v54 = v79 & 0xFFFFFFF0 | 2;
          }
          v79 = v54;
          v57 = (WebCore::Node *)v38;
        }
        v86 = v57;
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
        v87 = v53;
        v88 = v79;
        a4 = v80;
        if (!v47)
          goto LABEL_125;
LABEL_97:
        while (v48)
        {
          v51 = v48;
          WebCore::ApplyStyleCommand::applyInlineStyleToPushDown(a1, v48, v47);
          v48 = *(_QWORD *)(v48 + 56);
          if (v48)
            *(_DWORD *)(v48 + 24) += 2;
          if (*(_DWORD *)(v51 + 24) == 2)
          {
            if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v51, v33);
          }
          else
          {
            *(_DWORD *)(v51 + 24) -= 2;
          }
        }
        if (*(_DWORD *)v47 == 1)
        {
          WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v47, v33);
          WTF::fastFree(v59, v60);
        }
        else
        {
          --*(_DWORD *)v47;
        }
        a4 = v80;
      }
      else
      {
LABEL_96:
        if (v47)
          goto LABEL_97;
LABEL_125:
        if (v48)
        {
          if (*(_DWORD *)(v48 + 24) == 2)
          {
            if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v48, v33);
          }
          else
          {
            *(_DWORD *)(v48 + 24) -= 2;
          }
        }
      }
      if ((v42 & 1) == 0)
      {
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40, v33);
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      if ((v39 & 1) == 0)
      {
        if (*(_DWORD *)(v38 + 24) == 2)
        {
          if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v38, v33);
        }
        else
        {
          *(_DWORD *)(v38 + 24) -= 2;
        }
      }
      v5 = v81;
    }
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
LABEL_137:
    v58 = *(_QWORD *)a4;
    v27 = v32;
    if (v32 == *(_QWORD *)a4)
      goto LABEL_143;
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    if (*(_DWORD *)(v32 + 24) != 2)
    {
      *(_DWORD *)(v32 + 24) -= 2;
LABEL_142:
      v27 = v35;
      goto LABEL_143;
    }
    v27 = v35;
    if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
      goto LABEL_142;
    }
LABEL_143:
    if (v35)
    {
      if (*(_DWORD *)(v35 + 24) == 2)
      {
        if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v35, v33);
      }
      else
      {
        *(_DWORD *)(v35 + 24) -= 2;
      }
    }
  }
  while (v32 != v58);
  WebCore::ApplyStyleCommand::updateStartEnd(a1, (const WebCore::Position *)&v89, (const WebCore::Position *)&v86);
  v62 = v75;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, v63);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
LABEL_179:
  if (v86)
  {
    if (*((_DWORD *)v86 + 6) == 2)
    {
      if ((*((_WORD *)v86 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v86, v63);
    }
    else
    {
      *((_DWORD *)v86 + 6) -= 2;
    }
  }
  if (v89)
  {
    if (*((_DWORD *)v89 + 6) == 2)
    {
      if ((*((_WORD *)v89 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v89, v63);
    }
    else
    {
      *((_DWORD *)v89 + 6) -= 2;
    }
  }
  if ((v62 & 1) == 0)
  {
    if (*((_DWORD *)v76 + 6) == 2)
    {
      if ((*((_WORD *)v76 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v76, v63);
    }
    else
    {
      *((_DWORD *)v76 + 6) -= 2;
    }
  }
  v64 = (WebCore::Node *)v92;
  v92 = 0;
  if (v64)
  {
    if (*((_DWORD *)v64 + 6) == 2)
    {
      if ((*((_WORD *)v64 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v64, v63);
    }
    else
    {
      *((_DWORD *)v64 + 6) -= 2;
    }
  }
  if ((v77 & 1) == 0)
  {
    if (*((_DWORD *)v78 + 6) == 2)
    {
      if ((*((_WORD *)v78 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v78, v63);
    }
    else
    {
      *((_DWORD *)v78 + 6) -= 2;
    }
  }
  result = (unsigned int *)v95;
  v95 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v63);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::Node **WebCore::highestEmbeddingAncestor(WebCore::Node **this, WebCore::Node *a2, WebCore::Node *a3)
{
  WebCore::Node **v3;
  WebCore::Node *v5;
  WebCore::Node *v6;
  WebCore *v7;
  _DWORD *v8;
  __int16 v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WebCore::Node *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  uint64_t v17;

  v3 = this;
  if (a2)
  {
    v5 = a2;
    *((_DWORD *)a2 + 6) += 2;
    *this = a2;
    while (v5 != a3)
    {
      v6 = v5;
      if ((*((_WORD *)v5 + 14) & 0x10) != 0)
      {
        v7 = WebCore::styleElementForNode(v5, a2);
        if (v7)
          *((_DWORD *)v7 + 6) += 2;
        v12 = v7;
        v13 = 0;
        v15 = 0;
        v16 = 0;
        WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v12, 285, 1, 0, &v17);
        v8 = (_DWORD *)v17;
        if (v17)
        {
          if (((*(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16)) & 0x3F800) != 0)
          {
            v9 = 0;
          }
          else if ((*(_WORD *)(v17 + 4) & 0x7F) == 0x50)
          {
            v9 = *(_WORD *)(v17 + 8);
          }
          else
          {
            v9 = 0;
          }
          v10 = v9 == 457;
          v17 = 0;
          if (*v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
          else
            *v8 -= 2;
        }
        else
        {
          v10 = 0;
          v17 = 0;
        }
        if (v15)
        {
          v11 = v14;
          v14 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        this = (WebCore::Node **)v12;
        v12 = 0;
        if (this)
        {
          if (*((_DWORD *)this + 6) == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = (WebCore::Node **)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            *((_DWORD *)this + 6) -= 2;
          }
        }
        if (v10)
          return this;
      }
      v5 = (WebCore::Node *)*((_QWORD *)v6 + 4);
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      *v3 = v5;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          this = (WebCore::Node **)WebCore::Node::removedLastRef(v6, a2);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
      if (!v5)
        goto LABEL_38;
    }
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        this = (WebCore::Node **)WebCore::Node::removedLastRef(a3, a2);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
  }
LABEL_38:
  *v3 = 0;
  return this;
}

unint64_t WebCore::ApplyStyleCommand::fixRangeAndApplyInlineStyle(unsigned int *a1, char *a2, uint64_t a3, uint64_t a4)
{
  WebCore *v6;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  WebCore::RenderText *v16;
  uint64_t v17;
  unint64_t result;
  int v19;
  BOOL v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  signed int v24;
  uint64_t v25;
  char v26;
  unsigned __int8 v27;
  BOOL v29;
  __int16 v30;
  WebCore::RenderText *v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  BOOL v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  _WORD *v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  const WebCore::SimpleRange *v54;
  uint64_t i;
  WebCore *v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  WebCore::Node *v60;
  unsigned int *v61;
  WebCore *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WebCore::Node *v70;
  int v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  WebCore::Node *v75;
  int v76;
  WebCore::Node *v77;
  int v78;

  v6 = (WebCore *)a2;
  v8 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v8 + 24) += 2;
  if ((*(_BYTE *)(a3 + 12) & 8) == 0 && ((v9 = *(_BYTE *)(a3 + 12) & 7, v9 != 4) ? (v10 = v9 == 2) : (v10 = 1), v10))
  {
    if (v8)
    {
      v11 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v11 + 2;
      v12 = *(_WORD *)(v8 + 28);
      if ((v12 & 1) != 0)
      {
        v65 = *(_QWORD *)(v8 + 80);
        if (v65)
          LODWORD(v14) = *(_DWORD *)(v65 + 4);
        else
          LODWORD(v14) = 0;
      }
      else if ((v12 & 4) != 0 && (v13 = *(_QWORD *)(v8 + 80)) != 0)
      {
        LODWORD(v14) = 0;
        do
        {
          LODWORD(v14) = v14 + 1;
          v13 = *(_QWORD *)(v13 + 56);
        }
        while (v13);
      }
      else
      {
        LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8) ^ 1;
        v11 = *(_DWORD *)(v8 + 24) - 2;
      }
      if (v11)
      {
        *(_DWORD *)(v8 + 24) = v11;
      }
      else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
  }
  else
  {
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  v15 = *(_WORD *)(v8 + 28);
  if ((v15 & 2) != 0 && (v16 = (WebCore::RenderText *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL)) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A82FD4);
    }
    result = (unint64_t)WebCore::RenderText::caretMaxOffset(v16, (WebCore::RenderObject *)a2);
  }
  else if ((v15 & 1) != 0)
  {
    v64 = *(_QWORD *)(v8 + 80);
    if (!v64)
      goto LABEL_234;
    result = *(unsigned int *)(v64 + 4);
  }
  else if ((v15 & 4) != 0 && (v17 = *(_QWORD *)(v8 + 80)) != 0)
  {
    LODWORD(result) = 0;
    do
    {
      result = (result + 1);
      v17 = *(_QWORD *)(v17 + 56);
    }
    while (v17);
  }
  else
  {
    result = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8) ^ 1;
  }
  while (1)
  {
    if ((int)v14 >= (int)result)
    {
      if ((*(_WORD *)(v8 + 28) & 4) != 0 && (v14 = *(_QWORD *)(v8 + 80)) != 0 || (v14 = *(_QWORD *)(v8 + 56)) != 0)
      {
LABEL_46:
        v26 = 0;
        *(_DWORD *)(v14 + 24) += 2;
      }
      else
      {
        v25 = v8;
        while (1)
        {
          v25 = *(_QWORD *)(v25 + 32);
          if (!v25)
            break;
          v14 = *(_QWORD *)(v25 + 56);
          if (v14)
            goto LABEL_46;
        }
        v14 = 0;
        v26 = 1;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if ((v26 & 1) != 0)
        goto LABEL_155;
      WebCore::firstPositionInOrBeforeNode(v14, (WebCore::Node *)a2, (uint64_t)&v70);
      v27 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)a4, (uint64_t)&v70);
      v29 = v27 != 129 && (v27 & 0x80u) != 0;
      result = (unint64_t)v70;
      v70 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      if (v29)
        goto LABEL_155;
    }
    else
    {
      v14 = v8;
    }
    v8 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)(v8 + 24) += 2;
    if ((*(_BYTE *)(a4 + 12) & 8) == 0
      && ((v19 = *(_BYTE *)(a4 + 12) & 7, v19 != 4) ? (v20 = v19 == 2) : (v20 = 1), v20))
    {
      if (v8)
      {
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        v22 = *(_WORD *)(v8 + 28);
        if ((v22 & 1) != 0)
        {
          v67 = *(_QWORD *)(v8 + 80);
          v24 = v67 ? *(_DWORD *)(v67 + 4) : 0;
        }
        else if ((v22 & 4) != 0 && (v23 = *(_QWORD *)(v8 + 80)) != 0)
        {
          v24 = 0;
          do
          {
            ++v24;
            v23 = *(_QWORD *)(v23 + 56);
          }
          while (v23);
        }
        else
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8) ^ 1;
          v21 = *(_DWORD *)(v8 + 24) - 2;
        }
        if (v21)
        {
          *(_DWORD *)(v8 + 24) = v21;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v24 = *(_DWORD *)(a4 + 8);
    }
    v30 = *(_WORD *)(v8 + 28);
    if ((v30 & 2) == 0)
      break;
    v31 = (WebCore::RenderText *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v31)
      break;
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v33 = WebCore::RenderText::caretMaxOffset(v31, (WebCore::RenderObject *)a2);
      goto LABEL_68;
    }
    a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    __break(0xC471u);
LABEL_233:
    __break(1u);
LABEL_234:
    result = 0;
  }
  if ((v30 & 1) != 0)
  {
    v66 = *(_QWORD *)(v8 + 80);
    if (v66)
      v33 = *(_DWORD *)(v66 + 4);
    else
      v33 = 0;
  }
  else if ((v30 & 4) != 0 && (v32 = *(_QWORD *)(v8 + 80)) != 0)
  {
    v33 = 0;
    do
    {
      ++v33;
      v32 = *(_QWORD *)(v32 + 56);
    }
    while (v32);
  }
  else
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8) ^ 1;
  }
LABEL_68:
  if (v24 >= v33)
  {
    v34 = *(_QWORD *)(v8 + 56);
    if (v34)
    {
LABEL_74:
      *(_DWORD *)(v34 + 24) += 2;
    }
    else
    {
      v35 = v8;
      while (1)
      {
        v35 = *(_QWORD *)(v35 + 32);
        if (!v35)
          break;
        v34 = *(_QWORD *)(v35 + 56);
        if (v34)
          goto LABEL_74;
      }
      v34 = 0;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    v34 = v8;
  }
  v36 = *(_WORD **)a3;
  if (*(_QWORD *)a3 != *(_QWORD *)a4)
    goto LABEL_116;
  if ((*(_BYTE *)(a3 + 12) & 8) == 0 && ((v37 = *(_BYTE *)(a3 + 12) & 7, v37 != 4) ? (v38 = v37 == 2) : (v38 = 1), v38))
  {
    if (v36)
    {
      v39 = *((_DWORD *)v36 + 6);
      *((_DWORD *)v36 + 6) = v39 + 2;
      v40 = v36[14];
      if ((v40 & 1) != 0)
      {
        v68 = *((_QWORD *)v36 + 10);
        v42 = v68 ? *(_DWORD *)(v68 + 4) : 0;
      }
      else if ((v40 & 4) != 0 && (v41 = *((_QWORD *)v36 + 10)) != 0)
      {
        v42 = 0;
        do
        {
          ++v42;
          v41 = *(_QWORD *)(v41 + 56);
        }
        while (v41);
      }
      else
      {
        v42 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v36 + 208))(v36) ^ 1;
        v39 = *((_DWORD *)v36 + 6) - 2;
      }
      if (v39)
      {
        *((_DWORD *)v36 + 6) = v39;
      }
      else if ((v36[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v36, a2);
      }
    }
    else
    {
      v42 = 0;
    }
  }
  else
  {
    v42 = *(_DWORD *)(a3 + 8);
  }
  if ((*(_BYTE *)(a4 + 12) & 8) == 0 && ((v43 = *(_BYTE *)(a4 + 12) & 7, v43 != 4) ? (v44 = v43 == 2) : (v44 = 1), v44))
  {
    v45 = *(_WORD **)a4;
    if (*(_QWORD *)a4)
    {
      v46 = *((_DWORD *)v45 + 6);
      *((_DWORD *)v45 + 6) = v46 + 2;
      v47 = v45[14];
      if ((v47 & 1) != 0)
      {
        v69 = *((_QWORD *)v45 + 10);
        v49 = v69 ? *(_DWORD *)(v69 + 4) : 0;
      }
      else if ((v47 & 4) != 0 && (v48 = *((_QWORD *)v45 + 10)) != 0)
      {
        v49 = 0;
        do
        {
          ++v49;
          v48 = *(_QWORD *)(v48 + 56);
        }
        while (v48);
      }
      else
      {
        v49 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v45 + 208))(v45) ^ 1;
        v46 = *((_DWORD *)v45 + 6) - 2;
      }
      if (v46)
      {
        *((_DWORD *)v45 + 6) = v46;
      }
      else if ((v45[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v45, a2);
      }
    }
    else
    {
      v49 = 0;
    }
  }
  else
  {
    v49 = *(_DWORD *)(a4 + 8);
  }
  if (v42 == v49
    && ((*(_BYTE *)(a4 + 12) ^ *(_BYTE *)(a3 + 12)) & 7) == 0
    && (v50 = *(_QWORD *)a3) != 0
    && (v51 = *(_WORD *)(v50 + 28), (v51 & 0x10) != 0)
    && *(_QWORD *)(*(_QWORD *)(v50 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    if ((v51 & 4) == 0 || (v8 = *(_QWORD *)(v50 + 80)) == 0)
    {
      while (1)
      {
        v8 = *(_QWORD *)(v50 + 56);
        if (v8)
          break;
        v50 = *(_QWORD *)(v50 + 32);
        if (!v50)
        {
          v8 = 0;
          goto LABEL_166;
        }
      }
    }
    *(_DWORD *)(v8 + 24) += 2;
LABEL_166:
    if (v34)
    {
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, a2);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_116:
    v8 = v34;
  }
  WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)a3, (uint64_t *)a4, (uint64_t)&v70);
  if (!v74)
    goto LABEL_233;
  v75 = v70;
  v76 = v71;
  v77 = v72;
  v78 = v73;
  if (v14)
  {
    v52 = 0;
    v53 = v14;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v53, 0))
        break;
      if ((*(_WORD *)(v53 + 28) & 8) != 0)
        v52 = v53;
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v53)
        break;
      v53 = *(_QWORD *)(v53 + 32);
    }
    while (v53);
    if (v52)
    {
      *(_DWORD *)(v52 + 24) += 2;
      if (v14 != v52)
      {
        while (1)
        {
          v57 = (uint64_t *)(v14 + 32);
          v56 = *(WebCore **)(v14 + 32);
          if ((WebCore *)v52 == v56)
            break;
          v58 = v14;
          if (!WebCore::isNodeVisiblyContainedWithin(v56, (WebCore::Node *)&v75, v54))
            break;
          v14 = *v57;
          if (*v57)
            *(_DWORD *)(v14 + 24) += 2;
          if (*(_DWORD *)(v58 + 24) == 2)
          {
            if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v58, v59);
          }
          else
          {
            *(_DWORD *)(v58 + 24) -= 2;
          }
        }
      }
      WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange(a1, v6, v14, v8);
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, a2);
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
      goto LABEL_146;
    }
    v61 = a1;
    v62 = v6;
    v63 = v14;
  }
  else
  {
    v61 = a1;
    v62 = v6;
    v63 = 0;
  }
  WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange(v61, v62, v63, v8);
LABEL_146:
  v60 = v77;
  v77 = 0;
  if (v60)
  {
    if (*((_DWORD *)v60 + 6) == 2)
    {
      if ((*((_WORD *)v60 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v60, a2);
    }
    else
    {
      *((_DWORD *)v60 + 6) -= 2;
    }
  }
  result = (unint64_t)v75;
  v75 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
LABEL_155:
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return (unint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange(unsigned int *result, WebCore *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v29;
  const WebCore::StyleProperties *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  WTF::String *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const WebCore::QualifiedName *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD **v78;
  _DWORD *v79;
  WTF *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD **v85;
  _DWORD *v86;
  WTF *v87;
  uint64_t v89;
  WebCore::Node *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WebCore *v94;
  WebCore *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  WebCore *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  __int16 v113;
  unsigned int v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  _DWORD *v125;
  WTF::StringImpl *v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD **v130;
  _DWORD *v131;
  WTF *v132;
  uint64_t v134;
  uint64_t v135;
  WTF::AtomString *v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  WebCore::InlineRunToApplyStyle *v141;
  uint64_t v142;
  WebCore::Node *v143;
  char v144;
  WebCore *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  uint64_t v151;
  _QWORD v152[2];
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;

  if (*((_BYTE *)result + 344))
    return result;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  *(_DWORD *)(v8 + 24) += 2;
  v143 = (WebCore::Node *)v8;
  WebCore::Document::updateLayout(v8, 2u, 0);
  v156 = 0;
  v157 = 0;
  *(_DWORD *)(a3 + 24) += 2;
  v145 = a2;
  if (a3 == a4)
  {
    v10 = a3;
    goto LABEL_273;
  }
  v10 = 0;
  while (1)
  {
    if ((*(_WORD *)(a3 + 28) & 4) != 0 && (v11 = *(_QWORD *)(a3 + 80)) != 0 || (v11 = *(_QWORD *)(a3 + 56)) != 0)
    {
LABEL_10:
      v13 = 0;
      *(_DWORD *)(v11 + 24) += 2;
      if (!v10)
        goto LABEL_13;
LABEL_11:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      goto LABEL_13;
    }
    v12 = a3;
    while (1)
    {
      v12 = *(_QWORD *)(v12 + 32);
      if (!v12)
        break;
      v11 = *(_QWORD *)(v12 + 56);
      if (v11)
        goto LABEL_10;
    }
    v11 = 0;
    v13 = 1;
    if (v10)
      goto LABEL_11;
LABEL_13:
    if ((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) == 0 || !WebCore::Node::computeEditability(a3, 0, 1))
      goto LABEL_257;
    if (WebCore::Node::computeEditability(a3, 0, 1) != 2)
    {
      v14 = *(_WORD *)(a3 + 28);
      if ((v14 & 0x10) != 0)
      {
        if (!a4)
          goto LABEL_87;
        if ((v14 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(a4 + 40) != a3
            || (*(_WORD *)(a4 + 28) & 0xF000) == 0x9000
            || (*(_BYTE *)(a4 + 22) & 8) == 0)
          {
            goto LABEL_87;
          }
        }
        else
        {
          if ((v14 & 4) == 0
            || !*(_QWORD *)(a3 + 80)
            || ((*(unsigned __int8 *)(a4 + 22) ^ *(unsigned __int8 *)(a3 + 22)) & 8) != 0)
          {
            goto LABEL_87;
          }
          v27 = a4;
          do
            v27 = *(_QWORD *)(v27 + 32);
          while (v27 != a3 && v27 != 0);
          if (!v27)
          {
LABEL_87:
            v29 = *(_QWORD *)(a3 + 104);
            if (v29 && (v30 = *(const WebCore::StyleProperties **)(v29 + 8)) != 0)
            {
              v31 = WTF::fastMalloc((WTF *)0x60);
              WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v31, v30);
            }
            else
            {
              v31 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v31 = 0x900000001;
              *(_QWORD *)(v31 + 8) = 0;
              *(_QWORD *)(v31 + 16) = v31 + 32;
              *(_QWORD *)(v31 + 24) = 4;
            }
            v37 = *((_QWORD *)a2 + 1);
            if (v37)
            {
              ++*(_DWORD *)v37;
              WebCore::MutableStyleProperties::mergeAndOverrideOnConflict((WebCore::MutableStyleProperties *)v31, (const WebCore::StyleProperties *)v37, v33);
              if (*(_DWORD *)v37 == 1)
              {
                v83 = *(unsigned int *)(v37 + 28);
                if ((_DWORD)v83)
                {
                  v84 = 16 * v83;
                  v85 = (_DWORD **)(*(_QWORD *)(v37 + 16) + 8);
                  do
                  {
                    v86 = *v85;
                    *v85 = 0;
                    if (v86)
                    {
                      if (*v86 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v86, v32);
                      else
                        *v86 -= 2;
                    }
                    v85 += 2;
                    v84 -= 16;
                  }
                  while (v84);
                }
                v87 = *(WTF **)(v37 + 16);
                if ((WTF *)(v37 + 32) != v87 && v87 != 0)
                {
                  *(_QWORD *)(v37 + 16) = 0;
                  *(_DWORD *)(v37 + 24) = 0;
                  WTF::fastFree(v87, v32);
                }
                v89 = *(_QWORD *)(v37 + 8);
                *(_QWORD *)(v37 + 8) = 0;
                a2 = v145;
                if (v89)
                  (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
                WTF::fastFree((WTF *)v37, v32);
              }
              else
              {
                --*(_DWORD *)v37;
              }
            }
            WebCore::StyleProperties::asTextAtom((WebCore::StyleProperties *)v31, (unsigned __int8 *)v32, v34, (WTF::AtomString *)&v146, v35);
            WebCore::CompositeEditCommand::setNodeAttribute((WebCore::CompositeEditCommand *)v7, (WebCore::Element *)a3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v146);
            v38 = v146;
            v146 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v38 -= 2;
            }
            v10 = *(_QWORD *)(a3 + 56);
            if (v10)
            {
LABEL_112:
              *(_DWORD *)(v10 + 24) += 2;
              if ((v13 & 1) == 0)
              {
LABEL_188:
                if (*(_DWORD *)(v11 + 24) == 2)
                {
                  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
                }
                else
                {
                  *(_DWORD *)(v11 + 24) -= 2;
                }
              }
            }
            else
            {
              v39 = a3;
              while (1)
              {
                v39 = *(_QWORD *)(v39 + 32);
                if (!v39)
                  break;
                v10 = *(_QWORD *)(v39 + 56);
                if (v10)
                  goto LABEL_112;
              }
              v10 = 0;
              if ((v13 & 1) == 0)
                goto LABEL_188;
            }
            if (*(_DWORD *)v31 == 1)
            {
              v76 = *(unsigned int *)(v31 + 28);
              if ((_DWORD)v76)
              {
                v77 = 16 * v76;
                v78 = (_DWORD **)(*(_QWORD *)(v31 + 16) + 8);
                do
                {
                  v79 = *v78;
                  *v78 = 0;
                  if (v79)
                  {
                    if (*v79 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v79, (WTF::StringImpl *)v9);
                    else
                      *v79 -= 2;
                  }
                  v78 += 2;
                  v77 -= 16;
                }
                while (v77);
              }
              v80 = *(WTF **)(v31 + 16);
              if ((WTF *)(v31 + 32) != v80 && v80 != 0)
              {
                *(_QWORD *)(v31 + 16) = 0;
                *(_DWORD *)(v31 + 24) = 0;
                WTF::fastFree(v80, v9);
              }
              v82 = *(_QWORD *)(v31 + 8);
              *(_QWORD *)(v31 + 8) = 0;
              a2 = v145;
              if (v82)
                (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
              WTF::fastFree((WTF *)v31, v9);
            }
            else
            {
              --*(_DWORD *)v31;
            }
            goto LABEL_258;
          }
        }
        v10 = a3;
        if (v11)
          goto LABEL_271;
        goto LABEL_273;
      }
    }
    if ((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
    {
      goto LABEL_257;
    }
    v15 = *(_WORD *)(a3 + 28);
    if ((v15 & 4) == 0 || !*(_QWORD *)(a3 + 80))
    {
LABEL_35:
      v18 = (uint64_t *)(a3 + 56);
      v19 = *(_QWORD *)(a3 + 56);
      *(_DWORD *)(a3 + 24) += 4;
      if (!v19)
      {
        v21 = 0;
        v22 = a3;
        goto LABEL_93;
      }
      v20 = a4;
      *(_DWORD *)(v19 + 24) += 2;
      v21 = a4;
      v22 = a3;
      v10 = a4;
      if (v19 == a4)
        goto LABEL_97;
      v22 = a3;
      while (1)
      {
        v23 = v19;
        if (a4)
        {
          if (v19 == a4)
          {
            v19 = a4;
LABEL_91:
            v18 = (uint64_t *)(v22 + 56);
            v20 = *(_QWORD *)(v22 + 56);
            if (!v20)
            {
              v21 = v19;
LABEL_93:
              v36 = v22;
              a2 = v145;
              while (1)
              {
                v36 = *(_QWORD *)(v36 + 32);
                if (!v36)
                  break;
                v10 = *(_QWORD *)(v36 + 56);
                if (v10)
                {
                  v20 = 0;
                  goto LABEL_97;
                }
              }
              v20 = 0;
              v10 = 0;
              if (v11)
              {
LABEL_115:
                if (*(_DWORD *)(v11 + 24) == 2)
                {
                  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
                    v20 = *v18;
                  }
                }
                else
                {
                  *(_DWORD *)(v11 + 24) -= 2;
                }
              }
LABEL_117:
              if (v20)
              {
LABEL_121:
                v144 = 0;
                *(_DWORD *)(v20 + 24) += 2;
                if (a3)
                  goto LABEL_124;
              }
              else
              {
                v40 = v22;
                while (1)
                {
                  v40 = *(_QWORD *)(v40 + 32);
                  if (!v40)
                    break;
                  v20 = *(_QWORD *)(v40 + 56);
                  if (v20)
                    goto LABEL_121;
                }
                v20 = 0;
                v144 = 1;
                if (a3)
                {
LABEL_124:
                  *(_DWORD *)(a3 + 24) += 2;
                  v41 = a3;
                  while (1)
                  {
                    v42 = v41;
                    if (v41 == v20)
                    {
                      v48 = v20;
                      goto LABEL_152;
                    }
                    if ((*(_WORD *)(v41 + 28) & 4) == 0 || !*(_QWORD *)(v41 + 80))
                    {
                      if (!WebCore::EditingStyle::styleIsPresentInComputedStyleOfNode(a2, (WebCore::Node *)v41))
                        break;
                      v44 = *((_QWORD *)v7 + 42);
                      if (v44)
                      {
                        *(_DWORD *)(v41 + 24) += 2;
                        v146 = (WTF::StringImpl *)v41;
                        LODWORD(v147) = 0;
                        BYTE4(v147) = BYTE4(v147) & 0xF0 | 1;
                        v45 = WebCore::enclosingElementWithTag((WebCore *)&v146, (const WebCore::Position *)(v44 + 96), v43);
                        v46 = v146;
                        v146 = 0;
                        if (v46)
                        {
                          if (*((_DWORD *)v46 + 6) == 2)
                          {
                            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v46, v9);
                          }
                          else
                          {
                            *((_DWORD *)v46 + 6) -= 2;
                          }
                        }
                        if (!v45)
                          break;
                      }
                    }
                    if ((*(_WORD *)(v42 + 28) & 4) != 0 && (v41 = *(_QWORD *)(v42 + 80)) != 0
                      || (v41 = *(_QWORD *)(v42 + 56)) != 0)
                    {
LABEL_140:
                      *(_DWORD *)(v41 + 24) += 2;
                    }
                    else
                    {
                      v47 = v42;
                      while (1)
                      {
                        v47 = *(_QWORD *)(v47 + 32);
                        if (!v47)
                          break;
                        v41 = *(_QWORD *)(v47 + 56);
                        if (v41)
                          goto LABEL_140;
                      }
                      v41 = 0;
                    }
                    if (*(_DWORD *)(v42 + 24) == 2)
                    {
                      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v42, v9);
                    }
                    else
                    {
                      *(_DWORD *)(v42 + 24) -= 2;
                    }
                    if (!v41)
                      goto LABEL_177;
                  }
                  v48 = v42;
LABEL_152:
                  if (*(_DWORD *)(v48 + 24) == 2)
                  {
                    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v48, v9);
                  }
                  else
                  {
                    *(_DWORD *)(v48 + 24) -= 2;
                  }
                  if (v42 != v20)
                  {
                    *(_DWORD *)(a3 + 24) += 2;
                    *(_DWORD *)(v22 + 24) += 2;
                    v146 = (WTF::StringImpl *)a3;
                    v147 = v22;
                    if ((v144 & 1) == 0)
                      *(_DWORD *)(v20 + 24) += 2;
                    v148 = (_DWORD *)v20;
                    v149 = 0;
                    LODWORD(v150) = 0;
                    BYTE4(v150) &= 0xF0u;
                    v154 = 0;
                    v155 = 0;
                    v153 = 0;
                    v151 = 0;
                    v152[0] = 0;
                    *(_QWORD *)((char *)v152 + 6) = 0;
                    v49 = HIDWORD(v157);
                    if (HIDWORD(v157) == (_DWORD)v157)
                    {
                      v50 = WTF::Vector<WebCore::InlineRunToApplyStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, HIDWORD(v157) + 1, (unint64_t)&v146);
                      v49 = HIDWORD(v157);
                      v51 = v156;
                      v52 = v156 + 88 * HIDWORD(v157);
                      v53 = *(_QWORD *)v50;
                      *(_QWORD *)v50 = 0;
                      *(_QWORD *)v52 = v53;
                      v54 = *(_QWORD *)(v50 + 8);
                      *(_QWORD *)(v50 + 8) = 0;
                      *(_QWORD *)(v52 + 8) = v54;
                      v55 = *(_QWORD *)(v50 + 16);
                      *(_QWORD *)(v50 + 16) = 0;
                      *(_QWORD *)(v52 + 16) = v55;
                      v56 = *(_QWORD *)(v50 + 24);
                      *(_QWORD *)(v50 + 24) = 0;
                      *(_QWORD *)(v52 + 24) = v56;
                      LOBYTE(v56) = *(_BYTE *)(v50 + 36);
                      *(_DWORD *)(v52 + 32) = *(_DWORD *)(v50 + 32);
                      *(_BYTE *)(v52 + 36) = v56;
                      v57 = *(_QWORD *)(v50 + 40);
                      *(_QWORD *)(v50 + 40) = 0;
                      *(_QWORD *)(v52 + 40) = v57;
                      v58 = *(_DWORD **)(v50 + 48);
                      if (v58)
                        ++*v58;
                      *(_QWORD *)(v52 + 48) = v58;
                      v59 = v51 + 88 * v49;
                      v60 = *(_DWORD *)(v50 + 56);
                      *(_WORD *)(v59 + 60) = *(_WORD *)(v50 + 60);
                      *(_DWORD *)(v59 + 56) = v60;
                      v61 = *(_DWORD **)(v50 + 64);
                      if (v61)
                        *v61 += 2;
                      *(_QWORD *)(v59 + 64) = v61;
                      v62 = *(_DWORD **)(v50 + 72);
                      if (v62)
                        *v62 += 2;
                      *(_QWORD *)(v51 + 88 * v49 + 72) = v62;
                      v63 = *(_DWORD **)(v50 + 80);
                      if (v63)
                        *v63 += 2;
                      *(_QWORD *)(v51 + 88 * v49 + 80) = v63;
                    }
                    else
                    {
                      v64 = v156;
                      v65 = v156 + 88 * HIDWORD(v157);
                      v146 = 0;
                      *(_QWORD *)v65 = a3;
                      v66 = v147;
                      v147 = 0;
                      *(_QWORD *)(v65 + 8) = v66;
                      v67 = v148;
                      v148 = 0;
                      *(_QWORD *)(v65 + 16) = v67;
                      v68 = v149;
                      v149 = 0;
                      *(_QWORD *)(v65 + 24) = v68;
                      LODWORD(v68) = (_DWORD)v150;
                      *(_BYTE *)(v65 + 36) = BYTE4(v150);
                      *(_DWORD *)(v65 + 32) = (_DWORD)v68;
                      v69 = v151;
                      v151 = 0;
                      *(_QWORD *)(v65 + 40) = v69;
                      v70 = v152[0];
                      if (v152[0])
                        ++*(_DWORD *)v152[0];
                      *(_QWORD *)(v65 + 48) = v70;
                      v71 = v64 + 88 * v49;
                      v72 = v152[1];
                      *(_WORD *)(v71 + 60) = WORD2(v152[1]);
                      *(_DWORD *)(v71 + 56) = v72;
                      v73 = v153;
                      if (v153)
                        *v153 += 2;
                      *(_QWORD *)(v71 + 64) = v73;
                      v74 = v154;
                      if (v154)
                        *v154 += 2;
                      *(_QWORD *)(v64 + 88 * v49 + 72) = v74;
                      v75 = v155;
                      if (v155)
                        *v155 += 2;
                      *(_QWORD *)(v64 + 88 * v49 + 80) = v75;
                    }
                    HIDWORD(v157) = v49 + 1;
                    WebCore::InlineRunToApplyStyle::~InlineRunToApplyStyle((WebCore::InlineRunToApplyStyle *)&v146, (WTF::StringImpl *)v9);
                  }
                }
              }
LABEL_177:
              if ((v144 & 1) == 0)
              {
                if (*(_DWORD *)(v20 + 24) == 2)
                {
                  if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v20, v9);
                }
                else
                {
                  *(_DWORD *)(v20 + 24) -= 2;
                }
              }
              if (v21)
              {
                if (*(_DWORD *)(v21 + 24) == 2)
                {
                  if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v21, v9);
                }
                else
                {
                  *(_DWORD *)(v21 + 24) -= 2;
                }
              }
              if (*(_DWORD *)(v22 + 24) == 2)
              {
                if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v22, v9);
              }
              else
              {
                *(_DWORD *)(v22 + 24) -= 2;
              }
              if (*(_DWORD *)(a3 + 24) != 2)
              {
                *(_DWORD *)(a3 + 24) -= 2;
                goto LABEL_258;
              }
              if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
              {
                v90 = (WebCore::Node *)a3;
                goto LABEL_227;
              }
              goto LABEL_258;
            }
            v21 = v19;
            v10 = *(_QWORD *)(v22 + 56);
LABEL_97:
            *(_DWORD *)(v10 + 24) += 2;
            a2 = v145;
            if (v11)
              goto LABEL_115;
            goto LABEL_117;
          }
          v24 = *(_WORD *)(v19 + 28);
          if ((v24 & 0xF000) == 0x9000)
          {
            if (**(_QWORD **)(a4 + 40) == v19
              && (*(_WORD *)(a4 + 28) & 0xF000) != 0x9000
              && (*(_BYTE *)(a4 + 22) & 8) != 0)
            {
              goto LABEL_91;
            }
          }
          else if ((v24 & 4) != 0
                 && *(_QWORD *)(v19 + 80)
                 && ((*(unsigned __int8 *)(a4 + 22) ^ *(unsigned __int8 *)(v19 + 22)) & 8) == 0)
          {
            v25 = a4;
            do
              v25 = *(_QWORD *)(v25 + 32);
            while (v25 != v19 && v25 != 0);
            if (v25)
              goto LABEL_91;
          }
        }
        if (((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) == 0
           || (*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0
           || (*(_WORD *)(v19 + 28) & 0x10) != 0
           && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
          && (WebCore::containsNonEditableRegion((WebCore *)v19, (WebCore::Node *)v9) & 1) == 0)
        {
          *(_DWORD *)(v19 + 24) += 2;
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v9);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
          v19 = *(_QWORD *)(v19 + 56);
          if (v19)
            *(_DWORD *)(v19 + 24) += 2;
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, v9);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
          v22 = v23;
          if (v19)
          {
            if (v19 != a4)
              continue;
          }
        }
        goto LABEL_91;
      }
    }
    if (a4)
    {
      if (a3 == a4)
        goto LABEL_257;
      if ((v15 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(a4 + 40) == a3 && (*(_WORD *)(a4 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(a4 + 22) & 8) != 0)
          goto LABEL_257;
      }
      else if (((*(unsigned __int8 *)(a4 + 22) ^ *(unsigned __int8 *)(a3 + 22)) & 8) == 0)
      {
        v16 = a4;
        do
          v16 = *(_QWORD *)(v16 + 32);
        while (v16 != a3 && v16 != 0);
        if (v16)
        {
LABEL_257:
          v10 = v11;
          goto LABEL_258;
        }
      }
    }
    if ((WebCore::containsNonEditableRegion((WebCore *)a3, (WebCore::Node *)v9) & 1) != 0
      || !WebCore::Node::computeEditability(*(_QWORD *)(a3 + 32), 0, 1))
    {
      goto LABEL_257;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 208))(a3) & 1) != 0)
      goto LABEL_35;
    v10 = *(_QWORD *)(a3 + 56);
    if (v10)
    {
LABEL_240:
      *(_DWORD *)(v10 + 24) += 2;
    }
    else
    {
      v91 = a3;
      while (1)
      {
        v91 = *(_QWORD *)(v91 + 32);
        if (!v91)
          break;
        v10 = *(_QWORD *)(v91 + 56);
        if (v10)
          goto LABEL_240;
      }
      v10 = 0;
    }
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        {
          v90 = (WebCore::Node *)v11;
LABEL_227:
          WebCore::Node::removedLastRef(v90, v9);
        }
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
LABEL_258:
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    if (*(_DWORD *)(a3 + 24) == 2)
    {
      if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a3, v9);
    }
    else
    {
      *(_DWORD *)(a3 + 24) -= 2;
    }
    if (!v10)
      break;
    a3 = v10;
    v11 = v10;
    if (v10 == a4)
      goto LABEL_270;
  }
  v11 = 0;
LABEL_270:
  if (v11)
  {
LABEL_271:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
LABEL_273:
  if (!HIDWORD(v157))
  {
    WebCore::Document::updateLayout((uint64_t)v143, 2u, 0);
    goto LABEL_433;
  }
  v92 = v156;
  v93 = v156 + 88 * HIDWORD(v157);
  while (2)
  {
    v94 = *(WebCore **)v92;
    if (!*(_QWORD *)v92)
      goto LABEL_359;
    v95 = *(WebCore **)(v92 + 16);
    *((_DWORD *)v94 + 6) += 4;
    while (2)
    {
      v96 = (uint64_t)v94;
      if (v94 != v95 && (*((_QWORD *)v94 + 2) & 0x8000000000000) != 0)
      {
        if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v94 + 208))(v94) & 1) != 0)
        {
          if ((*((_WORD *)v94 + 14) & 4) == 0 || (v94 = (WebCore *)*((_QWORD *)v94 + 10)) == 0)
          {
            v94 = *(WebCore **)(v96 + 56);
            if (!v94)
            {
              v97 = v96;
              do
              {
                v97 = *(_QWORD *)(v97 + 32);
                if (!v97)
                  goto LABEL_330;
                v94 = *(WebCore **)(v97 + 56);
              }
              while (!v94);
            }
          }
LABEL_291:
          *((_DWORD *)v94 + 6) += 2;
        }
        else
        {
          v94 = (WebCore *)*((_QWORD *)v94 + 7);
          if (v94)
            goto LABEL_291;
          v98 = v96;
          while (1)
          {
            v98 = *(_QWORD *)(v98 + 32);
            if (!v98)
              break;
            v94 = *(WebCore **)(v98 + 56);
            if (v94)
              goto LABEL_291;
          }
LABEL_330:
          v94 = 0;
        }
        if (*(_DWORD *)(v96 + 24) == 2)
        {
          if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v96, v9);
        }
        else
        {
          *(_DWORD *)(v96 + 24) -= 2;
        }
        if ((*(_WORD *)(v96 + 28) & 0x10) != 0)
        {
          v99 = *(_QWORD *)(v96 + 48);
          v100 = v99 & 0xFFFFFFFFFFFFLL;
          if ((v99 & 0xFFFFFFFFFFFFLL) != 0)
            *(_DWORD *)((v99 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
          v101 = *(_QWORD *)(v96 + 56);
          if (v101)
            *(_DWORD *)(v101 + 24) += 2;
          v102 = *(_QWORD *)(v96 + 32);
          if (v102)
            *(_DWORD *)(v102 + 24) += 2;
          WebCore::ApplyStyleCommand::removeInlineStyleFromElement((WebCore::CompositeEditCommand *)v7, v145, v96, 1, 0);
          if ((*(_BYTE *)(v96 + 22) & 8) == 0)
          {
            if (*(_QWORD *)v92 == v96)
            {
              v103 = (uint64_t *)(v100 + 56);
              if (!v100)
                v103 = (uint64_t *)(v102 + 80);
              v104 = *v103;
              if (v104)
                *(_DWORD *)(v104 + 24) += 2;
              *(_QWORD *)v92 = v104;
              if (*(_DWORD *)(v96 + 24) == 2)
              {
                if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v96, v9);
              }
              else
              {
                *(_DWORD *)(v96 + 24) -= 2;
              }
            }
            if (*(_QWORD *)(v92 + 8) == v96)
            {
              if (v101)
              {
                v105 = *(_QWORD *)(v101 + 48) & 0xFFFFFFFFFFFFLL;
                if (v105)
                  goto LABEL_312;
              }
              else
              {
                v105 = *(_QWORD *)(v102 + 88);
                if (v105)
LABEL_312:
                  *(_DWORD *)(v105 + 24) += 2;
              }
              *(_QWORD *)(v92 + 8) = v105;
              if (*(_DWORD *)(v96 + 24) == 2)
              {
                if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v96, v9);
              }
              else
              {
                *(_DWORD *)(v96 + 24) -= 2;
              }
            }
          }
          if (v102)
          {
            if (*(_DWORD *)(v102 + 24) == 2)
            {
              if ((*(_WORD *)(v102 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v102, v9);
            }
            else
            {
              *(_DWORD *)(v102 + 24) -= 2;
            }
          }
          if (v101)
          {
            if (*(_DWORD *)(v101 + 24) == 2)
            {
              if ((*(_WORD *)(v101 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v101, v9);
            }
            else
            {
              *(_DWORD *)(v101 + 24) -= 2;
            }
          }
          if (v100)
          {
            if (*(_DWORD *)(v100 + 24) == 2)
            {
              if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v100, v9);
            }
            else
            {
              *(_DWORD *)(v100 + 24) -= 2;
            }
          }
        }
        if (v94)
          *((_DWORD *)v94 + 6) += 2;
        if (*(_DWORD *)(v96 + 24) == 2)
        {
          if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v96, v9);
        }
        else
        {
          *(_DWORD *)(v96 + 24) -= 2;
        }
        if (!v94)
          goto LABEL_351;
        continue;
      }
      break;
    }
    v106 = *((_DWORD *)v94 + 6) - 2;
    if (*((_DWORD *)v94 + 6) != 2)
    {
      *((_DWORD *)v94 + 6) = v106;
      goto LABEL_349;
    }
    v113 = *((_WORD *)v94 + 15);
    if ((v113 & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v94, v9);
      v106 = *((_DWORD *)v94 + 6);
LABEL_349:
      v107 = v106 - 2;
      if (v107)
      {
        *((_DWORD *)v94 + 6) = v107;
        goto LABEL_351;
      }
      v113 = *((_WORD *)v94 + 15);
    }
    if ((v113 & 0x400) == 0)
      WebCore::Node::removedLastRef(v94, v9);
LABEL_351:
    v108 = *(WebCore **)v92;
    if (*(_QWORD *)v92)
    {
      v109 = *(_QWORD *)(v92 + 8);
      if (v109)
      {
        if ((*((_BYTE *)v108 + 22) & 8) != 0 && (*(_BYTE *)(v109 + 22) & 8) != 0)
        {
          WebCore::ApplyStyleCommand::positionToComputeInlineStyleChange((uint64_t)&v146, (const WebCore::QualifiedName **)v7, v108, (uint64_t *)(v92 + 40));
          v110 = v146;
          v146 = 0;
          v111 = *(_QWORD *)(v92 + 24);
          *(_QWORD *)(v92 + 24) = v110;
          if (!v111)
            goto LABEL_358;
          if (*(_DWORD *)(v111 + 24) != 2)
          {
            *(_DWORD *)(v111 + 24) -= 2;
            goto LABEL_358;
          }
          if ((*(_WORD *)(v111 + 30) & 0x400) != 0)
          {
LABEL_358:
            *(_DWORD *)(v92 + 32) = v147;
            *(_BYTE *)(v92 + 36) = BYTE4(v147);
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v111, v9);
            v112 = v146;
            *(_DWORD *)(v92 + 32) = v147;
            *(_BYTE *)(v92 + 36) = BYTE4(v147);
            v146 = 0;
            if (v112)
            {
              if (*((_DWORD *)v112 + 6) == 2)
              {
                if ((*((_WORD *)v112 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v112, v9);
              }
              else
              {
                *((_DWORD *)v112 + 6) -= 2;
              }
            }
          }
        }
      }
    }
LABEL_359:
    v92 += 88;
    if (v92 != v93)
      continue;
    break;
  }
  v114 = HIDWORD(v157);
  v115 = v156;
  WebCore::Document::updateLayout((uint64_t)v143, 2u, 0);
  if (v114)
  {
    v117 = v115 + 88 * v114;
    do
    {
      WebCore::StyleChange::StyleChange((WebCore::StyleChange *)&v146, v145, (const WebCore::Position *)(v115 + 24));
      v119 = v146;
      if (v146)
        ++*(_DWORD *)v146;
      v120 = *(_QWORD *)(v115 + 48);
      *(_QWORD *)(v115 + 48) = v119;
      if (v120)
      {
        if (*(_DWORD *)v120 == 1)
        {
          v128 = *(unsigned int *)(v120 + 28);
          if ((_DWORD)v128)
          {
            v129 = 16 * v128;
            v130 = (_DWORD **)(*(_QWORD *)(v120 + 16) + 8);
            do
            {
              v131 = *v130;
              *v130 = 0;
              if (v131)
              {
                if (*v131 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v131, v118);
                else
                  *v131 -= 2;
              }
              v130 += 2;
              v129 -= 16;
            }
            while (v129);
          }
          v132 = *(WTF **)(v120 + 16);
          if ((WTF *)(v120 + 32) != v132 && v132 != 0)
          {
            *(_QWORD *)(v120 + 16) = 0;
            *(_DWORD *)(v120 + 24) = 0;
            WTF::fastFree(v132, v118);
          }
          v134 = *(_QWORD *)(v120 + 8);
          *(_QWORD *)(v120 + 8) = 0;
          if (v134)
            (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
          WTF::fastFree((WTF *)v120, v118);
        }
        else
        {
          --*(_DWORD *)v120;
        }
      }
      *(_DWORD *)(v115 + 56) = v147;
      *(_WORD *)(v115 + 60) = WORD2(v147);
      v121 = v148;
      if (v148)
        *v148 += 2;
      v122 = *(WTF::StringImpl **)(v115 + 64);
      *(_QWORD *)(v115 + 64) = v121;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
          WTF::StringImpl::destroy(v122, v118);
        else
          *(_DWORD *)v122 -= 2;
      }
      v123 = v149;
      if (v149)
        *v149 += 2;
      v124 = *(WTF::StringImpl **)(v115 + 72);
      *(_QWORD *)(v115 + 72) = v123;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
          WTF::StringImpl::destroy(v124, v118);
        else
          *(_DWORD *)v124 -= 2;
      }
      v125 = v150;
      if (v150)
        *v150 += 2;
      v126 = *(WTF::StringImpl **)(v115 + 80);
      *(_QWORD *)(v115 + 80) = v125;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v118);
        else
          *(_DWORD *)v126 -= 2;
      }
      WebCore::StyleChange::~StyleChange((WebCore::StyleChange *)&v146, v118);
      v115 += 88;
    }
    while (v115 != v117);
    if (HIDWORD(v157))
    {
      v135 = 88 * HIDWORD(v157);
      v136 = (WTF::AtomString *)(v156 + 48);
      do
      {
        v116 = (void *)*((_QWORD *)v136 - 1);
        if (v116)
          (*(void (**)(unsigned int *, void *, uint64_t))(*(_QWORD *)v7 + 184))(v7, v116, 1);
        v137 = *((_QWORD *)v136 - 6);
        if (v137)
        {
          v138 = *((_QWORD *)v136 - 5);
          if (v138)
          {
            if ((*(_BYTE *)(v137 + 22) & 8) != 0 && (*(_BYTE *)(v138 + 22) & 8) != 0)
            {
              *((_QWORD *)v136 - 6) = 0;
              *((_QWORD *)v136 - 5) = 0;
              WebCore::ApplyStyleCommand::applyInlineStyleChange((WebCore::CompositeEditCommand *)v7, (WebCore::Node *)v137, (WebCore::Node *)v138, v136, (WebCore::Element *)1, v127);
              if (*(_DWORD *)(v138 + 24) == 2)
              {
                if ((*(_WORD *)(v138 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v138, v116);
              }
              else
              {
                *(_DWORD *)(v138 + 24) -= 2;
              }
              if (*(_DWORD *)(v137 + 24) == 2)
              {
                if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v137, v116);
              }
              else
              {
                *(_DWORD *)(v137 + 24) -= 2;
              }
            }
          }
        }
        v136 = (WTF::AtomString *)((char *)v136 + 88);
        v135 -= 88;
      }
      while (v135);
    }
  }
LABEL_433:
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v116);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v139 = (WTF *)v156;
  if (HIDWORD(v157))
  {
    v140 = 88 * HIDWORD(v157);
    v141 = (WebCore::InlineRunToApplyStyle *)v156;
    do
    {
      WebCore::InlineRunToApplyStyle::~InlineRunToApplyStyle(v141, (WTF::StringImpl *)v116);
      v141 = (WebCore::InlineRunToApplyStyle *)(v142 + 88);
      v140 -= 88;
    }
    while (v140);
  }
  if (v139)
    WTF::fastFree(v139, v116);
  result = (unsigned int *)v143;
  if (v143)
  {
    if (*((_DWORD *)v143 + 6) == 2)
    {
      if ((*((_WORD *)v143 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v143, v116);
    }
    else
    {
      *((_DWORD *)v143 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::containsNonEditableRegion(WebCore *this, WebCore::Node *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WebCore *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;

  v3 = 1;
  if (WebCore::Node::computeEditability((uint64_t)this, 0, 1))
  {
    v5 = *((_QWORD *)this + 7);
    if (v5)
    {
LABEL_6:
      v7 = 0;
      *(_DWORD *)(v5 + 24) += 2;
    }
    else
    {
      v6 = this;
      while (1)
      {
        v6 = (WebCore *)*((_QWORD *)v6 + 4);
        if (!v6)
          break;
        v5 = *((_QWORD *)v6 + 7);
        if (v5)
          goto LABEL_6;
      }
      v5 = 0;
      v7 = 1;
    }
    if ((*((_WORD *)this + 14) & 4) != 0 && (v8 = *((_QWORD *)this + 10)) != 0)
    {
      *(_DWORD *)(v8 + 24) += 2;
      while (1)
      {
        v9 = v8;
        v10 = v8 == v5;
        v11 = v8 == v5;
        if (v10)
          break;
        if (!WebCore::Node::computeEditability(v9, 0, 1))
          goto LABEL_29;
        if ((*(_WORD *)(v9 + 28) & 4) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0 || (v8 = *(_QWORD *)(v9 + 56)) != 0)
        {
LABEL_19:
          *(_DWORD *)(v8 + 24) += 2;
        }
        else
        {
          v12 = v9;
          while (1)
          {
            v12 = *(_QWORD *)(v12 + 32);
            if (!v12)
              break;
            v8 = *(_QWORD *)(v12 + 56);
            if (v8)
              goto LABEL_19;
          }
          v8 = 0;
        }
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
        if (!v8)
          goto LABEL_27;
      }
      v9 = v5;
LABEL_29:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    else
    {
LABEL_27:
      v11 = 1;
    }
    v3 = !v11;
    if ((v7 & 1) == 0)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  return v3;
}

uint64_t WebCore::ApplyStyleCommand::positionToComputeInlineStyleChange(uint64_t a1, const WebCore::QualifiedName **a2, WebCore *this, uint64_t *a4)
{
  void *v8;
  WebCore::Node *v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v14;
  int v15;
  char v16;
  WebCore::Node *v17;

  if ((*((_WORD *)this + 14) & 8) != 0)
    return WebCore::firstPositionInOrBeforeNode((uint64_t)this, (WebCore::Node *)a2, a1);
  WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::spanTag, a2[2], 0, 0, (uint64_t *)&v14);
  v9 = v14;
  v10 = *a4;
  *a4 = (uint64_t)v14;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
        v9 = (WebCore::Node *)*a4;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  *((_DWORD *)v9 + 6) += 2;
  v17 = v9;
  *((_DWORD *)this + 6) += 2;
  v14 = this;
  v15 = 0;
  v16 = 1;
  WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)a2, (uint64_t *)&v17, (WebCore::Position *)&v14);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v11);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return WebCore::firstPositionInOrBeforeNode(*a4, (WebCore::Node *)v11, a1);
}

unsigned int *WebCore::ApplyStyleCommand::applyInlineStyleChange(WebCore::CompositeEditCommand *this, WebCore::Node *a2, WebCore::Node *a3, WTF::AtomString *a4, WebCore::Element *a5, __n128 a6)
{
  WTF::AtomString *v7;
  WebCore::Node *v8;
  WebCore::CompositeEditCommand *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Element *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  __int16 v15;
  uint64_t v16;
  WebCore::Element *v17;
  uint64_t v18;
  WebCore::Node *v19;
  __int16 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::StyleProperties *v47;
  WebCore::CompositeEditCommand *v48;
  WebCore::Element *v49;
  int v50;
  uint64_t v51;
  const WebCore::StyleProperties *v52;
  WebCore::StyleProperties **v53;
  WebCore::MutableStyleProperties *v54;
  unsigned __int8 *v55;
  WTF::String *v56;
  __n128 v57;
  WTF::StringImpl *v58;
  WebCore::Element *v59;
  unsigned __int8 *v60;
  WTF::String *v61;
  __n128 v62;
  __n128 v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  WTF::StringImpl *v73;
  unsigned int *result;
  WTF *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;

  v7 = a4;
  v8 = a2;
  v9 = this;
  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  v10 = *((_QWORD *)this + 2);
  *(_DWORD *)(v10 + 24) += 2;
  if (a2 == a3)
  {
    v13 = 0;
    v12 = 0;
    while (1)
    {
      v14 = v8;
      v15 = *((_WORD *)v8 + 14);
      if ((v15 & 0x10) == 0)
        goto LABEL_24;
      v16 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 24);
      if (v16 != *(_QWORD *)(WebCore::HTMLNames::fontTag + 24))
      {
        v17 = a5;
        a5 = v12;
        goto LABEL_11;
      }
      *((_DWORD *)v8 + 6) += 2;
      v17 = a5;
      if (!v12)
        goto LABEL_10;
      if (*((_DWORD *)v12 + 6) != 2)
        break;
      a5 = v8;
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v12, a2);
        v16 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 24);
        goto LABEL_10;
      }
LABEL_11:
      v18 = *(_QWORD *)(WebCore::HTMLNames::spanTag + 24);
      if (v16 != v18 && (v13 && *(_QWORD *)(*((_QWORD *)v13 + 12) + 24) == v18 || !*((_QWORD *)v8 + 10)))
        goto LABEL_19;
      *((_DWORD *)v8 + 6) += 2;
      v19 = v13;
      v13 = v8;
      if (!v19)
        goto LABEL_19;
      if (*((_DWORD *)v19 + 6) == 2)
      {
        v13 = v8;
        if ((*((_WORD *)v19 + 15) & 0x400) != 0)
          goto LABEL_19;
        WebCore::Node::removedLastRef(v19, a2);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      v13 = v8;
LABEL_19:
      v20 = *((_WORD *)v8 + 14);
      if ((v20 & 2) != 0
        || (v20 & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
        || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8))
      {
        v11 = v8;
        v12 = a5;
        LODWORD(a5) = (_DWORD)v17;
        goto LABEL_43;
      }
      v15 = *((_WORD *)v8 + 14);
      v12 = a5;
      a5 = v17;
LABEL_24:
      if ((v15 & 4) == 0 || (v8 = (WebCore::Node *)*((_QWORD *)v8 + 10)) == 0)
      {
        v8 = v14;
        v11 = v14;
        goto LABEL_43;
      }
      v11 = (WebCore::Node *)*((_QWORD *)v14 + 11);
      if (v11)
        *((_DWORD *)v11 + 6) += 2;
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, a2);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
      *((_DWORD *)v8 + 6) += 2;
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, a2);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
      if (v8 != v11)
        goto LABEL_43;
    }
    *((_DWORD *)v12 + 6) -= 2;
LABEL_10:
    a5 = v8;
    goto LABEL_11;
  }
  v11 = a3;
  v12 = 0;
  v13 = 0;
LABEL_43:
  v22 = (char *)v7 + 16;
  v21 = *((_QWORD *)v7 + 2);
  if (v21 && *(_DWORD *)(v21 + 4))
  {
    if (!v12)
      goto LABEL_61;
LABEL_54:
    WebCore::CompositeEditCommand::setNodeAttribute(v9, v12, (const WebCore::QualifiedName *)&WebCore::HTMLNames::colorAttr, (WTF::AtomString *)((char *)v7 + 16));
    v23 = *((_QWORD *)v7 + 3);
    goto LABEL_55;
  }
  v23 = *((_QWORD *)v7 + 3);
  if (!v23 || !*(_DWORD *)(v23 + 4))
  {
    v24 = *((_QWORD *)v7 + 4);
    if (!v24 || !*(_DWORD *)(v24 + 4))
      goto LABEL_113;
  }
  if (!v12)
  {
LABEL_61:
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::fontTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v82);
    if (!*(_QWORD *)v22 || !*(_DWORD *)(*(_QWORD *)v22 + 4))
    {
LABEL_77:
      v32 = *((_QWORD *)v7 + 3);
      if (!v32 || !*(_DWORD *)(v32 + 4))
      {
LABEL_93:
        v39 = *((_QWORD *)v7 + 4);
        if (!v39)
        {
          v40 = v82;
          goto LABEL_109;
        }
        v40 = v82;
        if (!*(_DWORD *)(v39 + 4))
        {
LABEL_109:
          v81 = v40;
          v82 = 0;
          WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v81);
          if (v81)
          {
            if (*((_DWORD *)v81 + 6) == 2)
            {
              if ((*((_WORD *)v81 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v81, a2);
            }
            else
            {
              *((_DWORD *)v81 + 6) -= 2;
            }
          }
          if (v82)
          {
            if (*((_DWORD *)v82 + 6) == 2)
            {
              if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v82, a2);
            }
            else
            {
              *((_DWORD *)v82 + 6) -= 2;
            }
          }
          goto LABEL_113;
        }
        v41 = *((_QWORD *)v82 + 13);
        if (!v41)
          goto LABEL_107;
        v42 = *(_DWORD *)(v41 + 4);
        if ((v42 & 1) != 0)
        {
          v43 = *(uint64_t **)(v41 + 40);
          v44 = *(_DWORD *)(v41 + 52);
          if (!v44)
          {
LABEL_107:
            v45 = 0xFFFFFFFFLL;
LABEL_108:
            WebCore::Element::setAttributeInternal(v82, v45, (WebCore::TreeScope *)&WebCore::HTMLNames::sizeAttr, (WTF::StringImpl **)v7 + 4, 0);
            goto LABEL_109;
          }
        }
        else
        {
          v43 = (uint64_t *)(v41 + 32);
          v44 = v42 >> 5;
          if (!v44)
            goto LABEL_107;
        }
        v45 = 0;
        while (1)
        {
          v46 = *v43;
          if (*v43 == WebCore::HTMLNames::sizeAttr
            || *(_QWORD *)(v46 + 24) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 24)
            && *(_QWORD *)(v46 + 32) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 32))
          {
            goto LABEL_108;
          }
          ++v45;
          v43 += 2;
          if (v44 == v45)
            goto LABEL_107;
        }
      }
      v33 = *((_QWORD *)v82 + 13);
      if (!v33)
        goto LABEL_91;
      v34 = *(_DWORD *)(v33 + 4);
      if ((v34 & 1) != 0)
      {
        v35 = *(uint64_t **)(v33 + 40);
        v36 = *(_DWORD *)(v33 + 52);
        if (!v36)
        {
LABEL_91:
          v37 = 0xFFFFFFFFLL;
LABEL_92:
          WebCore::Element::setAttributeInternal(v82, v37, (WebCore::TreeScope *)&WebCore::HTMLNames::faceAttr, (WTF::StringImpl **)v7 + 3, 0);
          goto LABEL_93;
        }
      }
      else
      {
        v35 = (uint64_t *)(v33 + 32);
        v36 = v34 >> 5;
        if (!v36)
          goto LABEL_91;
      }
      v37 = 0;
      while (1)
      {
        v38 = *v35;
        if (*v35 == WebCore::HTMLNames::faceAttr
          || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::faceAttr + 24)
          && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::faceAttr + 32))
        {
          goto LABEL_92;
        }
        ++v37;
        v35 += 2;
        if (v36 == v37)
          goto LABEL_91;
      }
    }
    v26 = *((_QWORD *)v82 + 13);
    if (!v26)
      goto LABEL_75;
    v27 = *(_DWORD *)(v26 + 4);
    if ((v27 & 1) != 0)
    {
      v28 = *(uint64_t **)(v26 + 40);
      v29 = *(_DWORD *)(v26 + 52);
      if (!v29)
      {
LABEL_75:
        v30 = 0xFFFFFFFFLL;
LABEL_76:
        WebCore::Element::setAttributeInternal(v82, v30, (WebCore::TreeScope *)&WebCore::HTMLNames::colorAttr, (WTF::StringImpl **)v7 + 2, 0);
        goto LABEL_77;
      }
    }
    else
    {
      v28 = (uint64_t *)(v26 + 32);
      v29 = v27 >> 5;
      if (!v29)
        goto LABEL_75;
    }
    v30 = 0;
    while (1)
    {
      v31 = *v28;
      if (*v28 == WebCore::HTMLNames::colorAttr
        || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 24)
        && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 32))
      {
        goto LABEL_76;
      }
      ++v30;
      v28 += 2;
      if (v29 == v30)
        goto LABEL_75;
    }
  }
  if (v21 && *(_DWORD *)(v21 + 4))
    goto LABEL_54;
LABEL_55:
  if (v23 && *(_DWORD *)(v23 + 4))
    WebCore::CompositeEditCommand::setNodeAttribute(v9, v12, (const WebCore::QualifiedName *)&WebCore::HTMLNames::faceAttr, (WTF::AtomString *)((char *)v7 + 24));
  a4 = (WTF::AtomString *)((char *)v7 + 32);
  v25 = *((_QWORD *)v7 + 4);
  if (v25 && *(_DWORD *)(v25 + 4))
    WebCore::CompositeEditCommand::setNodeAttribute(v9, v12, (const WebCore::QualifiedName *)&WebCore::HTMLNames::sizeAttr, a4);
LABEL_113:
  v47 = *(WebCore::StyleProperties **)v7;
  if (*(_QWORD *)v7)
  {
    if (v13)
    {
      v77 = v10;
      v48 = v9;
      v49 = v12;
      v50 = (int)a5;
      a5 = v13;
      v51 = *((_QWORD *)v13 + 13);
      if (v51 && (v52 = *(const WebCore::StyleProperties **)(v51 + 8)) != 0)
      {
        v53 = (WebCore::StyleProperties **)WTF::fastMalloc((WTF *)0x18);
        v54 = WebCore::EditingStyle::EditingStyle((WebCore::EditingStyle *)v53, v52);
        WebCore::EditingStyle::mergeStyle(v54, (uint64_t)v47, 0);
        WebCore::StyleProperties::asTextAtom(v53[1], v55, v56, (WTF::AtomString *)&v82, v57);
        v13 = a5;
        WebCore::CompositeEditCommand::setNodeAttribute(v48, a5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v82);
        v58 = v82;
        v82 = 0;
        LODWORD(a5) = v50;
        v12 = v49;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, a2);
          else
            *(_DWORD *)v58 -= 2;
        }
        if (*(_DWORD *)v53 == 1)
        {
          WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v53, a2);
          WTF::fastFree(v75, v76);
        }
        else
        {
          --*(_DWORD *)v53;
        }
      }
      else
      {
        WebCore::StyleProperties::asTextAtom(v47, (unsigned __int8 *)a2, a4, (WTF::AtomString *)&v82, a6);
        v13 = a5;
        WebCore::CompositeEditCommand::setNodeAttribute(v48, a5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v82);
        v67 = v82;
        v82 = 0;
        LODWORD(a5) = v50;
        v12 = v49;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, a2);
          else
            *(_DWORD *)v67 -= 2;
        }
      }
      v9 = v48;
      v10 = v77;
    }
    else
    {
      WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::spanTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v82);
      v59 = v82;
      WebCore::StyleProperties::asTextAtom(v47, v60, v61, (WTF::AtomString *)&v81, v62);
      WebCore::Element::setAttribute(v59, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v81, 0, &v78, v63);
      if (v80)
      {
        v65 = v79;
        v79 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, v64);
          else
            *(_DWORD *)v65 -= 2;
        }
      }
      v66 = v81;
      v81 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v64);
        else
          *(_DWORD *)v66 -= 2;
      }
      v81 = v59;
      v82 = 0;
      WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v81);
      if (v81)
      {
        if (*((_DWORD *)v81 + 6) == 2)
        {
          if ((*((_WORD *)v81 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v81, a2);
        }
        else
        {
          *((_DWORD *)v81 + 6) -= 2;
        }
      }
      if (v82)
      {
        if (*((_DWORD *)v82 + 6) == 2)
        {
          if ((*((_WORD *)v82 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v82, a2);
        }
        else
        {
          *((_DWORD *)v82 + 6) -= 2;
        }
      }
    }
  }
  if (*((_BYTE *)v7 + 8))
  {
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::bTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v81);
    v68 = v81;
    v81 = 0;
    v82 = v68;
    WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
    if (v82)
    {
      if (*((_DWORD *)v82 + 6) == 2)
      {
        if ((*((_WORD *)v82 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v82, a2);
      }
      else
      {
        *((_DWORD *)v82 + 6) -= 2;
      }
    }
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, a2);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
  }
  if (*((_BYTE *)v7 + 9))
  {
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::iTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v81);
    v69 = v81;
    v81 = 0;
    v82 = v69;
    WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
    if (v82)
    {
      if (*((_DWORD *)v82 + 6) == 2)
      {
        if ((*((_WORD *)v82 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v82, a2);
      }
      else
      {
        *((_DWORD *)v82 + 6) -= 2;
      }
    }
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, a2);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
  }
  if (*((_BYTE *)v7 + 10))
  {
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::uTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v81);
    v70 = v81;
    v81 = 0;
    v82 = v70;
    WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
    if (v82)
    {
      if (*((_DWORD *)v82 + 6) == 2)
      {
        if ((*((_WORD *)v82 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v82, a2);
      }
      else
      {
        *((_DWORD *)v82 + 6) -= 2;
      }
    }
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, a2);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
  }
  if (*((_BYTE *)v7 + 11))
  {
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::strikeTag, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v81);
    v71 = v81;
    v81 = 0;
    v82 = v71;
    WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
    if (v82)
    {
      if (*((_DWORD *)v82 + 6) == 2)
      {
        if ((*((_WORD *)v82 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v82, a2);
      }
      else
      {
        *((_DWORD *)v82 + 6) -= 2;
      }
    }
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, a2);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
  }
  if (*((_BYTE *)v7 + 12))
  {
    v72 = &WebCore::HTMLNames::subTag;
  }
  else
  {
    if (!*((_BYTE *)v7 + 13))
      goto LABEL_167;
    v72 = &WebCore::HTMLNames::supTag;
  }
  WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)v72, (const WebCore::QualifiedName *)v10, 0, 0, (uint64_t *)&v81);
  v73 = v81;
  v81 = 0;
  v82 = v73;
  WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
  if (v82)
  {
    if (*((_DWORD *)v82 + 6) == 2)
    {
      if ((*((_WORD *)v82 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v82, a2);
    }
    else
    {
      *((_DWORD *)v82 + 6) -= 2;
    }
  }
  if (v81)
  {
    if (*((_DWORD *)v81 + 6) == 2)
    {
      if ((*((_WORD *)v81 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v81, a2);
    }
    else
    {
      *((_DWORD *)v81 + 6) -= 2;
    }
  }
LABEL_167:
  result = (unsigned int *)*((_QWORD *)v9 + 42);
  if (result)
  {
    if ((_DWORD)a5)
    {
      WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)result, &v82);
      WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v9, (uint64_t)v8, (uint64_t)v11, (uint64_t *)&v82);
      result = (unsigned int *)v82;
      v82 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v13, a2);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v12, a2);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v11, a2);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v8, a2);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::ApplyStyleCommand::removeInlineStyleFromElement(WebCore::CompositeEditCommand *a1, WebCore *a2, uint64_t a3, int a4, WebCore::MutableStyleProperties *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t);
  _BOOL4 v15;
  const WTF::StringImpl *v16;
  WTF::String *v17;
  __n128 v18;
  void *v19;
  const WTF::StringImpl *v20;
  WTF::String *v21;
  __n128 v22;
  WTF *v23;
  uint64_t v24;
  const WTF::AtomString *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;

  result = *(_QWORD *)(a3 + 32);
  if (!result)
    return result;
  result = WebCore::Node::computeEditability(result, 0, 0);
  if (!(_DWORD)result)
    return result;
  v11 = *((_QWORD *)a1 + 42);
  if (v11
    && ((v12 = *(_QWORD *)(a3 + 96), v13 = *(_QWORD *)(v11 + 96), v12 == v13)
     || *(_QWORD *)(v12 + 24) == *(_QWORD *)(v13 + 24) && *(_QWORD *)(v12 + 32) == *(_QWORD *)(v13 + 32))
    || (v14 = (unsigned int (*)(uint64_t))*((_QWORD *)a1 + 44)) != 0 && v14(a3))
  {
    if (a5)
      WebCore::EditingStyle::mergeInlineStyleOfElement(a5, (WTF::StringImpl *)a3, 0, 0);
    return (uint64_t)WebCore::CompositeEditCommand::removeNodePreservingChildren(a1, a3, 1);
  }
  v15 = a4 != 1;
  if (!WebCore::EditingStyle::conflictsWithImplicitStyleOfElement((uint64_t)a2, a3, (uint64_t)a5, v15))
  {
    v32 = 0;
    v33 = 0;
    result = WebCore::EditingStyle::extractConflictingImplicitStyleOfAttributes(a2, a3, a5 == 0, (uint64_t)a5, (uint64_t)&v32, v15);
    if (!(_DWORD)result)
      goto LABEL_26;
    if (HIDWORD(v33))
    {
      v23 = v32;
      v24 = 8 * HIDWORD(v33);
      v25 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      do
      {
        result = (uint64_t)WebCore::CompositeEditCommand::setNodeAttribute(a1, (WebCore::Element *)a3, v23, v25);
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
    if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
      goto LABEL_26;
    v26 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
    if (v26 == *(_QWORD *)(WebCore::HTMLNames::fontTag + 24))
    {
      result = WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)a3, (unsigned __int8 *)1, v20, v21, v22);
      if ((result & 1) != 0)
      {
LABEL_25:
        result = (uint64_t)WebCore::CompositeEditCommand::removeNodePreservingChildren(a1, a3, 1);
        goto LABEL_26;
      }
      if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
      {
LABEL_26:
        v27 = v32;
        if (HIDWORD(v33))
        {
          v28 = 8 * HIDWORD(v33);
          do
          {
            result = *(_QWORD *)v27;
            *(_QWORD *)v27 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
                result = WTF::fastFree(v29, v30);
              }
              else
              {
                --*(_DWORD *)result;
              }
            }
            v27 = (WTF *)((char *)v27 + 8);
            v28 -= 8;
          }
          while (v28);
          v27 = v32;
        }
        if (v27)
        {
          v32 = 0;
          LODWORD(v33) = 0;
          result = WTF::fastFree(v27, v19);
        }
        goto LABEL_39;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
    }
    if (v26 != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
      goto LABEL_26;
    result = WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)a3, (unsigned __int8 *)1, v20, v21, v22);
    if (!(_DWORD)result)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (WebCore::hasNoAttributeOrOnlyStyleAttribute((WebCore::StyledElement *)a3, (unsigned __int8 *)1, v16, v17, v18))
  {
    result = (uint64_t)WebCore::CompositeEditCommand::removeNodePreservingChildren(a1, a3, 1);
  }
  else
  {
    WebCore::CompositeEditCommand::replaceElementWithSpanPreservingChildrenAndAttributes(a1, (WebCore::HTMLElement *)a3, &v32);
    result = (uint64_t)v32;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v32, v31);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
  }
LABEL_39:
  if ((*(_BYTE *)(a3 + 22) & 8) != 0)
    return WebCore::ApplyStyleCommand::removeCSSStyle(a1, (uint64_t)a2, a3, (uint64_t)a5);
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::replaceElementWithSpanPreservingChildrenAndAttributes@<X0>(WebCore::CompositeEditCommand *this@<X0>, WebCore::HTMLElement *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *result;
  uint64_t v11;
  WebCore::Node *v12;

  *((_DWORD *)a2 + 6) += 2;
  v6 = WTF::fastMalloc((WTF *)0x108);
  v7 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v7 + 6) += 2;
  v12 = v7;
  *(_QWORD *)WebCore::EditCommand::EditCommand(v6, (uint64_t *)&v12, 59) = off_1E33A9E80;
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  *(_QWORD *)v6 = off_1E33AD8F0;
  *(_QWORD *)(v6 + 248) = a2;
  *(_QWORD *)(v6 + 256) = 0;
  ++*(_DWORD *)(v6 + 8);
  v12 = (WebCore::Node *)v6;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v12);
  result = v12;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      result = (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8))();
    else
      --*((_DWORD *)v12 + 2);
  }
  v11 = *(_QWORD *)(v6 + 256);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *a3 = v11;
  if (*(_DWORD *)(v6 + 8) == 1)
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  --*(_DWORD *)(v6 + 8);
  return result;
}

void WebCore::ApplyStyleCommand::applyInlineStyleToPushDown(WebCore::CompositeEditCommand *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::StyleProperties **v15;
  WTF::StringImpl *v16;
  void *v17;
  __n128 v18;
  WebCore::Node *v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  WebCore::Node *v32[2];
  WTF::StringImpl *v33[5];
  uint64_t v34;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v6);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3)
  {
    if ((v10 = *(_QWORD *)(a3 + 8)) != 0 && *(_DWORD *)(v10 + 28)
      || (v9.n128_u32[0] = *(_DWORD *)(a3 + 20), v9.n128_f32[0] != *(float *)&WebCore::EditingStyle::NoFontDelta)
      || (*(_BYTE *)(a3 + 16) & 0x1E) != 0)
    {
      v11 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
      if (v11)
      {
        v12 = *(_WORD *)(a2 + 28);
        if ((v12 & 0x10) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
            return;
          ++*(_DWORD *)a3;
          v13 = *(_QWORD *)(a2 + 104);
          if (v13 && *(_QWORD *)(v13 + 8))
          {
            WebCore::EditingStyle::copy((WebCore::EditingStyle *)a3, (uint64_t *)v33);
            v15 = (WebCore::StyleProperties **)v33[0];
            if (*(_DWORD *)a3 == 1)
            {
              WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)a3, v14);
              WTF::fastFree(v26, v27);
            }
            else
            {
              --*(_DWORD *)a3;
            }
            WebCore::EditingStyle::mergeInlineStyleOfElement((WebCore::MutableStyleProperties *)v15, (WTF::StringImpl *)a2, 0, 0);
            v12 = *(_WORD *)(a2 + 28);
            v11 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
LABEL_18:
            if (((*(_BYTE *)(v11 + 52) & 7) == 1 || (v12 & 4) != 0 && *(_QWORD *)(a2 + 80)) && (v12 & 0x10) != 0)
            {
              WebCore::StyleProperties::asTextAtom(v15[1], (unsigned __int8 *)v7, v8, (WTF::AtomString *)v33, v9);
              WebCore::CompositeEditCommand::setNodeAttribute(a1, (WebCore::Element *)a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)v33);
              v16 = v33[0];
              v33[0] = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
                else
                  *(_DWORD *)v16 -= 2;
              }
LABEL_44:
              if (*(_DWORD *)v15 == 1)
              {
                WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v15, (WTF::StringImpl *)v7);
                WTF::fastFree(v24, v25);
              }
              else
              {
                --*(_DWORD *)v15;
              }
              return;
            }
            ++WebCore::ScriptDisallowedScope::s_count;
            if (v11 && (*(_BYTE *)(v11 + 45) & 2) != 0)
            {
              if ((WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v11) & 1) != 0)
                goto LABEL_28;
              v11 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
            }
            if (*(_BYTE *)(v11 + 46) != 17 || (*(_BYTE *)(v11 + 52) & 7) == 2 && (*(_BYTE *)(v11 + 53) & 1) != 0)
              goto LABEL_33;
            if ((*(_BYTE *)(v11 + 45) & 2) != 0)
              v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
            if ((v28 = *(_DWORD *)(v11 + 120), v29 = (v28 >> 27) & 7, (v28 & 0x40000000) == 0) && v29 == 3
              || v29
              && ((v30 = v28 & 0x40000000) != 0 ? (v31 = 1) : (v31 = 2), v29 == v31 || !((v29 != 1) | (v30 >> 30) & 1)))
            {
LABEL_33:
              --WebCore::ScriptDisallowedScope::s_count;
              if ((*(_BYTE *)(a2 + 22) & 8) != 0)
              {
                *(_DWORD *)(a2 + 24) += 2;
                v34 = 0;
                WebCore::ApplyStyleCommand::positionToComputeInlineStyleChange((uint64_t)v32, (const WebCore::QualifiedName **)a1, (WebCore *)a2, &v34);
                WebCore::StyleChange::StyleChange((WebCore::StyleChange *)v33, (WebCore::EditingStyle *)v15, (const WebCore::Position *)v32);
                v19 = v32[0];
                v32[0] = 0;
                if (v19)
                {
                  if (*((_DWORD *)v19 + 6) == 2)
                  {
                    if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v19, v17);
                  }
                  else
                  {
                    *((_DWORD *)v19 + 6) -= 2;
                  }
                }
                v20 = v34;
                if (v34)
                {
                  v21.n128_f64[0] = (*(double (**)(WebCore::CompositeEditCommand *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v34, 1);
                  WebCore::ApplyStyleCommand::applyInlineStyleChange(a1, (WebCore::Node *)a2, (WebCore::Node *)a2, (WTF::AtomString *)v33, 0, v21);
                  WebCore::StyleChange::~StyleChange((WebCore::StyleChange *)v33, v22);
                  if (*(_DWORD *)(v20 + 24) == 2)
                  {
                    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v20, v7);
                  }
                  else
                  {
                    *(_DWORD *)(v20 + 24) -= 2;
                  }
                }
                else
                {
                  WebCore::ApplyStyleCommand::applyInlineStyleChange(a1, (WebCore::Node *)a2, (WebCore::Node *)a2, (WTF::AtomString *)v33, 0, v18);
                  WebCore::StyleChange::~StyleChange((WebCore::StyleChange *)v33, v23);
                }
                if (*(_DWORD *)(a2 + 24) == 2)
                {
                  if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)a2, v7);
                }
                else
                {
                  *(_DWORD *)(a2 + 24) -= 2;
                }
              }
LABEL_43:
              if (!v15)
                return;
              goto LABEL_44;
            }
LABEL_28:
            --WebCore::ScriptDisallowedScope::s_count;
            goto LABEL_43;
          }
        }
        else
        {
          ++*(_DWORD *)a3;
        }
        v15 = (WebCore::StyleProperties **)a3;
        goto LABEL_18;
      }
    }
  }
}

uint64_t WebCore::ApplyStyleCommand::pushDownInlineStyleAroundNode(uint64_t result, uint64_t a2, WebCore *this)
{
  WebCore::CompositeEditCommand *v5;
  const WebCore::Position *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  WebCore *v11;
  int *v12;
  WebCore *v13;
  WebCore *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(WebCore *);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WebCore *v26;
  uint64_t v27;
  char *v28;
  __int16 v29;
  WebCore *v30;
  uint64_t v32;
  unsigned int v33;
  WTF *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(WebCore *);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  char *v52;
  void *v53;
  WebCore *v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  const WebCore::Element **v58;
  WebCore *v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  WebCore *v63;
  const WebCore::Element **v65;
  const WebCore::Element *v66;
  uint64_t v67;
  WebCore::Node *v68;
  uint64_t v69;
  WebCore::TreeScope *v70;
  __n128 v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  void *v79;
  WebCore::Node *v80;
  WebCore *v81;
  __int16 v82;
  WebCore *v83;
  WTF *v85;
  uint64_t v87;
  WTF *v88;
  void *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  WebCore *v94;
  WebCore *v95;
  uint64_t v96;
  uint64_t v97;
  const WebCore::Element **v98;
  WebCore::EditingStyle *v99;
  uint64_t *v100;
  WebCore::Node *v101;
  WTF *v102;
  uint64_t v103;
  _BYTE v104[96];

  if (!this)
    return result;
  v5 = (WebCore::CompositeEditCommand *)result;
  WebCore::firstPositionInOrBeforeNode((uint64_t)this, (WebCore::Node *)a2, (uint64_t)&v102);
  v7 = WebCore::unsplittableElementForPosition((WebCore *)&v102, v6);
  v9 = v7;
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  result = (uint64_t)v102;
  v102 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)v8);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v10 = 0;
  v11 = 0;
  *((_DWORD *)this + 6) += 2;
  v12 = &webThreadDelegateMessageScopeCount;
  v13 = this;
  do
  {
    v14 = v11;
    v15 = v13;
    if ((*((_WORD *)v13 + 14) & 0x10) == 0
      || (result = *((_QWORD *)v13 + 4)) == 0
      || (result = WebCore::Node::computeEditability(result, 0, 0), !(_DWORD)result))
    {
LABEL_38:
      v11 = v14;
      goto LABEL_39;
    }
    v16 = *((_QWORD *)v5 + 42);
    if (!v16
      || (v17 = *((_QWORD *)v13 + 12), v18 = *(_QWORD *)(v16 + 96), v17 != v18)
      && (*(_QWORD *)(v17 + 24) != *(_QWORD *)(v18 + 24) || *(_QWORD *)(v17 + 32) != *(_QWORD *)(v18 + 32)))
    {
      v19 = (uint64_t (*)(WebCore *))*((_QWORD *)v5 + 44);
      if (!v19 || (result = v19(v13), (result & 1) == 0))
      {
        v20 = *(_QWORD *)(a2 + 8);
        if (v20 && *(_DWORD *)(v20 + 28)
          || *(float *)(a2 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
          || (*(_BYTE *)(a2 + 16) & 0x1E) != 0)
        {
          result = (uint64_t)WebCore::htmlElementEquivalents((WebCore *)result);
          if (v8)
          {
            v21 = (_QWORD *)result;
            v22 = 8 * v8;
            do
            {
              result = (*(uint64_t (**)(_QWORD, WebCore *))(*(_QWORD *)*v21 + 16))(*v21, v15);
              if ((_DWORD)result)
              {
                result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v21 + 32))(*v21, a2);
                if ((_DWORD)result)
                {
                  result = (*(uint64_t (**)(_QWORD, WebCore *, uint64_t))(*(_QWORD *)*v21 + 40))(*v21, v15, a2);
                  if (!(_DWORD)result)
                    goto LABEL_48;
                }
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
        }
        v23 = *(_QWORD *)(a2 + 8);
        if (v23 && *(_DWORD *)(v23 + 28)
          || *(float *)(a2 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
          || (*(_BYTE *)(a2 + 16) & 0x1E) != 0)
        {
          result = (uint64_t)WebCore::htmlAttributeEquivalents((WebCore *)result);
          if (v8)
          {
            v24 = (_QWORD *)result;
            v25 = 8 * v8;
            while (1)
            {
              result = (*(uint64_t (**)(_QWORD, WebCore *))(*(_QWORD *)*v24 + 16))(*v24, v15);
              if ((_DWORD)result)
              {
                result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v24 + 32))(*v24, a2);
                if ((_DWORD)result)
                {
                  result = (*(uint64_t (**)(_QWORD, WebCore *, uint64_t))(*(_QWORD *)*v24 + 40))(*v24, v15, a2);
                  if (!(_DWORD)result)
                    break;
                }
              }
              ++v24;
              v25 -= 8;
              if (!v25)
                goto LABEL_36;
            }
LABEL_48:
            if ((*((_BYTE *)v15 + 22) & 8) != 0)
              result = WebCore::EditingStyle::conflictsWithInlineStyleOfElement(a2, v15, 0, 0);
            goto LABEL_50;
          }
        }
LABEL_36:
        if ((*((_BYTE *)v15 + 22) & 8) == 0)
          goto LABEL_38;
        result = WebCore::EditingStyle::conflictsWithInlineStyleOfElement(a2, v15, 0, 0);
        if ((result & 1) == 0)
          goto LABEL_38;
      }
    }
LABEL_50:
    *((_DWORD *)v15 + 6) += 2;
    v10 = v15;
    v11 = v15;
    if (!v14)
      goto LABEL_39;
    if (*((_DWORD *)v14 + 6) != 2)
    {
      *((_DWORD *)v14 + 6) -= 2;
LABEL_53:
      v10 = v15;
      v11 = v15;
      goto LABEL_39;
    }
    v10 = v15;
    v11 = v15;
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef(v14, (void *)v8);
      goto LABEL_53;
    }
LABEL_39:
    if (v15 == (WebCore *)v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, (void *)v8);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      goto LABEL_61;
    }
    v13 = (WebCore *)*((_QWORD *)v15 + 4);
    if (v13)
      *((_DWORD *)v13 + 6) += 2;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v15, (void *)v8);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  while (v13);
  if (!v9)
    goto LABEL_63;
LABEL_61:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, (void *)v8);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_63:
  if (v10)
  {
    *((_DWORD *)v10 + 6) += 2;
    if (v10 == this)
    {
      v26 = this;
LABEL_247:
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v26, (void *)v8);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
      goto LABEL_249;
    }
    v27 = 0;
    v93 = 0;
    v28 = 0;
    v26 = v10;
    v94 = v10;
    while (2)
    {
      if (v26 == this)
      {
        v29 = *((_WORD *)this + 14);
        goto LABEL_81;
      }
      v29 = *((_WORD *)v26 + 14);
      if ((v29 & 0xF000) != 0x9000)
      {
        if ((v29 & 4) == 0
          || !*((_QWORD *)v26 + 10)
          || ((*((unsigned __int8 *)this + 22) ^ *((unsigned __int8 *)v26 + 22)) & 8) != 0)
        {
          goto LABEL_244;
        }
        v30 = this;
        do
          v30 = (WebCore *)*((_QWORD *)v30 + 4);
        while (v30 != v26 && v30 != 0);
        if (!v30)
          goto LABEL_244;
LABEL_81:
        v102 = (WTF *)v104;
        v103 = 11;
        if ((v29 & 4) != 0)
        {
          v32 = *((_QWORD *)v26 + 10);
          if (v32)
          {
            v96 = v27;
            v33 = 0;
            v34 = (WTF *)v104;
            do
            {
              v35 = v33;
              if (v33 == (_DWORD)v103)
              {
                v37 = v28;
                v38 = v33 + 1;
                v39 = v35 + (v35 >> 2);
                if (v39 >= 0x10)
                  v40 = v39 + 1;
                else
                  v40 = 16;
                if (v40 <= v38)
                  v41 = v35 + 1;
                else
                  v41 = v40;
                if (v41 < 0xC)
                {
                  v42 = (WTF *)v104;
                  v102 = (WTF *)v104;
                  LODWORD(v103) = 11;
                }
                else
                {
                  if (v41 >> 29)
                    goto LABEL_266;
                  v42 = (WTF *)WTF::fastMalloc((WTF *)(8 * v41));
                  LODWORD(v103) = v41;
                  v102 = v42;
                }
                memcpy(v42, v34, 8 * v35);
                v28 = v37;
                if (v104 != (_BYTE *)v34 && v34)
                {
                  if (v102 == v34)
                  {
                    v102 = 0;
                    LODWORD(v103) = 0;
                  }
                  WTF::fastFree(v34, (void *)v8);
                }
                v33 = HIDWORD(v103);
                v34 = v102;
                v36 = (_QWORD *)((char *)v102 + 8 * HIDWORD(v103));
              }
              else
              {
                v36 = (_QWORD *)((char *)v34 + 8 * v33);
              }
              *(_DWORD *)(v32 + 24) += 2;
              *v36 = v32;
              HIDWORD(v103) = ++v33;
              v32 = *(_QWORD *)(v32 + 56);
            }
            while (v32);
            v29 = *((_WORD *)v26 + 14);
            v27 = v96;
          }
        }
        if ((v29 & 0x70) != 0)
        {
          v43 = *((_DWORD *)v26 + 6) + 2;
          *((_DWORD *)v26 + 6) = v43;
          v44 = *((_QWORD *)v5 + 42);
          if (v44)
          {
            v45 = *((_QWORD *)v26 + 12);
            v46 = *(_QWORD *)(v44 + 96);
            if (v45 == v46
              || *(_QWORD *)(v45 + 24) == *(_QWORD *)(v46 + 24) && *(_QWORD *)(v45 + 32) == *(_QWORD *)(v46 + 32))
            {
LABEL_110:
              v48 = v27;
              if ((_DWORD)v27 == v93)
              {
                v49 = v27 + ((unint64_t)v27 >> 2);
                if (v49 >= 0x10)
                  v50 = v49 + 1;
                else
                  v50 = 16;
                if (v50 <= (unint64_t)v27 + 1)
                  v50 = v27 + 1;
                if (v50 >> 29)
                {
LABEL_266:
                  __break(0xC471u);
                  JUMPOUT(0x195A865D4);
                }
                v51 = v27;
                v52 = v28;
                v93 = v50;
                v28 = (char *)WTF::fastMalloc((WTF *)(8 * v50));
                memcpy(v28, v52, 8 * v48);
                if (v52)
                {
                  if (v28 == v52)
                  {
                    v28 = 0;
                    v90 = 0;
                  }
                  else
                  {
                    v90 = v93;
                  }
                  v93 = v90;
                  WTF::fastFree((WTF *)v52, v53);
                }
                LODWORD(v27) = v51;
              }
              v27 = (v27 + 1);
              *((_DWORD *)v26 + 6) += 2;
              *(_QWORD *)&v28[8 * v48] = v26;
              v54 = v26;
LABEL_123:
              v56 = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)v56 = 1;
              *(_QWORD *)(v56 + 8) = 0;
              *(_BYTE *)(v56 + 16) &= 0xE0u;
              *(_DWORD *)(v56 + 20) = v12[561];
              if ((*((_BYTE *)v26 + 28) & 0x10) != 0)
                WebCore::ApplyStyleCommand::removeInlineStyleFromElement(v5, (WebCore *)a2, (uint64_t)v26, 0, (WebCore::MutableStyleProperties *)v56);
              v98 = (const WebCore::Element **)v28;
              v99 = (WebCore::EditingStyle *)v56;
              if (!HIDWORD(v103))
                goto LABEL_197;
              v57 = (uint64_t *)v102;
              v100 = (uint64_t *)((char *)v102 + 8 * HIDWORD(v103));
              v58 = (const WebCore::Element **)&v28[8 * v27];
              v59 = v26;
              v95 = v54;
              v97 = v27;
LABEL_127:
              v60 = *v57;
              if (!*(_QWORD *)(*v57 + 32))
                goto LABEL_193;
              v8 = (uint64_t)this;
              if ((WebCore *)v60 == this)
                goto LABEL_169;
              v61 = *(_WORD *)(v60 + 28);
              if ((v61 & 0xF000) == 0x9000)
              {
                if (**((_QWORD **)this + 5) == v60 && (*((_WORD *)this + 14) & 0xF000) != 0x9000)
                {
                  LODWORD(v62) = (*((unsigned __int8 *)this + 22) >> 3) & 1;
                  goto LABEL_143;
                }
              }
              else if ((v61 & 4) != 0)
              {
                v62 = *(_QWORD *)(v60 + 80);
                if (!v62)
                  goto LABEL_143;
                if (((*((unsigned __int8 *)this + 22) ^ *(unsigned __int8 *)(v60 + 22)) & 8) == 0)
                {
                  v63 = this;
                  do
                  {
                    v63 = (WebCore *)*((_QWORD *)v63 + 4);
                    LOBYTE(v62) = v63 != 0;
                  }
                  while (v63 != (WebCore *)v60 && v63 != 0);
LABEL_143:
                  v8 = *v57;
                  if ((v62 & 1) != 0 || !(_DWORD)v27)
                    goto LABEL_169;
                  v65 = v98;
LABEL_146:
                  v66 = *v65;
                  v67 = *((_QWORD *)v5 + 2);
                  *(_DWORD *)(v67 + 24) += 2;
                  (*(void (**)(WebCore::Node **__return_ptr, const WebCore::Element *, uint64_t))(*(_QWORD *)v66 + 1112))(&v101, v66, v67);
                  v68 = v101;
                  WebCore::Element::cloneAttributesFromElement(v101, v66, v69, v70, v71);
                  (*(void (**)(WebCore::Node *, const WebCore::Element *))(*(_QWORD *)v68 + 496))(v68, v66);
                  if (*(_DWORD *)(v67 + 24) == 2)
                  {
                    if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v67, v72);
                  }
                  else
                  {
                    *(_DWORD *)(v67 + 24) -= 2;
                  }
                  v73 = *((_QWORD *)v101 + 13);
                  if (v73)
                  {
                    v74 = *(unsigned int *)(v73 + 4);
                    if ((v74 & 1) != 0)
                    {
                      v75 = *(uint64_t **)(v73 + 40);
                      v76 = (WTF::StringImpl *)*(unsigned int *)(v73 + 52);
                      if (!v76)
                        goto LABEL_160;
                    }
                    else
                    {
                      v75 = (uint64_t *)(v73 + 32);
                      v76 = (WTF::StringImpl *)(v74 >> 5);
                      if (!(v74 >> 5))
                        goto LABEL_160;
                    }
                    v77 = 0;
                    while (1)
                    {
                      v78 = *v75;
                      if (*v75 == WebCore::HTMLNames::styleAttr
                        || *(_QWORD *)(v78 + 24) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24)
                        && *(_QWORD *)(v78 + 32) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 32))
                      {
                        break;
                      }
                      v77 = (WTF::StringImpl *)((char *)v77 + 1);
                      v75 += 2;
                      if (v76 == v77)
                        goto LABEL_160;
                    }
                    WebCore::Element::removeAttributeInternal((uint64_t)v101, v77, 0);
                  }
LABEL_160:
                  WebCore::ApplyStyleCommand::surroundNodeRangeWithElement(v5, *v57, *v57, (uint64_t *)&v101);
                  v80 = v101;
                  v101 = 0;
                  if (v80)
                  {
                    if (*((_DWORD *)v80 + 6) == 2)
                    {
                      if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v80, v79);
                    }
                    else
                    {
                      *((_DWORD *)v80 + 6) -= 2;
                    }
                  }
                  if (++v65 == v58)
                  {
                    v8 = *v57;
                    v12 = &webThreadDelegateMessageScopeCount;
                    v54 = v95;
                    v27 = v97;
LABEL_169:
                    if (!v54 && (v81 = this, (WebCore *)v8 == this)
                      || (WebCore::ApplyStyleCommand::applyInlineStyleToPushDown(v5, v8, (uint64_t)v99),
                          v26 = (WebCore *)*v57,
                          v81 = this,
                          (WebCore *)*v57 == this))
                    {
LABEL_183:
                      v26 = v81;
                      if (v81)
                        goto LABEL_184;
                      goto LABEL_185;
                    }
                    v82 = *((_WORD *)v26 + 14);
                    if ((v82 & 0xF000) == 0x9000)
                    {
                      if (**((WebCore ***)this + 5) != v26
                        || (*((_WORD *)this + 14) & 0xF000) == 0x9000
                        || (*((_BYTE *)this + 22) & 8) == 0)
                      {
                        goto LABEL_193;
                      }
LABEL_184:
                      *((_DWORD *)v26 + 6) += 2;
LABEL_185:
                      if (v59)
                      {
                        if (*((_DWORD *)v59 + 6) == 2)
                        {
                          if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v59, (void *)v8);
                        }
                        else
                        {
                          *((_DWORD *)v59 + 6) -= 2;
                        }
                      }
                      goto LABEL_194;
                    }
                    if ((v82 & 4) != 0
                      && *((_QWORD *)v26 + 10)
                      && ((*((unsigned __int8 *)this + 22) ^ *((unsigned __int8 *)v26 + 22)) & 8) == 0)
                    {
                      v83 = this;
                      do
                        v83 = (WebCore *)*((_QWORD *)v83 + 4);
                      while (v83 != v26 && v83 != 0);
                      v81 = (WebCore *)*v57;
                      if (v83)
                        goto LABEL_183;
                    }
LABEL_193:
                    v26 = v59;
LABEL_194:
                    ++v57;
                    v59 = v26;
                    if (v57 == v100)
                    {
LABEL_197:
                      result = (uint64_t)v99;
                      v10 = v94;
                      if (*(_DWORD *)v99 == 1)
                      {
                        WebCore::EditingStyle::~EditingStyle(v99, (WTF::StringImpl *)v8);
                        result = WTF::fastFree(v88, v89);
                      }
                      else
                      {
                        --*(_DWORD *)v99;
                      }
                      v28 = (char *)v98;
                      if (v54)
                      {
                        if (*((_DWORD *)v54 + 6) == 2)
                        {
                          if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                            result = (uint64_t)WebCore::Node::removedLastRef(v54, (void *)v8);
                        }
                        else
                        {
                          *((_DWORD *)v54 + 6) -= 2;
                        }
                      }
                      v85 = v102;
                      if (HIDWORD(v103))
                      {
                        v87 = 8 * HIDWORD(v103);
                        do
                        {
                          result = *(_QWORD *)v85;
                          *(_QWORD *)v85 = 0;
                          if (result)
                          {
                            if (*(_DWORD *)(result + 24) == 2)
                            {
                              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)v8);
                            }
                            else
                            {
                              *(_DWORD *)(result + 24) -= 2;
                            }
                          }
                          v85 = (WTF *)((char *)v85 + 8);
                          v87 -= 8;
                        }
                        while (v87);
                        v85 = v102;
                      }
                      if (v104 == (_BYTE *)v85 || v85 == 0)
                      {
                        if (!v26)
                          goto LABEL_244;
                      }
                      else
                      {
                        v102 = 0;
                        LODWORD(v103) = 0;
                        result = WTF::fastFree(v85, (void *)v8);
                        if (!v26)
                          goto LABEL_244;
                      }
                      if (v26 == this)
                        goto LABEL_244;
                      continue;
                    }
                    goto LABEL_127;
                  }
                  goto LABEL_146;
                }
              }
              LOBYTE(v62) = 0;
              goto LABEL_143;
            }
          }
          v47 = (uint64_t (*)(WebCore *))*((_QWORD *)v5 + 44);
          if (v47)
          {
            if ((v47(v26) & 1) != 0)
              goto LABEL_110;
            v43 = *((_DWORD *)v26 + 6);
          }
          v55 = v43 - 2;
          if (v55)
          {
            v54 = 0;
            *((_DWORD *)v26 + 6) = v55;
            goto LABEL_123;
          }
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26, (void *)v8);
        }
        v54 = 0;
        goto LABEL_123;
      }
      break;
    }
    if (**((WebCore ***)this + 5) != v26 || (*((_WORD *)this + 14) & 0xF000) == 0x9000)
    {
      v10 = v94;
      goto LABEL_244;
    }
    v10 = v94;
    if ((*((_BYTE *)this + 22) & 8) != 0)
      goto LABEL_81;
LABEL_244:
    if ((_DWORD)v27)
    {
      v91 = 8 * v27;
      v92 = (uint64_t *)v28;
      do
      {
        result = *v92;
        *v92 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)v8);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        ++v92;
        v91 -= 8;
      }
      while (v91);
    }
    if (v28)
    {
      result = WTF::fastFree((WTF *)v28, (void *)v8);
      if (v26)
        goto LABEL_247;
    }
    else if (v26)
    {
      goto LABEL_247;
    }
LABEL_249:
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef(v10, (void *)v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::splitTextNodeContainingElement(WebCore::CompositeEditCommand *this, WebCore::Text *a2, int a3)
{
  uint64_t v6;
  WebCore::Node *v7;
  _QWORD *v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *result;
  WebCore::Node *v12;

  *((_DWORD *)a2 + 6) += 2;
  v6 = WTF::fastMalloc((WTF *)0x128);
  v7 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v7 + 6) += 2;
  v12 = v7;
  v8 = (_QWORD *)WebCore::EditCommand::EditCommand(v6, (uint64_t *)&v12, 59);
  v8[31] = 0;
  v8[32] = 0;
  *v8 = off_1E33A9870;
  v8[33] = 0;
  v8[34] = 0;
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  *(_QWORD *)v6 = off_1E33ADE48;
  *(_QWORD *)(v6 + 280) = a2;
  *(_DWORD *)(v6 + 288) = a3;
  v12 = (WebCore::Node *)v6;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v12);
  result = v12;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8))();
    else
      --*((_DWORD *)v12 + 2);
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::mergeIdenticalElements(WebCore::CompositeEditCommand *this, WebCore::Element *a2, WebCore::Element *a3)
{
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;
  void *v11;
  unsigned int *result;
  WebCore::Node *v13;

  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  if (*((WebCore::Element **)a2 + 7) != a3)
  {
    (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Element *, uint64_t))(*(_QWORD *)this + 184))(this, a3, 1);
    *((_DWORD *)a3 + 6) += 2;
    v13 = a3;
    WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v13, (uint64_t)a2);
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v6);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  v7 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x110);
  v8 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v8 + 6) += 2;
  v13 = v8;
  *(_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)v7, (uint64_t *)&v13, 59) = off_1E33A9E80;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  *(_QWORD *)v7 = off_1E33AD2D8;
  *((_QWORD *)v7 + 31) = a2;
  *((_QWORD *)v7 + 32) = a3;
  *((_QWORD *)v7 + 33) = 0;
  v13 = v7;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v13);
  result = (unsigned int *)v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
    else
      --*((_DWORD *)v13 + 2);
  }
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(a3, v11);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, v11);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::CompositeEditCommand::insertNodeBefore(WebCore::CompositeEditCommand *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void *v9;
  char v10;
  uint64_t v11;
  WebCore::Node *v12;
  void *v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  WebCore::Node *v18;

  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  if (WebCore::Node::computeEditability(v4, 0, 1) || (*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a1 + 16))(a1);
    v11 = WTF::fastMalloc((WTF *)0x110);
    v12 = *(WebCore::Node **)(*(_QWORD *)(a3 + 40) + 8);
    *((_DWORD *)v12 + 6) += 2;
    v18 = v12;
    *(_QWORD *)WebCore::EditCommand::EditCommand(v11, (uint64_t *)&v18, v10) = off_1E33A9E80;
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v13);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    *(_QWORD *)v11 = off_1E33ACFC8;
    v15 = *a2;
    *a2 = 0;
    *(_QWORD *)(v11 + 248) = v15;
    *(_DWORD *)(a3 + 24) += 2;
    *(_QWORD *)(v11 + 256) = a3;
    *(_DWORD *)(v11 + 264) = a4;
    v18 = (WebCore::Node *)v11;
    WebCore::CompositeEditCommand::applyCommandToComposite(a1, (uint64_t **)&v18);
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v18 + 8))();
      else
        --*((_DWORD *)v18 + 2);
    }
    v16 = 1;
    goto LABEL_13;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    return v16;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::insertTextIntoNode(WebCore::Node *this, WebCore::Text *a2, int a3, const WTF::String *a4)
{
  WebCore::CompositeEditCommand *v7;
  char v8;
  uint64_t v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;
  _DWORD *v13;
  WebCore::Node *v14;

  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v7 = this;
    *((_DWORD *)a2 + 6) += 2;
    v8 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 16))(this);
    v9 = WTF::fastMalloc((WTF *)0x110);
    v10 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
    *((_DWORD *)v10 + 6) += 2;
    v14 = v10;
    *(_QWORD *)WebCore::EditCommand::EditCommand(v9, (uint64_t *)&v14, v8) = off_1E33A9E80;
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v11);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    *(_QWORD *)v9 = off_1E33ACDD0;
    *(_QWORD *)(v9 + 248) = a2;
    *(_DWORD *)(v9 + 256) = a3;
    v13 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v13 += 2;
    *(_QWORD *)(v9 + 264) = v13;
    v14 = (WebCore::Node *)v9;
    WebCore::CompositeEditCommand::applyCommandToComposite(v7, (uint64_t **)&v14);
    this = v14;
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 8))();
      else
        --*((_DWORD *)v14 + 2);
    }
  }
  return this;
}

WebCore::Node *WebCore::BreakBlockquoteCommand::doApply(WebCore::Node *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  const WebCore::VisiblePosition *v4;
  void *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Node *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::Node *v25;
  int isLastVisiblePositionInNode;
  const WebCore::Node *v27;
  void *v28;
  VisiblePosition *v29;
  int v30;
  char v31;
  void *v32;
  void *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  const WebCore::Node *v36;
  void *v37;
  int isFirstVisiblePositionInNode;
  WTF *v39;
  WebCore::Node *v40;
  void *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  void *v44;
  WebCore::Node *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  WebCore::Node *v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  WebCore::Node *v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  WTF *v77;
  uint64_t v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  void *v81;
  WebCore::Node *v82;
  unint64_t i;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WebCore::Node *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  WebCore::Node *v99;
  int v100;
  char v101;
  char v102;
  WebCore::Node *v103;
  WTF *v104;
  char v105;
  void *v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  void *v109;
  WebCore::Node *v110;
  int v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  WebCore::Node *v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  BOOL v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WebCore::Node *v134;
  WebCore::Node *v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::Node *v138;
  WebCore::Node *v139;
  WebCore::Node *v140;
  WTF::StringImpl *v141;
  WebCore::Node *v142[2];
  WTF *v143;
  uint64_t v144;
  char v145;
  WebCore::Node *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  int v155;
  char v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  int v161;
  char v162;
  __int16 v163;
  char v164;
  uint64_t v165;
  WebCore::Node *v166;
  int v167;
  char v168;
  WebCore::Node *v169;
  int v170;
  char v171;
  char v172;

  if (!*((_BYTE *)this + 225))
    return this;
  v1 = (uint64_t)this;
  if (*((_BYTE *)this + 225) != 2)
    goto LABEL_5;
  this = WebCore::CompositeEditCommand::deleteSelection(this, 0, 0, 0, 1, 1);
  if (!*(_BYTE *)(v1 + 225))
    return this;
  if (*(_BYTE *)(v1 + 225) == 2)
  {
    v3 = v1 + 192;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 192), (uint64_t)&v169);
    v172 = 1;
  }
  else
  {
LABEL_5:
    v2 = *(unsigned __int8 *)(v1 + 224);
    v3 = v1 + 192;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 192), (uint64_t)&v169);
    v172 = 1;
    if (!v2)
    {
      v108 = v169;
      if (v169)
      {
        *((_DWORD *)v169 + 6) += 2;
        v146 = v108;
        LODWORD(v147) = v170;
        BYTE4(v147) = v171;
        LOBYTE(v148) = 0;
        if (!WebCore::inSameLine((WebCore *)&v169, (const WebCore::VisiblePosition *)&v146, v4))
          v172 = 0;
        v110 = v146;
        v146 = 0;
        if (v110)
        {
          if (*((_DWORD *)v110 + 6) == 2)
          {
            if ((*((_WORD *)v110 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v110, v109);
          }
          else
          {
            *((_DWORD *)v110 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::Position::downstream(v3, (WebCore::Node *)1, (uint64_t)&v166);
  WebCore::highestEnclosingNodeOfType((unsigned int *)&v166, WebCore::isMailBlockquote, 1, 0, &v165);
  v6 = v165;
  if (!v165)
  {
    v165 = 0;
    goto LABEL_422;
  }
  v7 = *(_WORD *)(v165 + 28);
  v165 = 0;
  if ((v7 & 8) == 0 || !*(_QWORD *)(v6 + 32))
    goto LABEL_420;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = bmalloc::api::isoAllocate();
  v12 = (WebCore::Node *)v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x101C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v13 = WebCore::HTMLNames::brTag;
  if (WebCore::HTMLNames::brTag)
    ++*(_DWORD *)WebCore::HTMLNames::brTag;
  *(_QWORD *)(v9 + 96) = v13;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33B4C28;
  v14 = v166;
  if (v166
    && (v15 = v168 & 7, v15 <= 4)
    && (((1 << v15) & 0x19) != 0 || (v14 = (WebCore::Node *)*((_QWORD *)v166 + 4)) != 0))
  {
    v16 = *((_DWORD *)v14 + 6);
    *((_DWORD *)v14 + 6) = v16 + 2;
    v17 = *((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v17)
      goto LABEL_29;
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 64) & 0xFFFFFFFFFFFFLL;
    if (!v18)
      goto LABEL_29;
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v18 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v19 = *(_DWORD *)(v18 + 120);
    if ((*(_BYTE *)((*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v17 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if (((v19 >> 26) & 1) != (*(_BYTE *)(v17 + 123) & 4) >> 2)
    {
      v20 = *(_QWORD *)(v1 + 16);
      v21 = bmalloc::api::isoAllocate();
      v22 = v21;
      *(_OWORD *)(v21 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v21 + 24) = 0x101C00000002;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = v20 + 96;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      ++*(_DWORD *)(v20 + 3324);
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      v23 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v21 + 96) = v23;
      *(_QWORD *)(v21 + 104) = 0;
      *(_QWORD *)v21 = off_1E33B9CC0;
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v21, 0xFFFFFFFFLL, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, (WTF::StringImpl **)&WebCore::autoAtomData, 0);
      WebCore::ContainerNode::appendChild(v22, v12, (uint64_t)&v146);
      if ((_BYTE)v148)
      {
        v24 = v147;
        v147 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v10);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      v16 = *((_DWORD *)v14 + 6) - 2;
      v25 = v12;
    }
    else
    {
LABEL_29:
      v25 = 0;
      v22 = v9;
    }
    if (v16)
    {
      *((_DWORD *)v14 + 6) = v16;
    }
    else if ((*((_WORD *)v14 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v14, v10);
    }
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25, v10);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
  }
  else
  {
    v22 = v9;
  }
  isLastVisiblePositionInNode = WebCore::isLastVisiblePositionInNode((WebCore *)&v169, (const WebCore::VisiblePosition *)v6, v11);
  if (WebCore::isFirstVisiblePositionInNode((WebCore *)&v169, (const WebCore::VisiblePosition *)v6, v27)
    && (isLastVisiblePositionInNode & 1) == 0)
  {
    *(_DWORD *)(v22 + 24) += 2;
    v146 = (WebCore::Node *)v22;
    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)v1, (uint64_t *)&v146, v6, 1);
    if (v146)
    {
      if (*((_DWORD *)v146 + 6) == 2)
      {
        if ((*((_WORD *)v146 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v146, v28);
      }
      else
      {
        *((_DWORD *)v146 + 6) -= 2;
      }
    }
LABEL_43:
    v30 = *(_DWORD *)(v22 + 24);
    *(_DWORD *)(v22 + 24) = v30 + 2;
    v31 = *(_BYTE *)(v1 + 226) & 2;
    v146 = (WebCore::Node *)v22;
    LODWORD(v147) = 0;
    BYTE4(v147) = 1;
    *(_DWORD *)(v22 + 24) = v30 + 6;
    v148 = v22;
    v149 = 0;
    v150 = 1;
    v151 = 0;
    v152 = 0;
    v153 &= 0xF0u;
    v154 = 0;
    v155 = 0;
    v156 &= 0xF0u;
    v157 = 0;
    v158 = 0;
    v159 &= 0xF0u;
    v160 = 0;
    v161 = 0;
    v162 &= 0xF0u;
    v163 = 1;
    v164 = v164 & 0xFD | v31;
    WebCore::VisibleSelection::validate((uint64_t)&v146, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v146);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v146);
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v32);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
    WebCore::CompositeEditCommand::rebalanceWhitespace((WebCore::CompositeEditCommand *)v1);
    goto LABEL_418;
  }
  *(_DWORD *)(v22 + 24) += 2;
  v146 = (WebCore::Node *)v22;
  WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)v1, (uint64_t *)&v146, v6);
  if (v146)
  {
    if (*((_DWORD *)v146 + 6) == 2)
    {
      if ((*((_WORD *)v146 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v146, v29);
    }
    else
    {
      *((_DWORD *)v146 + 6) -= 2;
    }
  }
  if (isLastVisiblePositionInNode)
    goto LABEL_43;
  if (!WebCore::lineBreakExistsAtVisiblePosition(&v169, v29))
    goto LABEL_51;
  WebCore::Position::next((uint64_t)&v166, 0, (uint64_t)&v146);
  v34 = v146;
  v146 = 0;
  v35 = v166;
  v166 = v34;
  if (!v35)
  {
LABEL_50:
    v167 = (int)v147;
    v168 = BYTE4(v147);
    goto LABEL_51;
  }
  if (*((_DWORD *)v35 + 6) != 2)
  {
    *((_DWORD *)v35 + 6) -= 2;
    goto LABEL_50;
  }
  if ((*((_WORD *)v35 + 15) & 0x400) != 0)
    goto LABEL_50;
  WebCore::Node::removedLastRef(v35, v33);
  v107 = v146;
  v167 = (int)v147;
  v168 = BYTE4(v147);
  v146 = 0;
  if (v107)
  {
    if (*((_DWORD *)v107 + 6) == 2)
    {
      if ((*((_WORD *)v107 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v107, v106);
    }
    else
    {
      *((_DWORD *)v107 + 6) -= 2;
    }
  }
  while (1)
  {
LABEL_51:
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v166, (uint64_t)&v146);
    LOBYTE(v148) = 1;
    WebCore::enclosingNodeOfType((uint64_t)&v166, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 1, (uint64_t *)&v143);
    isFirstVisiblePositionInNode = WebCore::isFirstVisiblePositionInNode((WebCore *)&v146, v143, v36);
    v39 = v143;
    v143 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v37);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    v40 = v146;
    v146 = 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 6) == 2)
      {
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v40, v37);
      }
      else
      {
        *((_DWORD *)v40 + 6) -= 2;
      }
    }
    if (!isFirstVisiblePositionInNode)
      break;
    WebCore::Position::previous((uint64_t)&v166, 0, (uint64_t)&v146);
    v42 = v146;
    v146 = 0;
    v43 = v166;
    v166 = v42;
    if (!v43)
      goto LABEL_61;
    if (*((_DWORD *)v43 + 6) != 2)
    {
      *((_DWORD *)v43 + 6) -= 2;
      goto LABEL_61;
    }
    if ((*((_WORD *)v43 + 15) & 0x400) != 0)
    {
LABEL_61:
      v167 = (int)v147;
      v168 = BYTE4(v147);
    }
    else
    {
      WebCore::Node::removedLastRef(v43, v41);
      v45 = v146;
      v167 = (int)v147;
      v168 = BYTE4(v147);
      v146 = 0;
      if (v45)
      {
        if (*((_DWORD *)v45 + 6) == 2)
        {
          if ((*((_WORD *)v45 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v45, v44);
        }
        else
        {
          *((_DWORD *)v45 + 6) -= 2;
        }
      }
    }
  }
  v46 = (uint64_t)v166;
  if (v166)
  {
    v48 = (uint64_t)v166 + 28;
    v47 = *((_WORD *)v166 + 14);
    v49 = *((_DWORD *)v166 + 6);
    *((_DWORD *)v166 + 6) = v49 + 2;
    if ((v47 & 2) != 0)
    {
      v50 = v49 + 4;
      *(_DWORD *)(v46 + 24) = v49 + 4;
      if ((v168 & 8) == 0 && ((v51 = v168 & 7, v51 == 4) || v51 == 2))
      {
        *(_DWORD *)(v46 + 24) = v49 + 6;
        if ((v47 & 1) != 0)
        {
          v116 = *(_QWORD *)(v46 + 80);
          if (v116)
            v53 = *(_DWORD *)(v116 + 4);
          else
            v53 = 0;
        }
        else if ((v47 & 4) != 0 && (v52 = *(_QWORD *)(v46 + 80)) != 0)
        {
          v53 = 0;
          do
          {
            ++v53;
            v52 = *(_QWORD *)(v52 + 56);
          }
          while (v52);
        }
        else
        {
          v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 208))(v46) ^ 1;
          v50 = *(_DWORD *)(v46 + 24) - 2;
        }
        if (v50)
        {
          *(_DWORD *)(v46 + 24) = v50;
        }
        else if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v46, v37);
        }
      }
      else
      {
        v53 = v167;
      }
      v54 = *(_QWORD *)(v46 + 80);
      if (v54)
        v55 = *(_DWORD *)(v54 + 4);
      else
        v55 = 0;
      if (v53 >= v55)
      {
        if (v54 && (*(_WORD *)v48 & 4) != 0 || (v54 = *(_QWORD *)(v46 + 56)) != 0)
        {
LABEL_102:
          *(_DWORD *)(v54 + 24) += 2;
          if (*(_DWORD *)(v46 + 24) == 2)
          {
            if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v46, v37);
          }
          else
          {
            *(_DWORD *)(v46 + 24) -= 2;
          }
        }
        else
        {
          v62 = v46;
          while (1)
          {
            v62 = *(_QWORD *)(v62 + 32);
            if (!v62)
              break;
            v54 = *(_QWORD *)(v62 + 56);
            if (v54)
              goto LABEL_102;
          }
LABEL_124:
          v54 = v46;
        }
      }
      else
      {
        if ((v168 & 8) != 0 || (v56 = v168 & 7, v56 != 4) && v56 != 2)
        {
          v61 = v167;
          goto LABEL_106;
        }
        v57 = v166;
        v54 = v46;
        if (v166)
        {
          v58 = *((_DWORD *)v166 + 6);
          *((_DWORD *)v166 + 6) = v58 + 2;
          v59 = *((_WORD *)v57 + 14);
          if ((v59 & 1) != 0)
          {
            v124 = *((_QWORD *)v57 + 10);
            v61 = v124 ? *(_DWORD *)(v124 + 4) : 0;
          }
          else if ((v59 & 4) != 0 && (v60 = *((_QWORD *)v57 + 10)) != 0)
          {
            v61 = 0;
            do
            {
              ++v61;
              v60 = *(_QWORD *)(v60 + 56);
            }
            while (v60);
          }
          else
          {
            v61 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v57 + 208))(v57) ^ 1;
            v58 = *((_DWORD *)v57 + 6) - 2;
          }
          if (v58)
          {
            *((_DWORD *)v57 + 6) = v58;
          }
          else if ((*((_WORD *)v57 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v57, v37);
          }
LABEL_106:
          v54 = v46;
          if (v61 >= 1)
          {
            if ((v168 & 8) == 0 && ((v63 = v168 & 7, v63 != 4) ? (v64 = v63 == 2) : (v64 = 1), v64))
            {
              v65 = v166;
              if (v166)
              {
                v66 = *((_DWORD *)v166 + 6);
                *((_DWORD *)v166 + 6) = v66 + 2;
                v67 = *((_WORD *)v65 + 14);
                if ((v67 & 1) != 0)
                {
                  v133 = *((_QWORD *)v65 + 10);
                  if (v133)
                    v69 = *(_DWORD *)(v133 + 4);
                  else
                    v69 = 0;
                }
                else if ((v67 & 4) != 0 && (v68 = *((_QWORD *)v65 + 10)) != 0)
                {
                  v69 = 0;
                  do
                  {
                    ++v69;
                    v68 = *(_QWORD *)(v68 + 56);
                  }
                  while (v68);
                }
                else
                {
                  v69 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v65 + 208))(v65) ^ 1;
                  v66 = *((_DWORD *)v65 + 6) - 2;
                }
                if (v66)
                {
                  *((_DWORD *)v65 + 6) = v66;
                }
                else if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v65, v37);
                }
              }
              else
              {
                v69 = 0;
              }
            }
            else
            {
              v69 = v167;
            }
            WebCore::CompositeEditCommand::splitTextNode((WebCore::CompositeEditCommand *)v1, (WebCore::Text *)v46, v69);
            goto LABEL_124;
          }
        }
      }
LABEL_125:
      if (*(_DWORD *)(v46 + 24) == 2)
      {
        if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v46, v37);
      }
      else
      {
        *(_DWORD *)(v46 + 24) -= 2;
      }
      goto LABEL_127;
    }
  }
  else
  {
    v48 = 28;
  }
  if ((v168 & 8) == 0 && ((v111 = v168 & 7, v111 == 4) || v111 == 2))
  {
    if (!v46)
    {
      v54 = 0;
      goto LABEL_127;
    }
    v112 = *(_DWORD *)(v46 + 24);
    *(_DWORD *)(v46 + 24) = v112 + 2;
    v113 = *(_WORD *)(v46 + 28);
    if ((v113 & 1) != 0)
    {
      v136 = *(_QWORD *)(v46 + 80);
      if (v136)
        v115 = *(_DWORD *)(v136 + 4);
      else
        v115 = 0;
    }
    else if ((v113 & 4) != 0 && (v114 = *(_QWORD *)(v46 + 80)) != 0)
    {
      v115 = 0;
      do
      {
        ++v115;
        v114 = *(_QWORD *)(v114 + 56);
      }
      while (v114);
    }
    else
    {
      v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 208))(v46) ^ 1;
      v112 = *(_DWORD *)(v46 + 24) - 2;
    }
    if (v112)
    {
      *(_DWORD *)(v46 + 24) = v112;
    }
    else if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v46, v37);
    }
  }
  else
  {
    v115 = v167;
  }
  if (v115 >= 1)
  {
    if ((v168 & 8) == 0 && ((v117 = v168 & 7, v117 != 4) ? (v118 = v117 == 2) : (v118 = 1), v118))
    {
      v119 = v166;
      if (v166)
      {
        v120 = *((_DWORD *)v166 + 6);
        *((_DWORD *)v166 + 6) = v120 + 2;
        v121 = *((_WORD *)v119 + 14);
        if ((v121 & 1) != 0)
        {
          v137 = *((_QWORD *)v119 + 10);
          if (v137)
            v123 = *(_DWORD *)(v137 + 4);
          else
            v123 = 0;
        }
        else if ((v121 & 4) != 0 && (v122 = *((_QWORD *)v119 + 10)) != 0)
        {
          v123 = 0;
          do
          {
            ++v123;
            v122 = *(_QWORD *)(v122 + 56);
          }
          while (v122);
        }
        else
        {
          v123 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v119 + 208))(v119) ^ 1;
          v120 = *((_DWORD *)v119 + 6) - 2;
        }
        if (v120)
        {
          *((_DWORD *)v119 + 6) = v120;
        }
        else if ((*((_WORD *)v119 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v119, v37);
        }
      }
      else
      {
        v123 = 0;
      }
    }
    else
    {
      v123 = v167;
    }
    v125 = *(_WORD *)v48;
    if (v46 && (v125 & 4) != 0)
    {
      v54 = *(_QWORD *)(v46 + 80);
      if (v123 && v54)
      {
        v126 = v123 - 1;
        do
        {
          v54 = *(_QWORD *)(v54 + 56);
          v128 = v126-- != 0;
        }
        while (v54 && v128);
      }
      if (v54)
        goto LABEL_383;
    }
    if ((v125 & 4) != 0 && (v54 = *(_QWORD *)(v46 + 80)) != 0 || (v54 = *(_QWORD *)(v46 + 56)) != 0)
    {
LABEL_383:
      *(_DWORD *)(v54 + 24) += 2;
      goto LABEL_125;
    }
    v129 = v46;
    while (1)
    {
      v129 = *(_QWORD *)(v129 + 32);
      if (!v129)
        break;
      v54 = *(_QWORD *)(v129 + 56);
      if (v54)
        goto LABEL_383;
    }
  }
  v54 = v46;
LABEL_127:
  v70 = *(_WORD *)(v6 + 28);
  if ((v70 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(v54 + 40) == v6 && (*(_WORD *)(v54 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v54 + 22) & 8) != 0)
      goto LABEL_138;
    goto LABEL_410;
  }
  if ((v70 & 4) == 0
    || !*(_QWORD *)(v6 + 80)
    || ((*(unsigned __int8 *)(v54 + 22) ^ *(unsigned __int8 *)(v6 + 22)) & 8) != 0)
  {
    goto LABEL_410;
  }
  v71 = v54;
  do
    v71 = *(_QWORD *)(v71 + 32);
  while (v71 != v6 && v71 != 0);
  if (!v71)
  {
LABEL_410:
    WebCore::firstPositionInOrBeforeNode(v54, (WebCore::Node *)v37, (uint64_t)v142);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v142, (uint64_t)&v143);
    v145 = 1;
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v146, (const WebCore::VisiblePosition *)&v143, (*(unsigned __int8 *)(v1 + 226) >> 1) & 1);
    WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v146);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v146);
    if (v143)
    {
      if (*((_DWORD *)v143 + 6) == 2)
      {
        if ((*((_WORD *)v143 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v143, v5);
      }
      else
      {
        *((_DWORD *)v143 + 6) -= 2;
      }
    }
    v134 = v142[0];
    v142[0] = 0;
    if (v134)
    {
      if (*((_DWORD *)v134 + 6) == 2)
      {
        if ((*((_WORD *)v134 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v134, v5);
      }
      else
      {
        *((_DWORD *)v134 + 6) -= 2;
      }
    }
    goto LABEL_416;
  }
LABEL_138:
  v143 = 0;
  v144 = 0;
  v73 = *(_QWORD *)(v54 + 32);
  if (v73 && (*(_WORD *)(v73 + 28) & 8) != 0)
  {
    *(_DWORD *)(v73 + 24) += 2;
    while (v73 != v6)
    {
      v74 = v73;
      *(_DWORD *)(v73 + 24) += 2;
      v146 = (WebCore::Node *)v73;
      LODWORD(v75) = HIDWORD(v144);
      if (HIDWORD(v144) == (_DWORD)v144)
      {
        v76 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v143, HIDWORD(v144) + 1, (unint64_t)&v146);
        v75 = HIDWORD(v144);
        v77 = v143;
        v78 = *(_QWORD *)v76;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v77 + v75) = v78;
      }
      else
      {
        v146 = 0;
        *((_QWORD *)v143 + HIDWORD(v144)) = v73;
      }
      HIDWORD(v144) = v75 + 1;
      v79 = v146;
      v146 = 0;
      if (v79)
      {
        if (*((_DWORD *)v79 + 6) == 2)
        {
          if ((*((_WORD *)v79 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v79, v37);
        }
        else
        {
          *((_DWORD *)v79 + 6) -= 2;
        }
      }
      v73 = *(_QWORD *)(v73 + 32);
      if (v73)
      {
        if ((*(_WORD *)(v73 + 28) & 8) != 0)
          *(_DWORD *)(v73 + 24) += 2;
        else
          v73 = 0;
      }
      if (*(_DWORD *)(v74 + 24) == 2)
      {
        if ((*(_WORD *)(v74 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v74, v37);
      }
      else
      {
        *(_DWORD *)(v74 + 24) -= 2;
      }
      if (!v73)
        goto LABEL_164;
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v37);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_164:
  WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)v6, v142);
  v80 = v142[0];
  *((_DWORD *)v142[0] + 6) += 2;
  v146 = v80;
  WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)v1, (uint64_t *)&v146, v22);
  if (v146)
  {
    if (*((_DWORD *)v146 + 6) == 2)
    {
      if ((*((_WORD *)v146 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v146, v81);
    }
    else
    {
      *((_DWORD *)v146 + 6) -= 2;
    }
  }
  v82 = v142[0];
  *((_DWORD *)v142[0] + 6) += 2;
  for (i = HIDWORD(v144); i; v82 = v146)
  {
    v84 = i--;
    if (i >= HIDWORD(v144))
      goto LABEL_462;
    WebCore::Element::cloneElementWithoutChildren(*((WebCore::Element **)v143 + i), &v146);
    if ((~*((unsigned __int16 *)v146 + 14) & 0x18) == 0
      && *(_QWORD *)(*((_QWORD *)v146 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
    {
      v86 = v54;
      v87 = v84 - 2;
      if (v84 >= 2)
      {
        if (v87 >= HIDWORD(v144))
        {
          __break(0xC471u);
          JUMPOUT(0x195A881F8);
        }
        v86 = *((_QWORD *)v143 + v87);
      }
      if (v86)
      {
        *(_DWORD *)(v86 + 24) += 2;
        while (1)
        {
          v88 = v86;
          if ((*(_WORD *)(v86 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v86 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
          {
            break;
          }
          v86 = *(_QWORD *)(v86 + 56);
          if (v86)
            *(_DWORD *)(v86 + 24) += 2;
          if (*(_DWORD *)(v88 + 24) == 2)
          {
            if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v88, v85);
          }
          else
          {
            *(_DWORD *)(v88 + 24) -= 2;
          }
          if (!v86)
            goto LABEL_195;
        }
        v89 = *(_QWORD *)(v86 + 64) & 0xFFFFFFFFFFFFLL;
        if (v89 && *(_BYTE *)((*(_QWORD *)(v88 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
        {
          v138 = v146;
          if (!*(_BYTE *)(v89 + 260))
          {
            WebCore::RenderListItem::updateValueNow((WebCore::RenderListItem *)v89);
            if (!*(_BYTE *)(v89 + 260))
            {
              std::__throw_bad_optional_access[abi:sn180100]();
              goto LABEL_462;
            }
          }
          WTF::AtomString::number((WTF::AtomString *)*(unsigned int *)(v89 + 256));
          WebCore::CompositeEditCommand::setNodeAttribute((WebCore::CompositeEditCommand *)v1, v138, (const WebCore::QualifiedName *)&WebCore::HTMLNames::startAttr, (const WTF::AtomString *)&v141);
          v90 = v141;
          v141 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v85);
            else
              *(_DWORD *)v90 -= 2;
          }
        }
        if (*(_DWORD *)(v88 + 24) == 2)
        {
          if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v88, v85);
        }
        else
        {
          *(_DWORD *)(v88 + 24) -= 2;
        }
      }
    }
LABEL_195:
    v91 = v146;
    *((_DWORD *)v146 + 6) += 2;
    v140 = v82;
    v141 = v91;
    WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v1, (uint64_t *)&v141, (uint64_t *)&v140);
    if (v140)
    {
      if (*((_DWORD *)v140 + 6) == 2)
      {
        if ((*((_WORD *)v140 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v140, v92);
      }
      else
      {
        *((_DWORD *)v140 + 6) -= 2;
      }
    }
    if (v141)
    {
      if (*((_DWORD *)v141 + 6) == 2)
      {
        if ((*((_WORD *)v141 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v141, v92);
      }
      else
      {
        *((_DWORD *)v141 + 6) -= 2;
      }
    }
  }
  WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(v1, (WebCore::Node *)v54, 0, v82);
  if (HIDWORD(v144))
  {
    v94 = *(_QWORD *)v143;
    if (*(_QWORD *)v143)
      *(_DWORD *)(v94 + 24) += 2;
    v95 = *((_QWORD *)v82 + 4);
    if (!v95 || (*(_WORD *)(v95 + 28) & 8) == 0)
    {
      v96 = 0;
      goto LABEL_243;
    }
    *(_DWORD *)(v95 + 24) += 2;
    if (v94 == v6 || !v94)
    {
      v96 = v95;
LABEL_243:
      v97 = v94;
    }
    else
    {
      do
      {
        WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(v1, *(WebCore::Node **)(v94 + 56), 0, (WebCore::Element *)v95);
        v97 = *(_QWORD *)(v94 + 32);
        if (v97)
        {
          if ((*(_WORD *)(v97 + 28) & 8) != 0)
            *(_DWORD *)(v97 + 24) += 2;
          else
            v97 = 0;
        }
        if (*(_DWORD *)(v94 + 24) == 2)
        {
          if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v94, v93);
        }
        else
        {
          *(_DWORD *)(v94 + 24) -= 2;
        }
        v96 = *(_QWORD *)(v95 + 32);
        if (v96)
        {
          if ((*(_WORD *)(v96 + 28) & 8) != 0)
            *(_DWORD *)(v96 + 24) += 2;
          else
            v96 = 0;
        }
        if (*(_DWORD *)(v95 + 24) == 2)
        {
          if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v95, v93);
        }
        else
        {
          *(_DWORD *)(v95 + 24) -= 2;
        }
        if (!v97)
          break;
        if (v97 == v6)
          break;
        v95 = v96;
        v94 = v97;
      }
      while (v96);
      if (!HIDWORD(v144))
      {
LABEL_462:
        __break(0xC471u);
        JUMPOUT(0x195A881E0);
      }
      v94 = *(_QWORD *)v143;
    }
    if (v94)
      *(_DWORD *)(v94 + 24) += 2;
    if (!*(_QWORD *)(v94 + 80))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v94, 1);
    if (*(_DWORD *)(v94 + 24) == 2)
    {
      if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v94, v93);
    }
    else
    {
      *(_DWORD *)(v94 + 24) -= 2;
    }
    if (v96)
    {
      if (*(_DWORD *)(v96 + 24) == 2)
      {
        if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v96, v93);
      }
      else
      {
        *(_DWORD *)(v96 + 24) -= 2;
      }
    }
    if (v97)
    {
      if (*(_DWORD *)(v97 + 24) == 2)
      {
        if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v97, v93);
      }
      else
      {
        *(_DWORD *)(v97 + 24) -= 2;
      }
    }
  }
  WebCore::CompositeEditCommand::addBlockPlaceholderIfNeeded((unsigned int *)v1, v142[0], (uint64_t *)&v139);
  v99 = v139;
  v139 = 0;
  if (v99)
  {
    if (*((_DWORD *)v99 + 6) == 2)
    {
      if ((*((_WORD *)v99 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v99, v98);
    }
    else
    {
      *((_DWORD *)v99 + 6) -= 2;
    }
  }
  if ((*(_WORD *)(v22 + 28) & 4) != 0
    && *(_QWORD *)(v22 + 80)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 208))(v22) & 1) != 0)
  {
    v105 = *(_WORD *)(v22 + 28);
    v100 = *(_DWORD *)(v22 + 24) + 2;
    *(_DWORD *)(v22 + 24) = v100;
    if ((v105 & 1) != 0)
      v101 = 0;
    else
      v101 = 3;
  }
  else
  {
    v100 = *(_DWORD *)(v22 + 24) + 2;
    *(_DWORD *)(v22 + 24) = v100;
    v101 = 1;
  }
  v102 = *(_BYTE *)(v1 + 226) & 2;
  v146 = (WebCore::Node *)v22;
  LODWORD(v147) = 0;
  BYTE4(v147) = v101;
  *(_DWORD *)(v22 + 24) = v100 + 4;
  v148 = v22;
  v149 = 0;
  v150 = v101;
  v151 = 0;
  v152 = 0;
  v153 &= 0xF0u;
  v154 = 0;
  v155 = 0;
  v156 &= 0xF0u;
  v157 = 0;
  v158 = 0;
  v159 &= 0xF0u;
  v160 = 0;
  v161 = 0;
  v162 &= 0xF0u;
  v163 = 1;
  v164 = v164 & 0xFD | v102;
  WebCore::VisibleSelection::validate((uint64_t)&v146, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v146);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v146);
  WebCore::CompositeEditCommand::rebalanceWhitespace((WebCore::CompositeEditCommand *)v1);
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22, v5);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
  if (*((_DWORD *)v82 + 6) == 2)
  {
    if ((*((_WORD *)v82 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v82, v5);
  }
  else
  {
    *((_DWORD *)v82 + 6) -= 2;
  }
  v103 = v142[0];
  v142[0] = 0;
  if (v103)
  {
    if (*((_DWORD *)v103 + 6) == 2)
    {
      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v103, v5);
    }
    else
    {
      *((_DWORD *)v103 + 6) -= 2;
    }
  }
  if (HIDWORD(v144))
  {
    v130 = v143;
    v131 = 8 * HIDWORD(v144);
    do
    {
      v132 = *(_QWORD *)v130;
      *(_QWORD *)v130 = 0;
      if (v132)
      {
        if (*(_DWORD *)(v132 + 24) == 2)
        {
          if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v132, v5);
        }
        else
        {
          *(_DWORD *)(v132 + 24) -= 2;
        }
      }
      v130 = (WTF *)((char *)v130 + 8);
      v131 -= 8;
    }
    while (v131);
  }
  v104 = v143;
  if (v143)
  {
    v143 = 0;
    LODWORD(v144) = 0;
    WTF::fastFree(v104, v5);
    if (!v54)
      goto LABEL_418;
  }
  else if (!v54)
  {
    goto LABEL_418;
  }
LABEL_416:
  if (*(_DWORD *)(v54 + 24) == 2)
  {
    if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v54, v5);
  }
  else
  {
    *(_DWORD *)(v54 + 24) -= 2;
  }
LABEL_418:
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22, v5);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
LABEL_420:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
LABEL_422:
  v135 = v166;
  v166 = 0;
  if (v135)
  {
    if (*((_DWORD *)v135 + 6) == 2)
    {
      if ((*((_WORD *)v135 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v135, v5);
    }
    else
    {
      *((_DWORD *)v135 + 6) -= 2;
    }
  }
  this = v169;
  v169 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this, v5);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

WebCore::Node *WebCore::CompositeEditCommand::deleteSelection(WebCore::Node *this, char a2, char a3, char a4, char a5, char a6)
{
  WebCore::CompositeEditCommand *v11;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  WebCore::Node *v17;
  uint64_t *v18;

  if (*((_BYTE *)this + 225) == 2)
  {
    v11 = this;
    v12 = (WebCore::Node *)*((_QWORD *)this + 2);
    *((_DWORD *)v12 + 6) += 2;
    v17 = v12;
    v13 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 16))(this);
    v14 = WTF::fastMalloc((WTF *)0x248);
    if (v13 == 8)
      v15 = 8;
    else
      v15 = 9;
    WebCore::DeleteSelectionCommand::DeleteSelectionCommand(v14, (uint64_t *)&v17, a2, a3, a4, a5, a6, v15);
    v18 = v16;
    WebCore::CompositeEditCommand::applyCommandToComposite(v11, &v18);
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(void))(*v18 + 8))();
      else
        --*((_DWORD *)v18 + 2);
    }
    this = v17;
    v17 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
  }
  return this;
}

void WebCore::CompositeEditCommand::rebalanceWhitespace(WebCore::CompositeEditCommand *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  char v28;

  v2 = *((_QWORD *)this + 16);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v9 = v2;
  v10 = *((_DWORD *)this + 34);
  v11 = *((_BYTE *)this + 140);
  v3 = *((_QWORD *)this + 18);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v12 = v3;
  v13 = *((_DWORD *)this + 38);
  v14 = *((_BYTE *)this + 156);
  v4 = *((_QWORD *)this + 20);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v15 = v4;
  v16 = *((_DWORD *)this + 42);
  v17 = *((_BYTE *)this + 172);
  v5 = *((_QWORD *)this + 22);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v18 = v5;
  v19 = *((_DWORD *)this + 46);
  v20 = *((_BYTE *)this + 188);
  v6 = *((_QWORD *)this + 24);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v21 = v6;
  v22 = *((_DWORD *)this + 50);
  v23 = *((_BYTE *)this + 204);
  v7 = *((_QWORD *)this + 26);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v24 = v7;
  v25 = *((_DWORD *)this + 54);
  v26 = *((_BYTE *)this + 220);
  v27 = *((_WORD *)this + 112);
  v28 = *((_BYTE *)this + 226);
  v8 = HIBYTE(v27);
  if (HIBYTE(v27))
  {
    WebCore::CompositeEditCommand::rebalanceWhitespaceAt(this, (const WebCore::Position *)&v21);
    if (v8 == 2)
      WebCore::CompositeEditCommand::rebalanceWhitespaceAt(this, (const WebCore::Position *)&v24);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v9);
}

unsigned int *WebCore::CompositeEditCommand::insertNodeAfter(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  void *v5;
  WebCore::Node *v6;

  v3 = *(_QWORD *)(a3 + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 2;
    if (*(_QWORD *)(v3 + 88) == a3)
    {
      *(_DWORD *)(v3 + 24) = v4 + 4;
      v6 = (WebCore::Node *)v3;
      WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)result, a2, (uint64_t *)&v6);
      result = (unsigned int *)v6;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef(v6, v5);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
    }
    else
    {
      result = (unsigned int *)WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)result, a2, *(_QWORD *)(a3 + 56), 1);
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(uint64_t this, WebCore::Node *a2, WebCore::Node *a3, WebCore::Element *a4)
{
  WebCore::Node *v6;
  WebCore::CompositeEditCommand *v7;
  uint64_t v8;
  WTF *v9;
  unint64_t v10;
  WebCore::Node **v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v21;
  WebCore::Node *v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[88];

  v23 = (WTF *)v25;
  v24 = 11;
  *((_DWORD *)a4 + 6) += 2;
  if (a2)
  {
    v6 = a2;
    if (a2 != a3)
    {
      v7 = (WebCore::CompositeEditCommand *)this;
      LODWORD(v8) = 0;
      v9 = (WTF *)v25;
      do
      {
        v10 = v8;
        if ((_DWORD)v8 == (_DWORD)v24)
        {
          v13 = v8 + 1;
          v14 = v10 + (v10 >> 2);
          if (v14 >= 0x10)
            v15 = v14 + 1;
          else
            v15 = 16;
          if (v15 <= v13)
            v16 = v10 + 1;
          else
            v16 = v15;
          if (v16 < 0xC)
          {
            v23 = (WTF *)v25;
            LODWORD(v24) = 11;
            v17 = (WTF *)v25;
          }
          else
          {
            if (v16 >> 29)
            {
              __break(0xC471u);
              return this;
            }
            v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16));
            LODWORD(v24) = v16;
            v23 = v17;
          }
          this = (uint64_t)memcpy(v17, v9, 8 * v10);
          if (v25 != (_BYTE *)v9)
          {
            if (v23 == v9)
            {
              v23 = 0;
              LODWORD(v24) = 0;
            }
            this = WTF::fastFree(v9, a2);
          }
          LODWORD(v8) = HIDWORD(v24);
          v9 = v23;
          v11 = (WebCore::Node **)((char *)v23 + 8 * HIDWORD(v24));
        }
        else
        {
          v11 = (WebCore::Node **)((char *)v9 + 8 * v8);
        }
        *((_DWORD *)v6 + 6) += 2;
        *v11 = v6;
        v8 = (v8 + 1);
        HIDWORD(v24) = v8;
        v6 = (WebCore::Node *)*((_QWORD *)v6 + 7);
        if (v6)
          v12 = v6 == a3;
        else
          v12 = 1;
      }
      while (!v12);
      if ((_DWORD)v8)
      {
        v18 = 8 * v8;
        do
        {
          (*(void (**)(WebCore::CompositeEditCommand *, _QWORD, uint64_t))(*(_QWORD *)v7 + 184))(v7, *(_QWORD *)v9, 1);
          *((_DWORD *)a4 + 6) += 2;
          v22 = a4;
          WebCore::CompositeEditCommand::appendNode(v7, (uint64_t *)v9, (uint64_t *)&v22);
          this = (uint64_t)v22;
          if (v22)
          {
            if (*((_DWORD *)v22 + 6) == 2)
            {
              if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                this = (uint64_t)WebCore::Node::removedLastRef(v22, a2);
            }
            else
            {
              *((_DWORD *)v22 + 6) -= 2;
            }
          }
          v9 = (WTF *)((char *)v9 + 8);
          v18 -= 8;
        }
        while (v18);
      }
    }
  }
  if (*((_DWORD *)a4 + 6) == 2)
  {
    if ((*((_WORD *)a4 + 15) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef(a4, a2);
  }
  else
  {
    *((_DWORD *)a4 + 6) -= 2;
  }
  v19 = v23;
  if (HIDWORD(v24))
  {
    v21 = 8 * HIDWORD(v24);
    do
    {
      this = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
      v21 -= 8;
    }
    while (v21);
    v19 = v23;
  }
  if (v25 != (_BYTE *)v19 && v19 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    return WTF::fastFree(v19, a2);
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::addBlockPlaceholderIfNeeded@<X0>(unsigned int *this@<X0>, WebCore::Element *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::CompositeEditCommand *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WebCore::Node *v13;

  if (!a2)
  {
    *a3 = 0;
    return this;
  }
  v5 = (WebCore::CompositeEditCommand *)this;
  v6 = *((_QWORD *)this + 2);
  *(_DWORD *)(v6 + 24) += 2;
  this = (unsigned int *)WebCore::Document::updateLayout(v6, 2u, 0);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v8 = WebCore::ScriptDisallowedScope::s_count++;
  v9 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v9)
    goto LABEL_14;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_25;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
  {
LABEL_14:
    *a3 = 0;
    goto LABEL_15;
  }
  v10 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v10 + 1;
  if (*(_DWORD *)(v9 + 164))
  {
    if (*(_BYTE *)(v9 + 46) != 19
      || (v11 = *(unsigned int *)(v9 + 64), v11 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32))
      && *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32)) + 8))
    {
      *a3 = 0;
      if (v10 != -1)
      {
        *(_DWORD *)(v9 + 16) = v10;
LABEL_15:
        WebCore::ScriptDisallowedScope::s_count = v8;
        return this;
      }
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x195A88924);
    }
  }
  if (v10 == -1)
    goto LABEL_25;
  *(_DWORD *)(v9 + 16) = v10;
  WebCore::ScriptDisallowedScope::s_count = v8;
  *((_DWORD *)a2 + 6) += 2;
  v13 = a2;
  WebCore::CompositeEditCommand::appendBlockPlaceholder(v5, &v13, a3);
  this = (unsigned int *)v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v13, v12);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::ChangeListTypeCommand::listConversionType(WebCore::ChangeListTypeCommand *this, WebCore::Document *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  WebCore::Node *v16;
  unsigned __int8 v17;

  v3 = *((_QWORD *)this + 66);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_13;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::listConversionTypeForSelection((unsigned int *)&v15, (const WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 56));
  v8 = v17;
  if (v17)
  {
    v2 = v15;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v7);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
  }
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, v5);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v5;
    v15 = v13;
    WTF::ensureOnMainThread();
    v14 = v15;
    v15 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  if (v8)
  {
    v11 = 1;
  }
  else
  {
LABEL_13:
    v11 = 0;
    v2 = 0;
  }
  return v2 | (v11 << 8);
}

unsigned int *WebCore::listConversionTypeForSelection(unsigned int *this, const WebCore::VisibleSelection *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  WebCore::Node *v13;
  char *v14;
  WebCore::Node *v15;

  v2 = (uint64_t)this;
  v3 = (WebCore::Node *)*((_QWORD *)a2 + 8);
  if (v3)
  {
    v4 = *((_BYTE *)a2 + 76) & 7;
    if (v4 > 4)
    {
      v3 = 0;
    }
    else if (((1 << v4) & 0x19) == 0)
    {
      v3 = (WebCore::Node *)*((_QWORD *)v3 + 4);
    }
  }
  v5 = *((_QWORD *)a2 + 10);
  if (!v5)
    goto LABEL_44;
  v6 = *((_BYTE *)a2 + 92) & 7;
  if (v6 > 4)
    goto LABEL_44;
  if (((1 << v6) & 0x19) != 0)
  {
    if (!v3)
      goto LABEL_44;
  }
  else
  {
    v5 = *(_QWORD *)(v5 + 32);
    if (!v3)
      goto LABEL_44;
  }
  if (!v5)
    goto LABEL_44;
  if (v3 != (WebCore::Node *)v5)
  {
    v9 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v3);
    this = (unsigned int *)WebCore::depth<(WebCore::TreeType)2>(v5);
    v10 = (char *)this - v9;
    v11 = v9 >= (unint64_t)this;
    v12 = v9 - (_QWORD)this;
    if (v9 >= (unint64_t)this)
      v13 = v3;
    else
      v13 = (WebCore::Node *)v5;
    if (v11)
      v3 = (WebCore::Node *)v5;
    if (v11)
      v14 = (char *)v12;
    else
      v14 = v10;
    for (; v14; --v14)
    {
      this = (unsigned int *)WebCore::Node::parentInComposedTree(v13);
      v13 = (WebCore::Node *)this;
    }
    if (v13 == v3)
    {
      v13 = v3;
    }
    else
    {
      do
      {
        v13 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v13);
        this = (unsigned int *)WebCore::Node::parentInComposedTree(v3);
        v3 = (WebCore::Node *)this;
      }
      while (v13 != (WebCore::Node *)this);
    }
    v3 = v13;
    if (!v13)
      goto LABEL_14;
  }
  if ((*((_WORD *)v3 + 14) & 0x10) == 0
    || (v7 = *(_QWORD *)(*((_QWORD *)v3 + 12) + 24), v8 = *(_QWORD *)(WebCore::HTMLNames::ulTag + 24), v7 != v8)
    && v7 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
  {
LABEL_14:
    this = WebCore::enclosingList((unsigned int *)v3, a2, &v15);
    v3 = v15;
    if (v15)
    {
      v7 = *(_QWORD *)(*((_QWORD *)v15 + 12) + 24);
      v8 = *(_QWORD *)(WebCore::HTMLNames::ulTag + 24);
      goto LABEL_17;
    }
LABEL_44:
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 16) = 0;
    return this;
  }
  *((_DWORD *)v3 + 6) += 2;
LABEL_17:
  if (v7 == v8)
  {
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = v3;
LABEL_23:
    *(_BYTE *)(v2 + 16) = 1;
    return this;
  }
  if (v7 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
  {
    *(_BYTE *)v2 = 1;
    *(_QWORD *)(v2 + 8) = v3;
    goto LABEL_23;
  }
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 16) = 0;
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v3, a2);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return this;
}

unsigned int *WebCore::ChangeListTypeCommand::doApply(WebCore::ChangeListTypeCommand *this)
{
  unsigned int *result;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  WebCore::Node *v23[2];
  char v24;
  WebCore::Node *v25[13];
  unsigned int v26;
  WebCore::Node *v27;
  char v28;

  result = WebCore::listConversionTypeForSelection(&v26, (WebCore::ChangeListTypeCommand *)((char *)this + 128));
  if (!v28)
    return result;
  v4 = v27;
  if (v26 != *((unsigned __int8 *)this + 280))
  {
    if (!v27)
      return result;
    v13 = *((_DWORD *)v27 + 6) - 2;
    if (*((_DWORD *)v27 + 6) != 2)
      goto LABEL_25;
    if ((*((_WORD *)v27 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v27, v3);
    return result;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = v5 + 96;
  if ((_BYTE)v26)
  {
    v7 = bmalloc::api::isoAllocate();
    v10 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v7 + 24) = 0x101C00000002;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v6;
    v11 = 0uLL;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v5 + 3324);
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    v12 = WebCore::HTMLNames::ulTag;
    if (WebCore::HTMLNames::ulTag)
      ++*(_DWORD *)WebCore::HTMLNames::ulTag;
    *(_QWORD *)(v7 + 96) = v12;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)v7 = off_1E33D09E0;
  }
  else
  {
    v14 = bmalloc::api::isoAllocate();
    v10 = v14;
    *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v14 + 24) = 0x101C00000002;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v6;
    v11 = 0uLL;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    ++*(_DWORD *)(v5 + 3324);
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    v15 = WebCore::HTMLNames::olTag;
    if (WebCore::HTMLNames::olTag)
      ++*(_DWORD *)WebCore::HTMLNames::olTag;
    *(_QWORD *)(v14 + 96) = v15;
    *(_QWORD *)(v14 + 104) = 0;
    *(_QWORD *)v14 = off_1E33C7068;
    *(_BYTE *)(v14 + 112) = 0;
    *(_BYTE *)(v14 + 116) = 0;
    *(_BYTE *)(v14 + 120) = 0;
    *(_BYTE *)(v14 + 124) = 0;
    *(_BYTE *)(v14 + 128) = 0;
  }
  WebCore::Element::cloneAttributesFromElement((WebCore::Element *)v10, v4, v8, v9, v11);
  (*(void (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v10 + 496))(v10, v4);
  *(_DWORD *)(v10 + 24) += 2;
  v25[0] = (WebCore::Node *)v10;
  WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)v25, (uint64_t)v4, 1);
  if (v25[0])
  {
    if (*((_DWORD *)v25[0] + 6) == 2)
    {
      if ((*((_WORD *)v25[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25[0], v16);
    }
    else
    {
      *((_DWORD *)v25[0] + 6) -= 2;
    }
  }
  WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent((uint64_t)this, *((WebCore::Node **)v4 + 10), 0, (WebCore::Element *)v10);
  WebCore::CompositeEditCommand::removeNode(this, (uint64_t)v4, 1);
  *(_DWORD *)(v10 + 24) += 2;
  v20 = v10;
  v21 = 0;
  v22 = 4;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v20, (uint64_t)v23);
  v24 = 1;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v25, (const WebCore::VisiblePosition *)v23, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)v25);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v25);
  result = (unsigned int *)v23[0];
  if (v23[0])
  {
    if (*((_DWORD *)v23[0] + 6) == 2)
    {
      if ((*((_WORD *)v23[0] + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v23[0], v17);
    }
    else
    {
      *((_DWORD *)v23[0] + 6) -= 2;
    }
  }
  v18 = *(_DWORD *)(v10 + 24) - 2;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) != 0)
    {
LABEL_33:
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
      goto LABEL_24;
    }
    result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
    v18 = *(_DWORD *)(v10 + 24);
  }
  else
  {
    *(_DWORD *)(v10 + 24) = v18;
  }
  v19 = v18 - 2;
  if (!v19)
    goto LABEL_33;
  *(_DWORD *)(v10 + 24) = v19;
LABEL_24:
  v13 = *((_DWORD *)v4 + 6) - 2;
  if (*((_DWORD *)v4 + 6) != 2)
  {
LABEL_25:
    *((_DWORD *)v4 + 6) = v13;
    return result;
  }
  if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    return WebCore::Node::removedLastRef(v4, v17);
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::removeNode(WebCore::Node *result, uint64_t a2, int a3)
{
  uint64_t v3;
  WebCore::CompositeEditCommand *v6;
  char v7;
  uint64_t v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;

  v3 = *(_QWORD *)(a2 + 32);
  if (v3 && (*(_WORD *)(v3 + 28) & 0x80) == 0)
  {
    v6 = result;
    *(_DWORD *)(a2 + 24) += 2;
    v7 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 16))(result);
    v8 = WTF::fastMalloc((WTF *)0x118);
    v9 = *(WebCore::Node **)(*(_QWORD *)(a2 + 40) + 8);
    *((_DWORD *)v9 + 6) += 2;
    v12 = v9;
    *(_QWORD *)WebCore::EditCommand::EditCommand(v8, (uint64_t *)&v12, v7) = off_1E33A9E80;
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    *(_QWORD *)v8 = off_1E33AD670;
    *(_QWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 264) = 0;
    *(_QWORD *)(v8 + 248) = a2;
    *(_DWORD *)(v8 + 272) = a3;
    v12 = (WebCore::Node *)v8;
    WebCore::CompositeEditCommand::applyCommandToComposite(v6, (uint64_t **)&v12);
    result = v12;
    if (v12)
    {
      if (*((_DWORD *)v12 + 2) == 1)
        return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8))();
      else
        --*((_DWORD *)v12 + 2);
    }
  }
  return result;
}

unsigned int *WebCore::AccessibilityUndoReplacedText::configureRangeDeletedByReapplyWithEndingSelection(unsigned int *this, const WebCore::VisibleSelection *a2)
{
  unsigned __int8 v2;
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  WebCore::Node *v8[2];
  char v9;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) != 0 && *((_BYTE *)a2 + 97))
  {
    v3 = this;
    WebCore::VisiblePosition::canonicalPosition((const WebCore::VisibleSelection *)((char *)a2 + 80), (uint64_t)v8);
    v9 = 1;
    this = (unsigned int *)v8[0];
    if (v8[0])
    {
      v5 = *((_DWORD *)v8[0] + 6);
      *((_DWORD *)v8[0] + 6) = v5 + 2;
      if (v5)
      {
        this[6] = v5;
      }
      else if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)this, v4);
      }
      v7 = WebCore::indexForVisiblePosition((uint64_t *)v8, (uint64_t)(v3 + 16));
      this = (unsigned int *)v8[0];
      v3[14] = v7;
      v8[0] = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
        }
        else
        {
          this[6] -= 2;
        }
      }
    }
    else
    {
      v3[14] = -1;
    }
  }
  return this;
}

WebCore::Node *WebCore::AccessibilityUndoReplacedText::configureRangeDeletedByReapplyWithStartingSelection(WebCore::Node *this, const WebCore::VisibleSelection *a2)
{
  unsigned __int8 v2;
  WebCore::Node *v3;
  int v4;
  int v5;
  WebCore::Node *v6[2];
  char v7;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) != 0)
  {
    if (*((_BYTE *)a2 + 97))
    {
      v3 = this;
      if (*((_DWORD *)this + 10) == -1)
      {
        WebCore::VisiblePosition::canonicalPosition((const WebCore::VisibleSelection *)((char *)a2 + 64), (uint64_t)v6);
        v7 = 1;
        this = v6[0];
        if (v6[0])
        {
          v4 = *((_DWORD *)v6[0] + 6);
          *((_DWORD *)v6[0] + 6) = v4 + 2;
          if (v4)
          {
            *((_DWORD *)this + 6) = v4;
          }
          else if ((*((_WORD *)this + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(this);
          }
          v5 = WebCore::indexForVisiblePosition((uint64_t *)v6, (uint64_t)v3 + 48);
          this = v6[0];
          *((_DWORD *)v3 + 10) = v5;
          v6[0] = 0;
          if (this)
          {
            if (*((_DWORD *)this + 6) == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                return (WebCore::Node *)WebCore::Node::removedLastRef(this);
            }
            else
            {
              *((_DWORD *)this + 6) -= 2;
            }
          }
        }
        else
        {
          *((_DWORD *)v3 + 10) = -1;
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::stringForVisiblePositionIndexRange(_QWORD *a1, unsigned int *a2)
{
  unsigned int *result;
  WebCore::Node *v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  char v14;
  char v15;
  WebCore::Node *v16;
  int v17;
  char v18;
  char v19;
  WebCore::Node *v20;
  int v21;
  char v22;
  char v23;
  WebCore::Node *v24;
  int v25;
  char v26;
  char v27;

  result = (unsigned int *)*a2;
  if ((_DWORD)result == -1 || a2[4] == -1)
  {
    *a1 = 0;
  }
  else
  {
    WebCore::visiblePositionForIndex(result, *((_QWORD *)a2 + 1), 1, &v24);
    WebCore::visiblePositionForIndex((unsigned int *)a2[4], *((_QWORD *)a2 + 3), 1, &v20);
    v6 = v24;
    v24 = 0;
    v12 = v6;
    v13 = v25;
    v14 = v26;
    v15 = v27;
    v7 = v20;
    v20 = 0;
    v16 = v7;
    v17 = v21;
    v18 = v22;
    v19 = v23;
    WebCore::AccessibilityObject::stringForVisiblePositionRange((uint64_t *)&v12, a1);
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v8);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    v11 = v20;
    v20 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v8);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    result = (unsigned int *)v24;
    v24 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::postTextStateChangeNotification(WebCore *this, WebCore::Node **a2, const VisiblePosition *a3, const WTF::String *a4, const WTF::String *a5)
{
  WebCore::Node *v8;
  void *v9;
  unsigned int *result;
  WebCore::Node *v11;
  uint64_t v12;
  Node *var0;
  WebCore::AXObjectCache *v14;
  int v15;
  WebCore::Node *v16;
  int v17;
  char v18;
  WebCore::Node *v19;

  v8 = *a2;
  if (*a2)
    *((_DWORD *)v8 + 6) += 2;
  v16 = v8;
  v17 = *((_DWORD *)a2 + 2);
  v18 = *((_BYTE *)a2 + 12);
  WebCore::highestEditableRoot((uint64_t)&v16, 1, (uint64_t *)&v19);
  result = (unsigned int *)v16;
  v16 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      var0 = a3->var0.var0.var0;
      if (*(_DWORD *)(v12 + 4))
      {
        if (!var0)
        {
LABEL_20:
          v14 = this;
          v15 = 1;
          goto LABEL_21;
        }
        if (*((_DWORD *)var0 + 1))
        {
          WebCore::AXObjectCache::postTextReplacementNotification(this, v19, 1, (uint64_t)a4, 2u);
          goto LABEL_22;
        }
LABEL_19:
        if (!*(_DWORD *)(v12 + 4))
          goto LABEL_22;
        goto LABEL_20;
      }
    }
    else
    {
      var0 = a3->var0.var0.var0;
    }
    if (var0 && *((_DWORD *)var0 + 1))
    {
      v14 = this;
      v15 = 2;
LABEL_21:
      WebCore::AXObjectCache::postTextStateChangeNotification(v14, v19, v15);
LABEL_22:
      result = (unsigned int *)v19;
      v19 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          result[6] -= 2;
        }
      }
      return result;
    }
    if (!v12)
      goto LABEL_22;
    goto LABEL_19;
  }
  return result;
}

uint64_t WebCore::EditCommandComposition::EditCommandComposition(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33A9828;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(a1 + 16) = a2;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)(v8 + 24) += 2;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *((_DWORD *)a3 + 2);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a3 + 12);
  *(_DWORD *)(a1 + 32) = v9;
  v10 = a3[2];
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *((_DWORD *)a3 + 6);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a3 + 28);
  *(_DWORD *)(a1 + 48) = v11;
  v12 = a3[4];
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *((_DWORD *)a3 + 10);
  *(_BYTE *)(a1 + 68) = *((_BYTE *)a3 + 44);
  *(_DWORD *)(a1 + 64) = v13;
  v14 = a3[6];
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  *(_QWORD *)(a1 + 72) = v14;
  v15 = *((_DWORD *)a3 + 14);
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a3 + 60);
  *(_DWORD *)(a1 + 80) = v15;
  v16 = a3[8];
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  *(_QWORD *)(a1 + 88) = v16;
  v17 = *((_DWORD *)a3 + 18);
  *(_BYTE *)(a1 + 100) = *((_BYTE *)a3 + 76);
  *(_DWORD *)(a1 + 96) = v17;
  v18 = a3[10];
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  *(_QWORD *)(a1 + 104) = v18;
  v19 = *((_DWORD *)a3 + 22);
  *(_BYTE *)(a1 + 116) = *((_BYTE *)a3 + 92);
  *(_DWORD *)(a1 + 112) = v19;
  LOWORD(v19) = *((_WORD *)a3 + 48);
  *(_BYTE *)(a1 + 122) = *((_BYTE *)a3 + 98);
  *(_WORD *)(a1 + 120) = v19;
  v20 = *a4;
  if (*a4)
    *(_DWORD *)(v20 + 24) += 2;
  *(_QWORD *)(a1 + 128) = v20;
  v21 = *((_DWORD *)a4 + 2);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a4 + 12);
  *(_DWORD *)(a1 + 136) = v21;
  v22 = a4[2];
  if (v22)
    *(_DWORD *)(v22 + 24) += 2;
  *(_QWORD *)(a1 + 144) = v22;
  v23 = *((_DWORD *)a4 + 6);
  *(_BYTE *)(a1 + 156) = *((_BYTE *)a4 + 28);
  *(_DWORD *)(a1 + 152) = v23;
  v24 = a4[4];
  if (v24)
    *(_DWORD *)(v24 + 24) += 2;
  *(_QWORD *)(a1 + 160) = v24;
  v25 = *((_DWORD *)a4 + 10);
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a4 + 44);
  *(_DWORD *)(a1 + 168) = v25;
  v26 = a4[6];
  if (v26)
    *(_DWORD *)(v26 + 24) += 2;
  *(_QWORD *)(a1 + 176) = v26;
  v27 = *((_DWORD *)a4 + 14);
  *(_BYTE *)(a1 + 188) = *((_BYTE *)a4 + 60);
  *(_DWORD *)(a1 + 184) = v27;
  v29 = (uint64_t)(a4 + 8);
  v28 = a4[8];
  if (v28)
    *(_DWORD *)(v28 + 24) += 2;
  *(_QWORD *)(a1 + 192) = v28;
  v30 = *((_DWORD *)a4 + 18);
  *(_BYTE *)(a1 + 204) = *((_BYTE *)a4 + 76);
  *(_DWORD *)(a1 + 200) = v30;
  v31 = a4[10];
  if (v31)
    *(_DWORD *)(v31 + 24) += 2;
  *(_QWORD *)(a1 + 208) = v31;
  v32 = *((_DWORD *)a4 + 22);
  *(_BYTE *)(a1 + 220) = *((_BYTE *)a4 + 92);
  *(_DWORD *)(a1 + 216) = v32;
  LOWORD(v32) = *((_WORD *)a4 + 48);
  *(_BYTE *)(a1 + 226) = *((_BYTE *)a4 + 98);
  *(_WORD *)(a1 + 224) = v32;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v33 = WebCore::editableRootForPosition((uint64_t)(a3 + 8), 0);
  if (v33)
    *(_DWORD *)(v33 + 24) += 2;
  *(_QWORD *)(a1 + 248) = v33;
  v34 = WebCore::editableRootForPosition(v29, 0);
  if (v34)
    *(_DWORD *)(v34 + 24) += 2;
  *(_QWORD *)(a1 + 256) = v34;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = -1;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = a5;
  WebCore::AccessibilityUndoReplacedText::configureRangeDeletedByReapplyWithStartingSelection((WebCore::Node *)(a1 + 264), (const WebCore::VisibleSelection *)a3);
  return a1;
}

void WebCore::EditCommandComposition::unapply(WebCore::EditCommandComposition *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WebCore::Editor *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WebCore::Editor *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WebCore::Editor *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  _DWORD *v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t v42;
  WebCore::Editor *v43;
  void *v44;
  WebCore::Editor *v45;
  uint64_t v46;
  void *v47;
  WebCore::Editor *v48;
  void *v49;
  WebCore::Editor *v50;
  uint64_t v51;
  void *v52;
  WebCore::Editor *v53;
  void *v54;
  WebCore::Editor *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  WebCore *v64;
  unsigned __int8 v65;
  unsigned int *v66;
  const WTF::String *v67;
  unsigned __int8 v68;
  Node *var0;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  VisiblePosition v79;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *((_QWORD *)this + 31);
      if (v8 && (*(_BYTE *)(v8 + 22) & 8) == 0 || (v9 = *((_QWORD *)this + 32)) != 0 && (*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        do
        {
LABEL_57:
          v38 = __ldaxr(v6);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v6));
        if (!v39)
        {
          atomic_store(1u, v6);
          v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v41 = off_1E31FE290;
          v41[1] = v6;
          *(_QWORD *)&v79.var0.var1 = v41;
          WTF::ensureOnMainThread();
          v42 = *(_QWORD *)&v79.var0.var1;
          *(_QWORD *)&v79.var0.var1 = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        }
        goto LABEL_59;
      }
      v10 = (WTF::StringImpl **)((char *)this + 264);
      v11 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
      if ((v11 & 1) != 0)
      {
        v12 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v12 & 1) != 0)
        {
          WebCore::stringForVisiblePositionIndexRange(&v79.var0.var1, (unsigned int *)this + 76);
          v13 = *(WTF::StringImpl **)&v79.var0.var1;
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v79.var0.var1 = 0;
        v14 = *v10;
        *v10 = v13;
        if (v14)
        {
          v15 = *(_DWORD *)v14 - 2;
          if (*(_DWORD *)v14 != 2)
          {
LABEL_17:
            *(_DWORD *)v14 = v15;
            goto LABEL_18;
          }
          WTF::StringImpl::destroy(v14, a2);
          v14 = *(WTF::StringImpl **)&v79.var0.var1;
          *(_QWORD *)&v79.var0.var1 = 0;
          if (v14)
          {
            v15 = *(_DWORD *)v14 - 2;
            if (*(_DWORD *)v14 != 2)
              goto LABEL_17;
            WTF::StringImpl::destroy(v14, v40);
          }
        }
      }
LABEL_18:
      WebCore::Document::updateLayout(v3, 2u, 0);
      v16 = *(WebCore::Editor **)(v3 + 3056);
      if (!v16)
      {
        v43 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v43, (WebCore::Document *)v3);
        v45 = *(WebCore::Editor **)(v3 + 3056);
        *(_QWORD *)(v3 + 3056) = v43;
        if (v45)
        {
          WebCore::Editor::~Editor(v45, v44);
          if (*(_DWORD *)v46)
          {
            *(_QWORD *)(v46 + 496) = 0;
            *(_OWORD *)(v46 + 464) = 0u;
            *(_OWORD *)(v46 + 480) = 0u;
            *(_OWORD *)(v46 + 432) = 0u;
            *(_OWORD *)(v46 + 448) = 0u;
            *(_OWORD *)(v46 + 400) = 0u;
            *(_OWORD *)(v46 + 416) = 0u;
            *(_OWORD *)(v46 + 368) = 0u;
            *(_OWORD *)(v46 + 384) = 0u;
            *(_OWORD *)(v46 + 336) = 0u;
            *(_OWORD *)(v46 + 352) = 0u;
            *(_OWORD *)(v46 + 304) = 0u;
            *(_OWORD *)(v46 + 320) = 0u;
            *(_OWORD *)(v46 + 272) = 0u;
            *(_OWORD *)(v46 + 288) = 0u;
            *(_OWORD *)(v46 + 240) = 0u;
            *(_OWORD *)(v46 + 256) = 0u;
            *(_OWORD *)(v46 + 208) = 0u;
            *(_OWORD *)(v46 + 224) = 0u;
            *(_OWORD *)(v46 + 176) = 0u;
            *(_OWORD *)(v46 + 192) = 0u;
            *(_OWORD *)(v46 + 144) = 0u;
            *(_OWORD *)(v46 + 160) = 0u;
            *(_OWORD *)(v46 + 112) = 0u;
            *(_OWORD *)(v46 + 128) = 0u;
            *(_OWORD *)(v46 + 80) = 0u;
            *(_OWORD *)(v46 + 96) = 0u;
            *(_OWORD *)(v46 + 48) = 0u;
            *(_OWORD *)(v46 + 64) = 0u;
            *(_OWORD *)(v46 + 16) = 0u;
            *(_OWORD *)(v46 + 32) = 0u;
            *(_OWORD *)v46 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v46, v47);
          }
        }
        v16 = *(WebCore::Editor **)(v3 + 3056);
      }
      if (*((_QWORD *)v16 + 4))
        WebCore::Editor::setComposition(v16, MEMORY[0x1E0CBF738], 1);
      v17 = *(_QWORD *)(v3 + 528);
      if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0 || (v19 = *(_QWORD *)(v18 + 288)) == 0)
      {
        v20 = 0;
LABEL_31:
        v24 = *(WebCore::Editor **)(v3 + 3056);
        if (!v24)
        {
          v48 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v48, (WebCore::Document *)v3);
          v50 = *(WebCore::Editor **)(v3 + 3056);
          *(_QWORD *)(v3 + 3056) = v48;
          if (v50)
          {
            WebCore::Editor::~Editor(v50, v49);
            if (*(_DWORD *)v51)
            {
              *(_QWORD *)(v51 + 496) = 0;
              *(_OWORD *)(v51 + 464) = 0u;
              *(_OWORD *)(v51 + 480) = 0u;
              *(_OWORD *)(v51 + 432) = 0u;
              *(_OWORD *)(v51 + 448) = 0u;
              *(_OWORD *)(v51 + 400) = 0u;
              *(_OWORD *)(v51 + 416) = 0u;
              *(_OWORD *)(v51 + 368) = 0u;
              *(_OWORD *)(v51 + 384) = 0u;
              *(_OWORD *)(v51 + 336) = 0u;
              *(_OWORD *)(v51 + 352) = 0u;
              *(_OWORD *)(v51 + 304) = 0u;
              *(_OWORD *)(v51 + 320) = 0u;
              *(_OWORD *)(v51 + 272) = 0u;
              *(_OWORD *)(v51 + 288) = 0u;
              *(_OWORD *)(v51 + 240) = 0u;
              *(_OWORD *)(v51 + 256) = 0u;
              *(_OWORD *)(v51 + 208) = 0u;
              *(_OWORD *)(v51 + 224) = 0u;
              *(_OWORD *)(v51 + 176) = 0u;
              *(_OWORD *)(v51 + 192) = 0u;
              *(_OWORD *)(v51 + 144) = 0u;
              *(_OWORD *)(v51 + 160) = 0u;
              *(_OWORD *)(v51 + 112) = 0u;
              *(_OWORD *)(v51 + 128) = 0u;
              *(_OWORD *)(v51 + 80) = 0u;
              *(_OWORD *)(v51 + 96) = 0u;
              *(_OWORD *)(v51 + 48) = 0u;
              *(_OWORD *)(v51 + 64) = 0u;
              *(_OWORD *)(v51 + 16) = 0u;
              *(_OWORD *)(v51 + 32) = 0u;
              *(_OWORD *)v51 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v51, v52);
            }
          }
          v24 = *(WebCore::Editor **)(v3 + 3056);
        }
        if (WebCore::Editor::willUnapplyEditing(v24, this))
        {
          v25 = *((unsigned int *)this + 61);
          if ((_DWORD)v25)
          {
            v26 = v25 - 1;
            do
            {
              if (v26 >= *((unsigned int *)this + 61))
              {
                __break(0xC471u);
                JUMPOUT(0x195A89E10);
              }
              v27 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v26);
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
              --v26;
            }
            while (v26 != -1);
          }
          v28 = *(WebCore::Editor **)(v3 + 3056);
          if (!v28)
          {
            v53 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v53, (WebCore::Document *)v3);
            v55 = *(WebCore::Editor **)(v3 + 3056);
            *(_QWORD *)(v3 + 3056) = v53;
            if (v55)
            {
              WebCore::Editor::~Editor(v55, v54);
              if (*(_DWORD *)v56)
              {
                *(_QWORD *)(v56 + 496) = 0;
                *(_OWORD *)(v56 + 464) = 0u;
                *(_OWORD *)(v56 + 480) = 0u;
                *(_OWORD *)(v56 + 432) = 0u;
                *(_OWORD *)(v56 + 448) = 0u;
                *(_OWORD *)(v56 + 400) = 0u;
                *(_OWORD *)(v56 + 416) = 0u;
                *(_OWORD *)(v56 + 368) = 0u;
                *(_OWORD *)(v56 + 384) = 0u;
                *(_OWORD *)(v56 + 336) = 0u;
                *(_OWORD *)(v56 + 352) = 0u;
                *(_OWORD *)(v56 + 304) = 0u;
                *(_OWORD *)(v56 + 320) = 0u;
                *(_OWORD *)(v56 + 272) = 0u;
                *(_OWORD *)(v56 + 288) = 0u;
                *(_OWORD *)(v56 + 240) = 0u;
                *(_OWORD *)(v56 + 256) = 0u;
                *(_OWORD *)(v56 + 208) = 0u;
                *(_OWORD *)(v56 + 224) = 0u;
                *(_OWORD *)(v56 + 176) = 0u;
                *(_OWORD *)(v56 + 192) = 0u;
                *(_OWORD *)(v56 + 144) = 0u;
                *(_OWORD *)(v56 + 160) = 0u;
                *(_OWORD *)(v56 + 112) = 0u;
                *(_OWORD *)(v56 + 128) = 0u;
                *(_OWORD *)(v56 + 80) = 0u;
                *(_OWORD *)(v56 + 96) = 0u;
                *(_OWORD *)(v56 + 48) = 0u;
                *(_OWORD *)(v56 + 64) = 0u;
                *(_OWORD *)(v56 + 16) = 0u;
                *(_OWORD *)(v56 + 32) = 0u;
                *(_OWORD *)v56 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v56, v57);
              }
            }
            v28 = *(WebCore::Editor **)(v3 + 3056);
          }
          WebCore::Editor::unappliedEditing(v28, (WebCore **)this);
          v29 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v29 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
            {
              v72 = *(_QWORD *)(v3 + 528);
              i = v3;
              if (v72)
              {
                v73 = *(_QWORD *)(v72 + 8);
                i = v3;
                if (v73)
                {
                  v74 = *(_QWORD *)(v73 + 120);
                  i = v3;
                  if (v74)
                  {
                    v75 = *(_QWORD *)(v74 + 8);
                    for (i = v3; v75; v75 = *(_QWORD *)(v78 + 8))
                    {
                      i = *(_QWORD *)(*(_QWORD *)(v75 + 40) + 8);
                      v76 = *(_QWORD *)(i + 528);
                      if (!v76)
                        break;
                      v77 = *(_QWORD *)(v76 + 8);
                      if (!v77)
                        break;
                      v78 = *(_QWORD *)(v77 + 120);
                      if (!v78)
                        break;
                    }
                  }
                }
              }
            }
            else
            {
              v58 = *(_QWORD *)(v3 + 528);
              i = v3;
              if (v58)
              {
                v60 = *(_QWORD *)(v58 + 8);
                i = v3;
                if (v60)
                {
                  v61 = *(_QWORD *)(*(_QWORD *)(v60 + 128) + 8);
                  v62 = v61 && *(_BYTE *)(v61 + 144) == 0;
                  i = v3;
                  if (v62)
                  {
                    v63 = *(_QWORD *)(v61 + 296);
                    i = v3;
                    if (v63)
                      i = v63;
                  }
                }
              }
            }
            v64 = *(WebCore **)(i + 1488);
            if (v64)
            {
              v65 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v65 & 1) != 0 && *((_DWORD *)this + 68) != -1)
              {
                v66 = (unsigned int *)*((unsigned int *)this + 72);
                if ((_DWORD)v66 != -1)
                {
                  WebCore::visiblePositionForIndex(v66, *((_QWORD *)this + 37), 1, &v79.var0.var1);
                  if (*(_QWORD *)&v79.var0.var1)
                  {
                    v68 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
                    if ((v68 & 1) != 0)
                      WebCore::stringForVisiblePositionIndexRange(&v79, (unsigned int *)this + 68);
                    else
                      v79.var0.var0.var0 = 0;
                    WebCore::postTextStateChangeNotification(v64, (WebCore::Node **)&v79.var0.var1, &v79, (WebCore::EditCommandComposition *)((char *)this + 264), v67);
                    var0 = v79.var0.var0.var0;
                    v79.var0.var0.var0 = 0;
                    if (var0)
                    {
                      if (*(_DWORD *)var0 == 2)
                        WTF::StringImpl::destroy((WTF::StringImpl *)var0, a2);
                      else
                        *(_DWORD *)var0 -= 2;
                    }
                    v70 = *v10;
                    *v10 = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2)
                        WTF::StringImpl::destroy(v70, a2);
                      else
                        *(_DWORD *)v70 -= 2;
                    }
                    v71 = *(_QWORD *)&v79.var0.var1;
                    *(_QWORD *)&v79.var0.var1 = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)(v71 + 24) == 2)
                      {
                        if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v71, a2);
                      }
                      else
                      {
                        *(_DWORD *)(v71 + 24) -= 2;
                      }
                    }
                  }
                }
              }
            }
          }
          v30 = *(_QWORD *)(v3 + 3064);
          if (*(_BYTE *)(v30 + 153))
          {
            WebCore::VisibleSelection::document(v30 + 56, &v79.var0.var1);
            v31 = *(_QWORD *)(v30 + 32);
            if (v31)
              v32 = *(_QWORD *)(v31 + 8);
            else
              v32 = 0;
            v33 = *(_QWORD *)&v79.var0.var1;
            *(_QWORD *)&v79.var0.var1 = 0;
            if (v33)
            {
              if (*(_DWORD *)(v33 + 24) == 2)
              {
                if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v33, a2);
              }
              else
              {
                *(_DWORD *)(v33 + 24) -= 2;
              }
            }
            if (v33 != v32)
            {
              __break(0xC471u);
              JUMPOUT(0x195A89BDCLL);
            }
          }
        }
        if (!v20)
          goto LABEL_57;
        v34 = *(WTF **)v20;
        if (*(_QWORD *)v20)
        {
          v35 = (_DWORD *)*((_QWORD *)v34 + 1);
          if (!v35 || (v36 = v35[77]) == 0 || (v37 = v36 - 1, (v35[77] = v37) != 0))
          {
            *(_QWORD *)v20 = 0;
            goto LABEL_53;
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 664))(v35);
          v34 = *(WTF **)v20;
          *(_QWORD *)v20 = 0;
          if (v34)
          {
LABEL_53:
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, a2);
            else
              --*(_DWORD *)v34;
          }
        }
        else
        {
          *(_QWORD *)v20 = 0;
        }
        WTF::fastFree(v20, a2);
        goto LABEL_57;
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)8);
      v21 = *(_QWORD *)(v19 + 16);
      if (!v21)
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = v19;
        v23 = *(WTF **)(v19 + 16);
        *(_QWORD *)(v19 + 16) = v21;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
          {
            WTF::fastFree(v23, v22);
            v21 = *(_QWORD *)(v19 + 16);
            if (!v21)
              goto LABEL_29;
          }
          else
          {
            --*(_DWORD *)v23;
          }
        }
      }
      ++*(_DWORD *)v21;
LABEL_29:
      *(_QWORD *)v20 = v21;
      ++*(_DWORD *)(v19 + 308);
      goto LABEL_31;
    }
  }
LABEL_59:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void WebCore::EditCommandComposition::reapply(WebCore::EditCommandComposition *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WebCore::Editor *v23;
  unint64_t v24;
  _DWORD *v25;
  WebCore::Editor *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  WebCore::Editor *v41;
  void *v42;
  WebCore::Editor *v43;
  uint64_t v44;
  void *v45;
  WebCore::Editor *v46;
  void *v47;
  WebCore::Editor *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  WebCore *v57;
  unsigned __int8 v58;
  unsigned int *v59;
  const WTF::String *v60;
  unsigned __int8 v61;
  Node *var0;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  VisiblePosition v72;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *((_QWORD *)this + 31);
      if (v8 && (*(_BYTE *)(v8 + 22) & 8) == 0 || (v9 = *((_QWORD *)this + 32)) != 0 && (*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        do
        {
LABEL_59:
          v36 = __ldaxr(v6);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v6));
        if (!v37)
        {
          atomic_store(1u, v6);
          v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v39 = off_1E31FE290;
          v39[1] = v6;
          *(_QWORD *)&v72.var0.var1 = v39;
          WTF::ensureOnMainThread();
          v40 = *(_QWORD *)&v72.var0.var1;
          *(_QWORD *)&v72.var0.var1 = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        goto LABEL_61;
      }
      v10 = (WTF::StringImpl **)((char *)this + 264);
      v11 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
      if ((v11 & 1) != 0)
      {
        v12 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v12 & 1) != 0)
        {
          WebCore::stringForVisiblePositionIndexRange(&v72.var0.var1, (unsigned int *)this + 68);
          v13 = *(WTF::StringImpl **)&v72.var0.var1;
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v72.var0.var1 = 0;
        v14 = *v10;
        *v10 = v13;
        if (v14)
        {
          v15 = *(_DWORD *)v14 - 2;
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::destroy(v14, a2);
            v14 = *(WTF::StringImpl **)&v72.var0.var1;
            *(_QWORD *)&v72.var0.var1 = 0;
            if (!v14)
              goto LABEL_18;
            v15 = *(_DWORD *)v14 - 2;
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, v38);
              goto LABEL_18;
            }
          }
          *(_DWORD *)v14 = v15;
        }
      }
LABEL_18:
      WebCore::Document::updateLayout(v3, 2u, 0);
      v16 = *(_QWORD *)(v3 + 528);
      if (!v16 || (v17 = *(_QWORD *)(v16 + 8)) == 0 || (v18 = *(_QWORD *)(v17 + 288)) == 0)
      {
        v19 = 0;
LABEL_28:
        v23 = *(WebCore::Editor **)(v3 + 3056);
        if (!v23)
        {
          v41 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v41, (WebCore::Document *)v3);
          v43 = *(WebCore::Editor **)(v3 + 3056);
          *(_QWORD *)(v3 + 3056) = v41;
          if (v43)
          {
            WebCore::Editor::~Editor(v43, v42);
            if (*(_DWORD *)v44)
            {
              *(_QWORD *)(v44 + 496) = 0;
              *(_OWORD *)(v44 + 464) = 0u;
              *(_OWORD *)(v44 + 480) = 0u;
              *(_OWORD *)(v44 + 432) = 0u;
              *(_OWORD *)(v44 + 448) = 0u;
              *(_OWORD *)(v44 + 400) = 0u;
              *(_OWORD *)(v44 + 416) = 0u;
              *(_OWORD *)(v44 + 368) = 0u;
              *(_OWORD *)(v44 + 384) = 0u;
              *(_OWORD *)(v44 + 336) = 0u;
              *(_OWORD *)(v44 + 352) = 0u;
              *(_OWORD *)(v44 + 304) = 0u;
              *(_OWORD *)(v44 + 320) = 0u;
              *(_OWORD *)(v44 + 272) = 0u;
              *(_OWORD *)(v44 + 288) = 0u;
              *(_OWORD *)(v44 + 240) = 0u;
              *(_OWORD *)(v44 + 256) = 0u;
              *(_OWORD *)(v44 + 208) = 0u;
              *(_OWORD *)(v44 + 224) = 0u;
              *(_OWORD *)(v44 + 176) = 0u;
              *(_OWORD *)(v44 + 192) = 0u;
              *(_OWORD *)(v44 + 144) = 0u;
              *(_OWORD *)(v44 + 160) = 0u;
              *(_OWORD *)(v44 + 112) = 0u;
              *(_OWORD *)(v44 + 128) = 0u;
              *(_OWORD *)(v44 + 80) = 0u;
              *(_OWORD *)(v44 + 96) = 0u;
              *(_OWORD *)(v44 + 48) = 0u;
              *(_OWORD *)(v44 + 64) = 0u;
              *(_OWORD *)(v44 + 16) = 0u;
              *(_OWORD *)(v44 + 32) = 0u;
              *(_OWORD *)v44 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v44, v45);
            }
          }
          v23 = *(WebCore::Editor **)(v3 + 3056);
        }
        if (WebCore::Editor::willReapplyEditing(v23, this))
        {
          if (*((_DWORD *)this + 61))
          {
            v24 = 0;
            do
            {
              v25 = *(_DWORD **)(*((_QWORD *)this + 29) + 8 * v24);
              if (v25)
                ++v25[2];
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 64))(v25);
              if (v25[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
              else
                --v25[2];
              ++v24;
            }
            while (v24 < *((unsigned int *)this + 61));
          }
          v26 = *(WebCore::Editor **)(v3 + 3056);
          if (!v26)
          {
            v46 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v46, (WebCore::Document *)v3);
            v48 = *(WebCore::Editor **)(v3 + 3056);
            *(_QWORD *)(v3 + 3056) = v46;
            if (v48)
            {
              WebCore::Editor::~Editor(v48, v47);
              if (*(_DWORD *)v49)
              {
                *(_QWORD *)(v49 + 496) = 0;
                *(_OWORD *)(v49 + 464) = 0u;
                *(_OWORD *)(v49 + 480) = 0u;
                *(_OWORD *)(v49 + 432) = 0u;
                *(_OWORD *)(v49 + 448) = 0u;
                *(_OWORD *)(v49 + 400) = 0u;
                *(_OWORD *)(v49 + 416) = 0u;
                *(_OWORD *)(v49 + 368) = 0u;
                *(_OWORD *)(v49 + 384) = 0u;
                *(_OWORD *)(v49 + 336) = 0u;
                *(_OWORD *)(v49 + 352) = 0u;
                *(_OWORD *)(v49 + 304) = 0u;
                *(_OWORD *)(v49 + 320) = 0u;
                *(_OWORD *)(v49 + 272) = 0u;
                *(_OWORD *)(v49 + 288) = 0u;
                *(_OWORD *)(v49 + 240) = 0u;
                *(_OWORD *)(v49 + 256) = 0u;
                *(_OWORD *)(v49 + 208) = 0u;
                *(_OWORD *)(v49 + 224) = 0u;
                *(_OWORD *)(v49 + 176) = 0u;
                *(_OWORD *)(v49 + 192) = 0u;
                *(_OWORD *)(v49 + 144) = 0u;
                *(_OWORD *)(v49 + 160) = 0u;
                *(_OWORD *)(v49 + 112) = 0u;
                *(_OWORD *)(v49 + 128) = 0u;
                *(_OWORD *)(v49 + 80) = 0u;
                *(_OWORD *)(v49 + 96) = 0u;
                *(_OWORD *)(v49 + 48) = 0u;
                *(_OWORD *)(v49 + 64) = 0u;
                *(_OWORD *)(v49 + 16) = 0u;
                *(_OWORD *)(v49 + 32) = 0u;
                *(_OWORD *)v49 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v49, v50);
              }
            }
            v26 = *(WebCore::Editor **)(v3 + 3056);
          }
          WebCore::Editor::reappliedEditing(v26, (WebCore **)this);
          v27 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v27 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
            {
              v65 = *(_QWORD *)(v3 + 528);
              i = v3;
              if (v65)
              {
                v66 = *(_QWORD *)(v65 + 8);
                i = v3;
                if (v66)
                {
                  v67 = *(_QWORD *)(v66 + 120);
                  i = v3;
                  if (v67)
                  {
                    v68 = *(_QWORD *)(v67 + 8);
                    for (i = v3; v68; v68 = *(_QWORD *)(v71 + 8))
                    {
                      i = *(_QWORD *)(*(_QWORD *)(v68 + 40) + 8);
                      v69 = *(_QWORD *)(i + 528);
                      if (!v69)
                        break;
                      v70 = *(_QWORD *)(v69 + 8);
                      if (!v70)
                        break;
                      v71 = *(_QWORD *)(v70 + 120);
                      if (!v71)
                        break;
                    }
                  }
                }
              }
            }
            else
            {
              v51 = *(_QWORD *)(v3 + 528);
              i = v3;
              if (v51)
              {
                v53 = *(_QWORD *)(v51 + 8);
                i = v3;
                if (v53)
                {
                  v54 = *(_QWORD *)(*(_QWORD *)(v53 + 128) + 8);
                  v55 = v54 && *(_BYTE *)(v54 + 144) == 0;
                  i = v3;
                  if (v55)
                  {
                    v56 = *(_QWORD *)(v54 + 296);
                    i = v3;
                    if (v56)
                      i = v56;
                  }
                }
              }
            }
            v57 = *(WebCore **)(i + 1488);
            if (v57)
            {
              v58 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v58 & 1) != 0)
              {
                v59 = (unsigned int *)*((unsigned int *)this + 76);
                if ((_DWORD)v59 != -1 && *((_DWORD *)this + 80) != -1)
                {
                  WebCore::visiblePositionForIndex(v59, *((_QWORD *)this + 39), 1, &v72.var0.var1);
                  if (*(_QWORD *)&v72.var0.var1)
                  {
                    v61 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
                    if ((v61 & 1) != 0)
                      WebCore::stringForVisiblePositionIndexRange(&v72, (unsigned int *)this + 76);
                    else
                      v72.var0.var0.var0 = 0;
                    WebCore::postTextStateChangeNotification(v57, (WebCore::Node **)&v72.var0.var1, &v72, (WebCore::EditCommandComposition *)((char *)this + 264), v60);
                    var0 = v72.var0.var0.var0;
                    v72.var0.var0.var0 = 0;
                    if (var0)
                    {
                      if (*(_DWORD *)var0 == 2)
                        WTF::StringImpl::destroy((WTF::StringImpl *)var0, a2);
                      else
                        *(_DWORD *)var0 -= 2;
                    }
                    v63 = *v10;
                    *v10 = 0;
                    if (v63)
                    {
                      if (*(_DWORD *)v63 == 2)
                        WTF::StringImpl::destroy(v63, a2);
                      else
                        *(_DWORD *)v63 -= 2;
                    }
                    v64 = *(_QWORD *)&v72.var0.var1;
                    *(_QWORD *)&v72.var0.var1 = 0;
                    if (v64)
                    {
                      if (*(_DWORD *)(v64 + 24) == 2)
                      {
                        if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v64, a2);
                      }
                      else
                      {
                        *(_DWORD *)(v64 + 24) -= 2;
                      }
                    }
                  }
                }
              }
            }
          }
          v28 = *(_QWORD *)(v3 + 3064);
          if (*(_BYTE *)(v28 + 153))
          {
            WebCore::VisibleSelection::document(v28 + 56, &v72.var0.var1);
            v29 = *(_QWORD *)(v28 + 32);
            if (v29)
              v30 = *(_QWORD *)(v29 + 8);
            else
              v30 = 0;
            v31 = *(_QWORD *)&v72.var0.var1;
            *(_QWORD *)&v72.var0.var1 = 0;
            if (v31)
            {
              if (*(_DWORD *)(v31 + 24) == 2)
              {
                if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v31, a2);
              }
              else
              {
                *(_DWORD *)(v31 + 24) -= 2;
              }
            }
            if (v31 != v30)
            {
              __break(0xC471u);
              JUMPOUT(0x195A8A2D4);
            }
          }
        }
        if (!v19)
          goto LABEL_59;
        v32 = *(WTF **)v19;
        if (*(_QWORD *)v19)
        {
          v33 = (_DWORD *)*((_QWORD *)v32 + 1);
          if (!v33 || (v34 = v33[77]) == 0 || (v35 = v34 - 1, (v33[77] = v35) != 0))
          {
            *(_QWORD *)v19 = 0;
            goto LABEL_55;
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 664))(v33);
          v32 = *(WTF **)v19;
          *(_QWORD *)v19 = 0;
          if (v32)
          {
LABEL_55:
            if (*(_DWORD *)v32 == 1)
              WTF::fastFree(v32, a2);
            else
              --*(_DWORD *)v32;
          }
        }
        else
        {
          *(_QWORD *)v19 = 0;
        }
        WTF::fastFree(v19, a2);
        goto LABEL_59;
      }
      v19 = (WTF *)WTF::fastMalloc((WTF *)8);
      v20 = *(_QWORD *)(v18 + 16);
      if (!v20)
      {
        v20 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = v18;
        v22 = *(WTF **)(v18 + 16);
        *(_QWORD *)(v18 + 16) = v20;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
          {
            WTF::fastFree(v22, v21);
            v20 = *(_QWORD *)(v18 + 16);
            if (!v20)
              goto LABEL_26;
          }
          else
          {
            --*(_DWORD *)v22;
          }
        }
      }
      ++*(_DWORD *)v20;
LABEL_26:
      *(_QWORD *)v19 = v20;
      ++*(_DWORD *)(v18 + 308);
      goto LABEL_28;
    }
  }
LABEL_61:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void WebCore::EditCommandComposition::label(WebCore::EditCommandComposition *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::undoRedoLabel(*((unsigned __int8 *)this + 336), a2);
}

void WebCore::CompositeEditCommand::~CompositeEditCommand(WebCore::CompositeEditCommand *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E33A9870;
  v3 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((unsigned int *)this + 67);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD **)*((_QWORD *)this + 32);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 32);
  if (v8)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 31);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  *(_QWORD *)this = off_1E33A9E38;
  v13 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::CompositeEditCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::CompositeEditCommand *)((char *)this + 24));
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v16);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
}

uint64_t WebCore::CompositeEditCommand::willApplyCommand(WebCore::CompositeEditCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  WebCore::Editor *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 2);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 3056);
  v5 = v3;
  if (!v4)
  {
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, (WebCore::Document *)v3);
    v14 = *(WebCore::Editor **)(v3 + 3056);
    *(_QWORD *)(v3 + 3056) = v13;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, a2);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    v4 = *(_QWORD *)(v3 + 3056);
    v5 = *((_QWORD *)this + 2);
  }
  if (WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(v5 + 3064) + 120), (const WebCore::Position *)a2))
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    (*(void (**)(WTF **__return_ptr, WebCore::CompositeEditCommand *))(*(_QWORD *)this + 168))(&v16, this);
  }
  v7 = WebCore::Editor::willApplyEditing(v4, (uint64_t)this, (uint64_t)&v16);
  if (HIDWORD(v17))
  {
    v8 = v16;
    v9 = 8 * HIDWORD(v17);
    do
    {
      v10 = *(_DWORD **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  v11 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v11, v6);
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::CompositeEditCommand::ensureComposition(WebCore::CompositeEditCommand *this)
{
  WebCore::CompositeEditCommand *v1;
  uint64_t v2;
  WebCore::CompositeEditCommand *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v1 = this;
  if (this)
    ++*((_DWORD *)this + 2);
  v2 = *((_QWORD *)this + 29);
  v3 = this;
  if (v2)
  {
    while (1)
    {
      v3 = *(WebCore::CompositeEditCommand **)(v2 + 8);
      if (!v3)
        break;
      ++*((_DWORD *)v3 + 2);
      if (*((_DWORD *)this + 2) == 1)
        (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 8))(this);
      else
        --*((_DWORD *)this + 2);
      v2 = *((_QWORD *)v3 + 29);
      this = v3;
      if (!v2)
        goto LABEL_11;
    }
    v3 = this;
  }
LABEL_11:
  if (!*((_QWORD *)v3 + 34))
  {
    v4 = *((_QWORD *)v1 + 2);
    *(_DWORD *)(v4 + 24) += 2;
    v5 = (uint64_t *)((char *)v1 + 24);
    v6 = (uint64_t *)((char *)v1 + 128);
    v7 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v1 + 16))(v1);
    v8 = WTF::fastMalloc((WTF *)0x158);
    WebCore::EditCommandComposition::EditCommandComposition(v8, v4, v5, v6, v7);
    v9 = (_DWORD *)*((_QWORD *)v3 + 34);
    *((_QWORD *)v3 + 34) = v8;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)v3 + 34);
  if (*((_DWORD *)v3 + 2) == 1)
    (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v3 + 8))(v3);
  else
    --*((_DWORD *)v3 + 2);
  return v10;
}

void WebCore::CompositeEditCommand::didApplyCommand(WebCore::CompositeEditCommand *this)
{
  WebCore::CompositeEditCommand *v1;
  uint64_t v2;
  WebCore::Editor *v3;
  void *v4;
  WebCore::Editor *v5;
  void *v6;
  WebCore::Editor *v7;
  uint64_t v8;
  void *v9;
  WebCore::CompositeEditCommand *v10;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(WebCore::Editor **)(v2 + 3056);
  if (!v3)
  {
    v10 = v1;
    v5 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v5, (WebCore::Document *)v2);
    v7 = *(WebCore::Editor **)(v2 + 3056);
    *(_QWORD *)(v2 + 3056) = v5;
    if (v7)
    {
      WebCore::Editor::~Editor(v7, v6);
      if (*(_DWORD *)v8)
      {
        *(_QWORD *)(v8 + 496) = 0;
        *(_OWORD *)(v8 + 464) = 0u;
        *(_OWORD *)(v8 + 480) = 0u;
        *(_OWORD *)(v8 + 432) = 0u;
        *(_OWORD *)(v8 + 448) = 0u;
        *(_OWORD *)(v8 + 400) = 0u;
        *(_OWORD *)(v8 + 416) = 0u;
        *(_OWORD *)(v8 + 368) = 0u;
        *(_OWORD *)(v8 + 384) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        *(_OWORD *)(v8 + 352) = 0u;
        *(_OWORD *)(v8 + 304) = 0u;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 272) = 0u;
        *(_OWORD *)(v8 + 288) = 0u;
        *(_OWORD *)(v8 + 240) = 0u;
        *(_OWORD *)(v8 + 256) = 0u;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 192) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)v8 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v8, v9);
      }
    }
    v3 = *(WebCore::Editor **)(v2 + 3056);
    v1 = v10;
  }
  WebCore::Editor::appliedEditing(v3, v1);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
}

unsigned int *WebCore::CompositeEditCommand::targetRanges@<X0>(WebCore::CompositeEditCommand *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;
  uint64_t v4;
  WebCore::Node *v5;
  void *v6;
  int v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  int v12;
  char v13;

  result = (unsigned int *)WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*((_QWORD *)this + 2) + 3064) + 56), &v9);
  if (v13)
  {
    v4 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = v9;
    *(_DWORD *)(v4 + 24) = v10;
    v5 = v11;
    v9 = 0;
    v11 = 0;
    *(_QWORD *)(v4 + 32) = v5;
    *(_DWORD *)(v4 + 40) = v12;
    *(_QWORD *)v4 = off_1E33A7EF0;
    result = (unsigned int *)WTF::fastMalloc((WTF *)8);
    a2[1] = (unsigned int *)0x100000001;
    *a2 = result;
    v7 = *(_DWORD *)(v4 + 8);
    *(_QWORD *)result = v4;
    *(_DWORD *)(v4 + 8) = v7 + 1;
    if (v7)
      *(_DWORD *)(v4 + 8) = v7;
    else
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v13)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v6);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      result = (unsigned int *)v9;
      v9 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void WebCore::CompositeEditCommand::inputEventDataTransfer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CompositeEditCommand::preservesTypingStyle(WebCore::CompositeEditCommand *this)
{
  return 0;
}

uint64_t WebCore::CompositeEditCommand::isTypingCommand(WebCore::CompositeEditCommand *this)
{
  return 0;
}

uint64_t WebCore::CompositeEditCommand::shouldRetainAutocorrectionIndicator(WebCore::CompositeEditCommand *this)
{
  return 0;
}

uint64_t WebCore::CompositeEditCommand::inputEventTypeName@<X0>(WebCore::CompositeEditCommand *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
  result = (uint64_t)WebCore::inputTypeNameForEditingAction(v3);
  if (v5 >= 2)
  {
    result = WTF::AtomStringImpl::add();
    v6 = v7;
  }
  else
  {
    v6 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *a2 = v6;
  return result;
}

uint64_t WebCore::CompositeEditCommand::isInputMethodComposing(WebCore::CompositeEditCommand *this)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
  return (v1 < 0x37) & (0x48880000000000uLL >> v1);
}

uint64_t WebCore::CompositeEditCommand::applyCommandToComposite(WebCore::CompositeEditCommand *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t **v25;
  uint64_t *v26;
  WebCore::CompositeEditCommand *v27;

  v4 = *a2;
  if (a1)
  {
    ++*((_DWORD *)a1 + 2);
    v27 = a1;
    WebCore::EditCommand::setParent(v4, (uint64_t *)&v27);
    if (*((_DWORD *)a1 + 2) == 1)
      (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a1 + 8))(a1);
    else
      --*((_DWORD *)a1 + 2);
  }
  else
  {
    v27 = 0;
    WebCore::EditCommand::setParent(v4, (uint64_t *)&v27);
  }
  (*(void (**)(uint64_t *))(**a2 + 48))(*a2);
  result = (*(uint64_t (**)(uint64_t *))(**a2 + 32))(*a2);
  if ((_DWORD)result)
  {
    v6 = *a2;
    v27 = 0;
    WebCore::EditCommand::setParent(v6, (uint64_t *)&v27);
    result = WebCore::CompositeEditCommand::ensureComposition(a1);
    v7 = result;
    v8 = *a2;
    v9 = *(unsigned int *)(result + 244);
    if ((_DWORD)v9 == *(_DWORD *)(result + 240))
    {
      v10 = v9 + (v9 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v9 + 1)
        v12 = v9 + 1;
      else
        v12 = v11;
      if (v12 >> 29)
        goto LABEL_40;
      v13 = *(void **)(result + 232);
      v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(v7 + 240) = v12;
      *(_QWORD *)(v7 + 232) = v14;
      result = (uint64_t)memcpy(v14, v13, 8 * v9);
      if (v13)
      {
        if (*(void **)(v7 + 232) == v13)
        {
          *(_QWORD *)(v7 + 232) = 0;
          *(_DWORD *)(v7 + 240) = 0;
        }
        result = WTF::fastFree((WTF *)v13, v15);
      }
      v9 = *(unsigned int *)(v7 + 244);
      v16 = *(_QWORD *)(v7 + 232);
      if (v8)
        ++*((_DWORD *)v8 + 2);
      v17 = (uint64_t **)(v16 + 8 * v9);
    }
    else
    {
      v17 = (uint64_t **)(*(_QWORD *)(result + 232) + 8 * v9);
      if (v8)
        ++*((_DWORD *)v8 + 2);
    }
    *v17 = v8;
    *(_DWORD *)(v7 + 244) = v9 + 1;
  }
  v18 = *((unsigned int *)a1 + 67);
  if ((_DWORD)v18 != *((_DWORD *)a1 + 66))
  {
    v25 = (uint64_t **)(*((_QWORD *)a1 + 32) + 8 * v18);
    goto LABEL_37;
  }
  v19 = v18 + (v18 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= v18 + 1)
    v21 = v18 + 1;
  else
    v21 = v20;
  if (v21 >> 29)
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x195A8AF24);
  }
  v22 = (void *)*((_QWORD *)a1 + 32);
  v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
  *((_DWORD *)a1 + 66) = v21;
  *((_QWORD *)a1 + 32) = v23;
  result = (uint64_t)memcpy(v23, v22, 8 * v18);
  if (v22)
  {
    if (*((void **)a1 + 32) == v22)
    {
      *((_QWORD *)a1 + 32) = 0;
      *((_DWORD *)a1 + 66) = 0;
    }
    result = WTF::fastFree((WTF *)v22, v24);
  }
  v18 = *((unsigned int *)a1 + 67);
  v25 = (uint64_t **)(*((_QWORD *)a1 + 32) + 8 * v18);
LABEL_37:
  v26 = *a2;
  *a2 = 0;
  *v25 = v26;
  *((_DWORD *)a1 + 67) = v18 + 1;
  return result;
}

uint64_t WebCore::CompositeEditCommand::applyCommandToComposite(uint64_t a1, WebCore::EditCommand **a2, const WebCore::VisibleSelection *a3)
{
  WebCore::EditCommand *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  WebCore::EditCommand **v15;
  WebCore::EditCommand *v16;
  uint64_t v17;

  v6 = *a2;
  if (a1)
  {
    ++*(_DWORD *)(a1 + 8);
    v17 = a1;
    WebCore::EditCommand::setParent((uint64_t *)v6, &v17);
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
  else
  {
    v17 = 0;
    WebCore::EditCommand::setParent((uint64_t *)v6, &v17);
  }
  if ((WebCore::operator==((uint64_t)a3, (uint64_t)*a2 + 128) & 1) == 0)
  {
    WebCore::EditCommand::setStartingSelection(*a2, a3);
    WebCore::EditCommand::setEndingSelection((uint64_t *)*a2, a3);
  }
  result = (*(uint64_t (**)(WebCore::EditCommand *))(*(_QWORD *)*a2 + 48))(*a2);
  v8 = *(unsigned int *)(a1 + 268);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 264))
  {
    v15 = (WebCore::EditCommand **)(*(_QWORD *)(a1 + 256) + 8 * v8);
LABEL_20:
    v16 = *a2;
    *a2 = 0;
    *v15 = v16;
    *(_DWORD *)(a1 + 268) = v8 + 1;
    return result;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = *(void **)(a1 + 256);
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a1 + 264) = v11;
    *(_QWORD *)(a1 + 256) = v13;
    result = (uint64_t)memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if (*(void **)(a1 + 256) == v12)
      {
        *(_QWORD *)(a1 + 256) = 0;
        *(_DWORD *)(a1 + 264) = 0;
      }
      result = WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *(unsigned int *)(a1 + 268);
    v15 = (WebCore::EditCommand **)(*(_QWORD *)(a1 + 256) + 8 * v8);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::CompositeEditCommand::applyStyle(WebCore::CompositeEditCommand *a1, WebCore::EditingStyle *a2, char a3)
{
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *result;
  WebCore::Node *v11;
  uint64_t *v12;

  v6 = (WebCore::Node *)*((_QWORD *)a1 + 2);
  *((_DWORD *)v6 + 6) += 2;
  v11 = v6;
  v7 = WTF::fastMalloc((WTF *)0x168);
  v8 = WebCore::EditCommand::EditCommand(v7, (uint64_t *)&v11, a3);
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_QWORD *)v8 = off_1E33A9688;
  WebCore::EditingStyle::copy(a2, (uint64_t *)&v12);
  *(_QWORD *)(v7 + 280) = v12;
  *(_BYTE *)(v7 + 288) = 0;
  WebCore::Position::downstream(v7 + 192, (WebCore::Node *)1, v7 + 296);
  WebCore::Position::upstream(v7 + 208, (WebCore::Node *)1, v7 + 312);
  *(_BYTE *)(v7 + 328) = 1;
  *(_QWORD *)(v7 + 336) = 0;
  *(_BYTE *)(v7 + 344) = 0;
  *(_QWORD *)(v7 + 352) = 0;
  v12 = (uint64_t *)v7;
  WebCore::CompositeEditCommand::applyCommandToComposite(a1, &v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)(void))(*v12 + 8))();
    else
      --*((_DWORD *)v12 + 2);
  }
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::applyStyle(WebCore::CompositeEditCommand *a1, WebCore::EditingStyle *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  void *v17;
  unsigned int *result;
  WebCore::Node *v19;
  uint64_t *v20;

  v10 = (WebCore::Node *)*((_QWORD *)a1 + 2);
  *((_DWORD *)v10 + 6) += 2;
  v19 = v10;
  v11 = WTF::fastMalloc((WTF *)0x168);
  v12 = WebCore::EditCommand::EditCommand(v11, (uint64_t *)&v19, a5);
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_QWORD *)v12 = off_1E33A9688;
  WebCore::EditingStyle::copy(a2, (uint64_t *)&v20);
  *(_QWORD *)(v11 + 280) = v20;
  *(_BYTE *)(v11 + 288) = 0;
  v13 = *a3;
  if (*a3)
    *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(v11 + 296) = v13;
  v14 = *((_DWORD *)a3 + 2);
  *(_BYTE *)(v11 + 308) = *((_BYTE *)a3 + 12);
  *(_DWORD *)(v11 + 304) = v14;
  v15 = *a4;
  if (*a4)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)(v11 + 312) = v15;
  v16 = *((_DWORD *)a4 + 2);
  *(_BYTE *)(v11 + 324) = *((_BYTE *)a4 + 12);
  *(_DWORD *)(v11 + 320) = v16;
  *(_BYTE *)(v11 + 328) = 0;
  *(_QWORD *)(v11 + 336) = 0;
  *(_BYTE *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = 0;
  v20 = (uint64_t *)v11;
  WebCore::CompositeEditCommand::applyCommandToComposite(a1, &v20);
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
      (*(void (**)(void))(*v20 + 8))();
    else
      --*((_DWORD *)v20 + 2);
  }
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v17);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::insertParagraphSeparator(WebCore::CompositeEditCommand *this, char a2, char a3)
{
  WebCore::Node *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *result;
  WebCore::Node *v12;
  uint64_t *v13;

  v6 = (WebCore::Node *)*((_QWORD *)this + 2);
  *((_DWORD *)v6 + 6) += 2;
  v12 = v6;
  v7 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
  v8 = WTF::fastMalloc((WTF *)0x128);
  v9 = WebCore::EditCommand::EditCommand(v8, (uint64_t *)&v12, v7);
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_QWORD *)v9 = off_1E33AD020;
  *(_QWORD *)(v9 + 280) = 0;
  *(_BYTE *)(v9 + 288) = a2;
  *(_BYTE *)(v9 + 289) = a3;
  v13 = (uint64_t *)v9;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, &v13);
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(void))(*v13 + 8))();
    else
      --*((_DWORD *)v13 + 2);
  }
  result = (unsigned int *)v12;
  v12 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::CompositeEditCommand::isRemovableBlock(WebCore::CompositeEditCommand *this, const WebCore::Node *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  __int16 v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = *((_WORD *)a2 + 14);
  if ((v5 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
    return 0;
  *((_DWORD *)a2 + 6) += 2;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9 || v9 != *(_QWORD *)(v7 + 88))
    {
      v10 = 0;
      if (v8)
      {
LABEL_7:
        *(_DWORD *)(v7 + 24) = v8;
        goto LABEL_8;
      }
LABEL_22:
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      goto LABEL_8;
    }
    v12 = *((_QWORD *)a2 + 13);
    if (!v12)
      goto LABEL_26;
    if ((*(_BYTE *)(v12 + 4) & 8) != 0)
    {
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(a2, (unsigned __int8 *)a2, a5, a3, a4);
      if ((*((_WORD *)a2 + 14) & 0x20) == 0)
      {
LABEL_16:
        v13 = *((_QWORD *)a2 + 13);
        if (v13)
        {
          v14 = *(_DWORD *)(v13 + 4);
          if ((v14 & 1) != 0)
            v15 = *(_DWORD *)(v13 + 52);
          else
            v15 = v14 >> 5;
          v10 = v15 == 0;
LABEL_21:
          v16 = *(_DWORD *)(v7 + 24);
          v8 = v16 - 2;
          if (v16 != 2)
            goto LABEL_7;
          goto LABEL_22;
        }
LABEL_26:
        v10 = 1;
        goto LABEL_21;
      }
    }
    else if ((v5 & 0x20) == 0)
    {
      goto LABEL_16;
    }
    WebCore::SVGElement::synchronizeAllAttributes(a2);
    goto LABEL_16;
  }
  v10 = 0;
LABEL_8:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return v10;
}

uint64_t WebCore::CompositeEditCommand::removeChildrenInRange(uint64_t this, WebCore::Node *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;

  if ((*((_WORD *)a2 + 14) & 4) != 0)
  {
    v5 = this;
    v6 = *((_QWORD *)a2 + 10);
    if (a3 && v6)
    {
      v7 = a3 - 1;
      do
      {
        v6 = *(_QWORD *)(v6 + 56);
        v8 = v7-- != 0;
        v9 = v8;
      }
      while (v6 && (v9 & 1) != 0);
    }
    if (v6)
    {
      v10 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v10 + 2;
      if (a3 >= a4)
      {
        if (v10)
        {
          *(_DWORD *)(v6 + 24) = v10;
          return this;
        }
        v22 = 0;
        v13 = 0;
        v23 = 1;
LABEL_50:
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = a3 + 1;
        do
        {
          if (v11 == v12)
          {
            v15 = v11 + (v11 >> 2);
            if (v15 >= 0x10)
              v16 = v15 + 1;
            else
              v16 = 16;
            if (v16 <= v11 + 1)
              v12 = v11 + 1;
            else
              v12 = v16;
            if (v12 >> 29)
            {
              __break(0xC471u);
              return this;
            }
            v17 = (char *)WTF::fastMalloc((WTF *)(8 * v12));
            v12 = v12;
            this = (uint64_t)memcpy(v17, v13, 8 * v11);
            if (v13)
            {
              if (v17 == v13)
              {
                v17 = 0;
                v12 = 0;
              }
              this = WTF::fastFree((WTF *)v13, a2);
            }
            v13 = v17;
            v18 = *(_DWORD *)(v6 + 24) + 2;
            *(_DWORD *)(v6 + 24) = v18;
            *(_QWORD *)&v17[8 * v11++] = v6;
          }
          else
          {
            v18 = *(_DWORD *)(v6 + 24) + 2;
            *(_DWORD *)(v6 + 24) = v18;
            *(_QWORD *)&v13[8 * v11++] = v6;
          }
          v19 = *(_QWORD *)(v6 + 56);
          if (v19)
          {
            *(_DWORD *)(v19 + 24) += 2;
            v18 = *(_DWORD *)(v6 + 24);
          }
          v20 = v18 - 2;
          if (v20)
          {
            *(_DWORD *)(v6 + 24) = v20;
          }
          else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          {
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          if (!v19)
            break;
          v6 = v19;
          v8 = v14++ >= a4;
        }
        while (!v8);
        v21 = v11;
        v22 = (uint64_t *)&v13[8 * v11];
        v23 = v11 == 0;
        if (v21)
        {
          v24 = 8 * v21;
          v25 = (uint64_t *)v13;
          do
          {
            v26 = *v25++;
            this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, v26, 1);
            v24 -= 8;
          }
          while (v24);
        }
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            v6 = v19;
            goto LABEL_50;
          }
          *(_DWORD *)(v19 + 24) -= 2;
          if (v21)
            goto LABEL_53;
          goto LABEL_46;
        }
      }
      if (!v23)
      {
LABEL_53:
        v27 = (uint64_t *)v13;
        do
        {
          this = *v27;
          *v27 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 2)
            {
              if ((*(_WORD *)(this + 30) & 0x400) == 0)
                this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
            }
            else
            {
              *(_DWORD *)(this + 24) -= 2;
            }
          }
          ++v27;
        }
        while (v27 != v22);
      }
LABEL_46:
      if (v13)
        return WTF::fastFree((WTF *)v13, a2);
    }
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::removeNodeAndPruneAncestors(WebCore::CompositeEditCommand *this, WebCore::Node *a2)
{
  uint64_t v3;
  WebCore::Node *v4;
  unsigned int *result;
  WebCore::Node *v6;
  WebCore::Node *v7;

  v3 = *((_QWORD *)a2 + 4);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 184))(this);
  result = WebCore::highestNodeToRemoveInPruning((unsigned int *)v3, v4, (unsigned int **)&v7);
  v6 = v7;
  if (v7)
  {
    (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, v7, 1);
    result = (unsigned int *)v7;
    v7 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::wrapContentsInDummySpan(WebCore::CompositeEditCommand *this, WebCore::Element *a2)
{
  WebCore::Node *v4;
  WebCore::Node *v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *result;
  WebCore::Node *v9;

  v4 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x108);
  v5 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v5 + 6) += 2;
  v9 = v5;
  *(_QWORD *)WebCore::EditCommand::EditCommand((uint64_t)v4, (uint64_t *)&v9, 59) = off_1E33A9E80;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  *(_QWORD *)v4 = off_1E33AE1C0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v4 + 31) = a2;
  *((_QWORD *)v4 + 32) = 0;
  v9 = v4;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v9);
  result = v9;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
    else
      --*((_DWORD *)v9 + 2);
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::inputText(WebCore::CompositeEditCommand *this, WebCore::Node **a2, int a3)
{
  int v5;
  int v6;
  WebCore::VisiblePosition *v7;
  const WebCore::VisiblePosition *v8;
  void *v9;
  unsigned int *result;
  unsigned int v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  int16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t *v27;
  __int8 *v28;
  int16x8_t v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WebCore::Node *v34;
  int v35;
  const WebCore::VisiblePosition *v36;
  WebCore::Node *v37;
  void *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  void *v41;
  WebCore::Node *v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(WebCore::InsertLineBreakCommand *__hidden);
  uint64_t v46;
  void *v47;
  int v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  uint64_t v51;
  WebCore::Node *v52;
  void *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  void *v58;
  WebCore::Node *v59;
  unsigned int v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  char v65;
  WebCore::Node *v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  char v72;
  unsigned int *v73;
  _QWORD v74[3];

  if (*a2)
    v5 = *((_DWORD *)*a2 + 1);
  else
    v5 = 0;
  v73 = 0;
  if (*((_BYTE *)this + 225) == 2)
  {
    v7 = (WebCore::CompositeEditCommand *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v69);
    v72 = 1;
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 224);
    v7 = (WebCore::CompositeEditCommand *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v69);
    v72 = 1;
    if (!v6)
    {
      v57 = v69;
      if (v69)
      {
        *((_DWORD *)v69 + 6) += 2;
        v62 = v57;
        v63 = v70;
        v64 = v71;
        v65 = 0;
        if (!WebCore::inSameLine((WebCore *)&v69, (const WebCore::VisiblePosition *)&v62, v8))
          v72 = 0;
        v59 = v62;
        v62 = 0;
        if (v59)
        {
          if (*((_DWORD *)v59 + 6) == 2)
          {
            if ((*((_WORD *)v59 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v59, v58);
          }
          else
          {
            *((_DWORD *)v59 + 6) -= 2;
          }
        }
      }
    }
  }
  v61 = WebCore::indexForVisiblePosition((uint64_t *)&v69, (uint64_t)&v73);
  result = (unsigned int *)v69;
  v69 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v11 = 0;
  do
  {
    v12 = *a2;
    if (!*a2)
      goto LABEL_40;
    LODWORD(v13) = v11;
    v14 = *((_QWORD *)v12 + 1);
    v15 = *((unsigned int *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      if (v15 <= v11)
        goto LABEL_40;
      v16 = v15 - v11;
      v17 = 16;
      if (v16 < 0x10)
        v17 = v16;
      if (v17)
      {
        v18 = v17;
        v19 = (_BYTE *)(v14 + v11);
        while (*v19 != 10)
        {
          ++v19;
          if (!--v18)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        if (v16 < 0x11)
          goto LABEL_40;
        v19 = memchr((void *)(v14 + v11 + v17), 10, v16 - v17);
        if (!v19)
          goto LABEL_40;
      }
      v20 = (uint64_t)&v19[-v14];
      goto LABEL_21;
    }
    if (v15 > v11)
    {
      v22 = (int16x8_t *)(v14 + 2 * v11);
      v23 = v14 + 2 * v15;
      v24 = v23 - (_QWORD)v22;
      if ((uint64_t)(v23 - (_QWORD)v22) <= -2)
      {
        __break(1u);
        return result;
      }
      if (v24 <= 0x3E)
      {
        while (v22->i16[0] != 10)
        {
          v22 = (int16x8_t *)((char *)v22 + 2);
          v24 -= 2;
          if (!v24)
            goto LABEL_40;
        }
      }
      else
      {
        if ((unint64_t)&v22->u64[1] + 6 >= v23)
        {
          v27 = (int16x8_t *)(v14 + 2 * v11);
LABEL_35:
          if ((unint64_t)v27 >= v23)
            goto LABEL_40;
          v22 = (int16x8_t *)(v23 - 16);
          v29.i64[0] = 0xA000A000A000ALL;
          v29.i64[1] = 0xA000A000A000ALL;
          v26 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v23 - 16), v29);
          v29.i16[0] = vmaxvq_u16((uint16x8_t)v26);
          if (!v29.i32[0])
            goto LABEL_40;
        }
        else
        {
          while (1)
          {
            v25.i64[0] = 0xA000A000A000ALL;
            v25.i64[1] = 0xA000A000A000ALL;
            v26 = (int8x16_t)vceqq_s16(*v22, v25);
            v25.i16[0] = vmaxvq_u16((uint16x8_t)v26);
            if (v25.i32[0])
              break;
            v27 = v22 + 1;
            v28 = &v22[1].i8[14];
            ++v22;
            if ((unint64_t)v28 >= v23)
              goto LABEL_35;
          }
        }
        v22 = (int16x8_t *)((char *)v22
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v26)));
      }
      if (v22 != (int16x8_t *)v23)
      {
        v20 = ((uint64_t)v22->i64 - v14) >> 1;
LABEL_21:
        v21 = v20 - v11;
        if (v20 == v11)
          goto LABEL_57;
        if (v20 != -1)
        {
          v13 = v20;
          goto LABEL_41;
        }
      }
    }
LABEL_40:
    v21 = v5 - v11;
    v13 = -1;
LABEL_41:
    v30 = (WebCore::Node *)*((_QWORD *)this + 2);
    *((_DWORD *)v30 + 6) += 2;
    v69 = v30;
    if (v12)
    {
      if (v11 || *((_DWORD *)v12 + 1) > v21)
      {
        WTF::StringImpl::substring(v12);
        v12 = v62;
      }
      else
      {
        *(_DWORD *)v12 += 2;
      }
    }
    v31 = WTF::fastMalloc((WTF *)0x130);
    v32 = WebCore::EditCommand::EditCommand(v31, (uint64_t *)&v69, 14);
    *(_OWORD *)(v32 + 248) = 0u;
    *(_OWORD *)(v32 + 264) = 0u;
    *(_QWORD *)v32 = off_1E33AD0F0;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)(v32 + 280) = v12;
    *(_BYTE *)(v32 + 288) = 0;
    *(_DWORD *)(v32 + 292) = 0;
    *(_QWORD *)(v32 + 296) = 0;
    v62 = (WebCore::Node *)v32;
    WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v62);
    if (v62)
    {
      if (*((_DWORD *)v62 + 2) == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v62 + 8))();
        if (!v12)
          goto LABEL_53;
        goto LABEL_51;
      }
      --*((_DWORD *)v62 + 2);
    }
    if (!v12)
      goto LABEL_53;
LABEL_51:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v33);
    else
      *(_DWORD *)v12 -= 2;
LABEL_53:
    v34 = v69;
    v69 = 0;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v33);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    if (v13 == -1)
      break;
LABEL_57:
    if (*((_BYTE *)this + 225) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition(v7, (uint64_t)&v69);
      v72 = 1;
LABEL_59:
      v37 = v69;
      if (v69)
        *((_DWORD *)v69 + 6) += 2;
      goto LABEL_61;
    }
    v35 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition(v7, (uint64_t)&v69);
    v72 = 1;
    if (v35)
      goto LABEL_59;
    v37 = v69;
    if (v69)
    {
      *((_DWORD *)v69 + 6) += 2;
      v62 = v37;
      v63 = v70;
      v64 = v71;
      v65 = 0;
      if (!WebCore::inSameLine((WebCore *)&v69, (const WebCore::VisiblePosition *)&v62, v36))
        v72 = 0;
      v54 = v62;
      v62 = 0;
      if (v54)
      {
        if (*((_DWORD *)v54 + 6) == 2)
        {
          if ((*((_WORD *)v54 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v54, v53);
        }
        else
        {
          *((_DWORD *)v54 + 6) -= 2;
        }
      }
      goto LABEL_59;
    }
LABEL_61:
    v62 = v37;
    v63 = v70;
    v64 = v71;
    WebCore::enclosingNodeOfType((uint64_t)&v62, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 1, (uint64_t *)&v66);
    v39 = v66;
    v66 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v38);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    v40 = v62;
    v62 = 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 6) == 2)
      {
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v40, v38);
      }
      else
      {
        *((_DWORD *)v40 + 6) -= 2;
      }
    }
    if (v39)
    {
      WebCore::previousVisuallyDistinctCandidate(&v69, (uint64_t)v74);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v74))
      {
        v67 = 0;
        v68 = 0;
        v66 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v74, (uint64_t)&v62);
        v66 = v62;
        LODWORD(v67) = v63;
        BYTE4(v67) = v64;
      }
      LOBYTE(v68) = 1;
      v46 = v74[0];
      v74[0] = 0;
      if (v46)
      {
        if (*(_DWORD *)(v46 + 24) == 2)
        {
          if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v46, v41);
        }
        else
        {
          *(_DWORD *)(v46 + 24) -= 2;
        }
      }
      v48 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v66);
      v49 = v66;
      v66 = 0;
      if (v49)
      {
        if (*((_DWORD *)v49 + 6) == 2)
        {
          if ((*((_WORD *)v49 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v49, v47);
        }
        else
        {
          *((_DWORD *)v49 + 6) -= 2;
        }
      }
      if (v48 == 32)
      {
        if (v11 | v61)
        {
          if (!v5)
            v5 = -1;
        }
        else
        {
          v61 = -1;
        }
      }
      v50 = (WebCore::Node *)*((_QWORD *)this + 2);
      *((_DWORD *)v50 + 6) += 2;
      v66 = v50;
      v51 = WTF::fastMalloc((WTF *)0x118);
      v44 = WebCore::EditCommand::EditCommand(v51, (uint64_t *)&v66, 59);
      *(_OWORD *)(v44 + 248) = 0u;
      *(_OWORD *)(v44 + 264) = 0u;
      v45 = off_1E33A9758;
    }
    else
    {
      v42 = (WebCore::Node *)*((_QWORD *)this + 2);
      *((_DWORD *)v42 + 6) += 2;
      v66 = v42;
      v43 = WTF::fastMalloc((WTF *)0x118);
      v44 = WebCore::EditCommand::EditCommand(v43, (uint64_t *)&v66, 59);
      *(_OWORD *)(v44 + 248) = 0u;
      *(_OWORD *)(v44 + 264) = 0u;
      v45 = off_1E33ACE28;
    }
    *(_QWORD *)v44 = v45;
    v62 = (WebCore::Node *)v44;
    WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v62);
    if (v62)
    {
      if (*((_DWORD *)v62 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v62 + 8))();
      else
        --*((_DWORD *)v62 + 2);
    }
    v52 = v66;
    v66 = 0;
    if (v52)
    {
      if (*((_DWORD *)v52 + 6) == 2)
      {
        if ((*((_WORD *)v52 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v52, v33);
      }
      else
      {
        *((_DWORD *)v52 + 6) -= 2;
      }
    }
    result = (unsigned int *)v69;
    v69 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v11 = v13 + 1;
  }
  while ((_DWORD)v13 + 1 != v5);
  if (a3)
  {
    WebCore::visiblePositionForIndex((unsigned int *)v61, (uint64_t)v73, 1, &v69);
    WebCore::visiblePositionForIndex((unsigned int *)(v5 + v61), (uint64_t)v73, 1, &v66);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v62, (const WebCore::VisiblePosition *)&v69, (const WebCore::VisiblePosition *)&v66, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v62);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v62);
    v55 = v66;
    v66 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55, v33);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
    v56 = v69;
    v69 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56, v33);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::deleteTextFromNode(WebCore::CompositeEditCommand *this, WebCore::Text *a2, int a3, int a4)
{
  char v8;
  uint64_t v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *result;
  WebCore::Node *v13;

  *((_DWORD *)a2 + 6) += 2;
  v8 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
  v9 = WTF::fastMalloc((WTF *)0x110);
  v10 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v10 + 6) += 2;
  v13 = v10;
  *(_QWORD *)WebCore::EditCommand::EditCommand(v9, (uint64_t *)&v13, v8) = off_1E33A9E80;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v11);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  *(_QWORD *)v9 = off_1E33A9D10;
  *(_QWORD *)(v9 + 248) = a2;
  *(_DWORD *)(v9 + 256) = a3;
  *(_DWORD *)(v9 + 260) = a4;
  *(_QWORD *)(v9 + 264) = 0;
  v13 = (WebCore::Node *)v9;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v13);
  result = v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
    else
      --*((_DWORD *)v13 + 2);
  }
  return result;
}

WebCore::Node *WebCore::CompositeEditCommand::replaceTextInNode(WebCore::CompositeEditCommand *this, WebCore::Text *a2, int a3, int a4, const WTF::String *a5)
{
  uint64_t v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *result;
  char v14;
  uint64_t v15;
  WebCore::Node *v16;
  void *v17;
  WebCore::Node *v18;
  _DWORD *v19;
  WebCore::Node *v20;

  *((_DWORD *)a2 + 6) += 2;
  v10 = WTF::fastMalloc((WTF *)0x110);
  v11 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  *((_DWORD *)v11 + 6) += 2;
  v20 = v11;
  *(_QWORD *)WebCore::EditCommand::EditCommand(v10, (uint64_t *)&v20, 9) = off_1E33A9E80;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v12);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  *(_QWORD *)v10 = off_1E33A9D10;
  *(_QWORD *)(v10 + 248) = a2;
  *(_DWORD *)(v10 + 256) = a3;
  *(_DWORD *)(v10 + 260) = a4;
  *(_QWORD *)(v10 + 264) = 0;
  v20 = (WebCore::Node *)v10;
  WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v20);
  result = v20;
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
      result = (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8))();
    else
      --*((_DWORD *)v20 + 2);
  }
  if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    *((_DWORD *)a2 + 6) += 2;
    v14 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)this + 16))(this);
    v15 = WTF::fastMalloc((WTF *)0x110);
    v16 = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
    *((_DWORD *)v16 + 6) += 2;
    v20 = v16;
    *(_QWORD *)WebCore::EditCommand::EditCommand(v15, (uint64_t *)&v20, v14) = off_1E33A9E80;
    v18 = v20;
    v20 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v17);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    *(_QWORD *)v15 = off_1E33ACDD0;
    *(_QWORD *)(v15 + 248) = a2;
    *(_DWORD *)(v15 + 256) = a3;
    v19 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v19 += 2;
    *(_QWORD *)(v15 + 264) = v19;
    v20 = (WebCore::Node *)v15;
    WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v20);
    result = v20;
    if (v20)
    {
      if (*((_DWORD *)v20 + 2) == 1)
        return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8))();
      else
        --*((_DWORD *)v20 + 2);
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::replaceSelectedTextInNode@<X0>(unsigned int *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CompositeEditCommand *v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WebCore *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v4 = (WebCore::CompositeEditCommand *)this;
  v6 = *((_QWORD *)this + 24);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v7 = this[50];
  v8 = *((_BYTE *)this + 204);
  v9 = *((_QWORD *)this + 26);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  if (v6 && (v8 & 7u) <= 4)
  {
    v10 = v6;
    if (((1 << (v8 & 7)) & 0x19) == 0)
      v10 = *(_QWORD *)(v6 + 32);
  }
  else
  {
    v10 = 0;
  }
  if (v9 && (v11 = this[55] & 7, v11 <= 4))
  {
    v12 = 1 << v11;
    v13 = v9;
    if ((v12 & 0x19) == 0)
      v13 = *(_QWORD *)(v9 + 32);
  }
  else
  {
    v13 = 0;
  }
  if (!v6)
    goto LABEL_22;
  if (v10 != v13)
    goto LABEL_22;
  v14 = v8 & 7;
  if (v14 > 4)
    goto LABEL_22;
  v15 = this[54];
  v16 = v6;
  if (((1 << v14) & 0x19) == 0)
  {
    v16 = *(_QWORD *)(v6 + 32);
    if (!v16)
      goto LABEL_22;
  }
  if ((*(_WORD *)(v16 + 28) & 2) == 0)
    goto LABEL_22;
  if (v14 > 4)
  {
    v17 = 0;
  }
  else
  {
    v17 = (WebCore *)v6;
    if (((1 << v14) & 0x19) == 0)
      v17 = *(WebCore **)(v6 + 32);
  }
  this = (unsigned int *)WebCore::parentTabSpanNode(v17, a2);
  if (!this)
  {
    if (!v14 && (*(_WORD *)(v6 + 28) & 2) != 0)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v18 = v6;
    }
    else
    {
      v18 = 0;
    }
    this = (unsigned int *)WebCore::CompositeEditCommand::replaceTextInNode(v4, (WebCore::Text *)v18, v7, v15 - v7, a2);
    v19 = *(_DWORD *)(v18 + 24);
    *(_DWORD *)(v18 + 24) = v19 + 2;
    v20 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v20) = *(_DWORD *)(v20 + 4);
    *(_QWORD *)a3 = v18;
    *(_DWORD *)(a3 + 8) = v20 + v7;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    if (v19)
    {
      *(_DWORD *)(v18 + 24) = v19;
    }
    else if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
    }
  }
  else
  {
LABEL_22:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
  }
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers(WebCore::CompositeEditCommand *this, WebCore::Text *a2, int a3, int a4, const WTF::String *a5)
{
  WebCore::Document *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  unsigned int v39;
  WTF *v40;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  WTF *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  void *v58;
  WebCore::Node *v59;
  unsigned int *result;
  const WTF::String *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::Node *v66;
  int v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  WTF *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  int v75;
  WTF *v76;
  int v77;
  unsigned int v78;
  _BYTE v79[16];
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a2 + 6) += 4;
  v66 = a2;
  v67 = a3;
  v68 = a2;
  v69 = a4 + a3;
  v10 = (WebCore::Document *)*((_QWORD *)this + 2);
  v11 = *((_QWORD *)v10 + 187);
  if (!v11)
    v11 = WebCore::Document::ensureMarkers(v10);
  v62 = 0;
  v63 = 0;
  v12 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = off_1E33A3BE8;
  *((_QWORD *)v12 + 1) = &v62;
  v71 = v12;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v11, (uint64_t *)&v66, 229375, &v71);
  (*(void (**)(WTF *))(*(_QWORD *)v12 + 8))(v12);
  v64 = 0;
  v65 = 0;
  if (HIDWORD(v63))
  {
    if (HIDWORD(v63) < 0x199999A)
    {
      v14 = 160 * HIDWORD(v63);
      v15 = WTF::fastMalloc((WTF *)(160 * HIDWORD(v63)));
      LODWORD(v65) = (v14 & 0xFFFFFFE0) / 0xA0;
      v64 = v15;
      if (!HIDWORD(v63))
        goto LABEL_46;
      v61 = a5;
      v16 = 0;
      while (1)
      {
        v17 = *((_QWORD *)v62 + v16);
        if (v17)
          v18 = *(_QWORD *)(v17 + 8);
        else
          v18 = 0;
        v71 = 0;
        v19 = *(_DWORD *)(v18 + 16);
        v72 = *(_QWORD *)(v18 + 8);
        v73 = v19;
        v74[0] = 0;
        v75 = -1;
        v20 = *(unsigned int *)(v18 + 96);
        if ((_DWORD)v20 != -1)
        {
          ((void (*)(char *, _BYTE *, uint64_t))off_1E33A99A0[v20])(&v70, v74, v18 + 32);
          v75 = v20;
        }
        v21 = *(unsigned int *)(v18 + 124);
        v76 = (WTF *)v79;
        v77 = 1;
        v78 = v21;
        if (v21 >= 2)
          break;
        v22 = (WTF *)v79;
        if ((_DWORD)v21)
          goto LABEL_17;
LABEL_19:
        v80 = *(_OWORD *)(v18 + 144);
        v26 = HIDWORD(v65);
        v27 = v64;
        v28 = v64 + 160 * HIDWORD(v65);
        *(_QWORD *)v28 = 0;
        v29 = v72;
        *(_DWORD *)(v28 + 16) = v73;
        *(_QWORD *)(v28 + 8) = v29;
        *(_BYTE *)(v28 + 32) = 0;
        v13 = (void *)(v28 + 32);
        *(_DWORD *)(v28 + 96) = -1;
        v30 = v75;
        if (v75 != -1)
        {
          ((void (*)(char *, void *, _BYTE *))off_1E33A9968[v75])(&v70, v13, v74);
          *(_DWORD *)(v28 + 96) = v30;
        }
        v31 = v27 + 160 * v26;
        v32 = (_OWORD *)(v31 + 128);
        *(_QWORD *)(v31 + 112) = v31 + 128;
        v33 = v31 + 112;
        *(_QWORD *)(v33 + 8) = 1;
        v34 = v76;
        if (v76 == (WTF *)v79)
        {
          if (v78)
          {
            v36 = 16 * v78;
            v37 = (__int128 *)v79;
            do
            {
              v38 = *v37++;
              *v32++ = v38;
              v36 -= 16;
            }
            while (v36);
          }
        }
        else
        {
          v76 = (WTF *)v79;
          *(_QWORD *)v33 = v34;
          v35 = v77;
          v77 = 1;
          *(_DWORD *)(v33 + 8) = v35;
        }
        v39 = v78;
        v78 = 0;
        *(_DWORD *)(v33 + 12) = v39;
        *(_OWORD *)(v27 + 160 * v26 + 144) = v80;
        HIDWORD(v65) = v26 + 1;
        v40 = v76;
        if (v79 != (_BYTE *)v76 && v76 != 0)
        {
          v76 = 0;
          v77 = 0;
          WTF::fastFree(v40, v13);
        }
        if (v75 != -1)
          ((void (*)(char *, _BYTE *))off_1E33A9930[v75])(&v70, v74);
        v75 = -1;
        v42 = (unsigned int *)v71;
        if (v71)
        {
          *((_QWORD *)v71 + 1) = 0;
          v71 = 0;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v13);
          }
        }
        if (++v16 >= (unint64_t)HIDWORD(v63))
        {
          a5 = v61;
          if (HIDWORD(v63))
          {
            v45 = v62;
            v46 = (WTF *)((char *)v62 + 8 * HIDWORD(v63));
            do
            {
              v47 = *(unsigned int **)v45;
              *(_QWORD *)v45 = 0;
              if (v47)
              {
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  atomic_store(1u, v47);
                  WTF::fastFree((WTF *)v47, v13);
                }
              }
              v45 = (WTF *)((char *)v45 + 8);
            }
            while (v45 != v46);
          }
          goto LABEL_46;
        }
      }
      if (v21 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195A8CCE8);
      }
      v22 = (WTF *)WTF::fastMalloc((WTF *)(16 * v21));
      v77 = v21;
      v76 = v22;
      v21 = *(unsigned int *)(v18 + 124);
      if (!(_DWORD)v21)
        goto LABEL_19;
LABEL_17:
      v23 = *(__int128 **)(v18 + 112);
      v24 = 16 * v21;
      do
      {
        v25 = *v23++;
        *(_OWORD *)v22 = v25;
        v22 = (WTF *)((char *)v22 + 16);
        v24 -= 16;
      }
      while (v24);
      goto LABEL_19;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x195A8CCDCLL);
  }
LABEL_46:
  v50 = v62;
  if (v62)
  {
    v62 = 0;
    LODWORD(v63) = 0;
    WTF::fastFree(v50, v13);
  }
  WebCore::CompositeEditCommand::replaceTextInNode(this, a2, a3, a4, a5);
  v52 = *(_QWORD *)a5;
  if (*(_QWORD *)a5)
    LODWORD(v52) = *(_DWORD *)(v52 + 4);
  v69 = v52 + v67;
  if (HIDWORD(v65))
  {
    v53 = 160 * HIDWORD(v65);
    v54 = v64 + 32;
    do
    {
      v55 = *(_DWORD *)(v54 - 24);
      v56 = *(_QWORD *)(*((_QWORD *)v66 + 5) + 8);
      *(_DWORD *)(v56 + 24) += 2;
      v57 = *(uint64_t **)(v56 + 1496);
      if (!v57)
        v57 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v56);
      ++*(_DWORD *)v57;
      WebCore::DocumentMarkerController::addMarker(v57, (const WebCore::SimpleRange *)&v66, v55, v54);
      if (!*(_DWORD *)v57)
        goto LABEL_74;
      --*(_DWORD *)v57;
      if (*(_DWORD *)(v56 + 24) == 2)
      {
        if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v56, v51);
      }
      else
      {
        *(_DWORD *)(v56 + 24) -= 2;
      }
      v54 += 160;
      v53 -= 160;
    }
    while (v53);
  }
  WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v51);
  v59 = v68;
  v68 = 0;
  if (v59)
  {
    if (*((_DWORD *)v59 + 6) == 2)
    {
      if ((*((_WORD *)v59 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v59, v58);
    }
    else
    {
      *((_DWORD *)v59 + 6) -= 2;
    }
  }
  result = (unsigned int *)v66;
  v66 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v58);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::positionOutsideTabSpan@<X0>(WebCore::CompositeEditCommand *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  WebCore::Node *v7;
  unsigned int v8;
  WebCore *v9;
  WebCore *v10;
  uint64_t v11;
  WebCore::RenderObject *v12;
  uint64_t v13;
  WebCore *v14;
  int v15;
  uint64_t v16;
  WebCore *v17;
  unsigned int v18;
  signed int v19;
  __int16 v20;
  uint64_t v21;
  signed int v22;
  WebCore *v23;
  void *v24;
  uint64_t v25;

  result = (unsigned int *)WebCore::parentTabSpanNode(*(WebCore **)a2, a2);
  if (result)
  {
    v8 = *((_BYTE *)a2 + 12) & 7;
    if (v8 - 3 >= 2)
    {
      if (v8 == 1)
        return (unsigned int *)WebCore::positionInParentBeforeNode(*(WebCore **)a2, v7, a3);
      if (v8 == 2)
        return (unsigned int *)WebCore::positionInParentAfterNode(*(_QWORD *)a2, v7, a3);
      v10 = *(WebCore **)a2;
      if (*(_QWORD *)a2)
      {
        if (v8 > 4)
        {
          v10 = 0;
        }
        else if (((1 << v8) & 0x19) == 0)
        {
          v10 = (WebCore *)*((_QWORD *)v10 + 4);
        }
      }
      v11 = WebCore::parentTabSpanNode(v10, v7);
      v13 = v11;
      if (v11)
        *(_DWORD *)(v11 + 24) += 2;
      v14 = *(WebCore **)a2;
      if ((*((_BYTE *)a2 + 12) & 7u) - 1 <= 1)
        v14 = (WebCore *)*((_QWORD *)v14 + 4);
      v15 = *((_DWORD *)a2 + 2);
      v16 = *((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL;
      if (v16)
        LODWORD(v16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 528))(v16);
      if (v15 > (int)v16)
      {
        v17 = *(WebCore **)a2;
        if (*(_QWORD *)a2)
        {
          v18 = *((_BYTE *)a2 + 12) & 7;
          if (v18 > 4)
          {
            v17 = 0;
          }
          else if (((1 << v18) & 0x19) == 0)
          {
            v17 = (WebCore *)*((_QWORD *)v17 + 4);
          }
        }
        v19 = *((_DWORD *)a2 + 2);
        v20 = *((_WORD *)v17 + 14);
        if ((v20 & 2) != 0 && (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A8CF94);
          }
          v22 = WebCore::RenderText::caretMaxOffset((WebCore::RenderText *)(*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL), v12);
        }
        else if ((v20 & 1) != 0)
        {
          v25 = *((_QWORD *)v17 + 10);
          if (v25)
            v22 = *(_DWORD *)(v25 + 4);
          else
            v22 = 0;
        }
        else if ((v20 & 4) != 0 && (v21 = *((_QWORD *)v17 + 10)) != 0)
        {
          v22 = 0;
          do
          {
            ++v22;
            v21 = *(_QWORD *)(v21 + 56);
          }
          while (v21);
        }
        else
        {
          v22 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v17 + 208))(v17) ^ 1;
        }
        if (v19 >= v22)
        {
          result = (unsigned int *)WebCore::positionInParentAfterNode(v13, v12, a3);
          if (!v13)
            return result;
LABEL_40:
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v13, v24);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
          return result;
        }
        v23 = *(WebCore **)a2;
        if ((*((_BYTE *)a2 + 12) & 7u) - 1 <= 1)
          v23 = (WebCore *)*((_QWORD *)v23 + 4);
        if ((*((_WORD *)v23 + 14) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195A8CF74);
        }
        WebCore::CompositeEditCommand::splitTextNodeContainingElement(this, v23, *((_DWORD *)a2 + 2));
      }
      result = (unsigned int *)WebCore::positionInParentBeforeNode((WebCore *)v13, v12, a3);
      if (!v13)
        return result;
      goto LABEL_40;
    }
  }
  v9 = *(WebCore **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v9 + 6) += 2;
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a3 + 12) = *((_BYTE *)a2 + 12);
  return result;
}

unsigned int *WebCore::CompositeEditCommand::textNodeForRebalance@<X0>(const WebCore::Position *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;

  if ((*((_BYTE *)a1 + 12) & 7) != 0)
  {
    *a2 = 0;
    return result;
  }
  v4 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_12;
  if ((*(_WORD *)(v4 + 28) & 2) == 0)
  {
    v4 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 80);
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
LABEL_12:
    *a2 = 0;
    if (!v4)
      return result;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  result = (unsigned int *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v6);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a1);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v8 = WebCore::ScriptDisallowedScope::s_count++;
  v9 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      goto LABEL_39;
    v10 = *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v10 + 1;
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 120);
    v12 = (v11 >> 27) & 7;
    v13 = (v11 & 0x40000000) == 0 && v12 == 3;
    v14 = v13 || v12 == 1;
    v15 = v14;
    v16 = v14 ? 0 : v4;
    *a2 = v16;
    if (v10 == -1)
    {
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x195A8D154);
    }
    if (!v15)
      v4 = 0;
    *(_DWORD *)(v9 + 16) = v10;
  }
  else
  {
    *a2 = v4;
    v4 = 0;
  }
  WebCore::ScriptDisallowedScope::s_count = v8;
  if (v4)
  {
LABEL_32:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, a1);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CompositeEditCommand::rebalanceWhitespaceAt(WebCore::CompositeEditCommand *this, const WebCore::Position *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  _WORD *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  result = (uint64_t)WebCore::CompositeEditCommand::textNodeForRebalance(a2, &v25);
  v6 = v25;
  if (v25)
  {
    if ((*((_BYTE *)a2 + 12) & 8) == 0 && ((v7 = *((_BYTE *)a2 + 12) & 7, v7 != 4) ? (v8 = v7 == 2) : (v8 = 1), v8))
    {
      v9 = *(_WORD **)a2;
      if (*(_QWORD *)a2)
      {
        v10 = *((_DWORD *)v9 + 6);
        *((_DWORD *)v9 + 6) = v10 + 2;
        v11 = v9[14];
        if ((v11 & 1) != 0)
        {
          v24 = *((_QWORD *)v9 + 10);
          if (v24)
            v13 = *(_DWORD *)(v24 + 4);
          else
            v13 = 0;
        }
        else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)v9 + 10)) != 0)
        {
          v13 = 0;
          do
          {
            ++v13;
            v12 = *(_QWORD *)(v12 + 56);
          }
          while (v12);
        }
        else
        {
          result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v9 + 208))(v9);
          v13 = result ^ 1;
          v10 = *((_DWORD *)v9 + 6) - 2;
        }
        if (v10)
        {
          *((_DWORD *)v9 + 6) = v10;
        }
        else if ((v9[15] & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
        }
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = *((_DWORD *)a2 + 2);
    }
    v14 = *(_QWORD *)(v6 + 80);
    if (v14)
    {
      v15 = *(_DWORD *)v14;
      v16 = *(_DWORD *)(v14 + 4);
      *(_DWORD *)v14 += 2;
      if (v16 > v13
        && ((v17 = *(_QWORD *)(v14 + 8), (*(_BYTE *)(v14 + 16) & 4) == 0)
          ? (v18 = *(unsigned __int16 *)(v17 + 2 * v13))
          : (v18 = *(unsigned __int8 *)(v17 + v13)),
            v18 <= 0x20 ? (v19 = ((1 << v18) & 0x100000600) == 0) : (v19 = 1),
            !v19 || v18 == 160)
        || (int)v13 >= 1
        && (v20 = v13 - 1, v16 > v20)
        && ((v21 = *(_QWORD *)(v14 + 8), (*(_BYTE *)(v14 + 16) & 4) == 0)
          ? (v22 = *(unsigned __int16 *)(v21 + 2 * v20))
          : (v22 = *(unsigned __int8 *)(v21 + v20)),
            v22 <= 0x20 ? (v23 = ((1 << v22) & 0x100000600) == 0) : (v23 = 1),
            !v23 || v22 == 160))
      {
        result = (uint64_t)WebCore::CompositeEditCommand::rebalanceWhitespaceOnTextSubstring((unsigned int *)this, (WebCore::Text *)v6, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 2));
        v15 = *(_DWORD *)v14 - 2;
      }
      if (v15)
        *(_DWORD *)v14 = v15;
      else
        result = WTF::StringImpl::destroy((WTF::StringImpl *)v14, (WTF::StringImpl *)v5);
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::rebalanceWhitespaceOnTextSubstring(unsigned int *this, WebCore::Text *a2, int a3, int a4)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _BOOL4 v36;
  char v37;
  int v38;
  uint64_t (*v39)();
  void *v40;
  _BOOL4 v41;
  WTF::StringImpl *v42;
  const WTF::String *v43;
  uint64_t (*v44)();
  char v45;
  void *v46;
  BOOL v47;
  WTF::StringImpl *v48;
  int v49;
  const WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::Node *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  BOOL v57;
  WebCore::CompositeEditCommand *v58;
  WTF::StringImpl *v59;
  WebCore::Node *v60[2];
  char v61;
  WebCore::Node *v62[2];
  char v63;
  WTF::StringImpl *v64;
  int v65;
  char v66;

  v5 = this;
  v6 = *((_QWORD *)a2 + 10);
  v7 = a3 & ~(a3 >> 31);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if (a3 <= 0)
    {
      v8 = *(_DWORD *)(v6 + 4);
LABEL_39:
      v21 = 1;
    }
    else
    {
      v8 = *(_DWORD *)(v6 + 4);
      v9 = v7 - 1;
      if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        while (v9 < v8)
        {
          v14 = *(_QWORD *)(v6 + 8);
          v15 = (v7 - 1);
          if ((*(_BYTE *)(v6 + 16) & 4) != 0)
            v16 = *(unsigned __int8 *)(v14 + v15);
          else
            v16 = *(unsigned __int16 *)(v14 + 2 * v15);
          if (v16 > 31)
          {
            if (v16 != 32 && v16 != 160)
              break;
          }
          else if (v16 != 9)
          {
            if (v16 != 10)
              break;
            if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A8DA1CLL);
            }
            v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 120);
            v18 = (v17 >> 27) & 7;
            if ((v17 & 0x40000000) == 0 && v18 == 3)
              break;
            if (v18)
            {
              v19 = v17 & 0x40000000;
              v20 = v19 ? 1 : 2;
              if (v18 == v20 || !((v18 != 1) | (v19 >> 30) & 1))
                break;
            }
          }
          --v7;
          if (!v15)
          {
LABEL_38:
            v7 = 0;
            goto LABEL_39;
          }
        }
      }
      else
      {
        while (v9 < v8)
        {
          v10 = *(_QWORD *)(v6 + 8);
          v11 = (v7 - 1);
          v12 = (*(_BYTE *)(v6 + 16) & 4) != 0 ? *(unsigned __int8 *)(v10 + v11) : *(unsigned __int16 *)(v10 + 2 * v11);
          v13 = v12 > 0x20 || ((1 << v12) & 0x100000600) == 0;
          if (v13 && v12 != 160)
            break;
          --v7;
          if (!v11)
            goto LABEL_38;
        }
      }
      v21 = 0;
    }
    v22 = a4 & ~(a4 >> 31);
    if (v22 < v8)
    {
      if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        while (v8 != v22)
        {
          v26 = *(_QWORD *)(v6 + 8);
          if ((*(_BYTE *)(v6 + 16) & 4) != 0)
            v27 = *(unsigned __int8 *)(v26 + v22);
          else
            v27 = *(unsigned __int16 *)(v26 + 2 * v22);
          if (v27 > 31)
          {
            if (v27 != 32 && v27 != 160)
              goto LABEL_77;
          }
          else if (v27 != 9)
          {
            if (v27 != 10)
              goto LABEL_77;
            if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A8DA3CLL);
            }
            v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 120);
            v29 = (v28 >> 27) & 7;
            if ((v28 & 0x40000000) == 0 && v29 == 3)
              goto LABEL_77;
            if (v29)
            {
              v30 = v28 & 0x40000000;
              v31 = v30 ? 1 : 2;
              if (v29 == v31 || !((v29 != 1) | (v30 >> 30) & 1))
                goto LABEL_77;
            }
          }
          if (++v22 >= (unint64_t)v8)
            goto LABEL_77;
        }
LABEL_76:
        LODWORD(v22) = v8;
      }
      else
      {
        v23 = *(_QWORD *)(v6 + 8);
        while (1)
        {
          v24 = (*(_DWORD *)(v6 + 16) & 4) != 0 ? *(unsigned __int8 *)(v23 + v22) : *(unsigned __int16 *)(v23 + 2 * v22);
          v25 = v24 > 0x20 || ((1 << v24) & 0x100000600) == 0;
          if (v25 && v24 != 160)
            break;
          if (v8 == ++v22)
            goto LABEL_76;
        }
      }
    }
  }
  else
  {
    v21 = a3 < 1;
    LODWORD(v22) = a4 & ~(a4 >> 31);
  }
LABEL_77:
  if ((_DWORD)v22 != v7)
  {
    *((_DWORD *)a2 + 6) += 2;
    v64 = a2;
    v65 = v7;
    v66 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v64, (uint64_t)v62);
    v63 = 1;
    v33 = *((_DWORD *)a2 + 6) - 2;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) != 0)
      {
        v33 = 2;
      }
      else
      {
        WebCore::Node::removedLastRef(a2, v32);
        v33 = *((_DWORD *)a2 + 6);
      }
    }
    *((_DWORD *)a2 + 6) = v33 + 2;
    v64 = a2;
    v65 = v22;
    v66 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v64, (uint64_t)v60);
    v61 = 1;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2, v34);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    if (v6)
    {
      if (v21 && *(_DWORD *)(v6 + 4) <= (v22 - v7))
      {
        *(_DWORD *)v6 += 2;
        v59 = (WTF::StringImpl *)v6;
      }
      else
      {
        WTF::StringImpl::substring((WTF::StringImpl *)v6);
      }
    }
    else
    {
      v59 = 0;
    }
    v35 = *((_QWORD *)a2 + 7);
    v58 = (WebCore::CompositeEditCommand *)v5;
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 2) != 0)
      {
        *(_DWORD *)(v35 + 24) += 2;
        v54 = *(_QWORD *)(v35 + 80);
        if (v54 && *(_DWORD *)(v54 + 4))
        {
          v55 = *(unsigned __int8 **)(v54 + 8);
          v36 = v21;
          if ((*(_BYTE *)(v54 + 16) & 4) != 0)
            v56 = *v55;
          else
            v56 = *(unsigned __int16 *)v55;
          v37 = 0;
          v38 = 1;
          v57 = v56 > 0x20 || ((1 << v56) & 0x100000600) == 0;
          if (v57 && v56 != 160)
          {
            v37 = 0;
            v38 = 0;
          }
LABEL_91:
          if (v62[0])
            v39 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v39 = 0;
          if (v39)
          {
            WebCore::startOfParagraph((uint64_t)v62, 1, &v64);
            v41 = WebCore::operator==((uint64_t *)v62, (uint64_t *)&v64);
            v42 = v64;
            v64 = 0;
            if (v42)
            {
              if (*((_DWORD *)v42 + 6) == 2)
              {
                if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v42, v40);
              }
              else
              {
                *((_DWORD *)v42 + 6) -= 2;
              }
            }
          }
          else
          {
            v41 = 0;
          }
          v43 = (const WTF::String *)(v36 | v41);
          if (v60[0])
            v44 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v44 = 0;
          v45 = v37;
          if (!v44)
            goto LABEL_107;
          WebCore::endOfParagraph((WebCore::Node *)v60, 1, &v64);
          v47 = WebCore::operator==((uint64_t *)v60, (uint64_t *)&v64);
          v48 = v64;
          v64 = 0;
          if (v48)
          {
            if (*((_DWORD *)v48 + 6) == 2)
            {
              if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v48, v46);
            }
            else
            {
              *((_DWORD *)v48 + 6) -= 2;
            }
          }
          if (!v47)
          {
LABEL_107:
            if (v6)
              v49 = *(_DWORD *)(v6 + 4);
            else
              v49 = 0;
            if ((_DWORD)v22 != v49)
              v38 = 0;
          }
          WebCore::stringWithRebalancedWhitespace(&v59, v43, v38, &v64);
          if ((WTF::equal(v59, v64, v50) & 1) == 0)
            WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers(v58, a2, v7, v22 - v7, (const WTF::String *)&v64);
          v51 = v64;
          v64 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::destroy(v51, a2);
              if ((v45 & 1) == 0)
              {
LABEL_117:
                if (*(_DWORD *)(v35 + 24) == 2)
                {
                  if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
                }
                else
                {
                  *(_DWORD *)(v35 + 24) -= 2;
                }
              }
LABEL_119:
              v52 = v59;
              v59 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, a2);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v60[0];
              v60[0] = 0;
              if (v53)
              {
                if (*((_DWORD *)v53 + 6) == 2)
                {
                  if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v53, a2);
                }
                else
                {
                  *((_DWORD *)v53 + 6) -= 2;
                }
              }
              this = (unsigned int *)v62[0];
              v62[0] = 0;
              if (this)
              {
                if (this[6] == 2)
                {
                  if ((*((_WORD *)this + 15) & 0x400) == 0)
                    this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
                }
                else
                {
                  this[6] -= 2;
                }
              }
              goto LABEL_128;
            }
            *(_DWORD *)v51 -= 2;
          }
          if ((v45 & 1) == 0)
            goto LABEL_117;
          goto LABEL_119;
        }
        v36 = v21;
        v37 = 0;
LABEL_90:
        v38 = 1;
        goto LABEL_91;
      }
      v36 = v21;
      v35 = 0;
    }
    else
    {
      v36 = v21;
    }
    v37 = 1;
    goto LABEL_90;
  }
LABEL_128:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::prepareWhitespaceAtPositionForSplit(WebCore::CompositeEditCommand *this, WebCore::Position *a2)
{
  unsigned int *result;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  void *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  Node *var0;
  Node *v25;
  void *v26;
  WebCore::Node *v27;
  VisiblePosition v28;
  VisiblePosition v29;
  WebCore::Node *v30[2];
  WebCore::Node *v31;
  unsigned int v32;
  char v33;
  _QWORD v34[2];

  result = (unsigned int *)WebCore::isRichlyEditablePosition(a2, a2);
  if (!(_DWORD)result)
    return result;
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return result;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  if ((*(_WORD *)(v6 + 28) & 2) != 0)
  {
    v8 = *(_QWORD *)(v6 + 80);
    if (v8 && *(_DWORD *)(v8 + 4))
    {
      v9 = WebCore::ScriptDisallowedScope::s_count++;
      v10 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v10)
        goto LABEL_22;
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        goto LABEL_67;
      v11 = *(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v11 + 1;
      v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 120);
      v13 = (v12 >> 27) & 7;
      v14 = v12 & 0x40000000;
      if ((v13 != 3 || v14 != 0) && v13 != 1)
      {
        if (v11 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x195A8DDC8);
        }
        *(_DWORD *)(v10 + 16) = v11;
LABEL_22:
        WebCore::ScriptDisallowedScope::s_count = v9;
        WebCore::Position::upstream((uint64_t)a2, (WebCore::Node *)1, (uint64_t)v30);
        WebCore::Position::downstream((uint64_t)a2, (WebCore::Node *)1, (uint64_t)&v31);
        WebCore::CompositeEditCommand::deleteInsignificantText(this, (const WebCore::Position *)v30, (const WebCore::Position *)&v31);
        v18 = v31;
        v31 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v17);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        WebCore::Position::downstream((uint64_t)v30, (WebCore::Node *)1, (uint64_t)&v31);
        v20 = v31;
        v31 = 0;
        v21 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v20;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v21, v19);
              v27 = v31;
              *((_DWORD *)a2 + 2) = v32;
              *((_BYTE *)a2 + 12) = v33;
              v31 = 0;
              if (v27)
              {
                if (*((_DWORD *)v27 + 6) == 2)
                {
                  if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v27, v26);
                }
                else
                {
                  *((_DWORD *)v27 + 6) -= 2;
                }
              }
              goto LABEL_29;
            }
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        *((_DWORD *)a2 + 2) = v32;
        *((_BYTE *)a2 + 12) = v33;
LABEL_29:
        WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)&v29);
        v29.var1 = 1;
        WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v29, (uint64_t)v34);
        if (WebCore::Position::atStartOfTree((WebCore::Position *)v34))
        {
          memset(&v28, 0, sizeof(v28));
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v34, (uint64_t)&v31);
          v28.var0.var0.var0 = (Node *)v31;
          v28.var0.var1 = v32;
          *((_BYTE *)&v28.var0 + 12) = v33;
        }
        v28.var1 = 1;
        v23 = v34[0];
        v34[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, v22);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
        WebCore::CompositeEditCommand::replaceCollapsibleWhitespaceWithNonBreakingSpaceIfNeeded(this, &v28);
        WebCore::CompositeEditCommand::replaceCollapsibleWhitespaceWithNonBreakingSpaceIfNeeded(this, &v29);
        var0 = v28.var0.var0.var0;
        v28.var0.var0.var0 = 0;
        if (var0)
        {
          if (*((_DWORD *)var0 + 6) == 2)
          {
            if ((*((_WORD *)var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)var0, v5);
          }
          else
          {
            *((_DWORD *)var0 + 6) -= 2;
          }
        }
        v25 = v29.var0.var0.var0;
        v29.var0.var0.var0 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v5);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
        result = (unsigned int *)v30[0];
        v30[0] = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
          }
          else
          {
            result[6] -= 2;
          }
        }
        goto LABEL_44;
      }
      if (v11 == -1)
      {
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x195A8DDA8);
      }
      *(_DWORD *)(v10 + 16) = v11;
      WebCore::ScriptDisallowedScope::s_count = v9;
    }
LABEL_44:
    v7 = *(_DWORD *)(v6 + 24) - 2;
    if (*(_DWORD *)(v6 + 24) != 2)
      goto LABEL_5;
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    return result;
  }
  if (v7)
  {
LABEL_5:
    *(_DWORD *)(v6 + 24) = v7;
    return result;
  }
  if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
  return result;
}

uint64_t WebCore::CompositeEditCommand::deleteInsignificantText(WebCore::CompositeEditCommand *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  const WebCore::Position *v3;
  const WebCore::Position *v4;
  uint64_t result;
  void *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  WebCore::Text **v19;
  int *v20;
  WebCore::CompositeEditCommand *v21;
  WebCore::Text *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  int v32;
  WebCore::InlineIterator *v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  const WebCore::Position *v41;
  int *v42;
  char *v43;
  const WebCore::Position *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  WebCore::CompositeEditCommand *v66;
  int v67;
  WebCore::InlineIterator *v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73[2];
  int v74;
  _QWORD v75[2];
  int v76;
  unsigned int v77[4];
  int v78;
  WTF *v79;
  _QWORD v80[2];

  v3 = a3;
  v4 = a2;
  result = WebCore::treeOrder<(WebCore::TreeType)2>(a2, (uint64_t)a3);
  if (result != 129 && (char)result < 0)
  {
    v8 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v66 = this;
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 0;
      *(_DWORD *)(v8 + 24) += 2;
      while (1)
      {
        v12 = v8;
        if ((*(_WORD *)(v8 + 28) & 2) != 0)
        {
          v13 = *(_DWORD *)(v8 + 24) + 2;
          *(_DWORD *)(v8 + 24) = v13;
          if (v11 == (_DWORD)v10)
          {
            v14 = ((unint64_t)v10 >> 2) + v10;
            if (v14 >= 0x10)
              v15 = v14 + 1;
            else
              v15 = 16;
            if (v15 <= (unint64_t)v11 + 1)
              v10 = v11 + 1;
            else
              v10 = v15;
            if (v10 >> 29)
            {
LABEL_178:
              __break(0xC471u);
              JUMPOUT(0x195A8E704);
            }
            v16 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
            result = (uint64_t)memcpy(v16, v9, 8 * v11);
            if (v9)
            {
              if (v16 == v9)
              {
                LODWORD(v10) = 0;
                v16 = 0;
              }
              result = WTF::fastFree((WTF *)v9, v7);
            }
            v9 = v16;
            v13 = *(_DWORD *)(v12 + 24);
          }
          *(_DWORD *)(v12 + 24) = v13 + 2;
          *(_QWORD *)&v9[8 * v11++] = v12;
          if (v13)
          {
            *(_DWORD *)(v12 + 24) = v13;
          }
          else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          {
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
          }
        }
        if (v12 == *(_QWORD *)v3)
          break;
        if ((*(_WORD *)(v12 + 28) & 4) != 0 && (v8 = *(_QWORD *)(v12 + 80)) != 0 || (v8 = *(_QWORD *)(v12 + 56)) != 0)
        {
LABEL_28:
          *(_DWORD *)(v8 + 24) += 2;
        }
        else
        {
          v17 = v12;
          while (1)
          {
            v17 = *(_QWORD *)(v17 + 32);
            if (!v17)
              break;
            v8 = *(_QWORD *)(v17 + 56);
            if (v8)
              goto LABEL_28;
          }
          v8 = 0;
        }
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
        if (!v8)
          goto LABEL_40;
      }
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
LABEL_40:
      if (!v11)
        goto LABEL_166;
      v64 = v11;
      v18 = &v9[8 * v11];
      v65 = v9;
      v19 = (WebCore::Text **)v9;
      v20 = &WebCore::ScriptDisallowedScope::s_count;
      v21 = v66;
      while (1)
      {
        v22 = *v19;
        if (*v19 == *(WebCore::Text **)v4)
        {
          if ((*((_BYTE *)v4 + 12) & 8) == 0
            && ((v24 = *((_BYTE *)v4 + 12) & 7, v24 != 4) ? (v25 = v24 == 2) : (v25 = 1), v25))
          {
            v23 = WebCore::Position::offsetForPositionAfterAnchor(v4);
            v22 = *v19;
          }
          else
          {
            v23 = *((unsigned int *)v4 + 2);
          }
        }
        else
        {
          v23 = 0;
        }
        if (v22 == *(WebCore::Text **)v3)
        {
          if ((*((_BYTE *)v3 + 12) & 8) == 0
            && ((v28 = *((_BYTE *)v3 + 12) & 7, v28 != 4) ? (v29 = v28 == 2) : (v29 = 1), v29))
          {
            v27 = WebCore::Position::offsetForPositionAfterAnchor(v3);
            v22 = *v19;
          }
          else
          {
            v27 = *((_DWORD *)v3 + 2);
          }
        }
        else
        {
          v26 = *((_QWORD *)v22 + 10);
          if (v26)
            v27 = *(_DWORD *)(v26 + 4);
          else
            v27 = 0;
        }
        if (v27 <= v23)
          goto LABEL_152;
        v69 = v27 - v23;
        v30 = *((_QWORD *)v21 + 2);
        *(_DWORD *)(v30 + 24) += 2;
        WebCore::Document::updateLayout(v30, 0, 0);
        if (*(_DWORD *)(v30 + 24) == 2)
        {
          if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v30, v31);
        }
        else
        {
          *(_DWORD *)(v30 + 24) -= 2;
        }
        v72 = 0;
        v32 = (*v20)++;
        v33 = (WebCore::InlineIterator *)(*((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL);
        if (v33)
          break;
        *v20 = v32;
LABEL_152:
        if (++v19 == (WebCore::Text **)v18)
        {
          v61 = *((_QWORD *)v21 + 2);
          *(_DWORD *)(v61 + 24) += 2;
          WebCore::Document::updateLayout(v61, 2u, 0);
          if (*(_DWORD *)(v61 + 24) == 2)
          {
            v9 = v65;
            if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v61, v7);
          }
          else
          {
            *(_DWORD *)(v61 + 24) -= 2;
            v9 = v65;
          }
          v62 = 8 * v64;
          v63 = (uint64_t *)v9;
          do
          {
            result = *v63;
            *v63 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
            ++v63;
            v62 -= 8;
          }
          while (v62);
LABEL_166:
          if (v9)
            return WTF::fastFree((WTF *)v9, v7);
          return result;
        }
      }
      if ((*(_BYTE *)((*((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A8E744);
      }
      ++*(_DWORD *)((*((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      v68 = v33;
      WebCore::InlineIterator::firstTextBoxInLogicalOrderFor(v33, (uint64_t)v77);
      v67 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v77);
      if ((v67 & 1) != 0
        || (v35 = *((_QWORD *)v22 + 10)) == 0
        || ((v36 = *(_DWORD *)(v35 + 4), v71 = v36, v36 > v23) ? (v37 = v36 >= v27) : (v37 = 0), !v37))
      {
LABEL_128:
        v53 = v79;
        v79 = 0;
        v21 = v66;
        if (v53)
        {
          v54 = *((unsigned int *)v53 + 3);
          v55 = *(unsigned int **)v53;
          if ((_DWORD)v54)
          {
            v56 = 24 * v54;
            do
            {
              v57 = v55[4];
              if ((_DWORD)v57 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E33A99D8[v57])(v75, v55);
              v55[4] = -1;
              v55 += 6;
              v56 -= 24;
            }
            while (v56);
            v55 = *(unsigned int **)v53;
            v21 = v66;
          }
          if (v55)
          {
            *(_QWORD *)v53 = 0;
            *((_DWORD *)v53 + 2) = 0;
            WTF::fastFree((WTF *)v55, v34);
          }
          WTF::fastFree(v53, v34);
        }
        if (v78 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E33A99D8[v78])(v75, v77);
        v58 = *((_DWORD *)v68 + 4);
        if (!v58)
        {
          __break(0xC471u);
          JUMPOUT(0x195A8E764);
        }
        *((_DWORD *)v68 + 4) = v58 - 1;
        --*v20;
        if (v67)
        {
          (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Text *, uint64_t))(*(_QWORD *)v21 + 184))(v21, v22, 1);
        }
        else
        {
          if (!v72)
            goto LABEL_152;
          if (*((_DWORD *)v72 + 1))
            WebCore::CompositeEditCommand::replaceTextInNode(v21, v22, v23, v69, (const WTF::String *)&v72);
          else
            (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Text *, uint64_t, _QWORD))(*(_QWORD *)v21 + 176))(v21, v22, v23, v69);
        }
        v60 = v72;
        v72 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v59);
          else
            *(_DWORD *)v60 -= 2;
        }
        goto LABEL_152;
      }
      v70 = 0;
      v75[0] = 0;
      v76 = 1;
      while (1)
      {
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v75)
          && (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v77) & 1) != 0)
        {
LABEL_126:
          if (v76 != -1)
            ((void (*)(WTF::StringImpl **, _QWORD *))off_1E33A99D8[v76])(v73, v75);
          goto LABEL_128;
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v75) & 1) != 0)
        {
          v38 = 0;
        }
        else
        {
          if (v76 == -1)
            goto LABEL_177;
          v73[0] = (WTF::StringImpl *)v80;
          if ((((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33A99E8[v76])(v73, v75) & 1) == 0)
            goto LABEL_178;
          if (v76 == -1)
            goto LABEL_177;
          v73[0] = (WTF::StringImpl *)v80;
          v38 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33A99F8[v76])(v73, v75);
          if (v38 > v27)
            goto LABEL_126;
        }
        v39 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v77);
        v40 = v71;
        if ((v39 & 1) == 0)
        {
          if (v78 == -1)
            goto LABEL_177;
          v73[0] = (WTF::StringImpl *)v80;
          if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *))off_1E33A99E8[v78])(v73, v77) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A8E724);
          }
          if (v78 == -1)
          {
LABEL_177:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_178;
          }
          v73[0] = (WTF::StringImpl *)v80;
          v40 = ((uint64_t (*)(WTF::StringImpl **, unsigned int *))off_1E33A9A08[v78])(v73, v77);
        }
        if (v40 >= v23 && v38 <= v27)
          break;
LABEL_105:
        if (v76 == -1)
        {
          if (v78 == -1)
            goto LABEL_110;
        }
        else if (v78 == -1)
        {
          ((void (*)(WTF::StringImpl **, _QWORD *))off_1E33A99D8[v76])(v73, v75);
          v76 = -1;
          goto LABEL_110;
        }
        v73[0] = (WTF::StringImpl *)v75;
        ((void (*)(WTF::StringImpl **, _QWORD *, unsigned int *))off_1E33A9A18[v78])(v73, v75, v77);
LABEL_110:
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v77) & 1) != 0)
          continue;
        WebCore::InlineIterator::nextTextBoxInLogicalOrder(v77, &v79, v73);
        if (v78 == -1)
        {
          if (v74 == -1)
            continue;
LABEL_115:
          v80[0] = v77;
          ((void (*)(_QWORD *, unsigned int *, WTF::StringImpl **))off_1E33A9A28[v74])(v80, v77, v73);
          goto LABEL_116;
        }
        if (v74 != -1)
          goto LABEL_115;
        ((void (*)(_QWORD *, unsigned int *))off_1E33A99D8[v78])(v80, v77);
        v78 = -1;
LABEL_116:
        if (v74 != -1)
          ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33A99D8[v74])(v80, v73);
      }
      v41 = v3;
      v42 = v20;
      v43 = v18;
      v44 = v4;
      v45 = v40 - v38;
      if ((int)(v40 - v38) < 1)
      {
LABEL_104:
        v4 = v44;
        v18 = v43;
        v20 = v42;
        v3 = v41;
        goto LABEL_105;
      }
      if (v38 <= v23)
        v38 = v23;
      if (!v72)
      {
        v46 = (WTF::StringImpl *)*((_QWORD *)v22 + 10);
        if (v46)
        {
          if ((_DWORD)v23 || *((_DWORD *)v46 + 1) > v69)
          {
            WTF::StringImpl::substring(v46);
            v52 = v72;
            v72 = v73[0];
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v51);
              else
                *(_DWORD *)v52 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v46 += 2;
            v72 = v46;
          }
        }
        else
        {
          v72 = 0;
        }
      }
      WTF::makeStringByRemoving((WTF *)&v72, (const WTF::String *)(v38 - (v70 + (_DWORD)v23)));
      v48 = v72;
      v72 = v73[0];
      v73[0] = 0;
      if (v48)
      {
        v49 = *(_DWORD *)v48 - 2;
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::destroy(v48, v47);
          v48 = v73[0];
          v73[0] = 0;
          if (!v48)
            goto LABEL_103;
          v49 = *(_DWORD *)v48 - 2;
          if (*(_DWORD *)v48 == 2)
          {
            WTF::StringImpl::destroy(v48, v50);
            goto LABEL_103;
          }
        }
        *(_DWORD *)v48 = v49;
      }
LABEL_103:
      v70 += v45;
      goto LABEL_104;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::replaceCollapsibleWhitespaceWithNonBreakingSpaceIfNeeded(WebCore::CompositeEditCommand *this, VisiblePosition *a2)
{
  unsigned int *result;
  Node *var0;
  void *v7;
  WebCore::Node *v8;
  unsigned int v9;
  WebCore::Node *v10;
  __int16 v11;
  WebCore::Node *v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  unsigned int var1;
  char v17;
  WebCore::Node *v18;
  unsigned int v19;
  char v20;

  result = (unsigned int *)WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)a2);
  if ((unsigned __int16)result == 32 || (unsigned __int16)result == 10)
  {
    var0 = a2->var0.var0.var0;
    if (a2->var0.var0.var0)
      *((_DWORD *)var0 + 6) += 2;
    v15 = (WebCore::Node *)var0;
    var1 = a2->var0.var1;
    v17 = *((_BYTE *)&a2->var0 + 12);
    WebCore::Position::downstream((uint64_t)&v15, (WebCore::Node *)1, (uint64_t)&v18);
    result = (unsigned int *)v15;
    v15 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v8 = v18;
    if (v18)
    {
      v9 = v20 & 7;
      if (v9 <= 4)
      {
        if (((1 << v9) & 0x19) != 0)
        {
          v10 = v18;
          if (v9 - 1 > 1)
          {
LABEL_15:
            if ((*((_WORD *)v10 + 14) & 2) != 0)
            {
              v11 = *((_WORD *)v18 + 14);
              if ((v11 & 0x10) == 0
                || *(_QWORD *)(*((_QWORD *)v18 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
              {
                v12 = 0;
                if ((v11 & 2) != 0 && (v20 & 7) == 0)
                {
                  *((_DWORD *)v18 + 6) += 2;
                  v12 = v8;
                }
                v13 = v19;
                {
                  v14 = v19;
                  WTF::String::String();
                  v13 = v14;
                }
                WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers(this, v12, v13, 1, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
                if (*((_DWORD *)v12 + 6) == 2)
                {
                  if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v12, v7);
                }
                else
                {
                  *((_DWORD *)v12 + 6) -= 2;
                }
              }
            }
            goto LABEL_25;
          }
LABEL_36:
          v10 = (WebCore::Node *)*((_QWORD *)v18 + 4);
          goto LABEL_15;
        }
        if (*((_QWORD *)v18 + 4))
          goto LABEL_36;
      }
LABEL_25:
      result = (unsigned int *)v18;
      v18 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::deleteInsignificantTextDownstream(WebCore::CompositeEditCommand *this, const WebCore::Position *a2)
{
  WebCore::Node *v4;
  void *v5;
  uint64_t v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  unsigned int *result;
  WebCore::Node *v10[2];
  char v11;
  WebCore::Node *v12;
  int v13;
  char v14;
  WebCore::Node *v15;
  int v16;
  char v17;
  _QWORD v18[2];

  WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)v10);
  v11 = 1;
  WebCore::VisiblePosition::next((unsigned __int8 *)v10, 0, 0, (uint64_t)&v12);
  v4 = v12;
  if (v12)
    *((_DWORD *)v12 + 6) += 2;
  v15 = v4;
  v16 = v13;
  v17 = v14;
  WebCore::Position::downstream((uint64_t)&v15, (WebCore::Node *)1, (uint64_t)v18);
  WebCore::CompositeEditCommand::deleteInsignificantText(this, a2, (const WebCore::Position *)v18);
  v6 = v18[0];
  v18[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v5);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  result = (unsigned int *)v10[0];
  v10[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CompositeEditCommand::appendBlockPlaceholder@<X0>(WebCore::CompositeEditCommand *a1@<X0>, WebCore::Node **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;

  v6 = *((_QWORD *)a1 + 2);
  *(_DWORD *)(v6 + 24) += 2;
  result = WebCore::Document::updateLayout(v6, 2u, 0);
  if ((*((_QWORD *)*a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)*a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v9 = bmalloc::api::isoAllocate();
    v10 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v9 + 28) = 4124;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = v6 + 96;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3324);
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    v11 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = 0;
    *(_QWORD *)v9 = off_1E33B4C28;
    *(_DWORD *)(v9 + 24) = 4;
    v12 = *a2;
    *a2 = 0;
    v13 = v12;
    v14 = (WebCore::Node *)v9;
    WebCore::CompositeEditCommand::appendNode(a1, (uint64_t *)&v14, (uint64_t *)&v13);
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v8);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    result = (uint64_t)v14;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v14, v8);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::insertBlockPlaceholder@<X0>(unsigned int *this@<X0>, const WebCore::Position *a2@<X1>, WebCore::Node **a3@<X8>)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;

  if (*(_QWORD *)a2)
  {
    v5 = this;
    v6 = *((_QWORD *)this + 2);
    *(_DWORD *)(v6 + 24) += 2;
    v7 = bmalloc::api::isoAllocate();
    v9 = (WebCore::Node *)v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v7 + 24) = 0x101C00000002;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v6 + 96;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3324);
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    v10 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v7 + 96) = v10;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)v7 = off_1E33B4C28;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    *((_DWORD *)v9 + 6) += 2;
    v12 = v9;
    WebCore::CompositeEditCommand::insertNodeAt(v5, (uint64_t *)&v12, a2);
    this = (unsigned int *)v12;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v12, v11);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return this;
}

unsigned int *WebCore::CompositeEditCommand::insertNewDefaultParagraphElementAt(WebCore::Node **this, const WebCore::Position *a2, WebCore::Position *a3)
{
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  unsigned int *result;
  WebCore::Node *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v6 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::createDefaultParagraphElement((WebCore *)v6, this);
  v7 = *this;
  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0x101C00000002;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v6 + 96;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v10 = WebCore::HTMLNames::brTag;
  if (WebCore::HTMLNames::brTag)
    ++*(_DWORD *)WebCore::HTMLNames::brTag;
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E33B4C28;
  WebCore::ContainerNode::appendChild((uint64_t)v7, (WebCore::Node *)v8, (uint64_t)v16);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  *((_DWORD *)v7 + 6) += 2;
  v15 = v7;
  WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)a2, (uint64_t *)&v15, a3);
  result = (unsigned int *)v15;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v15, v13);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::moveParagraphs(unsigned int *this, VisiblePosition *a2, VisiblePosition *a3, VisiblePosition *a4, int a5, int a6)
{
  WebCore::Node *v10;
  uint64_t v11;
  Node *var0;
  _BOOL8 v13;
  int v14;
  const WebCore::VisiblePosition *v15;
  int v16;
  const WebCore::VisiblePosition *v17;
  unsigned __int8 v18;
  void *v19;
  const WebCore::VisiblePosition *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const WebCore::VisiblePosition *v24;
  const WebCore::VisiblePosition *v25;
  void *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  unsigned __int8 v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  void *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  Node *v38;
  void *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  const WebCore::VisibleSelection *v48;
  _BOOL4 v49;
  const WebCore::Position *v50;
  void *v51;
  _BOOL4 isRichlyEditablePosition;
  WebCore::Node *v53;
  WebCore::Node *v54;
  uint64_t v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  WebCore::Editor *v60;
  void *v61;
  WebCore::Node *v62;
  void *v63;
  WebCore::Node *v64;
  char v65;
  Node *v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  WebCore::Node *v71;
  void *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  uint64_t v75;
  void *v76;
  WebCore::Node *v77;
  uint64_t v78;
  uint64_t (*v79)();
  void *v80;
  BOOL v81;
  WebCore::Node *v82;
  void *v84;
  _BOOL4 v85;
  WebCore::Node *v86;
  uint64_t v87;
  uint64_t v88;
  WebCore::Node *v89;
  void *v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  uint64_t (*v93)();
  uint64_t i;
  int v95;
  void *v96;
  void *v97;
  uint64_t v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  WebCore::Node *v104;
  WebCore::Editor *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  const WebCore::VisiblePosition *v112;
  WebCore::Node *v113;
  BOOL v114;
  uint64_t (*v115)();
  _BOOL4 v116;
  WebCore::Node *v117;
  int v118;
  const WebCore::VisiblePosition *v119;
  WTF::StringImpl *v120;
  uint64_t (*v121)();
  WebCore::Node *v122;
  WebCore::Node *v123;
  WebCore::Node *v124;
  _BOOL4 v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  WebCore::Node *v130;
  unsigned int v131;
  WebCore::Node *v132;
  int v133;
  char v134;
  void *v135;
  char v136;
  char v137;
  WebCore::Node *v138;
  WebCore::Node *v139;
  __int16 v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  WebCore::Node *v144;
  unsigned int v145;
  WebCore::Node *v146;
  int v147;
  void *v148;
  char v149;
  WebCore::Node *v150;
  WebCore::Node *v151;
  WebCore::Node *v152;
  uint64_t v153;
  uint64_t v154;
  WebCore::Node *v155;
  WTF *v156;
  void *v157;
  void *v158;
  void *v159;
  WebCore::Node *v160;
  void *v161;
  WebCore::Node *v162;
  WebCore::Node *v163;
  void *v164;
  WebCore::Node *v165;
  WebCore::Editor *v166;
  void *v167;
  WebCore::Editor *v168;
  uint64_t v169;
  void *v170;
  WebCore::Node *v171;
  WebCore::Editor *v172;
  void *v173;
  WebCore::Editor *v174;
  uint64_t v175;
  void *v176;
  WebCore::Node *v177;
  WebCore::Node *v178;
  uint64_t v179;
  WebCore::Node *v180;
  int v181;
  int v182;
  WebCore::Node *v183;
  unsigned int v184;
  char v185;
  WebCore::Node *v186;
  int v187;
  WTF::StringImpl *v188;
  unsigned int v189;
  char v190;
  char v191;
  VisiblePosition v192;
  WebCore::Node *v193[2];
  WebCore::Node *v194;
  unsigned int v195;
  char v196;
  WebCore::Node *v197;
  unsigned int v198;
  char v199;
  uint64_t v200;
  int v201;
  char v202;
  uint64_t v203;
  int v204;
  char v205;
  uint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  int v210;
  char v211;
  __int16 v212;
  char v213;
  _QWORD v214[2];
  char v215;
  uint64_t v216[2];
  char v217;
  WebCore::Node *v218;
  unsigned int v219;
  char v220;
  char v221;
  WebCore::Node *v222;
  unsigned int v223;
  char v224;
  char v225;
  WebCore::Node *v226;
  unsigned int var1;
  char v228;
  char v229;

  if (!a4->var0.var0.var0)
    return this;
  v10 = (WebCore::Node *)a2;
  v11 = (uint64_t)this;
  this = (unsigned int *)WebCore::operator==((uint64_t *)a2, (uint64_t *)a4);
  if ((this & 1) != 0)
    return this;
  var0 = a4->var0.var0.var0;
  if (a4->var0.var0.var0)
    *((_DWORD *)var0 + 6) += 2;
  v226 = (WebCore::Node *)var0;
  var1 = a4->var0.var1;
  v228 = *((_BYTE *)&a4->var0 + 12);
  LOBYTE(v13) = a4->var1;
  v229 = v13;
  LOBYTE(v182) = *(_BYTE *)(v11 + 226);
  if (!a5 || !*(_BYTE *)(v11 + 225))
  {
    v22 = 0;
    v181 = 0;
    v23 = 0;
    goto LABEL_45;
  }
  if (*(_BYTE *)(v11 + 225) == 2)
    goto LABEL_459;
  v14 = *(unsigned __int8 *)(v11 + 224);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 192), (uint64_t)&v183);
  LOBYTE(v186) = 1;
  if (!v14)
  {
    v163 = v183;
    if (v183)
    {
      *((_DWORD *)v183 + 6) += 2;
      v194 = v163;
      v195 = v184;
      v196 = v185;
      LOBYTE(v197) = 0;
      if (!WebCore::inSameLine((WebCore *)&v183, (const WebCore::VisiblePosition *)&v194, v15))
        LOBYTE(v186) = 0;
      v165 = v194;
      v194 = 0;
      if (v165)
      {
        if (*((_DWORD *)v165 + 6) == 2)
        {
          if ((*((_WORD *)v165 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v165, v164);
        }
        else
        {
          *((_DWORD *)v165 + 6) -= 2;
        }
      }
    }
  }
  while (1)
  {
    if (*(_BYTE *)(v11 + 225) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 208), (uint64_t)&v222);
      v225 = 1;
LABEL_450:
      v160 = v222;
      if (v222)
      {
        *((_DWORD *)v222 + 6) += 2;
        v194 = v160;
        v195 = v223;
        v196 = v224;
        LOBYTE(v197) = 0;
        if (!WebCore::inSameLine((WebCore *)&v222, (const WebCore::VisiblePosition *)&v194, v17))
          v225 = 0;
        v162 = v194;
        v194 = 0;
        if (v162)
        {
          if (*((_DWORD *)v162 + 6) == 2)
          {
            if ((*((_WORD *)v162 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v162, v161);
          }
          else
          {
            *((_DWORD *)v162 + 6) -= 2;
          }
        }
      }
      goto LABEL_11;
    }
    v16 = *(unsigned __int8 *)(v11 + 224);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 208), (uint64_t)&v222);
    v225 = 1;
    if (!v16)
      goto LABEL_450;
LABEL_11:
    v18 = WebCore::documentOrder(&v183, (WebCore::Node **)a3, v17);
    v21 = 0;
    v22 = 0;
    if (v18 == 129)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      if ((char)v18 <= 0)
      {
        if ((WebCore::documentOrder(&v222, (WebCore::Node **)v10, v20) & 0x80) != 0)
        {
          v22 = 0;
          v21 = 0;
          v23 = 0;
        }
        else
        {
          if ((WebCore::documentOrder(&v183, (WebCore::Node **)v10, v24) & 0x80) != 0
            || (WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v10, (uint64_t)&v183, (uint64_t)&v194), !(_BYTE)v200))
          {
            v23 = 0;
          }
          else
          {
            v23 = WebCore::characterCount((int *)&v194, 1);
            if ((_BYTE)v200)
            {
              v27 = v197;
              v197 = 0;
              if (v27)
              {
                if (*((_DWORD *)v27 + 6) == 2)
                {
                  if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v27, v26);
                }
                else
                {
                  *((_DWORD *)v27 + 6) -= 2;
                }
              }
              v28 = v194;
              v194 = 0;
              if (v28)
              {
                if (*((_DWORD *)v28 + 6) == 2)
                {
                  if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v28, v26);
                }
                else
                {
                  *((_DWORD *)v28 + 6) -= 2;
                }
              }
            }
          }
          v29 = WebCore::documentOrder(&v222, (WebCore::Node **)a3, v25);
          v22 = 0;
          v21 = 1;
          if (v29 != 129 && (char)v29 <= 0)
          {
            WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v10, (uint64_t)&v222, (uint64_t)&v194);
            if ((_BYTE)v200)
            {
              v22 = WebCore::characterCount((int *)&v194, 1);
              if ((_BYTE)v200)
              {
                v30 = v197;
                v197 = 0;
                if (v30)
                {
                  if (*((_DWORD *)v30 + 6) == 2)
                  {
                    if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v30, v19);
                  }
                  else
                  {
                    *((_DWORD *)v30 + 6) -= 2;
                  }
                }
                v31 = v194;
                v194 = 0;
                if (v31)
                {
                  if (*((_DWORD *)v31 + 6) == 2)
                  {
                    if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v31, v19);
                  }
                  else
                  {
                    *((_DWORD *)v31 + 6) -= 2;
                  }
                }
              }
            }
            else
            {
              v22 = 0;
            }
          }
        }
      }
    }
    v32 = v222;
    v222 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v19);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    v33 = v183;
    v183 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v19);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
    v181 = v21;
LABEL_45:
    WebCore::VisiblePosition::previous((WebCore::Node **)v10, 1, 0, (uint64_t)&v222);
    WebCore::VisiblePosition::next((unsigned __int8 *)a3, 1, 0, (uint64_t)&v218);
    v34 = *(WebCore::Node **)v10;
    if (*(_QWORD *)v10)
      *((_DWORD *)v34 + 6) += 2;
    v183 = v34;
    v184 = *((_DWORD *)v10 + 2);
    v185 = *((_BYTE *)v10 + 12);
    WebCore::Position::downstream((uint64_t)&v183, (WebCore::Node *)1, (uint64_t)&v194);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v194, (uint64_t)v216);
    v217 = 1;
    v36 = v194;
    v194 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36, v35);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
    v37 = v183;
    v183 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 6) == 2)
      {
        if ((*((_WORD *)v37 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v37, v35);
      }
      else
      {
        *((_DWORD *)v37 + 6) -= 2;
      }
    }
    v38 = a3->var0.var0.var0;
    if (a3->var0.var0.var0)
      *((_DWORD *)v38 + 6) += 2;
    v183 = (WebCore::Node *)v38;
    v184 = a3->var0.var1;
    v185 = *((_BYTE *)&a3->var0 + 12);
    WebCore::Position::upstream((uint64_t)&v183, (WebCore::Node *)1, (uint64_t)&v194);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v194, (uint64_t)v214);
    v215 = 1;
    v40 = v194;
    v194 = 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 6) == 2)
      {
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v40, v39);
      }
      else
      {
        *((_DWORD *)v40 + 6) -= 2;
      }
    }
    v41 = v183;
    v183 = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 6) == 2)
      {
        if ((*((_WORD *)v41 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v41, v39);
      }
      else
      {
        *((_DWORD *)v41 + 6) -= 2;
      }
    }
    v42 = v216[0];
    if (!v216[0])
      goto LABEL_335;
    if (!v214[0])
    {
      v216[0] = 0;
      goto LABEL_339;
    }
    v179 = v22;
    v43 = *(_QWORD *)(v11 + 16);
    *(_DWORD *)(v43 + 24) += 2;
    if (WebCore::operator==((uint64_t *)v10, (uint64_t *)a3))
    {
      v180 = 0;
    }
    else
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(v216, (uint64_t)v214, (uint64_t)&v194);
      if (!(_BYTE)v200)
        goto LABEL_458;
      WebCore::serializePreservingVisualAppearance((uint64_t)&v194, 0, 0, 1u, 0, (uint64_t *)&v188);
      WebCore::createFragmentFromMarkup(v43, (unsigned int **)&v188, MEMORY[0x1E0CBF738], 1, (unint64_t)&v183);
      v180 = v183;
      v183 = 0;
      v45 = v188;
      v188 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v44);
        else
          *(_DWORD *)v45 -= 2;
      }
      if ((_BYTE)v200)
      {
        v46 = v197;
        v197 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, v44);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
        v47 = v194;
        v194 = 0;
        if (v47)
        {
          if (*((_DWORD *)v47 + 6) == 2)
          {
            if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v47, v44);
          }
          else
          {
            *((_DWORD *)v47 + 6) -= 2;
          }
        }
      }
    }
    v48 = (const WebCore::VisibleSelection *)(v11 + 128);
    v49 = WebCore::operator==((uint64_t *)v10, (uint64_t *)a3);
    a3 = 0;
    if (v49 && a6)
    {
      if (var0)
        *((_DWORD *)var0 + 6) += 2;
      v194 = (WebCore::Node *)var0;
      v195 = var1;
      v196 = v228;
      isRichlyEditablePosition = WebCore::isRichlyEditablePosition((WebCore *)&v194, v50);
      v53 = v194;
      v194 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 6) == 2)
        {
          if ((*((_WORD *)v53 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v53, v51);
        }
        else
        {
          *((_DWORD *)v53 + 6) -= 2;
        }
      }
      if (!isRichlyEditablePosition)
      {
        a3 = 0;
LABEL_95:
        v48 = (const WebCore::VisibleSelection *)(v11 + 128);
        goto LABEL_96;
      }
      v54 = *(WebCore::Node **)v10;
      if (*(_QWORD *)v10)
        *((_DWORD *)v54 + 6) += 2;
      v55 = WTF::fastMalloc((WTF *)0x18);
      a3 = (VisiblePosition *)v55;
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 16) &= 0xE0u;
      *(_DWORD *)(v55 + 20) = WebCore::EditingStyle::NoFontDelta;
      if (!v54)
      {
        WebCore::EditingStyle::init(v55, 0, 1);
LABEL_92:
        WebCore::EditingStyle::mergeTypingStyle((WebCore::MutableStyleProperties *)a3, (WebCore::Document *)v43);
        v59 = *(_QWORD *)&a3->var0.var1;
        if (v59)
          WebCore::MutableStyleProperties::removeProperties(v59, WebCore::blockProperties, 20);
        goto LABEL_95;
      }
      *((_DWORD *)v54 + 6) += 2;
      WebCore::EditingStyle::init(v55, v54, 1);
      v57 = *((_DWORD *)v54 + 6) - 2;
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) != 0)
          goto LABEL_397;
        WebCore::Node::removedLastRef(v54, v56);
        v57 = *((_DWORD *)v54 + 6);
      }
      else
      {
        *((_DWORD *)v54 + 6) = v57;
      }
      v58 = v57 - 2;
      if (v58)
      {
        *((_DWORD *)v54 + 6) = v58;
        goto LABEL_92;
      }
LABEL_397:
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54, v56);
      goto LABEL_92;
    }
LABEL_96:
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v194, (const WebCore::VisiblePosition *)v216, (const WebCore::VisiblePosition *)v214, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)v11, (const WebCore::VisibleSelection *)&v194);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v194);
    v60 = *(WebCore::Editor **)(v43 + 3056);
    if (!v60)
    {
      v166 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v166, (WebCore::Document *)v43);
      v168 = *(WebCore::Editor **)(v43 + 3056);
      *(_QWORD *)(v43 + 3056) = v166;
      if (v168)
      {
        WebCore::Editor::~Editor(v168, v167);
        if (*(_DWORD *)v169)
        {
          *(_QWORD *)(v169 + 496) = 0;
          *(_OWORD *)(v169 + 464) = 0u;
          *(_OWORD *)(v169 + 480) = 0u;
          *(_OWORD *)(v169 + 432) = 0u;
          *(_OWORD *)(v169 + 448) = 0u;
          *(_OWORD *)(v169 + 400) = 0u;
          *(_OWORD *)(v169 + 416) = 0u;
          *(_OWORD *)(v169 + 368) = 0u;
          *(_OWORD *)(v169 + 384) = 0u;
          *(_OWORD *)(v169 + 336) = 0u;
          *(_OWORD *)(v169 + 352) = 0u;
          *(_OWORD *)(v169 + 304) = 0u;
          *(_OWORD *)(v169 + 320) = 0u;
          *(_OWORD *)(v169 + 272) = 0u;
          *(_OWORD *)(v169 + 288) = 0u;
          *(_OWORD *)(v169 + 240) = 0u;
          *(_OWORD *)(v169 + 256) = 0u;
          *(_OWORD *)(v169 + 208) = 0u;
          *(_OWORD *)(v169 + 224) = 0u;
          *(_OWORD *)(v169 + 176) = 0u;
          *(_OWORD *)(v169 + 192) = 0u;
          *(_OWORD *)(v169 + 144) = 0u;
          *(_OWORD *)(v169 + 160) = 0u;
          *(_OWORD *)(v169 + 112) = 0u;
          *(_OWORD *)(v169 + 128) = 0u;
          *(_OWORD *)(v169 + 80) = 0u;
          *(_OWORD *)(v169 + 96) = 0u;
          *(_OWORD *)(v169 + 48) = 0u;
          *(_OWORD *)(v169 + 64) = 0u;
          *(_OWORD *)(v169 + 16) = 0u;
          *(_OWORD *)(v169 + 32) = 0u;
          *(_OWORD *)v169 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v169, v170);
        }
      }
      v60 = *(WebCore::Editor **)(v43 + 3056);
      v48 = (const WebCore::VisibleSelection *)(v11 + 128);
    }
    WebCore::Editor::clearMisspellingsAndBadGrammar(v60, v48);
    if (var0)
      *((_DWORD *)var0 + 6) += 2;
    v194 = (WebCore::Node *)var0;
    v195 = var1;
    v196 = v228;
    WebCore::Position::downstream((uint64_t)&v194, (WebCore::Node *)1, (uint64_t)v193);
    v62 = v194;
    v194 = 0;
    if (v62)
    {
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62, v61);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
    }
    WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)v11, 0, 0, 0, 0, 1);
    if (var0)
    {
      if ((*((_BYTE *)var0 + 22) & 8) != 0)
      {
        v64 = (WebCore::Node *)var0;
LABEL_109:
        v65 = v182;
        *((_DWORD *)v64 + 6) += 2;
        goto LABEL_110;
      }
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v193, (uint64_t)&v194);
      v64 = v194;
      v226 = v194;
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v63);
      }
      else
      {
        *((_DWORD *)var0 + 6) -= 2;
      }
      var1 = v195;
      v228 = v196;
      LOBYTE(v13) = 1;
      v229 = 1;
      if (v64)
        goto LABEL_109;
    }
    else
    {
      v64 = 0;
    }
    v65 = v182;
LABEL_110:
    v192.var0.var0.var0 = (Node *)v64;
    v192.var0.var1 = var1;
    *((_BYTE *)&v192.var0 + 12) = v228;
    v192.var1 = v13;
    WebCore::CompositeEditCommand::cleanupAfterDeletion((WebCore::CompositeEditCommand *)v11, &v192);
    v66 = v192.var0.var0.var0;
    v192.var0.var0.var0 = 0;
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v66, v39);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    v67 = v65 & 2;
    if (v64)
    {
      v68 = *((_DWORD *)v64 + 6);
      *((_DWORD *)v64 + 6) = v68 + 2;
      if ((*((_BYTE *)v64 + 22) & 8) == 0)
        break;
    }
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v194, (const WebCore::VisiblePosition *)&v226, v67 != 0);
    v69 = HIBYTE(v212);
    v70 = HIBYTE(v212) == 0;
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v194);
    if (!v64)
      goto LABEL_456;
    if (*((_DWORD *)v64 + 6) != 2)
    {
      *((_DWORD *)v64 + 6) -= 2;
      if (!v69)
        goto LABEL_253;
      goto LABEL_120;
    }
LABEL_251:
    if ((*((_WORD *)v64 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v64, v39);
      if (v70)
        goto LABEL_253;
      goto LABEL_120;
    }
LABEL_456:
    if (v70)
      goto LABEL_253;
LABEL_120:
    v71 = v222;
    if (v222)
      *((_DWORD *)v222 + 6) += 2;
    v183 = v71;
    v10 = (WebCore::Node *)&v223;
    v184 = v223;
    v185 = v224;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v183, (uint64_t)&v194);
    LOBYTE(v197) = 1;
    v73 = v194;
    v194 = 0;
    v74 = v222;
    v222 = v73;
    if (v74)
    {
      if (*((_DWORD *)v74 + 6) == 2)
      {
        if ((*((_WORD *)v74 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v74, v72);
      }
      else
      {
        *((_DWORD *)v74 + 6) -= 2;
      }
    }
    v223 = v195;
    v224 = v196;
    v225 = 1;
    if (v71)
    {
      if (*((_DWORD *)v71 + 6) == 2)
      {
        if ((*((_WORD *)v71 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v71, v72);
      }
      else
      {
        *((_DWORD *)v71 + 6) -= 2;
      }
    }
    v182 = v67;
    v75 = (uint64_t)v218;
    if (v218)
      *((_DWORD *)v218 + 6) += 2;
    v183 = (WebCore::Node *)v75;
    v184 = v219;
    v185 = v220;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v183, (uint64_t)&v194);
    LOBYTE(v197) = 1;
    v77 = v194;
    v194 = 0;
    v78 = (uint64_t)v218;
    v218 = v77;
    if (v78)
    {
      if (*(_DWORD *)(v78 + 24) == 2)
      {
        if ((*(_WORD *)(v78 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v78, v76);
      }
      else
      {
        *(_DWORD *)(v78 + 24) -= 2;
      }
    }
    v219 = v195;
    v220 = v196;
    v221 = 1;
    if (v75)
    {
      if (*(_DWORD *)(v75 + 24) == 2)
      {
        if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v75, v76);
      }
      else
      {
        *(_DWORD *)(v75 + 24) -= 2;
      }
    }
    if (v222)
      v79 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v79 = 0;
    if (v79)
    {
      WebCore::startOfParagraph((uint64_t)&v222, 1, &v194);
      v81 = WebCore::operator==((uint64_t *)&v222, (uint64_t *)&v194);
      v82 = v194;
      v194 = 0;
      if (v82)
      {
        if (*((_DWORD *)v82 + 6) == 2)
        {
          if ((*((_WORD *)v82 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v82, v80);
        }
        else
        {
          *((_DWORD *)v82 + 6) -= 2;
        }
      }
      if (!v81)
      {
        if (!(v222
             ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
             : 0))
          goto LABEL_153;
        WebCore::endOfParagraph((WebCore::Node *)&v222, 1, &v194);
        v85 = WebCore::operator==((uint64_t *)&v222, (uint64_t *)&v194);
        v86 = v194;
        v194 = 0;
        if (v86)
        {
          if (*((_DWORD *)v86 + 6) == 2)
          {
            if ((*((_WORD *)v86 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v86, v84);
          }
          else
          {
            *((_DWORD *)v86 + 6) -= 2;
          }
        }
        if (!v85)
          goto LABEL_153;
      }
      if (WebCore::operator==((uint64_t *)&v222, (uint64_t *)&v218))
      {
LABEL_153:
        v87 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v87 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v87 + 24) = 0x101C00000002;
        *(_QWORD *)(v87 + 32) = 0;
        *(_QWORD *)(v87 + 40) = v43 + 96;
        *(_OWORD *)(v87 + 48) = 0u;
        *(_OWORD *)(v87 + 64) = 0u;
        ++*(_DWORD *)(v43 + 3324);
        *(_QWORD *)(v87 + 80) = 0;
        *(_QWORD *)(v87 + 88) = 0;
        v88 = WebCore::HTMLNames::brTag;
        if (WebCore::HTMLNames::brTag)
          ++*(_DWORD *)WebCore::HTMLNames::brTag;
        *(_QWORD *)(v87 + 96) = v88;
        *(_QWORD *)(v87 + 104) = 0;
        *(_QWORD *)v87 = off_1E33B4C28;
        v183 = (WebCore::Node *)v87;
        v89 = v222;
        if (v222)
          *((_DWORD *)v222 + 6) += 2;
        v194 = v89;
        v195 = v223;
        v196 = v224;
        WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)v11, (uint64_t *)&v183, (WebCore::Position *)&v194);
        v91 = v194;
        v194 = 0;
        if (v91)
        {
          if (*((_DWORD *)v91 + 6) == 2)
          {
            if ((*((_WORD *)v91 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v91, v90);
          }
          else
          {
            *((_DWORD *)v91 + 6) -= 2;
          }
        }
        if (v183)
        {
          if (*((_DWORD *)v183 + 6) == 2)
          {
            if ((*((_WORD *)v183 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v183, v90);
          }
          else
          {
            *((_DWORD *)v183 + 6) -= 2;
          }
        }
        WebCore::Document::updateLayout(v43, 2u, 0);
      }
    }
    v92 = v226;
    if (v226)
      v93 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v93 = 0;
    if (!v93 || !v226)
      goto LABEL_186;
    var0 = 0;
    v10 = v226;
    do
    {
      if (!WebCore::Node::hasEditableStyle((uint64_t)v10, 0))
        break;
      if ((*((_WORD *)v10 + 14) & 8) != 0)
        var0 = (Node *)v10;
      i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v92 + 5) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if ((WebCore::Node *)i == v10)
        break;
      v10 = (WebCore::Node *)*((_QWORD *)v10 + 4);
    }
    while (v10);
    if (var0)
    {
      v95 = *((_DWORD *)var0 + 6) + 2;
      *((_DWORD *)var0 + 6) = v95;
    }
    else
    {
LABEL_186:
      v95 = *(_DWORD *)(v43 + 24) + 2;
      *(_DWORD *)(v43 + 24) = v95;
      var0 = (Node *)v43;
    }
    *((_DWORD *)var0 + 6) = v95 + 2;
    if (!v92)
    {
      v194 = 0;
      v195 = var1;
      v196 = v228;
      WebCore::makeBoundaryPoint((uint64_t *)&v194, (uint64_t)&v183);
      goto LABEL_190;
    }
    *((_DWORD *)v92 + 6) += 2;
    v194 = v92;
    v195 = var1;
    v196 = v228;
    WebCore::makeBoundaryPoint((uint64_t *)&v194, (uint64_t)&v183);
    if (*((_DWORD *)v92 + 6) != 2)
    {
      *((_DWORD *)v92 + 6) -= 2;
LABEL_190:
      v13 = v23;
      goto LABEL_191;
    }
    v13 = v23;
    if ((*((_WORD *)v92 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v92, v96);
LABEL_191:
    if ((_BYTE)v186)
    {
      v194 = (WebCore::Node *)var0;
      v195 = 0;
      v197 = v183;
      v198 = v184;
      v98 = WebCore::characterCount((int *)&v194, 1);
      v99 = v197;
      v197 = 0;
      if (v99)
      {
        if (*((_DWORD *)v99 + 6) == 2)
        {
          if ((*((_WORD *)v99 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v99, v97);
        }
        else
        {
          *((_DWORD *)v99 + 6) -= 2;
        }
      }
      v100 = v194;
      v194 = 0;
      if (v100)
      {
        if (*((_DWORD *)v100 + 6) == 2)
        {
          if ((*((_WORD *)v100 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v100, v97);
        }
        else
        {
          *((_DWORD *)v100 + 6) -= 2;
        }
      }
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v194, (const WebCore::VisiblePosition *)&v226, v182 != 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)v11, (const WebCore::VisibleSelection *)&v194);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v194);
      *(_DWORD *)(v43 + 24) += 2;
      v183 = (WebCore::Node *)v43;
      v101 = WTF::fastMalloc((WTF *)0x1D8);
      v102 = WebCore::EditCommand::EditCommand(v101, (uint64_t *)&v183, 14);
      *(_OWORD *)(v102 + 248) = 0u;
      *(_OWORD *)(v102 + 264) = 0u;
      *(_QWORD *)v102 = off_1E33ADA18;
      *(_QWORD *)(v102 + 280) = 0;
      *(_DWORD *)(v102 + 288) = 0;
      *(_BYTE *)(v102 + 292) &= 0xF0u;
      *(_QWORD *)(v102 + 296) = 0;
      *(_DWORD *)(v102 + 304) = 0;
      *(_BYTE *)(v102 + 308) &= 0xF0u;
      *(_QWORD *)(v102 + 312) = 0;
      *(_DWORD *)(v102 + 320) = 0;
      *(_BYTE *)(v102 + 324) &= 0xF0u;
      *(_QWORD *)(v102 + 328) = 0;
      *(_DWORD *)(v102 + 336) = 0;
      *(_BYTE *)(v102 + 340) &= 0xF0u;
      *(_QWORD *)(v102 + 344) = 0;
      *(_DWORD *)(v102 + 352) = 0;
      *(_BYTE *)(v102 + 356) &= 0xF0u;
      *(_QWORD *)(v102 + 360) = 0;
      *(_DWORD *)(v102 + 368) = 0;
      *(_BYTE *)(v102 + 372) &= 0xF0u;
      *(_WORD *)(v102 + 376) = 1;
      *(_BYTE *)(v102 + 378) = *(_BYTE *)(v102 + 378) & 0xFC | 1;
      *(_QWORD *)(v102 + 384) = 0;
      *(_DWORD *)(v102 + 392) = 0;
      *(_BYTE *)(v102 + 396) &= 0xF0u;
      *(_QWORD *)(v102 + 400) = 0;
      *(_DWORD *)(v102 + 408) = 0;
      *(_BYTE *)(v102 + 412) &= 0xF0u;
      *(_QWORD *)(v102 + 416) = 0;
      *(_WORD *)(v102 + 424) = 1;
      *(_BYTE *)(v102 + 426) = a6 ^ 1;
      *(_QWORD *)(v102 + 432) = v180;
      *(_QWORD *)(v102 + 440) = 0;
      *(_BYTE *)(v102 + 464) = 0;
      *(_QWORD *)(v102 + 448) = 0;
      *(_QWORD *)(v102 + 456) = 0;
      *(_DWORD *)(v102 + 465) = 1;
      v194 = (WebCore::Node *)v102;
      WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v11, (uint64_t **)&v194);
      if (v194)
      {
        if (*((_DWORD *)v194 + 2) == 1)
          (*(void (**)(void))(*(_QWORD *)v194 + 8))();
        else
          --*((_DWORD *)v194 + 2);
      }
      v104 = v183;
      v183 = 0;
      if (v104)
      {
        if (*((_DWORD *)v104 + 6) == 2)
        {
          if ((*((_WORD *)v104 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v104, v103);
        }
        else
        {
          *((_DWORD *)v104 + 6) -= 2;
        }
      }
      v105 = *(WebCore::Editor **)(v43 + 3056);
      if (!v105)
      {
        v172 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v172, (WebCore::Document *)v43);
        v174 = *(WebCore::Editor **)(v43 + 3056);
        *(_QWORD *)(v43 + 3056) = v172;
        if (v174)
        {
          WebCore::Editor::~Editor(v174, v173);
          if (*(_DWORD *)v175)
          {
            *(_QWORD *)(v175 + 496) = 0;
            *(_OWORD *)(v175 + 464) = 0u;
            *(_OWORD *)(v175 + 480) = 0u;
            *(_OWORD *)(v175 + 432) = 0u;
            *(_OWORD *)(v175 + 448) = 0u;
            *(_OWORD *)(v175 + 400) = 0u;
            *(_OWORD *)(v175 + 416) = 0u;
            *(_OWORD *)(v175 + 368) = 0u;
            *(_OWORD *)(v175 + 384) = 0u;
            *(_OWORD *)(v175 + 336) = 0u;
            *(_OWORD *)(v175 + 352) = 0u;
            *(_OWORD *)(v175 + 304) = 0u;
            *(_OWORD *)(v175 + 320) = 0u;
            *(_OWORD *)(v175 + 272) = 0u;
            *(_OWORD *)(v175 + 288) = 0u;
            *(_OWORD *)(v175 + 240) = 0u;
            *(_OWORD *)(v175 + 256) = 0u;
            *(_OWORD *)(v175 + 208) = 0u;
            *(_OWORD *)(v175 + 224) = 0u;
            *(_OWORD *)(v175 + 176) = 0u;
            *(_OWORD *)(v175 + 192) = 0u;
            *(_OWORD *)(v175 + 144) = 0u;
            *(_OWORD *)(v175 + 160) = 0u;
            *(_OWORD *)(v175 + 112) = 0u;
            *(_OWORD *)(v175 + 128) = 0u;
            *(_OWORD *)(v175 + 80) = 0u;
            *(_OWORD *)(v175 + 96) = 0u;
            *(_OWORD *)(v175 + 48) = 0u;
            *(_OWORD *)(v175 + 64) = 0u;
            *(_OWORD *)(v175 + 16) = 0u;
            *(_OWORD *)(v175 + 32) = 0u;
            *(_OWORD *)v175 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v175, v176);
          }
        }
        v105 = *(WebCore::Editor **)(v43 + 3056);
      }
      v106 = *((_QWORD *)v105 + 1);
      if (v106
        && (v107 = *(_QWORD *)(v106 + 8)) != 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107)
        && (v108 = *((_QWORD *)v105 + 1)) != 0
        && (v109 = *(_QWORD *)(v108 + 8)) != 0)
      {
        v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 56))(v109);
      }
      else
      {
        v110 = 0;
      }
      WebCore::Editor::markMisspellingsAndBadGrammar(v105, (const WebCore::VisibleSelection *)(v11 + 128), v110, (const WebCore::VisibleSelection *)(v11 + 128));
      if (*(_BYTE *)(v11 + 225) == 1)
      {
        v111 = *(unsigned __int8 *)(v11 + 224);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 192), (uint64_t)&v183);
        LOBYTE(v186) = 1;
        v113 = v183;
        if (!v111 && v183)
        {
          *((_DWORD *)v183 + 6) += 2;
          v194 = v113;
          v195 = v184;
          v196 = v185;
          LOBYTE(v197) = 0;
          if (!WebCore::inSameLine((WebCore *)&v183, (const WebCore::VisiblePosition *)&v194, v112))
            LOBYTE(v186) = 0;
          v171 = v194;
          v194 = 0;
          if (v171)
          {
            if (*((_DWORD *)v171 + 6) == 2)
            {
              if ((*((_WORD *)v171 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v171, v39);
            }
            else
            {
              *((_DWORD *)v171 + 6) -= 2;
            }
          }
          v113 = v183;
        }
        v114 = v113 == 0;
        v115 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (v114)
          v115 = 0;
        if (v115)
        {
          WebCore::startOfParagraph((uint64_t)&v183, 1, &v194);
          v116 = WebCore::operator==((uint64_t *)&v183, (uint64_t *)&v194);
          v117 = v194;
          v194 = 0;
          if (v117)
          {
            if (*((_DWORD *)v117 + 6) == 2)
            {
              if ((*((_WORD *)v117 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v117, v39);
            }
            else
            {
              *((_DWORD *)v117 + 6) -= 2;
            }
          }
          if (v116)
          {
            if (*(_BYTE *)(v11 + 225) == 2)
            {
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 192), (uint64_t)&v188);
              v191 = 1;
            }
            else
            {
              v118 = *(unsigned __int8 *)(v11 + 224);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 192), (uint64_t)&v188);
              v191 = 1;
              if (!v118)
              {
                v177 = v188;
                if (v188)
                {
                  *((_DWORD *)v188 + 6) += 2;
                  v194 = v177;
                  v195 = v189;
                  v196 = v190;
                  LOBYTE(v197) = 0;
                  if (!WebCore::inSameLine((WebCore *)&v188, (const WebCore::VisiblePosition *)&v194, v119))
                    v191 = 0;
                  v178 = v194;
                  v194 = 0;
                  if (v178)
                  {
                    if (*((_DWORD *)v178 + 6) == 2)
                    {
                      if ((*((_WORD *)v178 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v178, v39);
                    }
                    else
                    {
                      *((_DWORD *)v178 + 6) -= 2;
                    }
                  }
                }
              }
            }
            v120 = v188;
            v121 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            if (!v188)
              v121 = 0;
            if (v121)
            {
              WebCore::endOfParagraph((WebCore::Node *)&v188, 1, &v194);
              v116 = WebCore::operator==((uint64_t *)&v188, (uint64_t *)&v194);
              v122 = v194;
              v194 = 0;
              if (v122)
              {
                if (*((_DWORD *)v122 + 6) == 2)
                {
                  if ((*((_WORD *)v122 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v122, v39);
                }
                else
                {
                  *((_DWORD *)v122 + 6) -= 2;
                }
              }
              v120 = v188;
            }
            else
            {
              v116 = 0;
            }
            v188 = 0;
            if (v120)
            {
              if (*((_DWORD *)v120 + 6) == 2)
              {
                if ((*((_WORD *)v120 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v120, v39);
              }
              else
              {
                *((_DWORD *)v120 + 6) -= 2;
              }
            }
          }
        }
        else
        {
          v116 = 0;
        }
        v124 = v183;
        v183 = 0;
        if (v124)
        {
          if (*((_DWORD *)v124 + 6) == 2)
          {
            if ((*((_WORD *)v124 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v124, v39);
          }
          else
          {
            *((_DWORD *)v124 + 6) -= 2;
          }
        }
        if (a3)
          v125 = v116;
        else
          v125 = 0;
        if (v125)
          WebCore::CompositeEditCommand::applyStyle((WebCore::CompositeEditCommand *)v11, (WebCore::EditingStyle *)a3, 4);
      }
      if (v181 && a5)
      {
        *((_DWORD *)var0 + 6) += 4;
        v126 = *((_WORD *)var0 + 14);
        if ((v126 & 1) != 0)
        {
          v128 = *((_QWORD *)var0 + 10);
          if (v128)
            LODWORD(v128) = *(_DWORD *)(v128 + 4);
        }
        else if ((v126 & 4) != 0 && (v127 = *((_QWORD *)var0 + 10)) != 0)
        {
          LODWORD(v128) = 0;
          do
          {
            LODWORD(v128) = v128 + 1;
            v127 = *(_QWORD *)(v127 + 56);
          }
          while (v127);
        }
        else
        {
          LODWORD(v128) = 0;
        }
        v183 = (WebCore::Node *)var0;
        v184 = 0;
        v186 = (WebCore::Node *)var0;
        v187 = v128;
        WebCore::resolveCharacterRange(&v183, v98 + v13, 0, 1, &v194);
        v130 = v194;
        v131 = v195;
        v132 = v197;
        v194 = 0;
        v197 = 0;
        if (v132)
        {
          v133 = *((_DWORD *)v132 + 6) - 2;
          if (*((_DWORD *)v132 + 6) != 2)
            goto LABEL_281;
          if ((*((_WORD *)v132 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v132, v129);
            v132 = v194;
            v194 = 0;
            if (v132)
            {
              v133 = *((_DWORD *)v132 + 6) - 2;
              if (*((_DWORD *)v132 + 6) == 2)
              {
                if ((*((_WORD *)v132 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v132, v158);
              }
              else
              {
LABEL_281:
                *((_DWORD *)v132 + 6) = v133;
              }
            }
          }
        }
        *((_DWORD *)v130 + 6) += 2;
        v134 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v130 + 208))(v130);
        if (v131)
          v136 = 10;
        else
          v136 = 9;
        if ((v134 & 1) != 0)
          v137 = 8;
        else
          v137 = v136;
        if (*((_DWORD *)v130 + 6) == 2)
        {
          if ((*((_WORD *)v130 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v130, v135);
        }
        else
        {
          *((_DWORD *)v130 + 6) -= 2;
        }
        v138 = v186;
        v186 = 0;
        if (v138)
        {
          if (*((_DWORD *)v138 + 6) == 2)
          {
            if ((*((_WORD *)v138 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v138, v135);
          }
          else
          {
            *((_DWORD *)v138 + 6) -= 2;
          }
        }
        v139 = v183;
        v183 = 0;
        if (v139)
        {
          if (*((_DWORD *)v139 + 6) == 2)
          {
            if ((*((_WORD *)v139 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v139, v135);
          }
          else
          {
            *((_DWORD *)v139 + 6) -= 2;
          }
        }
        *((_DWORD *)var0 + 6) += 4;
        v140 = *((_WORD *)var0 + 14);
        if ((v140 & 1) != 0)
        {
          v142 = *((_QWORD *)var0 + 10);
          if (v142)
            LODWORD(v142) = *(_DWORD *)(v142 + 4);
        }
        else if ((v140 & 4) != 0 && (v141 = *((_QWORD *)var0 + 10)) != 0)
        {
          LODWORD(v142) = 0;
          do
          {
            LODWORD(v142) = v142 + 1;
            v141 = *(_QWORD *)(v141 + 56);
          }
          while (v141);
        }
        else
        {
          LODWORD(v142) = 0;
        }
        v183 = (WebCore::Node *)var0;
        v184 = 0;
        v186 = (WebCore::Node *)var0;
        v187 = v142;
        WebCore::resolveCharacterRange(&v183, v98 + v179, 0, 1, &v194);
        v144 = v194;
        v145 = v195;
        v146 = v197;
        v194 = 0;
        v197 = 0;
        if (v146)
        {
          v147 = *((_DWORD *)v146 + 6) - 2;
          if (*((_DWORD *)v146 + 6) != 2)
            goto LABEL_307;
          if ((*((_WORD *)v146 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v146, v143);
            v146 = v194;
            v194 = 0;
            if (v146)
            {
              v147 = *((_DWORD *)v146 + 6) - 2;
              if (*((_DWORD *)v146 + 6) == 2)
              {
                if ((*((_WORD *)v146 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v146, v159);
              }
              else
              {
LABEL_307:
                *((_DWORD *)v146 + 6) = v147;
              }
            }
          }
        }
        *((_DWORD *)v144 + 6) += 2;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v144 + 208))(v144) & 1) != 0)
        {
          v149 = 8;
        }
        else if (v145)
        {
          v149 = 10;
        }
        else
        {
          v149 = 9;
        }
        if (*((_DWORD *)v144 + 6) == 2)
        {
          if ((*((_WORD *)v144 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v144, v148);
        }
        else
        {
          *((_DWORD *)v144 + 6) -= 2;
        }
        v150 = v186;
        v186 = 0;
        if (v150)
        {
          if (*((_DWORD *)v150 + 6) == 2)
          {
            if ((*((_WORD *)v150 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v150, v148);
          }
          else
          {
            *((_DWORD *)v150 + 6) -= 2;
          }
        }
        v151 = v183;
        v183 = 0;
        if (v151)
        {
          if (*((_DWORD *)v151 + 6) == 2)
          {
            if ((*((_WORD *)v151 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v151, v148);
          }
          else
          {
            *((_DWORD *)v151 + 6) -= 2;
          }
        }
        *((_DWORD *)v130 + 6) += 2;
        v194 = v130;
        v195 = v131;
        v196 = v137;
        *((_DWORD *)v144 + 6) += 2;
        v197 = v144;
        v198 = v145;
        v199 = v149;
        v200 = 0;
        v201 = 0;
        v202 &= 0xF0u;
        v203 = 0;
        v204 = 0;
        v205 &= 0xF0u;
        v206 = 0;
        v207 = 0;
        v208 &= 0xF0u;
        v209 = 0;
        v210 = 0;
        v211 &= 0xF0u;
        v212 = 1;
        v213 = v213 & 0xFD | v182;
        WebCore::VisibleSelection::validate((uint64_t)&v194, 0);
        WebCore::EditCommand::setEndingSelection((uint64_t *)v11, (const WebCore::VisibleSelection *)&v194);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v194);
        if (*((_DWORD *)v144 + 6) == 2)
        {
          if ((*((_WORD *)v144 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v144, v39);
        }
        else
        {
          *((_DWORD *)v144 + 6) -= 2;
        }
        if (*((_DWORD *)v130 + 6) == 2)
        {
          if ((*((_WORD *)v130 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v130, v39);
        }
        else
        {
          *((_DWORD *)v130 + 6) -= 2;
        }
      }
      if (*((_DWORD *)var0 + 6) == 2)
      {
        if ((*((_WORD *)var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)var0, v39);
        v123 = 0;
      }
      else
      {
        v123 = 0;
        *((_DWORD *)var0 + 6) -= 2;
      }
      goto LABEL_324;
    }
LABEL_458:
    __break(1u);
LABEL_459:
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v11 + 192), (uint64_t)&v183);
    LOBYTE(v186) = 1;
  }
  if (!v68)
  {
    v70 = 1;
    goto LABEL_251;
  }
  *((_DWORD *)v64 + 6) = v68;
LABEL_253:
  v123 = v180;
LABEL_324:
  v152 = v193[0];
  v193[0] = 0;
  if (v152)
  {
    if (*((_DWORD *)v152 + 6) == 2)
    {
      if ((*((_WORD *)v152 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v152, v39);
    }
    else
    {
      *((_DWORD *)v152 + 6) -= 2;
    }
  }
  if (!a3)
  {
LABEL_330:
    if (!v123)
      goto LABEL_333;
LABEL_331:
    if (*((_DWORD *)v123 + 6) == 2)
    {
      if ((*((_WORD *)v123 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v123, v39);
    }
    else
    {
      *((_DWORD *)v123 + 6) -= 2;
    }
    goto LABEL_333;
  }
  if (LODWORD(a3->var0.var0.var0) != 1)
  {
    --LODWORD(a3->var0.var0.var0);
    goto LABEL_330;
  }
  WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)a3, (WTF::StringImpl *)v39);
  WTF::fastFree(v156, v157);
  if (v123)
    goto LABEL_331;
LABEL_333:
  if (*(_DWORD *)(v43 + 24) == 2)
  {
    if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v43, v39);
  }
  else
  {
    *(_DWORD *)(v43 + 24) -= 2;
  }
LABEL_335:
  v153 = v214[0];
  v214[0] = 0;
  if (v153)
  {
    if (*(_DWORD *)(v153 + 24) == 2)
    {
      if ((*(_WORD *)(v153 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v153, v39);
    }
    else
    {
      *(_DWORD *)(v153 + 24) -= 2;
    }
  }
  v42 = v216[0];
  v216[0] = 0;
  if (v42)
  {
LABEL_339:
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, v39);
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  v154 = (uint64_t)v218;
  v218 = 0;
  if (v154)
  {
    if (*(_DWORD *)(v154 + 24) == 2)
    {
      if ((*(_WORD *)(v154 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v154, v39);
    }
    else
    {
      *(_DWORD *)(v154 + 24) -= 2;
    }
  }
  v155 = v222;
  v222 = 0;
  if (v155)
  {
    if (*((_DWORD *)v155 + 6) == 2)
    {
      if ((*((_WORD *)v155 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v155, v39);
    }
    else
    {
      *((_DWORD *)v155 + 6) -= 2;
    }
  }
  this = (unsigned int *)v226;
  if (v226)
  {
    if (*((_DWORD *)v226 + 6) == 2)
    {
      if ((*((_WORD *)v226 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v226, v39);
    }
    else
    {
      *((_DWORD *)v226 + 6) -= 2;
    }
  }
  return this;
}

WebCore::Node *WebCore::CompositeEditCommand::pushAnchorElementDown(WebCore::CompositeEditCommand *this, WebCore::Element *a2)
{
  uint64_t v4;
  void *v5;
  WebCore::Node *result;
  WebCore::Node *v7;
  uint64_t *v8[13];

  WebCore::VisibleSelection::selectionFromContentsOfNode(a2, (WebCore::VisibleSelection *)v8);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)v8);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v8);
  *((_DWORD *)a2 + 6) += 2;
  v7 = a2;
  v4 = WTF::fastMalloc((WTF *)0x168);
  v8[0] = (uint64_t *)WebCore::ApplyStyleCommand::ApplyStyleCommand(v4, (uint64_t *)&v7, 0, 4);
  WebCore::CompositeEditCommand::applyCommandToComposite(this, v8);
  if (v8[0])
  {
    if (*((_DWORD *)v8[0] + 2) == 1)
      (*(void (**)(void))(*v8[0] + 8))();
    else
      --*((_DWORD *)v8[0] + 2);
  }
  result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if ((*((_BYTE *)a2 + 22) & 8) != 0)
    return WebCore::CompositeEditCommand::removeNodePreservingChildren(this, (uint64_t)a2, 1);
  return result;
}

unsigned int *WebCore::CompositeEditCommand::cleanupAfterDeletion(WebCore::CompositeEditCommand *this, VisiblePosition *a2)
{
  int v4;
  WebCore::Node *v5;
  const WebCore::VisiblePosition *v6;
  uint64_t (*v7)();
  _BOOL4 v8;
  WebCore::Node *v9;
  _BOOL4 v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  int v18;
  WebCore::Node *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  Node *var0;
  void *v25;
  char v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  unsigned int *result;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  uint64_t v33;
  WebCore::Node *v34;
  unsigned int var1;
  char v36;
  WebCore::Node *v37;
  unsigned int v38;
  char v39;
  char v40;
  WebCore::Node *v41;
  unsigned int v42;
  char v43;
  char v44;

  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v37);
    v40 = 1;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v37);
    v40 = 1;
    if (!v4)
    {
      v31 = v37;
      if (v37)
      {
        *((_DWORD *)v37 + 6) += 2;
        v41 = v31;
        v42 = v38;
        v43 = v39;
        v44 = 0;
        if (!WebCore::inSameLine((WebCore *)&v37, (const WebCore::VisiblePosition *)&v41, v6))
          v40 = 0;
        v32 = v41;
        v41 = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32, v5);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
        if ((v40 == 0) == a2->var1)
          goto LABEL_5;
        goto LABEL_4;
      }
    }
  }
  if (!a2->var1)
    goto LABEL_5;
LABEL_4:
  if (WebCore::Position::equals((WebCore::Position *)&v37, (const WebCore::Position *)a2))
    goto LABEL_59;
LABEL_5:
  if (v37)
    v7 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v7 = 0;
  if (v7)
  {
    WebCore::startOfParagraph((uint64_t)&v37, 1, &v41);
    v8 = WebCore::operator==((uint64_t *)&v37, (uint64_t *)&v41);
    v9 = v41;
    v41 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v5);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    if (v8)
    {
      if (v37
         ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
         : 0)
      {
        WebCore::endOfParagraph((WebCore::Node *)&v37, 1, &v41);
        v11 = WebCore::operator==((uint64_t *)&v37, (uint64_t *)&v41);
        v12 = v41;
        v41 = 0;
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 2)
          {
            if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v12, v5);
          }
          else
          {
            *((_DWORD *)v12 + 6) -= 2;
          }
        }
        if (v11)
        {
          v13 = v37;
          if (v37)
            *((_DWORD *)v37 + 6) += 2;
          v34 = v13;
          var1 = v38;
          v36 = v39;
          WebCore::Position::downstream((uint64_t)&v34, (WebCore::Node *)1, (uint64_t)&v41);
          v15 = v34;
          v34 = 0;
          if (v15)
          {
            if (*((_DWORD *)v15 + 6) == 2)
            {
              if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v15, v14);
            }
            else
            {
              *((_DWORD *)v15 + 6) -= 2;
            }
          }
          v16 = v41;
          if (v41)
            *((_DWORD *)v41 + 6) += 2;
          if ((*((_WORD *)v16 + 14) & 0x10) == 0
            || *(_QWORD *)(*((_QWORD *)v16 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
          {
            if ((*((_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFLL) != 0
              && (*(_BYTE *)((*((_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
            {
              var0 = a2->var0.var0.var0;
              if (a2->var0.var0.var0)
                *((_DWORD *)var0 + 6) += 2;
              v34 = (WebCore::Node *)var0;
              var1 = a2->var0.var1;
              v36 = *((_BYTE *)&a2->var0 + 12);
              v26 = WebCore::Position::rendersInDifferentPosition((WebCore::Position *)&v41, (const WebCore::Position *)&v34);
              v27 = v34;
              v34 = 0;
              if (v27)
              {
                if (*((_DWORD *)v27 + 6) == 2)
                {
                  if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v27, v25);
                }
                else
                {
                  *((_DWORD *)v27 + 6) -= 2;
                }
              }
              if ((v26 & 1) == 0)
              {
                WebCore::highestNodeToRemoveInPruning((unsigned int *)v16, (WebCore::Node *)v25, (unsigned int **)&v34);
                v5 = v34;
                if (v34)
                {
                  (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, v34, 1);
                  v30 = v34;
                  v34 = 0;
                  if (v30)
                  {
                    if (*((_DWORD *)v30 + 6) == 2)
                    {
                      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v30, v5);
                    }
                    else
                    {
                      *((_DWORD *)v30 + 6) -= 2;
                    }
                  }
                }
                goto LABEL_54;
              }
            }
            else
            {
              if (!WebCore::lineBreakExistsAtPosition((WebCore *)&v41, (const WebCore::Position *)v14))
              {
LABEL_54:
                if (*((_DWORD *)v16 + 6) == 2)
                {
                  if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v16, v5);
                }
                else
                {
                  *((_DWORD *)v16 + 6) -= 2;
                }
                v28 = v41;
                v41 = 0;
                if (v28)
                {
                  if (*((_DWORD *)v28 + 6) == 2)
                  {
                    if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v28, v5);
                  }
                  else
                  {
                    *((_DWORD *)v28 + 6) -= 2;
                  }
                }
                goto LABEL_59;
              }
              if ((*((_WORD *)v16 + 14) & 2) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195A90FE4);
              }
              v17 = *((_QWORD *)v16 + 10);
              if (!v17 || *(_DWORD *)(v17 + 4) != 1)
              {
                if ((v43 & 8) == 0 && ((v18 = v43 & 7, v18 == 4) || v18 == 2))
                {
                  v19 = v41;
                  if (v41)
                  {
                    v20 = *((_DWORD *)v41 + 6);
                    *((_DWORD *)v41 + 6) = v20 + 2;
                    v21 = *((_WORD *)v19 + 14);
                    if ((v21 & 1) != 0)
                    {
                      v33 = *((_QWORD *)v19 + 10);
                      if (v33)
                        v23 = *(unsigned int *)(v33 + 4);
                      else
                        v23 = 0;
                    }
                    else if ((v21 & 4) != 0 && (v22 = *((_QWORD *)v19 + 10)) != 0)
                    {
                      LODWORD(v23) = 0;
                      do
                      {
                        v23 = (v23 + 1);
                        v22 = *(_QWORD *)(v22 + 56);
                      }
                      while (v22);
                    }
                    else
                    {
                      v23 = (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v19 + 208))(v19) ^ 1;
                      v20 = *((_DWORD *)v19 + 6) - 2;
                    }
                    if (v20)
                    {
                      *((_DWORD *)v19 + 6) = v20;
                    }
                    else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v19, v5);
                    }
                  }
                  else
                  {
                    v23 = 0;
                  }
                }
                else
                {
                  v23 = v42;
                }
                (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, v16, v23, 1);
                goto LABEL_54;
              }
            }
          }
          WebCore::CompositeEditCommand::removeNodeAndPruneAncestors(this, v16);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_59:
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::CompositeEditCommand::moveParagraphWithClones(unsigned int *this, VisiblePosition *a2, VisiblePosition *a3, WebCore::Element *a4, WebCore::Node *a5)
{
  BOOL v5;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  Node *var0;
  void *v14;
  WTF *v15;
  WebCore::Node *v16;
  Node *v17;
  void *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _BOOL4 v26;
  WTF *v27;
  WebCore::Node *v28;
  __int16 v29;
  WebCore::Node *v30;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WebCore::Node *v35;
  unint64_t v36;
  WebCore::Element *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _BOOL4 v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  __int16 v51;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  void *v56;
  Node *v57;
  uint64_t v58;
  void *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)();
  int v68;
  int v69;
  WTF *v70;
  int v71;
  _BOOL4 v72;
  uint64_t (*v73)();
  BOOL v74;
  WTF *v75;
  uint64_t (*v76)();
  _BOOL4 v77;
  WTF *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  uint64_t v92;
  __int16 v93;
  WebCore::Node *v94;
  __int16 v95;
  WebCore::Node *v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  BOOL v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Element *v103;
  WebCore::Element *v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  WebCore::Node *v107;
  int v108;
  __int16 v109;
  WebCore::Node *v110;
  int v111;
  WTF *v113;
  WebCore::Node *v114;
  WebCore::Node *v116;
  int v117;
  char v118;
  VisiblePosition v119;
  WTF *v120;
  uint64_t v121;
  WebCore::Node *v122;
  int v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  int v129;
  char v130;
  uint64_t v131;
  int v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  __int16 v137;
  char v138;
  WebCore::Node *v139;
  int v140;
  char v141;
  WebCore::Node *v142;
  int v143;
  char v144;
  WTF *v145;
  int v146;
  char v147;
  char v148;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  WebCore::Node *v152;
  WebCore::Node *v153;

  if (a2->var0.var0.var0)
    v5 = a3->var0.var0.var0 == 0;
  else
    v5 = 1;
  if (v5)
    return this;
  v10 = this;
  WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)a2, (uint64_t)&v145);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v145))
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v145, (uint64_t)&v120);
    v149 = v120;
    LODWORD(v150) = v121;
    BYTE4(v150) = BYTE4(v121);
  }
  LOBYTE(v151) = 1;
  v12 = (uint64_t)v145;
  v145 = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  WebCore::VisiblePosition::next((unsigned __int8 *)a3, 0, 0, (uint64_t)&v145);
  var0 = a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    *((_DWORD *)var0 + 6) += 2;
  v120 = (WTF *)var0;
  LODWORD(v121) = a2->var0.var1;
  BYTE4(v121) = *((_BYTE *)&a2->var0 + 12);
  WebCore::Position::downstream((uint64_t)&v120, (WebCore::Node *)1, (uint64_t)&v142);
  v15 = v120;
  v120 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v14);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (WebCore::operator==((uint64_t *)a2, (uint64_t *)a3))
  {
    v16 = v142;
    if (v142)
      *((_DWORD *)v142 + 6) += 2;
    v139 = v16;
    v140 = v143;
    v141 = v144;
  }
  else
  {
    v17 = a3->var0.var0.var0;
    if (a3->var0.var0.var0)
      *((_DWORD *)v17 + 6) += 2;
    v120 = (WTF *)v17;
    LODWORD(v121) = a3->var0.var1;
    BYTE4(v121) = *((_BYTE *)&a3->var0 + 12);
    WebCore::Position::upstream((uint64_t)&v120, (WebCore::Node *)1, (uint64_t)&v139);
    v19 = v120;
    v120 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
  }
  if (!a5)
  {
    if (WebCore::Node::isRootEditableElement(0))
    {
LABEL_27:
      if (a4)
        *((_DWORD *)a4 + 6) += 2;
      goto LABEL_64;
    }
    goto LABEL_30;
  }
  *((_DWORD *)a5 + 6) += 2;
  if (WebCore::Node::isRootEditableElement(a5))
    goto LABEL_27;
  if ((*((_WORD *)a5 + 14) & 0x10) != 0)
  {
    v23 = *((_DWORD *)a5 + 6);
    *((_DWORD *)a5 + 6) = v23 + 2;
    if ((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_458;
      }
      v24 = *(unsigned __int8 *)((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
      v26 = v24 == 35 || v24 == 63;
      if (v23)
        goto LABEL_40;
    }
    else
    {
      v26 = 0;
      if (v23)
      {
LABEL_40:
        *((_DWORD *)a5 + 6) = v23;
        goto LABEL_41;
      }
    }
    if ((*((_WORD *)a5 + 15) & 0x400) != 0)
    {
      v22 = *(_QWORD *)(*((_QWORD *)a5 + 5) + 8);
      if (v26)
        goto LABEL_42;
      goto LABEL_56;
    }
    WebCore::Node::removedLastRef(a5, v20);
LABEL_41:
    v22 = *(_QWORD *)(*((_QWORD *)a5 + 5) + 8);
    if (v26)
    {
LABEL_42:
      v21 = 2;
      goto LABEL_57;
    }
LABEL_56:
    v21 = 0;
    goto LABEL_57;
  }
LABEL_30:
  v21 = 0;
  v22 = *(_QWORD *)(*((_QWORD *)a5 + 5) + 8);
LABEL_57:
  (*(void (**)(WTF **__return_ptr, WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)a5 + 136))(&v120, a5, v22, v21);
  v27 = v120;
  *((_DWORD *)v120 + 6) += 2;
  v120 = v27;
  *((_DWORD *)a4 + 6) += 2;
  v116 = a4;
  WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v10, (uint64_t *)&v120, (uint64_t *)&v116);
  if (v116)
  {
    if (*((_DWORD *)v116 + 6) == 2)
    {
      if ((*((_WORD *)v116 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v116, v20);
    }
    else
    {
      *((_DWORD *)v116 + 6) -= 2;
    }
  }
  if (v120)
  {
    if (*((_DWORD *)v120 + 6) == 2)
    {
      if ((*((_WORD *)v120 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v120, v20);
    }
    else
    {
      *((_DWORD *)v120 + 6) -= 2;
    }
  }
  a4 = v27;
LABEL_64:
  v28 = v142;
  if (v142 == a5)
  {
    v28 = a5;
    goto LABEL_158;
  }
  if (!a5 || (*((_WORD *)a4 + 14) & 8) == 0)
    goto LABEL_158;
  v29 = *((_WORD *)a5 + 14);
  if ((v29 & 0xF000) == 0x9000)
  {
    if (**((WebCore::Node ***)v142 + 5) != a5
      || (*((_WORD *)v142 + 14) & 0xF000) == 0x9000
      || (*((_BYTE *)v142 + 22) & 8) == 0)
    {
      goto LABEL_158;
    }
    v120 = 0;
    v121 = 0;
    goto LABEL_79;
  }
  if ((v29 & 4) == 0
    || !*((_QWORD *)a5 + 10)
    || ((*((unsigned __int8 *)v142 + 22) ^ *((unsigned __int8 *)a5 + 22)) & 8) != 0)
  {
    goto LABEL_158;
  }
  v30 = v142;
  do
    v30 = (WebCore::Node *)*((_QWORD *)v30 + 4);
  while (v30 != a5 && v30 != 0);
  if (!v30)
    goto LABEL_158;
  v120 = 0;
  v121 = 0;
  if (v142)
  {
LABEL_79:
    *((_DWORD *)v142 + 6) += 2;
    v116 = v28;
    while (v28 != a5)
    {
      v32 = HIDWORD(v121);
      if (HIDWORD(v121) == (_DWORD)v121)
      {
        v33 = *(_QWORD *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v120, HIDWORD(v121) + 1, (unint64_t)&v116);
        if (v33)
          *(_DWORD *)(v33 + 24) += 2;
        LODWORD(v32) = HIDWORD(v121);
        *((_QWORD *)v120 + HIDWORD(v121)) = v33;
      }
      else
      {
        v34 = v120;
        *((_DWORD *)v28 + 6) += 2;
        *((_QWORD *)v34 + v32) = v28;
      }
      HIDWORD(v121) = v32 + 1;
      v35 = v116;
      v28 = (WebCore::Node *)*((_QWORD *)v116 + 4);
      if (v28)
        *((_DWORD *)v28 + 6) += 2;
      v116 = v28;
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v35, v20);
          v28 = v116;
        }
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
      if (!v28)
        goto LABEL_97;
    }
    v116 = 0;
    if (*((_DWORD *)a5 + 6) == 2)
    {
      if ((*((_WORD *)a5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a5, v20);
    }
    else
    {
      *((_DWORD *)a5 + 6) -= 2;
    }
  }
LABEL_97:
  if (!HIDWORD(v121))
    goto LABEL_154;
  v36 = HIDWORD(v121) - 1;
  do
  {
    if (v36 >= HIDWORD(v121))
    {
      __break(0xC471u);
LABEL_458:
      JUMPOUT(0x195A912E8);
    }
    v37 = a4;
    v38 = *((_QWORD *)v120 + v36);
    *((_QWORD *)v120 + v36) = 0;
    if (!v38 || (*(_WORD *)(v38 + 28) & 0x10) == 0)
    {
      v39 = 0;
      v40 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
      goto LABEL_120;
    }
    v41 = *(_DWORD *)(v38 + 24);
    *(_DWORD *)(v38 + 24) = v41 + 2;
    if ((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A91F54);
      }
      v42 = *(unsigned __int8 *)((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
      v44 = v42 == 35 || v42 == 63;
      if (v41)
      {
LABEL_112:
        *(_DWORD *)(v38 + 24) = v41;
        goto LABEL_113;
      }
    }
    else
    {
      v44 = 0;
      if (v41)
        goto LABEL_112;
    }
    if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v38, v20);
LABEL_113:
      v40 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
      if (v44)
        goto LABEL_114;
      goto LABEL_119;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
    if (v44)
    {
LABEL_114:
      v39 = 2;
      goto LABEL_120;
    }
LABEL_119:
    v39 = 0;
LABEL_120:
    (*(void (**)(WebCore::Node **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 136))(&v116, v38, v40, v39);
    v45 = v116;
    *((_DWORD *)v116 + 6) += 2;
    v153 = v45;
    if ((*((_WORD *)v37 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A91F34);
    }
    *((_DWORD *)v37 + 6) += 2;
    v152 = v37;
    WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v10, (uint64_t *)&v153, (uint64_t *)&v152);
    if (v152)
    {
      if (*((_DWORD *)v152 + 6) == 2)
      {
        if ((*((_WORD *)v152 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v152, v20);
      }
      else
      {
        *((_DWORD *)v152 + 6) -= 2;
      }
    }
    if (v153)
    {
      if (*((_DWORD *)v153 + 6) == 2)
      {
        if ((*((_WORD *)v153 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v153, v20);
      }
      else
      {
        *((_DWORD *)v153 + 6) -= 2;
      }
    }
    a4 = v116;
    v116 = 0;
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v37, v20);
        v46 = v116;
        v116 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, v20);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
    if (*(_DWORD *)(v38 + 24) == 2)
    {
      if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v38, v20);
    }
    else
    {
      *(_DWORD *)(v38 + 24) -= 2;
    }
    --v36;
  }
  while (v36 != -1);
  v47 = v120;
  if (HIDWORD(v121))
  {
    v48 = 8 * HIDWORD(v121);
    do
    {
      v49 = *(_QWORD *)v47;
      *(_QWORD *)v47 = 0;
      if (v49)
      {
        if (*(_DWORD *)(v49 + 24) == 2)
        {
          if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v49, v20);
        }
        else
        {
          *(_DWORD *)(v49 + 24) -= 2;
        }
      }
      v47 = (WTF *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
LABEL_154:
    v47 = v120;
  }
  if (v47)
  {
    v120 = 0;
    LODWORD(v121) = 0;
    WTF::fastFree(v47, v20);
  }
  v28 = v142;
LABEL_158:
  if ((*((_BYTE *)v28 + 22) & 8) == 0
    || (v28 != v139 ? (v50 = (*((_QWORD *)v139 + 2) & 0x8000000000000) == 0) : (v50 = 1), v50))
  {
LABEL_172:
    v53 = a5;
    goto LABEL_173;
  }
  v51 = *((_WORD *)v139 + 14);
  if ((v51 & 0xF000) == 0x9000)
  {
    if (**((WebCore::Node ***)v28 + 5) != v139 || (*((_WORD *)v28 + 14) & 0xF000) == 0x9000)
      goto LABEL_341;
    goto LABEL_172;
  }
  if ((v51 & 4) != 0 && *((_QWORD *)v139 + 10))
  {
    do
      v28 = (WebCore::Node *)*((_QWORD *)v28 + 4);
    while (v28 != v139 && v28 != 0);
    if (v28)
      goto LABEL_172;
  }
LABEL_341:
  while (2)
  {
    v53 = a5;
    if (!a5)
      goto LABEL_352;
    v94 = v139;
    v95 = *((_WORD *)a5 + 14);
    if ((v95 & 0xF000) == 0x9000)
    {
      if (**((WebCore::Node ***)v139 + 5) == a5
        && (*((_WORD *)v139 + 14) & 0xF000) != 0x9000
        && (*((_BYTE *)v139 + 22) & 8) != 0)
      {
        break;
      }
      goto LABEL_352;
    }
    if ((v95 & 4) == 0
      || !*((_QWORD *)a5 + 10)
      || ((*((unsigned __int8 *)v139 + 22) ^ *((unsigned __int8 *)a5 + 22)) & 8) != 0)
    {
      goto LABEL_352;
    }
    do
      v94 = (WebCore::Node *)*((_QWORD *)v94 + 4);
    while (v94 != a5 && v94 != 0);
    if (!v94)
    {
LABEL_352:
      a5 = (WebCore::Node *)*((_QWORD *)a5 + 4);
      if (!a5)
        break;
      *((_DWORD *)a5 + 6) += 2;
      if (*((_DWORD *)v53 + 6) == 2)
      {
        if ((*((_WORD *)v53 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v53, v20);
      }
      else
      {
        *((_DWORD *)v53 + 6) -= 2;
      }
      continue;
    }
    break;
  }
  v97 = v142;
  if (v142)
  {
    *((_DWORD *)v142 + 6) += 2;
    if (v97 == v53)
    {
      v97 = v53;
      goto LABEL_448;
    }
  }
  v98 = (WebCore::Node *)*((_QWORD *)v97 + 7);
  if (!v98)
  {
    v99 = v97;
    do
    {
      v99 = (WebCore::Node *)*((_QWORD *)v99 + 4);
      if (v99)
        v100 = v99 == v53;
      else
        v100 = 1;
      if (v100)
        goto LABEL_448;
      v98 = (WebCore::Node *)*((_QWORD *)v99 + 7);
    }
    while (!v98);
  }
  *((_DWORD *)v98 + 6) += 2;
  while (2)
  {
    v101 = v98;
    v102 = (WebCore::Node *)*((_QWORD *)v97 + 4);
    if (v102)
    {
      v103 = a4;
      while (1)
      {
        v104 = v103;
        v105 = v97;
        v103 = (WebCore::Element *)*((_QWORD *)v103 + 4);
        if (!v103 || (v97 = v102, v102 == *((WebCore::Node **)v101 + 4)))
        {
          v103 = v104;
          v97 = v105;
          goto LABEL_388;
        }
        *((_DWORD *)v102 + 6) += 2;
        if (*((_DWORD *)v105 + 6) == 2)
        {
          if ((*((_WORD *)v105 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v105, v20);
            v103 = (WebCore::Element *)*((_QWORD *)v104 + 4);
            if (!v103)
              goto LABEL_377;
          }
        }
        else
        {
          *((_DWORD *)v105 + 6) -= 2;
        }
        *((_DWORD *)v103 + 6) += 2;
LABEL_377:
        if (*((_DWORD *)v104 + 6) == 2)
        {
          if ((*((_WORD *)v104 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v104, v20);
        }
        else
        {
          *((_DWORD *)v104 + 6) -= 2;
        }
        v102 = (WebCore::Node *)*((_QWORD *)v97 + 4);
        if (!v102)
          goto LABEL_388;
      }
    }
    v103 = a4;
LABEL_388:
    (*(void (**)(WTF **__return_ptr, WebCore::Node *, _QWORD, uint64_t))(*(_QWORD *)v101 + 136))(&v120, v101, *(_QWORD *)(*((_QWORD *)v101 + 5) + 8), 2);
    v106 = v120;
    *((_DWORD *)v120 + 6) += 2;
    v116 = v106;
    WebCore::CompositeEditCommand::insertNodeAfter(v10, (uint64_t *)&v116, (uint64_t)v103);
    if (v116)
    {
      if (*((_DWORD *)v116 + 6) == 2)
      {
        if ((*((_WORD *)v116 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v116, v20);
      }
      else
      {
        *((_DWORD *)v116 + 6) -= 2;
      }
    }
    a4 = v120;
    v120 = 0;
    if (*((_DWORD *)v103 + 6) == 2)
    {
      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v103, v20);
    }
    else
    {
      *((_DWORD *)v103 + 6) -= 2;
    }
    v107 = v139;
    if (v101 == v139)
    {
      LOBYTE(v111) = 1;
      goto LABEL_418;
    }
    if (!v139)
    {
      if ((*((_WORD *)v101 + 14) & 0xF000) == 0x9000
        && (WebCore::Node *)*MEMORY[0x28] == v101
        && (MEMORY[0x1C] & 0xF000) != 0x9000)
      {
        v111 = (MEMORY[0x16] >> 3) & 1;
      }
      else
      {
        LOBYTE(v111) = 0;
      }
      goto LABEL_418;
    }
    v108 = *((_DWORD *)v139 + 6);
    *((_DWORD *)v139 + 6) = v108 + 2;
    v109 = *((_WORD *)v101 + 14);
    if ((v109 & 0xF000) == 0x9000)
    {
      if (**((WebCore::Node ***)v107 + 5) == v101 && (*((_WORD *)v107 + 14) & 0xF000) != 0x9000)
      {
        v111 = (*((unsigned __int8 *)v107 + 22) >> 3) & 1;
        if (v108)
          goto LABEL_417;
        goto LABEL_441;
      }
LABEL_415:
      LOBYTE(v111) = 0;
      goto LABEL_416;
    }
    if ((v109 & 4) == 0
      || !*((_QWORD *)v101 + 10)
      || ((*((unsigned __int8 *)v107 + 22) ^ *((unsigned __int8 *)v101 + 22)) & 8) != 0)
    {
      goto LABEL_415;
    }
    v110 = v107;
    do
    {
      v110 = (WebCore::Node *)*((_QWORD *)v110 + 4);
      LOBYTE(v111) = v110 != 0;
    }
    while (v110 != v101 && v110 != 0);
LABEL_416:
    if (v108)
    {
LABEL_417:
      *((_DWORD *)v107 + 6) = v108;
      goto LABEL_418;
    }
LABEL_441:
    if ((*((_WORD *)v107 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v107, v20);
LABEL_418:
    v113 = v120;
    v120 = 0;
    if (v113)
    {
      if (*((_DWORD *)v113 + 6) == 2)
      {
        if ((*((_WORD *)v113 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v113, v20);
      }
      else
      {
        *((_DWORD *)v113 + 6) -= 2;
      }
    }
    if ((v111 & 1) == 0)
    {
      if (v101 == v53)
        goto LABEL_435;
      v98 = (WebCore::Node *)*((_QWORD *)v101 + 7);
      if (v98)
      {
LABEL_430:
        *((_DWORD *)v98 + 6) += 2;
      }
      else
      {
        v114 = v101;
        while (1)
        {
          v114 = (WebCore::Node *)*((_QWORD *)v114 + 4);
          if (!v114 || v114 == v53)
            break;
          v98 = (WebCore::Node *)*((_QWORD *)v114 + 7);
          if (v98)
            goto LABEL_430;
        }
LABEL_435:
        v98 = 0;
      }
      if (*((_DWORD *)v101 + 6) == 2)
      {
        if ((*((_WORD *)v101 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v101, v20);
      }
      else
      {
        *((_DWORD *)v101 + 6) -= 2;
      }
      if (!v98)
        goto LABEL_448;
      continue;
    }
    break;
  }
  if (*((_DWORD *)v101 + 6) == 2)
  {
    if ((*((_WORD *)v101 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v101, v20);
  }
  else
  {
    *((_DWORD *)v101 + 6) -= 2;
  }
LABEL_448:
  if (*((_DWORD *)v97 + 6) == 2)
  {
    if ((*((_WORD *)v97 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v97, v20);
  }
  else
  {
    *((_DWORD *)v97 + 6) -= 2;
  }
LABEL_173:
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53, v20);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  if (a4)
  {
    if (*((_DWORD *)a4 + 6) == 2)
    {
      if ((*((_WORD *)a4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a4, v20);
    }
    else
    {
      *((_DWORD *)a4 + 6) -= 2;
    }
  }
  v54 = v142;
  if (v142)
    *((_DWORD *)v142 + 6) += 2;
  v120 = v54;
  LODWORD(v121) = v143;
  BYTE4(v121) = v144;
  v55 = v139;
  if (v139)
    *((_DWORD *)v139 + 6) += 2;
  v122 = v55;
  v123 = v140;
  v124 = v141;
  v125 = 0;
  v126 = 0;
  v127 &= 0xF0u;
  v128 = 0;
  v129 = 0;
  v130 &= 0xF0u;
  v131 = 0;
  v132 = 0;
  v133 &= 0xF0u;
  v134 = 0;
  v135 = 0;
  v136 &= 0xF0u;
  v137 = 1;
  v138 &= ~2u;
  WebCore::VisibleSelection::validate((uint64_t)&v120, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)v10, (const WebCore::VisibleSelection *)&v120);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v120);
  WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)v10, 0, 0, 0, 0, 1);
  *(_QWORD *)&v119.var0.var1 = 0;
  v119.var0.var0.var0 = 0;
  *(_QWORD *)&v119.var1 = 1;
  WebCore::CompositeEditCommand::cleanupAfterDeletion((WebCore::CompositeEditCommand *)v10, &v119);
  v57 = v119.var0.var0.var0;
  v119.var0.var0.var0 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v56);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  v58 = (uint64_t)v149;
  if (v149)
    *((_DWORD *)v149 + 6) += 2;
  v116 = (WebCore::Node *)v58;
  v117 = v150;
  v118 = BYTE4(v150);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v116, (uint64_t)&v120);
  LOBYTE(v122) = 1;
  v60 = v120;
  v120 = 0;
  v61 = (uint64_t)v149;
  v149 = v60;
  if (v61)
  {
    if (*(_DWORD *)(v61 + 24) == 2)
    {
      if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v61, v59);
    }
    else
    {
      *(_DWORD *)(v61 + 24) -= 2;
    }
  }
  LODWORD(v150) = v121;
  BYTE4(v150) = BYTE4(v121);
  LOBYTE(v151) = 1;
  if (v58)
  {
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v58, v59);
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
  v62 = (uint64_t)v145;
  if (v145)
    *((_DWORD *)v145 + 6) += 2;
  v116 = (WebCore::Node *)v62;
  v117 = v146;
  v118 = v147;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v116, (uint64_t)&v120);
  LOBYTE(v122) = 1;
  v64 = v120;
  v120 = 0;
  v65 = (uint64_t)v145;
  v145 = v64;
  if (v65)
  {
    if (*(_DWORD *)(v65 + 24) == 2)
    {
      if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v65, v63);
    }
    else
    {
      *(_DWORD *)(v65 + 24) -= 2;
    }
  }
  v146 = v121;
  v147 = BYTE4(v121);
  v148 = 1;
  if (v62)
  {
    if (*(_DWORD *)(v62 + 24) == 2)
    {
      if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v62, v63);
    }
    else
    {
      *(_DWORD *)(v62 + 24) -= 2;
    }
  }
  v66 = (uint64_t)v149;
  if (v149)
    v67 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v67 = 0;
  if (!v67)
    goto LABEL_289;
  if (!v149)
  {
    v70 = 0;
    goto LABEL_217;
  }
  v68 = *((_DWORD *)v149 + 6);
  v69 = v68 + 4;
  *((_DWORD *)v149 + 6) = v68 + 4;
  v70 = (WTF *)v66;
  if ((*(_WORD *)(v66 + 28) & 0x10) == 0)
    goto LABEL_217;
  *(_DWORD *)(v66 + 24) = v68 + 6;
  if ((*(_QWORD *)(v66 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if (v68 != -4)
    {
      *(_DWORD *)(v66 + 24) = v69;
      v70 = (WTF *)v66;
      goto LABEL_217;
    }
    v70 = (WTF *)v66;
    if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v66, v63);
      goto LABEL_328;
    }
LABEL_217:
    if (v70)
      v73 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v73 = 0;
    if (v73)
    {
      WebCore::endOfParagraph((WebCore::Node *)&v149, 1, &v120);
      v74 = WebCore::operator==((uint64_t *)&v149, (uint64_t *)&v120);
      v75 = v120;
      v120 = 0;
      if (v75)
      {
        if (*((_DWORD *)v75 + 6) == 2)
        {
          if ((*((_WORD *)v75 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v75, v63);
        }
        else
        {
          *((_DWORD *)v75 + 6) -= 2;
        }
      }
      if (v74)
        goto LABEL_234;
      v70 = v149;
    }
    if (v70)
      v76 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v76 = 0;
    if (!v76)
      goto LABEL_235;
    WebCore::startOfParagraph((uint64_t)&v149, 1, &v120);
    v77 = WebCore::operator==((uint64_t *)&v149, (uint64_t *)&v120);
    v78 = v120;
    v120 = 0;
    if (v78)
    {
      if (*((_DWORD *)v78 + 6) == 2)
      {
        if ((*((_WORD *)v78 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v78, v63);
      }
      else
      {
        *((_DWORD *)v78 + 6) -= 2;
      }
    }
    if (!v77)
    {
LABEL_235:
      v79 = (uint64_t)v149;
      if (v149)
      {
        v80 = *((_DWORD *)v149 + 6) + 2;
        *((_DWORD *)v149 + 6) = v80;
        v81 = BYTE4(v150) & 7;
        if (v81 <= 4)
        {
          v82 = v79;
          if (((1 << v81) & 0x19) != 0)
            goto LABEL_238;
          v82 = *(_QWORD *)(v79 + 32);
          if (v82)
          {
            v80 = *(_DWORD *)(v82 + 24);
LABEL_238:
            *(_DWORD *)(v82 + 24) = v80 + 2;
            v72 = WebCore::Node::computeEditability(v82, 0, 0) != 0;
            if (*(_DWORD *)(v82 + 24) == 2)
            {
              if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v82, v63);
            }
            else
            {
              *(_DWORD *)(v82 + 24) -= 2;
            }
            goto LABEL_240;
          }
        }
        v72 = 0;
LABEL_240:
        if (*(_DWORD *)(v79 + 24) == 2)
        {
          if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v79, v63);
        }
        else
        {
          *(_DWORD *)(v79 + 24) -= 2;
        }
LABEL_243:
        if (v66)
          goto LABEL_273;
        goto LABEL_244;
      }
LABEL_242:
      v72 = 0;
      goto LABEL_243;
    }
LABEL_234:
    if (!WebCore::operator==((uint64_t *)&v149, (uint64_t *)&v145))
      goto LABEL_242;
    goto LABEL_235;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v66 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A91F7CLL);
  }
  v71 = *(unsigned __int8 *)((*(_QWORD *)(v66 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
  if (v68 == -4)
  {
    if ((*(_WORD *)(v66 + 30) & 0x400) != 0)
    {
      v72 = 0;
      goto LABEL_212;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v66, v63);
    v72 = 0;
    if (v71 == 35 || v71 == 63)
      goto LABEL_273;
LABEL_328:
    v70 = v149;
    goto LABEL_217;
  }
  v72 = 0;
  *(_DWORD *)(v66 + 24) = v69;
LABEL_212:
  if (v71 != 35)
  {
    v70 = (WTF *)v66;
    if (v71 != 63)
      goto LABEL_217;
  }
LABEL_273:
  v83 = *(_DWORD *)(v66 + 24) - 2;
  if (*(_DWORD *)(v66 + 24) != 2)
  {
    *(_DWORD *)(v66 + 24) = v83;
    goto LABEL_275;
  }
  v93 = *(_WORD *)(v66 + 30);
  if ((v93 & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v66, v63);
    v83 = *(_DWORD *)(v66 + 24);
LABEL_275:
    v84 = v83 - 2;
    if (v84)
    {
      *(_DWORD *)(v66 + 24) = v84;
      if (v72)
        goto LABEL_277;
      goto LABEL_289;
    }
    v93 = *(_WORD *)(v66 + 30);
  }
  if ((v93 & 0x400) != 0)
  {
LABEL_244:
    if (v72)
      goto LABEL_277;
    goto LABEL_289;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v66, v63);
  if (v72)
  {
LABEL_277:
    v85 = *((_QWORD *)v10 + 2);
    *(_DWORD *)(v85 + 24) += 2;
    v86 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v86 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v86 + 24) = 0x101C00000002;
    *(_QWORD *)(v86 + 32) = 0;
    *(_QWORD *)(v86 + 40) = v85 + 96;
    *(_OWORD *)(v86 + 48) = 0u;
    *(_OWORD *)(v86 + 64) = 0u;
    ++*(_DWORD *)(v85 + 3324);
    *(_QWORD *)(v86 + 80) = 0;
    *(_QWORD *)(v86 + 88) = 0;
    v87 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v86 + 96) = v87;
    *(_QWORD *)(v86 + 104) = 0;
    *(_QWORD *)v86 = off_1E33B4C28;
    v116 = (WebCore::Node *)v86;
    v88 = v149;
    if (v149)
      *((_DWORD *)v149 + 6) += 2;
    v120 = v88;
    LODWORD(v121) = v150;
    BYTE4(v121) = BYTE4(v150);
    WebCore::CompositeEditCommand::insertNodeAt(v10, (uint64_t *)&v116, (WebCore::Position *)&v120);
    v89 = v120;
    v120 = 0;
    if (v89)
    {
      if (*((_DWORD *)v89 + 6) == 2)
      {
        if ((*((_WORD *)v89 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v89, v63);
      }
      else
      {
        *((_DWORD *)v89 + 6) -= 2;
      }
    }
    if (v116)
    {
      if (*((_DWORD *)v116 + 6) == 2)
      {
        if ((*((_WORD *)v116 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v116, v63);
      }
      else
      {
        *((_DWORD *)v116 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v85 + 24) == 2)
    {
      if ((*(_WORD *)(v85 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v85, v63);
    }
    else
    {
      *(_DWORD *)(v85 + 24) -= 2;
    }
  }
LABEL_289:
  v90 = v139;
  v139 = 0;
  if (v90)
  {
    if (*((_DWORD *)v90 + 6) == 2)
    {
      if ((*((_WORD *)v90 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v90, v63);
    }
    else
    {
      *((_DWORD *)v90 + 6) -= 2;
    }
  }
  v91 = v142;
  v142 = 0;
  if (v91)
  {
    if (*((_DWORD *)v91 + 6) == 2)
    {
      if ((*((_WORD *)v91 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v91, v63);
    }
    else
    {
      *((_DWORD *)v91 + 6) -= 2;
    }
  }
  v92 = (uint64_t)v145;
  v145 = 0;
  if (v92)
  {
    if (*(_DWORD *)(v92 + 24) == 2)
    {
      if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v92, v63);
    }
    else
    {
      *(_DWORD *)(v92 + 24) -= 2;
    }
  }
  this = (unsigned int *)v149;
  v149 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v63);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::shouldBreakOutOfEmptyListItem@<X0>(WebCore::CompositeEditCommand *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char *v5;
  VisiblePosition *v6;
  const WebCore::VisiblePosition *v7;
  void *v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  uint64_t i;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;
  unsigned int *result;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  int v23;
  char v24;
  char v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  int v28;
  char v29;
  char v30;

  if (*((_BYTE *)this + 225) == 2)
  {
    v5 = (char *)this + 192;
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v22);
    v25 = 1;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 224);
    v5 = (char *)this + 192;
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v22);
    v25 = 1;
    if (!v4)
    {
      v20 = v22;
      if (v22)
      {
        *((_DWORD *)v22 + 6) += 2;
        v27 = v20;
        v28 = v23;
        v29 = v24;
        v30 = 0;
        if (!WebCore::inSameLine((WebCore *)&v22, (const WebCore::VisiblePosition *)&v27, v7))
          v25 = 0;
        v21 = v27;
        v27 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21, v6);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::enclosingEmptyListItem((unsigned int *)&v22, v6, (unsigned int **)&v26);
  v9 = v22;
  v22 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if (v26 && (v10 = *((_QWORD *)v26 + 4)) != 0)
  {
    *(_DWORD *)(v10 + 24) += 2;
    if ((*(_WORD *)(v10 + 28) & 0x10) == 0)
      goto LABEL_36;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24);
    if (v11 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) && v11 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
      goto LABEL_36;
    if (!WebCore::Node::computeEditability(v10, 0, 1))
      goto LABEL_36;
    v12 = v26;
    if (!v26)
      goto LABEL_29;
    v13 = 0;
    v14 = v26;
    do
    {
      if (!WebCore::Node::hasEditableStyle((uint64_t)v14, 0))
        break;
      if ((*((_WORD *)v14 + 14) & 8) != 0)
        v13 = v14;
      i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 5) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if ((WebCore::Node *)i == v14)
        break;
      v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
    }
    while (v14);
    if ((WebCore::Node *)v10 != v13)
    {
LABEL_29:
      WebCore::Position::previous((uint64_t)v5, 2, (uint64_t)&v27);
      v16 = v27;
      if (v27)
        *((_DWORD *)v27 + 6) += 2;
      *(_QWORD *)a2 = v16;
      *(_DWORD *)(a2 + 8) = v28;
      *(_BYTE *)(a2 + 12) = v29;
      v17 = *((_QWORD *)this + 26);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      *(_QWORD *)(a2 + 16) = v17;
      *(_DWORD *)(a2 + 24) = *((_DWORD *)this + 54);
      *(_BYTE *)(a2 + 28) = *((_BYTE *)this + 220);
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 44) &= 0xF0u;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 0;
      *(_BYTE *)(a2 + 60) &= 0xF0u;
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
      *(_BYTE *)(a2 + 76) &= 0xF0u;
      *(_QWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(_BYTE *)(a2 + 92) &= 0xF0u;
      *(_WORD *)(a2 + 96) = 1;
      *(_BYTE *)(a2 + 98) &= ~2u;
      WebCore::VisibleSelection::validate(a2, 0);
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18, v8);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
    }
    else
    {
LABEL_36:
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) &= 0xF0u;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 28) &= 0xF0u;
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 44) &= 0xF0u;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 0;
      *(_BYTE *)(a2 + 60) &= 0xF0u;
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
      *(_BYTE *)(a2 + 76) &= 0xF0u;
      *(_QWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(_BYTE *)(a2 + 92) &= 0xF0u;
      *(_WORD *)(a2 + 96) = 1;
      *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 28) &= 0xF0u;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 44) &= 0xF0u;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 60) &= 0xF0u;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a2 + 76) &= 0xF0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    *(_BYTE *)(a2 + 92) &= 0xF0u;
    *(_WORD *)(a2 + 96) = 1;
    *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
  }
  result = (unsigned int *)v26;
  v26 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::CompositeEditCommand::breakOutOfEmptyListItem(WebCore::CompositeEditCommand *this)
{
  int v2;
  int v3;
  uint64_t *v4;
  VisiblePosition *v5;
  const WebCore::VisiblePosition *v6;
  void *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WebCore::Node *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WebCore::Node *v19;
  _BOOL4 v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Node *v30;
  __int16 v31;
  uint64_t v32;
  char v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  WebCore::Node *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WebCore::Node *v49;
  char v50;
  int v51;
  char v52;
  char v53;
  void *v54;
  void *v55;
  uint64_t v56;
  WebCore::Node *v57;
  WTF *v59;
  void *v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  int v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  int v66;
  char v67;
  char v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  int v71;
  char v72;
  WebCore::Node *v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  __int16 v88;
  char v89;

  WebCore::CompositeEditCommand::shouldBreakOutOfEmptyListItem(this, (uint64_t)&v70);
  v2 = HIBYTE(v88);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v70);
  if (!v2)
    return v2 != 0;
  v63 = v2;
  if (*((_BYTE *)this + 225) == 2)
  {
    v4 = (uint64_t *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v65);
    v68 = 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 224);
    v4 = (uint64_t *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v65);
    v68 = 1;
    if (!v3)
    {
      v61 = v65;
      if (v65)
      {
        *((_DWORD *)v65 + 6) += 2;
        v70 = v61;
        v71 = v66;
        v72 = v67;
        LOBYTE(v73) = 0;
        if (!WebCore::inSameLine((WebCore *)&v65, (const WebCore::VisiblePosition *)&v70, v6))
          v68 = 0;
        v62 = v70;
        v70 = 0;
        if (v62)
        {
          if (*((_DWORD *)v62 + 6) == 2)
          {
            if ((*((_WORD *)v62 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v62, v5);
          }
          else
          {
            *((_DWORD *)v62 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::enclosingEmptyListItem((unsigned int *)&v65, v5, (unsigned int **)&v69);
  v8 = v65;
  v65 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  v9 = *((_QWORD *)v69 + 4);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v10 = WTF::fastMalloc((WTF *)0x18);
  v11 = v10;
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) &= 0xE0u;
  *(_DWORD *)(v10 + 20) = WebCore::EditingStyle::NoFontDelta;
  v12 = *v4;
  if (*v4)
  {
    *(_DWORD *)(v12 + 24) += 2;
    WebCore::EditingStyle::init(v10, (WebCore *)v12, 1);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    WebCore::EditingStyle::init(v10, 0, 1);
  }
  v14 = *((_QWORD *)this + 2);
  *(_DWORD *)(v14 + 24) += 2;
  WebCore::EditingStyle::mergeTypingStyle((WebCore::MutableStyleProperties *)v11, (WebCore::Document *)v14);
  v16 = *(_QWORD *)(v9 + 32);
  if (!v16)
    goto LABEL_41;
  v17 = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v17 + 2;
  if ((*(_WORD *)(v16 + 28) & 0x10) == 0)
    goto LABEL_31;
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
  if (v18 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
  {
    *(_DWORD *)(v16 + 24) = v17 + 4;
    WebCore::visiblePositionAfterNode((WebCore *)v16, v15, (uint64_t)&v70);
    WebCore::visiblePositionAfterNode((WebCore *)v9, v19, (uint64_t)&v65);
    v20 = WebCore::operator==((uint64_t *)&v70, (uint64_t *)&v65);
    v21 = v65;
    v65 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v15);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = v70;
    v70 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v15);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if (v20)
    {
      WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v16, (WebCore::Node *)v9);
      v23 = *(_QWORD *)(v9 + 32);
      if (v23)
        *(_DWORD *)(v23 + 24) += 2;
      WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v23, 1);
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, v24);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
      v25 = bmalloc::api::isoAllocate();
      v26 = (WebCore::Node *)v25;
      *(_OWORD *)(v25 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v25 + 24) = 0x141C00000002;
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 40) = v14 + 96;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      ++*(_DWORD *)(v14 + 3324);
      *(_QWORD *)(v25 + 80) = 0;
      *(_QWORD *)(v25 + 88) = 0;
      v27 = WebCore::HTMLNames::liTag;
      if (WebCore::HTMLNames::liTag)
        ++*(_DWORD *)WebCore::HTMLNames::liTag;
      *(_QWORD *)(v25 + 96) = v27;
      *(_QWORD *)(v25 + 104) = 0;
      *(_QWORD *)v25 = off_1E33C04C8;
    }
    else
    {
      v26 = 0;
    }
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    goto LABEL_38;
  }
  if (v18 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24) && v18 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
  {
LABEL_31:
    v26 = 0;
    goto LABEL_38;
  }
  v28 = bmalloc::api::isoAllocate();
  v26 = (WebCore::Node *)v28;
  *(_OWORD *)(v28 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v28 + 24) = 0x141C00000002;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = v14 + 96;
  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  ++*(_DWORD *)(v14 + 3324);
  *(_QWORD *)(v28 + 80) = 0;
  *(_QWORD *)(v28 + 88) = 0;
  v29 = WebCore::HTMLNames::liTag;
  if (WebCore::HTMLNames::liTag)
    ++*(_DWORD *)WebCore::HTMLNames::liTag;
  *(_QWORD *)(v28 + 96) = v29;
  *(_QWORD *)(v28 + 104) = 0;
  *(_QWORD *)v28 = off_1E33C04C8;
LABEL_38:
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (!v26)
  {
LABEL_41:
    WebCore::createDefaultParagraphElement((WebCore *)v14, &v70);
    v26 = v70;
  }
  v30 = v69;
  v31 = *((_WORD *)v69 + 14);
  if ((v31 & 8) != 0)
  {
    v32 = (uint64_t)v69;
    while (1)
    {
      v32 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v32)
        break;
      if ((*(_WORD *)(v32 + 28) & 8) != 0)
        goto LABEL_45;
    }
  }
  else
  {
    v32 = *((_QWORD *)v69 + 6) & 0xFFFFFFFFFFFFLL;
  }
  if (v32)
  {
LABEL_45:
    v33 = 0;
    *(_DWORD *)(v32 + 24) += 2;
    if ((v31 & 8) == 0)
      goto LABEL_46;
LABEL_100:
    v34 = v30;
    while (1)
    {
      v34 = (WebCore::Node *)*((_QWORD *)v34 + 7);
      if (!v34)
        goto LABEL_104;
      if ((*((_WORD *)v34 + 14) & 8) != 0)
        goto LABEL_47;
    }
  }
  v33 = 1;
  if ((v31 & 8) != 0)
    goto LABEL_100;
LABEL_46:
  v34 = (WebCore::Node *)*((_QWORD *)v30 + 7);
  if (!v34)
  {
LABEL_104:
    v38 = 1;
    goto LABEL_105;
  }
LABEL_47:
  *((_DWORD *)v34 + 6) += 2;
  v35 = *((_QWORD *)v34 + 4);
  if (v35
    && (*(_WORD *)(v35 + 28) & 0x10) != 0
    && ((v36 = *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24), v36 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
     || v36 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
     || v36 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
    || (*((_QWORD *)v34 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && *(_BYTE *)((*((_QWORD *)v34 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19
    || (*((_WORD *)v34 + 14) & 0x10) != 0
    && ((v37 = *(_QWORD *)(*((_QWORD *)v34 + 12) + 24), v37 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
     || v37 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
     || v37 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24)))
  {
    if (v32)
    {
      if ((v39 = *(_QWORD *)(v32 + 32)) != 0
        && (*(_WORD *)(v39 + 28) & 0x10) != 0
        && ((v40 = *(_QWORD *)(*(_QWORD *)(v39 + 96) + 24), v40 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
         || v40 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
         || v40 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
        || (*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && *(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19
        || (*(_WORD *)(v32 + 28) & 0x10) != 0
        && ((v41 = *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24), v41 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
         || v41 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
         || v41 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24)))
      {
        if ((*(_WORD *)(v9 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195A9345CLL);
        }
        WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v9, v30);
      }
    }
    *((_DWORD *)v26 + 6) += 2;
    v70 = v26;
    WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v70, v9, 1);
    if (v70)
    {
      if (*((_DWORD *)v70 + 6) == 2)
      {
        if ((*((_WORD *)v70 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v70, v42);
      }
      else
      {
        *((_DWORD *)v70 + 6) -= 2;
      }
    }
    v38 = 0;
    goto LABEL_77;
  }
  v38 = 0;
LABEL_105:
  *((_DWORD *)v26 + 6) += 2;
  v70 = v26;
  WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)this, (uint64_t *)&v70, v9);
  if (v70)
  {
    if (*((_DWORD *)v70 + 6) == 2)
    {
      if ((*((_WORD *)v70 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v70, v44);
    }
    else
    {
      *((_DWORD *)v70 + 6) -= 2;
    }
  }
  if (v32)
  {
    if ((v45 = *(_QWORD *)(v32 + 32)) != 0
      && (*(_WORD *)(v45 + 28) & 0x10) != 0
      && ((v46 = *(_QWORD *)(*(_QWORD *)(v45 + 96) + 24), v46 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
       || v46 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
       || v46 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
      || (*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && *(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19
      || (*(_WORD *)(v32 + 28) & 0x10) != 0
      && ((v47 = *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24), v47 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
       || v47 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
       || v47 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24)))
    {
LABEL_77:
      v43 = v69;
      goto LABEL_121;
    }
  }
  v43 = (WebCore::Node *)v9;
LABEL_121:
  (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, v43, 1);
  *((_DWORD *)v26 + 6) += 2;
  v70 = v26;
  WebCore::CompositeEditCommand::appendBlockPlaceholder(this, &v70, (uint64_t *)&v64);
  v49 = v64;
  v64 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v48);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  if (v70)
  {
    if (*((_DWORD *)v70 + 6) == 2)
    {
      if ((*((_WORD *)v70 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v70, v48);
    }
    else
    {
      *((_DWORD *)v70 + 6) -= 2;
    }
  }
  v50 = *((_WORD *)v26 + 14);
  v51 = *((_DWORD *)v26 + 6);
  *((_DWORD *)v26 + 6) = v51 + 2;
  if ((v50 & 1) != 0)
    v52 = 0;
  else
    v52 = 3;
  v53 = *((_BYTE *)this + 226) & 2;
  v70 = v26;
  v71 = 0;
  v72 = v52;
  *((_DWORD *)v26 + 6) = v51 + 6;
  v73 = v26;
  v74 = 0;
  v75 = v52;
  v76 = 0;
  v77 = 0;
  v78 &= 0xF0u;
  v79 = 0;
  v80 = 0;
  v81 &= 0xF0u;
  v82 = 0;
  v83 = 0;
  v84 &= 0xF0u;
  v85 = 0;
  v86 = 0;
  v87 &= 0xF0u;
  v88 = 1;
  v89 = v89 & 0xFD | v53;
  WebCore::VisibleSelection::validate((uint64_t)&v70, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v70);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v70);
  if (*((_DWORD *)v26 + 6) == 2)
  {
    if ((*((_WORD *)v26 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v26, v54);
  }
  else
  {
    *((_DWORD *)v26 + 6) -= 2;
  }
  WebCore::EditingStyle::prepareToApplyAt(v11, v4, 1);
  v56 = *(_QWORD *)(v11 + 8);
  if (v56 && *(_DWORD *)(v56 + 28)
    || *(float *)(v11 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
    || (*(_BYTE *)(v11 + 16) & 0x1E) != 0)
  {
    WebCore::CompositeEditCommand::applyStyle(this, (WebCore::EditingStyle *)v11, 4);
  }
  v2 = v63;
  if ((v38 & 1) == 0)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v55);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  if ((v33 & 1) == 0)
  {
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v55);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v26 + 6) == 2)
  {
    if ((*((_WORD *)v26 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v26, v55);
  }
  else
  {
    *((_DWORD *)v26 + 6) -= 2;
  }
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v55);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  if (*(_DWORD *)v11 == 1)
  {
    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v11, (WTF::StringImpl *)v55);
    WTF::fastFree(v59, v60);
    if (v9)
    {
LABEL_149:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v55);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  else
  {
    --*(_DWORD *)v11;
    if (v9)
      goto LABEL_149;
  }
  v57 = v69;
  v69 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v57, v55);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  return v2 != 0;
}

BOOL WebCore::CompositeEditCommand::breakOutOfEmptyMailBlockquotedParagraph(WebCore::CompositeEditCommand *this)
{
  int v2;
  const WebCore::VisiblePosition *v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t (*v7)();
  _BOOL4 v8;
  WebCore::Node *v9;
  _BOOL4 v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  _BOOL8 v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t (*v26)();
  void *v27;
  BOOL v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const VisiblePosition *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  __int16 v37;
  uint64_t v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  void *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  WebCore::Node *v48;
  int v49;
  char v50;
  char v51;
  WebCore::Node *v52[2];
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  WebCore::Node *v58;
  int v59;
  char v60;
  char v61;

  if (*((_BYTE *)this + 225) != 1)
    return 0;
  v2 = *((unsigned __int8 *)this + 224);
  WebCore::VisiblePosition::canonicalPosition((WebCore::CompositeEditCommand *)((char *)this + 192), (uint64_t)&v58);
  v61 = 1;
  if (!v2)
  {
    v4 = v58;
    if (!v58)
      goto LABEL_5;
    *((_DWORD *)v58 + 6) += 2;
    v48 = v4;
    v49 = v59;
    v50 = v60;
    v51 = 0;
    if (!WebCore::inSameLine((WebCore *)&v58, (const WebCore::VisiblePosition *)&v48, v3))
      v61 = 0;
    v44 = v48;
    v48 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v44, v43);
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
  }
  v4 = v58;
  if (v58)
    *((_DWORD *)v58 + 6) += 2;
LABEL_5:
  v48 = v4;
  v49 = v59;
  v50 = v60;
  WebCore::highestEnclosingNodeOfType((unsigned int *)&v48, WebCore::isMailBlockquote, 1, 0, &v57);
  v6 = v48;
  v48 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  if (v57)
  {
    if (v58)
      v7 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    if (!v7)
      goto LABEL_36;
    WebCore::startOfParagraph((uint64_t)&v58, 1, &v48);
    v8 = WebCore::operator==((uint64_t *)&v58, (uint64_t *)&v48);
    v9 = v48;
    v48 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v5);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
    if (!v8)
      goto LABEL_36;
    if (!(v58
         ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
         : 0))
      goto LABEL_36;
    WebCore::endOfParagraph((WebCore::Node *)&v58, 1, &v48);
    v11 = WebCore::operator==((uint64_t *)&v58, (uint64_t *)&v48);
    v12 = v48;
    v48 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v5);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    if (!v11)
    {
LABEL_36:
      v16 = 0;
LABEL_37:
      v17 = v57;
      v57 = 0;
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v17, v5);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      goto LABEL_41;
    }
    WebCore::VisiblePosition::previous(&v58, 1, 0, (uint64_t)&v54);
    v13 = v54;
    if (v54)
      *(_DWORD *)(v54 + 24) += 2;
    v48 = (WebCore::Node *)v13;
    v49 = v55;
    v50 = v56;
    WebCore::enclosingNodeOfType((uint64_t)&v48, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 1, (uint64_t *)v52);
    v14 = v52[0];
    v52[0] = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v5);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v5);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    if (v14)
    {
      v16 = 0;
LABEL_108:
      if (v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v5);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      goto LABEL_37;
    }
    v20 = *((_QWORD *)this + 2);
    *(_DWORD *)(v20 + 24) += 2;
    v21 = bmalloc::api::isoAllocate();
    v22 = v21;
    *(_OWORD *)(v21 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v21 + 28) = 4124;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = v20 + 96;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_OWORD *)(v21 + 64) = 0u;
    ++*(_DWORD *)(v20 + 3324);
    *(_QWORD *)(v21 + 80) = 0;
    *(_QWORD *)(v21 + 88) = 0;
    v23 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v21 + 96) = v23;
    *(_QWORD *)(v21 + 104) = 0;
    *(_QWORD *)v21 = off_1E33B4C28;
    *(_DWORD *)(v21 + 24) = 4;
    v48 = (WebCore::Node *)v21;
    WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v48, v57, 1);
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 2)
      {
        if ((*((_WORD *)v48 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v48, v24);
      }
      else
      {
        *((_DWORD *)v48 + 6) -= 2;
      }
    }
    *(_DWORD *)(v22 + 24) += 2;
    v48 = (WebCore::Node *)v22;
    v49 = 0;
    v50 = 1;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v48, (uint64_t)v52);
    v53 = 1;
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v25);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
    if (v52[0])
      v26 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v26 = 0;
    if (!v26)
      goto LABEL_66;
    WebCore::startOfParagraph((uint64_t)v52, 1, &v48);
    v28 = WebCore::operator==((uint64_t *)v52, (uint64_t *)&v48);
    v29 = v48;
    v48 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v27);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    if (!v28)
    {
LABEL_66:
      v30 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v30 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v30 + 24) = 0x101C00000002;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 40) = v20 + 96;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      ++*(_DWORD *)(v20 + 3324);
      *(_QWORD *)(v30 + 80) = 0;
      *(_QWORD *)(v30 + 88) = 0;
      v31 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v30 + 96) = v31;
      *(_QWORD *)(v30 + 104) = 0;
      *(_QWORD *)v30 = off_1E33B4C28;
      v48 = (WebCore::Node *)v30;
      WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v48, v22, 1);
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v32);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
    }
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v48, (const WebCore::VisiblePosition *)v52, (*((unsigned __int8 *)this + 226) >> 1) & 1);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v48);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v48);
    v16 = WebCore::lineBreakExistsAtVisiblePosition(&v58, v33);
    if (!v16)
    {
LABEL_101:
      v42 = v52[0];
      v52[0] = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v42, v5);
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22, v5);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, v5);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
      goto LABEL_108;
    }
    v34 = v58;
    if (v58)
      *((_DWORD *)v58 + 6) += 2;
    v45 = v34;
    v46 = v59;
    v47 = v60;
    WebCore::Position::downstream((uint64_t)&v45, (WebCore::Node *)1, (uint64_t)&v48);
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v5);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    v36 = v48;
    v37 = *((_WORD *)v48 + 14);
    if (v48
      && (v37 & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v48 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
    {
      *((_DWORD *)v48 + 6) += 2;
      WebCore::CompositeEditCommand::removeNodeAndPruneAncestors(this, v36);
    }
    else
    {
      if (!v48 || (v37 & 2) == 0)
      {
LABEL_98:
        v41 = v48;
        v48 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v41, v5);
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
        goto LABEL_101;
      }
      *((_DWORD *)v48 + 6) += 2;
      v38 = *((_QWORD *)v36 + 4);
      if (v38)
        *(_DWORD *)(v38 + 24) += 2;
      (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, _QWORD, uint64_t))(*(_QWORD *)this + 176))(this, v36, 0, 1);
      WebCore::highestNodeToRemoveInPruning((unsigned int *)v38, v39, (unsigned int **)&v45);
      v5 = v45;
      if (v45)
      {
        (*(void (**)(WebCore::CompositeEditCommand *, WebCore::Node *, uint64_t))(*(_QWORD *)this + 184))(this, v45, 1);
        v40 = v45;
        v45 = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 6) == 2)
          {
            if ((*((_WORD *)v40 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v40, v5);
          }
          else
          {
            *((_DWORD *)v40 + 6) -= 2;
          }
        }
      }
      if (v38)
      {
        if (*(_DWORD *)(v38 + 24) == 2)
        {
          if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v38, v5);
        }
        else
        {
          *(_DWORD *)(v38 + 24) -= 2;
        }
      }
    }
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v5);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
    goto LABEL_98;
  }
  v16 = 0;
LABEL_41:
  v18 = v58;
  v58 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v5);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return v16;
}

unsigned int *WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary@<X0>(unsigned int *this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CompositeEditCommand *v5;
  void *v6;
  WebCore::Node *v7;
  int *v8;
  WebCore::Node *v9;
  char v10;
  char v11;
  void *v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  char v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  VisiblePosition *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  __int16 v24;
  WebCore::Node *v25;
  int v26;
  uint64_t v28;
  char v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  uint64_t v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  int v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  WebCore::Node *v48;
  int v49;
  char v50;
  char v51;
  WebCore::Node *v52[2];
  char v53;
  WebCore::Node *v54;
  int v55;
  char v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  int v59;
  char v60;
  char v61;

  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a3 + 12) = *((_BYTE *)a2 + 12);
    return this;
  }
  v5 = (WebCore::CompositeEditCommand *)this;
  WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)&v58);
  v61 = 1;
  WebCore::enclosingAnchorElement((uint64_t *)a2, &v57);
  v7 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v7 + 6) += 2;
  v54 = v7;
  v8 = (int *)((char *)a2 + 8);
  v55 = *((_DWORD *)a2 + 2);
  v56 = *((_BYTE *)a2 + 12);
  v9 = v57;
  if (v57)
  {
    if ((*((_QWORD *)v57 + 8) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*((_QWORD *)v57 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
    {
LABEL_88:
      if (!v7 || !WebCore::editableRootForPosition((uint64_t)&v54, 0))
      {
        v36 = *(WebCore::Node **)a2;
        if (*(_QWORD *)a2)
          *((_DWORD *)v36 + 6) += 2;
        v37 = v54;
        v54 = v36;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v6);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
        v55 = *v8;
        v56 = *((_BYTE *)a2 + 12);
      }
      *(_QWORD *)a3 = v54;
      *(_DWORD *)(a3 + 8) = v55;
      v17 = v56;
      goto LABEL_97;
    }
    v10 = *((_WORD *)v57 + 14);
    *((_DWORD *)v57 + 6) += 2;
    v48 = v9;
    v49 = 0;
    if ((v10 & 1) != 0)
      v11 = 0;
    else
      v11 = 3;
    v50 = v11;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v48, (uint64_t)v52);
    v53 = 1;
    v13 = *((_DWORD *)v9 + 6) - 2;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) != 0)
      {
        v13 = 2;
      }
      else
      {
        WebCore::Node::removedLastRef(v9, v12);
        v13 = *((_DWORD *)v9 + 6);
      }
    }
    v14 = *((_WORD *)v9 + 14);
    *((_DWORD *)v9 + 6) = v13 + 2;
    if ((v14 & 1) != 0)
    {
      v15 = *((_QWORD *)v9 + 10);
      v16 = 0;
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 4);
    }
    else
    {
      LODWORD(v15) = 0;
      v16 = 4;
    }
    v45 = v9;
    v46 = v15;
    v47 = v16;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v45, (uint64_t)&v48);
    v51 = 1;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v18);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    if (!WebCore::operator==((uint64_t *)&v58, (uint64_t *)&v48))
    {
      v19 = v9;
LABEL_71:
      if (WebCore::operator==((uint64_t *)&v58, (uint64_t *)v52))
      {
        if (v19 != *(WebCore::Node **)a2 && v19 != *(WebCore::Node **)(*(_QWORD *)a2 + 32))
        {
          WebCore::CompositeEditCommand::pushAnchorElementDown(v5, v19);
          WebCore::enclosingAnchorElement((uint64_t *)a2, &v45);
          v32 = v45;
          v45 = 0;
          v57 = v32;
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v6);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
          v19 = v32;
        }
        if (!v19)
        {
LABEL_105:
          v38 = *(_QWORD *)a2;
          if (*(_QWORD *)a2)
            *(_DWORD *)(v38 + 24) += 2;
          *(_QWORD *)a3 = v38;
          *(_DWORD *)(a3 + 8) = *v8;
          *(_BYTE *)(a3 + 12) = *((_BYTE *)a2 + 12);
LABEL_108:
          v39 = v48;
          v48 = 0;
          if (v39)
          {
            if (*((_DWORD *)v39 + 6) == 2)
            {
              if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v39, v6);
            }
            else
            {
              *((_DWORD *)v39 + 6) -= 2;
            }
          }
          v40 = v52[0];
          v52[0] = 0;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40, v6);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
          v54 = 0;
          if (v7)
          {
            if (*((_DWORD *)v7 + 6) == 2)
            {
              if ((*((_WORD *)v7 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v7, v6);
            }
            else
            {
              *((_DWORD *)v7 + 6) -= 2;
            }
          }
          goto LABEL_98;
        }
        WebCore::positionInParentBeforeNode(v19, (WebCore::Node *)v6, (uint64_t)&v45);
        v7 = v45;
        v33 = v54;
        v54 = v45;
        if (v33)
        {
          if (*((_DWORD *)v33 + 6) == 2)
          {
            if ((*((_WORD *)v33 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v33, v6);
          }
          else
          {
            *((_DWORD *)v33 + 6) -= 2;
          }
        }
        v55 = v46;
        v56 = v47;
      }
      v34 = v48;
      v48 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v6);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
      v35 = v52[0];
      v52[0] = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35, v6);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
      goto LABEL_88;
    }
    if (v9 == *(WebCore::Node **)a2 || v9 == *(WebCore::Node **)(*(_QWORD *)a2 + 32))
    {
      v19 = v9;
    }
    else
    {
      WebCore::CompositeEditCommand::pushAnchorElementDown(v5, v9);
      WebCore::enclosingAnchorElement((uint64_t *)a2, &v45);
      v19 = v45;
      v57 = v45;
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v6);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
      if (!v19)
        goto LABEL_105;
    }
    v20 = v58;
    if (v58)
      *((_DWORD *)v58 + 6) += 2;
    v42 = v20;
    v43 = v59;
    v44 = v60;
    WebCore::Position::downstream((uint64_t)&v42, (WebCore::Node *)1, (uint64_t)&v45);
    v22 = v42;
    v42 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v21);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if (!WebCore::lineBreakExistsAtVisiblePosition(&v58, v21))
      goto LABEL_62;
    v23 = v45;
    if (v45)
      *((_DWORD *)v45 + 6) += 2;
    v24 = *((_WORD *)v19 + 14);
    if ((v24 & 0xF000) == 0x9000)
    {
      if (**((WebCore::Node ***)v23 + 5) == v19 && (*((_WORD *)v23 + 14) & 0xF000) != 0x9000)
      {
        v26 = (*((unsigned __int8 *)v23 + 22) >> 3) & 1;
        goto LABEL_49;
      }
    }
    else
    {
      if ((v24 & 4) == 0 || !*((_QWORD *)v19 + 10))
      {
        v26 = 0;
        goto LABEL_48;
      }
      if (((*((unsigned __int8 *)v23 + 22) ^ *((unsigned __int8 *)v19 + 22)) & 8) == 0)
      {
        v25 = v23;
        do
        {
          v25 = (WebCore::Node *)*((_QWORD *)v25 + 4);
          v26 = v25 != 0;
        }
        while (v25 != v19 && v25 != 0);
LABEL_48:
        if (!v23)
          goto LABEL_148;
        goto LABEL_49;
      }
    }
    v26 = 0;
LABEL_49:
    if (*((_DWORD *)v23 + 6) != 2)
    {
      *((_DWORD *)v23 + 6) -= 2;
      if ((v26 & 1) != 0)
      {
LABEL_51:
        v28 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          *(_DWORD *)(v28 + 24) += 2;
        *(_QWORD *)a3 = v28;
        *(_DWORD *)(a3 + 8) = *v8;
        *(_BYTE *)(a3 + 12) = *((_BYTE *)a2 + 12);
        v29 = 1;
LABEL_67:
        v31 = v45;
        v45 = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 6) == 2)
          {
            if ((*((_WORD *)v31 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v31, v6);
          }
          else
          {
            *((_DWORD *)v31 + 6) -= 2;
          }
        }
        if ((v29 & 1) != 0)
          goto LABEL_108;
        goto LABEL_71;
      }
LABEL_62:
      WebCore::positionInParentAfterNode((uint64_t)v19, (WebCore::Node *)v6, (uint64_t)&v42);
      v30 = v42;
      v42 = 0;
      v54 = v30;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v7, v6);
            v41 = v42;
            v55 = v43;
            v56 = v44;
            v42 = 0;
            if (v41)
            {
              if (*((_DWORD *)v41 + 6) == 2)
              {
                if ((*((_WORD *)v41 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v41, v6);
              }
              else
              {
                *((_DWORD *)v41 + 6) -= 2;
              }
            }
            goto LABEL_66;
          }
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v55 = v43;
      v56 = v44;
LABEL_66:
      v29 = 0;
      v7 = v30;
      goto LABEL_67;
    }
    if ((*((_WORD *)v23 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v23, v6);
      if ((v26 & 1) != 0)
        goto LABEL_51;
      goto LABEL_62;
    }
LABEL_148:
    if (v26)
      goto LABEL_51;
    goto LABEL_62;
  }
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = *v8;
  v17 = *((_BYTE *)a2 + 12);
LABEL_97:
  *(_BYTE *)(a3 + 12) = v17;
LABEL_98:
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v57, v6);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  this = (unsigned int *)v58;
  v58 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::CompositeEditCommand::splitTreeToNode@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, int a4@<W3>, WebCore::Node **a5@<X8>)
{
  WebCore::Node *v5;
  WebCore::CompositeEditCommand *v6;
  WebCore::Node *v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  char v16;
  void *v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  int v21;
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  WebCore::Node *v27[2];
  char v28;

  v5 = a2;
  v6 = (WebCore::CompositeEditCommand *)this;
  *((_DWORD *)a3 + 6) += 2;
  if (a4 && (v8 = (WebCore::Node *)*((_QWORD *)a3 + 4)) != 0)
  {
    *((_DWORD *)v8 + 6) += 2;
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(a3, a2);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
  }
  else
  {
    v8 = a3;
  }
  *((_DWORD *)v5 + 6) += 2;
  *a5 = v5;
  do
  {
    v9 = *((_QWORD *)v5 + 4);
    if (v8 == (WebCore::Node *)v9 || v9 == 0)
      break;
    v11 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v11 + 4;
    if ((*(_WORD *)(v9 + 28) & 8) != 0)
    {
      this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 208))(v9);
      v14 = *(_DWORD *)(v9 + 24);
      if ((_DWORD)this)
      {
        v15 = *(_WORD *)(v9 + 28);
        *(_DWORD *)(v9 + 24) = v14 + 2;
        v23 = (WebCore::Node *)v9;
        v24 = 0;
        v16 = v25 & 0xF0;
        if ((v15 & 1) == 0)
          v16 = v25 & 0xF0 | 3;
        v25 = v16;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v23, (uint64_t)v27);
        v28 = 1;
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v17);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
        WebCore::firstPositionInOrBeforeNode((uint64_t)v5, (WebCore::Node *)v17, (uint64_t)v22);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v22, (uint64_t)&v23);
        v26 = 1;
        v19 = v22[0];
        v22[0] = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v18);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        if (!WebCore::operator==((uint64_t *)v27, (uint64_t *)&v23))
          WebCore::CompositeEditCommand::splitElement(v6, (WebCore::Element *)v9, v5);
        *(_DWORD *)(v9 + 24) += 2;
        *a5 = (WebCore::Node *)v9;
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v5, a2);
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
        v20 = v23;
        v23 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20, a2);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        this = (unsigned int *)v27[0];
        v27[0] = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        v13 = 0;
        v14 = *(_DWORD *)(v9 + 24);
        v5 = (WebCore::Node *)v9;
      }
      else
      {
        v13 = 2;
      }
      v21 = v14 - 2;
      if (v21)
      {
        *(_DWORD *)(v9 + 24) = v21;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
      }
    }
    else
    {
      v12 = v11 + 2;
      if (v12)
      {
        *(_DWORD *)(v9 + 24) = v12;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
      }
      v13 = 2;
    }
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  while (!v13);
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v8, a2);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return this;
}

void WebCore::AppendNodeCommand::~AppendNodeCommand(WebCore::AppendNodeCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A9630;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::AppendNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::AppendNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A9630;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::AppendNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::AppendNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

uint64_t WebCore::EditCommand::isInsertTextCommand(WebCore::EditCommand *this)
{
  return 0;
}

uint64_t WebCore::SimpleEditCommand::isSimpleEditCommand(WebCore::SimpleEditCommand *this)
{
  return 1;
}

uint64_t WebCore::EditCommand::isCompositeEditCommand(WebCore::EditCommand *this)
{
  return 0;
}

uint64_t WebCore::EditCommand::isSimpleEditCommand(WebCore::EditCommand *this)
{
  return 0;
}

uint64_t WebCore::CompositeEditCommand::isCompositeEditCommand(WebCore::CompositeEditCommand *this)
{
  return 1;
}

uint64_t WebCore::CompositeEditCommand::isDictationCommand(WebCore::CompositeEditCommand *this)
{
  return 0;
}

uint64_t WebCore::CompositeEditCommand::shouldStopCaretBlinking(WebCore::CompositeEditCommand *this)
{
  return 0;
}

void WebCore::CompositeEditCommand::inputEventData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CompositeEditCommand::isBeforeInputEventCancelable(WebCore::CompositeEditCommand *this)
{
  return 1;
}

uint64_t WebCore::CompositeEditCommand::shouldDispatchInputEvents(WebCore::CompositeEditCommand *this)
{
  return 1;
}

void WebCore::ApplyStyleCommand::~ApplyStyleCommand(WebCore::ApplyStyleCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ApplyStyleCommand::~ApplyStyleCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::EditingStyle *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33A9688;
  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WebCore::EditingStyle *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v6, (WTF::StringImpl *)a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

uint64_t WebCore::ApplyStyleCommand::shouldDispatchInputEvents(WebCore::ApplyStyleCommand *this)
{
  return 0;
}

void WebCore::BreakBlockquoteCommand::~BreakBlockquoteCommand(WebCore::BreakBlockquoteCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::ChangeListTypeCommand::~ChangeListTypeCommand(WebCore::ChangeListTypeCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ChangeListTypeCommand::editingAction(WebCore::ChangeListTypeCommand *this)
{
  if (*((_BYTE *)this + 280))
    return 6;
  else
    return 5;
}

uint64_t WebCore::ChangeListTypeCommand::preservesTypingStyle(WebCore::ChangeListTypeCommand *this)
{
  return 1;
}

void WebCore::EditCommandComposition::~EditCommandComposition(WebCore::EditCommandComposition *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::EditCommandComposition::~EditCommandComposition(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E33A9828;
  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((unsigned int *)this + 61);
  if ((_DWORD)v10)
  {
    v11 = (_DWORD **)*((_QWORD *)this + 29);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v14 = (WTF *)*((_QWORD *)this + 29);
  if (v14)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v14, a2);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::EditCommandComposition *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::EditCommandComposition *)((char *)this + 24));
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
}

uint64_t WebCore::EditCommandComposition::editingAction(WebCore::EditCommandComposition *this)
{
  return *((unsigned __int8 *)this + 336);
}

void WebCore::InlineRunToApplyStyle::~InlineRunToApplyStyle(WebCore::InlineRunToApplyStyle *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WebCore::StyleChange::~StyleChange((WebCore::InlineRunToApplyStyle *)((char *)this + 48), a2);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v3);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v3);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  int8x16_t *v16;
  size_t v17;
  _WORD *v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  unsigned __int128 *v45;
  unsigned __int128 *v46;
  unsigned __int128 v47;
  size_t v48;
  uint64_t v49;
  unsigned __int128 v50;
  char v51;
  char v52;
  uint64_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v53;
        if (v53)
        {
          v12 = (_BYTE *)(v53 + 20);
          *(_DWORD *)v53 = 2;
          *(_DWORD *)(v53 + 4) = v9;
          *(_QWORD *)(v53 + 8) = v53 + 20;
          *(_DWORD *)(v53 + 16) = 4;
          if (a3)
          {
            v13 = *(_BYTE **)(a3 + 8);
            v14 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  memcpy((void *)(v53 + 20), v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v45 = (unsigned __int128 *)(v53 + 20);
              }
              else
              {
                v45 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v46 = (unsigned __int128 *)(v53 + 20);
                do
                {
                  v47 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v46++ = v47;
                }
                while (v46 != v45);
              }
              while (v45 != (unsigned __int128 *)&v12[v14])
              {
                v52 = *v13;
                v13 += 2;
                *(_BYTE *)v45 = v52;
                v45 = (unsigned __int128 *)((char *)v45 + 1);
              }
            }
            v15 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v15 = 0;
          }
          v12[v15] = a4;
          result = (uint64_t)&v12[v15 + 1];
          if (a5)
          {
            v16 = *(int8x16_t **)(a5 + 8);
            v17 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v17)
              {
                if ((_DWORD)v17 == 1)
                {
                  *(_BYTE *)result = v16->i8[0];
                  goto LABEL_47;
                }
                goto LABEL_15;
              }
            }
            else
            {
              v48 = result + v17;
              if (v17 >= 0x10)
              {
                v49 = result + (v17 & 0xFFFFFFF0);
                do
                {
                  v50 = (unsigned __int128)vld2q_s8(v16->i8);
                  v16 += 2;
                  *(_OWORD *)result = v50;
                  result += 16;
                }
                while (result != v49);
                result = v49;
              }
              while (result != v48)
              {
                v51 = v16->i8[0];
                v16 = (int8x16_t *)((char *)v16 + 2);
                *(_BYTE *)result++ = v51;
              }
            }
          }
        }
        goto LABEL_47;
      }
LABEL_51:
      v11 = 0;
      goto LABEL_47;
    }
LABEL_50:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_47;
  }
  if (!(_DWORD)result)
    goto LABEL_50;
  if (result > 0x7FFFFFEF)
    goto LABEL_51;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v53;
  if (v53)
  {
    v18 = (_WORD *)(v53 + 20);
    *(_DWORD *)v53 = 2;
    *(_DWORD *)(v53 + 4) = v9;
    *(_QWORD *)(v53 + 8) = v53 + 20;
    *(_DWORD *)(v53 + 16) = 0;
    if (a3)
    {
      v19 = *(int8x16_t **)(a3 + 8);
      v20 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v21 = (char *)&v18[v20];
        if (v20 >= 0x40)
        {
          v22 = (char *)&v18[v20 & 0xFFFFFFC0];
          v24 = 0uLL;
          v25 = (char *)(v53 + 20);
          do
          {
            v54.val[0] = *v19;
            v26 = v19[1];
            v56.val[0] = v19[2];
            v27 = v19[3];
            v19 += 4;
            v28 = v27;
            v56.val[1] = 0uLL;
            v58.val[0] = v26;
            v54.val[1] = 0uLL;
            v29 = v25;
            vst2q_s8(v29, v54);
            v29 += 32;
            v58.val[1] = 0uLL;
            vst2q_s8(v29, v58);
            v30 = v25 + 64;
            vst2q_s8(v30, v56);
            v31 = v25 + 96;
            vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
            v25 += 128;
          }
          while (v25 != v22);
        }
        else
        {
          v22 = (char *)(v53 + 20);
        }
        while (v22 != v21)
        {
          v32 = v19->u8[0];
          v19 = (int8x16_t *)((char *)v19 + 1);
          *(_WORD *)v22 = v32;
          v22 += 2;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *v18 = v19->i16[0];
      }
      else if ((_DWORD)v20)
      {
        memcpy((void *)(v53 + 20), v19, 2 * v20);
      }
      v23 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v23 = 0;
    }
    v33 = &v18[v23];
    *v33 = a4;
    result = (uint64_t)(v33 + 1);
    if (a5)
    {
      v16 = *(int8x16_t **)(a5 + 8);
      v34 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) == 0)
      {
        if ((_DWORD)v34 == 1)
        {
          *(_WORD *)result = v16->i16[0];
          goto LABEL_47;
        }
        if (!(_DWORD)v34)
          goto LABEL_47;
        v17 = 2 * v34;
LABEL_15:
        result = (uint64_t)memcpy((void *)result, v16, v17);
        goto LABEL_47;
      }
      v35 = result + 2 * v34;
      if (v34 >= 0x40)
      {
        v36 = result + 2 * (v34 & 0xFFFFFFC0);
        v37 = 0uLL;
        do
        {
          v55.val[0] = *v16;
          v38 = v16[1];
          v57.val[0] = v16[2];
          v39 = v16[3];
          v16 += 4;
          v40 = v39;
          v57.val[1] = 0uLL;
          v59.val[0] = v38;
          v55.val[1] = 0uLL;
          v41 = (char *)result;
          vst2q_s8(v41, v55);
          v41 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v41, v59);
          v42 = (char *)(result + 64);
          vst2q_s8(v42, v57);
          v43 = (char *)(result + 96);
          vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
          result += 128;
        }
        while (result != v36);
        result = v36;
      }
      while (result != v35)
      {
        v44 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)result = v44;
        result += 2;
      }
    }
  }
LABEL_47:
  *a6 = v11;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,float,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = 2139095040;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (uint64_t *)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          *(_QWORD *)v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v24;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v8);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WebCore::InlineRunToApplyStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 88 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InlineRunToApplyStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::InlineRunToApplyStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InlineRunToApplyStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2E8BA2F)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 88 * a2;
      result = WTF::fastMalloc((WTF *)(88 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v7 = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 8) = v9;
          v10 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          v11 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(v7 + 24) = v11;
          LODWORD(v11) = *(_DWORD *)(result + 32);
          *(_BYTE *)(v7 + 36) = *(_BYTE *)(result + 36);
          *(_DWORD *)(v7 + 32) = v11;
          v12 = *(_QWORD *)(result + 40);
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(v7 + 40) = v12;
          v13 = *(_DWORD **)(result + 48);
          if (v13)
            ++*v13;
          *(_QWORD *)(v7 + 48) = v13;
          v14 = *(_DWORD *)(result + 56);
          *(_WORD *)(v7 + 60) = *(_WORD *)(result + 60);
          *(_DWORD *)(v7 + 56) = v14;
          v15 = *(_DWORD **)(result + 64);
          if (v15)
            *v15 += 2;
          *(_QWORD *)(v7 + 64) = v15;
          v16 = *(_DWORD **)(result + 72);
          if (v16)
            *v16 += 2;
          *(_QWORD *)(v7 + 72) = v16;
          v17 = *(_DWORD **)(result + 80);
          if (v17)
            *v17 += 2;
          *(_QWORD *)(v7 + 80) = v17;
          WebCore::InlineRunToApplyStyle::~InlineRunToApplyStyle((WebCore::InlineRunToApplyStyle *)result, v6);
          result = v18 + 88;
          v7 += 88;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 88 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unsigned int *WebCore::CreateLinkCommand::doApply(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  WebCore::Position *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  void *v21;
  WebCore::Node *v22;
  char v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Node *v32;
  int v33;
  char v34;
  WebCore::Node *v35;
  int v36;
  char v37;
  WTF::StringImpl *v38;
  int v39;
  char v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  __int16 v56;
  char v57;

  if (*((_BYTE *)this + 225))
  {
    v1 = this;
    v3 = (WebCore::Position *)(this + 48);
    v2 = *((_QWORD *)this + 24);
    if (!v2 || (*(_BYTE *)(v2 + 22) & 8) != 0)
    {
      v4 = *((_QWORD *)this + 26);
      if (!v4 || (*(_BYTE *)(v4 + 22) & 8) != 0)
      {
        v5 = *((_QWORD *)this + 2);
        *(_DWORD *)(v5 + 24) += 2;
        v6 = bmalloc::api::isoAllocate();
        v8 = v6;
        *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v6 + 24) = 0x101C00000002;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = v5 + 96;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        ++*(_DWORD *)(v5 + 3324);
        *(_QWORD *)(v6 + 80) = 0;
        *(_QWORD *)(v6 + 88) = 0;
        v9 = WebCore::HTMLNames::aTag;
        if (WebCore::HTMLNames::aTag)
          ++*(_DWORD *)WebCore::HTMLNames::aTag;
        *(_QWORD *)(v6 + 96) = v9;
        *(_QWORD *)(v6 + 104) = 0;
        *(_QWORD *)v6 = off_1E33B3458;
        *(_QWORD *)(v6 + 112) = &unk_1E33B3958;
        *(_WORD *)(v6 + 120) = 0;
        *(_BYTE *)(v6 + 122) = 0;
        *(_DWORD *)(v6 + 124) = -1;
        *(_QWORD *)(v6 + 128) = 0;
        v10 = (WTF::StringImpl *)*((_QWORD *)v1 + 35);
        if (v10)
        {
          if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v10 += 2;
            v38 = v10;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v10, v7);
            v26 = *(_QWORD *)(v8 + 104);
            if (v26)
            {
              v27 = *(_DWORD *)(v26 + 4);
              if ((v27 & 1) != 0)
              {
                v28 = *(uint64_t **)(v26 + 40);
                v29 = *(_DWORD *)(v26 + 52);
              }
              else
              {
                v28 = (uint64_t *)(v26 + 32);
                v29 = v27 >> 5;
              }
              if (v29)
              {
                v30 = 0;
                v11 = 0xFFFFFFFFLL;
                while (1)
                {
                  v31 = *v28;
                  if (*v28 == WebCore::HTMLNames::hrefAttr
                    || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
                    && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
                  {
                    break;
                  }
                  ++v30;
                  v28 += 2;
                  if (v29 == v30)
                    goto LABEL_12;
                }
                v11 = v30;
LABEL_12:
                WebCore::Element::setAttributeInternal((WTF::StringImpl *)v8, v11, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v38, 0);
                v13 = v38;
                v38 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                    WTF::StringImpl::destroy(v13, v12);
                  else
                    *(_DWORD *)v13 -= 2;
                }
                if (*((_BYTE *)v1 + 225) == 2)
                {
                  v35 = (WebCore::Node *)v8;
                  v14 = WTF::fastMalloc((WTF *)0x168);
                  v38 = (WTF::StringImpl *)WebCore::ApplyStyleCommand::ApplyStyleCommand(v14, (uint64_t *)&v35, 0, 4);
                  WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v1, (uint64_t **)&v38);
                  if (v38)
                  {
                    if (*((_DWORD *)v38 + 2) == 1)
                      (*(void (**)(void))(*(_QWORD *)v38 + 8))();
                    else
                      --*((_DWORD *)v38 + 2);
                  }
                  this = (unsigned int *)v35;
                  if (!v35)
                    goto LABEL_51;
                  if (*((_DWORD *)v35 + 6) != 2)
                  {
                    *((_DWORD *)v35 + 6) -= 2;
                    goto LABEL_51;
                  }
                  if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                    goto LABEL_84;
                }
                else
                {
                  *(_DWORD *)(v8 + 24) += 2;
                  v38 = (WTF::StringImpl *)v8;
                  WebCore::CompositeEditCommand::insertNodeAt(v1, (uint64_t *)&v38, v3);
                  v17 = v38;
                  v38 = 0;
                  if (v17)
                  {
                    if (*((_DWORD *)v17 + 6) == 2)
                    {
                      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v17, v16);
                    }
                    else
                    {
                      *((_DWORD *)v17 + 6) -= 2;
                    }
                  }
                  v18 = (WTF::StringImpl *)*((_QWORD *)v1 + 35);
                  if (v18)
                    *(_DWORD *)v18 += 2;
                  v19 = bmalloc::api::isoAllocate();
                  *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
                  *(_QWORD *)(v19 + 24) = 0x300300000002;
                  *(_QWORD *)(v19 + 32) = 0;
                  *(_QWORD *)(v19 + 40) = v5 + 96;
                  *(_OWORD *)(v19 + 48) = 0u;
                  *(_OWORD *)(v19 + 64) = 0u;
                  ++*(_DWORD *)(v5 + 3324);
                  v20 = v18;
                  if (v18 || (v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                    *(_DWORD *)v20 += 2;
                  *(_QWORD *)(v19 + 80) = v20;
                  *(_QWORD *)v19 = off_1E33A8078;
                  v38 = (WTF::StringImpl *)v19;
                  *(_DWORD *)(v8 + 24) += 2;
                  v35 = (WebCore::Node *)v8;
                  WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v1, (uint64_t *)&v38, (uint64_t *)&v35);
                  if (v35)
                  {
                    if (*((_DWORD *)v35 + 6) == 2)
                    {
                      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v35, v21);
                    }
                    else
                    {
                      *((_DWORD *)v35 + 6) -= 2;
                    }
                  }
                  if (v38)
                  {
                    if (*((_DWORD *)v38 + 6) == 2)
                    {
                      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v38, v21);
                    }
                    else
                    {
                      *((_DWORD *)v38 + 6) -= 2;
                    }
                  }
                  if (v18)
                  {
                    if (*(_DWORD *)v18 == 2)
                      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v18 -= 2;
                  }
                  WebCore::positionInParentBeforeNode((WebCore *)v8, (WebCore::Node *)v21, (uint64_t)&v35);
                  WebCore::positionInParentAfterNode(v8, v22, (uint64_t)&v32);
                  v23 = *((_BYTE *)v1 + 226) & 2;
                  v24 = v35;
                  if (v35)
                    *((_DWORD *)v35 + 6) += 2;
                  v38 = v24;
                  v39 = v36;
                  v40 = v37;
                  v25 = v32;
                  if (v32)
                    *((_DWORD *)v32 + 6) += 2;
                  v41 = v25;
                  v42 = v33;
                  v43 = v34;
                  v44 = 0;
                  v45 = 0;
                  v46 = 0;
                  v47 = 0;
                  v48 = 0;
                  v49 = 0;
                  v50 = 0;
                  v51 = 0;
                  v52 = 0;
                  v53 = 0;
                  v54 = 0;
                  v55 = 0;
                  v56 = 1;
                  v57 = v23;
                  WebCore::VisibleSelection::validate((uint64_t)&v38, 0);
                  WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v38);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v38);
                  this = (unsigned int *)v32;
                  v32 = 0;
                  if (this)
                  {
                    if (this[6] == 2)
                    {
                      if ((*((_WORD *)this + 15) & 0x400) == 0)
                        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v15);
                    }
                    else
                    {
                      this[6] -= 2;
                    }
                  }
                  if (v24)
                  {
                    if (*((_DWORD *)v24 + 6) == 2)
                    {
                      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                        this = WebCore::Node::removedLastRef(v24, v15);
                    }
                    else
                    {
                      *((_DWORD *)v24 + 6) -= 2;
                    }
                  }
                  if (*(_DWORD *)(v8 + 24) != 2)
                  {
                    *(_DWORD *)(v8 + 24) -= 2;
                    goto LABEL_51;
                  }
                  if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  {
                    this = (unsigned int *)v8;
LABEL_84:
                    this = WebCore::Node::removedLastRef((WebCore::Node *)this, v15);
                  }
                }
LABEL_51:
                if (*(_DWORD *)(v5 + 24) == 2)
                {
                  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                    return WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
                }
                else
                {
                  *(_DWORD *)(v5 + 24) -= 2;
                }
                return this;
              }
            }
          }
        }
        else
        {
          v38 = 0;
        }
        v11 = 0xFFFFFFFFLL;
        goto LABEL_12;
      }
    }
  }
  return this;
}

uint64_t *WebCore::EditCommand::setEndingSelection(uint64_t *this, const WebCore::VisibleSelection *a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  if (this)
  {
    v3 = this;
    ++*((_DWORD *)this + 2);
    v4 = (char *)a2 + 64;
    do
    {
      if ((*(unsigned int (**)(uint64_t *))(*v3 + 40))(v3))
      {
        ++*((_DWORD *)v3 + 2);
        v5 = v3;
        while (1)
        {
          v6 = v5[34];
          if (v6)
            break;
          v7 = v5[29];
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
              ++*(_DWORD *)(v8 + 8);
          }
          else
          {
            v8 = 0;
          }
          if (*((_DWORD *)v5 + 2) == 1)
            (*(void (**)(uint64_t *))(*v5 + 8))(v5);
          else
            --*((_DWORD *)v5 + 2);
          v5 = (uint64_t *)v8;
          if (!v8)
            goto LABEL_26;
        }
        v9 = *(_DWORD *)(v6 + 8);
        *(_DWORD *)(v6 + 8) = v9 + 1;
        if (v9)
          *(_DWORD *)(v6 + 8) = v9;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (*((_DWORD *)v5 + 2) == 1)
          (*(void (**)(uint64_t *))(*v5 + 8))(v5);
        else
          --*((_DWORD *)v5 + 2);
        ++*(_DWORD *)(v6 + 8);
        WebCore::VisibleSelection::operator=((uint64_t *)(v6 + 128), (uint64_t *)a2);
        v10 = WebCore::editableRootForPosition((uint64_t)v4, 0);
        v12 = v10;
        if (v10)
          *(_DWORD *)(v10 + 24) += 2;
        v13 = *(_QWORD *)(v6 + 256);
        *(_QWORD *)(v6 + 256) = v12;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v11);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        WebCore::AccessibilityUndoReplacedText::configureRangeDeletedByReapplyWithEndingSelection((unsigned int *)(v6 + 264), a2);
        if (*(_DWORD *)(v6 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        else
          --*(_DWORD *)(v6 + 8);
      }
LABEL_26:
      this = WebCore::VisibleSelection::operator=(v3 + 16, (uint64_t *)a2);
      v14 = v3[29];
      if (v14)
      {
        v15 = *(uint64_t **)(v14 + 8);
        if (v15)
          ++*((_DWORD *)v15 + 2);
      }
      else
      {
        v15 = 0;
      }
      if (*((_DWORD *)v3 + 2) == 1)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v3 + 8))(v3);
      else
        --*((_DWORD *)v3 + 2);
      v3 = v15;
    }
    while (v15);
  }
  return this;
}

uint64_t WebCore::CustomUndoStep::unapply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 8))
        {
          ++*(_DWORD *)v2;
          v4 = *(_QWORD *)(v2 + 48);
          if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
          {
            *(_DWORD *)(v5 + 24) += 2;
            WebCore::Document::updateLayout(v5, 2u, 0);
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
          }
          else
          {
            WebCore::Document::updateLayout(0, 2u, 0);
          }
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24));
          if (*(_DWORD *)v2 == 1)
          {
            WebCore::UndoItem::~UndoItem((WebCore::UndoItem *)v2, v7);
            return bmalloc::api::isoDeallocate(v8, v9);
          }
          else
          {
            --*(_DWORD *)v2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CustomUndoStep::reapply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 8))
        {
          ++*(_DWORD *)v2;
          v4 = *(_QWORD *)(v2 + 48);
          if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
          {
            *(_DWORD *)(v5 + 24) += 2;
            WebCore::Document::updateLayout(v5, 2u, 0);
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
          }
          else
          {
            WebCore::Document::updateLayout(0, 2u, 0);
          }
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 40))(*(_QWORD *)(v2 + 32));
          if (*(_DWORD *)v2 == 1)
          {
            WebCore::UndoItem::~UndoItem((WebCore::UndoItem *)v2, v7);
            return bmalloc::api::isoDeallocate(v8, v9);
          }
          else
          {
            --*(_DWORD *)v2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CustomUndoStep::label@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 40);
      if (v4)
      {
        if (*(_QWORD *)(v4 + 8))
        {
          v5 = *(_DWORD **)(v3 + 16);
          if (!v5)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
    }
  }
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
LABEL_8:
    *v5 += 2;
LABEL_9:
  *a2 = v5;
  return this;
}

uint64_t WebCore::CustomUndoStep::didRemoveFromUndoManager(WebCore::CustomUndoStep *this, void *a2)
{
  uint64_t result;
  WebCore::UndoItem *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    v4 = *(WebCore::UndoItem **)(result + 8);
    if (v4)
      ++*(_DWORD *)v4;
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (v6)
    {
      if (!v4)
        return result;
    }
    else
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      if (!v4)
        return result;
    }
    result = WebCore::UndoItem::invalidate(v4, a2);
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UndoItem::~UndoItem(v4, v7);
      return bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return result;
}

unsigned int *WebCore::DeleteFromTextNodeCommand::doApply(WebCore::DeleteFromTextNodeCommand *this)
{
  _DWORD *v2;
  unsigned int *result;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::String *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  int v19;
  WTF::StringImpl *v20;

  v2 = (_DWORD *)*((_QWORD *)this + 31);
  v2[6] += 2;
  result = (unsigned int *)WebCore::Node::computeEditability((uint64_t)v2, 0, 0);
  if (!(_DWORD)result)
    goto LABEL_21;
  v5 = (WTF::StringImpl *)*((unsigned int *)this + 64);
  v7 = v2 + 20;
  v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 10);
  if (!v6)
  {
    if ((_DWORD)v5)
      goto LABEL_4;
    v6 = 0;
LABEL_8:
    v19 = 0;
    v18[0] = 0;
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v6;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = (const WTF::String *)*((unsigned int *)this + 64);
    v12 = *((_DWORD *)this + 65);
    if (*(_QWORD *)v7)
    {
      v13 = *(_DWORD *)(*(_QWORD *)v7 + 4);
      if (v13 >= v11)
        goto LABEL_13;
    }
    else if (!(_DWORD)v11)
    {
      v13 = 0;
LABEL_13:
      v14 = v13 - (_DWORD)v11;
      if (v14 >= v12)
        v15 = v12;
      else
        v15 = v14;
      WTF::makeStringByRemoving((WTF *)(v2 + 20), v11);
      (*(void (**)(_DWORD *, WTF::StringImpl **, const WTF::String *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 376))(v2, &v20, v11, v15, 0, 1);
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v9 = 0;
    goto LABEL_20;
  }
  v8 = *((_DWORD *)v6 + 1);
  if (v8 >= v5)
  {
    if ((_DWORD)v5 || v8 > *((_DWORD *)this + 65))
    {
      WTF::StringImpl::substring(v6);
      v6 = (WTF::StringImpl *)v18[0];
    }
    else
    {
      *(_DWORD *)v6 += 2;
    }
    goto LABEL_8;
  }
LABEL_4:
  LOBYTE(v18[0]) = 0;
  v18[1] = 0;
  v9 = 1;
  v19 = 1;
LABEL_20:
  result = (unsigned int *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33A9EC8[v9])(&v20, v18);
LABEL_21:
  if (v2[6] == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    v2[6] -= 2;
  }
  return result;
}

unsigned int *WebCore::DeleteFromTextNodeCommand::doUnapply(WebCore::DeleteFromTextNodeCommand *this)
{
  uint64_t v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
  if ((_DWORD)result)
  {
    result = (unsigned int *)WebCore::CharacterData::insertData(v2, (WebCore::DeleteFromTextNodeCommand *)((char *)this + 264), *((unsigned int *)this + 64), (uint64_t)v5);
    if (v7)
    {
      result = (unsigned int *)v6;
      v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

double WebCore::DeleteSelectionCommand::DeleteSelectionCommand(uint64_t a1, uint64_t *a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v13;
  double result;

  v13 = WebCore::EditCommand::EditCommand(a1, a2, a8);
  result = 0.0;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_QWORD *)v13 = off_1E33A9F48;
  *(_BYTE *)(v13 + 280) = 0;
  *(_BYTE *)(v13 + 281) = a3;
  *(_BYTE *)(v13 + 282) = a4;
  *(_BYTE *)(v13 + 283) = 0;
  *(_BYTE *)(v13 + 284) = a5;
  *(_BYTE *)(v13 + 285) = a6;
  *(_WORD *)(v13 + 286) = 0;
  *(_BYTE *)(v13 + 288) = a7;
  *(_QWORD *)(v13 + 296) = 0;
  *(_DWORD *)(v13 + 304) = 0;
  *(_BYTE *)(v13 + 308) &= 0xF0u;
  *(_QWORD *)(v13 + 312) = 0;
  *(_DWORD *)(v13 + 320) = 0;
  *(_BYTE *)(v13 + 324) &= 0xF0u;
  *(_QWORD *)(v13 + 328) = 0;
  *(_DWORD *)(v13 + 336) = 0;
  *(_BYTE *)(v13 + 340) &= 0xF0u;
  *(_QWORD *)(v13 + 344) = 0;
  *(_DWORD *)(v13 + 352) = 0;
  *(_BYTE *)(v13 + 356) &= 0xF0u;
  *(_QWORD *)(v13 + 360) = 0;
  *(_DWORD *)(v13 + 368) = 0;
  *(_BYTE *)(v13 + 372) &= 0xF0u;
  *(_QWORD *)(v13 + 376) = 0;
  *(_DWORD *)(v13 + 384) = 0;
  *(_BYTE *)(v13 + 388) &= 0xF0u;
  *(_WORD *)(v13 + 392) = 1;
  *(_BYTE *)(v13 + 394) = *(_BYTE *)(v13 + 394) & 0xFC | 1;
  *(_QWORD *)(v13 + 400) = 0;
  *(_DWORD *)(v13 + 408) = 0;
  *(_BYTE *)(v13 + 412) &= 0xF0u;
  *(_QWORD *)(v13 + 416) = 0;
  *(_DWORD *)(v13 + 424) = 0;
  *(_BYTE *)(v13 + 428) &= 0xF0u;
  *(_QWORD *)(v13 + 432) = 0;
  *(_DWORD *)(v13 + 440) = 0;
  *(_BYTE *)(v13 + 444) &= 0xF0u;
  *(_QWORD *)(v13 + 448) = 0;
  *(_DWORD *)(v13 + 456) = 0;
  *(_BYTE *)(v13 + 460) &= 0xF0u;
  *(_QWORD *)(v13 + 464) = 0;
  *(_DWORD *)(v13 + 472) = 0;
  *(_BYTE *)(v13 + 476) &= 0xF0u;
  *(_QWORD *)(v13 + 480) = 0;
  *(_DWORD *)(v13 + 488) = 0;
  *(_BYTE *)(v13 + 492) &= 0xF0u;
  *(_QWORD *)(v13 + 496) = 0;
  *(_DWORD *)(v13 + 504) = 0;
  *(_BYTE *)(v13 + 508) &= 0xF0u;
  *(_QWORD *)(v13 + 576) = 0;
  *(_OWORD *)(v13 + 544) = 0u;
  *(_OWORD *)(v13 + 560) = 0u;
  *(_OWORD *)(v13 + 512) = 0u;
  *(_OWORD *)(v13 + 528) = 0u;
  return result;
}

uint64_t WebCore::DeleteSelectionCommand::DeleteSelectionCommand(uint64_t a1, uint64_t *a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  WebCore::Node *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  WebCore::Node *v31;

  v15 = *(WebCore::Node **)(*(_QWORD *)(a2[8] + 40) + 8);
  *((_DWORD *)v15 + 6) += 2;
  v31 = v15;
  v16 = (_QWORD *)WebCore::EditCommand::EditCommand(a1, (uint64_t *)&v31, a8);
  v16[31] = 0;
  v16[32] = 0;
  *v16 = off_1E33A9870;
  v16[33] = 0;
  v16[34] = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v17);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  *(_QWORD *)a1 = off_1E33A9F48;
  *(_BYTE *)(a1 + 280) = 1;
  *(_BYTE *)(a1 + 281) = a3;
  *(_BYTE *)(a1 + 282) = a4;
  *(_BYTE *)(a1 + 283) = 0;
  *(_BYTE *)(a1 + 284) = a5;
  *(_BYTE *)(a1 + 285) = a6;
  *(_WORD *)(a1 + 286) = 0;
  *(_BYTE *)(a1 + 288) = a7;
  v18 = *a2;
  if (*a2)
    *(_DWORD *)(v18 + 24) += 2;
  *(_QWORD *)(a1 + 296) = v18;
  v19 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 308) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 304) = v19;
  v20 = a2[2];
  if (v20)
    *(_DWORD *)(v20 + 24) += 2;
  *(_QWORD *)(a1 + 312) = v20;
  v21 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 28);
  *(_DWORD *)(a1 + 320) = v21;
  v22 = a2[4];
  if (v22)
    *(_DWORD *)(v22 + 24) += 2;
  *(_QWORD *)(a1 + 328) = v22;
  v23 = *((_DWORD *)a2 + 10);
  *(_BYTE *)(a1 + 340) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(a1 + 336) = v23;
  v24 = a2[6];
  if (v24)
    *(_DWORD *)(v24 + 24) += 2;
  *(_QWORD *)(a1 + 344) = v24;
  v25 = *((_DWORD *)a2 + 14);
  *(_BYTE *)(a1 + 356) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(a1 + 352) = v25;
  v26 = a2[8];
  if (v26)
    *(_DWORD *)(v26 + 24) += 2;
  *(_QWORD *)(a1 + 360) = v26;
  v27 = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 372) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 368) = v27;
  v28 = a2[10];
  if (v28)
    *(_DWORD *)(v28 + 24) += 2;
  *(_QWORD *)(a1 + 376) = v28;
  v29 = *((_DWORD *)a2 + 22);
  *(_BYTE *)(a1 + 388) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 384) = v29;
  LOBYTE(v29) = *((_BYTE *)a2 + 98);
  *(_WORD *)(a1 + 392) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 394) = v29;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 412) &= 0xF0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 428) &= 0xF0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 444) &= 0xF0u;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) &= 0xF0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 476) &= 0xF0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 492) &= 0xF0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 508) &= 0xF0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  return a1;
}

unsigned int *WebCore::DeleteSelectionCommand::setStartingSelectionOnSmartDelete(WebCore::DeleteSelectionCommand *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  WebCore::VisiblePosition *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *result;
  unsigned int *v10;
  int v11;
  char v12;
  unsigned int *v13;
  int v14;
  char v15;
  char v16;
  unsigned int *v17;
  int v18;
  char v19;
  char v20;

  if ((*((_BYTE *)this + 122) & 1) != 0)
  {
    WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)&v10);
    v17 = v10;
    v18 = v11;
    v19 = v12;
    v20 = 1;
    v6 = a3;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition(a3, (uint64_t)&v10);
    v17 = v10;
    v18 = v11;
    v19 = v12;
    v20 = 1;
    v6 = a2;
  }
  WebCore::VisiblePosition::canonicalPosition(v6, (uint64_t)&v10);
  v14 = v11;
  v15 = v12;
  v13 = v10;
  v16 = 1;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v10, (const WebCore::VisiblePosition *)&v17, (const WebCore::VisiblePosition *)&v13, (*((unsigned __int8 *)this + 122) >> 1) & 1);
  WebCore::EditCommand::setStartingSelection(this, (const WebCore::VisibleSelection *)&v10);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v10);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (v8[6] == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
    }
    else
    {
      v8[6] -= 2;
    }
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::EditCommand::setStartingSelection(WebCore::EditCommand *this, const WebCore::VisibleSelection *a2)
{
  WebCore::EditCommand *v3;
  WebCore::EditCommand *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::EditCommand *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;

  v3 = this;
  if (this)
    ++*((_DWORD *)this + 2);
  while (1)
  {
    if ((*(unsigned int (**)(WebCore::EditCommand *))(*(_QWORD *)v3 + 40))(v3))
    {
      ++*((_DWORD *)v3 + 2);
      v4 = v3;
      while (1)
      {
        v5 = *((_QWORD *)v4 + 34);
        if (v5)
          break;
        v6 = *((_QWORD *)v4 + 29);
        if (v6)
        {
          v7 = *(WebCore::EditCommand **)(v6 + 8);
          if (v7)
            ++*((_DWORD *)v7 + 2);
        }
        else
        {
          v7 = 0;
        }
        if (*((_DWORD *)v4 + 2) == 1)
          (*(void (**)(WebCore::EditCommand *))(*(_QWORD *)v4 + 8))(v4);
        else
          --*((_DWORD *)v4 + 2);
        v4 = v7;
        if (!v7)
          goto LABEL_26;
      }
      v8 = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = v8 + 1;
      if (v8)
        *(_DWORD *)(v5 + 8) = v8;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (*((_DWORD *)v4 + 2) == 1)
        (*(void (**)(WebCore::EditCommand *))(*(_QWORD *)v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
      ++*(_DWORD *)(v5 + 8);
      WebCore::VisibleSelection::operator=((uint64_t *)(v5 + 24), (uint64_t *)a2);
      v9 = WebCore::editableRootForPosition((uint64_t)a2 + 64, 0);
      v11 = v9;
      if (v9)
        *(_DWORD *)(v9 + 24) += 2;
      v12 = *(_QWORD *)(v5 + 248);
      *(_QWORD *)(v5 + 248) = v11;
      if (v12)
      {
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
      WebCore::AccessibilityUndoReplacedText::configureRangeDeletedByReapplyWithStartingSelection((WebCore::Node *)(v5 + 264), a2);
      if (*(_DWORD *)(v5 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      else
        --*(_DWORD *)(v5 + 8);
    }
LABEL_26:
    result = WebCore::VisibleSelection::operator=((uint64_t *)v3 + 3, (uint64_t *)a2);
    v14 = *((_QWORD *)v3 + 29);
    if (!v14)
      break;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15 || *(_DWORD *)(v15 + 268) && **(WebCore::EditCommand ***)(v15 + 256) == v3)
      break;
    ++*(_DWORD *)(v15 + 8);
    if (*((_DWORD *)v3 + 2) == 1)
      (*(void (**)(WebCore::EditCommand *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
    v3 = (WebCore::EditCommand *)v15;
  }
  if (*((_DWORD *)v3 + 2) == 1)
    return (uint64_t *)(*(uint64_t (**)(WebCore::EditCommand *))(*(_QWORD *)v3 + 8))(v3);
  --*((_DWORD *)v3 + 2);
  return result;
}

uint64_t WebCore::unsplittableElementForPosition(WebCore *this, const WebCore::Position *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  WebCore::Node *v14;
  uint64_t v15;

  WebCore::highestEditableRoot((uint64_t)this, 0, &v15);
  v4 = v15;
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_DWORD *)(v5 + 24) += 2;
    if (!v4)
    {
      do
      {
        v6 = v5;
        if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
            goto LABEL_41;
        }
        else if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
          if (v8 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v8 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            goto LABEL_41;
        }
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          *(_DWORD *)(v5 + 24) += 2;
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, v3);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      while (v5);
      goto LABEL_44;
    }
    while (1)
    {
      v6 = v5;
      if (WebCore::Node::computeEditability(v5, 0, 1))
      {
        if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
            goto LABEL_34;
        }
        else if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
          if (v7 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v7 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            goto LABEL_34;
        }
        if (v5 == v4)
          break;
      }
      v5 = *(_QWORD *)(v5 + 32);
      if (v5)
        *(_DWORD *)(v5 + 24) += 2;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v3);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      if (!v5)
        goto LABEL_33;
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
      v6 = 0;
    }
    else
    {
      v6 = 0;
      *(_DWORD *)(v4 + 24) -= 2;
    }
    goto LABEL_38;
  }
LABEL_33:
  v6 = 0;
LABEL_34:
  if (v4)
  {
LABEL_38:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (!v6)
  {
LABEL_44:
    v9 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return 0;
    v10 = *((_BYTE *)this + 12) & 7;
    if (v10 > 4)
      return 0;
    if (((1 << v10) & 0x19) == 0)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        return 0;
    }
    v6 = 0;
    *(_DWORD *)(v9 + 24) += 2;
    v11 = v9;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v11, 0))
        break;
      if ((*(_WORD *)(v11 + 28) & 8) != 0)
        v6 = v11;
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v11)
        break;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (*(_DWORD *)(v9 + 24) != 2)
    {
      *(_DWORD *)(v9 + 24) -= 2;
      return v6;
    }
    if ((*(_WORD *)(v9 + 30) & 0x400) != 0)
      return v6;
    v14 = (WebCore::Node *)v9;
LABEL_71:
    WebCore::Node::removedLastRef(v14, v3);
    return v6;
  }
LABEL_41:
  if ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A96C24);
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
      return v6;
    v14 = (WebCore::Node *)v6;
    goto LABEL_71;
  }
  *(_DWORD *)(v6 + 24) -= 2;
  return v6;
}

uint64_t WebCore::DeleteSelectionCommand::initializePositionData(WebCore::Node **this, void *a2)
{
  WebCore::DeleteSelectionCommand *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  char *v5;
  int v6;
  char v7;
  int *v8;
  int v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t i;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v22;
  unsigned __int8 v23;
  int v24;
  int v25;
  BOOL v26;
  WebCore::Node *v27;
  unsigned int *v28;
  int v29;
  int v30;
  WebCore::Node *v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  _BOOL4 v40;
  WebCore::Node *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  WebCore::Node *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  unsigned int *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  unsigned int *v62;
  WebCore::Node *v63;
  void *v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t m;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int16 v76;
  unsigned __int8 v77;
  uint64_t v78;
  int v79;
  int v80;
  void *v81;
  BOOL v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  int v85;
  int v86;
  WebCore::Node *v87;
  int v88;
  int v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  _BOOL4 v96;
  WebCore::Node *v97;
  WebCore::Node *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t n;
  WebCore::Node *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t ii;
  WebCore::Node *v110;
  WebCore::DeleteSelectionCommand *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  unsigned int *v117;
  int v118;
  const WebCore::VisiblePosition *v119;
  int v120;
  const WebCore::VisiblePosition *v121;
  BOOL v122;
  WebCore::Node *v123;
  WebCore::Node *v124;
  char v125;
  WebCore::Node *v126;
  WebCore::Node *v127;
  int v128;
  char v129;
  unsigned int *v130;
  char v131;
  unsigned int *v132;
  __int16 v133;
  uint64_t v134;
  WebCore::Node *v136;
  int *v137;
  char v138;
  unsigned int *v139;
  void *v140;
  unsigned int *v141;
  unsigned int *v142;
  void *v143;
  unsigned int *v144;
  __int16 v145;
  uint64_t v146;
  WebCore::Node *v148;
  WebCore::Node *v149;
  WebCore::Node *v150;
  unsigned int v151;
  int v152;
  void *v153;
  int v154;
  WebCore::Node *v155;
  unsigned int v156;
  int v157;
  void *v158;
  int v159;
  WebCore::Node *v160;
  uint64_t v161;
  void *v162;
  unsigned int *v163;
  uint64_t v164;
  char *v165;
  void *v166;
  unsigned int *v167;
  uint64_t v168;
  char *v169;
  void *v170;
  unsigned int *v171;
  uint64_t v172;
  char *v173;
  void *v174;
  unsigned int *v175;
  uint64_t v176;
  char *v177;
  WebCore::Node *v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t jj;
  uint64_t v183;
  WebCore::Node *v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t kk;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  unsigned int *v192;
  void *v193;
  uint64_t v194;
  WebCore::VisiblePosition *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WebCore::DeleteSelectionCommand *v203;
  void *v204;
  uint64_t (*v205)();
  BOOL v206;
  unsigned int *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  const WebCore::Position *v215;
  uint64_t (*v216)();
  void *v217;
  _BOOL4 v218;
  unsigned int *v219;
  void *v220;
  uint64_t (*v221)();
  _BOOL4 v222;
  unsigned int *v223;
  _BOOL4 v224;
  WebCore::Node *v225;
  WebCore::Node *v226;
  WebCore::Node *v227;
  void *v228;
  unsigned int *v229;
  uint64_t v230;
  WebCore::DeleteSelectionCommand *v231;
  char *v232;
  void *v233;
  uint64_t v234;
  WebCore::Node **v235;
  uint64_t v236;
  int v237;
  void *v238;
  const WebCore::VisiblePosition *v239;
  char *v240;
  WebCore::Node *v241;
  int v242;
  unsigned int v243;
  int v244;
  void *v245;
  int v246;
  void *v247;
  uint64_t (*v248)();
  BOOL v249;
  void *v250;
  unsigned int *v251;
  void *v252;
  unsigned int *v253;
  void *v254;
  unsigned int *v255;
  unsigned int *v256;
  void *v257;
  unsigned int *v258;
  void *v259;
  unsigned int *v260;
  uint64_t (*v261)();
  void *v262;
  unsigned int *v263;
  uint64_t (*v264)();
  char v265;
  char v266;
  uint64_t (*v267)();
  void *v268;
  unsigned int *v269;
  WebCore::Node *v270;
  WebCore::DeleteSelectionCommand *v271;
  WebCore::Node *v272;
  void *v273;
  unsigned int *v274;
  uint64_t v275;
  void *v276;
  unsigned int *v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  void *v281;
  unsigned int *v282;
  WebCore::Node *v283;
  void *v284;
  unsigned int *v285;
  uint64_t v286;
  char *v287;
  void *v288;
  unsigned int *v289;
  uint64_t v290;
  void *v291;
  unsigned int *v292;
  uint64_t v293;
  WebCore::DeleteSelectionCommand *v294;
  uint64_t (*v295)();
  void *v296;
  _BOOL4 v297;
  unsigned int *v298;
  void *v299;
  _BOOL4 v300;
  unsigned int *v301;
  _BOOL4 v302;
  WebCore::Node *v303;
  const WebCore::Position *v304;
  uint64_t v305;
  WebCore::Node *v306;
  void *v307;
  BOOL v308;
  void *v309;
  WebCore::Node *v310;
  WebCore::Node *v311;
  void *v312;
  WebCore::Node *v313;
  WebCore::Node *v314;
  uint64_t v315;
  void *v316;
  unsigned int *v317;
  _BOOL4 isBlankParagraph;
  const WebCore::VisiblePosition *v319;
  _BOOL4 v320;
  BOOL v321;
  int v322;
  void *v323;
  unsigned int *v324;
  WebCore::Node *v325;
  WebCore::Node *v326;
  unsigned int *v327;
  WebCore::Node *v328;
  void *v329;
  unsigned int *v330;
  uint64_t v331;
  void *v332;
  unsigned int *v333;
  uint64_t v334;
  WebCore::DeleteSelectionCommand *v335;
  void *v336;
  uint64_t v337;
  WebCore::Node *v338;
  char v339;
  void *v340;
  void *v341;
  unsigned int *v342;
  void *v343;
  unsigned int *v344;
  int v345;
  unsigned __int8 v346;
  WebCore::Node *v347;
  WebCore::Node *v348;
  void *v349;
  WebCore::Node *v350;
  void *v351;
  WebCore::Node *v352;
  uint64_t v353;
  WebCore::DeleteSelectionCommand *v354;
  int v355;
  void *v356;
  WebCore::Node *v357;
  WebCore::Node *v358;
  void *v359;
  WebCore::Node *v360;
  uint64_t v361;
  unsigned int *v362;
  WebCore::Node *v363;
  WebCore::Node *v364;
  WebCore::Node *v365;
  void *v366;
  unsigned int *v367;
  unsigned int *v368;
  uint64_t v369;
  unsigned int *v370;
  unsigned int *v371;
  unsigned int *v372;
  uint64_t v373;
  unsigned int *v374;
  WebCore::Node *v375;
  WebCore::Node *v376;
  void *v378;
  unsigned int *v379;
  void *v380;
  unsigned int *v381;
  void *v382;
  unsigned int *v383;
  void *v384;
  unsigned int *v385;
  void *v386;
  unsigned int *v387;
  void *v388;
  unsigned int *v389;
  void *v390;
  WebCore::Node *v391;
  void *v392;
  WebCore::Node *v393;
  void *v394;
  WebCore::Node *v395;
  void *v396;
  unsigned int *v397;
  void *v398;
  unsigned int *v399;
  unsigned int *v400;
  unsigned int *v401;
  WebCore::VisiblePosition *v402;
  BOOL v403;
  _BOOL4 v404;
  WebCore::VisiblePosition *v405;
  WebCore::VisiblePosition *v406;
  char *v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  const WebCore::Position *v411;
  WebCore::DeleteSelectionCommand *v412;
  WebCore::Node *v413;
  unsigned int v414;
  WebCore::Node *v415;
  WebCore::Node *v416;
  WebCore::Node *v417;
  int v418;
  unsigned __int8 v419;
  WebCore::Node *v420[2];
  char v421;
  WebCore::Node *v422;
  int v423;
  unsigned __int8 v424;
  WebCore::Node *v425;
  int v426;
  unsigned __int8 v427;
  WebCore::Node *v428;
  int v429;
  unsigned __int8 v430;
  char v431;
  WebCore::Node *v432;
  uint64_t v433;
  uint64_t v434;
  WebCore::Node *v435;
  uint64_t v436;
  uint64_t v437;
  WebCore::Node *v438;
  int v439;
  unsigned __int8 v440;
  char v441;
  WebCore::Node *v442;
  int v443;
  unsigned __int8 v444;
  char v445;
  unsigned int *v446;
  int v447;
  unsigned __int8 v448;
  char v449;
  WebCore::Node *v450[3];

  v2 = (WebCore::DeleteSelectionCommand *)this;
  v3 = this[45];
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v425 = v3;
  v426 = *((_DWORD *)this + 92);
  v427 = *((_BYTE *)this + 372);
  v4 = this[47];
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v422 = v4;
  v423 = *((_DWORD *)v2 + 96);
  v424 = *((_BYTE *)v2 + 388);
  v412 = v2;
  if (v3
    && (*((_WORD *)v3 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
  {
    v5 = (char *)&v427;
    v9 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v9 + 2;
    if (v9)
    {
      *((_DWORD *)v3 + 6) = v9;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, a2);
    }
    v7 = 1;
    v8 = &v426;
  }
  else
  {
    if (!v4
      || (*((_WORD *)v4 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
    {
      goto LABEL_18;
    }
    v5 = (char *)&v424;
    v6 = *((_DWORD *)v4 + 6);
    *((_DWORD *)v4 + 6) = v6 + 2;
    if (v6)
    {
      *((_DWORD *)v4 + 6) = v6;
    }
    else if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v4, a2);
    }
    v7 = 2;
    v8 = &v423;
  }
  *v8 = 0;
  *v5 = v7;
  v2 = v412;
LABEL_18:
  if (!*((_BYTE *)v2 + 285))
  {
LABEL_644:
    v151 = v427 & 7;
    if (v151 > 4)
      goto LABEL_803;
    if (((1 << v151) & 0x19) == 0)
    {
      v3 = (WebCore::Node *)*((_QWORD *)v3 + 4);
      if (!v3)
        goto LABEL_803;
    }
    *((_DWORD *)v3 + 6) += 2;
    v152 = WebCore::Node::computeEditability((uint64_t)v3, 0, 0);
    v154 = *((_DWORD *)v3 + 6) - 2;
    if (!v152)
    {
      if (*((_DWORD *)v3 + 6) == 2)
      {
        if ((*((_WORD *)v3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v3, v153);
      }
      else
      {
        *((_DWORD *)v3 + 6) = v154;
      }
      goto LABEL_803;
    }
    if (*((_DWORD *)v3 + 6) != 2)
      goto LABEL_648;
LABEL_808:
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3, v153);
    goto LABEL_649;
  }
  v405 = (WebCore::DeleteSelectionCommand *)((char *)v2 + 360);
  v402 = (WebCore::DeleteSelectionCommand *)((char *)v2 + 376);
  do
  {
    v10 = WebCore::Position::rootEditableElement((WebCore::Position *)&v425);
    v12 = v10;
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v13 = v425;
    if (!v425)
      goto LABEL_169;
    *((_DWORD *)v425 + 6) += 2;
    while (1)
    {
      v14 = 0;
      v15 = v13;
      do
      {
        if (!WebCore::Node::hasEditableStyle((uint64_t)v13, 0))
          break;
        if ((*((_WORD *)v13 + 14) & 8) != 0)
          v14 = v13;
        i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 5) + 8) + 1272);
        if (i)
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
            {
              if ((*(_WORD *)(i + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              {
                break;
              }
            }
          }
          else
          {
            i = 0;
          }
        }
        if ((WebCore::Node *)i == v13)
          break;
        v13 = (WebCore::Node *)*((_QWORD *)v13 + 4);
      }
      while (v13);
      if (v12 != v14)
        break;
      v17 = WebCore::ScriptDisallowedScope::s_count++;
      if ((*((_WORD *)v15 + 14) & 0x10) != 0)
      {
        if ((*((_WORD *)v15 + 15) & 1) != 0)
          goto LABEL_51;
        v18 = *((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          if ((*(_BYTE *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A991F8);
          }
          v19 = *(_DWORD *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
          *(_DWORD *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v19 + 1;
          v20 = *(_QWORD *)(v18 + 96);
          if ((v20 & 0x1E) != 4 && (v20 & 0xE000000) == 0)
          {
            if (v19 == -1)
            {
LABEL_851:
              __break(0xC471u);
              JUMPOUT(0x195A99218);
            }
            *(_DWORD *)(v18 + 16) = v19;
            WebCore::ScriptDisallowedScope::s_count = v17;
            if ((v20 & 0x380000) == 0)
              goto LABEL_120;
          }
          else
          {
            if (v19 == -1)
              goto LABEL_851;
            *(_DWORD *)(v18 + 16) = v19;
LABEL_51:
            WebCore::ScriptDisallowedScope::s_count = v17;
          }
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v425, (uint64_t)&v446);
          v449 = 1;
          if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v15 + 208))(v15) & 1) != 0)
          {
            v22 = *((_WORD *)v15 + 14);
            *((_DWORD *)v15 + 6) += 2;
            if ((v22 & 1) != 0)
              v23 = v440 & 0xF0;
            else
              v23 = v440 & 0xF0 | 3;
          }
          else
          {
            *((_DWORD *)v15 + 6) += 2;
            v23 = v440 & 0xF0 | 1;
          }
          v438 = v15;
          v439 = 0;
          v440 = v23;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v438, (uint64_t)&v442);
          v445 = 1;
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, v11);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
          if ((*((_WORD *)v15 + 14) & 0x10) == 0)
            goto LABEL_78;
          v24 = *((_DWORD *)v15 + 6);
          *((_DWORD *)v15 + 6) = v24 + 2;
          if ((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) == 0)
          {
            if (v24)
            {
              *((_DWORD *)v15 + 6) = v24;
            }
            else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v15, v11);
            }
            goto LABEL_78;
          }
          if ((*(_BYTE *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A99278);
          }
          v25 = *(unsigned __int8 *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
          if (v24)
          {
            *((_DWORD *)v15 + 6) = v24;
LABEL_63:
            if (v25 == 35 || v25 == 63)
              goto LABEL_65;
LABEL_78:
            v28 = v446;
            if (v446)
              v446[6] += 2;
            v29 = v447;
            v30 = v448;
            v31 = v442;
            if (v442)
              *((_DWORD *)v442 + 6) += 2;
            if (v28 == (unsigned int *)v31)
            {
              v32 = v443;
              v33 = v444;
              if ((v30 & 8) == 0 && ((v30 & 7) == 4 || (v30 & 7) == 2))
              {
                if (v28)
                {
                  v34 = v28[6];
                  v28[6] = v34 + 2;
                  v35 = *((_WORD *)v28 + 14);
                  if ((v35 & 1) != 0)
                  {
                    v43 = *((_QWORD *)v28 + 10);
                    if (v43)
                      v29 = *(_DWORD *)(v43 + 4);
                    else
                      v29 = 0;
                  }
                  else if ((v35 & 4) != 0 && (v36 = *((_QWORD *)v28 + 10)) != 0)
                  {
                    v29 = 0;
                    do
                    {
                      ++v29;
                      v36 = *(_QWORD *)(v36 + 56);
                    }
                    while (v36);
                  }
                  else
                  {
                    v29 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v28 + 208))(v28) ^ 1;
                    v34 = v28[6] - 2;
                  }
                  if (v34)
                  {
                    v28[6] = v34;
                  }
                  else if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
                  }
                }
                else
                {
                  v29 = 0;
                }
              }
              if ((v33 & 8) == 0 && ((v33 & 7) == 4 || (v33 & 7) == 2))
              {
                if (v31)
                {
                  v37 = v28[6];
                  v28[6] = v37 + 2;
                  v38 = *((_WORD *)v28 + 14);
                  if ((v38 & 1) != 0)
                  {
                    v44 = *((_QWORD *)v28 + 10);
                    if (v44)
                      v32 = *(_DWORD *)(v44 + 4);
                    else
                      v32 = 0;
                  }
                  else if ((v38 & 4) != 0 && (v39 = *((_QWORD *)v28 + 10)) != 0)
                  {
                    v32 = 0;
                    do
                    {
                      ++v32;
                      v39 = *(_QWORD *)(v39 + 56);
                    }
                    while (v39);
                  }
                  else
                  {
                    v32 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v28 + 208))(v28) ^ 1;
                    v37 = v28[6] - 2;
                  }
                  if (v37)
                  {
                    v28[6] = v37;
                  }
                  else if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
                  }
                }
                else
                {
                  v32 = 0;
                }
              }
              v40 = v29 == v32 && ((v33 ^ v30) & 7) == 0;
              if (!v31)
                goto LABEL_110;
LABEL_108:
              if (*((_DWORD *)v31 + 6) == 2)
              {
                if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v31, v11);
              }
              else
              {
                *((_DWORD *)v31 + 6) -= 2;
              }
            }
            else
            {
              v40 = 0;
              if (v31)
                goto LABEL_108;
            }
LABEL_110:
            if (v28)
            {
              if (v28[6] == 2)
              {
                if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
              }
              else
              {
                v28[6] -= 2;
              }
            }
            if (v40)
            {
LABEL_214:
              if ((*((_WORD *)v15 + 14) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195A9A944);
              }
              v58 = v442;
              v442 = 0;
              if (v58)
              {
                if (*((_DWORD *)v58 + 6) == 2)
                {
                  if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v58, v11);
                }
                else
                {
                  *((_DWORD *)v58 + 6) -= 2;
                }
              }
              v59 = v446;
              v446 = 0;
              if (v59)
              {
                if (v59[6] == 2)
                {
                  if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v59, v11);
                }
                else
                {
                  v59[6] -= 2;
                }
              }
              goto LABEL_170;
            }
          }
          else
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v15, v11);
              goto LABEL_63;
            }
            if (v25 != 63 && v25 != 35)
              goto LABEL_78;
LABEL_65:
            WebCore::VisiblePosition::next((unsigned __int8 *)&v442, 0, 0, (uint64_t)&v438);
            v26 = WebCore::operator==((uint64_t *)&v446, (uint64_t *)&v438)
               || WebCore::operator==((uint64_t *)&v446, (uint64_t *)&v442);
            v27 = v438;
            v438 = 0;
            if (v27)
            {
              if (*((_DWORD *)v27 + 6) == 2)
              {
                if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v27, v11);
              }
              else
              {
                *((_DWORD *)v27 + 6) -= 2;
              }
            }
            if (v26)
              goto LABEL_214;
          }
          v41 = v442;
          v442 = 0;
          if (v41)
          {
            if (*((_DWORD *)v41 + 6) == 2)
            {
              if ((*((_WORD *)v41 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v41, v11);
            }
            else
            {
              *((_DWORD *)v41 + 6) -= 2;
            }
          }
          v42 = v446;
          v446 = 0;
          if (v42)
          {
            if (v42[6] == 2)
            {
              if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v42, v11);
            }
            else
            {
              v42[6] -= 2;
            }
          }
          goto LABEL_120;
        }
      }
      WebCore::ScriptDisallowedScope::s_count = v17;
LABEL_120:
      v13 = (WebCore::Node *)*((_QWORD *)v15 + 4);
      if (v13)
        *((_DWORD *)v13 + 6) += 2;
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v11);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
      if (!v13)
        goto LABEL_169;
    }
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v11);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
LABEL_169:
    v15 = 0;
LABEL_170:
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v11);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    if (v15)
    {
      WebCore::positionInParentBeforeNode(v15, (WebCore::Node *)v11, (uint64_t)&v446);
      v46 = v446;
      if (!v446)
        goto LABEL_234;
      v47 = v448 & 7;
      if (v47 > 4)
      {
        v48 = 0;
      }
      else if (((1 << v47) & 0x19) != 0 || (v46 = (unsigned int *)*((_QWORD *)v446 + 4)) != 0)
      {
        v48 = 0;
        v49 = (uint64_t)v46;
        do
        {
          if (!WebCore::Node::hasEditableStyle(v49, 0))
            break;
          if ((*(_WORD *)(v49 + 28) & 8) != 0)
            v48 = v49;
          j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 5) + 8) + 1272);
          if (j)
          {
            if ((*(_WORD *)(j + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
              {
                if ((*(_WORD *)(j + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              j = 0;
            }
          }
          if (j == v49)
            break;
          v49 = *(_QWORD *)(v49 + 32);
        }
        while (v49);
      }
      else
      {
        v48 = 0;
      }
      v51 = v425;
      if (v425
        && (v52 = v427 & 7, v52 <= 4)
        && (((1 << v52) & 0x19) != 0 || (v51 = (WebCore::Node *)*((_QWORD *)v425 + 4)) != 0))
      {
        v53 = 0;
        v54 = (uint64_t)v51;
        do
        {
          if (!WebCore::Node::hasEditableStyle(v54, 0))
            break;
          if ((*(_WORD *)(v54 + 28) & 8) != 0)
            v53 = v54;
          k = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v51 + 5) + 8) + 1272);
          if (k)
          {
            if ((*(_WORD *)(k + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (k = *(_QWORD *)(k + 80); k; k = *(_QWORD *)(k + 56))
              {
                if ((*(_WORD *)(k + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              k = 0;
            }
          }
          if (k == v54)
            break;
          v54 = *(_QWORD *)(v54 + 32);
        }
        while (v54);
      }
      else
      {
        v53 = 0;
      }
      if (v48 != v53)
      {
LABEL_234:
        v60 = v425;
        if (v425)
          *((_DWORD *)v425 + 6) += 2;
        v61 = 0;
        LODWORD(v428) = v426;
        BYTE4(v428) = v427;
        v62 = v446;
        if (!v446)
          goto LABEL_243;
LABEL_241:
        if (v62[6] == 2)
        {
          if ((*((_WORD *)v62 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v62, v45);
        }
        else
        {
          v62[6] -= 2;
        }
        goto LABEL_243;
      }
      v60 = (WebCore::Node *)v446;
      if (v446)
        v446[6] += 2;
      LODWORD(v428) = v447;
      BYTE4(v428) = v448;
      v61 = v15;
      v62 = (unsigned int *)v60;
      v15 = 0;
      if (v60)
        goto LABEL_241;
LABEL_243:
      v413 = v60;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v45);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v57 = v61;
    }
    else
    {
      v56 = v425;
      if (v425)
        *((_DWORD *)v425 + 6) += 2;
      v413 = v56;
      v57 = 0;
      LODWORD(v428) = v426;
      BYTE4(v428) = v427;
    }
    v63 = WebCore::Position::rootEditableElement((WebCore::Position *)&v422);
    v65 = v63;
    if (v63)
      *((_DWORD *)v63 + 6) += 2;
    v66 = v422;
    v415 = v57;
    if (!v422)
      goto LABEL_406;
    *((_DWORD *)v422 + 6) += 2;
    while (2)
    {
      v67 = 0;
      v68 = (uint64_t)v66;
      v69 = (uint64_t)v66;
      do
      {
        if (!WebCore::Node::hasEditableStyle(v69, 0))
          break;
        if ((*(_WORD *)(v69 + 28) & 8) != 0)
          v67 = v69;
        m = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v66 + 5) + 8) + 1272);
        if (m)
        {
          if ((*(_WORD *)(m + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            for (m = *(_QWORD *)(m + 80); m; m = *(_QWORD *)(m + 56))
            {
              if ((*(_WORD *)(m + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              {
                break;
              }
            }
          }
          else
          {
            m = 0;
          }
        }
        if (m == v69)
          break;
        v69 = *(_QWORD *)(v69 + 32);
      }
      while (v69);
      if (v65 == (WebCore::Node *)v67)
      {
        v71 = WebCore::ScriptDisallowedScope::s_count++;
        if ((*((_WORD *)v66 + 14) & 0x10) == 0)
          goto LABEL_268;
        if ((*((_WORD *)v66 + 15) & 1) != 0)
        {
LABEL_278:
          WebCore::ScriptDisallowedScope::s_count = v71;
        }
        else
        {
          v72 = *((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL;
          if (!v72)
          {
LABEL_268:
            WebCore::ScriptDisallowedScope::s_count = v71;
            goto LABEL_355;
          }
          if ((*(_BYTE *)((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195A99238);
          }
          v73 = *(_DWORD *)((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
          *(_DWORD *)((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v73 + 1;
          v74 = *(_QWORD *)(v72 + 96);
          if ((v74 & 0x1E) == 4 || (v74 & 0xE000000) != 0)
          {
            if (v73 == -1)
              goto LABEL_853;
            *(_DWORD *)(v72 + 16) = v73;
            goto LABEL_278;
          }
          if (v73 == -1)
          {
LABEL_853:
            __break(0xC471u);
            JUMPOUT(0x195A99258);
          }
          *(_DWORD *)(v72 + 16) = v73;
          WebCore::ScriptDisallowedScope::s_count = v71;
          if ((v74 & 0x380000) == 0)
          {
LABEL_355:
            v66 = *(WebCore::Node **)(v68 + 32);
            if (v66)
              *((_DWORD *)v66 + 6) += 2;
            if (*(_DWORD *)(v68 + 24) == 2)
            {
              if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v68, v64);
            }
            else
            {
              *(_DWORD *)(v68 + 24) -= 2;
            }
            if (!v66)
              goto LABEL_406;
            continue;
          }
        }
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v422, (uint64_t)&v442);
        v445 = 1;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v66 + 208))(v66) & 1) != 0)
        {
          v76 = *((_WORD *)v66 + 14);
          *((_DWORD *)v66 + 6) += 2;
          if ((v76 & 1) != 0)
          {
            v78 = *((_QWORD *)v66 + 10);
            if (v78)
              LODWORD(v78) = *(_DWORD *)(v78 + 4);
            v446 = (unsigned int *)v66;
            v447 = v78;
            v77 = v448 & 0xF0;
          }
          else
          {
            v446 = (unsigned int *)v66;
            v447 = 0;
            v77 = v448 & 0xF0 | 4;
          }
        }
        else
        {
          *((_DWORD *)v66 + 6) += 2;
          v446 = (unsigned int *)v66;
          v447 = 0;
          v77 = v448 & 0xF0 | 2;
        }
        v448 = v77;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v446, (uint64_t)&v438);
        v441 = 1;
        if (*((_DWORD *)v66 + 6) == 2)
        {
          if ((*((_WORD *)v66 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v66, v64);
        }
        else
        {
          *((_DWORD *)v66 + 6) -= 2;
        }
        if ((*((_WORD *)v66 + 14) & 0x10) == 0)
          goto LABEL_313;
        v79 = *((_DWORD *)v66 + 6);
        *((_DWORD *)v66 + 6) = v79 + 2;
        if ((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) == 0)
        {
          if (v79)
          {
            *((_DWORD *)v66 + 6) = v79;
          }
          else if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v66, v64);
          }
          goto LABEL_313;
        }
        if ((*(_BYTE *)((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195A99298);
        }
        v80 = *(unsigned __int8 *)((*((_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
        if (v79)
        {
          *((_DWORD *)v66 + 6) = v79;
LABEL_292:
          if (v80 == 35 || v80 == 63)
            goto LABEL_294;
LABEL_313:
          v84 = v442;
          if (v442)
            *((_DWORD *)v442 + 6) += 2;
          v85 = v443;
          v86 = v444;
          v87 = v438;
          if (v438)
            *((_DWORD *)v438 + 6) += 2;
          if (v84 == v87)
          {
            v88 = v439;
            v89 = v440;
            if ((v86 & 8) == 0 && ((v86 & 7) == 4 || (v86 & 7) == 2))
            {
              if (v84)
              {
                v90 = *((_DWORD *)v84 + 6);
                *((_DWORD *)v84 + 6) = v90 + 2;
                v91 = *((_WORD *)v84 + 14);
                if ((v91 & 1) != 0)
                {
                  v99 = *((_QWORD *)v84 + 10);
                  if (v99)
                    v85 = *(_DWORD *)(v99 + 4);
                  else
                    v85 = 0;
                }
                else if ((v91 & 4) != 0 && (v92 = *((_QWORD *)v84 + 10)) != 0)
                {
                  v85 = 0;
                  do
                  {
                    ++v85;
                    v92 = *(_QWORD *)(v92 + 56);
                  }
                  while (v92);
                }
                else
                {
                  v85 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v84 + 208))(v84) ^ 1;
                  v90 = *((_DWORD *)v84 + 6) - 2;
                }
                if (v90)
                {
                  *((_DWORD *)v84 + 6) = v90;
                }
                else if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v84, v64);
                }
              }
              else
              {
                v85 = 0;
              }
            }
            if ((v89 & 8) == 0 && ((v89 & 7) == 4 || (v89 & 7) == 2))
            {
              if (v87)
              {
                v93 = *((_DWORD *)v84 + 6);
                *((_DWORD *)v84 + 6) = v93 + 2;
                v94 = *((_WORD *)v84 + 14);
                if ((v94 & 1) != 0)
                {
                  v100 = *((_QWORD *)v84 + 10);
                  if (v100)
                    v88 = *(_DWORD *)(v100 + 4);
                  else
                    v88 = 0;
                }
                else if ((v94 & 4) != 0 && (v95 = *((_QWORD *)v84 + 10)) != 0)
                {
                  v88 = 0;
                  do
                  {
                    ++v88;
                    v95 = *(_QWORD *)(v95 + 56);
                  }
                  while (v95);
                }
                else
                {
                  v88 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v84 + 208))(v84) ^ 1;
                  v93 = *((_DWORD *)v84 + 6) - 2;
                }
                if (v93)
                {
                  *((_DWORD *)v84 + 6) = v93;
                }
                else if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v84, v64);
                }
              }
              else
              {
                v88 = 0;
              }
            }
            v96 = v85 == v88 && ((v89 ^ v86) & 7) == 0;
            if (!v87)
              goto LABEL_345;
LABEL_343:
            if (*((_DWORD *)v87 + 6) == 2)
            {
              if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v87, v64);
            }
            else
            {
              *((_DWORD *)v87 + 6) -= 2;
            }
          }
          else
          {
            v96 = 0;
            if (v87)
              goto LABEL_343;
          }
LABEL_345:
          if (v84)
          {
            if (*((_DWORD *)v84 + 6) == 2)
            {
              if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v84, v64);
            }
            else
            {
              *((_DWORD *)v84 + 6) -= 2;
            }
          }
          if (v96)
          {
LABEL_450:
            if ((*(_WORD *)(v68 + 28) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A9A964);
            }
            v115 = v438;
            v438 = 0;
            if (v115)
            {
              if (*((_DWORD *)v115 + 6) == 2)
              {
                if ((*((_WORD *)v115 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v115, v64);
              }
              else
              {
                *((_DWORD *)v115 + 6) -= 2;
              }
            }
            v116 = v442;
            v442 = 0;
            if (v116)
            {
              if (*((_DWORD *)v116 + 6) == 2)
              {
                if ((*((_WORD *)v116 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v116, v64);
              }
              else
              {
                *((_DWORD *)v116 + 6) -= 2;
              }
            }
            goto LABEL_407;
          }
        }
        else
        {
          if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v66, v64);
            goto LABEL_292;
          }
          if (v80 != 63 && v80 != 35)
            goto LABEL_313;
LABEL_294:
          WebCore::previousVisuallyDistinctCandidate(&v438, (uint64_t)&v432);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)&v432))
          {
            v435 = 0;
            v436 = 0;
            v437 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v432, (uint64_t)&v446);
            v435 = (WebCore::Node *)v446;
            LODWORD(v436) = v447;
            BYTE4(v436) = v448;
          }
          LOBYTE(v437) = 1;
          if (v432)
          {
            if (*((_DWORD *)v432 + 6) == 2)
            {
              if ((*((_WORD *)v432 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v432, v81);
            }
            else
            {
              *((_DWORD *)v432 + 6) -= 2;
            }
          }
          v82 = WebCore::operator==((uint64_t *)&v442, (uint64_t *)&v435)
             || WebCore::operator==((uint64_t *)&v442, (uint64_t *)&v438);
          v83 = v435;
          v435 = 0;
          if (v83)
          {
            if (*((_DWORD *)v83 + 6) == 2)
            {
              if ((*((_WORD *)v83 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v83, v64);
            }
            else
            {
              *((_DWORD *)v83 + 6) -= 2;
            }
          }
          if (v82)
            goto LABEL_450;
        }
        v97 = v438;
        v438 = 0;
        if (v97)
        {
          if (*((_DWORD *)v97 + 6) == 2)
          {
            if ((*((_WORD *)v97 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v97, v64);
          }
          else
          {
            *((_DWORD *)v97 + 6) -= 2;
          }
        }
        v98 = v442;
        v442 = 0;
        if (v98)
        {
          if (*((_DWORD *)v98 + 6) == 2)
          {
            if ((*((_WORD *)v98 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v98, v64);
          }
          else
          {
            *((_DWORD *)v98 + 6) -= 2;
          }
        }
        goto LABEL_355;
      }
      break;
    }
    if (*((_DWORD *)v66 + 6) == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v66, v64);
    }
    else
    {
      *((_DWORD *)v66 + 6) -= 2;
    }
LABEL_406:
    v68 = 0;
LABEL_407:
    if (v65)
    {
      if (*((_DWORD *)v65 + 6) == 2)
      {
        if ((*((_WORD *)v65 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v65, v64);
      }
      else
      {
        *((_DWORD *)v65 + 6) -= 2;
      }
    }
    if (!v68)
    {
      v110 = v422;
      if (v422)
        *((_DWORD *)v422 + 6) += 2;
      LODWORD(v420[0]) = v423;
      BYTE4(v420[0]) = v424;
      v111 = v412;
      v112 = (uint64_t)v415;
      if (v415)
      {
        v113 = 0;
        v114 = 0;
        goto LABEL_488;
      }
      LOBYTE(v113) = 1;
      goto LABEL_516;
    }
    WebCore::positionInParentAfterNode(v68, (WebCore::Node *)v64, (uint64_t)&v446);
    v101 = v446;
    if (!v446)
      goto LABEL_473;
    v102 = 0;
    v103 = v446;
    do
    {
      if (!WebCore::Node::hasEditableStyle((uint64_t)v103, 0))
        break;
      if ((v103[7] & 8) != 0)
        v102 = v103;
      n = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v101 + 5) + 8) + 1272);
      if (n)
      {
        if ((*(_WORD *)(n + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(n + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (n = *(_QWORD *)(n + 80); n; n = *(_QWORD *)(n + 56))
          {
            if ((*(_WORD *)(n + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(n + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          n = 0;
        }
      }
      if ((unsigned int *)n == v103)
        break;
      v103 = (unsigned int *)*((_QWORD *)v103 + 4);
    }
    while (v103);
    v105 = v422;
    if (v422
      && (v106 = v424 & 7, v106 <= 4)
      && (((1 << v106) & 0x19) != 0 || (v105 = (WebCore::Node *)*((_QWORD *)v422 + 4)) != 0))
    {
      v107 = 0;
      v108 = (uint64_t)v105;
      do
      {
        if (!WebCore::Node::hasEditableStyle(v108, 0))
          break;
        if ((*(_WORD *)(v108 + 28) & 8) != 0)
          v107 = v108;
        ii = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v105 + 5) + 8) + 1272);
        if (ii)
        {
          if ((*(_WORD *)(ii + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(ii + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            for (ii = *(_QWORD *)(ii + 80); ii; ii = *(_QWORD *)(ii + 56))
            {
              if ((*(_WORD *)(ii + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(ii + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              {
                break;
              }
            }
          }
          else
          {
            ii = 0;
          }
        }
        if (ii == v108)
          break;
        v108 = *(_QWORD *)(v108 + 32);
      }
      while (v108);
    }
    else
    {
      v107 = 0;
    }
    if (v102 == (unsigned int *)v107)
    {
      v110 = (WebCore::Node *)v446;
      if (v446)
        v446[6] += 2;
      LODWORD(v420[0]) = v447;
      BYTE4(v420[0]) = v448;
      v114 = v68;
      v117 = (unsigned int *)v110;
      v68 = 0;
    }
    else
    {
LABEL_473:
      v110 = v422;
      if (v422)
        *((_DWORD *)v422 + 6) += 2;
      v114 = 0;
      LODWORD(v420[0]) = v423;
      BYTE4(v420[0]) = v424;
      v117 = v446;
    }
    v111 = v412;
    v446 = 0;
    if (v117)
    {
      if (v117[6] == 2)
      {
        if ((*((_WORD *)v117 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v117, v64);
      }
      else
      {
        v117[6] -= 2;
      }
    }
    if (v68)
    {
      if (*(_DWORD *)(v68 + 24) == 2)
      {
        if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v68, v64);
      }
      else
      {
        *(_DWORD *)(v68 + 24) -= 2;
      }
    }
    v112 = (uint64_t)v415;
    if (v415)
    {
      v113 = 0;
      goto LABEL_488;
    }
    v113 = 1;
    if (!v114)
      goto LABEL_516;
LABEL_488:
    *((_BYTE *)v111 + 282) = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v425, (uint64_t)&v442);
    v445 = 1;
    if (*((_BYTE *)v111 + 393) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition(v405, (uint64_t)&v438);
      v441 = 1;
    }
    else
    {
      v118 = *((unsigned __int8 *)v111 + 392);
      WebCore::VisiblePosition::canonicalPosition(v405, (uint64_t)&v438);
      v441 = 1;
      if (!v118)
      {
        v142 = (unsigned int *)v438;
        if (v438)
        {
          *((_DWORD *)v438 + 6) += 2;
          v446 = v142;
          v447 = v439;
          v448 = v440;
          v449 = 0;
          if (!WebCore::inSameLine((WebCore *)&v438, (const WebCore::VisiblePosition *)&v446, v119))
            v441 = 0;
          v144 = v446;
          v446 = 0;
          if (v144)
          {
            if (v144[6] == 2)
            {
              if ((*((_WORD *)v144 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v144, v143);
            }
            else
            {
              v144[6] -= 2;
            }
          }
        }
      }
    }
    if (WebCore::operator==((uint64_t *)&v442, (uint64_t *)&v438))
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v422, (uint64_t)&v435);
      LOBYTE(v437) = 1;
      if (*((_BYTE *)v412 + 393) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v402, (uint64_t)&v432);
        LOBYTE(v434) = 1;
      }
      else
      {
        v120 = *((unsigned __int8 *)v412 + 392);
        WebCore::VisiblePosition::canonicalPosition(v402, (uint64_t)&v432);
        LOBYTE(v434) = 1;
        if (v120)
          goto LABEL_493;
      }
      v139 = (unsigned int *)v432;
      if (v432)
      {
        *((_DWORD *)v432 + 6) += 2;
        v446 = v139;
        v447 = v433;
        v448 = BYTE4(v433);
        v449 = 0;
        if (!WebCore::inSameLine((WebCore *)&v432, (const WebCore::VisiblePosition *)&v446, v121))
          LOBYTE(v434) = 0;
        v141 = v446;
        v446 = 0;
        if (v141)
        {
          if (v141[6] == 2)
          {
            if ((*((_WORD *)v141 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v141, v140);
          }
          else
          {
            v141[6] -= 2;
          }
        }
      }
LABEL_493:
      v122 = WebCore::operator==((uint64_t *)&v435, (uint64_t *)&v432);
      v123 = v432;
      v432 = 0;
      if (v123)
      {
        if (*((_DWORD *)v123 + 6) == 2)
        {
          if ((*((_WORD *)v123 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v123, v64);
        }
        else
        {
          *((_DWORD *)v123 + 6) -= 2;
        }
      }
      v124 = v435;
      v435 = 0;
      if (v124)
      {
        if (*((_DWORD *)v124 + 6) == 2)
        {
          if ((*((_WORD *)v124 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v124, v64);
        }
        else
        {
          *((_DWORD *)v124 + 6) -= 2;
        }
      }
      v125 = !v122;
      v112 = (uint64_t)v415;
    }
    else
    {
      v125 = 1;
    }
    v126 = v438;
    v438 = 0;
    if (v126)
    {
      if (*((_DWORD *)v126 + 6) == 2)
      {
        if ((*((_WORD *)v126 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v126, v64);
      }
      else
      {
        *((_DWORD *)v126 + 6) -= 2;
      }
    }
    v127 = v442;
    v442 = 0;
    if (v127)
    {
      if (*((_DWORD *)v127 + 6) == 2)
      {
        if ((*((_WORD *)v127 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v127, v64);
      }
      else
      {
        *((_DWORD *)v127 + 6) -= 2;
      }
    }
    if ((v125 & 1) == 0)
    {
      if (v112)
      {
        if (!v114)
        {
          WebCore::positionInParentAfterNode(v112, (WebCore::Node *)v64, (uint64_t)&v446);
          v129 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v446, (uint64_t)&v422);
          v130 = v446;
          v446 = 0;
          if (v130)
          {
            if (v130[6] == 2)
            {
              if ((*((_WORD *)v130 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v130, v64);
            }
            else
            {
              v130[6] -= 2;
            }
          }
          v112 = (uint64_t)v415;
          if ((v129 & 0x80000000) == 0)
          {
LABEL_516:
            v128 = 3;
            goto LABEL_619;
          }
LABEL_606:
          if (v413)
            *((_DWORD *)v413 + 6) += 2;
          v149 = v425;
          v425 = v413;
          if (v149)
          {
            if (*((_DWORD *)v149 + 6) == 2)
            {
              if ((*((_WORD *)v149 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v149, v64);
            }
            else
            {
              *((_DWORD *)v149 + 6) -= 2;
            }
          }
          v426 = (int)v428;
          v427 = BYTE4(v428);
          if (v110)
            *((_DWORD *)v110 + 6) += 2;
          v150 = v422;
          v422 = v110;
          if (v150)
          {
            if (*((_DWORD *)v150 + 6) == 2)
            {
              if ((*((_WORD *)v150 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v150, v64);
            }
            else
            {
              *((_DWORD *)v150 + 6) -= 2;
            }
          }
          v128 = 0;
          v423 = (int)v420[0];
          v424 = BYTE4(v420[0]);
          if (v114)
            goto LABEL_617;
          goto LABEL_619;
        }
      }
      else if (!v114)
      {
        goto LABEL_606;
      }
      if (v113)
      {
        WebCore::positionInParentBeforeNode((WebCore *)v114, (WebCore::Node *)v64, (uint64_t)&v446);
        v131 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v425, (uint64_t)&v446);
        v132 = v446;
        v446 = 0;
        if (v132)
        {
          if (v132[6] == 2)
          {
            if ((*((_WORD *)v132 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v132, v64);
          }
          else
          {
            v132[6] -= 2;
          }
        }
        v112 = (uint64_t)v415;
        if ((v131 & 0x80000000) == 0)
        {
          v128 = 3;
          goto LABEL_617;
        }
      }
      if (v112)
      {
        v133 = *(_WORD *)(v114 + 28);
        if ((v133 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v112 + 40) == v114
            && (*(_WORD *)(v112 + 28) & 0xF000) != 0x9000
            && (*(_BYTE *)(v112 + 22) & 8) != 0)
          {
            goto LABEL_536;
          }
        }
        else if ((v133 & 4) != 0
               && *(_QWORD *)(v114 + 80)
               && ((*(unsigned __int8 *)(v112 + 22) ^ *(unsigned __int8 *)(v114 + 22)) & 8) == 0)
        {
          v134 = v112;
          do
            v134 = *(_QWORD *)(v134 + 32);
          while (v134 != v114 && v134 != 0);
          if (v134)
          {
LABEL_536:
            if (v413)
              *((_DWORD *)v413 + 6) += 2;
            v136 = v425;
            v425 = v413;
            if (v136)
            {
              if (*((_DWORD *)v136 + 6) == 2)
              {
                if ((*((_WORD *)v136 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v136, v64);
              }
              else
              {
                *((_DWORD *)v136 + 6) -= 2;
              }
            }
            v128 = 0;
            v137 = &v426;
            v426 = (int)v428;
            v138 = BYTE4(v428);
            goto LABEL_600;
          }
        }
      }
      if ((v113 & 1) != 0)
        goto LABEL_606;
      v145 = *(_WORD *)(v112 + 28);
      if ((v145 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v114 + 40) != v112
          || (*(_WORD *)(v114 + 28) & 0xF000) == 0x9000
          || (*(_BYTE *)(v114 + 22) & 8) == 0)
        {
          goto LABEL_606;
        }
      }
      else
      {
        if ((v145 & 4) == 0
          || !*(_QWORD *)(v112 + 80)
          || ((*(unsigned __int8 *)(v114 + 22) ^ *(unsigned __int8 *)(v112 + 22)) & 8) != 0)
        {
          goto LABEL_606;
        }
        v146 = v114;
        do
          v146 = *(_QWORD *)(v146 + 32);
        while (v146 != v112 && v146 != 0);
        if (!v146)
          goto LABEL_606;
      }
      if (v110)
        *((_DWORD *)v110 + 6) += 2;
      v148 = v422;
      v422 = v110;
      if (v148)
      {
        if (*((_DWORD *)v148 + 6) == 2)
        {
          if ((*((_WORD *)v148 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v148, v64);
        }
        else
        {
          *((_DWORD *)v148 + 6) -= 2;
        }
      }
      v128 = 0;
      v137 = &v423;
      v423 = (int)v420[0];
      v138 = BYTE4(v420[0]);
LABEL_600:
      *((_BYTE *)v137 + 4) = v138;
      goto LABEL_617;
    }
    v128 = 3;
    if (!v114)
      goto LABEL_619;
LABEL_617:
    if (*(_DWORD *)(v114 + 24) == 2)
    {
      if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v114, v64);
    }
    else
    {
      *(_DWORD *)(v114 + 24) -= 2;
    }
LABEL_619:
    if (v110)
    {
      if (*((_DWORD *)v110 + 6) == 2)
      {
        if ((*((_WORD *)v110 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v110, v64);
      }
      else
      {
        *((_DWORD *)v110 + 6) -= 2;
      }
    }
    if ((v113 & 1) == 0)
    {
      if (*(_DWORD *)(v112 + 24) == 2)
      {
        if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v112, v64);
      }
      else
      {
        *(_DWORD *)(v112 + 24) -= 2;
      }
    }
    if (v413)
    {
      if (*((_DWORD *)v413 + 6) == 2)
      {
        if ((*((_WORD *)v413 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v413, v64);
      }
      else
      {
        *((_DWORD *)v413 + 6) -= 2;
      }
    }
  }
  while (!v128);
  v3 = v425;
  v2 = v412;
  if (v425)
    goto LABEL_644;
LABEL_803:
  WebCore::highestEditableRoot((uint64_t)&v425, 0, (uint64_t *)&v442);
  v3 = v442;
  WebCore::firstEditablePositionAfterPositionInRoot((uint64_t)&v425, v442, (uint64_t)&v446);
  v225 = v425;
  v425 = (WebCore::Node *)v446;
  if (v225)
  {
    if (*((_DWORD *)v225 + 6) == 2)
    {
      if ((*((_WORD *)v225 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v225, v153);
    }
    else
    {
      *((_DWORD *)v225 + 6) -= 2;
    }
  }
  v426 = v447;
  v427 = v448;
  if (v3)
  {
    v154 = *((_DWORD *)v3 + 6) - 2;
    if (*((_DWORD *)v3 + 6) == 2)
      goto LABEL_808;
LABEL_648:
    *((_DWORD *)v3 + 6) = v154;
  }
LABEL_649:
  v155 = v422;
  if (v422
    && (v156 = v424 & 7, v156 <= 4)
    && (((1 << v156) & 0x19) != 0 || (v155 = (WebCore::Node *)*((_QWORD *)v422 + 4)) != 0))
  {
    *((_DWORD *)v155 + 6) += 2;
    v157 = WebCore::Node::computeEditability((uint64_t)v155, 0, 0);
    v159 = *((_DWORD *)v155 + 6) - 2;
    if (!v157)
    {
      if (*((_DWORD *)v155 + 6) == 2)
      {
        if ((*((_WORD *)v155 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v155, v158);
      }
      else
      {
        *((_DWORD *)v155 + 6) = v159;
      }
      goto LABEL_812;
    }
    if (*((_DWORD *)v155 + 6) != 2)
      goto LABEL_654;
LABEL_817:
    if ((*((_WORD *)v155 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v155, v158);
  }
  else
  {
LABEL_812:
    WebCore::highestEditableRoot((uint64_t)&v425, 0, (uint64_t *)&v442);
    v155 = v442;
    WebCore::lastEditablePositionBeforePositionInRoot((uint64_t)&v422, v442, (uint64_t)&v446);
    v226 = v422;
    v422 = (WebCore::Node *)v446;
    if (v226)
    {
      if (*((_DWORD *)v226 + 6) == 2)
      {
        if ((*((_WORD *)v226 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v226, v158);
      }
      else
      {
        *((_DWORD *)v226 + 6) -= 2;
      }
    }
    v423 = v447;
    v424 = v448;
    if (v155)
    {
      v159 = *((_DWORD *)v155 + 6) - 2;
      if (*((_DWORD *)v155 + 6) == 2)
        goto LABEL_817;
LABEL_654:
      *((_DWORD *)v155 + 6) = v159;
    }
  }
  v160 = v425;
  v161 = v425 != 0;
  if (!v425)
    goto LABEL_1166;
  if (!v422)
  {
    v161 = 0;
    v425 = 0;
    goto LABEL_1170;
  }
  WebCore::Position::upstream((uint64_t)&v425, (WebCore::Node *)1, (uint64_t)&v446);
  v163 = v446;
  v446 = 0;
  v164 = *((_QWORD *)v2 + 50);
  *((_QWORD *)v2 + 50) = v163;
  if (!v164)
    goto LABEL_660;
  if (*(_DWORD *)(v164 + 24) != 2)
  {
    *(_DWORD *)(v164 + 24) -= 2;
    goto LABEL_660;
  }
  if ((*(_WORD *)(v164 + 30) & 0x400) != 0)
  {
LABEL_660:
    v165 = (char *)v2 + 408;
    *((_DWORD *)v2 + 102) = v447;
    *((_BYTE *)v2 + 412) = v448;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v164, v162);
    v251 = v446;
    v165 = (char *)v2 + 408;
    *((_DWORD *)v2 + 102) = v447;
    *((_BYTE *)v2 + 412) = v448;
    v446 = 0;
    if (v251)
    {
      if (v251[6] == 2)
      {
        if ((*((_WORD *)v251 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v251, v250);
      }
      else
      {
        v251[6] -= 2;
      }
    }
  }
  WebCore::Position::downstream((uint64_t)&v425, (WebCore::Node *)1, (uint64_t)&v446);
  v167 = v446;
  v446 = 0;
  v168 = *((_QWORD *)v2 + 52);
  *((_QWORD *)v2 + 52) = v167;
  v414 = v161;
  if (!v168)
    goto LABEL_664;
  if (*(_DWORD *)(v168 + 24) != 2)
  {
    *(_DWORD *)(v168 + 24) -= 2;
    goto LABEL_664;
  }
  if ((*(_WORD *)(v168 + 30) & 0x400) != 0)
  {
LABEL_664:
    v169 = (char *)v2 + 424;
    *((_DWORD *)v2 + 106) = v447;
    *((_BYTE *)v2 + 428) = v448;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v168, v166);
    v253 = v446;
    v169 = (char *)v2 + 424;
    *((_DWORD *)v2 + 106) = v447;
    *((_BYTE *)v2 + 428) = v448;
    v446 = 0;
    if (v253)
    {
      if (v253[6] == 2)
      {
        if ((*((_WORD *)v253 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v253, v252);
      }
      else
      {
        v253[6] -= 2;
      }
    }
  }
  WebCore::Position::upstream((uint64_t)&v422, (WebCore::Node *)1, (uint64_t)&v446);
  v171 = v446;
  v446 = 0;
  v172 = *((_QWORD *)v2 + 54);
  *((_QWORD *)v2 + 54) = v171;
  if (!v172)
    goto LABEL_668;
  if (*(_DWORD *)(v172 + 24) != 2)
  {
    *(_DWORD *)(v172 + 24) -= 2;
    goto LABEL_668;
  }
  if ((*(_WORD *)(v172 + 30) & 0x400) != 0)
  {
LABEL_668:
    v173 = (char *)v2 + 440;
    *((_DWORD *)v2 + 110) = v447;
    *((_BYTE *)v2 + 444) = v448;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v172, v170);
    v255 = v446;
    v173 = (char *)v2 + 440;
    *((_DWORD *)v2 + 110) = v447;
    *((_BYTE *)v2 + 444) = v448;
    v446 = 0;
    if (v255)
    {
      if (v255[6] == 2)
      {
        if ((*((_WORD *)v255 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v255, v254);
      }
      else
      {
        v255[6] -= 2;
      }
    }
  }
  WebCore::Position::downstream((uint64_t)&v422, (WebCore::Node *)1, (uint64_t)&v446);
  v175 = v446;
  v446 = 0;
  v176 = *((_QWORD *)v2 + 56);
  *((_QWORD *)v2 + 56) = v175;
  if (!v176)
    goto LABEL_672;
  if (*(_DWORD *)(v176 + 24) != 2)
  {
    *(_DWORD *)(v176 + 24) -= 2;
    goto LABEL_672;
  }
  if ((*(_WORD *)(v176 + 30) & 0x400) != 0)
  {
LABEL_672:
    v177 = (char *)v2 + 456;
    *((_DWORD *)v2 + 114) = v447;
    *((_BYTE *)v2 + 460) = v448;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v176, v174);
    v256 = v446;
    v177 = (char *)v2 + 456;
    *((_DWORD *)v2 + 114) = v447;
    *((_BYTE *)v2 + 460) = v448;
    v446 = 0;
    if (v256)
    {
      if (v256[6] == 2)
      {
        if ((*((_WORD *)v256 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v256, v174);
      }
      else
      {
        v256[6] -= 2;
      }
    }
  }
  v178 = v425;
  if (v425
    && (v179 = v427 & 7, v179 <= 4)
    && (((1 << v179) & 0x19) != 0 || (v178 = (WebCore::Node *)*((_QWORD *)v425 + 4)) != 0))
  {
    v180 = 0;
    *((_DWORD *)v178 + 6) += 2;
    v181 = (uint64_t)v178;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v181, 0))
        break;
      if ((*(_WORD *)(v181 + 28) & 8) != 0)
        v180 = v181;
      jj = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v178 + 5) + 8) + 1272);
      if (jj)
      {
        if ((*(_WORD *)(jj + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(jj + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (jj = *(_QWORD *)(jj + 80); jj; jj = *(_QWORD *)(jj + 56))
          {
            if ((*(_WORD *)(jj + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(jj + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          jj = 0;
        }
      }
      if (jj == v181)
        break;
      v181 = *(_QWORD *)(v181 + 32);
    }
    while (v181);
    if (*((_DWORD *)v178 + 6) == 2)
    {
      if ((*((_WORD *)v178 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v178, v174);
    }
    else
    {
      *((_DWORD *)v178 + 6) -= 2;
    }
    if (v180)
      *(_DWORD *)(v180 + 24) += 2;
  }
  else
  {
    v180 = 0;
  }
  v183 = *((_QWORD *)v412 + 68);
  *((_QWORD *)v412 + 68) = v180;
  if (v183)
  {
    if (*(_DWORD *)(v183 + 24) == 2)
    {
      if ((*(_WORD *)(v183 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v183, v174);
    }
    else
    {
      *(_DWORD *)(v183 + 24) -= 2;
    }
  }
  v184 = v422;
  if (v422
    && (v185 = v424 & 7, v185 <= 4)
    && (((1 << v185) & 0x19) != 0 || (v184 = (WebCore::Node *)*((_QWORD *)v422 + 4)) != 0))
  {
    v186 = 0;
    *((_DWORD *)v184 + 6) += 2;
    v187 = (uint64_t)v184;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v187, 0))
        break;
      if ((*(_WORD *)(v187 + 28) & 8) != 0)
        v186 = v187;
      kk = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v184 + 5) + 8) + 1272);
      if (kk)
      {
        if ((*(_WORD *)(kk + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(kk + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (kk = *(_QWORD *)(kk + 80); kk; kk = *(_QWORD *)(kk + 56))
          {
            if ((*(_WORD *)(kk + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(kk + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          kk = 0;
        }
      }
      if (kk == v187)
        break;
      v187 = *(_QWORD *)(v187 + 32);
    }
    while (v187);
    if (*((_DWORD *)v184 + 6) == 2)
    {
      if ((*((_WORD *)v184 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v184, v174);
    }
    else
    {
      *((_DWORD *)v184 + 6) -= 2;
    }
    if (v186)
      *(_DWORD *)(v186 + 24) += 2;
  }
  else
  {
    v186 = 0;
  }
  v189 = *((_QWORD *)v412 + 69);
  *((_QWORD *)v412 + 69) = v186;
  if (v189)
  {
    if (*(_DWORD *)(v189 + 24) == 2)
    {
      if ((*(_WORD *)(v189 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
    }
    else
    {
      *(_DWORD *)(v189 + 24) -= 2;
    }
  }
  WebCore::enclosingNodeOfType(&v446, (uint64_t *)&v425, 1);
  v191 = *((_QWORD *)v412 + 70);
  *((_QWORD *)v412 + 70) = v446;
  if (v191)
  {
    if (*(_DWORD *)(v191 + 24) == 2)
    {
      if ((*(_WORD *)(v191 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v191, v190);
    }
    else
    {
      *(_DWORD *)(v191 + 24) -= 2;
    }
  }
  v192 = (unsigned int *)((char *)v412 + 400);
  WebCore::enclosingNodeOfType(&v446, (uint64_t *)&v422, 1);
  v194 = *((_QWORD *)v412 + 71);
  *((_QWORD *)v412 + 71) = v446;
  if (v194)
  {
    if (*(_DWORD *)(v194 + 24) == 2)
    {
      if ((*(_WORD *)(v194 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v194, v193);
    }
    else
    {
      *(_DWORD *)(v194 + 24) -= 2;
    }
  }
  v195 = (WebCore::DeleteSelectionCommand *)((char *)v412 + 448);
  v196 = *(_QWORD *)v192;
  if (*(_QWORD *)v192)
  {
    *(_DWORD *)(v196 + 24) += 2;
    do
    {
      v197 = v196;
      if ((*(_QWORD *)(v196 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_BYTE *)((*(_QWORD *)(v196 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
          goto LABEL_747;
      }
      else if ((*(_WORD *)(v196 + 28) & 0x10) != 0)
      {
        v198 = *(_QWORD *)(*(_QWORD *)(v196 + 96) + 24);
        if (v198 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v198 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
          goto LABEL_747;
      }
      v196 = *(_QWORD *)(v196 + 32);
      if (v196)
        *(_DWORD *)(v196 + 24) += 2;
      if (*(_DWORD *)(v197 + 24) == 2)
      {
        if ((*(_WORD *)(v197 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v197, v193);
      }
      else
      {
        *(_DWORD *)(v197 + 24) -= 2;
      }
    }
    while (v196);
  }
  v197 = 0;
LABEL_747:
  v199 = *(_QWORD *)v195;
  if (!*(_QWORD *)v195)
  {
LABEL_764:
    v202 = 0;
    v203 = v412;
    goto LABEL_765;
  }
  *(_DWORD *)(v199 + 24) += 2;
  while (2)
  {
    v200 = v199;
    if ((*(_QWORD *)(v199 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_BYTE *)((*(_QWORD *)(v199 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
        break;
      goto LABEL_751;
    }
    if ((*(_WORD *)(v199 + 28) & 0x10) == 0
      || (v201 = *(_QWORD *)(*(_QWORD *)(v199 + 96) + 24), v201 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
      && v201 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    {
LABEL_751:
      v199 = *(_QWORD *)(v199 + 32);
      if (v199)
        *(_DWORD *)(v199 + 24) += 2;
      if (*(_DWORD *)(v200 + 24) == 2)
      {
        if ((*(_WORD *)(v200 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v200, v193);
      }
      else
      {
        *(_DWORD *)(v200 + 24) -= 2;
      }
      if (!v199)
        goto LABEL_764;
      continue;
    }
    break;
  }
  v202 = v197;
  v203 = v412;
  if (v199 != v197)
  {
    *((_BYTE *)v412 + 282) = 0;
    v202 = v199;
  }
LABEL_765:
  WebCore::VisiblePosition::canonicalPosition(v195, (uint64_t)v420);
  v421 = 1;
  if (!*((_BYTE *)v203 + 282))
    goto LABEL_773;
  v205 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v420[0])
    v205 = 0;
  if (!v205)
    goto LABEL_779;
  WebCore::endOfParagraph((WebCore::Node *)v420, 1, &v446);
  v206 = WebCore::operator==((uint64_t *)v420, (uint64_t *)&v446);
  v207 = v446;
  v446 = 0;
  if (v207)
  {
    if (v207[6] == 2)
    {
      if ((*((_WORD *)v207 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v207, v204);
    }
    else
    {
      v207[6] -= 2;
    }
  }
  if (v206)
  {
LABEL_773:
    v208 = *((_QWORD *)v203 + 52);
    if (v208)
      *(_DWORD *)(v208 + 24) += 2;
    v209 = *((_QWORD *)v203 + 58);
    *((_QWORD *)v203 + 58) = v208;
    v210 = v169;
    if (v209)
    {
      if (*(_DWORD *)(v209 + 24) != 2)
      {
        *(_DWORD *)(v209 + 24) -= 2;
        goto LABEL_778;
      }
      v210 = v169;
      if ((*(_WORD *)(v209 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v209, v204);
LABEL_778:
        v210 = v169;
      }
    }
  }
  else
  {
LABEL_779:
    v211 = *((_QWORD *)v203 + 56);
    if (v211)
      *(_DWORD *)(v211 + 24) += 2;
    v212 = *((_QWORD *)v203 + 58);
    *((_QWORD *)v203 + 58) = v211;
    v210 = v177;
    if (v212)
    {
      if (*(_DWORD *)(v212 + 24) == 2)
      {
        v210 = v177;
        if ((*(_WORD *)(v212 + 30) & 0x400) != 0)
          goto LABEL_785;
        WebCore::Node::removedLastRef((WebCore::Node *)v212, v204);
      }
      else
      {
        *(_DWORD *)(v212 + 24) -= 2;
      }
      v210 = v177;
    }
  }
LABEL_785:
  v213 = *(_DWORD *)v210;
  *((_BYTE *)v203 + 476) = v210[4];
  *((_DWORD *)v203 + 118) = v213;
  v214 = WebCore::numEnclosingMailBlockquotes((WebCore *)&v425, (const WebCore::Position *)v204);
  if (v214 != WebCore::numEnclosingMailBlockquotes((WebCore *)&v422, v215))
  {
    v216 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v420[0])
      v216 = 0;
    if (v216)
    {
      WebCore::startOfParagraph((uint64_t)v420, 1, &v446);
      v218 = WebCore::operator==((uint64_t *)v420, (uint64_t *)&v446);
      v219 = v446;
      v446 = 0;
      if (v219)
      {
        if (v219[6] == 2)
        {
          if ((*((_WORD *)v219 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v219, v217);
        }
        else
        {
          v219[6] -= 2;
        }
      }
      if (v218)
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v425, (uint64_t)&v442);
        v445 = 1;
        v221 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v442)
          v221 = 0;
        if (!v221)
          goto LABEL_819;
        WebCore::startOfParagraph((uint64_t)&v442, 1, &v446);
        v222 = WebCore::operator==((uint64_t *)&v442, (uint64_t *)&v446);
        v223 = v446;
        v446 = 0;
        if (v223)
        {
          if (v223[6] == 2)
          {
            if ((*((_WORD *)v223 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v223, v220);
          }
          else
          {
            v223[6] -= 2;
          }
        }
        if (v222)
          v224 = *((unsigned __int8 *)v412 + 225) == 2;
        else
LABEL_819:
          v224 = 0;
        v227 = v442;
        v442 = 0;
        if (v227)
        {
          if (*((_DWORD *)v227 + 6) == 2)
          {
            if ((*((_WORD *)v227 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v227, v220);
          }
          else
          {
            *((_DWORD *)v227 + 6) -= 2;
          }
        }
        if (v224)
        {
          *((_BYTE *)v412 + 282) = 0;
          *((_BYTE *)v412 + 286) = 1;
        }
      }
    }
  }
  WebCore::Position::leadingWhitespacePosition(v192, *((_BYTE *)v412 + 392), 0, (uint64_t)&v446);
  v229 = v446;
  v446 = 0;
  v230 = *((_QWORD *)v412 + 60);
  *((_QWORD *)v412 + 60) = v229;
  v409 = v177;
  if (!v230)
    goto LABEL_828;
  if (*(_DWORD *)(v230 + 24) != 2)
  {
    *(_DWORD *)(v230 + 24) -= 2;
    goto LABEL_828;
  }
  if ((*(_WORD *)(v230 + 30) & 0x400) != 0)
  {
LABEL_828:
    v231 = v412;
    v232 = (char *)v412 + 488;
    *((_DWORD *)v412 + 122) = v447;
    *((_BYTE *)v412 + 492) = v448;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v230, v228);
    v258 = v446;
    v232 = (char *)v412 + 488;
    *((_DWORD *)v412 + 122) = v447;
    *((_BYTE *)v412 + 492) = v448;
    v446 = 0;
    if (v258)
    {
      if (v258[6] == 2)
      {
        if ((*((_WORD *)v258 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v258, v257);
      }
      else
      {
        v258[6] -= 2;
      }
    }
    v231 = v412;
  }
  WebCore::Position::trailingWhitespacePosition((unsigned int *)v195, 0, (uint64_t)&v446);
  v234 = *((_QWORD *)v231 + 62);
  *((_QWORD *)v231 + 62) = v446;
  if (v234)
  {
    if (*(_DWORD *)(v234 + 24) == 2)
    {
      if ((*(_WORD *)(v234 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v234, v233);
    }
    else
    {
      *(_DWORD *)(v234 + 24) -= 2;
    }
  }
  v235 = (WebCore::Node **)((char *)v412 + 416);
  v416 = (WebCore::DeleteSelectionCommand *)((char *)v412 + 432);
  *((_DWORD *)v412 + 126) = v447;
  *((_BYTE *)v412 + 508) = v448;
  if (!*((_BYTE *)v412 + 281))
    goto LABEL_1120;
  v407 = v169;
  v236 = v202;
  v411 = (WebCore::DeleteSelectionCommand *)((char *)v412 + 416);
  v237 = *((unsigned __int8 *)v412 + 392);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v192, (uint64_t)&v442);
  v445 = 1;
  if (v237)
    goto LABEL_834;
  v240 = v165;
  v400 = (unsigned int *)v442;
  if (!v442)
    goto LABEL_1377;
  *((_DWORD *)v442 + 6) += 2;
  v446 = v400;
  v447 = v443;
  v448 = v444;
  v449 = 0;
  if (!WebCore::inSameLine((WebCore *)&v442, (const WebCore::VisiblePosition *)&v446, v239))
    v445 = 0;
  v401 = v446;
  v446 = 0;
  if (v401)
  {
    if (v401[6] == 2)
    {
      if ((*((_WORD *)v401 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v401, v238);
    }
    else
    {
      v401[6] -= 2;
    }
  }
LABEL_834:
  v240 = v165;
  v241 = v442;
  if (!v442)
  {
LABEL_1377:
    v417 = 0;
    v418 = v443;
    v419 = v444;
    goto LABEL_899;
  }
  v242 = *((_DWORD *)v442 + 6);
  *((_DWORD *)v442 + 6) = v242 + 2;
  v417 = v241;
  v418 = v443;
  v419 = v444;
  v442 = 0;
  if (v242)
  {
    *((_DWORD *)v241 + 6) = v242;
    goto LABEL_837;
  }
  if ((*((_WORD *)v241 + 15) & 0x400) != 0 || (WebCore::Node::removedLastRef(v241, v238), (v241 = v417) != 0))
  {
LABEL_837:
    v243 = v419 & 7;
    if (v243 > 4)
      goto LABEL_899;
    if (((1 << v243) & 0x19) == 0)
    {
      v241 = (WebCore::Node *)*((_QWORD *)v241 + 4);
      if (!v241)
        goto LABEL_899;
    }
    *((_DWORD *)v241 + 6) += 2;
    v244 = WebCore::Node::computeEditability((uint64_t)v241, 0, 0);
    v246 = *((_DWORD *)v241 + 6) - 2;
    if (!v244)
    {
      if (*((_DWORD *)v241 + 6) == 2)
      {
        if ((*((_WORD *)v241 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v241, v245);
      }
      else
      {
        *((_DWORD *)v241 + 6) = v246;
      }
      goto LABEL_899;
    }
    if (*((_DWORD *)v241 + 6) == 2)
    {
      if ((*((_WORD *)v241 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v241, v245);
    }
    else
    {
      *((_DWORD *)v241 + 6) = v246;
    }
    WebCore::Position::trailingWhitespacePosition((unsigned int *)&v417, 1, (uint64_t)&v446);
    if (v446)
      v248 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v248 = 0;
    if (v446)
    {
      if (v446[6] == 2)
      {
        if ((*((_WORD *)v446 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v446, v247);
      }
      else
      {
        v446[6] -= 2;
      }
    }
    if (!v248)
      goto LABEL_899;
    v249 = 1;
  }
  else
  {
LABEL_899:
    WebCore::Position::leadingWhitespacePosition((unsigned int *)v195, 1, 1, (uint64_t)&v446);
    v260 = v446;
    v261 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v446)
      v261 = 0;
    v249 = v261 != 0;
    v446 = 0;
    if (v260)
    {
      if (v260[6] == 2)
      {
        if ((*((_WORD *)v260 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v260, v259);
      }
      else
      {
        v260[6] -= 2;
      }
    }
  }
  WebCore::Position::leadingWhitespacePosition(v192, *((_BYTE *)v412 + 392), 1, (uint64_t)&v446);
  v263 = v446;
  if (v446)
    v264 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v264 = 0;
  v446 = 0;
  if (v263)
  {
    if (v263[6] == 2)
    {
      if ((*((_WORD *)v263 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v263, v262);
    }
    else
    {
      v263[6] -= 2;
    }
  }
  v406 = (WebCore::DeleteSelectionCommand *)((char *)v412 + 504);
  if (v264)
    v265 = v249;
  else
    v265 = 1;
  if ((v265 & 1) == 0)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v192, (uint64_t)&v442);
    v445 = 1;
    WebCore::previousVisuallyDistinctCandidate(&v442, (uint64_t)&v438);
    v235 = (WebCore::Node **)((char *)v412 + 416);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v438))
    {
      v282 = 0;
      BYTE4(v435) = 0;
      LODWORD(v435) = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v438, (uint64_t)&v446);
      v282 = v446;
      LODWORD(v435) = v447;
      BYTE4(v435) = v448;
    }
    if (v438)
    {
      if (*((_DWORD *)v438 + 6) == 2)
      {
        if ((*((_WORD *)v438 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v438, v281);
      }
      else
      {
        *((_DWORD *)v438 + 6) -= 2;
      }
    }
    if (v442)
    {
      if (*((_DWORD *)v442 + 6) == 2)
      {
        if ((*((_WORD *)v442 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v442, v281);
      }
      else
      {
        *((_DWORD *)v442 + 6) -= 2;
      }
    }
    if (v282)
      v282[6] += 2;
    v283 = v417;
    v417 = (WebCore::Node *)v282;
    if (v283)
    {
      if (*((_DWORD *)v283 + 6) == 2)
      {
        if ((*((_WORD *)v283 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v283, v281);
      }
      else
      {
        *((_DWORD *)v283 + 6) -= 2;
      }
    }
    v419 = BYTE4(v435);
    v418 = (int)v435;
    WebCore::Position::upstream((uint64_t)&v417, (WebCore::Node *)1, (uint64_t)&v446);
    v285 = v446;
    v446 = 0;
    v286 = *(_QWORD *)v192;
    *(_QWORD *)v192 = v285;
    if (v286)
    {
      if (*(_DWORD *)(v286 + 24) == 2)
      {
        if ((*(_WORD *)(v286 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v286, v284);
          v379 = v446;
          *(_DWORD *)v240 = v447;
          v240[4] = v448;
          v446 = 0;
          v202 = v236;
          v287 = v407;
          if (v379)
          {
            if (v379[6] == 2)
            {
              if ((*((_WORD *)v379 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v379, v378);
            }
            else
            {
              v379[6] -= 2;
            }
          }
LABEL_967:
          WebCore::Position::downstream((uint64_t)&v417, (WebCore::Node *)1, (uint64_t)&v446);
          v289 = v446;
          v446 = 0;
          v290 = *(_QWORD *)v411;
          *(_QWORD *)v411 = v289;
          if (v290)
          {
            if (*(_DWORD *)(v290 + 24) == 2)
            {
              if ((*(_WORD *)(v290 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v290, v288);
                v381 = v446;
                *(_DWORD *)v287 = v447;
                v287[4] = v448;
                v446 = 0;
                if (v381)
                {
                  if (v381[6] == 2)
                  {
                    if ((*((_WORD *)v381 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v381, v380);
                  }
                  else
                  {
                    v381[6] -= 2;
                  }
                }
LABEL_971:
                WebCore::Position::leadingWhitespacePosition(v192, 1, 0, (uint64_t)&v446);
                v292 = v446;
                v446 = 0;
                v293 = *((_QWORD *)v412 + 60);
                *((_QWORD *)v412 + 60) = v292;
                if (v293)
                {
                  if (*(_DWORD *)(v293 + 24) == 2)
                  {
                    if ((*(_WORD *)(v293 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v293, v291);
                      v383 = v446;
                      *(_DWORD *)v232 = v447;
                      v232[4] = v448;
                      v446 = 0;
                      v294 = v412;
                      if (v383)
                      {
                        if (v383[6] == 2)
                        {
                          if ((*((_WORD *)v383 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v383, v382);
                        }
                        else
                        {
                          v383[6] -= 2;
                        }
                      }
                      goto LABEL_975;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v293 + 24) -= 2;
                  }
                }
                *(_DWORD *)v232 = v447;
                v232[4] = v448;
                v294 = v412;
LABEL_975:
                WebCore::DeleteSelectionCommand::setStartingSelectionOnSmartDelete(v294, (const WebCore::Position *)v192, v416);
                if (v282)
                {
                  if (v282[6] == 2)
                  {
                    if ((*((_WORD *)v282 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v282, v262);
                  }
                  else
                  {
                    v282[6] -= 2;
                  }
                }
                goto LABEL_978;
              }
            }
            else
            {
              *(_DWORD *)(v290 + 24) -= 2;
            }
          }
          *(_DWORD *)v287 = v447;
          v287[4] = v448;
          goto LABEL_971;
        }
      }
      else
      {
        *(_DWORD *)(v286 + 24) -= 2;
      }
    }
    *(_DWORD *)v240 = v447;
    v240[4] = v448;
    v202 = v236;
    v287 = v407;
    goto LABEL_967;
  }
  if (v264)
    v266 = 1;
  else
    v266 = v249;
  v235 = (WebCore::Node **)((char *)v412 + 416);
  v202 = v236;
  if ((v266 & 1) == 0)
  {
    WebCore::Position::trailingWhitespacePosition((unsigned int *)v195, 1, (uint64_t)&v446);
    if (v446)
      v267 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v267 = 0;
    if (v446)
    {
      if (v446[6] == 2)
      {
        if ((*((_WORD *)v446 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v446, v262);
      }
      else
      {
        v446[6] -= 2;
      }
    }
    if (v267)
    {
      WebCore::VisiblePosition::canonicalPosition(v195, (uint64_t)&v442);
      v445 = 1;
      WebCore::VisiblePosition::next((unsigned __int8 *)&v442, 0, 0, (uint64_t)&v446);
      v269 = v446;
      if (v446)
        v446[6] += 2;
      LODWORD(v438) = v447;
      BYTE4(v438) = v448;
      v270 = v417;
      v417 = (WebCore::Node *)v269;
      if (v270)
      {
        if (*((_DWORD *)v270 + 6) != 2)
        {
          *((_DWORD *)v270 + 6) -= 2;
          goto LABEL_930;
        }
        v271 = v412;
        if ((*((_WORD *)v270 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v270, v268);
          v269 = v446;
        }
      }
      else
      {
LABEL_930:
        v271 = v412;
      }
      v419 = BYTE4(v438);
      v418 = (int)v438;
      v446 = 0;
      if (v269)
      {
        if (v269[6] == 2)
        {
          if ((*((_WORD *)v269 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v269, v268);
        }
        else
        {
          v269[6] -= 2;
        }
      }
      v272 = v442;
      v442 = 0;
      if (v272)
      {
        if (*((_DWORD *)v272 + 6) == 2)
        {
          if ((*((_WORD *)v272 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v272, v268);
        }
        else
        {
          *((_DWORD *)v272 + 6) -= 2;
        }
      }
      WebCore::Position::upstream((uint64_t)&v417, (WebCore::Node *)1, (uint64_t)&v446);
      v274 = v446;
      v446 = 0;
      v275 = *(_QWORD *)v416;
      *(_QWORD *)v416 = v274;
      if (!v275)
        goto LABEL_940;
      if (*(_DWORD *)(v275 + 24) != 2)
      {
        *(_DWORD *)(v275 + 24) -= 2;
        goto LABEL_940;
      }
      if ((*(_WORD *)(v275 + 30) & 0x400) != 0)
      {
LABEL_940:
        *(_DWORD *)v173 = v447;
        v173[4] = v448;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v275, v273);
        v397 = v446;
        *(_DWORD *)v173 = v447;
        v173[4] = v448;
        v446 = 0;
        if (v397)
        {
          if (v397[6] == 2)
          {
            if ((*((_WORD *)v397 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v397, v396);
          }
          else
          {
            v397[6] -= 2;
          }
        }
      }
      WebCore::Position::downstream((uint64_t)&v417, (WebCore::Node *)1, (uint64_t)&v446);
      v277 = v446;
      v446 = 0;
      v278 = *(_QWORD *)v195;
      *(_QWORD *)v195 = v277;
      if (!v278)
        goto LABEL_944;
      if (*(_DWORD *)(v278 + 24) != 2)
      {
        *(_DWORD *)(v278 + 24) -= 2;
        goto LABEL_944;
      }
      if ((*(_WORD *)(v278 + 30) & 0x400) != 0)
      {
LABEL_944:
        *(_DWORD *)v409 = v447;
        v409[4] = v448;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v278, v276);
        v399 = v446;
        *(_DWORD *)v409 = v447;
        v409[4] = v448;
        v446 = 0;
        if (v399)
        {
          if (v399[6] == 2)
          {
            if ((*((_WORD *)v399 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v399, v398);
          }
          else
          {
            v399[6] -= 2;
          }
        }
      }
      WebCore::Position::trailingWhitespacePosition((unsigned int *)v195, 0, (uint64_t)&v446);
      v280 = *((_QWORD *)v271 + 62);
      *((_QWORD *)v271 + 62) = v446;
      if (v280)
      {
        if (*(_DWORD *)(v280 + 24) == 2)
        {
          if ((*(_WORD *)(v280 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v280, v279);
        }
        else
        {
          *(_DWORD *)(v280 + 24) -= 2;
        }
      }
      *(_DWORD *)v406 = v447;
      *((_BYTE *)v412 + 508) = v448;
      WebCore::DeleteSelectionCommand::setStartingSelectionOnSmartDelete(v271, v411, v195);
    }
  }
LABEL_978:
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v412 + 2) + 680) + 370) != 3)
    goto LABEL_1117;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v192, (uint64_t)&v442);
  v445 = 1;
  WebCore::VisiblePosition::canonicalPosition(v195, (uint64_t)&v438);
  v441 = 1;
  v295 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v438)
    v295 = 0;
  if (v295)
  {
    WebCore::endOfParagraph((WebCore::Node *)&v438, 1, &v446);
    v297 = WebCore::operator==((uint64_t *)&v438, (uint64_t *)&v446);
    v298 = v446;
    v446 = 0;
    if (v298)
    {
      if (v298[6] == 2)
      {
        if ((*((_WORD *)v298 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v298, v296);
      }
      else
      {
        v298[6] -= 2;
      }
    }
  }
  else
  {
    v297 = 0;
  }
  WebCore::endOfEditableContent((WebCore *)&v438, (uint64_t)&v446);
  v300 = WebCore::operator==((uint64_t *)&v446, (uint64_t *)&v438);
  v301 = v446;
  v446 = 0;
  if (v301)
  {
    if (v301[6] == 2)
    {
      if ((*((_WORD *)v301 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v301, v299);
    }
    else
    {
      v301[6] -= 2;
    }
  }
  v408 = v202;
  v302 = v300;
  v303 = v442;
  if (v442)
    *((_DWORD *)v442 + 6) += 2;
  v446 = (unsigned int *)v303;
  v447 = v443;
  v448 = v444;
  v305 = WebCore::unsplittableElementForPosition((WebCore *)&v446, (const WebCore::Position *)v299);
  v306 = v438;
  if (v438)
    *((_DWORD *)v438 + 6) += 2;
  v435 = v306;
  LODWORD(v436) = v439;
  BYTE4(v436) = v440;
  v410 = WebCore::unsplittableElementForPosition((WebCore *)&v435, v304);
  if (v306)
  {
    if (*((_DWORD *)v306 + 6) == 2)
    {
      if ((*((_WORD *)v306 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v306, v307);
    }
    else
    {
      *((_DWORD *)v306 + 6) -= 2;
    }
  }
  v308 = v300;
  if (v303)
  {
    if (*((_DWORD *)v303 + 6) == 2)
    {
      if ((*((_WORD *)v303 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v303, v307);
    }
    else
    {
      *((_DWORD *)v303 + 6) -= 2;
    }
  }
  WebCore::VisiblePosition::previous(&v442, 1, 0, (uint64_t)&v446);
  v310 = (WebCore::Node *)v446;
  v446 = 0;
  v311 = v442;
  v442 = v310;
  v235 = (WebCore::Node **)((char *)v412 + 416);
  if (v311)
  {
    if (*((_DWORD *)v311 + 6) == 2)
    {
      if ((*((_WORD *)v311 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v311, v309);
    }
    else
    {
      *((_DWORD *)v311 + 6) -= 2;
    }
  }
  v443 = v447;
  v444 = v448;
  v445 = v449;
  WebCore::VisiblePosition::next((unsigned __int8 *)&v438, 1, 0, (uint64_t)&v446);
  v313 = (WebCore::Node *)v446;
  v446 = 0;
  v314 = v438;
  v438 = v313;
  if (!v314)
    goto LABEL_1005;
  if (*((_DWORD *)v314 + 6) != 2)
  {
    *((_DWORD *)v314 + 6) -= 2;
    goto LABEL_1005;
  }
  if ((*((_WORD *)v314 + 15) & 0x400) != 0)
  {
LABEL_1005:
    v439 = v447;
    v440 = v448;
    v441 = v449;
    v315 = v305;
  }
  else
  {
    WebCore::Node::removedLastRef(v314, v312);
    v385 = v446;
    v439 = v447;
    v440 = v448;
    v441 = v449;
    v446 = 0;
    v315 = v305;
    if (v385)
    {
      if (v385[6] == 2)
      {
        if ((*((_WORD *)v385 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v385, v384);
      }
      else
      {
        v385[6] -= 2;
      }
    }
  }
  WebCore::startOfEditableContent((WebCore *)&v442, (uint64_t)&v446);
  v404 = WebCore::operator==((uint64_t *)&v446, (uint64_t *)&v442);
  v317 = v446;
  v446 = 0;
  if (v317)
  {
    if (v317[6] == 2)
    {
      if ((*((_WORD *)v317 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v317, v316);
    }
    else
    {
      v317[6] -= 2;
    }
  }
  isBlankParagraph = WebCore::isBlankParagraph((WebCore *)&v442, (const WebCore::VisiblePosition *)v316);
  v320 = WebCore::isBlankParagraph((WebCore *)&v438, v319);
  v321 = !isBlankParagraph;
  v322 = v315 != v410 || !isBlankParagraph;
  if (((v322 | v302) & 1) == 0 && (v320 || v297))
  {
    v403 = !isBlankParagraph;
    *((_BYTE *)v412 + 283) = 0;
    v428 = 0;
    v429 = 0;
    v430 &= 0xF0u;
    if (v320)
    {
      WebCore::VisiblePosition::canonicalPosition(v195, (uint64_t)&v432);
      LOBYTE(v434) = 1;
      WebCore::startOfNextParagraph((WebCore *)&v432, (uint64_t)&v435);
      WebCore::startOfNextParagraph((WebCore *)&v435, (uint64_t)&v446);
      v324 = v446;
      if (v446)
        v446[6] += 2;
      v325 = v428;
      v428 = (WebCore::Node *)v324;
      if (v325)
      {
        if (*((_DWORD *)v325 + 6) == 2)
        {
          if ((*((_WORD *)v325 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v325, v323);
        }
        else
        {
          *((_DWORD *)v325 + 6) -= 2;
        }
      }
      v429 = v447;
      v430 = v448;
      v308 = v302;
      v315 = v305;
      if (v324)
      {
        if (v324[6] == 2)
        {
          if ((*((_WORD *)v324 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v324, v323);
        }
        else
        {
          v324[6] -= 2;
        }
      }
      if (v435)
      {
        if (*((_DWORD *)v435 + 6) == 2)
        {
          if ((*((_WORD *)v435 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v435, v323);
        }
        else
        {
          *((_DWORD *)v435 + 6) -= 2;
        }
      }
      v326 = v432;
      if (!v432)
        goto LABEL_1039;
LABEL_1037:
      if (*((_DWORD *)v326 + 6) == 2)
      {
        if ((*((_WORD *)v326 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v326, v323);
      }
      else
      {
        *((_DWORD *)v326 + 6) -= 2;
      }
      goto LABEL_1039;
    }
    WebCore::VisiblePosition::canonicalPosition(v195, (uint64_t)&v435);
    LOBYTE(v437) = 1;
    WebCore::VisiblePosition::next((unsigned __int8 *)&v435, 0, 0, (uint64_t)&v446);
    v327 = v446;
    if (v446)
      v446[6] += 2;
    LODWORD(v432) = v447;
    BYTE4(v432) = v448;
    v328 = v428;
    v428 = (WebCore::Node *)v327;
    if (v328)
    {
      if (*((_DWORD *)v328 + 6) == 2)
      {
        if ((*((_WORD *)v328 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v328, v323);
          v327 = v446;
        }
      }
      else
      {
        *((_DWORD *)v328 + 6) -= 2;
      }
    }
    v429 = (int)v432;
    v430 = BYTE4(v432);
    v446 = 0;
    v308 = v302;
    if (v327)
    {
      if (v327[6] == 2)
      {
        if ((*((_WORD *)v327 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v327, v323);
      }
      else
      {
        v327[6] -= 2;
      }
    }
    v326 = v435;
    v435 = 0;
    if (v326)
      goto LABEL_1037;
LABEL_1039:
    WebCore::Position::upstream((uint64_t)&v428, (WebCore::Node *)1, (uint64_t)&v446);
    v330 = v446;
    v446 = 0;
    v331 = *(_QWORD *)v416;
    *(_QWORD *)v416 = v330;
    if (!v331)
      goto LABEL_1042;
    if (*(_DWORD *)(v331 + 24) != 2)
    {
      *(_DWORD *)(v331 + 24) -= 2;
      goto LABEL_1042;
    }
    if ((*(_WORD *)(v331 + 30) & 0x400) != 0)
    {
LABEL_1042:
      *((_DWORD *)v412 + 110) = v447;
      *((_BYTE *)v412 + 444) = v448;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v331, v329);
      v387 = v446;
      *((_DWORD *)v412 + 110) = v447;
      *((_BYTE *)v412 + 444) = v448;
      v446 = 0;
      if (v387)
      {
        if (v387[6] == 2)
        {
          if ((*((_WORD *)v387 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v387, v386);
        }
        else
        {
          v387[6] -= 2;
        }
      }
    }
    WebCore::Position::downstream((uint64_t)&v428, (WebCore::Node *)1, (uint64_t)&v446);
    v333 = v446;
    v446 = 0;
    v334 = *(_QWORD *)v195;
    *(_QWORD *)v195 = v333;
    if (!v334)
      goto LABEL_1046;
    if (*(_DWORD *)(v334 + 24) != 2)
    {
      *(_DWORD *)(v334 + 24) -= 2;
      goto LABEL_1046;
    }
    if ((*(_WORD *)(v334 + 30) & 0x400) != 0)
    {
LABEL_1046:
      v335 = v412;
      *((_DWORD *)v412 + 114) = v447;
      *((_BYTE *)v412 + 460) = v448;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v334, v332);
      v389 = v446;
      v335 = v412;
      *((_DWORD *)v412 + 114) = v447;
      *((_BYTE *)v412 + 460) = v448;
      v446 = 0;
      if (v389)
      {
        if (v389[6] == 2)
        {
          v335 = v412;
          if ((*((_WORD *)v389 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v389, v388);
        }
        else
        {
          v389[6] -= 2;
          v335 = v412;
        }
      }
    }
    WebCore::Position::trailingWhitespacePosition((unsigned int *)v195, 0, (uint64_t)&v446);
    v337 = *((_QWORD *)v335 + 62);
    *((_QWORD *)v335 + 62) = v446;
    v235 = (WebCore::Node **)((char *)v412 + 416);
    if (v337)
    {
      if (*(_DWORD *)(v337 + 24) == 2)
      {
        if ((*(_WORD *)(v337 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v337, v336);
      }
      else
      {
        *(_DWORD *)(v337 + 24) -= 2;
      }
    }
    *(_DWORD *)v406 = v447;
    *((_BYTE *)v412 + 508) = v448;
    WebCore::DeleteSelectionCommand::setStartingSelectionOnSmartDelete(v412, (const WebCore::Position *)v192, v195);
    v338 = v428;
    v428 = 0;
    v321 = v403;
    if (v338)
    {
      if (*((_DWORD *)v338 + 6) == 2)
      {
        if ((*((_WORD *)v338 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v338, v262);
          v321 = v403;
        }
      }
      else
      {
        *((_DWORD *)v338 + 6) -= 2;
      }
    }
  }
  v202 = v408;
  v339 = !v308;
  if (v315 != v410)
    v339 = 1;
  if (((v339 | v321) & 1) != 0 || !v297)
    goto LABEL_1111;
  *((_BYTE *)v412 + 283) = 0;
  if (v404)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v192, (uint64_t)&v432);
    LOBYTE(v434) = 1;
    WebCore::previousVisuallyDistinctCandidate(&v432, (uint64_t)&v428);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v428))
    {
      v435 = 0;
      v436 = 0;
      v437 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v428, (uint64_t)&v446);
      v435 = (WebCore::Node *)v446;
      LODWORD(v436) = v447;
      BYTE4(v436) = v448;
    }
    LOBYTE(v437) = 1;
    if (v428)
    {
      if (*((_DWORD *)v428 + 6) == 2)
      {
        if ((*((_WORD *)v428 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v428, v340);
      }
      else
      {
        *((_DWORD *)v428 + 6) -= 2;
      }
    }
    WebCore::endOfParagraph((WebCore::Node *)&v435, 1, &v446);
    v344 = v446;
    v345 = v447;
    v346 = v448;
    v446 = 0;
    v347 = v435;
    v435 = 0;
    if (v347)
    {
      if (*((_DWORD *)v347 + 6) == 2)
      {
        if ((*((_WORD *)v347 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v347, v343);
      }
      else
      {
        *((_DWORD *)v347 + 6) -= 2;
      }
    }
    v348 = v432;
    if (!v432)
      goto LABEL_1090;
LABEL_1088:
    if (*((_DWORD *)v348 + 6) == 2)
    {
      if ((*((_WORD *)v348 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v348, v343);
    }
    else
    {
      *((_DWORD *)v348 + 6) -= 2;
    }
    goto LABEL_1090;
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v192, (uint64_t)&v428);
  v431 = 1;
  WebCore::previousVisuallyDistinctCandidate(&v428, (uint64_t)&v435);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v435))
  {
    v342 = 0;
    v432 = 0;
    v433 = 0;
    v434 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v435, (uint64_t)&v446);
    v342 = v446;
    v432 = (WebCore::Node *)v446;
    LODWORD(v433) = v447;
    BYTE4(v433) = v448;
  }
  LOBYTE(v434) = 1;
  if (v435)
  {
    if (*((_DWORD *)v435 + 6) == 2)
    {
      if ((*((_WORD *)v435 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v435, v341);
    }
    else
    {
      *((_DWORD *)v435 + 6) -= 2;
    }
  }
  WebCore::previousVisuallyDistinctCandidate(&v432, (uint64_t)v450);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v450))
  {
    v435 = 0;
    v436 = 0;
    v437 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v450, (uint64_t)&v446);
    v435 = (WebCore::Node *)v446;
    LODWORD(v436) = v447;
    BYTE4(v436) = v448;
  }
  LOBYTE(v437) = 1;
  if (v450[0])
  {
    if (*((_DWORD *)v450[0] + 6) == 2)
    {
      if ((*((_WORD *)v450[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v450[0], v349);
    }
    else
    {
      *((_DWORD *)v450[0] + 6) -= 2;
    }
  }
  WebCore::endOfParagraph((WebCore::Node *)&v435, 1, &v446);
  v344 = v446;
  v345 = v447;
  v346 = v448;
  v446 = 0;
  v350 = v435;
  v435 = 0;
  if (v350)
  {
    if (*((_DWORD *)v350 + 6) == 2)
    {
      if ((*((_WORD *)v350 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v350, v343);
    }
    else
    {
      *((_DWORD *)v350 + 6) -= 2;
    }
  }
  if (v342)
  {
    if (v342[6] == 2)
    {
      if ((*((_WORD *)v342 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v342, v343);
    }
    else
    {
      v342[6] -= 2;
    }
  }
  v348 = v428;
  if (v428)
    goto LABEL_1088;
LABEL_1090:
  if (v344)
    v344[6] += 2;
  v446 = v344;
  v447 = v345;
  v448 = v346;
  WebCore::Position::upstream((uint64_t)&v446, (WebCore::Node *)1, (uint64_t)&v435);
  v352 = v435;
  v435 = 0;
  v353 = *(_QWORD *)v192;
  *(_QWORD *)v192 = v352;
  if (!v353)
  {
    v355 = v436;
    v354 = v412;
    goto LABEL_1096;
  }
  v354 = v412;
  if (*(_DWORD *)(v353 + 24) != 2)
  {
    *(_DWORD *)(v353 + 24) -= 2;
    goto LABEL_1095;
  }
  if ((*(_WORD *)(v353 + 30) & 0x400) != 0)
  {
LABEL_1095:
    v355 = v436;
LABEL_1096:
    *((_DWORD *)v354 + 102) = v355;
    *((_BYTE *)v354 + 412) = BYTE4(v436);
    goto LABEL_1097;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v353, v351);
  v391 = v435;
  *((_DWORD *)v412 + 102) = v436;
  *((_BYTE *)v412 + 412) = BYTE4(v436);
  v435 = 0;
  if (v391)
  {
    if (*((_DWORD *)v391 + 6) == 2)
    {
      if ((*((_WORD *)v391 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v391, v390);
    }
    else
    {
      *((_DWORD *)v391 + 6) -= 2;
    }
  }
LABEL_1097:
  WebCore::Position::downstream((uint64_t)&v446, (WebCore::Node *)1, (uint64_t)&v435);
  v357 = v435;
  v435 = 0;
  v358 = *v235;
  *v235 = v357;
  if (!v358)
    goto LABEL_1100;
  if (*((_DWORD *)v358 + 6) != 2)
  {
    *((_DWORD *)v358 + 6) -= 2;
    goto LABEL_1100;
  }
  if ((*((_WORD *)v358 + 15) & 0x400) != 0)
  {
LABEL_1100:
    *((_DWORD *)v354 + 106) = v436;
    *((_BYTE *)v354 + 428) = BYTE4(v436);
  }
  else
  {
    WebCore::Node::removedLastRef(v358, v356);
    v393 = v435;
    *((_DWORD *)v354 + 106) = v436;
    *((_BYTE *)v354 + 428) = BYTE4(v436);
    v435 = 0;
    if (v393)
    {
      if (*((_DWORD *)v393 + 6) == 2)
      {
        if ((*((_WORD *)v393 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v393, v392);
      }
      else
      {
        *((_DWORD *)v393 + 6) -= 2;
      }
    }
  }
  WebCore::Position::leadingWhitespacePosition(v192, 1, 0, (uint64_t)&v435);
  v360 = v435;
  v435 = 0;
  v361 = *((_QWORD *)v354 + 60);
  *((_QWORD *)v354 + 60) = v360;
  if (!v361)
    goto LABEL_1104;
  if (*(_DWORD *)(v361 + 24) != 2)
  {
    *(_DWORD *)(v361 + 24) -= 2;
    goto LABEL_1104;
  }
  if ((*(_WORD *)(v361 + 30) & 0x400) != 0)
  {
LABEL_1104:
    *((_DWORD *)v354 + 122) = v436;
    *((_BYTE *)v354 + 492) = BYTE4(v436);
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v361, v359);
    v395 = v435;
    *((_DWORD *)v354 + 122) = v436;
    *((_BYTE *)v354 + 492) = BYTE4(v436);
    v435 = 0;
    if (v395)
    {
      if (*((_DWORD *)v395 + 6) == 2)
      {
        if ((*((_WORD *)v395 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v395, v394);
      }
      else
      {
        *((_DWORD *)v395 + 6) -= 2;
      }
    }
  }
  WebCore::DeleteSelectionCommand::setStartingSelectionOnSmartDelete(v354, (const WebCore::Position *)v192, v416);
  v362 = v446;
  v446 = 0;
  if (v362)
  {
    if (v362[6] == 2)
    {
      if ((*((_WORD *)v362 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v362, v262);
    }
    else
    {
      v362[6] -= 2;
    }
  }
  if (v344)
  {
    if (v344[6] == 2)
    {
      if ((*((_WORD *)v344 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v344, v262);
    }
    else
    {
      v344[6] -= 2;
    }
  }
LABEL_1111:
  v363 = v438;
  v438 = 0;
  if (v363)
  {
    if (*((_DWORD *)v363 + 6) == 2)
    {
      if ((*((_WORD *)v363 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v363, v262);
    }
    else
    {
      *((_DWORD *)v363 + 6) -= 2;
    }
  }
  v364 = v442;
  v442 = 0;
  if (v364)
  {
    if (*((_DWORD *)v364 + 6) == 2)
    {
      if ((*((_WORD *)v364 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v364, v262);
    }
    else
    {
      *((_DWORD *)v364 + 6) -= 2;
    }
  }
LABEL_1117:
  v365 = v417;
  v417 = 0;
  if (v365)
  {
    if (*((_DWORD *)v365 + 6) == 2)
    {
      if ((*((_WORD *)v365 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v365, v262);
    }
    else
    {
      *((_DWORD *)v365 + 6) -= 2;
    }
  }
LABEL_1120:
  WebCore::Position::parentAnchoredEquivalent((uint64_t)v235, (uint64_t)&v446);
  v367 = v446;
  if (v446)
  {
    v446[6] += 2;
    v161 = v414;
    while (1)
    {
      v368 = v367;
      if ((*((_QWORD *)v367 + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)v367 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
      {
        break;
      }
      v367 = (unsigned int *)*((_QWORD *)v367 + 4);
      if (v367)
        v367[6] += 2;
      if (v368[6] == 2)
      {
        if ((*((_WORD *)v368 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v368, v366);
      }
      else
      {
        v368[6] -= 2;
      }
      if (!v367)
      {
        v368 = 0;
        break;
      }
    }
  }
  else
  {
    v368 = 0;
    v161 = v414;
  }
  v369 = *((_QWORD *)v412 + 64);
  *((_QWORD *)v412 + 64) = v368;
  if (v369)
  {
    if (*(_DWORD *)(v369 + 24) == 2)
    {
      if ((*(_WORD *)(v369 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v369, v366);
    }
    else
    {
      *(_DWORD *)(v369 + 24) -= 2;
    }
  }
  v370 = v446;
  v446 = 0;
  if (v370)
  {
    if (v370[6] == 2)
    {
      if ((*((_WORD *)v370 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v370, v366);
    }
    else
    {
      v370[6] -= 2;
    }
  }
  WebCore::Position::parentAnchoredEquivalent((uint64_t)v416, (uint64_t)&v446);
  v371 = v446;
  if (v446)
  {
    v446[6] += 2;
    while (1)
    {
      v372 = v371;
      if ((*((_QWORD *)v371 + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)v371 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
      {
        break;
      }
      v371 = (unsigned int *)*((_QWORD *)v371 + 4);
      if (v371)
        v371[6] += 2;
      if (v372[6] == 2)
      {
        if ((*((_WORD *)v372 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v372, v158);
      }
      else
      {
        v372[6] -= 2;
      }
      if (!v371)
        goto LABEL_1150;
    }
  }
  else
  {
LABEL_1150:
    v372 = 0;
  }
  v373 = *((_QWORD *)v412 + 65);
  *((_QWORD *)v412 + 65) = v372;
  if (v373)
  {
    if (*(_DWORD *)(v373 + 24) == 2)
    {
      if ((*(_WORD *)(v373 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v373, v158);
    }
    else
    {
      *(_DWORD *)(v373 + 24) -= 2;
    }
  }
  v374 = v446;
  v446 = 0;
  if (v374)
  {
    if (v374[6] == 2)
    {
      if ((*((_WORD *)v374 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v374, v158);
    }
    else
    {
      v374[6] -= 2;
    }
  }
  v375 = v420[0];
  v420[0] = 0;
  if (v375)
  {
    if (*((_DWORD *)v375 + 6) == 2)
    {
      if ((*((_WORD *)v375 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v375, v158);
    }
    else
    {
      *((_DWORD *)v375 + 6) -= 2;
    }
  }
  if (v202)
  {
    if (*(_DWORD *)(v202 + 24) == 2)
    {
      if ((*(_WORD *)(v202 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v202, v158);
    }
    else
    {
      *(_DWORD *)(v202 + 24) -= 2;
    }
  }
  if (v197)
  {
    if (*(_DWORD *)(v197 + 24) == 2)
    {
      if ((*(_WORD *)(v197 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v197, v158);
    }
    else
    {
      *(_DWORD *)(v197 + 24) -= 2;
    }
  }
LABEL_1166:
  v376 = v422;
  v422 = 0;
  if (v376)
  {
    if (*((_DWORD *)v376 + 6) == 2)
    {
      if ((*((_WORD *)v376 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v376, v158);
    }
    else
    {
      *((_DWORD *)v376 + 6) -= 2;
    }
  }
  v160 = v425;
  v425 = 0;
  if (v160)
  {
LABEL_1170:
    if (*((_DWORD *)v160 + 6) == 2)
    {
      if ((*((_WORD *)v160 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v160, v158);
    }
    else
    {
      *((_DWORD *)v160 + 6) -= 2;
    }
  }
  return v161;
}

BOOL WebCore::isEditablePosition(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  const WebCore::Node *v5;
  _BOOL8 v6;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v3 = *(_BYTE *)(a1 + 12) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  if (WebCore::Node::computeEditability(v2, 0, 0))
    v6 = 1;
  else
    v6 = a2 == 1 && WebCore::isEditableToAccessibility((WebCore *)v2, v5);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6;
}

uint64_t WebCore::firstEditablePositionAfterPositionInRoot@<X0>(uint64_t this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  uint64_t v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  WebCore::Node *v11;
  int v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  WebCore::Node *v28;
  int v29;
  int v31;
  WebCore::Node *v32;
  int v33;
  __int16 v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v38;
  int v39;
  char v40;
  WebCore::Node *v41;
  int v42;
  char v43;

  if (!a2)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    v14 = *(_BYTE *)(a3 + 12) & 0xF0;
LABEL_111:
    *(_BYTE *)(a3 + 12) = v14;
    return this;
  }
  v7 = this;
  v8 = *((_WORD *)a2 + 14);
  *((_DWORD *)a2 + 6) += 2;
  v41 = a2;
  v42 = 0;
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = 3;
  v43 = v9;
  v10 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)this, (uint64_t)&v41);
  if (v10 == 129 || ((char)v10 & 0x80000000) == 0)
  {
    this = (uint64_t)v41;
    v41 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  else
  {
    v12 = WebCore::Node::computeEditability((uint64_t)a2, 0, 1);
    this = (uint64_t)v41;
    v41 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
    if (v12)
    {
      v13 = *((_WORD *)a2 + 14);
      *((_DWORD *)a2 + 6) += 2;
      *(_QWORD *)a3 = a2;
      *(_DWORD *)(a3 + 8) = 0;
      if ((v13 & 1) != 0)
        v14 = *(_BYTE *)(a3 + 12) & 0xF0;
      else
        v14 = *(_BYTE *)(a3 + 12) & 0xF0 | 3;
      goto LABEL_111;
    }
  }
  v15 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)(v15 + 24) += 2;
  v41 = (WebCore::Node *)v15;
  v42 = *(_DWORD *)(v7 + 8);
  v43 = *(_BYTE *)(v7 + 12);
  v16 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(v15 + 40) == v16)
  {
    v18 = (WebCore::Node *)v15;
    goto LABEL_40;
  }
  v17 = *(_DWORD *)(v15 + 24) + 2;
  *(_DWORD *)(v15 + 24) = v17;
  v18 = (WebCore::Node *)v15;
  while (1)
  {
    v19 = *((_QWORD *)v18 + 5);
    if (v19 == v16)
    {
      *((_DWORD *)v18 + 6) += 2;
      v17 = *(_DWORD *)(v15 + 24);
      goto LABEL_32;
    }
    if ((*((_BYTE *)v18 + 22) & 0x10) == 0)
      break;
    if (!*(_QWORD *)v19 || (*(_WORD *)(*(_QWORD *)v19 + 28) & 0x80) == 0)
      break;
    v21 = *(_QWORD *)(*(_QWORD *)v19 + 200);
    if (!v21)
      break;
    v18 = *(WebCore::Node **)(v21 + 8);
    if (!v18)
      goto LABEL_32;
  }
  v18 = 0;
LABEL_32:
  v22 = v17 - 2;
  if (v22)
  {
    *(_DWORD *)(v15 + 24) = v22;
  }
  else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
  {
    this = WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  if (v19 != v16)
    goto LABEL_131;
  *((_DWORD *)v18 + 6) += 2;
  v41 = v18;
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  v42 = 0;
  v43 = 2;
  if (*((_DWORD *)v18 + 6) != 2)
  {
    *((_DWORD *)v18 + 6) -= 2;
    goto LABEL_40;
  }
  if ((*((_WORD *)v18 + 15) & 0x400) == 0)
  {
    this = WebCore::Node::removedLastRef(v18);
    v18 = v41;
    if (!v41)
    {
LABEL_110:
      *(_QWORD *)a3 = v41;
      *(_DWORD *)(a3 + 8) = v42;
      v14 = v43;
      goto LABEL_111;
    }
  }
  while (1)
  {
LABEL_40:
    v23 = v43 & 7;
    if (v23 > 4)
      goto LABEL_45;
    v24 = (uint64_t)v18;
    if (((1 << v23) & 0x19) == 0)
    {
      v24 = *((_QWORD *)v18 + 4);
      if (!v24)
        goto LABEL_45;
    }
    *(_DWORD *)(v24 + 24) += 2;
    this = WebCore::Node::computeEditability(v24, 0, 0);
    v25 = *(_DWORD *)(v24 + 24) - 2;
    if ((_DWORD)this)
      break;
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) = v25;
    }
LABEL_45:
    v26 = *((_DWORD *)v18 + 6);
    *((_DWORD *)v18 + 6) = v26 + 2;
    v27 = *((_WORD *)a2 + 14);
    if ((v27 & 0xF000) != 0x9000)
    {
      if ((v27 & 4) != 0
        && *((_QWORD *)a2 + 10)
        && ((*((unsigned __int8 *)v18 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
      {
        v28 = v18;
        do
        {
          v28 = (WebCore::Node *)*((_QWORD *)v28 + 4);
          v29 = v28 != 0;
        }
        while (v28 != a2 && v28 != 0);
      }
      else
      {
LABEL_62:
        v29 = 0;
      }
      if (v26)
        goto LABEL_64;
      goto LABEL_90;
    }
    if (**((const WebCore::Position ***)v18 + 5) != a2 || (*((_WORD *)v18 + 14) & 0xF000) == 0x9000)
      goto LABEL_62;
    v29 = (*((unsigned __int8 *)v18 + 22) >> 3) & 1;
    if (v26)
    {
LABEL_64:
      *((_DWORD *)v18 + 6) = v26;
      if ((v29 & 1) == 0)
        goto LABEL_97;
      goto LABEL_65;
    }
LABEL_90:
    if ((*((_WORD *)v18 + 15) & 0x400) != 0)
    {
      if (!v29)
        goto LABEL_97;
    }
    else
    {
      this = WebCore::Node::removedLastRef(v18);
      if ((v29 & 1) == 0)
        goto LABEL_97;
    }
LABEL_65:
    if ((*((_WORD *)v18 + 14) & 4) != 0
      && *((_QWORD *)v18 + 10)
      && ((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v18 + 208))(v18) & 1) != 0)
    {
      WebCore::nextVisuallyDistinctCandidate((uint64_t)&v41, 1, (uint64_t)&v38);
      v31 = 0;
      v18 = v4;
    }
    else
    {
      *((_DWORD *)v18 + 6) += 2;
      WebCore::positionInParentAfterNode((uint64_t)v18, v11, (uint64_t)&v38);
      v31 = 1;
    }
    v32 = v38;
    v38 = 0;
    this = (uint64_t)v41;
    v41 = v32;
    if (!this)
      goto LABEL_73;
    if (*(_DWORD *)(this + 24) != 2)
    {
      *(_DWORD *)(this + 24) -= 2;
LABEL_73:
      v42 = v39;
      v43 = v40;
      v38 = 0;
      goto LABEL_74;
    }
    if ((*(_WORD *)(this + 30) & 0x400) != 0)
      goto LABEL_73;
    WebCore::Node::removedLastRef((WebCore::Node *)this);
    this = (uint64_t)v38;
    v42 = v39;
    v43 = v40;
    v38 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
LABEL_74:
    if (!v31 || !v18)
      goto LABEL_79;
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef(v18);
        v18 = 0;
        v32 = v41;
        goto LABEL_79;
      }
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
    v18 = 0;
LABEL_79:
    v4 = v18;
    v18 = v32;
    if (!v32)
      goto LABEL_110;
  }
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v24);
  }
  else
  {
    *(_DWORD *)(v24 + 24) = v25;
  }
LABEL_97:
  if (v18 == a2)
    goto LABEL_110;
  v33 = *((_DWORD *)v18 + 6);
  *((_DWORD *)v18 + 6) = v33 + 2;
  v34 = *((_WORD *)a2 + 14);
  if ((v34 & 0xF000) == 0x9000)
  {
    if (**((const WebCore::Position ***)v18 + 5) == a2 && (*((_WORD *)v18 + 14) & 0xF000) != 0x9000)
    {
      v36 = (*((unsigned __int8 *)v18 + 22) >> 3) & 1;
      if (v33)
        goto LABEL_109;
LABEL_129:
      if ((*((_WORD *)v18 + 15) & 0x400) != 0)
      {
        if (!v36)
          goto LABEL_131;
      }
      else
      {
        this = WebCore::Node::removedLastRef(v18);
        if ((v36 & 1) == 0)
          goto LABEL_131;
      }
      goto LABEL_110;
    }
LABEL_128:
    v36 = 0;
    if (v33)
      goto LABEL_109;
    goto LABEL_129;
  }
  if ((v34 & 4) == 0
    || !*((_QWORD *)a2 + 10)
    || ((*((unsigned __int8 *)v18 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
  {
    goto LABEL_128;
  }
  v35 = v18;
  do
  {
    v35 = (WebCore::Node *)*((_QWORD *)v35 + 4);
    v36 = v35 != 0;
  }
  while (v35 != a2 && v35 != 0);
  if (!v33)
    goto LABEL_129;
LABEL_109:
  *((_DWORD *)v18 + 6) = v33;
  if ((v36 & 1) != 0)
    goto LABEL_110;
LABEL_131:
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) &= 0xF0u;
  this = (uint64_t)v41;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::highestEditableRoot@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  WebCore *v8;
  const WebCore::Node *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;

  result = WebCore::editableRootForPosition(a1, a2);
  if (result)
  {
    v6 = *(_DWORD *)(result + 24);
    v12 = result;
    *(_DWORD *)(result + 24) = v6 + 4;
    if (a2 == 1)
    {
      while ((*(_WORD *)(result + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v8 = *(WebCore **)(result + 32);
        if (v8)
          *((_DWORD *)v8 + 6) += 2;
        v11 = v8;
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
          {
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            v8 = v11;
          }
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
        if (!v8)
          goto LABEL_27;
        if (WebCore::Node::computeEditability((uint64_t)v8, 0, 1)
          || WebCore::isEditableToAccessibility(v8, v9))
        {
          WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(&v12, (uint64_t *)&v11);
        }
        result = (uint64_t)v11;
      }
    }
    else
    {
      while ((*(_WORD *)(result + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v7 = *(_QWORD *)(result + 32);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
        v11 = (WebCore *)v7;
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
          {
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            v7 = (uint64_t)v11;
          }
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
        if (!v7)
          goto LABEL_27;
        if (WebCore::Node::computeEditability(v7, 0, 1))
          WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(&v12, (uint64_t *)&v11);
        result = (uint64_t)v11;
      }
    }
    v11 = 0;
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
LABEL_27:
    v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t WebCore::lastEditablePositionBeforePositionInRoot@<X0>(uint64_t this@<X0>, const WebCore::Position *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  WebCore::Node *v11;
  int v12;
  __int16 v13;
  char v14;
  WebCore::Node *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  WebCore::Node *v29;
  int v30;
  int v32;
  WebCore::Node *v33;
  int v34;
  __int16 v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v39;
  int v40;
  char v41;
  WebCore::Node *v42;
  int v43;
  char v44;

  if (!a2)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    goto LABEL_29;
  }
  v7 = this;
  v8 = *((_WORD *)a2 + 14);
  *((_DWORD *)a2 + 6) += 2;
  if ((v8 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 10);
    v10 = 0;
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
  }
  else
  {
    LODWORD(v9) = 0;
    v10 = 4;
  }
  v42 = a2;
  v43 = v9;
  v44 = v10;
  v12 = (char)WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)this, (uint64_t)&v42);
  this = (uint64_t)v42;
  v42 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  if (v12 >= 1)
  {
    v13 = *((_WORD *)a2 + 14);
    *((_DWORD *)a2 + 6) += 2;
    if ((v13 & 1) == 0)
    {
      *(_QWORD *)a3 = a2;
      *(_DWORD *)(a3 + 8) = 0;
      v14 = *(_BYTE *)(a3 + 12) & 0xF0 | 4;
LABEL_30:
      *(_BYTE *)(a3 + 12) = v14;
      return this;
    }
    v22 = *((_QWORD *)a2 + 10);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 4);
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 8) = v22;
LABEL_29:
    v14 = *(_BYTE *)(a3 + 12) & 0xF0;
    goto LABEL_30;
  }
  v15 = *(WebCore::Node **)v7;
  if (*(_QWORD *)v7)
    *((_DWORD *)v15 + 6) += 2;
  v42 = v15;
  v43 = *(_DWORD *)(v7 + 8);
  v44 = *(_BYTE *)(v7 + 12);
  v16 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)v15 + 5) != v16)
  {
    v17 = *((_DWORD *)v15 + 6) + 2;
    *((_DWORD *)v15 + 6) = v17;
    v18 = (uint64_t)v15;
    while (1)
    {
      v19 = *(_QWORD *)(v18 + 40);
      if (v19 == v16)
      {
        *(_DWORD *)(v18 + 24) += 2;
        v17 = *((_DWORD *)v15 + 6);
        goto LABEL_33;
      }
      if ((*(_BYTE *)(v18 + 22) & 0x10) == 0)
        break;
      if (!*(_QWORD *)v19 || (*(_WORD *)(*(_QWORD *)v19 + 28) & 0x80) == 0)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 200);
      if (!v21)
        break;
      v18 = *(_QWORD *)(v21 + 8);
      if (!v18)
        goto LABEL_33;
    }
    v18 = 0;
LABEL_33:
    v23 = v17 - 2;
    if (v23)
    {
      *((_DWORD *)v15 + 6) = v23;
    }
    else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v15);
    }
    if (v19 != v16)
      goto LABEL_130;
    WebCore::firstPositionInOrBeforeNode(v18, v11, (uint64_t)&v39);
    v15 = v39;
    v39 = 0;
    this = (uint64_t)v42;
    v42 = v15;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)this);
          this = (uint64_t)v39;
          v43 = v40;
          v44 = v41;
          v39 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 2)
            {
              if ((*(_WORD *)(this + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)this);
            }
            else
            {
              *(_DWORD *)(this + 24) -= 2;
            }
          }
LABEL_40:
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            {
              this = WebCore::Node::removedLastRef((WebCore::Node *)v18);
              v15 = v42;
            }
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          if (v15)
            goto LABEL_43;
LABEL_108:
          *(_QWORD *)a3 = v42;
          *(_DWORD *)(a3 + 8) = v43;
          v14 = v44;
          goto LABEL_30;
        }
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
    v43 = v40;
    v44 = v41;
    goto LABEL_40;
  }
  while (1)
  {
LABEL_43:
    v24 = v44 & 7;
    if (v24 > 4)
      goto LABEL_48;
    v25 = (uint64_t)v15;
    if (((1 << v24) & 0x19) == 0)
    {
      v25 = *((_QWORD *)v15 + 4);
      if (!v25)
        goto LABEL_48;
    }
    *(_DWORD *)(v25 + 24) += 2;
    this = WebCore::Node::computeEditability(v25, 0, 0);
    v26 = *(_DWORD *)(v25 + 24) - 2;
    if ((_DWORD)this)
      break;
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) = v26;
    }
LABEL_48:
    v27 = *((_DWORD *)v15 + 6);
    *((_DWORD *)v15 + 6) = v27 + 2;
    v28 = *((_WORD *)a2 + 14);
    if ((v28 & 0xF000) != 0x9000)
    {
      if ((v28 & 4) != 0
        && *((_QWORD *)a2 + 10)
        && ((*((unsigned __int8 *)v15 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
      {
        v29 = v15;
        do
        {
          v29 = (WebCore::Node *)*((_QWORD *)v29 + 4);
          v30 = v29 != 0;
        }
        while (v29 != a2 && v29 != 0);
      }
      else
      {
LABEL_65:
        v30 = 0;
      }
      if (v27)
        goto LABEL_67;
      goto LABEL_88;
    }
    if (**((const WebCore::Position ***)v15 + 5) != a2 || (*((_WORD *)v15 + 14) & 0xF000) == 0x9000)
      goto LABEL_65;
    v30 = (*((unsigned __int8 *)v15 + 22) >> 3) & 1;
    if (v27)
    {
LABEL_67:
      *((_DWORD *)v15 + 6) = v27;
      if ((v30 & 1) == 0)
        goto LABEL_95;
      goto LABEL_68;
    }
LABEL_88:
    if ((*((_WORD *)v15 + 15) & 0x400) != 0)
    {
      if (!v30)
        goto LABEL_95;
    }
    else
    {
      this = WebCore::Node::removedLastRef(v15);
      if ((v30 & 1) == 0)
        goto LABEL_95;
    }
LABEL_68:
    if ((*((_WORD *)v15 + 14) & 4) != 0
      && *((_QWORD *)v15 + 10)
      && ((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v15 + 208))(v15) & 1) != 0)
    {
      WebCore::previousVisuallyDistinctCandidate(&v42, (uint64_t)&v39);
      v32 = 0;
      v15 = v4;
    }
    else
    {
      *((_DWORD *)v15 + 6) += 2;
      WebCore::positionInParentBeforeNode(v15, v11, (uint64_t)&v39);
      v32 = 1;
    }
    v33 = v39;
    this = (uint64_t)v42;
    v42 = v39;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
    v43 = v40;
    v44 = v41;
    v39 = 0;
    if (!v32 || !v15)
      goto LABEL_81;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef(v15);
        v15 = 0;
        v33 = v42;
        goto LABEL_81;
      }
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
    v15 = 0;
LABEL_81:
    v4 = v15;
    v15 = v33;
    if (!v33)
      goto LABEL_108;
  }
  if (*(_DWORD *)(v25 + 24) == 2)
  {
    if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v25);
  }
  else
  {
    *(_DWORD *)(v25 + 24) = v26;
  }
LABEL_95:
  if (v15 == a2)
    goto LABEL_108;
  v34 = *((_DWORD *)v15 + 6);
  *((_DWORD *)v15 + 6) = v34 + 2;
  v35 = *((_WORD *)a2 + 14);
  if ((v35 & 0xF000) == 0x9000)
  {
    if (**((const WebCore::Position ***)v15 + 5) == a2 && (*((_WORD *)v15 + 14) & 0xF000) != 0x9000)
    {
      v37 = (*((unsigned __int8 *)v15 + 22) >> 3) & 1;
      if (v34)
        goto LABEL_107;
LABEL_128:
      if ((*((_WORD *)v15 + 15) & 0x400) != 0)
      {
        if (!v37)
          goto LABEL_130;
      }
      else
      {
        this = WebCore::Node::removedLastRef(v15);
        if ((v37 & 1) == 0)
          goto LABEL_130;
      }
      goto LABEL_108;
    }
LABEL_127:
    v37 = 0;
    if (v34)
      goto LABEL_107;
    goto LABEL_128;
  }
  if ((v35 & 4) == 0
    || !*((_QWORD *)a2 + 10)
    || ((*((unsigned __int8 *)v15 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
  {
    goto LABEL_127;
  }
  v36 = v15;
  do
  {
    v36 = (WebCore::Node *)*((_QWORD *)v36 + 4);
    v37 = v36 != 0;
  }
  while (v36 != a2 && v36 != 0);
  if (!v34)
    goto LABEL_128;
LABEL_107:
  *((_DWORD *)v15 + 6) = v34;
  if ((v37 & 1) != 0)
    goto LABEL_108;
LABEL_130:
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) &= 0xF0u;
  this = (uint64_t)v42;
  if (v42)
  {
    if (*((_DWORD *)v42 + 6) == 2)
    {
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v42);
    }
    else
    {
      *((_DWORD *)v42 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::editableRootForPosition(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  WebCore::AXObjectCache *v7;
  WebCore::AXObjectCache *v8;
  const WebCore::Node *v9;
  int v10;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v3 = *(_BYTE *)(a1 + 12) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  if (!a2)
    goto LABEL_5;
  if (a2 != 1)
  {
    v4 = 0;
LABEL_27:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    return v4;
  }
  if (!WebCore::Document::hasEverCreatedAnAXObjectCache
    || (v7 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8))) == 0)
  {
LABEL_5:
    v4 = 0;
    v5 = v2;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v5, 0))
        break;
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
        v4 = v5;
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v5)
        break;
      v5 = *(_QWORD *)(v5 + 32);
    }
    while (v5);
    goto LABEL_27;
  }
  v8 = v7;
  ++*((_DWORD *)v7 + 2);
  v9 = WebCore::AXObjectCache::rootAXEditableElement(v7, (const WebCore::Node *)v2);
  v10 = *((_DWORD *)v8 + 2);
  if (v10)
  {
    v4 = (uint64_t)v9;
    *((_DWORD *)v8 + 2) = v10 - 1;
    goto LABEL_27;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::enclosingNodeOfType@<X0>(uint64_t result@<X0>, uint64_t (*a2)(uint64_t)@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v5 = (uint64_t *)result;
  if (a3 == 1)
  {
    result = WebCore::highestEditableRoot(result, 0, &v13);
    v8 = v13;
    v9 = *v5;
    if (*v5)
    {
      *(_DWORD *)(v9 + 24) += 2;
      if (!v8)
        goto LABEL_17;
      while (1)
      {
        v10 = v9;
        result = WebCore::Node::computeEditability(v9, 0, 1);
        if ((_DWORD)result)
        {
          result = a2(v9);
          if ((result & 1) != 0)
            goto LABEL_29;
          if (v9 == v8)
            break;
        }
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v7);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
        if (!v9)
          goto LABEL_28;
      }
      *a4 = 0;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      goto LABEL_33;
    }
LABEL_28:
    v10 = 0;
LABEL_29:
    *a4 = v10;
    if (v8)
    {
LABEL_33:
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      *(_DWORD *)(v9 + 24) += 2;
LABEL_17:
      while (1)
      {
        v11 = v9;
        result = a2(v9);
        if ((result & 1) != 0)
          break;
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
        if (!v9)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      v11 = 0;
    }
    *a4 = v11;
  }
  return result;
}

BOOL WebCore::isTableCell(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v4;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    return *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37;
  }
  else
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0)
      return 0;
    v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
      return 1;
    return v4 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24);
  }
}

uint64_t WebCore::numEnclosingMailBlockquotes(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = 0;
    *(_DWORD *)(v2 + 24) += 2;
    v4 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v5 = v2;
      if ((*(_WORD *)(v2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
      {
        goto LABEL_19;
      }
      v6 = *(_QWORD *)(v2 + 104);
      if (v6)
      {
        v7 = *(unsigned int *)(v6 + 4);
        if ((v7 & 1) != 0)
        {
          v8 = *(_QWORD *)(v6 + 40);
          v9 = *(unsigned int *)(v6 + 52);
          if (v9)
          {
LABEL_10:
            v10 = (_QWORD *)(v8 + 8);
            do
            {
              v11 = *(v10 - 1);
              if (v11 == WebCore::HTMLNames::typeAttr
                || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
              {
                goto LABEL_18;
              }
              v10 += 2;
            }
            while (--v9);
          }
        }
        else
        {
          v8 = v6 + 32;
          v9 = v7 >> 5;
          if (v7 >> 5)
            goto LABEL_10;
        }
      }
      v10 = v4;
LABEL_18:
      v3 = v3 + MEMORY[0x19AEA53F4](*v10, "cite", 4);
LABEL_19:
      v2 = *(_QWORD *)(v2 + 32);
      if (v2)
        *(_DWORD *)(v2 + 24) += 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v2)
        return v3;
    }
  }
  return 0;
}

uint64_t *WebCore::enclosingAnchorElement@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;

  v4 = *this;
  if (!*this)
  {
LABEL_20:
    *a2 = 0;
    return this;
  }
  *(_DWORD *)(v4 + 24) += 2;
  while (1)
  {
    v5 = v4;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      break;
    *a2 = 0;
LABEL_7:
    v4 = *(_QWORD *)(v4 + 32);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if (!v4)
      goto LABEL_20;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  *a2 = v4;
  v7 = *(_WORD *)(v4 + 30);
  if ((v7 & 1) == 0)
  {
    *a2 = 0;
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((v7 & 0x400) == 0)
    {
      this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    goto LABEL_7;
  }
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  return this;
}

uint64_t WebCore::isMailBlockquote(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_WORD *)this + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
  {
    v3 = *((_QWORD *)this + 13);
    if (!v3)
      goto LABEL_15;
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if (!(_DWORD)v6)
        goto LABEL_15;
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if (!(_DWORD)v6)
        goto LABEL_15;
    }
    v6 = v6;
    v7 = v5 + 8;
    do
    {
      v8 = *(_QWORD *)(v7 - 8);
      if (v8 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        break;
      }
      v7 += 16;
      --v6;
    }
    while (v6);
LABEL_15:
    JUMPOUT(0x19AEA53F4);
  }
  return 0;
}

unsigned int *WebCore::DeleteSelectionCommand::insertBlockPlaceholderForTableCellIfNeeded(unsigned int *this, WebCore::Element *a2)
{
  int v2;
  _DWORD *v3;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  WebCore::Element *v22;
  WebCore::Element *v23;
  WebCore::Node *v24;
  WebCore::Element *v25;
  void *v27;
  void *v28;
  int v29;
  WebCore::Node *v30;
  int v31;
  char v32;
  WebCore::Node *v33;

  v2 = WebCore::ScriptDisallowedScope::s_count++;
  v3 = (_DWORD *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
  if (!v3)
    goto LABEL_49;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A9C584);
  }
  if (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 37)
  {
LABEL_49:
    WebCore::ScriptDisallowedScope::s_count = v2;
    return this;
  }
  v5 = this;
  ++*(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v6 = v3[41];
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 1000))(v3);
  if (__OFSUB__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 - v7;
  v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 1008))(v3);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 1360))(v3);
  v12 = v11 << 6;
  if (v11 < -33554432)
    v12 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v12 = 0x7FFFFFFF;
  v13 = __OFSUB__(v10, v12);
  v14 = v10 - v12;
  if (v13)
    v14 = (v10 >> 31) + 0x7FFFFFFF;
  v15 = v14 & ~(v14 >> 31);
  v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 928))(v3);
  v13 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  if (v13)
    v17 = 0x7FFFFFFF;
  this = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 936))(v3);
  if (__OFSUB__(v17, (_DWORD)this))
    v18 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17 - (_DWORD)this;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v3 + 11) + 40) + 584) & 0x100) != 0)
  {
    this = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 1360))(v3);
    v29 = (_DWORD)this << 6;
    if ((int)this > 0x1FFFFFF)
      v29 = 0x7FFFFFFF;
    if ((int)this >= -33554432)
      v19 = v29;
    else
      v19 = 0x80000000;
  }
  else
  {
    v19 = 0;
  }
  v13 = __OFSUB__(v18, v19);
  v20 = v18 - v19;
  if (v13)
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  v21 = v3[4];
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x195A9C5A4);
  }
  v3[4] = v21 - 1;
  --WebCore::ScriptDisallowedScope::s_count;
  if (v20 <= 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    v22 = a2;
    while (1)
    {
      v23 = v22;
      if (WebCore::Node::computeEditability((uint64_t)v22, 0, 1))
      {
        WebCore::firstPositionInOrBeforeNode((uint64_t)v22, v24, (uint64_t)&v30);
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v27);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
LABEL_52:
        WebCore::CompositeEditCommand::insertBlockPlaceholder(v5, (const WebCore::Position *)&v30, &v33);
        if (v33)
        {
          if (*((_DWORD *)v33 + 6) == 2)
          {
            if ((*((_WORD *)v33 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v33, v28);
          }
          else
          {
            *((_DWORD *)v33 + 6) -= 2;
          }
        }
        this = (unsigned int *)v30;
        v30 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)this, v28);
          }
          else
          {
            this[6] -= 2;
          }
        }
        return this;
      }
      if ((*((_WORD *)v22 + 14) & 4) != 0)
      {
        v22 = (WebCore::Element *)*((_QWORD *)v22 + 10);
        if (v22)
          break;
      }
      if (v23 != a2)
      {
        v22 = (WebCore::Element *)*((_QWORD *)v23 + 7);
        if (v22)
          break;
        v25 = v23;
        while (1)
        {
          v25 = (WebCore::Element *)*((_QWORD *)v25 + 4);
          if (!v25 || v25 == a2)
            break;
          v22 = (WebCore::Element *)*((_QWORD *)v25 + 7);
          if (v22)
            goto LABEL_42;
        }
      }
      v22 = 0;
LABEL_43:
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v24);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
      if (!v22)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        goto LABEL_52;
      }
    }
LABEL_42:
    *((_DWORD *)v22 + 6) += 2;
    goto LABEL_43;
  }
  return this;
}

WebCore::Node *WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(uint64_t a1, uint64_t a2, WebCore::Node *a3)
{
  int v3;
  __int16 v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  char v10;
  void *v11;
  WebCore::Node *v12;
  int v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  void *v17;
  BOOL v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v24;
  int v25;
  char v26;
  WebCore::Node *v27;
  int v28;
  char v29;
  char v30;
  WebCore::Node *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34[2];
  WebCore::Node *v35;
  int v36;
  char v37;
  char v38;

  v3 = (int)a3;
  if (*(_QWORD *)(a1 + 512) == a2)
  {
    v9 = *(_WORD *)(a2 + 28);
    *(_DWORD *)(a2 + 24) += 4;
    v24 = a2;
    v25 = 0;
    if ((v9 & 1) != 0)
      v10 = 0;
    else
      v10 = 3;
    v26 = v10;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v24, (uint64_t)&v27);
    v30 = 1;
    WebCore::previousVisuallyDistinctCandidate(&v27, (uint64_t)v34);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v34))
    {
      v12 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v34, (uint64_t)&v35);
      v12 = v35;
      v31 = v35;
      LODWORD(v32) = v36;
      BYTE4(v32) = v37;
    }
    LOBYTE(v33) = 1;
    if (v34[0])
    {
      if (*((_DWORD *)v34[0] + 6) == 2)
      {
        if ((*((_WORD *)v34[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34[0], v11);
      }
      else
      {
        *((_DWORD *)v34[0] + 6) -= 2;
      }
    }
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27, v11);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    v13 = *(_DWORD *)(a2 + 24) - 2;
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if ((*(_WORD *)(a2 + 30) & 0x400) != 0)
        goto LABEL_53;
      WebCore::Node::removedLastRef((WebCore::Node *)a2, v11);
      v13 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      *(_DWORD *)(a2 + 24) = v13;
    }
    v14 = v13 - 2;
    if (v14)
    {
      *(_DWORD *)(a2 + 24) = v14;
LABEL_21:
      if (!v12)
        goto LABEL_42;
      WebCore::endOfBlock((unsigned int *)&v31, 0, &v35);
      goto LABEL_34;
    }
LABEL_53:
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a2, v11);
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 520) == a2)
  {
    v6 = *(_WORD *)(a2 + 28);
    *(_DWORD *)(a2 + 24) += 4;
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 80);
      v8 = 0;
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 4);
    }
    else
    {
      LODWORD(v7) = 0;
      v8 = 4;
    }
    v27 = (WebCore::Node *)a2;
    v28 = v7;
    v29 = v8;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v27, (uint64_t)&v35);
    v38 = 1;
    WebCore::VisiblePosition::next((unsigned __int8 *)&v35, 0, 0, (uint64_t)&v31);
    v16 = v35;
    v35 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v15);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a2, v15);
    }
    else
    {
      *(_DWORD *)(a2 + 24) -= 2;
    }
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a2, v15);
    }
    else
    {
      *(_DWORD *)(a2 + 24) -= 2;
    }
    if (v31)
    {
      WebCore::startOfBlock((unsigned int *)&v31, 0, &v35);
LABEL_34:
      v18 = WebCore::operator==((uint64_t *)&v31, (uint64_t *)&v35);
      v19 = v35;
      v35 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v17);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      if (!v18)
        *(_BYTE *)(a1 + 283) = 1;
      v20 = v31;
      v31 = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, v17);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
    }
  }
LABEL_42:
  WebCore::updatePositionForNodeRemoval((uint64_t *)(a1 + 464), (WebCore::Position *)a2, a3);
  WebCore::updatePositionForNodeRemoval((uint64_t *)(a1 + 480), (WebCore::Position *)a2, v21);
  WebCore::updatePositionForNodeRemoval((uint64_t *)(a1 + 496), (WebCore::Position *)a2, v22);
  return WebCore::CompositeEditCommand::removeNode((WebCore::Node *)a1, a2, v3);
}

uint64_t *WebCore::updatePositionForNodeRemoval(uint64_t *this, WebCore::Position *a2, WebCore::Node *a3)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;

  v3 = *this;
  if (*this)
  {
    v4 = this;
    if ((*((_BYTE *)this + 12) & 7) != 0)
    {
      switch(*((_BYTE *)this + 12) & 7)
      {
        case 1:
          if ((WebCore::Position *)v3 == a2)
            goto LABEL_37;
          while (2)
          {
            if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
            {
              v13 = *(_QWORD *)(v3 + 200);
              if (!v13)
                return this;
              v9 = (uint64_t *)(v13 + 8);
            }
            else
            {
              v9 = (uint64_t *)(v3 + 32);
            }
            v3 = *v9;
            if ((WebCore::Position *)v3 == a2 || v3 == 0)
              goto LABEL_43;
            continue;
          }
        case 2:
          if ((WebCore::Position *)v3 == a2)
            goto LABEL_27;
          do
          {
            if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
            {
              v23 = *(_QWORD *)(v3 + 200);
              if (!v23)
                return this;
              v21 = (uint64_t *)(v23 + 8);
            }
            else
            {
              v21 = (uint64_t *)(v3 + 32);
            }
            v3 = *v21;
          }
          while ((WebCore::Position *)v3 != a2 && v3 != 0);
          if (v3)
          {
LABEL_27:
            WebCore::positionInParentAfterNode((uint64_t)a2, a2, (uint64_t)&v24);
            goto LABEL_38;
          }
          return this;
        case 3:
          if ((WebCore::Position *)v3 == a2)
            goto LABEL_37;
          do
          {
            if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
            {
              v14 = *(_QWORD *)(v3 + 200);
              if (!v14)
                return this;
              v11 = (uint64_t *)(v14 + 8);
            }
            else
            {
              v11 = (uint64_t *)(v3 + 32);
            }
            v3 = *v11;
          }
          while ((WebCore::Position *)v3 != a2 && v3 != 0);
          goto LABEL_43;
        case 4:
          if ((WebCore::Position *)v3 == a2)
            goto LABEL_37;
          do
          {
            if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
            {
              v17 = *(_QWORD *)(v3 + 200);
              if (!v17)
                return this;
              v15 = (uint64_t *)(v17 + 8);
            }
            else
            {
              v15 = (uint64_t *)(v3 + 32);
            }
            v3 = *v15;
          }
          while ((WebCore::Position *)v3 != a2 && v3 != 0);
LABEL_43:
          if (v3)
          {
LABEL_37:
            WebCore::positionInParentBeforeNode(a2, a2, (uint64_t)&v24);
LABEL_38:
            WebCore::Position::operator=(v4, &v24);
            return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v24);
          }
          return this;
        default:
          return this;
      }
    }
    if (v3 != *((_QWORD *)a2 + 4))
      goto LABEL_61;
    v5 = *((_DWORD *)this + 2);
    v6 = *((_QWORD *)a2 + 6);
    for (i = 0; ; ++i)
    {
      v8 = v6 & 0xFFFFFFFFFFFFLL;
      if (!v8)
        break;
      v6 = *(_QWORD *)(v8 + 48);
    }
    if (v5 > i)
    {
      return (uint64_t *)WebCore::Position::moveToOffset((uint64_t)this, v5 - 1);
    }
    else
    {
LABEL_61:
      if ((WebCore::Position *)v3 == a2)
        goto LABEL_8;
      do
      {
        if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
        {
          v20 = *(_QWORD *)(v3 + 200);
          if (!v20)
            return this;
          v18 = (uint64_t *)(v20 + 8);
        }
        else
        {
          v18 = (uint64_t *)(v3 + 32);
        }
        v3 = *v18;
      }
      while ((WebCore::Position *)v3 != a2 && v3 != 0);
      if (v3)
      {
LABEL_8:
        WebCore::positionInParentBeforeNode(a2, a2, (uint64_t)&v24);
        this = (uint64_t *)*v4;
        *v4 = v24;
        if (this)
        {
          if (*((_DWORD *)this + 6) == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)this);
          }
          else
          {
            *((_DWORD *)this + 6) -= 2;
          }
        }
        *((_DWORD *)v4 + 2) = v25;
        *((_BYTE *)v4 + 12) = v26;
      }
    }
  }
  return this;
}

unsigned int *WebCore::DeleteSelectionCommand::removeNode(uint64_t a1, WebCore::Node *this, WebCore::Node *a3)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t v10;
  WebCore::Node *v11;
  __int16 v13;
  WebCore::Node *v14;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  BOOL v29;
  void *v30;
  uint64_t v31;
  WebCore::Node *v32;
  WebCore::Node *v34;

  result = (unsigned int *)*((_QWORD *)this + 4);
  if (!result)
    return result;
  *((_DWORD *)this + 6) += 2;
  v7 = *(_QWORD *)(a1 + 544);
  v8 = *(_QWORD *)(a1 + 552);
  if (v7 == v8)
    goto LABEL_28;
  if (v7)
  {
    v9 = *(_WORD *)(v7 + 28);
    if ((v9 & 0xF000) == 0x9000)
    {
      if (**((_QWORD **)this + 5) == v7 && (*((_WORD *)this + 14) & 0xF000) != 0x9000)
      {
        if (v8)
        {
          v10 = *((_QWORD *)this + 2);
          if ((v10 & 0x8000000000000) != 0)
            goto LABEL_16;
        }
      }
    }
    else if ((v9 & 4) != 0)
    {
      if (*(_QWORD *)(v7 + 80))
      {
        v10 = *((_QWORD *)this + 2);
        if (((v10 >> 51) & 1) == (*(_BYTE *)(v7 + 22) & 8) >> 3)
        {
          v11 = this;
          do
            v11 = (WebCore::Node *)*((_QWORD *)v11 + 4);
          while (v11 != (WebCore::Node *)v7 && v11 != 0);
          if (v8 && v11)
          {
LABEL_16:
            v13 = *(_WORD *)(v8 + 28);
            if ((v13 & 0xF000) == 0x9000)
            {
              if (**((_QWORD **)this + 5) == v8
                && (*((_WORD *)this + 14) & 0xF000) != 0x9000
                && (v10 & 0x8000000000000) != 0)
              {
LABEL_28:
                if (((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
                   || *(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) - 37 >= 4)
                  && !WebCore::Node::isRootEditableElement(this))
                {
                  result = (unsigned int *)WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(a1, (uint64_t)this, a3);
                  goto LABEL_93;
                }
                v16 = *((_WORD *)this + 14);
                if ((v16 & 4) == 0 || (v17 = *((_QWORD *)this + 10)) == 0)
                {
                  if ((v16 & 8) == 0)
                  {
LABEL_130:
                    __break(0xC471u);
                    JUMPOUT(0x195A9CFE8);
                  }
LABEL_34:
                  v18 = *(_QWORD *)(a1 + 16);
                  *(_DWORD *)(v18 + 24) += 2;
                  WebCore::Document::updateLayout(v18, 2u, 0);
                  if (*(_DWORD *)(v18 + 24) == 2)
                  {
                    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v18, v19);
                  }
                  else
                  {
                    *(_DWORD *)(v18 + 24) -= 2;
                  }
                  v20 = (WebCore::Node *)*((_QWORD *)this + 10);
                  if (!v20)
                    goto LABEL_92;
                  if ((*((_WORD *)v20 + 14) & 8) == 0)
                  {
                    while (v20 != this)
                    {
                      while (1)
                      {
                        v21 = (WebCore::Node *)*((_QWORD *)v20 + 7);
                        if (v21)
                          break;
                        v20 = (WebCore::Node *)*((_QWORD *)v20 + 4);
                        if (v20)
                          v22 = v20 == this;
                        else
                          v22 = 1;
                        if (v22)
                          goto LABEL_92;
                      }
                      v20 = (WebCore::Node *)*((_QWORD *)v20 + 7);
                      if ((*((_WORD *)v21 + 14) & 8) != 0)
                        goto LABEL_62;
                    }
LABEL_92:
                    result = WebCore::DeleteSelectionCommand::insertBlockPlaceholderForTableCellIfNeeded((unsigned int *)a1, this);
                    goto LABEL_93;
                  }
                  v21 = (WebCore::Node *)*((_QWORD *)this + 10);
LABEL_62:
                  *((_DWORD *)v21 + 6) += 2;
                  while (1)
                  {
                    v25 = v21;
                    v26 = (WebCore::Node *)*((_QWORD *)v21 + 10);
                    if (!v26)
                    {
                      if (v21 == this)
                        goto LABEL_85;
                      v26 = (WebCore::Node *)*((_QWORD *)v21 + 7);
                      if (!v26)
                      {
                        v27 = v21;
                        do
                        {
                          v27 = (WebCore::Node *)*((_QWORD *)v27 + 4);
                          if (!v27 || v27 == this)
                            goto LABEL_85;
                          v26 = (WebCore::Node *)*((_QWORD *)v27 + 7);
                        }
                        while (!v26);
                      }
                    }
                    if ((*((_WORD *)v26 + 14) & 8) != 0)
                    {
                      v21 = v26;
LABEL_84:
                      *((_DWORD *)v21 + 6) += 2;
                      goto LABEL_86;
                    }
                    while (v26 != this)
                    {
                      while (1)
                      {
                        v21 = (WebCore::Node *)*((_QWORD *)v26 + 7);
                        if (v21)
                          break;
                        v26 = (WebCore::Node *)*((_QWORD *)v26 + 4);
                        if (v26)
                          v29 = v26 == this;
                        else
                          v29 = 1;
                        if (v29)
                          goto LABEL_85;
                      }
                      v26 = (WebCore::Node *)*((_QWORD *)v26 + 7);
                      if ((*((_WORD *)v21 + 14) & 8) != 0)
                        goto LABEL_84;
                    }
LABEL_85:
                    v21 = 0;
LABEL_86:
                    WebCore::DeleteSelectionCommand::insertBlockPlaceholderForTableCellIfNeeded((unsigned int *)a1, v25);
                    if (*((_DWORD *)v25 + 6) == 2)
                    {
                      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v25, v30);
                    }
                    else
                    {
                      *((_DWORD *)v25 + 6) -= 2;
                    }
                    if (!v21)
                      goto LABEL_92;
                  }
                }
                *(_DWORD *)(v17 + 24) += 2;
                while ((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) != 0
                     && *(unsigned __int8 *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) - 37 < 4
                     || WebCore::Node::isRootEditableElement((WebCore::Node *)v17))
                {
                  if ((*(_WORD *)(v17 + 28) & 4) != 0)
                  {
                    v31 = *(_QWORD *)(v17 + 80);
                    if (v31)
                    {
LABEL_121:
                      *(_DWORD *)(v31 + 24) += 2;
                      goto LABEL_122;
                    }
                  }
                  if ((WebCore::Node *)v17 != this)
                  {
                    v31 = *(_QWORD *)(v17 + 56);
                    if (v31)
                      goto LABEL_121;
                    v34 = (WebCore::Node *)v17;
                    while (1)
                    {
                      v34 = (WebCore::Node *)*((_QWORD *)v34 + 4);
                      if (!v34 || v34 == this)
                        break;
                      v31 = *((_QWORD *)v34 + 7);
                      if (v31)
                        goto LABEL_121;
                    }
                  }
                  v31 = 0;
LABEL_122:
                  if (*(_DWORD *)(v17 + 24) == 2)
                  {
                    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v17, this);
                  }
                  else
                  {
                    *(_DWORD *)(v17 + 24) -= 2;
                  }
                  v17 = v31;
                  if (!v31)
                  {
                    if ((*((_WORD *)this + 14) & 8) == 0)
                      goto LABEL_130;
                    goto LABEL_34;
                  }
                }
                if ((WebCore::Node *)v17 != this)
                {
                  v31 = *(_QWORD *)(v17 + 56);
                  if (v31)
                  {
LABEL_112:
                    *(_DWORD *)(v31 + 24) += 2;
LABEL_113:
                    WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(a1, v17, a3);
                    goto LABEL_122;
                  }
                  v32 = (WebCore::Node *)v17;
                  while (1)
                  {
                    v32 = (WebCore::Node *)*((_QWORD *)v32 + 4);
                    if (!v32 || v32 == this)
                      break;
                    v31 = *((_QWORD *)v32 + 7);
                    if (v31)
                      goto LABEL_112;
                  }
                }
                v31 = 0;
                goto LABEL_113;
              }
            }
            else if ((v13 & 4) != 0
                   && *(_QWORD *)(v8 + 80)
                   && ((v10 >> 51) & 1) == (*(_BYTE *)(v8 + 22) & 8) >> 3)
            {
              v14 = this;
              do
                v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
              while (v14 != (WebCore::Node *)v8 && v14 != 0);
              if (v14)
                goto LABEL_28;
            }
          }
        }
      }
    }
  }
  result = (unsigned int *)WebCore::Node::computeEditability((uint64_t)result, 0, 1);
  if ((_DWORD)result)
    goto LABEL_28;
  if ((*((_WORD *)this + 14) & 4) == 0)
    goto LABEL_93;
  v23 = *((_QWORD *)this + 10);
  if (!v23)
    goto LABEL_93;
  *(_DWORD *)(v23 + 24) += 2;
  while (1)
  {
    v24 = v23;
    v23 = *(_QWORD *)(v23 + 56);
    if (!v23)
    {
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node *))(*(_QWORD *)a1 + 184))(a1, v24, a3);
      goto LABEL_54;
    }
    *(_DWORD *)(v23 + 24) += 2;
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node *))(*(_QWORD *)a1 + 184))(a1, v24, a3);
    if (*(WebCore::Node **)(v23 + 32) != this)
      break;
LABEL_54:
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v24, this);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
    if (!v23)
      goto LABEL_93;
  }
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v23, this);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v24, this);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
LABEL_93:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(this, this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

WebCore::Node *WebCore::DeleteSelectionCommand::deleteTextFromNode(WebCore::DeleteSelectionCommand *this, WebCore::Text *a2, int a3, int a4)
{
  char v8;
  WebCore::Text *v9;
  int v11;
  int v12;
  char v13;
  char v14;
  WebCore::Text *v15;
  int v17;
  int v18;
  char v19;
  char v20;
  char v21;
  WebCore::Text *v23;
  int v24;
  int v25;
  WebCore::Text *v26;
  int v27;
  int v28;
  char v29;
  char v30;

  v8 = *((_BYTE *)this + 476);
  if ((v8 & 7) == 0)
  {
    v9 = (WebCore::Text *)*((_QWORD *)this + 58);
    if (v9 && v9 == a2)
    {
      v11 = *((_DWORD *)this + 118);
      if (v11 <= a4 + a3)
      {
        v12 = a3;
        if (v11 <= a3)
          goto LABEL_14;
      }
      else
      {
        v12 = v11 - a4;
      }
      *((_DWORD *)this + 118) = v12;
      if ((v8 & 8) != 0)
      {
        if (((*(uint64_t (**)(WebCore::Text *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
        {
          v13 = 0;
        }
        else if (v12)
        {
          v13 = 2;
        }
        else
        {
          v13 = 1;
        }
        *((_BYTE *)this + 476) = *((_BYTE *)this + 476) & 0xF8 | v13;
      }
    }
  }
LABEL_14:
  v14 = *((_BYTE *)this + 492);
  if ((v14 & 7) == 0)
  {
    v15 = (WebCore::Text *)*((_QWORD *)this + 60);
    if (v15 && v15 == a2)
    {
      v17 = *((_DWORD *)this + 122);
      if (v17 <= a4 + a3)
      {
        v18 = a3;
        if (v17 <= a3)
          goto LABEL_27;
      }
      else
      {
        v18 = v17 - a4;
      }
      *((_DWORD *)this + 122) = v18;
      if ((v14 & 8) != 0)
      {
        if (((*(uint64_t (**)(WebCore::Text *))(*(_QWORD *)v15 + 208))(v15) & 1) != 0)
        {
          v19 = 0;
        }
        else if (v18)
        {
          v19 = 2;
        }
        else
        {
          v19 = 1;
        }
        *((_BYTE *)this + 492) = *((_BYTE *)this + 492) & 0xF8 | v19;
      }
    }
  }
LABEL_27:
  v20 = *((_BYTE *)this + 508);
  if ((v20 & 7) == 0)
  {
    v23 = (WebCore::Text *)*((_QWORD *)this + 62);
    if (v23)
    {
      if (v23 == a2)
      {
        v24 = *((_DWORD *)this + 126);
        if (v24 <= a4 + a3)
        {
          v25 = a3;
          if (v24 <= a3)
            goto LABEL_28;
        }
        else
        {
          v25 = v24 - a4;
        }
        *((_DWORD *)this + 126) = v25;
        if ((v20 & 8) != 0)
        {
          if (((*(uint64_t (**)(WebCore::Text *))(*(_QWORD *)v23 + 208))(v23) & 1) != 0)
          {
            v29 = 0;
          }
          else if (v25)
          {
            v29 = 2;
          }
          else
          {
            v29 = 1;
          }
          *((_BYTE *)this + 508) = *((_BYTE *)this + 508) & 0xF8 | v29;
        }
      }
    }
  }
LABEL_28:
  v21 = *((_BYTE *)this + 460);
  if ((v21 & 7) == 0)
  {
    v26 = (WebCore::Text *)*((_QWORD *)this + 56);
    if (v26)
    {
      if (v26 == a2)
      {
        v27 = *((_DWORD *)this + 114);
        if (v27 <= a4 + a3)
        {
          v28 = a3;
          if (v27 <= a3)
            return WebCore::CompositeEditCommand::deleteTextFromNode(this, a2, a3, a4);
        }
        else
        {
          v28 = v27 - a4;
        }
        *((_DWORD *)this + 114) = v28;
        if ((v21 & 8) != 0)
        {
          if (((*(uint64_t (**)(WebCore::Text *))(*(_QWORD *)v26 + 208))(v26) & 1) != 0)
          {
            v30 = 0;
          }
          else if (v28)
          {
            v30 = 2;
          }
          else
          {
            v30 = 1;
          }
          *((_BYTE *)this + 460) = *((_BYTE *)this + 460) & 0xF8 | v30;
        }
      }
    }
  }
  return WebCore::CompositeEditCommand::deleteTextFromNode(this, a2, a3, a4);
}

uint64_t WebCore::canHaveChildrenForEditing(WebCore *this, const WebCore::Node *a2)
{
  __int16 v2;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 2) != 0
    || (v2 & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 208))(this);
  }
}

unint64_t WebCore::caretMaxOffset(WebCore *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 2) != 0 && (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A9D3DCLL);
    }
    return (unint64_t)WebCore::RenderText::caretMaxOffset((WebCore::RenderText *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL), a2);
  }
  else if ((v2 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
      return *(unsigned int *)(v5 + 4);
    else
      return 0;
  }
  else if ((v2 & 4) != 0 && (v3 = *((_QWORD *)this + 10)) != 0)
  {
    LODWORD(result) = 0;
    do
    {
      result = (result + 1);
      v3 = *(_QWORD *)(v3 + 56);
    }
    while (v3);
  }
  else
  {
    return (*(unsigned int (**)(WebCore *, const WebCore::Node *))(*(_QWORD *)this + 208))(this, a2) ^ 1;
  }
  return result;
}

uint64_t WebCore::lastOffsetForEditing(WebCore *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
      return *(unsigned int *)(v5 + 4);
    else
      return 0;
  }
  else if ((v2 & 4) != 0 && (v3 = *((_QWORD *)this + 10)) != 0)
  {
    LODWORD(result) = 0;
    do
    {
      result = (result + 1);
      v3 = *(_QWORD *)(v3 + 56);
    }
    while (v3);
  }
  else
  {
    return (*(unsigned int (**)(WebCore *, const WebCore::Node *))(*(_QWORD *)this + 208))(this, a2) ^ 1;
  }
  return result;
}

WebCore::Node *WebCore::enclosingBlock@<X0>(uint64_t *a1@<X0>, WebCore::Node *a2@<X1>, WebCore::Node **a3@<X8>)
{
  int v3;
  uint64_t v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *result;
  WebCore::Node *v9[2];
  uint64_t v10;

  v3 = (int)a2;
  WebCore::firstPositionInOrBeforeNode(*a1, a2, (uint64_t)v9);
  if (v3 != 1)
  {
    v6 = v9[0];
    if (v9[0])
    {
      *((_DWORD *)v9[0] + 6) += 2;
      goto LABEL_18;
    }
LABEL_28:
    v7 = 0;
    goto LABEL_38;
  }
  WebCore::highestEditableRoot((uint64_t)v9, 0, &v10);
  v5 = v10;
  v6 = v9[0];
  if (v9[0])
  {
    *((_DWORD *)v9[0] + 6) += 2;
    if (!v5)
    {
LABEL_18:
      while (1)
      {
        v7 = v6;
        if ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
        {
          goto LABEL_37;
        }
        v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
        if (v6)
          *((_DWORD *)v6 + 6) += 2;
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
        if (!v6)
          goto LABEL_28;
      }
    }
    while (1)
    {
      v7 = v6;
      if (WebCore::Node::computeEditability((uint64_t)v6, 0, 1))
      {
        if ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
        {
          goto LABEL_30;
        }
        if (v6 == (WebCore::Node *)v5)
          break;
      }
      v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
      if (v6)
        *((_DWORD *)v6 + 6) += 2;
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
      if (!v6)
        goto LABEL_29;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      v7 = 0;
    }
    else
    {
      v7 = 0;
      *(_DWORD *)(v5 + 24) -= 2;
    }
    goto LABEL_34;
  }
LABEL_29:
  v7 = 0;
LABEL_30:
  if (v5)
  {
LABEL_34:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (!v7)
  {
LABEL_38:
    *a3 = v7;
    goto LABEL_39;
  }
LABEL_37:
  if ((*((_WORD *)v7 + 14) & 8) != 0)
    goto LABEL_38;
  *a3 = 0;
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
LABEL_39:
  result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::isTableRowEmpty(WebCore *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  _BOOL4 v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  char v18;
  WebCore::Node *v19[2];
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  WebCore::Node *v24[2];
  char v25;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    return 0;
  if ((v2 & 4) == 0)
    return 1;
  v4 = *((_QWORD *)this + 10);
  v3 = 1;
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    while (1)
    {
      v5 = v4;
      if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 37)
          goto LABEL_29;
        v6 = *(_WORD *)(v4 + 28);
      }
      else
      {
        v6 = *(_WORD *)(v4 + 28);
        if ((v6 & 0x10) == 0)
          goto LABEL_29;
        v14 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
        if (v14 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) && v14 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
          goto LABEL_29;
      }
      *(_DWORD *)(v4 + 24) += 2;
      v21 = v4;
      v22 = 0;
      if ((v6 & 1) != 0)
        v7 = v23 & 0xF0;
      else
        v7 = v23 & 0xF0 | 3;
      v23 = v7;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v21, (uint64_t)v24);
      v25 = 1;
      v8 = *(_WORD *)(v4 + 28);
      *(_DWORD *)(v4 + 24) += 2;
      if ((v8 & 1) != 0)
      {
        v10 = *(_QWORD *)(v4 + 80);
        if (v10)
          LODWORD(v10) = *(_DWORD *)(v10 + 4);
        v16 = v4;
        v17 = v10;
        v9 = v18 & 0xF0;
      }
      else
      {
        v16 = v4;
        v17 = 0;
        v9 = v18 & 0xF0 | 4;
      }
      v18 = v9;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v16, (uint64_t)v19);
      v20 = 1;
      v11 = WebCore::operator==((uint64_t *)v24, (uint64_t *)v19);
      v12 = v19[0];
      v19[0] = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, a2);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      v13 = v24[0];
      v24[0] = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, a2);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v11)
      {
        if (*(_DWORD *)(v5 + 24) != 2)
        {
          v3 = 0;
          *(_DWORD *)(v5 + 24) -= 2;
          return v3;
        }
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        return 0;
      }
LABEL_29:
      v4 = *(_QWORD *)(v5 + 56);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v4)
        return 1;
    }
  }
  return v3;
}

unsigned int *WebCore::DeleteSelectionCommand::calculateTypingStyleAfterDelete(unsigned int *this, void *a2)
{
  unsigned int *v2;
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WebCore::EditingStyle *v13;
  WebCore::EditingStyle *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;

  if (!*((_QWORD *)this + 66))
    return this;
  v2 = this;
  v3 = (_DWORD *)*((_QWORD *)this + 67);
  if (!v3)
  {
    *((_QWORD *)this + 67) = 0;
    goto LABEL_38;
  }
  v4 = *((_QWORD *)this + 58);
  if (!v4)
    goto LABEL_30;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  do
  {
    v6 = v4;
    if ((*(_WORD *)(v4 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
    {
      goto LABEL_21;
    }
    v7 = *(_QWORD *)(v4 + 104);
    if (!v7)
    {
LABEL_19:
      v11 = v5;
      goto LABEL_20;
    }
    v8 = *(unsigned int *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      v10 = *(unsigned int *)(v7 + 52);
      if (!v10)
        goto LABEL_19;
    }
    else
    {
      v9 = v7 + 32;
      v10 = v8 >> 5;
      if (!(v8 >> 5))
        goto LABEL_19;
    }
    v11 = (_QWORD *)(v9 + 8);
    while (1)
    {
      v12 = *(v11 - 1);
      if (v12 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        break;
      }
      v11 += 2;
      if (!--v10)
        goto LABEL_19;
    }
LABEL_20:
    if ((MEMORY[0x19AEA53F4](*v11, "cite", 4) & 1) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      goto LABEL_34;
    }
LABEL_21:
    v4 = *(_QWORD *)(v4 + 32);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  while (v4);
  v3 = (_DWORD *)*((_QWORD *)v2 + 67);
  if (!v3)
    goto LABEL_31;
LABEL_30:
  ++*v3;
LABEL_31:
  v13 = (WebCore::EditingStyle *)*((_QWORD *)v2 + 66);
  *((_QWORD *)v2 + 66) = v3;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v13, (WTF::StringImpl *)a2);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
LABEL_34:
  v14 = (WebCore::EditingStyle *)*((_QWORD *)v2 + 67);
  *((_QWORD *)v2 + 67) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v14, (WTF::StringImpl *)a2);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
LABEL_38:
  WebCore::EditingStyle::prepareToApplyAt(*((_QWORD *)v2 + 66), (uint64_t *)v2 + 58, 1);
  v16 = *((_QWORD *)v2 + 66);
  v17 = *(_QWORD *)(v16 + 8);
  if ((!v17 || !*(_DWORD *)(v17 + 28))
    && *(float *)(v16 + 20) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*(_BYTE *)(v16 + 16) & 0x1E) == 0)
  {
    *((_QWORD *)v2 + 66) = 0;
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v16, v15);
      WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v18 = *((_QWORD *)v2 + 2);
  *(_DWORD *)(v18 + 24) += 2;
  v19 = *(_QWORD *)(v18 + 3064);
  v20 = (_DWORD *)*((_QWORD *)v2 + 66);
  if (v20)
    ++*v20;
  this = *(unsigned int **)(v19 + 200);
  *(_QWORD *)(v19 + 200) = v20;
  if (this)
  {
    if (*this == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)this, v15);
      this = (unsigned int *)WTF::fastFree(v21, v22);
    }
    else
    {
      --*this;
    }
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v18, v15);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::DeleteSelectionCommand::clearTransientState(WebCore::DeleteSelectionCommand *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *result;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  __int16 v28;
  char v29;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v28 = 1;
  v29 = 1;
  v27 = 0;
  WebCore::VisibleSelection::operator=((uint64_t *)this + 37, &v10);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v10);
  v3 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 102) = 0;
  *((_BYTE *)this + 412) &= 0xF0u;
  v4 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 106) = 0;
  *((_BYTE *)this + 428) &= 0xF0u;
  v5 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 110) = 0;
  *((_BYTE *)this + 444) &= 0xF0u;
  v6 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 114) = 0;
  *((_BYTE *)this + 460) &= 0xF0u;
  v7 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 118) = 0;
  *((_BYTE *)this + 476) &= 0xF0u;
  v8 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 122) = 0;
  *((_BYTE *)this + 492) &= 0xF0u;
  result = (unsigned int *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  *((_DWORD *)this + 126) = 0;
  *((_BYTE *)this + 508) &= 0xF0u;
  return result;
}

uint64_t WebCore::DeleteSelectionCommand::doApply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  int v6;
  uint64_t *v7;
  uint64_t (*v8)();
  BOOL v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  void *v15;
  int v16;
  char *v17;
  Node *var0;
  unsigned int v19;
  Node *v20;
  uint64_t i;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int var1;
  Node *v26;
  uint64_t *v27;
  uint64_t v28;
  WebCore::Node *v29;
  void *v30;
  WebCore::Node *v31;
  int v32;
  void *v33;
  const WebCore::VisiblePosition *v34;
  uint64_t (*v35)();
  _BOOL4 v36;
  WebCore::Node *v37;
  int v38;
  const WebCore::VisiblePosition *v39;
  uint64_t (*v40)();
  BOOL v41;
  WebCore::Node *v42;
  int v43;
  VisiblePosition *v44;
  const WebCore::VisiblePosition *v45;
  _BYTE *v46;
  Node *v47;
  uint64_t v48;
  Node *v49;
  int v50;
  const WebCore::VisiblePosition *v51;
  Node *v52;
  WebCore::Node *v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  WebCore::Node *v57;
  int v58;
  void *v60;
  WebCore *v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  WebCore::EditingStyle *v70;
  WebCore::Node *v71;
  void *v72;
  WebCore::Node *v73;
  uint64_t v74;
  WebCore *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  WebCore::EditingStyle *v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::EditingStyle *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  Node *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WebCore::Node *v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  Node *v109;
  char v110;
  Node *v111;
  WTF *v112;
  WTF *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  WebCore::Node *v117;
  WebCore::Node *v118;
  WebCore::Node *v119;
  WebCore::Node *v120;
  Node *v121;
  WebCore::Node *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  BOOL v129;
  char v130;
  uint64_t *v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  char v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  char v142;
  uint64_t *v143;
  char v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t (*v147)();
  uint64_t v148;
  _BOOL4 v149;
  WebCore::Node *v150;
  uint64_t (*v151)();
  BOOL v152;
  WebCore::Node *v153;
  _BOOL4 v154;
  int v155;
  WTF *v156;
  void *v157;
  WebCore::Node *v158;
  Node *v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  char v163;
  WebCore::Node *v164;
  int v165;
  uint64_t v166;
  WebCore::Position *v167;
  uint64_t v168;
  int v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  WebCore::Node *v175;
  WebCore::Node *v176;
  uint64_t v177;
  uint64_t (*v178)();
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t j;
  uint64_t (*v183)();
  uint64_t v184;
  WebCore::Node *v185;
  WebCore::Node *v186;
  __int16 v187;
  __int16 v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  __int16 v192;
  WebCore::RenderText *v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  __int16 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  int v206;
  int v208;
  BOOL v209;
  int v210;
  __int16 v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  __int16 v217;
  uint64_t v218;
  int v219;
  Node *v220;
  void *v221;
  WebCore::Node *v222;
  Node *v223;
  WebCore::Node *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  _WORD *v229;
  int v230;
  __int16 v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WebCore::Editor *v237;
  WebCore::Editor *v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  __int16 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  __int16 v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  WebCore::Node *v254;
  char v255;
  WebCore::Node *v256;
  uint64_t v257;
  __int16 v258;
  uint64_t v259;
  uint64_t v261;
  uint64_t v262;
  char v263;
  int v264;
  BOOL v265;
  int v266;
  __int16 v267;
  uint64_t v268;
  signed int v269;
  __int16 v270;
  WebCore::RenderText *v271;
  uint64_t v272;
  signed int v273;
  uint64_t v274;
  uint64_t v275;
  WebCore::Node *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  __int16 v283;
  int v285;
  BOOL v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  __int16 v292;
  __int16 v293;
  int v294;
  int v295;
  int v296;
  uint64_t v297;
  int v298;
  int v299;
  BOOL v300;
  _WORD *v301;
  int v302;
  __int16 v303;
  uint64_t v304;
  uint64_t v305;
  __int16 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t (*v309)();
  uint64_t v310;
  __int16 v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t (*v318)();
  uint64_t v319;
  __int16 v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  WebCore::Node *v327;
  Node *v328;
  int v329;
  int v330;
  __int16 v331;
  Node *v332;
  int v334;
  Node *v335;
  uint64_t v336;
  unsigned int v337;
  char v338;
  WebCore::Position *v339;
  _BOOL4 v340;
  void *v341;
  __int16 v342;
  Node *v343;
  WebCore::Node *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _DWORD *v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  __int16 v357;
  uint64_t v358;
  int v359;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  WebCore::Node *v366;
  WTF::String *v367;
  __n128 v368;
  uint64_t m;
  uint64_t v370;
  int v371;
  char v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  WebCore::Node *v377;
  uint64_t v378;
  const WebCore::VisiblePosition *v379;
  void *v380;
  Node *v381;
  WebCore::Node *v382;
  WebCore::Editor *v383;
  void *v384;
  WebCore::Editor *v385;
  uint64_t v386;
  void *v387;
  BOOL v388;
  int v389;
  BOOL v390;
  int v391;
  int v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  WebCore::Node *v398;
  void *v399;
  Node *v400;
  Node *v401;
  uint64_t v402;
  Node *v403;
  Node *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  char v409;
  _BOOL4 v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  Node *v414;
  WebCore::Node *v415;
  WebCore::Node *v416;
  uint64_t (*v417)();
  WebCore::RenderBlock **v418;
  _BOOL4 v419;
  WebCore::Node *v420;
  uint64_t v421;
  BOOL *v422;
  int v423;
  WebCore::RenderBlock **v424;
  uint64_t v425;
  BOOL *v426;
  Node *v427;
  _BOOL4 v428;
  WebCore::Node *v429;
  Node *v430;
  Node *v431;
  void *v432;
  WebCore::Node *v433;
  int v434;
  Node *v435;
  Node *v436;
  uint64_t v437;
  int v438;
  uint64_t (*v439)();
  BOOL v440;
  WebCore::Node *v441;
  __int16 v442;
  __int16 v443;
  uint64_t v444;
  uint64_t v445;
  Node *v446;
  int v447;
  uint64_t v448;
  Node *v449;
  void *v450;
  WebCore::Node *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  WebCore::Editor *v455;
  WebCore::Editor *v456;
  uint64_t v457;
  char v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v466;
  uint64_t v467;
  int v468;
  BOOL v469;
  int v470;
  __int16 v471;
  uint64_t v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  _DWORD *v476;
  char v477;
  uint64_t v478;
  WebCore::Editor *v479;
  WebCore::Editor *v480;
  uint64_t v481;
  uint64_t v482;
  Node *v483;
  Node *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int k;
  uint64_t v489;
  WebCore *v490;
  uint64_t *v491;
  uint64_t v492;
  int v493;
  _BYTE *v494;
  WebCore::Node *v495;
  uint64_t v496;
  WebCore::Node *v497;
  int v498;
  char v499;
  uint64_t v500;
  int v501;
  char v502;
  uint64_t v503;
  int v504;
  char v505;
  uint64_t v506;
  int v507;
  char v508;
  uint64_t v509;
  int v510;
  char v511;
  char v512;
  char v513;
  char v514;
  WebCore::Node *v515;
  WTF::StringImpl *v516;
  uint64_t v517;
  int v518;
  char v519;
  WebCore::Node *v520[2];
  char v521;
  VisiblePosition v522;
  int v523;
  unsigned __int8 v524;
  VisiblePosition v525;
  uint64_t v526;
  uint64_t v527;
  WebCore::Node *v528;
  VisiblePosition v529;
  VisiblePosition v530;
  const char *v531;
  uint64_t v532;
  char v533;

  v1 = this;
  if (!*(_BYTE *)(this + 280))
    this = (uint64_t)WebCore::VisibleSelection::operator=((uint64_t *)(this + 296), (uint64_t *)(this + 128));
  if (*(_BYTE *)(v1 + 393) != 2)
    return this;
  v2 = *(_QWORD *)(v1 + 360);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 8) == 0)
      return this;
  }
  v3 = *(_QWORD *)(v1 + 376);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      return this;
  }
  if (!v2)
    return this;
  v4 = *(_BYTE *)(v1 + 372) & 7;
  if (v4 > 4)
    return this;
  if (((1 << v4) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return this;
  }
  *(_DWORD *)(v2 + 24) += 2;
  this = WebCore::Node::computeEditability(v2, 0, 0);
  v6 = this;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (!v6)
    return this;
  v7 = (uint64_t *)(v1 + 360);
  if (*(_BYTE *)(v1 + 393) != 2)
  {
    v516 = 0;
    goto LABEL_51;
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 360), (uint64_t)&v522);
  v522.var1 = 1;
  if (v522.var0.var0.var0)
    v8 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_47;
  WebCore::startOfWord((uint64_t)&v522, 0, (uint64_t)&v495);
  v9 = WebCore::operator==((uint64_t *)&v522, (uint64_t *)&v495);
  v10 = v495;
  v495 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v5);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (!v9)
    goto LABEL_47;
  WebCore::VisiblePosition::next((unsigned __int8 *)&v522, 0, 0, (uint64_t)&v531);
  WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v522, (uint64_t)&v531, (uint64_t)&v495);
  v11 = (uint64_t)v531;
  v531 = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v5);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if (!(_BYTE)v500)
  {
LABEL_47:
    v516 = 0;
    goto LABEL_48;
  }
  ++WebCore::ScriptDisallowedScope::s_count;
  v12 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(v12 + 24) += 2;
  v13 = *(_QWORD *)(v12 + 1496);
  if (!v13)
  {
    v14 = (WebCore::Node *)WebCore::Document::ensureMarkers((WebCore::Document *)v12);
    v16 = v500;
    if (!(_BYTE)v500)
      goto LABEL_1454;
    v13 = (uint64_t)v14;
  }
  v529.var0.var0.var0 = 0;
  *(_QWORD *)&v529.var0.var1 = 0;
  v17 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = off_1E33A3BE8;
  *((_QWORD *)v17 + 1) = &v529;
  v531 = v17;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v13, (uint64_t *)&v495, 64, &v531);
  (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v5);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  var0 = v529.var0.var0.var0;
  v19 = *((_DWORD *)&v529.var0 + 3);
  if (!*((_DWORD *)&v529.var0 + 3))
  {
LABEL_218:
    if (var0)
    {
      v529.var0.var0.var0 = 0;
      v529.var0.var1 = 0;
      WTF::fastFree((WTF *)var0, v5);
    }
    v516 = 0;
    goto LABEL_276;
  }
  v20 = v522.var0.var0.var0;
  if (!v522.var0.var0.var0)
  {
    v96 = 0;
    do
    {
      v22 = *(unsigned int **)(*(_QWORD *)((char *)v529.var0.var0.var0 + v96) + 8);
      if (v22[3] == v522.var0.var1)
        goto LABEL_255;
      v96 += 8;
    }
    while (8 * *((unsigned int *)&v529.var0 + 3) != v96);
LABEL_210:
    if (v19)
    {
      v97 = (Node *)((char *)var0 + 8 * v19);
      do
      {
        v98 = *(unsigned int **)var0;
        *(_QWORD *)var0 = 0;
        if (v98)
        {
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
          {
            atomic_store(1u, v98);
            WTF::fastFree((WTF *)v98, v5);
          }
        }
        var0 = (Node *)((char *)var0 + 8);
      }
      while (var0 != v97);
      var0 = v529.var0.var0.var0;
    }
    goto LABEL_218;
  }
  for (i = 8 * *((unsigned int *)&v529.var0 + 3) - 8; ; i -= 8)
  {
    v22 = *(unsigned int **)(*(_QWORD *)var0 + 8);
    v23 = v22[3];
    if (v20)
      break;
    if (v23 == v522.var0.var1)
      goto LABEL_255;
LABEL_39:
    if (!i)
    {
      v19 = *((_DWORD *)&v529.var0 + 3);
      var0 = v529.var0.var0.var0;
      goto LABEL_210;
    }
    var0 = (Node *)((char *)var0 + 8);
    v20 = v522.var0.var0.var0;
  }
  v24 = *((_DWORD *)v20 + 6);
  *((_DWORD *)v20 + 6) = v24 + 2;
  var1 = v522.var0.var1;
  if (v24)
  {
    *((_DWORD *)v20 + 6) = v24;
    goto LABEL_38;
  }
  if ((*((_WORD *)v20 + 15) & 0x400) != 0)
  {
LABEL_38:
    if (v23 == var1)
      goto LABEL_255;
    goto LABEL_39;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v20, v5);
  if (v23 != var1)
    goto LABEL_39;
  v22 = *(unsigned int **)var0;
  if (*(_QWORD *)var0)
    v22 = (unsigned int *)*((_QWORD *)v22 + 1);
LABEL_255:
  v107 = v22[24];
  if (v107 == 5)
  {
    v109 = (Node *)*((_QWORD *)v22 + 4);
    if (v109)
      *(_DWORD *)v109 += 2;
    v525.var0.var0.var0 = v109;
    v110 = *((_BYTE *)v22 + 80);
    v531 = "('";
    v532 = 3;
    v530.var0.var0.var0 = (Node *)"', state: ";
    *(_QWORD *)&v530.var0.var1 = 11;
    LOBYTE(v520[0]) = v110;
    LOBYTE(v517) = 41;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned char,char>((uint64_t)&v531, (uint64_t *)&v525, (uint64_t)&v530, (unsigned __int8 *)v520, (char *)&v517, &v516);
    if (!v516)
    {
      __break(0xC471u);
      JUMPOUT(0x195AA2AACLL);
    }
    v111 = v525.var0.var0.var0;
    v525.var0.var0.var0 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v111, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v111 -= 2;
    }
  }
  else
  {
    if (v107)
    {
      v108 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
LABEL_258:
        *(_DWORD *)v108 += 2;
    }
    else
    {
      v108 = (WTF::StringImpl *)*((_QWORD *)v22 + 4);
      if (v108)
        goto LABEL_258;
    }
    v516 = v108;
  }
  v112 = (WTF *)v529.var0.var0.var0;
  if (*((_DWORD *)&v529.var0 + 3))
  {
    v113 = (WTF *)((char *)v529.var0.var0.var0 + 8 * *((unsigned int *)&v529.var0 + 3));
    do
    {
      v114 = *(unsigned int **)v112;
      *(_QWORD *)v112 = 0;
      if (v114)
      {
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          atomic_store(1u, v114);
          WTF::fastFree((WTF *)v114, v5);
        }
      }
      v112 = (WTF *)((char *)v112 + 8);
    }
    while (v112 != v113);
    v112 = (WTF *)v529.var0.var0.var0;
  }
  if (v112)
  {
    v529.var0.var0.var0 = 0;
    v529.var0.var1 = 0;
    WTF::fastFree(v112, v5);
  }
LABEL_276:
  --WebCore::ScriptDisallowedScope::s_count;
  if ((_BYTE)v500)
  {
    v117 = v497;
    v497 = 0;
    if (v117)
    {
      if (*((_DWORD *)v117 + 6) == 2)
      {
        if ((*((_WORD *)v117 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v117, v5);
      }
      else
      {
        *((_DWORD *)v117 + 6) -= 2;
      }
    }
    v118 = v495;
    v495 = 0;
    if (v118)
    {
      if (*((_DWORD *)v118 + 6) == 2)
      {
        if ((*((_WORD *)v118 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v118, v5);
      }
      else
      {
        *((_DWORD *)v118 + 6) -= 2;
      }
    }
  }
LABEL_48:
  v26 = v522.var0.var0.var0;
  v522.var0.var0.var0 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v5);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
LABEL_51:
  v27 = (uint64_t *)(v1 + 376);
  v28 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(v28 + 24) += 2;
  if (!*(_BYTE *)(v1 + 284))
  {
    v29 = WebCore::enclosingTextFormControl((WebCore *)(v1 + 360), (const WebCore::Position *)v5);
    if (v29)
    {
      v31 = v29;
      *((_DWORD *)v29 + 6) += 2;
      if ((*((_BYTE *)v29 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v29))
      {
        v103 = *(_QWORD *)(v28 + 3056);
        if (!v103)
        {
          v237 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v237, (WebCore::Document *)v28);
          v238 = *(WebCore::Editor **)(v28 + 3056);
          *(_QWORD *)(v28 + 3056) = v237;
          if (v238)
          {
            WebCore::Editor::~Editor(v238, v30);
            if (*(_DWORD *)v239)
            {
              *(_QWORD *)(v239 + 496) = 0;
              *(_OWORD *)(v239 + 464) = 0u;
              *(_OWORD *)(v239 + 480) = 0u;
              *(_OWORD *)(v239 + 432) = 0u;
              *(_OWORD *)(v239 + 448) = 0u;
              *(_OWORD *)(v239 + 400) = 0u;
              *(_OWORD *)(v239 + 416) = 0u;
              *(_OWORD *)(v239 + 368) = 0u;
              *(_OWORD *)(v239 + 384) = 0u;
              *(_OWORD *)(v239 + 336) = 0u;
              *(_OWORD *)(v239 + 352) = 0u;
              *(_OWORD *)(v239 + 304) = 0u;
              *(_OWORD *)(v239 + 320) = 0u;
              *(_OWORD *)(v239 + 272) = 0u;
              *(_OWORD *)(v239 + 288) = 0u;
              *(_OWORD *)(v239 + 240) = 0u;
              *(_OWORD *)(v239 + 256) = 0u;
              *(_OWORD *)(v239 + 208) = 0u;
              *(_OWORD *)(v239 + 224) = 0u;
              *(_OWORD *)(v239 + 176) = 0u;
              *(_OWORD *)(v239 + 192) = 0u;
              *(_OWORD *)(v239 + 144) = 0u;
              *(_OWORD *)(v239 + 160) = 0u;
              *(_OWORD *)(v239 + 112) = 0u;
              *(_OWORD *)(v239 + 128) = 0u;
              *(_OWORD *)(v239 + 80) = 0u;
              *(_OWORD *)(v239 + 96) = 0u;
              *(_OWORD *)(v239 + 48) = 0u;
              *(_OWORD *)(v239 + 64) = 0u;
              *(_OWORD *)(v239 + 16) = 0u;
              *(_OWORD *)(v239 + 32) = 0u;
              *(_OWORD *)v239 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v239, v30);
            }
          }
          v103 = *(_QWORD *)(v28 + 3056);
        }
        v104 = *(_QWORD *)(v103 + 8);
        if (v104)
        {
          v105 = *(_QWORD *)(v104 + 8);
          if (v105)
            (*(void (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v105 + 488))(v105, v31);
        }
      }
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v30);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
  }
  v493 = *(unsigned __int8 *)(v1 + 392);
  WebCore::Position::downstream(v1 + 376, (WebCore::Node *)1, (uint64_t)&v515);
  if (*(_BYTE *)(v1 + 393) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 360), (uint64_t)&v522);
    v522.var1 = 1;
  }
  else
  {
    v32 = *(unsigned __int8 *)(v1 + 392);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 360), (uint64_t)&v522);
    v522.var1 = 1;
    if (!v32)
    {
      v121 = v522.var0.var0.var0;
      if (v522.var0.var0.var0)
      {
        *((_DWORD *)v522.var0.var0.var0 + 6) += 2;
        v495 = (WebCore::Node *)v121;
        LODWORD(v496) = v522.var0.var1;
        BYTE4(v496) = *((_BYTE *)&v522.var0 + 12);
        LOBYTE(v497) = 0;
        if (!WebCore::inSameLine((WebCore *)&v522, (const WebCore::VisiblePosition *)&v495, v34))
          v522.var1 = 0;
        v122 = v495;
        v495 = 0;
        if (v122)
        {
          if (*((_DWORD *)v122 + 6) == 2)
          {
            if ((*((_WORD *)v122 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v122, v33);
          }
          else
          {
            *((_DWORD *)v122 + 6) -= 2;
          }
        }
      }
    }
  }
  if (v522.var0.var0.var0)
    v35 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v35 = 0;
  if (!v35)
    goto LABEL_81;
  WebCore::startOfParagraph((uint64_t)&v522, 0, &v495);
  v36 = WebCore::operator==((uint64_t *)&v522, (uint64_t *)&v495);
  v37 = v495;
  v495 = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37, v33);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  if (v36)
  {
    if (*(_BYTE *)(v1 + 393) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 376), (uint64_t)&v531);
      v533 = 1;
    }
    else
    {
      v38 = *(unsigned __int8 *)(v1 + 392);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 376), (uint64_t)&v531);
      v533 = 1;
      if (v38)
        goto LABEL_68;
    }
    v119 = (WebCore::Node *)v531;
    if (v531)
    {
      *((_DWORD *)v531 + 6) += 2;
      v495 = v119;
      LODWORD(v496) = v532;
      BYTE4(v496) = BYTE4(v532);
      LOBYTE(v497) = 0;
      if (!WebCore::inSameLine((WebCore *)&v531, (const WebCore::VisiblePosition *)&v495, v39))
        v533 = 0;
      v120 = v495;
      v495 = 0;
      if (v120)
      {
        if (*((_DWORD *)v120 + 6) == 2)
        {
          if ((*((_WORD *)v120 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v120, v33);
        }
        else
        {
          *((_DWORD *)v120 + 6) -= 2;
        }
      }
    }
LABEL_68:
    if (v531)
      v40 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v40 = 0;
    if (!v40)
      goto LABEL_82;
    WebCore::endOfParagraph((WebCore::Node *)&v531, 0, &v495);
    v41 = WebCore::operator==((uint64_t *)&v531, (uint64_t *)&v495);
    v42 = v495;
    v495 = 0;
    if (v42)
    {
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v33);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    if (v41)
    {
      if (*(_BYTE *)(v1 + 393) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 376), (uint64_t)&v530);
        v530.var1 = 1;
      }
      else
      {
        v43 = *(unsigned __int8 *)(v1 + 392);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 376), (uint64_t)&v530);
        v530.var1 = 1;
        if (v43)
          goto LABEL_78;
      }
      v223 = v530.var0.var0.var0;
      if (v530.var0.var0.var0)
      {
        *((_DWORD *)v530.var0.var0.var0 + 6) += 2;
        v495 = (WebCore::Node *)v223;
        LODWORD(v496) = v530.var0.var1;
        BYTE4(v496) = *((_BYTE *)&v530.var0 + 12);
        LOBYTE(v497) = 0;
        if (!WebCore::inSameLine((WebCore *)&v530, (const WebCore::VisiblePosition *)&v495, v45))
          v530.var1 = 0;
        v224 = v495;
        v495 = 0;
        if (v224)
        {
          if (*((_DWORD *)v224 + 6) == 2)
          {
            if ((*((_WORD *)v224 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v224, v44);
          }
          else
          {
            *((_DWORD *)v224 + 6) -= 2;
          }
        }
      }
LABEL_78:
      v46 = (_BYTE *)(v1 + 283);
      *(_BYTE *)(v1 + 283) = !WebCore::lineBreakExistsAtVisiblePosition((WebCore::Node **)&v530, v44);
      v47 = v530.var0.var0.var0;
      v530.var0.var0.var0 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47, v33);
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
    }
    else
    {
LABEL_82:
      v46 = (_BYTE *)(v1 + 283);
      *(_BYTE *)(v1 + 283) = 0;
    }
    v48 = (uint64_t)v531;
    v531 = 0;
    if (v48)
    {
      if (*(_DWORD *)(v48 + 24) == 2)
      {
        if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v48, v33);
      }
      else
      {
        *(_DWORD *)(v48 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_81:
    v46 = (_BYTE *)(v1 + 283);
    *(_BYTE *)(v1 + 283) = 0;
  }
  v49 = v522.var0.var0.var0;
  v522.var0.var0.var0 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v49, v33);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  v494 = v46;
  if (!*v46)
    goto LABEL_114;
  if (*(_BYTE *)(v1 + 393) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 360), (uint64_t)&v522);
    v522.var1 = 1;
  }
  else
  {
    v50 = *(unsigned __int8 *)(v1 + 392);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 360), (uint64_t)&v522);
    v522.var1 = 1;
    if (!v50)
    {
      v220 = v522.var0.var0.var0;
      if (v522.var0.var0.var0)
      {
        *((_DWORD *)v522.var0.var0.var0 + 6) += 2;
        v495 = (WebCore::Node *)v220;
        LODWORD(v496) = v522.var0.var1;
        BYTE4(v496) = *((_BYTE *)&v522.var0 + 12);
        LOBYTE(v497) = 0;
        if (!WebCore::inSameLine((WebCore *)&v522, (const WebCore::VisiblePosition *)&v495, v51))
          v522.var1 = 0;
        v222 = v495;
        v495 = 0;
        if (v222)
        {
          if (*((_DWORD *)v222 + 6) == 2)
          {
            if ((*((_WORD *)v222 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v222, v221);
          }
          else
          {
            *((_DWORD *)v222 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::isLastPositionBeforeTable((WebCore::Node **)&v522, &v495);
  v52 = v522.var0.var0.var0;
  v522.var0.var0.var0 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52, v33);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  v53 = v495;
  if (!v495)
    goto LABEL_114;
  v54 = *v27;
  if (!*v27)
  {
    if ((*((_WORD *)v495 + 14) & 0xF000) != 0x9000
      || (WebCore::Node *)*MEMORY[0x28] != v495
      || (MEMORY[0x1C] & 0xF000) == 0x9000
      || (MEMORY[0x16] & 8) == 0)
    {
      goto LABEL_112;
    }
LABEL_111:
    *v46 = 0;
    goto LABEL_112;
  }
  v55 = *(_DWORD *)(v54 + 24);
  *(_DWORD *)(v54 + 24) = v55 + 2;
  v56 = *((_WORD *)v53 + 14);
  if ((v56 & 0xF000) == 0x9000)
  {
    if (**(WebCore::Node ***)(v54 + 40) == v53 && (*(_WORD *)(v54 + 28) & 0xF000) != 0x9000)
      v58 = (*(unsigned __int8 *)(v54 + 22) >> 3) & 1;
    else
      v58 = 0;
    if (v55)
      goto LABEL_110;
LABEL_771:
    if ((*(_WORD *)(v54 + 30) & 0x400) != 0)
    {
      if (!v58)
        goto LABEL_112;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v54, v33);
      if ((v58 & 1) == 0)
        goto LABEL_112;
    }
    goto LABEL_111;
  }
  if ((v56 & 4) != 0
    && *((_QWORD *)v53 + 10)
    && ((*(unsigned __int8 *)(v54 + 22) ^ *((unsigned __int8 *)v53 + 22)) & 8) == 0)
  {
    v57 = (WebCore::Node *)v54;
    do
    {
      v57 = (WebCore::Node *)*((_QWORD *)v57 + 4);
      v58 = v57 != 0;
    }
    while (v57 != v53 && v57 != 0);
  }
  else
  {
    v58 = 0;
  }
  if (!v55)
    goto LABEL_771;
LABEL_110:
  *(_DWORD *)(v54 + 24) = v55;
  if ((v58 & 1) != 0)
    goto LABEL_111;
LABEL_112:
  if (*((_DWORD *)v53 + 6) == 2)
  {
    if ((*((_WORD *)v53 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v53, v33);
  }
  else
  {
    *((_DWORD *)v53 + 6) -= 2;
  }
LABEL_114:
  if (!WebCore::DeleteSelectionCommand::initializePositionData((WebCore::Node **)v1, v33))
    goto LABEL_1247;
  v491 = (uint64_t *)(v1 + 496);
  WebCore::CompositeEditCommand::deleteInsignificantTextDownstream((WebCore::CompositeEditCommand *)v1, (const WebCore::Position *)(v1 + 496));
  v61 = (WebCore *)(v1 + 400);
  v62 = *(_QWORD *)(v1 + 400);
  v492 = v28;
  if (v62 != *(_QWORD *)(v1 + 448) || (*(_WORD *)(v62 + 28) & 2) == 0)
  {
    v63 = *v7;
    if (*v7)
      *(_DWORD *)(v63 + 24) += 2;
    v64 = *(_WORD *)(v63 + 28);
    if ((v64 & 2) != 0
      || v63
      && (v64 & 0x10) != 0
      && ((v65 = *(_QWORD *)(*(_QWORD *)(v63 + 96) + 24), v65 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
       || v65 == *(_QWORD *)(WebCore::HTMLNames::brTag + 24)))
    {
      v66 = WTF::fastMalloc((WTF *)0x18);
      v67 = v66;
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = 0;
      *(_BYTE *)(v66 + 16) &= 0xE0u;
      *(_DWORD *)(v66 + 20) = WebCore::EditingStyle::NoFontDelta;
      v68 = *v7;
      if (*v7)
      {
        *(_DWORD *)(v68 + 24) += 2;
        WebCore::EditingStyle::init(v66, (WebCore *)v68, 2);
        if (*(_DWORD *)(v68 + 24) == 2)
        {
          if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v68, v69);
        }
        else
        {
          *(_DWORD *)(v68 + 24) -= 2;
        }
      }
      else
      {
        WebCore::EditingStyle::init(v66, 0, 2);
      }
      v70 = *(WebCore::EditingStyle **)(v1 + 528);
      *(_QWORD *)(v1 + 528) = v67;
      if (v70)
      {
        if (*(_DWORD *)v70 == 1)
        {
          WebCore::EditingStyle::~EditingStyle(v70, (WTF::StringImpl *)v69);
          WTF::fastFree(v94, v95);
          v67 = *(_QWORD *)(v1 + 528);
        }
        else
        {
          --*(_DWORD *)v70;
        }
      }
      WebCore::enclosingAnchorElement((uint64_t *)(v1 + 360), &v495);
      v71 = v495;
      WebCore::EditingStyle::removeStyleAddedByNode(v67, v495);
      if (v71)
      {
        if (*((_DWORD *)v71 + 6) == 2)
        {
          if ((*((_WORD *)v71 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v71, v72);
        }
        else
        {
          *((_DWORD *)v71 + 6) -= 2;
        }
      }
      WebCore::highestEditableRoot(v1 + 360, 0, (uint64_t *)&v495);
      v73 = v495;
      v74 = *v7;
      if (v74)
      {
        v75 = (WebCore *)(v1 + 400);
        *(_DWORD *)(v74 + 24) += 2;
        v76 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        if (v73)
        {
          while (1)
          {
            v77 = v74;
            if (!WebCore::Node::computeEditability(v74, 0, 1))
              goto LABEL_153;
            if ((*(_WORD *)(v74 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v74 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
            {
              break;
            }
LABEL_152:
            if ((WebCore::Node *)v74 == v73)
            {
              if (*((_DWORD *)v73 + 6) == 2)
              {
                v61 = (WebCore *)(v1 + 400);
                if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v73, v60);
                v77 = 0;
              }
              else
              {
                v77 = 0;
                *((_DWORD *)v73 + 6) -= 2;
                v61 = (WebCore *)(v1 + 400);
              }
              goto LABEL_316;
            }
LABEL_153:
            v74 = *(_QWORD *)(v74 + 32);
            if (v74)
              *(_DWORD *)(v74 + 24) += 2;
            if (*(_DWORD *)(v77 + 24) == 2)
            {
              if ((*(_WORD *)(v77 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v77, v60);
            }
            else
            {
              *(_DWORD *)(v77 + 24) -= 2;
            }
            if (!v74)
              goto LABEL_314;
          }
          v78 = *(_QWORD *)(v74 + 104);
          if (!v78)
            goto LABEL_150;
          v79 = *(unsigned int *)(v78 + 4);
          if ((v79 & 1) != 0)
          {
            v80 = *(_QWORD *)(v78 + 40);
            v81 = *(unsigned int *)(v78 + 52);
            if (!v81)
            {
LABEL_150:
              v82 = v76;
              goto LABEL_151;
            }
          }
          else
          {
            v80 = v78 + 32;
            v81 = v79 >> 5;
            if (!(v79 >> 5))
              goto LABEL_150;
          }
          v82 = (_QWORD *)(v80 + 8);
          while (1)
          {
            v83 = *(v82 - 1);
            if (v83 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v83 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v83 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              break;
            }
            v82 += 2;
            if (!--v81)
              goto LABEL_150;
          }
LABEL_151:
          if ((MEMORY[0x19AEA53F4](*v82, "cite", 4) & 1) != 0)
            goto LABEL_315;
          goto LABEL_152;
        }
        while (1)
        {
          v77 = v74;
          if ((*(_WORD *)(v74 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v74 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
          {
            goto LABEL_177;
          }
          v84 = *(_QWORD *)(v74 + 104);
          if (!v84)
            break;
          v85 = *(unsigned int *)(v84 + 4);
          if ((v85 & 1) != 0)
          {
            v86 = *(_QWORD *)(v84 + 40);
            v87 = *(unsigned int *)(v84 + 52);
            if (!v87)
              break;
          }
          else
          {
            v86 = v84 + 32;
            v87 = v85 >> 5;
            if (!(v85 >> 5))
              break;
          }
          v88 = (_QWORD *)(v86 + 8);
          while (1)
          {
            v89 = *(v88 - 1);
            if (v89 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v89 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v89 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              break;
            }
            v88 += 2;
            if (!--v87)
              goto LABEL_175;
          }
LABEL_176:
          if ((MEMORY[0x19AEA53F4](*v88, "cite", 4) & 1) != 0)
          {
            v61 = (WebCore *)(v1 + 400);
            goto LABEL_318;
          }
LABEL_177:
          v74 = *(_QWORD *)(v74 + 32);
          if (v74)
            *(_DWORD *)(v74 + 24) += 2;
          if (*(_DWORD *)(v77 + 24) == 2)
          {
            if ((*(_WORD *)(v77 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v77, v60);
          }
          else
          {
            *(_DWORD *)(v77 + 24) -= 2;
          }
          if (!v74)
          {
            v61 = (WebCore *)(v1 + 400);
            goto LABEL_185;
          }
        }
LABEL_175:
        v88 = v76;
        goto LABEL_176;
      }
      v75 = (WebCore *)(v1 + 400);
LABEL_314:
      v77 = 0;
LABEL_315:
      v61 = v75;
      if (v73)
      {
LABEL_316:
        if (*((_DWORD *)v73 + 6) == 2)
        {
          if ((*((_WORD *)v73 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v73, v60);
        }
        else
        {
          *((_DWORD *)v73 + 6) -= 2;
        }
      }
LABEL_318:
      if (!v77)
      {
LABEL_185:
        v90 = *(WebCore::EditingStyle **)(v1 + 536);
        *(_QWORD *)(v1 + 536) = 0;
        v28 = v492;
        if (!v90)
          goto LABEL_327;
        goto LABEL_325;
      }
      v28 = v492;
      if (*(_DWORD *)(v77 + 24) == 2)
      {
        if ((*(_WORD *)(v77 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v77, v60);
      }
      else
      {
        *(_DWORD *)(v77 + 24) -= 2;
      }
      v123 = WTF::fastMalloc((WTF *)0x18);
      v124 = v123;
      *(_DWORD *)v123 = 1;
      *(_QWORD *)(v123 + 8) = 0;
      *(_BYTE *)(v123 + 16) &= 0xE0u;
      *(_DWORD *)(v123 + 20) = WebCore::EditingStyle::NoFontDelta;
      v125 = *v27;
      if (v125)
      {
        *(_DWORD *)(v125 + 24) += 2;
        WebCore::EditingStyle::init(v123, (WebCore *)v125, 1);
        if (*(_DWORD *)(v125 + 24) == 2)
        {
          if ((*(_WORD *)(v125 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v125, v60);
        }
        else
        {
          *(_DWORD *)(v125 + 24) -= 2;
        }
      }
      else
      {
        WebCore::EditingStyle::init(v123, 0, 1);
      }
      v90 = *(WebCore::EditingStyle **)(v1 + 536);
      *(_QWORD *)(v1 + 536) = v124;
      if (v90)
      {
LABEL_325:
        if (*(_DWORD *)v90 == 1)
        {
          WebCore::EditingStyle::~EditingStyle(v90, (WTF::StringImpl *)v60);
          WTF::fastFree(v156, v157);
        }
        else
        {
          --*(_DWORD *)v90;
        }
      }
    }
LABEL_327:
    if (*(_DWORD *)(v63 + 24) != 2)
    {
      *(_DWORD *)(v63 + 24) -= 2;
      goto LABEL_329;
    }
    if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
    {
      v106 = (WebCore::Node *)v63;
      goto LABEL_423;
    }
    goto LABEL_329;
  }
  v91 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(v91 + 24) += 2;
  v92 = *(_QWORD *)(v91 + 3064);
  v93 = *(WebCore::EditingStyle **)(v92 + 200);
  *(_QWORD *)(v92 + 200) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v93, (WTF::StringImpl *)v60);
      WTF::fastFree(v101, v102);
    }
    else
    {
      --*(_DWORD *)v93;
    }
  }
  if (*(_DWORD *)(v91 + 24) != 2)
  {
    *(_DWORD *)(v91 + 24) -= 2;
    goto LABEL_329;
  }
  if ((*(_WORD *)(v91 + 30) & 0x400) == 0)
  {
    v106 = (WebCore::Node *)v91;
LABEL_423:
    WebCore::Node::removedLastRef(v106, v60);
  }
LABEL_329:
  v126 = *(_QWORD *)v61;
  if (*(_QWORD *)v61)
  {
    switch(*(_BYTE *)(v1 + 412) & 7)
    {
      case 0:
        if ((*(_WORD *)(v126 + 28) & 4) == 0)
          goto LABEL_347;
        v127 = *(_DWORD *)(v1 + 408);
        v126 = *(_QWORD *)(v126 + 80);
        if (v127 && v126)
        {
          v128 = v127 - 1;
          do
          {
            v126 = *(_QWORD *)(v126 + 56);
            v129 = v128-- != 0;
            v130 = v129;
          }
          while (v126 && (v130 & 1) != 0);
        }
        goto LABEL_345;
      case 1:
        goto LABEL_346;
      case 2:
        v131 = (uint64_t *)(v126 + 56);
        goto LABEL_344;
      case 3:
        if ((*(_WORD *)(v126 + 28) & 4) == 0)
          goto LABEL_347;
        v131 = (uint64_t *)(v126 + 80);
LABEL_344:
        v126 = *v131;
LABEL_345:
        if (!v126)
          goto LABEL_348;
LABEL_346:
        v132 = 0;
        *(_DWORD *)(v126 + 24) += 2;
        break;
      default:
LABEL_347:
        v126 = 0;
        goto LABEL_348;
    }
  }
  else
  {
LABEL_348:
    v132 = 1;
  }
  v133 = *(_QWORD *)(v1 + 416);
  if (v133)
  {
    switch(*(_BYTE *)(v1 + 428) & 7)
    {
      case 0:
        if ((*(_WORD *)(v133 + 28) & 4) == 0)
          goto LABEL_367;
        v134 = *(_DWORD *)(v1 + 424);
        v133 = *(_QWORD *)(v133 + 80);
        if (v134 && v133)
        {
          v135 = v134 - 1;
          do
          {
            v133 = *(_QWORD *)(v133 + 56);
            v129 = v135-- != 0;
            v136 = v129;
          }
          while (v133 && (v136 & 1) != 0);
        }
        goto LABEL_365;
      case 1:
        goto LABEL_366;
      case 2:
        v137 = (uint64_t *)(v133 + 56);
        goto LABEL_364;
      case 3:
        if ((*(_WORD *)(v133 + 28) & 4) == 0)
          goto LABEL_367;
        v137 = (uint64_t *)(v133 + 80);
LABEL_364:
        v133 = *v137;
LABEL_365:
        if (!v133)
          goto LABEL_368;
LABEL_366:
        v138 = 0;
        *(_DWORD *)(v133 + 24) += 2;
        break;
      default:
LABEL_367:
        v133 = 0;
        goto LABEL_368;
    }
  }
  else
  {
LABEL_368:
    v138 = 1;
  }
  v139 = *(_QWORD *)(v1 + 432);
  if (v139)
  {
    switch(*(_BYTE *)(v1 + 444) & 7)
    {
      case 0:
        if ((*(_WORD *)(v139 + 28) & 4) == 0)
          goto LABEL_387;
        v140 = *(_DWORD *)(v1 + 440);
        v139 = *(_QWORD *)(v139 + 80);
        if (v140 && v139)
        {
          v141 = v140 - 1;
          do
          {
            v139 = *(_QWORD *)(v139 + 56);
            v129 = v141-- != 0;
            v142 = v129;
          }
          while (v139 && (v142 & 1) != 0);
        }
        goto LABEL_385;
      case 1:
        goto LABEL_386;
      case 2:
        v143 = (uint64_t *)(v139 + 56);
        goto LABEL_384;
      case 3:
        if ((*(_WORD *)(v139 + 28) & 4) == 0)
          goto LABEL_387;
        v143 = (uint64_t *)(v139 + 80);
LABEL_384:
        v139 = *v143;
LABEL_385:
        if (!v139)
          goto LABEL_388;
LABEL_386:
        v144 = 0;
        *(_DWORD *)(v139 + 24) += 2;
        break;
      default:
LABEL_387:
        v139 = 0;
        goto LABEL_388;
    }
  }
  else
  {
LABEL_388:
    v144 = 1;
  }
  if (((v132 | v138) & 1) != 0)
    goto LABEL_456;
  v145 = (*(_WORD *)(v126 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v126 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
  if ((*(_WORD *)(v133 + 28) & 0x10) == 0)
    goto LABEL_456;
  v146 = *(_QWORD *)(*(_QWORD *)(v133 + 96) + 24);
  if (v146 != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
    v145 = 0;
  if (!v145)
  {
LABEL_456:
    v155 = 0;
    if ((v144 & 1) != 0)
      goto LABEL_459;
    goto LABEL_457;
  }
  if (v133 == v139)
  {
    v155 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v133, 1);
    if ((v144 & 1) != 0)
      goto LABEL_459;
    goto LABEL_457;
  }
  if ((v144 & 1) == 0
    && (*(_WORD *)(v139 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v139 + 96) + 24) == v146
    && v139 == *(_QWORD *)(v126 + 56))
  {
    v155 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v133, 1);
LABEL_457:
    if (*(_DWORD *)(v139 + 24) == 2)
    {
      if ((*(_WORD *)(v139 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v139, v60);
    }
    else
    {
      *(_DWORD *)(v139 + 24) -= 2;
    }
    goto LABEL_459;
  }
  v490 = v61;
  *(_DWORD *)(v126 + 24) += 2;
  v531 = (const char *)v126;
  LODWORD(v532) = 0;
  BYTE4(v532) = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v531, (uint64_t)&v522);
  v522.var1 = 1;
  v147 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v522.var0.var0.var0)
    v147 = 0;
  if (v147)
  {
    v148 = v28;
    WebCore::startOfBlock((unsigned int *)&v522, 0, &v495);
    v149 = WebCore::operator==((uint64_t *)&v522, (uint64_t *)&v495);
    v150 = v495;
    v495 = 0;
    if (v150)
    {
      if (*((_DWORD *)v150 + 6) == 2)
      {
        if ((*((_WORD *)v150 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v150, v60);
      }
      else
      {
        *((_DWORD *)v150 + 6) -= 2;
      }
    }
    if (v149)
    {
      *(_DWORD *)(v133 + 24) += 2;
      v517 = v133;
      v518 = 0;
      v519 = 2;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v517, (uint64_t)v520);
      LODWORD(v147) = 1;
      v521 = 1;
      v151 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v520[0])
        v151 = 0;
      if (v151)
      {
        WebCore::endOfBlock((unsigned int *)v520, 0, &v495);
        v152 = WebCore::operator==((uint64_t *)v520, (uint64_t *)&v495);
        v153 = v495;
        v495 = 0;
        if (v153)
        {
          if (*((_DWORD *)v153 + 6) == 2)
          {
            if ((*((_WORD *)v153 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v153, v60);
          }
          else
          {
            *((_DWORD *)v153 + 6) -= 2;
          }
        }
        if (v152)
        {
          v154 = 0;
          v28 = v148;
          v61 = v490;
          goto LABEL_438;
        }
        LODWORD(v147) = 1;
      }
    }
    else
    {
      LODWORD(v147) = 0;
    }
    v28 = v148;
  }
  v61 = v490;
  if ((v144 & 1) != 0
    || (*(_WORD *)(v139 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v139 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    v154 = 1;
    if (!(_DWORD)v147)
      goto LABEL_443;
  }
  else
  {
    v154 = v126 != (*(_QWORD *)(v139 + 48) & 0xFFFFFFFFFFFFLL);
    if ((v147 & 1) == 0)
      goto LABEL_443;
  }
LABEL_438:
  v158 = v520[0];
  v520[0] = 0;
  if (v158)
  {
    if (*((_DWORD *)v158 + 6) == 2)
    {
      if ((*((_WORD *)v158 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v158, v60);
    }
    else
    {
      *((_DWORD *)v158 + 6) -= 2;
    }
  }
  v517 = 0;
  if (*(_DWORD *)(v133 + 24) == 2)
  {
    if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v133, v60);
  }
  else
  {
    *(_DWORD *)(v133 + 24) -= 2;
  }
LABEL_443:
  v159 = v522.var0.var0.var0;
  v522.var0.var0.var0 = 0;
  if (v159)
  {
    if (*((_DWORD *)v159 + 6) == 2)
    {
      if ((*((_WORD *)v159 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v159, v60);
    }
    else
    {
      *((_DWORD *)v159 + 6) -= 2;
    }
  }
  v531 = 0;
  if (*(_DWORD *)(v126 + 24) == 2)
  {
    if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v126, v60);
  }
  else
  {
    *(_DWORD *)(v126 + 24) -= 2;
  }
  if (!v154)
    goto LABEL_456;
  *(_BYTE *)(v1 + 287) = 1;
  v160 = *(_QWORD *)(v1 + 448);
  if (v160)
    *(_DWORD *)(v160 + 24) += 2;
  v161 = *(_QWORD *)(v1 + 464);
  *(_QWORD *)(v1 + 464) = v160;
  if (v161)
  {
    if (*(_DWORD *)(v161 + 24) == 2)
    {
      if ((*(_WORD *)(v161 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v161, v60);
    }
    else
    {
      *(_DWORD *)(v161 + 24) -= 2;
    }
  }
  v155 = 0;
  *(_DWORD *)(v1 + 472) = *(_DWORD *)(v1 + 456);
  *(_BYTE *)(v1 + 476) = *(_BYTE *)(v1 + 460);
  if ((v144 & 1) == 0)
    goto LABEL_457;
LABEL_459:
  v162 = v494;
  if ((v138 & 1) == 0)
  {
    if (*(_DWORD *)(v133 + 24) == 2)
    {
      if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v133, v60);
    }
    else
    {
      *(_DWORD *)(v133 + 24) -= 2;
    }
  }
  if ((v132 & 1) == 0)
  {
    if (*(_DWORD *)(v126 + 24) == 2)
    {
      if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v126, v60);
    }
    else
    {
      *(_DWORD *)(v126 + 24) -= 2;
    }
  }
  if (v155)
  {
    WebCore::DeleteSelectionCommand::calculateTypingStyleAfterDelete((unsigned int *)v1, v60);
    v163 = *(_BYTE *)(v1 + 226) & 2;
    v164 = *(WebCore::Node **)(v1 + 464);
    if (v164)
    {
      v165 = *((_DWORD *)v164 + 6);
      *((_DWORD *)v164 + 6) = v165 + 2;
      v166 = v1 + 472;
      LODWORD(v496) = *(_DWORD *)(v1 + 472);
      BYTE4(v496) = *(_BYTE *)(v1 + 476);
      *((_DWORD *)v164 + 6) = v165 + 4;
    }
    else
    {
      v166 = v1 + 472;
      LODWORD(v496) = *(_DWORD *)(v1 + 472);
      BYTE4(v496) = *(_BYTE *)(v1 + 476);
    }
    v495 = v164;
    v497 = v164;
    v498 = *(_DWORD *)v166;
    v499 = *(_BYTE *)(v166 + 4);
    v500 = 0;
    v501 = 0;
    v502 &= 0xF0u;
    v503 = 0;
    v504 = 0;
    v505 &= 0xF0u;
    v506 = 0;
    v507 = 0;
    v508 &= 0xF0u;
    v509 = 0;
    v510 = 0;
    v511 &= 0xF0u;
    v512 = v493;
    v513 = 0;
    v514 = v514 & 0xFD | v163;
    WebCore::VisibleSelection::validate((uint64_t)&v495, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v495);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v495);
    WebCore::DeleteSelectionCommand::clearTransientState((WebCore::DeleteSelectionCommand *)v1);
    WebCore::CompositeEditCommand::rebalanceWhitespace((WebCore::CompositeEditCommand *)v1);
    goto LABEL_1247;
  }
  v167 = (WebCore::Position *)(v1 + 448);
  v168 = *(_QWORD *)v61;
  if (!*(_QWORD *)v61)
    goto LABEL_1018;
  if ((*(_BYTE *)(v1 + 412) & 8) == 0 && ((v169 = *(_BYTE *)(v1 + 412) & 7, v169 == 4) || v169 == 2))
  {
    v170 = *(_DWORD *)(v168 + 24);
    *(_DWORD *)(v168 + 24) = v170 + 2;
    v171 = *(_WORD *)(v168 + 28);
    if ((v171 & 1) != 0)
    {
      v226 = *(_QWORD *)(v168 + 80);
      if (v226)
        v173 = *(unsigned int *)(v226 + 4);
      else
        v173 = 0;
    }
    else if ((v171 & 4) != 0 && (v172 = *(_QWORD *)(v168 + 80)) != 0)
    {
      LODWORD(v173) = 0;
      do
      {
        v173 = (v173 + 1);
        v172 = *(_QWORD *)(v172 + 56);
      }
      while (v172);
    }
    else
    {
      v173 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v168 + 208))(v168) ^ 1;
      v170 = *(_DWORD *)(v168 + 24) - 2;
    }
    if (v170)
    {
      *(_DWORD *)(v168 + 24) = v170;
    }
    else if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v168, v60);
    }
    v168 = *(_QWORD *)v61;
    if (!*(_QWORD *)v61)
      goto LABEL_483;
  }
  else
  {
    v173 = *(unsigned int *)(v1 + 408);
  }
  *(_DWORD *)(v168 + 24) += 2;
LABEL_483:
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v1 + 296), &v495);
  if ((_BYTE)v500)
  {
    v175 = v495;
    *((_DWORD *)v495 + 6) += 2;
    v522.var0.var0.var0 = (Node *)v175;
    v522.var0.var1 = v496;
    v176 = v497;
    *((_DWORD *)v497 + 6) += 2;
    *(_QWORD *)&v522.var1 = v176;
    v523 = v498;
    WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v531, (const WebCore::SimpleRange *)&v522);
    if (*((_DWORD *)v176 + 6) == 2)
    {
      if ((*((_WORD *)v176 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v176, v174);
    }
    else
    {
      *((_DWORD *)v176 + 6) -= 2;
    }
    if (*((_DWORD *)v175 + 6) == 2)
    {
      if ((*((_WORD *)v175 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v175, v174);
    }
    else
    {
      *((_DWORD *)v175 + 6) -= 2;
    }
    v177 = (uint64_t)v531;
    if (v531)
      v178 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v178 = 0;
    if (v178)
    {
      do
      {
        *(_DWORD *)(v177 + 24) += 2;
        if ((*(_WORD *)(v177 + 28) & 0x10) != 0
          && ((v179 = *(_QWORD *)(*(_QWORD *)(v177 + 96) + 24), v179 == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
           || v179 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)))
        {
          WebCore::IntersectingNodeIterator::advanceSkippingChildren((WebCore::IntersectingNodeIterator *)&v531, v174);
          v180 = 0;
          v181 = v177;
          do
          {
            if (!WebCore::Node::hasEditableStyle(v181, 0))
              break;
            if ((*(_WORD *)(v181 + 28) & 8) != 0)
              v180 = v181;
            j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v177 + 40) + 8) + 1272);
            if (j)
            {
              if ((*(_WORD *)(j + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                {
                  if ((*(_WORD *)(j + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                j = 0;
              }
            }
            if (j == v181)
              break;
            v181 = *(_QWORD *)(v181 + 32);
          }
          while (v181);
          if (v180)
          {
            *(_DWORD *)(v180 + 24) += 2;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v177, 1);
            *(_DWORD *)(v177 + 24) += 2;
            v522.var0.var0.var0 = (Node *)v177;
            *(_DWORD *)(v180 + 24) += 2;
            v530.var0.var0.var0 = (Node *)v180;
            WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v1, (uint64_t *)&v522, (uint64_t *)&v530);
            if (v530.var0.var0.var0)
            {
              if (*((_DWORD *)v530.var0.var0.var0 + 6) == 2)
              {
                if ((*((_WORD *)v530.var0.var0.var0 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v530.var0.var0.var0, v174);
              }
              else
              {
                *((_DWORD *)v530.var0.var0.var0 + 6) -= 2;
              }
            }
            if (v522.var0.var0.var0)
            {
              if (*((_DWORD *)v522.var0.var0.var0 + 6) == 2)
              {
                if ((*((_WORD *)v522.var0.var0.var0 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v522.var0.var0.var0, v174);
              }
              else
              {
                *((_DWORD *)v522.var0.var0.var0 + 6) -= 2;
              }
            }
            if (*(_DWORD *)(v180 + 24) == 2)
            {
              if ((*(_WORD *)(v180 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v180, v174);
            }
            else
            {
              *(_DWORD *)(v180 + 24) -= 2;
            }
          }
        }
        else
        {
          WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v531);
        }
        if (*(_DWORD *)(v177 + 24) == 2)
        {
          if ((*(_WORD *)(v177 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v177, v174);
        }
        else
        {
          *(_DWORD *)(v177 + 24) -= 2;
        }
        v177 = (uint64_t)v531;
        if (v531)
          v183 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v183 = 0;
      }
      while (v183);
    }
    v184 = v532;
    v532 = 0;
    if (v184)
    {
      v167 = (WebCore::Position *)(v1 + 448);
      if (*(_DWORD *)(v184 + 24) == 2)
      {
        if ((*(_WORD *)(v184 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v184, v174);
          v177 = (uint64_t)v531;
        }
      }
      else
      {
        *(_DWORD *)(v184 + 24) -= 2;
      }
    }
    else
    {
      v167 = (WebCore::Position *)(v1 + 448);
    }
    v531 = 0;
    if (v177)
    {
      if (*(_DWORD *)(v177 + 24) == 2)
      {
        if ((*(_WORD *)(v177 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v177, v174);
      }
      else
      {
        *(_DWORD *)(v177 + 24) -= 2;
      }
    }
    if ((_BYTE)v500)
    {
      v185 = v497;
      v497 = 0;
      if (v185)
      {
        if (*((_DWORD *)v185 + 6) == 2)
        {
          if ((*((_WORD *)v185 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v185, v174);
        }
        else
        {
          *((_DWORD *)v185 + 6) -= 2;
        }
      }
      v186 = v495;
      v495 = 0;
      if (v186)
      {
        if (*((_DWORD *)v186 + 6) == 2)
        {
          if ((*((_WORD *)v186 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v186, v174);
        }
        else
        {
          *((_DWORD *)v186 + 6) -= 2;
        }
      }
    }
  }
  if (v168 == *(_QWORD *)(v1 + 512) && !(_DWORD)v173)
  {
    v187 = *(_WORD *)(v168 + 28);
    if ((v187 & 2) != 0
      || (v162 = v494, (v187 & 0x10) != 0)
      && *(_QWORD *)(*(_QWORD *)(v168 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v168 + 208))(v168)
      || (v188 = *(_WORD *)(v168 + 28), (v188 & 0x10) != 0)
      && *(_QWORD *)(*(_QWORD *)(v168 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
      v173 = 0;
    }
    else
    {
      if ((v188 & 4) != 0 && (v189 = *(_QWORD *)(v168 + 80)) != 0 || (v189 = *(_QWORD *)(v168 + 56)) != 0)
      {
LABEL_562:
        v191 = 0;
        *(_DWORD *)(v189 + 24) += 2;
      }
      else
      {
        v190 = v168;
        while (1)
        {
          v190 = *(_QWORD *)(v190 + 32);
          if (!v190)
            break;
          v189 = *(_QWORD *)(v190 + 56);
          if (v189)
            goto LABEL_562;
        }
        v189 = 0;
        v191 = 1;
      }
      if (*(_DWORD *)(v168 + 24) == 2)
      {
        if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v168, v174);
      }
      else
      {
        *(_DWORD *)(v168 + 24) -= 2;
      }
      if ((v191 & 1) != 0)
      {
LABEL_1015:
        if (!v189)
          goto LABEL_1018;
        goto LABEL_1016;
      }
      v173 = 0;
      v168 = v189;
    }
  }
  v192 = *(_WORD *)(v168 + 28);
  if ((v192 & 2) != 0 && (v193 = (WebCore::RenderText *)(*(_QWORD *)(v168 + 64) & 0xFFFFFFFFFFFFLL)) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v168 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A9FFE4);
    }
    v195 = WebCore::RenderText::caretMaxOffset(v193, (WebCore::RenderObject *)v174);
  }
  else if ((v192 & 1) != 0)
  {
    v225 = *(_QWORD *)(v168 + 80);
    if (v225)
      v195 = *(_DWORD *)(v225 + 4);
    else
      v195 = 0;
  }
  else if ((v192 & 4) != 0 && (v194 = *(_QWORD *)(v168 + 80)) != 0)
  {
    v195 = 0;
    do
    {
      ++v195;
      v194 = *(_QWORD *)(v194 + 56);
    }
    while (v194);
  }
  else
  {
    v195 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 208))(v168) ^ 1;
  }
  if ((int)v173 >= v195 && (*(_WORD *)(v168 + 28) & 2) != 0)
  {
    v196 = *(_DWORD *)(v168 + 24) + 2;
    *(_DWORD *)(v168 + 24) = v196;
    v197 = *(_QWORD *)(v168 + 80);
    if (v197 && *(_DWORD *)(v197 + 4) > v195)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 176))(v1, v168);
      v196 = *(_DWORD *)(v168 + 24);
    }
    v198 = v196 - 2;
    if (v198)
    {
      *(_DWORD *)(v168 + 24) = v198;
    }
    else if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v168, v174);
    }
  }
  v199 = *(_WORD *)(v168 + 28);
  if ((v199 & 1) != 0)
  {
    v201 = *(_QWORD *)(v168 + 80);
    if (v201)
      LODWORD(v201) = *(_DWORD *)(v201 + 4);
  }
  else if ((v199 & 4) != 0 && (v200 = *(_QWORD *)(v168 + 80)) != 0)
  {
    LODWORD(v201) = 0;
    do
    {
      LODWORD(v201) = v201 + 1;
      v200 = *(_QWORD *)(v200 + 56);
    }
    while (v200);
  }
  else
  {
    LODWORD(v201) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 208))(v168) ^ 1;
  }
  if ((int)v173 < (int)v201)
  {
    v189 = v168;
    goto LABEL_605;
  }
  v189 = *(_QWORD *)(v168 + 56);
  v162 = v494;
  if (v189)
  {
LABEL_591:
    *(_DWORD *)(v189 + 24) += 2;
  }
  else
  {
    v202 = v168;
    while (1)
    {
      v202 = *(_QWORD *)(v202 + 32);
      if (!v202)
        break;
      v189 = *(_QWORD *)(v202 + 56);
      if (v189)
        goto LABEL_591;
    }
    v189 = 0;
  }
  if (*(_DWORD *)(v168 + 24) == 2)
  {
    if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v168, v174);
  }
  else
  {
    *(_DWORD *)(v168 + 24) -= 2;
  }
  if (v189)
  {
    v173 = 0;
LABEL_605:
    v203 = *(_QWORD *)v167;
    if (v189 != *(_QWORD *)v167)
    {
      if (v203)
      {
        v204 = *(_QWORD *)v61;
        v205 = *(_WORD *)(v203 + 28);
        if ((v205 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v204 + 40) == v203 && (*(_WORD *)(v204 + 28) & 0xF000) != 0x9000)
          {
            v206 = (*(unsigned __int8 *)(v204 + 22) >> 3) & 1;
            goto LABEL_790;
          }
        }
        else if ((v205 & 4) != 0
               && *(_QWORD *)(v203 + 80)
               && ((*(unsigned __int8 *)(v204 + 22) ^ *(unsigned __int8 *)(v203 + 22)) & 8) == 0)
        {
          do
          {
            v204 = *(_QWORD *)(v204 + 32);
            v206 = v204 != 0;
          }
          while (v204 != v203 && v204 != 0);
          goto LABEL_790;
        }
      }
      v206 = 0;
LABEL_790:
      v240 = *(_DWORD *)(v189 + 24);
      v241 = v240 + 2;
      *(_DWORD *)(v189 + 24) = v240 + 2;
      v242 = v173 - 1;
      if ((int)v173 >= 1)
      {
        v243 = *(_WORD *)(v189 + 28);
        if ((v243 & 2) != 0)
        {
          *(_DWORD *)(v189 + 24) = v240 + 4;
          v244 = *(_QWORD *)(v189 + 80);
          if (v244)
            LODWORD(v244) = *(_DWORD *)(v244 + 4);
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 176))(v1, v189, v173, (v244 - v173));
          if ((*(_WORD *)(v189 + 28) & 4) != 0 && (v245 = *(_QWORD *)(v189 + 80)) != 0
            || (v245 = *(_QWORD *)(v189 + 56)) != 0)
          {
LABEL_800:
            *(_DWORD *)(v245 + 24) += 2;
          }
          else
          {
            v246 = v189;
            while (1)
            {
              v246 = *(_QWORD *)(v246 + 32);
              if (!v246)
                break;
              v245 = *(_QWORD *)(v246 + 56);
              if (v245)
                goto LABEL_800;
            }
            v245 = 0;
          }
          v241 = *(_DWORD *)(v189 + 24) - 2;
          if (*(_DWORD *)(v189 + 24) != 2)
          {
            *(_DWORD *)(v189 + 24) = v241;
LABEL_803:
            v247 = v241 - 2;
            if (v247)
            {
              *(_DWORD *)(v189 + 24) = v247;
              goto LABEL_805;
            }
            v306 = *(_WORD *)(v189 + 30);
LABEL_1000:
            if ((v306 & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
LABEL_805:
            if (v245)
              goto LABEL_823;
LABEL_938:
            v281 = v245;
            v245 = *(_QWORD *)v167;
            if (!*(_QWORD *)v167)
              goto LABEL_1011;
LABEL_939:
            if (v189 == v245 || (*(_QWORD *)(v245 + 16) & 0x8000000000000) == 0)
              goto LABEL_1011;
            v282 = *(_QWORD *)v61;
            v283 = *(_WORD *)(v245 + 28);
            if ((v283 & 0xF000) == 0x9000)
            {
              if (**(_QWORD **)(v282 + 40) == v245
                && (*(_WORD *)(v282 + 28) & 0xF000) != 0x9000
                && (*(_BYTE *)(v282 + 22) & 8) != 0)
              {
                goto LABEL_1011;
              }
            }
            else if ((v283 & 4) != 0 && *(_QWORD *)(v245 + 80) && (*(_BYTE *)(v282 + 22) & 8) != 0)
            {
              do
                v282 = *(_QWORD *)(v282 + 32);
              while (v282 != v245 && v282 != 0);
              if (v282)
                goto LABEL_1011;
            }
            if ((*(_BYTE *)(v1 + 460) & 8) == 0
              && ((v285 = *(_BYTE *)(v1 + 460) & 7, v285 != 4) ? (v286 = v285 == 2) : (v286 = 1), v286))
            {
              if (v245)
              {
                v287 = *(_DWORD *)(v245 + 24);
                *(_DWORD *)(v245 + 24) = v287 + 2;
                if ((v283 & 1) != 0)
                {
                  v460 = *(_QWORD *)(v245 + 80);
                  if (v460)
                    v289 = *(_DWORD *)(v460 + 4);
                  else
                    v289 = 0;
                }
                else if ((v283 & 4) != 0 && (v288 = *(_QWORD *)(v245 + 80)) != 0)
                {
                  v289 = 0;
                  do
                  {
                    ++v289;
                    v288 = *(_QWORD *)(v288 + 56);
                  }
                  while (v288);
                }
                else
                {
                  v289 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v245 + 208))(v245) ^ 1;
                  v287 = *(_DWORD *)(v245 + 24) - 2;
                }
                if (v287)
                {
                  *(_DWORD *)(v245 + 24) = v287;
                }
                else if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
                }
              }
              else
              {
                v289 = 0;
              }
            }
            else
            {
              v289 = *(_DWORD *)(v1 + 456);
            }
            v290 = *(_QWORD *)(*(_QWORD *)v167 + 64) & 0xFFFFFFFFFFFFLL;
            if (v290)
              LODWORD(v290) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v290 + 528))(v290);
            if (v289 < (int)v290)
              goto LABEL_1011;
            if (WebCore::Position::atLastEditingPositionForNode(v167, (const WebCore::Node *)v174))
            {
              v291 = *(_QWORD *)v167;
              v292 = *(_WORD *)(*(_QWORD *)v167 + 28);
              if ((v292 & 2) == 0
                && ((v292 & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v291 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)))
              {
                if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v291 + 208))(*(_QWORD *)v167) & 1) != 0)
                  goto LABEL_973;
                v291 = *(_QWORD *)v167;
                if (!*(_QWORD *)v167)
                {
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 184))(v1, 0, 1);
                  goto LABEL_1011;
                }
              }
              *(_DWORD *)(v291 + 24) += 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v291, 1);
LABEL_1009:
              if (*(_DWORD *)(v291 + 24) == 2)
              {
                if ((*(_WORD *)(v291 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v291, v174);
              }
              else
              {
                *(_DWORD *)(v291 + 24) -= 2;
              }
              goto LABEL_1011;
            }
LABEL_973:
            v291 = *(_QWORD *)v167;
            v293 = *(_WORD *)(*(_QWORD *)v167 + 28);
            if (*(_QWORD *)v167 && (v293 & 2) != 0)
            {
              v294 = *(_DWORD *)(v291 + 24);
              v295 = v294 + 2;
              *(_DWORD *)(v291 + 24) = v294 + 2;
              if ((*(_BYTE *)(v1 + 460) & 8) == 0 && ((v296 = *(_BYTE *)(v1 + 460) & 7, v296 == 4) || v296 == 2))
              {
                *(_DWORD *)(v291 + 24) = v294 + 4;
                if ((v293 & 1) != 0)
                {
                  v474 = *(_QWORD *)(v291 + 80);
                  if (v474)
                    v298 = *(_DWORD *)(v474 + 4);
                  else
                    v298 = 0;
                }
                else if ((v293 & 4) != 0 && (v297 = *(_QWORD *)(v291 + 80)) != 0)
                {
                  v298 = 0;
                  do
                  {
                    ++v298;
                    v297 = *(_QWORD *)(v297 + 56);
                  }
                  while (v297);
                }
                else
                {
                  v298 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 208))(v291) ^ 1;
                  v295 = *(_DWORD *)(v291 + 24) - 2;
                }
                if (v295)
                {
                  *(_DWORD *)(v291 + 24) = v295;
                }
                else if ((*(_WORD *)(v291 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v291, v174);
                }
              }
              else
              {
                v298 = *(_DWORD *)(v1 + 456);
              }
              if (v298 >= 1)
              {
                if ((*(_BYTE *)(v1 + 460) & 8) == 0
                  && ((v299 = *(_BYTE *)(v1 + 460) & 7, v299 != 4) ? (v300 = v299 == 2) : (v300 = 1), v300))
                {
                  v301 = *(_WORD **)v167;
                  if (*(_QWORD *)v167)
                  {
                    v302 = *((_DWORD *)v301 + 6);
                    *((_DWORD *)v301 + 6) = v302 + 2;
                    v303 = v301[14];
                    if ((v303 & 1) != 0)
                    {
                      v475 = *((_QWORD *)v301 + 10);
                      if (v475)
                        v305 = *(unsigned int *)(v475 + 4);
                      else
                        v305 = 0;
                    }
                    else if ((v303 & 4) != 0 && (v304 = *((_QWORD *)v301 + 10)) != 0)
                    {
                      LODWORD(v305) = 0;
                      do
                      {
                        v305 = (v305 + 1);
                        v304 = *(_QWORD *)(v304 + 56);
                      }
                      while (v304);
                    }
                    else
                    {
                      v305 = (*(unsigned int (**)(_WORD *))(*(_QWORD *)v301 + 208))(v301) ^ 1;
                      v302 = *((_DWORD *)v301 + 6) - 2;
                    }
                    if (v302)
                    {
                      *((_DWORD *)v301 + 6) = v302;
                    }
                    else if ((v301[15] & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v301, v174);
                    }
                  }
                  else
                  {
                    v305 = 0;
                  }
                }
                else
                {
                  v305 = *(unsigned int *)(v1 + 456);
                }
                (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 176))(v1, v291, 0, v305);
              }
              goto LABEL_1009;
            }
            v462 = *(_QWORD *)v61;
            if (!v206 || (*(_BYTE *)(v462 + 22) & 8) != 0)
            {
              if ((v293 & 0xF000) == 0x9000)
              {
                if (**(_QWORD **)(v462 + 40) == v291
                  && (*(_WORD *)(v462 + 28) & 0xF000) != 0x9000
                  && (*(_BYTE *)(v462 + 22) & 8) != 0)
                {
                  goto LABEL_1731;
                }
              }
              else if ((v293 & 4) != 0
                     && *(_QWORD *)(v291 + 80)
                     && ((*(unsigned __int8 *)(v462 + 22) ^ *(unsigned __int8 *)(v291 + 22)) & 8) == 0)
              {
                v463 = *(_QWORD *)v61;
                do
                  v463 = *(_QWORD *)(v463 + 32);
                while (v463 != v291 && v463 != 0);
                if (v463 && v462 != 0)
                {
LABEL_1731:
                  *(_DWORD *)(v462 + 24) += 2;
                  while (1)
                  {
                    v486 = v462;
                    v462 = *(_QWORD *)(v462 + 32);
                    if (v462 == *(_QWORD *)v167)
                      break;
                    if (v462)
                      *(_DWORD *)(v462 + 24) += 2;
                    if (*(_DWORD *)(v486 + 24) == 2)
                    {
                      if ((*(_WORD *)(v486 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v486, v174);
                    }
                    else
                    {
                      *(_DWORD *)(v486 + 24) -= 2;
                    }
                    if (!v462)
                      goto LABEL_1579;
                  }
                  v487 = *(_QWORD *)(v486 + 48);
                  for (k = 0; ; ++k)
                  {
                    v489 = v487 & 0xFFFFFFFFFFFFLL;
                    if (!v489)
                      break;
                    v487 = *(_QWORD *)(v489 + 48);
                  }
                  v466 = k + 1;
                  if (*(_DWORD *)(v486 + 24) == 2)
                  {
                    if ((*(_WORD *)(v486 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v486, v174);
                  }
                  else
                  {
                    *(_DWORD *)(v486 + 24) -= 2;
                  }
                  goto LABEL_1580;
                }
              }
LABEL_1579:
              v466 = 0;
LABEL_1580:
              v467 = *(_QWORD *)v167;
              if (*(_QWORD *)v167)
                *(_DWORD *)(v467 + 24) += 2;
              if ((*(_BYTE *)(v1 + 460) & 8) == 0
                && ((v468 = *(_BYTE *)(v1 + 460) & 7, v468 != 4) ? (v469 = v468 == 2) : (v469 = 1), v469))
              {
                if (v467)
                {
                  v470 = *(_DWORD *)(v467 + 24);
                  *(_DWORD *)(v467 + 24) = v470 + 2;
                  v471 = *(_WORD *)(v467 + 28);
                  if ((v471 & 1) != 0)
                  {
                    v485 = *(_QWORD *)(v467 + 80);
                    if (v485)
                      v473 = *(_DWORD *)(v485 + 4);
                    else
                      v473 = 0;
                  }
                  else if ((v471 & 4) != 0 && (v472 = *(_QWORD *)(v467 + 80)) != 0)
                  {
                    v473 = 0;
                    do
                    {
                      ++v473;
                      v472 = *(_QWORD *)(v472 + 56);
                    }
                    while (v472);
                  }
                  else
                  {
                    v473 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v467 + 208))(v467) ^ 1;
                    v470 = *(_DWORD *)(v467 + 24) - 2;
                  }
                  if (v470)
                  {
                    *(_DWORD *)(v467 + 24) = v470;
                  }
                  else if ((*(_WORD *)(v467 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v467, v174);
                  }
                }
                else
                {
                  v473 = 0;
                }
              }
              else
              {
                v473 = *(_DWORD *)(v1 + 456);
              }
              WebCore::CompositeEditCommand::removeChildrenInRange(v1, (WebCore::Node *)v467, v466, v473);
              if (*(_DWORD *)(v467 + 24) == 2)
              {
                if ((*(_WORD *)(v467 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v467, v174);
              }
              else
              {
                *(_DWORD *)(v467 + 24) -= 2;
              }
              v476 = *(_DWORD **)v167;
              if (*(_QWORD *)v167)
              {
                v476[6] += 2;
                if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v476 + 208))(v476) & 1) != 0)
                {
                  v477 = 8;
                }
                else if (v466)
                {
                  v477 = 10;
                }
                else
                {
                  v477 = 9;
                }
                v478 = *(_QWORD *)v167;
                *(_QWORD *)v167 = v476;
                if (v478)
                {
                  if (*(_DWORD *)(v478 + 24) == 2)
                  {
                    if ((*(_WORD *)(v478 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v478, v174);
                  }
                  else
                  {
                    *(_DWORD *)(v478 + 24) -= 2;
                  }
                }
              }
              else
              {
                *(_QWORD *)v167 = 0;
                v477 = 8;
              }
              *(_DWORD *)(v1 + 456) = v466;
              *(_BYTE *)(v1 + 460) = v477;
            }
LABEL_1011:
            v245 = v281;
            if (!v281)
            {
              v162 = v494;
              if (!v189)
                goto LABEL_1018;
              goto LABEL_1016;
            }
LABEL_1012:
            if (*(_DWORD *)(v245 + 24) == 2)
            {
              if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
            }
            else
            {
              *(_DWORD *)(v245 + 24) -= 2;
            }
            v162 = v494;
            goto LABEL_1015;
          }
          v306 = *(_WORD *)(v189 + 30);
          if ((v306 & 0x400) != 0)
            goto LABEL_1000;
          WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
        }
        else
        {
          if ((v243 & 4) == 0)
          {
            v245 = 0;
            goto LABEL_803;
          }
          v245 = *(_QWORD *)(v189 + 80);
          if (!v245)
            goto LABEL_803;
          do
          {
            v245 = *(_QWORD *)(v245 + 56);
            v129 = v242-- != 0;
            v458 = v129;
          }
          while (v245 && (v458 & 1) != 0);
          if (!v245)
            goto LABEL_803;
          *(_DWORD *)(v245 + 24) += 2;
        }
        v241 = *(_DWORD *)(v189 + 24);
        goto LABEL_803;
      }
      v245 = v189;
      if (v189 == *(_QWORD *)(v1 + 432))
      {
        v248 = *(_WORD *)(v189 + 28);
        v245 = v189;
        if ((v248 & 2) != 0)
        {
          v249 = v240 + 4;
          *(_DWORD *)(v189 + 24) = v240 + 4;
          if ((*(_BYTE *)(v1 + 444) & 8) == 0 && ((v250 = *(_BYTE *)(v1 + 444) & 7, v250 == 4) || v250 == 2))
          {
            *(_DWORD *)(v189 + 24) = v240 + 6;
            if ((v248 & 1) != 0)
            {
              v461 = *(_QWORD *)(v189 + 80);
              if (v461)
                v252 = *(unsigned int *)(v461 + 4);
              else
                v252 = 0;
            }
            else if ((v248 & 4) != 0 && (v251 = *(_QWORD *)(v189 + 80)) != 0)
            {
              LODWORD(v252) = 0;
              do
              {
                v252 = (v252 + 1);
                v251 = *(_QWORD *)(v251 + 56);
              }
              while (v251);
            }
            else
            {
              v252 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v189 + 208))(v189) ^ 1;
              v249 = *(_DWORD *)(v189 + 24) - 2;
            }
            if (v249)
            {
              *(_DWORD *)(v189 + 24) = v249;
            }
            else if ((*(_WORD *)(v189 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
            }
          }
          else
          {
            v252 = *(unsigned int *)(v1 + 440);
          }
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 176))(v1, v189, 0, v252);
          if (*(_DWORD *)(v189 + 24) == 2)
          {
            v245 = v189;
            if ((*(_WORD *)(v189 + 30) & 0x400) != 0)
              goto LABEL_823;
            WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
          }
          else
          {
            *(_DWORD *)(v189 + 24) -= 2;
          }
          v245 = v189;
          goto LABEL_823;
        }
      }
      while (1)
      {
LABEL_823:
        v253 = *(_QWORD *)v167;
        if (v245 == *(_QWORD *)v167)
        {
          v281 = v245;
          goto LABEL_939;
        }
        if (!v253)
          goto LABEL_1012;
        if ((*(_BYTE *)(v253 + 22) & 8) == 0)
          goto LABEL_938;
        WebCore::firstPositionInOrBeforeNode(v245, (WebCore::Node *)v174, (uint64_t)&v495);
        v255 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v495, (uint64_t)v167);
        v256 = v495;
        v495 = 0;
        if (v256)
        {
          if (*((_DWORD *)v256 + 6) == 2)
          {
            if ((*((_WORD *)v256 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v256, v174);
          }
          else
          {
            *((_DWORD *)v256 + 6) -= 2;
          }
        }
        if ((v255 & 0x80000000) == 0)
        {
          if (*(_DWORD *)(v245 + 24) == 2)
          {
            if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
          }
          else
          {
            *(_DWORD *)(v245 + 24) -= 2;
          }
          v245 = 0;
          goto LABEL_938;
        }
        v257 = *(_QWORD *)v167;
        v258 = *(_WORD *)(v245 + 28);
        if ((v258 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v257 + 40) == v245
            && (*(_WORD *)(v257 + 28) & 0xF000) != 0x9000
            && (*(_BYTE *)(v257 + 22) & 8) != 0)
          {
            goto LABEL_842;
          }
        }
        else if ((v258 & 4) != 0
               && *(_QWORD *)(v245 + 80)
               && ((*(unsigned __int8 *)(v257 + 22) ^ *(unsigned __int8 *)(v245 + 22)) & 8) == 0)
        {
          v259 = *(_QWORD *)v167;
          do
            v259 = *(_QWORD *)(v259 + 32);
          while (v259 != v245 && v259 != 0);
          if (v259)
          {
            if (v245)
            {
LABEL_842:
              v261 = v245;
              do
              {
                v262 = v261;
                if ((*(_WORD *)(v261 + 28) & 4) == 0)
                  break;
                v261 = *(_QWORD *)(v261 + 88);
              }
              while (v261);
              v263 = 0;
              *(_DWORD *)(v262 + 24) += 2;
            }
            else
            {
              v262 = 0;
              v263 = 1;
            }
            if (v262 == v257)
            {
              if ((*(_BYTE *)(v1 + 460) & 8) == 0
                && ((v264 = *(_BYTE *)(v1 + 460) & 7, v264 != 4) ? (v265 = v264 == 2) : (v265 = 1), v265))
              {
                if (v257)
                {
                  v266 = *(_DWORD *)(v257 + 24);
                  *(_DWORD *)(v257 + 24) = v266 + 2;
                  v267 = *(_WORD *)(v257 + 28);
                  if ((v267 & 1) != 0)
                  {
                    v278 = *(_QWORD *)(v257 + 80);
                    if (v278)
                      v269 = *(_DWORD *)(v278 + 4);
                    else
                      v269 = 0;
                  }
                  else if ((v267 & 4) != 0 && (v268 = *(_QWORD *)(v257 + 80)) != 0)
                  {
                    v269 = 0;
                    do
                    {
                      ++v269;
                      v268 = *(_QWORD *)(v268 + 56);
                    }
                    while (v268);
                  }
                  else
                  {
                    v269 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 208))(v257) ^ 1;
                    v266 = *(_DWORD *)(v257 + 24) - 2;
                  }
                  if (v266)
                  {
                    *(_DWORD *)(v257 + 24) = v266;
                  }
                  else if ((*(_WORD *)(v257 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v257, v174);
                  }
                }
                else
                {
                  v269 = 0;
                }
              }
              else
              {
                v269 = *(_DWORD *)(v1 + 456);
              }
              v270 = *(_WORD *)(v257 + 28);
              if ((v270 & 2) != 0 && (v271 = (WebCore::RenderText *)(*(_QWORD *)(v257 + 64) & 0xFFFFFFFFFFFFLL)) != 0)
              {
                if ((*(_BYTE *)((*(_QWORD *)(v257 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195AA2304);
                }
                v273 = WebCore::RenderText::caretMaxOffset(v271, (WebCore::RenderObject *)v174);
              }
              else if ((v270 & 1) != 0)
              {
                v277 = *(_QWORD *)(v257 + 80);
                if (v277)
                  v273 = *(_DWORD *)(v277 + 4);
                else
                  v273 = 0;
              }
              else if ((v270 & 4) != 0 && (v272 = *(_QWORD *)(v257 + 80)) != 0)
              {
                v273 = 0;
                do
                {
                  ++v273;
                  v272 = *(_QWORD *)(v272 + 56);
                }
                while (v272);
              }
              else
              {
                v273 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 208))(v257) ^ 1;
              }
              if (v269 < v273)
              {
                v258 = *(_WORD *)(v245 + 28);
                goto LABEL_870;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v245, 1);
              if (*(_DWORD *)(v245 + 24) == 2)
              {
                if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
                v274 = 0;
              }
              else
              {
                v274 = 0;
                *(_DWORD *)(v245 + 24) -= 2;
              }
            }
            else
            {
LABEL_870:
              if ((v258 & 4) != 0 && (v274 = *(_QWORD *)(v245 + 80)) != 0 || (v274 = *(_QWORD *)(v245 + 56)) != 0)
              {
LABEL_876:
                *(_DWORD *)(v274 + 24) += 2;
              }
              else
              {
                v275 = v245;
                while (1)
                {
                  v275 = *(_QWORD *)(v275 + 32);
                  if (!v275)
                    break;
                  v274 = *(_QWORD *)(v275 + 56);
                  if (v274)
                    goto LABEL_876;
                }
                v274 = 0;
              }
              if (*(_DWORD *)(v245 + 24) == 2)
              {
                if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
              }
              else
              {
                *(_DWORD *)(v245 + 24) -= 2;
              }
              if ((v263 & 1) != 0)
                goto LABEL_925;
            }
            if (*(_DWORD *)(v262 + 24) == 2)
            {
              if ((*(_WORD *)(v262 + 30) & 0x400) == 0)
              {
                v276 = (WebCore::Node *)v262;
LABEL_931:
                WebCore::Node::removedLastRef(v276, v174);
                goto LABEL_925;
              }
            }
            else
            {
              *(_DWORD *)(v262 + 24) -= 2;
            }
            goto LABEL_925;
          }
        }
        v274 = *(_QWORD *)(v245 + 56);
        if (v274)
        {
LABEL_916:
          v280 = 0;
          *(_DWORD *)(v274 + 24) += 2;
        }
        else
        {
          v279 = v245;
          while (1)
          {
            v279 = *(_QWORD *)(v279 + 32);
            if (!v279)
              break;
            v274 = *(_QWORD *)(v279 + 56);
            if (v274)
              goto LABEL_916;
          }
          v274 = 0;
          v280 = 1;
        }
        WebCore::updatePositionForNodeRemoval((uint64_t *)v167, (WebCore::Position *)v245, v254);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v245, 1);
        if ((v280 & 1) == 0)
          *(_DWORD *)(v274 + 24) += 2;
        if (*(_DWORD *)(v245 + 24) == 2)
        {
          if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v245, v174);
        }
        else
        {
          *(_DWORD *)(v245 + 24) -= 2;
        }
        if ((v280 & 1) != 0)
          goto LABEL_925;
        if (*(_DWORD *)(v274 + 24) == 2)
        {
          if ((*(_WORD *)(v274 + 30) & 0x400) == 0)
          {
            v276 = (WebCore::Node *)v274;
            goto LABEL_931;
          }
        }
        else
        {
          *(_DWORD *)(v274 + 24) -= 2;
        }
LABEL_925:
        v245 = v274;
        if (!v274)
          goto LABEL_938;
      }
    }
    if ((*(_BYTE *)(v1 + 460) & 8) != 0
      || ((v208 = *(_BYTE *)(v1 + 460) & 7, v208 != 4) ? (v209 = v208 == 2) : (v209 = 1), !v209))
    {
      v213 = *(_DWORD *)(v1 + 456);
      goto LABEL_630;
    }
    if (!v189)
    {
      v213 = 0;
      goto LABEL_630;
    }
    v210 = *(_DWORD *)(v189 + 24);
    *(_DWORD *)(v189 + 24) = v210 + 2;
    v211 = *(_WORD *)(v189 + 28);
    if ((v211 & 1) != 0)
    {
      v227 = *(_QWORD *)(v189 + 80);
      if (v227)
        v213 = *(_DWORD *)(v227 + 4);
      else
        v213 = 0;
    }
    else
    {
      if ((v211 & 4) == 0 || (v212 = *(_QWORD *)(v189 + 80)) == 0)
      {
        v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 208))(v189) ^ 1;
        v210 = *(_DWORD *)(v189 + 24) - 2;
        if (*(_DWORD *)(v189 + 24) != 2)
        {
LABEL_628:
          *(_DWORD *)(v189 + 24) = v210;
          goto LABEL_630;
        }
        goto LABEL_726;
      }
      v213 = 0;
      do
      {
        ++v213;
        v212 = *(_QWORD *)(v212 + 56);
      }
      while (v212);
    }
    if (v210)
      goto LABEL_628;
LABEL_726:
    if ((*(_WORD *)(v189 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
LABEL_630:
    if (v213 <= (int)v173)
    {
LABEL_644:
      if ((*(_QWORD *)(v189 + 64) & 0xFFFFFFFFFFFFLL) == 0
        || !(_DWORD)v173 && WebCore::Position::atLastEditingPositionForNode(v167, (const WebCore::Node *)v174))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, v189, 1);
      }
      v162 = v494;
LABEL_1016:
      if (*(_DWORD *)(v189 + 24) == 2)
      {
        if ((*(_WORD *)(v189 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
      }
      else
      {
        *(_DWORD *)(v189 + 24) -= 2;
      }
      goto LABEL_1018;
    }
    if ((*(_WORD *)(v189 + 28) & 2) == 0)
    {
      if ((*(_BYTE *)(v1 + 460) & 8) == 0 && ((v228 = *(_BYTE *)(v1 + 460) & 7, v228 == 4) || v228 == 2))
      {
        v229 = *(_WORD **)v167;
        if (*(_QWORD *)v167)
        {
          v230 = *((_DWORD *)v229 + 6);
          *((_DWORD *)v229 + 6) = v230 + 2;
          v231 = v229[14];
          if ((v231 & 1) != 0)
          {
            v482 = *((_QWORD *)v229 + 10);
            if (v482)
              v233 = *(_DWORD *)(v482 + 4);
            else
              v233 = 0;
          }
          else if ((v231 & 4) != 0 && (v232 = *((_QWORD *)v229 + 10)) != 0)
          {
            v233 = 0;
            do
            {
              ++v233;
              v232 = *(_QWORD *)(v232 + 56);
            }
            while (v232);
          }
          else
          {
            v233 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v229 + 208))(v229) ^ 1;
            v230 = *((_DWORD *)v229 + 6) - 2;
          }
          if (v230)
          {
            *((_DWORD *)v229 + 6) = v230;
          }
          else if ((v229[15] & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v229, v174);
          }
        }
        else
        {
          v233 = 0;
        }
      }
      else
      {
        v233 = *(_DWORD *)(v1 + 456);
      }
      WebCore::CompositeEditCommand::removeChildrenInRange(v1, (WebCore::Node *)v189, v173, v233);
      v235 = *(_QWORD *)(v1 + 400);
      if (v235)
        *(_DWORD *)(v235 + 24) += 2;
      v236 = *(_QWORD *)(v1 + 464);
      *(_QWORD *)(v1 + 464) = v235;
      if (v236)
      {
        if (*(_DWORD *)(v236 + 24) == 2)
        {
          if ((*(_WORD *)(v236 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v236, v174);
        }
        else
        {
          *(_DWORD *)(v236 + 24) -= 2;
        }
      }
      *(_DWORD *)(v1 + 472) = *(_DWORD *)(v1 + 408);
      *(_BYTE *)(v1 + 476) = *(_BYTE *)(v1 + 412);
      goto LABEL_644;
    }
    *(_DWORD *)(v189 + 24) += 2;
    if ((*(_BYTE *)(v1 + 460) & 8) != 0 || (v214 = *(_BYTE *)(v1 + 460) & 7, v214 != 4) && v214 != 2)
    {
      v219 = *(_DWORD *)(v1 + 456);
      goto LABEL_642;
    }
    v215 = *(_QWORD *)v167;
    if (!*(_QWORD *)v167)
    {
      v219 = 0;
LABEL_642:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 176))(v1, v189, v173, (v219 - v173));
      if (*(_DWORD *)(v189 + 24) == 2)
      {
        if ((*(_WORD *)(v189 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v189, v174);
      }
      else
      {
        *(_DWORD *)(v189 + 24) -= 2;
      }
      goto LABEL_644;
    }
    v216 = *(_DWORD *)(v215 + 24);
    *(_DWORD *)(v215 + 24) = v216 + 2;
    v217 = *(_WORD *)(v215 + 28);
    if ((v217 & 1) != 0)
    {
      v234 = *(_QWORD *)(v215 + 80);
      if (v234)
        v219 = *(_DWORD *)(v234 + 4);
      else
        v219 = 0;
    }
    else
    {
      if ((v217 & 4) == 0 || (v218 = *(_QWORD *)(v215 + 80)) == 0)
      {
        v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v215 + 208))(v215) ^ 1;
        v216 = *(_DWORD *)(v215 + 24) - 2;
        if (*(_DWORD *)(v215 + 24) != 2)
        {
LABEL_639:
          *(_DWORD *)(v215 + 24) = v216;
          goto LABEL_642;
        }
LABEL_745:
        if ((*(_WORD *)(v215 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v215, v174);
        goto LABEL_642;
      }
      v219 = 0;
      do
      {
        ++v219;
        v218 = *(_QWORD *)(v218 + 56);
      }
      while (v218);
    }
    if (v216)
      goto LABEL_639;
    goto LABEL_745;
  }
LABEL_1018:
  v307 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(v307 + 24) += 2;
  WebCore::Document::updateLayout(v307, 2u, 0);
  if (*(_DWORD *)(v307 + 24) == 2)
  {
    v28 = v492;
    if ((*(_WORD *)(v307 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v307, v15);
  }
  else
  {
    *(_DWORD *)(v307 + 24) -= 2;
    v28 = v492;
  }
  v308 = *(_QWORD *)(v1 + 480);
  if (v308)
    v309 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v309 = 0;
  if (v309 && v308)
  {
    if ((*(_WORD *)(v308 + 28) & 2) == 0 || (v310 = *(_QWORD *)(v308 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
LABEL_1027:
      v162 = v494;
      if (!v308)
        goto LABEL_1042;
      v311 = *(_WORD *)(v308 + 28);
      if ((v311 & 2) == 0)
        goto LABEL_1042;
      v312 = *(_DWORD *)(v308 + 24);
      v313 = v312 + 2;
      *(_DWORD *)(v308 + 24) = v312 + 2;
      if ((*(_BYTE *)(v1 + 492) & 8) != 0 || (v314 = *(_BYTE *)(v1 + 492) & 7, v314 != 4) && v314 != 2)
      {
        v316 = *(_DWORD *)(v1 + 488);
        goto LABEL_1038;
      }
      *(_DWORD *)(v308 + 24) = v312 + 4;
      if ((v311 & 1) != 0)
      {
        v453 = *(_QWORD *)(v308 + 80);
        if (v453)
          v316 = *(_DWORD *)(v453 + 4);
        else
          v316 = 0;
      }
      else
      {
        if ((v311 & 4) == 0 || (v315 = *(_QWORD *)(v308 + 80)) == 0)
        {
          v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v308 + 208))(v308) ^ 1;
          v313 = *(_DWORD *)(v308 + 24) - 2;
          if (*(_DWORD *)(v308 + 24) != 2)
          {
LABEL_1035:
            *(_DWORD *)(v308 + 24) = v313;
LABEL_1038:
            {
              WTF::String::String();
            }
            WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers((WebCore::CompositeEditCommand *)v1, (WebCore::Text *)v308, v316, 1, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
            if (*(_DWORD *)(v308 + 24) == 2)
            {
              v162 = v494;
              if ((*(_WORD *)(v308 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v308, v15);
            }
            else
            {
              *(_DWORD *)(v308 + 24) -= 2;
              v162 = v494;
            }
            goto LABEL_1042;
          }
LABEL_1489:
          if ((*(_WORD *)(v308 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v308, v15);
          goto LABEL_1038;
        }
        v316 = 0;
        do
        {
          ++v316;
          v315 = *(_QWORD *)(v315 + 56);
        }
        while (v315);
      }
      v28 = v492;
      if (v312 != -2)
        goto LABEL_1035;
      goto LABEL_1489;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v308 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AA222CLL);
    }
    ++*(_DWORD *)((*(_QWORD *)(v308 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v388 = WebCore::containsOffset(v310, *(_DWORD *)(v1 + 488), 0);
    v389 = *(_DWORD *)(v310 + 16);
    if (!v389)
    {
      __break(0xC471u);
      JUMPOUT(0x195AA226CLL);
    }
    *(_DWORD *)(v310 + 16) = v389 - 1;
    v162 = v494;
    if (!v388)
    {
      v308 = *(_QWORD *)(v1 + 480);
      goto LABEL_1027;
    }
  }
LABEL_1042:
  v317 = *v491;
  if (*v491)
    v318 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v318 = 0;
  if (!v318 || !v317)
    goto LABEL_1064;
  if ((*(_WORD *)(v317 + 28) & 2) == 0 || (v319 = *(_QWORD *)(v317 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_1049:
    v162 = v494;
    if (!v317)
      goto LABEL_1064;
    v320 = *(_WORD *)(v317 + 28);
    if ((v320 & 2) == 0)
      goto LABEL_1064;
    v321 = *(_DWORD *)(v317 + 24);
    v322 = v321 + 2;
    *(_DWORD *)(v317 + 24) = v321 + 2;
    if ((*(_BYTE *)(v1 + 508) & 8) != 0 || (v323 = *(_BYTE *)(v1 + 508) & 7, v323 != 4) && v323 != 2)
    {
      v325 = *(_DWORD *)(v1 + 504);
      goto LABEL_1060;
    }
    *(_DWORD *)(v317 + 24) = v321 + 4;
    if ((v320 & 1) != 0)
    {
      v454 = *(_QWORD *)(v317 + 80);
      if (v454)
        v325 = *(_DWORD *)(v454 + 4);
      else
        v325 = 0;
    }
    else
    {
      if ((v320 & 4) == 0 || (v324 = *(_QWORD *)(v317 + 80)) == 0)
      {
        v325 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v317 + 208))(v317) ^ 1;
        v322 = *(_DWORD *)(v317 + 24) - 2;
        if (*(_DWORD *)(v317 + 24) != 2)
        {
LABEL_1057:
          *(_DWORD *)(v317 + 24) = v322;
LABEL_1060:
          {
            WTF::String::String();
          }
          WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers((WebCore::CompositeEditCommand *)v1, (WebCore::Text *)v317, v325, 1, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
          if (*(_DWORD *)(v317 + 24) == 2)
          {
            if ((*(_WORD *)(v317 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v317, v15);
          }
          else
          {
            *(_DWORD *)(v317 + 24) -= 2;
          }
          goto LABEL_1064;
        }
LABEL_1494:
        if ((*(_WORD *)(v317 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v317, v15);
        goto LABEL_1060;
      }
      v325 = 0;
      do
      {
        ++v325;
        v324 = *(_QWORD *)(v324 + 56);
      }
      while (v324);
    }
    v28 = v492;
    v162 = v494;
    if (v321 != -2)
      goto LABEL_1057;
    goto LABEL_1494;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v317 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195AA224CLL);
  }
  ++*(_DWORD *)((*(_QWORD *)(v317 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  v390 = WebCore::containsOffset(v319, *(_DWORD *)(v1 + 504), 0);
  v391 = *(_DWORD *)(v319 + 16);
  if (!v391)
  {
    __break(0xC471u);
    JUMPOUT(0x195AA228CLL);
  }
  *(_DWORD *)(v319 + 16) = v391 - 1;
  v162 = v494;
  if (!v390)
  {
    v317 = *v491;
    goto LABEL_1049;
  }
LABEL_1064:
  if (*(_BYTE *)(v1 + 282))
  {
    if (!*(_QWORD *)v167
      || !*(_QWORD *)v61
      || (*(_BYTE *)(*(_QWORD *)v167 + 22) & 8) == 0
      || (*(_BYTE *)(*(_QWORD *)v61 + 22) & 8) == 0
      || (WebCore::treeOrder<(WebCore::TreeType)2>(v61, (uint64_t)v167) & 0x80) == 0)
    {
      goto LABEL_1114;
    }
    WebCore::VisiblePosition::canonicalPosition(v167, (uint64_t)&v530);
    v530.var1 = 1;
    WebCore::VisiblePosition::canonicalPosition(v61, (uint64_t)&v529);
    v529.var1 = 1;
    v326 = *(_QWORD *)v167;
    if (*(_QWORD *)v167)
    {
      *(_DWORD *)(v326 + 24) += 2;
      v527 = v326;
      WebCore::enclosingBlock(&v527, (WebCore::Node *)1, &v528);
      v527 = 0;
      if (*(_DWORD *)(v326 + 24) == 2)
      {
        if ((*(_WORD *)(v326 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v326, v15);
      }
      else
      {
        *(_DWORD *)(v326 + 24) -= 2;
      }
    }
    else
    {
      v527 = 0;
      WebCore::enclosingBlock(&v527, (WebCore::Node *)1, &v528);
      v527 = 0;
    }
    v327 = v528;
    if (!v528)
      goto LABEL_1692;
    v328 = v530.var0.var0.var0;
    if (v530.var0.var0.var0)
    {
      v329 = *((_DWORD *)v530.var0.var0.var0 + 6);
      v330 = v329 + 2;
      *((_DWORD *)v530.var0.var0.var0 + 6) = v329 + 2;
      if (v327 == (WebCore::Node *)v328)
        goto LABEL_1087;
      v331 = *((_WORD *)v327 + 14);
      if ((v331 & 0xF000) == 0x9000)
      {
        if (**((WebCore::Node ***)v328 + 5) == v327
          && (*((_WORD *)v328 + 14) & 0xF000) != 0x9000
          && (*((_BYTE *)v328 + 22) & 8) != 0)
        {
          goto LABEL_1087;
        }
      }
      else if ((v331 & 4) != 0
             && *((_QWORD *)v327 + 10)
             && ((*((unsigned __int8 *)v328 + 22) ^ *((unsigned __int8 *)v327 + 22)) & 8) == 0)
      {
        v332 = v328;
        do
          v332 = (Node *)*((_QWORD *)v332 + 4);
        while (v332 != (Node *)v327 && v332 != 0);
        if (v332)
        {
LABEL_1087:
          *((_DWORD *)v328 + 6) = v329 + 4;
          if (v329 == -2)
          {
            v442 = *((_WORD *)v328 + 15);
            if ((v442 & 0x400) != 0)
              goto LABEL_1424;
            WebCore::Node::removedLastRef((WebCore::Node *)v328, v15);
            v330 = *((_DWORD *)v328 + 6);
            v28 = v492;
          }
          else
          {
            *((_DWORD *)v328 + 6) = v330;
          }
          v334 = v330 - 2;
          if (v334)
          {
            *((_DWORD *)v328 + 6) = v334;
            goto LABEL_1091;
          }
          v442 = *((_WORD *)v328 + 15);
LABEL_1424:
          v28 = v492;
          if ((v442 & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v328, v15);
LABEL_1091:
          v335 = v529.var0.var0.var0;
          if (!v529.var0.var0.var0)
          {
            v339 = v61;
            goto LABEL_1314;
          }
          *((_DWORD *)v529.var0.var0.var0 + 6) += 4;
          v336 = *(_QWORD *)v61;
          if (*(_QWORD *)v61)
          {
            v337 = *(_BYTE *)(v1 + 412) & 7;
            v338 = 1;
            if (v337 > 4)
            {
              v339 = v61;
              v336 = 0;
            }
            else if (((1 << v337) & 0x19) != 0 || (v336 = *(_QWORD *)(v336 + 32)) != 0)
            {
              v339 = v61;
              v338 = 0;
              *(_DWORD *)(v336 + 24) += 2;
            }
            else
            {
              v339 = v61;
            }
          }
          else
          {
            v339 = v61;
            v338 = 1;
          }
          v526 = v336;
          v340 = 1;
          WebCore::enclosingBlock(&v526, (WebCore::Node *)1, &v495);
          if (!v495)
          {
LABEL_1307:
            v526 = 0;
            if ((v338 & 1) == 0)
            {
              if (*(_DWORD *)(v336 + 24) == 2)
              {
                if ((*(_WORD *)(v336 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v336, v341);
              }
              else
              {
                *(_DWORD *)(v336 + 24) -= 2;
              }
            }
            v392 = *((_DWORD *)v335 + 6) - 2;
            if (*((_DWORD *)v335 + 6) == 2)
            {
              v443 = *((_WORD *)v335 + 15);
              if ((v443 & 0x400) != 0)
              {
LABEL_1432:
                if ((v443 & 0x400) != 0)
                {
                  v28 = v492;
                  if (!v340)
                    goto LABEL_1323;
                }
                else
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v335, v341);
                  v28 = v492;
                  if (!v340)
                    goto LABEL_1323;
                }
LABEL_1314:
                v394 = *(_QWORD *)(v1 + 16);
                v395 = bmalloc::api::isoAllocate();
                *(_OWORD *)(v395 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v395 + 24) = 0x101C00000002;
                *(_QWORD *)(v395 + 32) = 0;
                *(_QWORD *)(v395 + 40) = v394 + 96;
                *(_OWORD *)(v395 + 48) = 0u;
                *(_OWORD *)(v395 + 64) = 0u;
                ++*(_DWORD *)(v394 + 3324);
                *(_QWORD *)(v395 + 80) = 0;
                *(_QWORD *)(v395 + 88) = 0;
                v396 = WebCore::HTMLNames::brTag;
                if (WebCore::HTMLNames::brTag)
                  ++*(_DWORD *)WebCore::HTMLNames::brTag;
                *(_QWORD *)(v395 + 96) = v396;
                *(_QWORD *)(v395 + 104) = 0;
                *(_QWORD *)v395 = off_1E33B4C28;
                v495 = (WebCore::Node *)v395;
                WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)v1, (uint64_t *)&v495, v339);
                v398 = v495;
                v495 = 0;
                if (v398)
                {
                  if (*((_DWORD *)v398 + 6) == 2)
                  {
                    if ((*((_WORD *)v398 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v398, v397);
                  }
                  else
                  {
                    *((_DWORD *)v398 + 6) -= 2;
                  }
                }
                WebCore::VisiblePosition::canonicalPosition(v339, (uint64_t)&v495);
                v400 = v529.var0.var0.var0;
                v529.var0.var0.var0 = (Node *)v495;
                if (v400)
                {
                  if (*((_DWORD *)v400 + 6) == 2)
                  {
                    if ((*((_WORD *)v400 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v400, v399);
                  }
                  else
                  {
                    *((_DWORD *)v400 + 6) -= 2;
                  }
                }
                v529.var0.var1 = v496;
                *((_BYTE *)&v529.var0 + 12) = BYTE4(v496);
                v529.var1 = 1;
                v28 = v492;
LABEL_1323:
                if (!WebCore::operator==((uint64_t *)&v529, (uint64_t *)&v530))
                {
                  WebCore::endOfParagraph((WebCore::Node *)&v530, 2, &v525);
                  if (WebCore::operator==((uint64_t *)&v529, (uint64_t *)&v525))
                    goto LABEL_1449;
                  if (!*(_BYTE *)(v1 + 287))
                  {
                    v417 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                    if (!v529.var0.var0.var0)
                      v417 = 0;
                    if (v417)
                    {
                      WebCore::startOfParagraph((uint64_t)&v529, 1, &v495);
                      v419 = WebCore::operator==((uint64_t *)&v529, (uint64_t *)&v495);
                      v420 = v495;
                      v495 = 0;
                      if (v420)
                      {
                        if (*((_DWORD *)v420 + 6) == 2)
                        {
                          if ((*((_WORD *)v420 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v420, v15);
                        }
                        else
                        {
                          *((_DWORD *)v420 + 6) -= 2;
                        }
                      }
                      if (v419)
                      {
                        v522.var0.var0.var0 = 0;
                        v495 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v530, &v522, v418);
                        v496 = v421;
                        v423 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v522.var0.var0.var0, (WebCore::RenderBlock *)&v495, 0, v422);
                        v522.var0.var0.var0 = 0;
                        v495 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v529, &v522, v424);
                        v496 = v425;
                        if (v423 > (int)WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v522.var0.var0.var0, (WebCore::RenderBlock *)&v495, 0, v426))
                        {
                          v427 = v529.var0.var0.var0;
                          if (v529.var0.var0.var0)
                            *((_DWORD *)v529.var0.var0.var0 + 6) += 2;
                          v522.var0.var0.var0 = v427;
                          *((_BYTE *)&v522.var0 + 12) = *((_BYTE *)&v529.var0 + 12);
                          v522.var0.var1 = v529.var0.var1;
                          WebCore::Position::downstream((uint64_t)&v522, (WebCore::Node *)1, (uint64_t)&v495);
                          v428 = 0;
                          v429 = v495;
                          if (v495 && (*((_WORD *)v495 + 14) & 0x10) != 0)
                            v428 = *(_QWORD *)(*((_QWORD *)v495 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag
                                                                                           + 24);
                          v495 = 0;
                          if (*((_DWORD *)v429 + 6) == 2)
                          {
                            if ((*((_WORD *)v429 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v429, v15);
                          }
                          else
                          {
                            *((_DWORD *)v429 + 6) -= 2;
                          }
                          v430 = v522.var0.var0.var0;
                          v522.var0.var0.var0 = 0;
                          if (v430)
                          {
                            if (*((_DWORD *)v430 + 6) == 2)
                            {
                              if ((*((_WORD *)v430 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v430, v15);
                            }
                            else
                            {
                              *((_DWORD *)v430 + 6) -= 2;
                            }
                          }
                          if (v428)
                          {
                            v431 = v529.var0.var0.var0;
                            if (v529.var0.var0.var0)
                              *((_DWORD *)v529.var0.var0.var0 + 6) += 2;
                            v522.var0.var0.var0 = v431;
                            *((_BYTE *)&v522.var0 + 12) = *((_BYTE *)&v529.var0 + 12);
                            v522.var0.var1 = v529.var0.var1;
                            WebCore::Position::downstream((uint64_t)&v522, (WebCore::Node *)1, (uint64_t)&v495);
                            v433 = v495;
                            if (v495)
                            {
                              v434 = *((_DWORD *)v495 + 6);
                              *((_DWORD *)v495 + 6) = v434 + 2;
                              v495 = 0;
                              if (v434)
                              {
                                *((_DWORD *)v433 + 6) = v434;
                              }
                              else if ((*((_WORD *)v433 + 15) & 0x400) == 0)
                              {
                                WebCore::Node::removedLastRef(v433, v432);
                              }
                            }
                            else
                            {
                              v495 = 0;
                            }
                            v435 = v522.var0.var0.var0;
                            v522.var0.var0.var0 = 0;
                            if (v435)
                            {
                              if (*((_DWORD *)v435 + 6) == 2)
                              {
                                if ((*((_WORD *)v435 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v435, v432);
                              }
                              else
                              {
                                *((_DWORD *)v435 + 6) -= 2;
                              }
                            }
                            WebCore::CompositeEditCommand::removeNodeAndPruneAncestors((WebCore::CompositeEditCommand *)v1, v433);
                            v436 = v530.var0.var0.var0;
                            if (v530.var0.var0.var0)
                              *((_DWORD *)v530.var0.var0.var0 + 6) += 2;
                            LODWORD(v495) = v530.var0.var1;
                            BYTE4(v495) = *((_BYTE *)&v530.var0 + 12);
                            v437 = *(_QWORD *)(v1 + 464);
                            *(_QWORD *)(v1 + 464) = v436;
                            if (v437)
                            {
                              if (*(_DWORD *)(v437 + 24) == 2)
                              {
                                if ((*(_WORD *)(v437 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v437, v15);
                              }
                              else
                              {
                                *(_DWORD *)(v437 + 24) -= 2;
                              }
                            }
                            *(_DWORD *)(v1 + 472) = (_DWORD)v495;
                            *(_BYTE *)(v1 + 476) = BYTE4(v495);
                            if (*((_DWORD *)v433 + 6) != 2)
                            {
                              *((_DWORD *)v433 + 6) -= 2;
                              goto LABEL_1449;
                            }
                            if ((*((_WORD *)v433 + 15) & 0x400) != 0)
                              goto LABEL_1449;
                            v416 = v433;
LABEL_1532:
                            WebCore::Node::removedLastRef(v416, v15);
                            goto LABEL_1449;
                          }
                        }
                      }
                    }
                  }
                  v401 = v530.var0.var0.var0;
                  if (v530.var0.var0.var0)
                  {
                    *((_DWORD *)v530.var0.var0.var0 + 6) += 2;
                    v402 = *((_QWORD *)v401 + 8) & 0xFFFFFFFFFFFFLL;
                    if (v402
                      && (*(_BYTE *)((*((_QWORD *)v401 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0
                      && ((v438 = *(unsigned __int8 *)((*((_QWORD *)v401 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E), v438 == 35)
                       || v438 == 63
                       || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v402 + 152))(*((_QWORD *)v401 + 8) & 0xFFFFFFFFFFFFLL) & 1) != 0
                       || (*(_BYTE *)(v402 + 45) & 1) == 0
                       && (v452 = *(_QWORD *)(*(_QWORD *)(v402 + 24) + 8)) != 0
                       && (*(_WORD *)(v452 + 28) & 0x10) != 0
                       && *(_QWORD *)(*(_QWORD *)(v452 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24)))
                    {
                      v439 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                      if (!v529.var0.var0.var0)
                        v439 = 0;
                      if (v439)
                      {
                        WebCore::startOfParagraph((uint64_t)&v529, 1, &v495);
                        v440 = WebCore::operator==((uint64_t *)&v529, (uint64_t *)&v495);
                        v441 = v495;
                        v495 = 0;
                        if (v441)
                        {
                          if (*((_DWORD *)v441 + 6) == 2)
                          {
                            if ((*((_WORD *)v441 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v441, v15);
                          }
                          else
                          {
                            *((_DWORD *)v441 + 6) -= 2;
                          }
                        }
                      }
                      else
                      {
                        v440 = 0;
                      }
                      if (*((_DWORD *)v401 + 6) == 2)
                      {
                        if ((*((_WORD *)v401 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v401, v15);
                      }
                      else
                      {
                        *((_DWORD *)v401 + 6) -= 2;
                      }
                      if (!v440)
                      {
                        v444 = *(_QWORD *)(v1 + 400);
                        if (v444)
                          *(_DWORD *)(v444 + 24) += 2;
                        v445 = *(_QWORD *)(v1 + 464);
                        *(_QWORD *)(v1 + 464) = v444;
                        if (v445)
                        {
                          if (*(_DWORD *)(v445 + 24) == 2)
                          {
                            if ((*(_WORD *)(v445 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v445, v15);
                          }
                          else
                          {
                            *(_DWORD *)(v445 + 24) -= 2;
                          }
                        }
                        *(_DWORD *)(v1 + 472) = *(_DWORD *)(v1 + 408);
                        *(_BYTE *)(v1 + 476) = *(_BYTE *)(v1 + 412);
                        goto LABEL_1449;
                      }
                    }
                    else if (*((_DWORD *)v401 + 6) == 2)
                    {
                      if ((*((_WORD *)v401 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v401, v15);
                    }
                    else
                    {
                      *((_DWORD *)v401 + 6) -= 2;
                    }
                  }
                  WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v530, (uint64_t)&v525, (uint64_t)&v495);
                  if (!(_BYTE)v500)
                  {
LABEL_1449:
                    v446 = v525.var0.var0.var0;
                    v525.var0.var0.var0 = 0;
                    if (v446)
                    {
                      if (*((_DWORD *)v446 + 6) == 2)
                      {
                        if ((*((_WORD *)v446 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v446, v15);
                      }
                      else
                      {
                        *((_DWORD *)v446 + 6) -= 2;
                      }
                    }
                    v28 = v492;
                    goto LABEL_1690;
                  }
                  v403 = v529.var0.var0.var0;
                  if (v529.var0.var0.var0)
                  {
                    *((_DWORD *)v529.var0.var0.var0 + 6) += 2;
                    v522.var0.var0.var0 = v403;
                    v522.var0.var1 = v529.var0.var1;
                    *((_BYTE *)&v522.var0 + 12) = *((_BYTE *)&v529.var0 + 12);
                    WebCore::makeBoundaryPoint((uint64_t *)&v522, (uint64_t)&v531);
                    if (*((_DWORD *)v403 + 6) == 2)
                    {
                      if ((*((_WORD *)v403 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v403, v15);
                    }
                    else
                    {
                      *((_DWORD *)v403 + 6) -= 2;
                    }
                  }
                  else
                  {
                    v522.var0.var0.var0 = 0;
                    v522.var0.var1 = v529.var0.var1;
                    *((_BYTE *)&v522.var0 + 12) = *((_BYTE *)&v529.var0 + 12);
                    WebCore::makeBoundaryPoint((uint64_t *)&v522, (uint64_t)&v531);
                  }
                  if (!v533)
                  {
LABEL_1357:
                    if (!(_BYTE)v500)
                      goto LABEL_1449;
                    v415 = v497;
                    v497 = 0;
                    if (v415)
                    {
                      if (*((_DWORD *)v415 + 6) == 2)
                      {
                        if ((*((_WORD *)v415 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v415, v15);
                      }
                      else
                      {
                        *((_DWORD *)v415 + 6) -= 2;
                      }
                    }
                    v416 = v495;
                    v495 = 0;
                    if (!v416)
                      goto LABEL_1449;
                    if (*((_DWORD *)v416 + 6) == 2)
                    {
                      if ((*((_WORD *)v416 + 15) & 0x400) != 0)
                        goto LABEL_1449;
                      goto LABEL_1532;
                    }
                    *((_DWORD *)v416 + 6) -= 2;
                    goto LABEL_1449;
                  }
                  v404 = (Node *)v531;
                  *((_DWORD *)v531 + 6) += 2;
                  v522.var0.var0.var0 = v404;
                  v522.var0.var1 = v532;
                  *(_QWORD *)&v522.var1 = v404;
                  v523 = v532;
                  v524 = 1;
                  v405 = *(_QWORD *)(v1 + 16);
                  *(_DWORD *)(v405 + 24) += 2;
                  v406 = *(_QWORD *)(v405 + 3056);
                  if (!v406)
                  {
                    v479 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                    WebCore::Editor::Editor(v479, (WebCore::Document *)v405);
                    v480 = *(WebCore::Editor **)(v405 + 3056);
                    *(_QWORD *)(v405 + 3056) = v479;
                    if (v480)
                    {
                      WebCore::Editor::~Editor(v480, v15);
                      if (*(_DWORD *)v481)
                      {
                        *(_QWORD *)(v481 + 496) = 0;
                        *(_OWORD *)(v481 + 464) = 0u;
                        *(_OWORD *)(v481 + 480) = 0u;
                        *(_OWORD *)(v481 + 432) = 0u;
                        *(_OWORD *)(v481 + 448) = 0u;
                        *(_OWORD *)(v481 + 400) = 0u;
                        *(_OWORD *)(v481 + 416) = 0u;
                        *(_OWORD *)(v481 + 368) = 0u;
                        *(_OWORD *)(v481 + 384) = 0u;
                        *(_OWORD *)(v481 + 336) = 0u;
                        *(_OWORD *)(v481 + 352) = 0u;
                        *(_OWORD *)(v481 + 304) = 0u;
                        *(_OWORD *)(v481 + 320) = 0u;
                        *(_OWORD *)(v481 + 272) = 0u;
                        *(_OWORD *)(v481 + 288) = 0u;
                        *(_OWORD *)(v481 + 240) = 0u;
                        *(_OWORD *)(v481 + 256) = 0u;
                        *(_OWORD *)(v481 + 208) = 0u;
                        *(_OWORD *)(v481 + 224) = 0u;
                        *(_OWORD *)(v481 + 176) = 0u;
                        *(_OWORD *)(v481 + 192) = 0u;
                        *(_OWORD *)(v481 + 144) = 0u;
                        *(_OWORD *)(v481 + 160) = 0u;
                        *(_OWORD *)(v481 + 112) = 0u;
                        *(_OWORD *)(v481 + 128) = 0u;
                        *(_OWORD *)(v481 + 80) = 0u;
                        *(_OWORD *)(v481 + 96) = 0u;
                        *(_OWORD *)(v481 + 48) = 0u;
                        *(_OWORD *)(v481 + 64) = 0u;
                        *(_OWORD *)(v481 + 16) = 0u;
                        *(_OWORD *)(v481 + 32) = 0u;
                        *(_OWORD *)v481 = 0u;
                      }
                      else
                      {
                        WTF::fastFree((WTF *)v481, v15);
                      }
                    }
                    v406 = *(_QWORD *)(v405 + 3056);
                  }
                  v407 = *(_QWORD *)(v406 + 8);
                  if (v407)
                    v14 = *(WebCore::Node **)(v407 + 8);
                  else
                    v14 = 0;
                  v16 = v500;
                  if ((_BYTE)v500)
                  {
                    v16 = v524;
                    if (v524)
                    {
                      v408 = (*(uint64_t (**)(WebCore::Node *, WebCore::Node **, VisiblePosition *))(*(_QWORD *)v14 + 160))(v14, &v495, &v522);
                      if (*(_DWORD *)(v405 + 24) == 2)
                      {
                        if ((*(_WORD *)(v405 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v405, v15);
                      }
                      else
                      {
                        *(_DWORD *)(v405 + 24) -= 2;
                      }
                      if (v408)
                      {
                        v409 = *(_BYTE *)(v1 + 283);
                        v410 = WebCore::operator==((uint64_t *)&v530, (uint64_t *)&v525);
                        WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)v1, &v530, &v525, &v529, 0, !v410);
                        *(_BYTE *)(v1 + 283) = v409;
                        v411 = *(_QWORD *)(v1 + 192);
                        if (v411)
                        {
                          if ((*(_BYTE *)(v411 + 22) & 8) != 0)
                          {
                            *(_DWORD *)(v411 + 24) += 2;
                            v412 = *(_QWORD *)(v1 + 464);
                            *(_QWORD *)(v1 + 464) = v411;
                            if (v412)
                            {
                              if (*(_DWORD *)(v412 + 24) == 2)
                              {
                                if ((*(_WORD *)(v412 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v412, v15);
                              }
                              else
                              {
                                *(_DWORD *)(v412 + 24) -= 2;
                              }
                            }
                            *(_DWORD *)(v1 + 472) = *(_DWORD *)(v1 + 200);
                            *(_BYTE *)(v1 + 476) = *(_BYTE *)(v1 + 204);
                          }
                        }
                      }
                      if (v524)
                      {
                        v413 = *(_QWORD *)&v522.var1;
                        *(_QWORD *)&v522.var1 = 0;
                        if (v413)
                        {
                          if (*(_DWORD *)(v413 + 24) == 2)
                          {
                            if ((*(_WORD *)(v413 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v413, v15);
                          }
                          else
                          {
                            *(_DWORD *)(v413 + 24) -= 2;
                          }
                        }
                        v414 = v522.var0.var0.var0;
                        v522.var0.var0.var0 = 0;
                        if (v414)
                        {
                          if (*((_DWORD *)v414 + 6) == 2)
                          {
                            if ((*((_WORD *)v414 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v414, v15);
                          }
                          else
                          {
                            *((_DWORD *)v414 + 6) -= 2;
                          }
                        }
                      }
                      goto LABEL_1357;
                    }
                  }
LABEL_1454:
                  __break(1u);
                  goto LABEL_1455;
                }
LABEL_1690:
                if (*((_DWORD *)v327 + 6) == 2)
                {
                  v162 = v494;
                  if ((*((_WORD *)v327 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v327, v15);
                }
                else
                {
                  *((_DWORD *)v327 + 6) -= 2;
                  v162 = v494;
                }
LABEL_1692:
                v483 = v529.var0.var0.var0;
                v529.var0.var0.var0 = 0;
                if (v483)
                {
                  if (*((_DWORD *)v483 + 6) == 2)
                  {
                    if ((*((_WORD *)v483 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v483, v15);
                  }
                  else
                  {
                    *((_DWORD *)v483 + 6) -= 2;
                  }
                }
                v484 = v530.var0.var0.var0;
                v530.var0.var0.var0 = 0;
                if (v484)
                {
                  if (*((_DWORD *)v484 + 6) == 2)
                  {
                    if ((*((_WORD *)v484 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v484, v15);
                  }
                  else
                  {
                    *((_DWORD *)v484 + 6) -= 2;
                  }
                }
                goto LABEL_1114;
              }
              WebCore::Node::removedLastRef((WebCore::Node *)v335, v341);
              v392 = *((_DWORD *)v335 + 6);
              v28 = v492;
            }
            else
            {
              *((_DWORD *)v335 + 6) = v392;
            }
            v393 = v392 - 2;
            if (v393)
            {
              *((_DWORD *)v335 + 6) = v393;
              if (!v340)
                goto LABEL_1323;
              goto LABEL_1314;
            }
            v443 = *((_WORD *)v335 + 15);
            goto LABEL_1432;
          }
          v342 = *((_WORD *)v495 + 14);
          if ((v342 & 0xF000) == 0x9000)
          {
            if (**((WebCore::Node ***)v335 + 5) != v495
              || (*((_WORD *)v335 + 14) & 0xF000) == 0x9000
              || (*((_BYTE *)v335 + 22) & 8) == 0)
            {
              goto LABEL_1304;
            }
          }
          else
          {
            if ((v342 & 4) == 0)
              goto LABEL_1305;
            if (!*((_QWORD *)v495 + 10)
              || ((*((unsigned __int8 *)v335 + 22) ^ *((unsigned __int8 *)v495 + 22)) & 8) != 0)
            {
LABEL_1304:
              v28 = v492;
LABEL_1305:
              if (*((_DWORD *)v495 + 6) == 2)
              {
                if ((*((_WORD *)v495 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v495, v341);
                v28 = v492;
              }
              else
              {
                *((_DWORD *)v495 + 6) -= 2;
              }
              goto LABEL_1307;
            }
            v343 = v335;
            do
              v343 = (Node *)*((_QWORD *)v343 + 4);
            while (v343 != (Node *)v495 && v343 != 0);
            if (!v343)
            {
              v340 = 1;
              goto LABEL_1304;
            }
          }
          v340 = *(_BYTE *)(v1 + 287) != 0;
          goto LABEL_1304;
        }
      }
      if (v329)
      {
        *((_DWORD *)v328 + 6) = v329;
      }
      else if ((*((_WORD *)v328 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v328, v15);
      }
    }
    (*(void (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)v1 + 184))(v1, v327, 1);
    goto LABEL_1690;
  }
  if (*(_BYTE *)(v1 + 286))
  {
    WebCore::highestNodeToRemoveInPruning(*(unsigned int **)(v1 + 512), (WebCore::Node *)v15, (unsigned int **)&v495);
    v345 = v495;
    if (v495)
    {
      (*(void (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)v1 + 184))(v1, v495, 1);
      if (*((_DWORD *)v345 + 6) == 2)
      {
        if ((*((_WORD *)v345 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v345, v15);
      }
      else
      {
        *((_DWORD *)v345 + 6) -= 2;
      }
    }
    *(_BYTE *)(v1 + 283) = 0;
  }
LABEL_1114:
  v346 = *(_QWORD *)(v1 + 568);
  if (v346)
  {
    if ((*(_BYTE *)(v346 + 22) & 8) != 0 && v346 != *(_QWORD *)(v1 + 560))
    {
      v347 = *(_QWORD *)(v346 + 48) & 0xFFFFFFFFFFFFLL;
      if (v347)
      {
        *(_DWORD *)((*(_QWORD *)(v346 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        while (v347 != *(_QWORD *)(v1 + 560))
        {
          v348 = *(_QWORD *)(v347 + 48);
          v349 = v348 & 0xFFFFFFFFFFFFLL;
          if ((v348 & 0xFFFFFFFFFFFFLL) != 0)
            *(_DWORD *)((v348 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
          if (WebCore::isTableRowEmpty((WebCore *)v347, (const WebCore::Node *)v15))
            WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(v1, v347, (WebCore::Node *)1);
          if (*(_DWORD *)(v347 + 24) == 2)
          {
            if ((*(_WORD *)(v347 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v347, v15);
          }
          else
          {
            *(_DWORD *)(v347 + 24) -= 2;
          }
          v347 = v349;
          if (!v349)
            goto LABEL_1132;
        }
        if (*(_DWORD *)(v347 + 24) == 2)
        {
          if ((*(_WORD *)(v347 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v347, v15);
        }
        else
        {
          *(_DWORD *)(v347 + 24) -= 2;
        }
      }
    }
  }
LABEL_1132:
  v350 = *(_QWORD *)(v1 + 560);
  if (v350 && (*(_BYTE *)(v350 + 22) & 8) != 0)
  {
    if (v350 == *(_QWORD *)(v1 + 568))
    {
      v353 = (_DWORD *)(v350 + 24);
      *(_DWORD *)(v350 + 24) += 2;
      goto LABEL_1153;
    }
    v351 = *(_QWORD *)(v350 + 56);
    if (v351)
    {
      *(_DWORD *)(v351 + 24) += 2;
      while (1)
      {
        v352 = v351;
        if (v351 == *(_QWORD *)(v1 + 568))
          break;
        v351 = *(_QWORD *)(v351 + 56);
        if (v351)
          *(_DWORD *)(v351 + 24) += 2;
        if (WebCore::isTableRowEmpty((WebCore *)v352, (const WebCore::Node *)v15))
          WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(v1, v352, (WebCore::Node *)1);
        if (*(_DWORD *)(v352 + 24) == 2)
        {
          if ((*(_WORD *)(v352 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v352, v15);
        }
        else
        {
          *(_DWORD *)(v352 + 24) -= 2;
        }
        if (!v351)
          goto LABEL_1151;
      }
      if (*(_DWORD *)(v351 + 24) == 2)
      {
        if ((*(_WORD *)(v351 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v351, v15);
      }
      else
      {
        *(_DWORD *)(v351 + 24) -= 2;
      }
    }
  }
LABEL_1151:
  v350 = *(_QWORD *)(v1 + 568);
  if (v350)
  {
    v353 = (_DWORD *)(v350 + 24);
    v354 = *(_QWORD *)(v350 + 16);
    *(_DWORD *)(v350 + 24) += 2;
    if ((v354 & 0x8000000000000) == 0)
      goto LABEL_1172;
LABEL_1153:
    if (v350 != *(_QWORD *)(v1 + 560)
      && WebCore::isTableRowEmpty((WebCore *)v350, (const WebCore::Node *)v15))
    {
      v355 = *(_QWORD *)(v1 + 464);
      if (v355)
      {
        v356 = *(_DWORD *)(v355 + 24);
        *(_DWORD *)(v355 + 24) = v356 + 2;
        v357 = *(_WORD *)(v350 + 28);
        if ((v357 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v355 + 40) == v350 && (*(_WORD *)(v355 + 28) & 0xF000) != 0x9000)
            v359 = (*(unsigned __int8 *)(v355 + 22) >> 3) & 1;
          else
            LOBYTE(v359) = 0;
          v28 = v492;
          v162 = v494;
          if (v356)
          {
LABEL_1169:
            *(_DWORD *)(v355 + 24) = v356;
            goto LABEL_1170;
          }
        }
        else
        {
          if ((v357 & 4) != 0
            && *(_QWORD *)(v350 + 80)
            && ((*(unsigned __int8 *)(v355 + 22) ^ *(unsigned __int8 *)(v350 + 22)) & 8) == 0)
          {
            v358 = v355;
            do
            {
              v358 = *(_QWORD *)(v358 + 32);
              LOBYTE(v359) = v358 != 0;
            }
            while (v358 != v350 && v358 != 0);
          }
          else
          {
            LOBYTE(v359) = 0;
          }
          if (v356)
            goto LABEL_1169;
        }
        if ((*(_WORD *)(v355 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v355, v15);
LABEL_1170:
        if ((v359 & 1) != 0)
          goto LABEL_1172;
        goto LABEL_1171;
      }
      if ((*(_WORD *)(v350 + 28) & 0xF000) != 0x9000
        || *MEMORY[0x28] != v350
        || (MEMORY[0x1C] & 0xF000) == 0x9000
        || (MEMORY[0x16] & 8) == 0)
      {
LABEL_1171:
        WebCore::DeleteSelectionCommand::removeNodeUpdatingStates(v1, v350, (WebCore::Node *)1);
      }
    }
LABEL_1172:
    if (*v353 == 2)
    {
      if ((*(_WORD *)(v350 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v350, v15);
    }
    else
    {
      *v353 -= 2;
    }
  }
  if (!*v162)
    goto LABEL_1234;
  if (!*(_BYTE *)(v1 + 288))
    goto LABEL_1224;
  v361 = *(_QWORD *)(v1 + 464);
  if (!v361)
    goto LABEL_1224;
  v362 = *(_BYTE *)(v1 + 476) & 7;
  if (v362 > 4)
    goto LABEL_1224;
  if (((1 << v362) & 0x19) == 0)
  {
    v361 = *(_QWORD *)(v361 + 32);
    if (!v361)
      goto LABEL_1224;
  }
  v363 = 0;
  v364 = (_QWORD *)(v1 + 464);
  *(_DWORD *)(v361 + 24) += 2;
  v365 = v361;
  do
  {
    if (!WebCore::Node::hasEditableStyle(v365, 0))
      break;
    if ((*(_WORD *)(v365 + 28) & 8) != 0)
      v363 = v365;
    m = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v361 + 40) + 8) + 1272);
    if (m)
    {
      if ((*(_WORD *)(m + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (m = *(_QWORD *)(m + 80); m; m = *(_QWORD *)(m + 56))
        {
          if ((*(_WORD *)(m + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        m = 0;
      }
    }
    if (m == v365)
      break;
    v365 = *(_QWORD *)(v365 + 32);
  }
  while (v365);
  if (v363)
    *(_DWORD *)(v363 + 24) += 2;
  while (v361 != v363)
  {
    if (WebCore::CompositeEditCommand::isRemovableBlock((WebCore::CompositeEditCommand *)v1, (const WebCore::Node *)v361, (uint64_t)v366, v367, v368))
    {
      if (v361 == *v364)
      {
        if ((*(_BYTE *)(v1 + 476) & 7) != 0)
        {
          WebCore::updatePositionForNodeRemoval((uint64_t *)(v1 + 464), (WebCore::Position *)v361, v366);
        }
        else
        {
          v371 = *(_DWORD *)(v1 + 472);
          WebCore::updatePositionForNodeRemoval((uint64_t *)(v1 + 464), (WebCore::Position *)v361, v366);
          if (v371)
          {
            *(_DWORD *)(v1 + 472) = v371;
            if ((*(_BYTE *)(v1 + 476) & 8) != 0)
            {
              if (*v364 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v364 + 208))(*v364) & 1) == 0)
                v372 = 2;
              else
                v372 = 0;
              *(_BYTE *)(v1 + 476) = *(_BYTE *)(v1 + 476) & 0xF8 | v372;
            }
          }
        }
      }
      WebCore::CompositeEditCommand::removeNodePreservingChildren((WebCore::CompositeEditCommand *)v1, v361, 1);
      v370 = *(_QWORD *)(v1 + 464);
      if (!v370)
        goto LABEL_1203;
    }
    else
    {
      v370 = *(_QWORD *)(v361 + 32);
      if (!v370)
        goto LABEL_1203;
    }
    *(_DWORD *)(v370 + 24) += 2;
LABEL_1203:
    if (*(_DWORD *)(v361 + 24) == 2)
    {
      if ((*(_WORD *)(v361 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v361, v15);
    }
    else
    {
      *(_DWORD *)(v361 + 24) -= 2;
    }
    v361 = v370;
    if (!v370)
      break;
  }
  if (v363)
  {
    if (*(_DWORD *)(v363 + 24) == 2)
    {
      if ((*(_WORD *)(v363 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v363, v15);
    }
    else
    {
      *(_DWORD *)(v363 + 24) -= 2;
    }
  }
  if (v361)
  {
    if (*(_DWORD *)(v361 + 24) == 2)
    {
      if ((*(_WORD *)(v361 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v361, v15);
    }
    else
    {
      *(_DWORD *)(v361 + 24) -= 2;
    }
  }
LABEL_1224:
  v373 = *(_QWORD *)(v1 + 464);
  if (v373)
  {
    v374 = *(_BYTE *)(v1 + 476) & 7;
    if (v374 <= 4)
    {
      if (((1 << v374) & 0x19) != 0)
      {
        if (v374 - 1 > 1)
          goto LABEL_1228;
        goto LABEL_1637;
      }
      if (*(_QWORD *)(v373 + 32))
      {
LABEL_1637:
        v373 = *(_QWORD *)(v373 + 32);
LABEL_1228:
        if ((*(_BYTE *)(v373 + 22) & 8) != 0)
        {
          v375 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v375 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v375 + 24) = 0x101C00000002;
          *(_QWORD *)(v375 + 32) = 0;
          *(_QWORD *)(v375 + 40) = v28 + 96;
          *(_OWORD *)(v375 + 48) = 0u;
          *(_OWORD *)(v375 + 64) = 0u;
          ++*(_DWORD *)(v28 + 3324);
          *(_QWORD *)(v375 + 80) = 0;
          *(_QWORD *)(v375 + 88) = 0;
          v376 = WebCore::HTMLNames::brTag;
          if (WebCore::HTMLNames::brTag)
            ++*(_DWORD *)WebCore::HTMLNames::brTag;
          *(_QWORD *)(v375 + 96) = v376;
          *(_QWORD *)(v375 + 104) = 0;
          *(_QWORD *)v375 = off_1E33B4C28;
          v495 = (WebCore::Node *)v375;
          WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)v1, (uint64_t *)&v495, (WebCore::Position *)(v1 + 464));
          v377 = v495;
          v495 = 0;
          if (v377)
          {
            if (*((_DWORD *)v377 + 6) == 2)
            {
              if ((*((_WORD *)v377 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v377, v15);
            }
            else
            {
              *((_DWORD *)v377 + 6) -= 2;
            }
          }
LABEL_1234:
          v378 = *(_QWORD *)(v28 + 3056);
          if (!v378)
          {
            v455 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v455, (WebCore::Document *)v28);
            v456 = *(WebCore::Editor **)(v28 + 3056);
            *(_QWORD *)(v28 + 3056) = v455;
            if (v456)
            {
              WebCore::Editor::~Editor(v456, v15);
              if (*(_DWORD *)v457)
              {
                *(_QWORD *)(v457 + 496) = 0;
                *(_OWORD *)(v457 + 464) = 0u;
                *(_OWORD *)(v457 + 480) = 0u;
                *(_OWORD *)(v457 + 432) = 0u;
                *(_OWORD *)(v457 + 448) = 0u;
                *(_OWORD *)(v457 + 400) = 0u;
                *(_OWORD *)(v457 + 416) = 0u;
                *(_OWORD *)(v457 + 368) = 0u;
                *(_OWORD *)(v457 + 384) = 0u;
                *(_OWORD *)(v457 + 336) = 0u;
                *(_OWORD *)(v457 + 352) = 0u;
                *(_OWORD *)(v457 + 304) = 0u;
                *(_OWORD *)(v457 + 320) = 0u;
                *(_OWORD *)(v457 + 272) = 0u;
                *(_OWORD *)(v457 + 288) = 0u;
                *(_OWORD *)(v457 + 240) = 0u;
                *(_OWORD *)(v457 + 256) = 0u;
                *(_OWORD *)(v457 + 208) = 0u;
                *(_OWORD *)(v457 + 224) = 0u;
                *(_OWORD *)(v457 + 176) = 0u;
                *(_OWORD *)(v457 + 192) = 0u;
                *(_OWORD *)(v457 + 144) = 0u;
                *(_OWORD *)(v457 + 160) = 0u;
                *(_OWORD *)(v457 + 112) = 0u;
                *(_OWORD *)(v457 + 128) = 0u;
                *(_OWORD *)(v457 + 80) = 0u;
                *(_OWORD *)(v457 + 96) = 0u;
                *(_OWORD *)(v457 + 48) = 0u;
                *(_OWORD *)(v457 + 64) = 0u;
                *(_OWORD *)(v457 + 16) = 0u;
                *(_OWORD *)(v457 + 32) = 0u;
                *(_OWORD *)v457 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v457, v15);
              }
            }
            v28 = v492;
            v378 = *(_QWORD *)(v492 + 3056);
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v378 + 16) + 8) + 680) + 370) != 3)
            goto LABEL_1240;
          v14 = *(WebCore::Node **)(v1 + 464);
          if (!v14)
            goto LABEL_1240;
          v16 = *((_DWORD *)v14 + 6);
          *((_DWORD *)v14 + 6) = v16 + 2;
          if ((*((_WORD *)v14 + 14) & 2) == 0)
          {
            if (v16)
            {
              *((_DWORD *)v14 + 6) = v16;
              goto LABEL_1240;
            }
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
LABEL_1288:
              WebCore::Node::removedLastRef(v14, v15);
            goto LABEL_1240;
          }
LABEL_1455:
          v447 = WebCore::ScriptDisallowedScope::s_count++;
          v448 = *((_QWORD *)v14 + 10);
          if (v448 && *(_DWORD *)(v448 + 4) && (*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195AA2818);
            }
            v459 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) + 0x20)
                                                     + 8)
                                         + 104)
                             + 228) & 0xC;
            WebCore::ScriptDisallowedScope::s_count = v447;
            if (v16)
            {
              *((_DWORD *)v14 + 6) = v16;
            }
            else if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v14, v15);
            }
            v28 = v492;
            if (!v459)
              goto LABEL_1240;
          }
          else
          {
            WebCore::ScriptDisallowedScope::s_count = v447;
            if (v16)
            {
              *((_DWORD *)v14 + 6) = v16;
              v28 = v492;
            }
            else
            {
              v28 = v492;
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                goto LABEL_1288;
            }
LABEL_1240:
            WebCore::CompositeEditCommand::rebalanceWhitespaceAt((WebCore::CompositeEditCommand *)v1, (const WebCore::Position *)(v1 + 464));
          }
          WebCore::DeleteSelectionCommand::calculateTypingStyleAfterDelete((unsigned int *)v1, v15);
          if (v516)
          {
            if (*((_DWORD *)v516 + 1))
            {
              if (!*(_QWORD *)(v28 + 3056))
              {
                v383 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v383, (WebCore::Document *)v28);
                v385 = *(WebCore::Editor **)(v28 + 3056);
                *(_QWORD *)(v28 + 3056) = v383;
                if (v385)
                {
                  WebCore::Editor::~Editor(v385, v384);
                  if (*(_DWORD *)v386)
                  {
                    *(_QWORD *)(v386 + 496) = 0;
                    *(_OWORD *)(v386 + 464) = 0u;
                    *(_OWORD *)(v386 + 480) = 0u;
                    *(_OWORD *)(v386 + 432) = 0u;
                    *(_OWORD *)(v386 + 448) = 0u;
                    *(_OWORD *)(v386 + 400) = 0u;
                    *(_OWORD *)(v386 + 416) = 0u;
                    *(_OWORD *)(v386 + 368) = 0u;
                    *(_OWORD *)(v386 + 384) = 0u;
                    *(_OWORD *)(v386 + 336) = 0u;
                    *(_OWORD *)(v386 + 352) = 0u;
                    *(_OWORD *)(v386 + 304) = 0u;
                    *(_OWORD *)(v386 + 320) = 0u;
                    *(_OWORD *)(v386 + 272) = 0u;
                    *(_OWORD *)(v386 + 288) = 0u;
                    *(_OWORD *)(v386 + 240) = 0u;
                    *(_OWORD *)(v386 + 256) = 0u;
                    *(_OWORD *)(v386 + 208) = 0u;
                    *(_OWORD *)(v386 + 224) = 0u;
                    *(_OWORD *)(v386 + 176) = 0u;
                    *(_OWORD *)(v386 + 192) = 0u;
                    *(_OWORD *)(v386 + 144) = 0u;
                    *(_OWORD *)(v386 + 160) = 0u;
                    *(_OWORD *)(v386 + 112) = 0u;
                    *(_OWORD *)(v386 + 128) = 0u;
                    *(_OWORD *)(v386 + 80) = 0u;
                    *(_OWORD *)(v386 + 96) = 0u;
                    *(_OWORD *)(v386 + 48) = 0u;
                    *(_OWORD *)(v386 + 64) = 0u;
                    *(_OWORD *)(v386 + 16) = 0u;
                    *(_OWORD *)(v386 + 32) = 0u;
                    *(_OWORD *)v386 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v386, v387);
                  }
                  v28 = v492;
                }
              }
            }
          }
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 464), (uint64_t)&v522);
          v522.var1 = 1;
          if (!v493)
          {
            v449 = v522.var0.var0.var0;
            if (v522.var0.var0.var0)
            {
              *((_DWORD *)v522.var0.var0.var0 + 6) += 2;
              v495 = (WebCore::Node *)v449;
              LODWORD(v496) = v522.var0.var1;
              BYTE4(v496) = *((_BYTE *)&v522.var0 + 12);
              LOBYTE(v497) = 0;
              if (!WebCore::inSameLine((WebCore *)&v522, (const WebCore::VisiblePosition *)&v495, v379))
                v522.var1 = 0;
              v451 = v495;
              v495 = 0;
              if (v451)
              {
                if (*((_DWORD *)v451 + 6) == 2)
                {
                  if ((*((_WORD *)v451 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v451, v450);
                }
                else
                {
                  *((_DWORD *)v451 + 6) -= 2;
                }
              }
              v28 = v492;
            }
          }
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v495, (const WebCore::VisiblePosition *)&v522, (*(unsigned __int8 *)(v1 + 226) >> 1) & 1);
          WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v495);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v495);
          v381 = v522.var0.var0.var0;
          v522.var0.var0.var0 = 0;
          if (v381)
          {
            if (*((_DWORD *)v381 + 6) == 2)
            {
              if ((*((_WORD *)v381 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v381, v380);
            }
            else
            {
              *((_DWORD *)v381 + 6) -= 2;
            }
          }
          WebCore::DeleteSelectionCommand::clearTransientState((WebCore::DeleteSelectionCommand *)v1);
        }
      }
    }
  }
LABEL_1247:
  v382 = v515;
  v515 = 0;
  if (v382)
  {
    if (*((_DWORD *)v382 + 6) == 2)
    {
      if ((*((_WORD *)v382 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v382, v15);
    }
    else
    {
      *((_DWORD *)v382 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28, v15);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  this = (uint64_t)v516;
  v516 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

BOOL WebCore::lineBreakExistsAtVisiblePosition(WebCore::Node **this, const VisiblePosition *a2)
{
  WebCore::Node *v2;
  const WebCore::Position *v3;
  void *v4;
  _BOOL8 v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v9;
  int v10;
  char v11;
  WebCore::Node *v12[2];

  v2 = *this;
  if (*this)
    *((_DWORD *)v2 + 6) += 2;
  v9 = v2;
  v10 = *((_DWORD *)this + 2);
  v11 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v9, (WebCore::Node *)1, (uint64_t)v12);
  v5 = WebCore::lineBreakExistsAtPosition((WebCore *)v12, v3);
  v6 = v12[0];
  v12[0] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v5;
}

unsigned int *WebCore::isLastPositionBeforeTable@<X0>(WebCore::Node **this@<X0>, WebCore::Node **a2@<X8>)
{
  WebCore::Node *v4;
  void *v5;
  unsigned int *result;
  WebCore::Node *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  WebCore::Node *v20;
  int v21;
  char v22;

  v4 = *this;
  if (*this)
    *((_DWORD *)v4 + 6) += 2;
  v17 = v4;
  v18 = *((_DWORD *)this + 2);
  v19 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v17, (WebCore::Node *)1, (uint64_t)&v20);
  result = (unsigned int *)v17;
  v17 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v7 = v20;
  if (!v20)
  {
    *a2 = 0;
    return result;
  }
  v8 = *((_DWORD *)v20 + 6);
  v9 = v8 + 2;
  *((_DWORD *)v20 + 6) = v8 + 2;
  if ((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v10 = *(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
    if (v10 == 63 || v10 == 35)
    {
      if ((v22 & 7) != 0)
      {
        switch(v22 & 7)
        {
          case 1:
          case 3:
            goto LABEL_33;
          case 2:
          case 4:
            v11 = v8 + 4;
            *((_DWORD *)v7 + 6) = v11;
            v12 = *((_WORD *)v7 + 14);
            if ((v12 & 1) != 0)
            {
              v15 = *((_QWORD *)v7 + 10);
              if (v15)
                v14 = *(_DWORD *)(v15 + 4);
              else
                v14 = 0;
            }
            else if ((v12 & 4) != 0 && (v13 = *((_QWORD *)v7 + 10)) != 0)
            {
              v14 = 0;
              do
              {
                ++v14;
                v13 = *(_QWORD *)(v13 + 56);
              }
              while (v13);
            }
            else
            {
              v14 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 208))(v7) ^ 1;
              v11 = *((_DWORD *)v7 + 6);
            }
            v9 = v11 - 2;
            if (v11 != 2)
            {
              *((_DWORD *)v7 + 6) = v9;
              if (v14)
                break;
              goto LABEL_33;
            }
            v16 = v14;
            if ((*((_WORD *)v7 + 15) & 0x400) != 0)
            {
              if (!v14)
                goto LABEL_33;
              v9 = 2;
            }
            else
            {
              WebCore::Node::removedLastRef(v7, v5);
              if (!v16)
                goto LABEL_33;
              v9 = *((_DWORD *)v7 + 6);
            }
            break;
          default:
            break;
        }
      }
      else if (!v21)
      {
LABEL_33:
        if ((*((_WORD *)v7 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195AA2E28);
        }
        *a2 = v7;
        goto LABEL_15;
      }
      v8 = v9 - 2;
    }
  }
  *a2 = 0;
  if (v8)
  {
    *((_DWORD *)v7 + 6) = v8;
  }
  else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v7, v5);
  }
LABEL_15:
  result = (unsigned int *)v20;
  v20 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::DeleteSelectionCommand::preservesTypingStyle(WebCore::DeleteSelectionCommand *this)
{
  uint64_t (*v1)();

  v1 = WTF::RefPtr<WebCore::EditingStyle,WTF::RawPtrTraits<WebCore::EditingStyle>,WTF::DefaultRefDerefTraits<WebCore::EditingStyle>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 66))
    v1 = 0;
  return v1 != 0;
}

void WebCore::DictationCommand::insertText(uint64_t *a1, const WTF::StringImpl **a2, __int128 **a3, const WTF::String *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  const WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  WTF *v38;
  _QWORD *v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  __int16 v57;
  char v58;

  v8 = *(_QWORD *)(*a1 + 528);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_43;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_43:
    v12 = 1;
    goto LABEL_6;
  }
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = 0;
LABEL_6:
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064);
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v39 = (_QWORD *)v14;
  v40 = *(_DWORD *)(v13 + 64);
  v41 = *(_BYTE *)(v13 + 68);
  v15 = *(_QWORD *)(v13 + 72);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v42 = v15;
  v43 = *(_DWORD *)(v13 + 80);
  v44 = *(_BYTE *)(v13 + 84);
  v16 = *(_QWORD *)(v13 + 88);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v45 = v16;
  v46 = *(_DWORD *)(v13 + 96);
  v47 = *(_BYTE *)(v13 + 100);
  v17 = *(_QWORD *)(v13 + 104);
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  v48 = v17;
  v49 = *(_DWORD *)(v13 + 112);
  v50 = *(_BYTE *)(v13 + 116);
  v18 = *(_QWORD *)(v13 + 120);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  v51 = v18;
  v52 = *(_DWORD *)(v13 + 128);
  v53 = *(_BYTE *)(v13 + 132);
  v19 = *(_QWORD *)(v13 + 136);
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  v54 = v19;
  v55 = *(_DWORD *)(v13 + 144);
  v56 = *(_BYTE *)(v13 + 148);
  v57 = *(_WORD *)(v13 + 152);
  v58 = *(_BYTE *)(v13 + 154);
  WebCore::dispatchBeforeTextInsertedEvent((uint64_t)a2, a4, 0, &v38);
  v20 = v38;
  v22 = WTF::equal(v38, *a2, v21);
  v23 = WTF::fastMalloc((WTF *)0x130);
  v24 = WebCore::EditCommand::EditCommand(v23, a1, 59);
  *(_OWORD *)(v24 + 248) = 0u;
  *(_OWORD *)(v24 + 264) = 0u;
  *(_QWORD *)v24 = off_1E33A9D68;
  if (v22)
  {
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)(v23 + 280) = v20;
    v25 = *((unsigned int *)a3 + 3);
    *(_QWORD *)(v23 + 288) = 0;
    *(_QWORD *)(v23 + 296) = 0;
    *(_DWORD *)(v23 + 300) = v25;
    if ((_DWORD)v25)
    {
      if (v25 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v26 = 24 * v25;
      v27 = WTF::fastMalloc((WTF *)(24 * v25));
      *(_DWORD *)(v23 + 296) = (v26 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)(v23 + 288) = v27;
      v28 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v28)
      {
        v29 = *a3;
        v30 = 24 * v28;
        do
        {
          v31 = *v29;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v29 + 2);
          *(_OWORD *)v27 = v31;
          v27 += 24;
          v29 = (__int128 *)((char *)v29 + 24);
          v30 -= 24;
        }
        while (v30);
      }
    }
  }
  else
  {
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)(v23 + 288) = 0;
    *(_QWORD *)(v23 + 296) = 0;
    *(_QWORD *)(v23 + 280) = v20;
  }
  WebCore::TextInsertionBaseCommand::applyTextInsertionCommand(v9, (WebCore::CompositeEditCommand *)v23, a4, (const WebCore::VisibleSelection *)&v39);
  if (*(_DWORD *)(v23 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (!v20)
      goto LABEL_34;
  }
  else
  {
    --*(_DWORD *)(v23 + 8);
    if (!v20)
      goto LABEL_34;
  }
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v32);
  else
    *(_DWORD *)v20 -= 2;
LABEL_34:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v39);
  if ((v12 & 1) == 0)
  {
    v33 = (unsigned int *)(v9 + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E31FE290;
      v36[1] = v33;
      v39 = v36;
      WTF::ensureOnMainThread();
      v37 = v39;
      v39 = 0;
      if (v37)
        (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    }
  }
}

uint64_t WebCore::DictationCommand::doApply(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::DictationCommand *v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  int16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t *v27;
  __int8 *v28;
  int16x8_t v29;
  uint64_t v30;
  WebCore::DictationCommand *v31;
  unsigned __int8 v32;
  unsigned int v33;
  unsigned int v34;
  WebCore::DictationCommand *v35;
  WebCore::Node *v36[2];
  char v37;
  WebCore::Node *v38;

  v2 = this;
  v3 = *(_QWORD *)(this + 248);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v2;
    this = *(_QWORD *)(v2 + 248);
    *(_QWORD *)(v2 + 248) = v3;
    if (this)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)this);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)this));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
      v3 = *(_QWORD *)(v2 + 248);
    }
  }
  do
    v6 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v6 + 1, (unsigned int *)v3));
  v7 = (uint64_t *)(v2 + 280);
  v8 = *(_QWORD *)(v2 + 280);
  if (!v8)
    goto LABEL_63;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(unsigned int *)(v8 + 4);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if (v11 <= v9)
        goto LABEL_72;
      v12 = v11 - v9;
      if (v12 >= 0x10)
        v13 = 16;
      else
        v13 = v11 - v9;
      if (v13)
      {
        v14 = v13;
        this = v10 + v9;
        while (*(_BYTE *)this != 10)
        {
          ++this;
          if (!--v14)
            goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        if (v12 < 0x11)
          goto LABEL_72;
        this = (uint64_t)memchr((void *)(v10 + v9 + v13), 10, v12 - v13);
        if (!this)
          goto LABEL_72;
      }
      v15 = this - v10;
      goto LABEL_22;
    }
    if (v11 <= v9)
      goto LABEL_72;
    v22 = (int16x8_t *)(v10 + 2 * v9);
    v23 = v10 + 2 * v11;
    v24 = v23 - (_QWORD)v22;
    if ((uint64_t)(v23 - (_QWORD)v22) <= -2)
    {
      __break(1u);
      return this;
    }
    if (v24 <= 0x3E)
    {
      while (v22->i16[0] != 10)
      {
        v22 = (int16x8_t *)((char *)v22 + 2);
        v24 -= 2;
        if (!v24)
          goto LABEL_72;
      }
      goto LABEL_56;
    }
    if ((unint64_t)&v22->u64[1] + 6 >= v23)
      break;
    while (1)
    {
      v25.i64[0] = 0xA000A000A000ALL;
      v25.i64[1] = 0xA000A000A000ALL;
      v26 = (int8x16_t)vceqq_s16(*v22, v25);
      v25.i16[0] = vmaxvq_u16((uint16x8_t)v26);
      if (v25.i32[0])
        break;
      v27 = v22 + 1;
      v28 = &v22[1].i8[14];
      ++v22;
      if ((unint64_t)v28 >= v23)
        goto LABEL_53;
    }
LABEL_55:
    v22 = (int16x8_t *)((char *)v22
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v26)));
LABEL_56:
    if (v22 == (int16x8_t *)v23)
      goto LABEL_72;
    v15 = ((uint64_t)v22->i64 - v10) >> 1;
LABEL_22:
    if (v15 == -1)
      goto LABEL_72;
    if (v15 != v9)
    {
      v16 = *(WebCore::DictationCommand **)(v3 + 8);
      ++*((_DWORD *)v16 + 2);
      WebCore::DictationCommand::insertTextRunWithoutNewlines(v16, v9, v15 - v9);
      if (*((_DWORD *)v16 + 2) == 1)
        (*(void (**)(WebCore::DictationCommand *))(*(_QWORD *)v16 + 8))(v16);
      else
        --*((_DWORD *)v16 + 2);
    }
    v17 = *(_QWORD *)(v3 + 8);
    ++*(_DWORD *)(v17 + 8);
    this = WebCore::canAppendNewLineFeedToSelection((WebCore *)(v17 + 128), (const WebCore::VisibleSelection *)a2);
    if ((_DWORD)this)
    {
      v18 = *(WebCore::Node **)(v17 + 16);
      *((_DWORD *)v18 + 6) += 2;
      v38 = v18;
      v19 = WTF::fastMalloc((WTF *)0x128);
      v20 = WebCore::EditCommand::EditCommand(v19, (uint64_t *)&v38, 11);
      *(_OWORD *)(v20 + 248) = 0u;
      *(_OWORD *)(v20 + 264) = 0u;
      *(_QWORD *)v20 = off_1E33AD020;
      *(_QWORD *)(v20 + 280) = 0;
      *(_WORD *)(v20 + 288) = 0;
      v36[0] = (WebCore::Node *)v20;
      WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v17, (uint64_t **)v36);
      v21 = v36[0];
      v36[0] = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 2) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v21 + 8))(v21);
        else
          --*((_DWORD *)v21 + 2);
      }
      this = (uint64_t)v38;
      if (v38)
      {
        if (*((_DWORD *)v38 + 6) == 2)
        {
          if ((*((_WORD *)v38 + 15) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef(v38, a2);
        }
        else
        {
          *((_DWORD *)v38 + 6) -= 2;
        }
      }
    }
    if (*(_DWORD *)(v17 + 8) == 1)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    else
      --*(_DWORD *)(v17 + 8);
    v9 = v15 + 1;
    v8 = *v7;
    if (!*v7)
    {
      if ((_DWORD)v15 == -1)
        goto LABEL_63;
      LODWORD(v11) = 0;
      goto LABEL_60;
    }
  }
  v27 = (int16x8_t *)(v10 + 2 * v9);
LABEL_53:
  if ((unint64_t)v27 < v23)
  {
    v22 = (int16x8_t *)(v23 - 16);
    v29.i64[0] = 0xA000A000A000ALL;
    v29.i64[1] = 0xA000A000A000ALL;
    v26 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v23 - 16), v29);
    v29.i16[0] = vmaxvq_u16((uint16x8_t)v26);
    if (v29.i32[0])
      goto LABEL_55;
  }
LABEL_72:
  if (v9)
  {
LABEL_60:
    v30 = v11 - v9;
    if ((_DWORD)v11 != v9)
    {
      v31 = *(WebCore::DictationCommand **)(v3 + 8);
      ++*((_DWORD *)v31 + 2);
      this = (uint64_t)WebCore::DictationCommand::insertTextRunWithoutNewlines(v31, v9, v30);
      if (*((_DWORD *)v31 + 2) == 1)
        this = (*(uint64_t (**)(WebCore::DictationCommand *))(*(_QWORD *)v31 + 8))(v31);
      else
        --*((_DWORD *)v31 + 2);
    }
    goto LABEL_63;
  }
  if ((_DWORD)v11)
  {
    v35 = *(WebCore::DictationCommand **)(v3 + 8);
    ++*((_DWORD *)v35 + 2);
    this = (uint64_t)WebCore::DictationCommand::insertTextRunWithoutNewlines(v35, 0, v11);
    if (*((_DWORD *)v35 + 2) == 1)
      this = (*(uint64_t (**)(WebCore::DictationCommand *))(*(_QWORD *)v35 + 8))(v35);
    else
      --*((_DWORD *)v35 + 2);
  }
LABEL_63:
  v32 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v32 & 1) != 0)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 3064) + 120), (uint64_t)v36);
    v37 = 1;
    WebCore::EditCommand::postTextStateChangeNotification((unsigned int *)v2, (void *)4, v2 + 280, (uint64_t *)v36);
    this = (uint64_t)v36[0];
    v36[0] = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  if (v3)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v3);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v3));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v3);
      return WTF::fastFree((WTF *)v3, a2);
    }
  }
  return this;
}

WebCore::Node *WebCore::DictationCommand::insertTextRunWithoutNewlines(WebCore::DictationCommand *this, unint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  WebCore::Node *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  WebCore::Node *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WebCore::Node *result;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Node *v30[2];
  uint64_t v31;

  v3 = a3;
  v28 = 0;
  v29 = 0;
  v6 = *((unsigned int *)this + 75);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = a3 + a2;
    v10 = 24 * v6;
    v11 = (uint64_t *)(*((_QWORD *)this + 36) + 16);
    do
    {
      v12 = *(v11 - 2);
      if (v12 >= a2)
      {
        v13 = (WebCore::Node *)*(v11 - 1);
        if ((unint64_t)v13 + v12 <= v9)
        {
          v30[0] = (WebCore::Node *)(v12 - a2);
          v30[1] = v13;
          v31 = *v11;
          if (v8 == (_DWORD)v29)
          {
            v14 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, v8 + 1, (unint64_t)v30);
            v8 = HIDWORD(v29);
            v7 = v28;
            v15 = v28 + 24 * HIDWORD(v29);
            v16 = *((_QWORD *)v14 + 2);
            *(_OWORD *)v15 = *(_OWORD *)v14;
            *(_QWORD *)(v15 + 16) = v16;
          }
          else
          {
            v17 = *(_OWORD *)v30;
            v18 = v7 + 24 * v8;
            *(_QWORD *)(v18 + 16) = v31;
            *(_OWORD *)v18 = v17;
          }
          HIDWORD(v29) = ++v8;
        }
      }
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v19 = (WebCore::Node *)*((_QWORD *)this + 2);
  *((_DWORD *)v19 + 6) += 2;
  v30[0] = v19;
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  if (v20)
  {
    if ((_DWORD)a2 || *((_DWORD *)v20 + 1) > v3)
    {
      WTF::StringImpl::substring(v20);
    }
    else
    {
      *(_DWORD *)v20 += 2;
      v27 = v20;
    }
  }
  else
  {
    v27 = 0;
  }
  v21 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)v21 = off_1E33A9EE8;
  *(_QWORD *)(v21 + 16) = v7;
  *(_DWORD *)(v21 + 24) = v29;
  *(_DWORD *)(v21 + 28) = v8;
  v22 = WTF::fastMalloc((WTF *)0x130);
  v23 = WebCore::EditCommand::EditCommand(v22, (uint64_t *)v30, 11);
  *(_OWORD *)(v23 + 248) = 0u;
  *(_OWORD *)(v23 + 264) = 0u;
  *(_QWORD *)v23 = off_1E33AD0F0;
  if (v27)
  {
    v25 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    *(_QWORD *)(v22 + 280) = v27;
    *(_BYTE *)(v22 + 288) = 0;
    *(_DWORD *)(v22 + 292) = 0;
    *(_QWORD *)(v22 + 296) = v21;
    if (v25)
      *(_DWORD *)v27 = v25;
    else
      WTF::StringImpl::destroy(v27, v24);
  }
  else
  {
    *(_QWORD *)(v22 + 280) = 0;
    *(_BYTE *)(v22 + 288) = 0;
    *(_DWORD *)(v22 + 292) = 0;
    *(_QWORD *)(v22 + 296) = v21;
  }
  if (v30[0])
  {
    if (*((_DWORD *)v30[0] + 6) == 2)
    {
      if ((*((_WORD *)v30[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30[0], v24);
    }
    else
    {
      *((_DWORD *)v30[0] + 6) -= 2;
    }
  }
  v30[0] = (WebCore::Node *)v22;
  WebCore::CompositeEditCommand::applyCommandToComposite((uint64_t)this, v30, (WebCore::DictationCommand *)((char *)this + 128));
  result = v30[0];
  if (v30[0])
  {
    if (*((_DWORD *)v30[0] + 2) == 1)
      return (WebCore::Node *)(*(uint64_t (**)(void))(*(_QWORD *)v30[0] + 8))();
    else
      --*((_DWORD *)v30[0] + 2);
  }
  return result;
}

void WebCore::undoRedoLabel(int a1@<W0>, _QWORD *a2@<X8>)
{
  const __CFString *v2;

  switch(a1)
  {
    case 0:
      v2 = CFSTR("Align Left (Undo action name)");
      goto LABEL_3;
    case 1:
      v2 = CFSTR("Align Right (Undo action name)");
      goto LABEL_3;
    case 2:
      v2 = CFSTR("Bold (Undo action name)");
      goto LABEL_3;
    case 3:
      v2 = CFSTR("Center (Undo action name)");
      goto LABEL_3;
    case 4:
      v2 = CFSTR("Change Attributes (Undo action name)");
      goto LABEL_3;
    case 5:
      v2 = CFSTR("Convert to Ordered List (Undo action name)");
      goto LABEL_3;
    case 6:
      v2 = CFSTR("Convert to Unordered List (Undo action name)");
      goto LABEL_3;
    case 7:
      v2 = CFSTR("Create Link (Undo action name)");
      goto LABEL_3;
    case 8:
      v2 = CFSTR("Cut (Undo action name)");
      goto LABEL_3;
    case 9:
      v2 = CFSTR("Delete (Undo action name)");
      goto LABEL_3;
    case 10:
      v2 = CFSTR("Drag (Undo action name)");
      goto LABEL_3;
    case 11:
      v2 = CFSTR("Dictation (Undo action name)");
      goto LABEL_3;
    case 12:
      v2 = CFSTR("Format Block (Undo action name)");
      goto LABEL_3;
    case 13:
      v2 = CFSTR("Indent (Undo action name)");
      goto LABEL_3;
    case 16:
    case 18:
      v2 = CFSTR("Insert List (Undo action name)");
      goto LABEL_3;
    case 19:
      v2 = CFSTR("Italics (Undo action name)");
      goto LABEL_3;
    case 20:
      v2 = CFSTR("Justify (Undo action name)");
      goto LABEL_3;
    case 21:
      v2 = CFSTR("Loosen Kerning (Undo action name)");
      goto LABEL_3;
    case 22:
      v2 = CFSTR("Lower Baseline (Undo action name)");
      goto LABEL_3;
    case 23:
      v2 = CFSTR("Outdent (Undo action name)");
      goto LABEL_3;
    case 24:
      v2 = CFSTR("Outline (Undo action name)");
      goto LABEL_3;
    case 25:
      v2 = CFSTR("Paste (Undo action name)");
      goto LABEL_3;
    case 26:
      v2 = CFSTR("Paste Font (Undo action name)");
      goto LABEL_3;
    case 27:
      v2 = CFSTR("Paste Ruler (Undo action name)");
      goto LABEL_3;
    case 28:
      v2 = CFSTR("Raise Baseline (Undo action name)");
      goto LABEL_3;
    case 29:
      v2 = CFSTR("Remove Background (Undo action name)");
      goto LABEL_3;
    case 30:
      v2 = CFSTR("Set Background Color (Undo action name)");
      goto LABEL_3;
    case 31:
    case 34:
      v2 = CFSTR("Set Writing Direction (Undo action name)");
      goto LABEL_3;
    case 32:
      v2 = CFSTR("Set Color (Undo action name)");
      goto LABEL_3;
    case 33:
      v2 = CFSTR("Set Font (Undo action name)");
      goto LABEL_3;
    case 35:
      v2 = CFSTR("Set Traditional Character Shape (Undo action name)");
      goto LABEL_3;
    case 36:
      v2 = CFSTR("StrikeThrough (Undo action name)");
      goto LABEL_3;
    case 37:
      v2 = CFSTR("Subscript (Undo action name)");
      goto LABEL_3;
    case 38:
      v2 = CFSTR("Superscript (Undo action name)");
      goto LABEL_3;
    case 39:
      v2 = CFSTR("Tighten Kerning (Undo action name)");
      goto LABEL_3;
    case 40:
      v2 = CFSTR("Turn Off Kerning (Undo action name)");
      goto LABEL_3;
    case 41:
      v2 = CFSTR("Turn Off Ligatures (Undo action name)");
      goto LABEL_3;
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      v2 = CFSTR("Typing (Undo action name)");
      goto LABEL_3;
    case 56:
      v2 = CFSTR("Underline (Undo action name)");
      goto LABEL_3;
    case 57:
      v2 = CFSTR("Unlink (Undo action name)");
      goto LABEL_3;
    case 58:
      v2 = CFSTR("Unscript (Undo action name)");
      goto LABEL_3;
    case 60:
      v2 = CFSTR("Use All Ligatures (Undo action name)");
      goto LABEL_3;
    case 61:
      v2 = CFSTR("Use Standard Kerning (Undo action name)");
      goto LABEL_3;
    case 62:
      v2 = CFSTR("Use Standard Ligatures (Undo action name)");
LABEL_3:
      WebCore::localizedString(v2, (uint64_t)a2);
      break;
    default:
      *a2 = 0;
      break;
  }
}

const char *WebCore::inputTypeNameForEditingAction(int a1)
{
  const char *result;

  result = "formatJustifyFull";
  switch(a1)
  {
    case 0:
      result = "formatJustifyLeft";
      break;
    case 1:
      result = "formatJustifyRight";
      break;
    case 2:
      result = "formatBold";
      break;
    case 3:
      result = "formatJustifyCenter";
      break;
    case 7:
      result = "insertLink";
      break;
    case 8:
      result = "deleteByCut";
      break;
    case 9:
    case 48:
      result = "deleteContent";
      break;
    case 10:
      result = "deleteByDrag";
      break;
    case 13:
      result = "formatIndent";
      break;
    case 14:
    case 55:
      result = "insertText";
      break;
    case 15:
      result = "insertFromDrop";
      break;
    case 16:
      result = "insertOrderedList";
      break;
    case 17:
      result = "insertReplacementText";
      break;
    case 18:
      result = "insertUnorderedList";
      break;
    case 19:
      result = "formatItalic";
      break;
    case 20:
      return result;
    case 23:
      result = "formatOutdent";
      break;
    case 25:
      result = "insertFromPaste";
      break;
    case 31:
      result = "formatSetBlockTextDirection";
      break;
    case 32:
      result = "formatFontColor";
      break;
    case 34:
      result = "formatSetInlineTextDirection";
      break;
    case 36:
      result = "formatStrikeThrough";
      break;
    case 37:
      result = "formatSubscript";
      break;
    case 38:
      result = "formatSuperscript";
      break;
    case 42:
      result = "deleteContentBackward";
      break;
    case 43:
      result = "deleteByComposition";
      break;
    case 44:
      result = "deleteContentForward";
      break;
    case 45:
      result = "deleteHardLineBackward";
      break;
    case 46:
      result = "deleteHardLineForward";
      break;
    case 47:
      result = "deleteCompositionText";
      break;
    case 49:
      result = "deleteWordBackward";
      break;
    case 50:
      result = "deleteWordForward";
      break;
    case 51:
      result = "insertFromComposition";
      break;
    case 52:
      result = "insertLineBreak";
      break;
    case 53:
      result = "insertParagraph";
      break;
    case 54:
      result = "insertCompositionText";
      break;
    case 56:
      result = "formatUnderline";
      break;
    default:
      result = (const char *)&str_124_4;
      break;
  }
  return result;
}

uint64_t WebCore::EditCommand::EditCommand(uint64_t result, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33A9E38;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  v4 = *(_QWORD *)(v3 + 3064);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(result + 24) = v5;
  v6 = *(_BYTE *)(v4 + 68);
  *(_DWORD *)(result + 32) = *(_DWORD *)(v4 + 64);
  *(_BYTE *)(result + 36) = v6;
  v7 = *(_QWORD *)(v4 + 72);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(result + 40) = v7;
  v8 = *(_BYTE *)(v4 + 84);
  *(_DWORD *)(result + 48) = *(_DWORD *)(v4 + 80);
  *(_BYTE *)(result + 52) = v8;
  v9 = *(_QWORD *)(v4 + 88);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  *(_QWORD *)(result + 56) = v9;
  v10 = *(_BYTE *)(v4 + 100);
  *(_DWORD *)(result + 64) = *(_DWORD *)(v4 + 96);
  *(_BYTE *)(result + 68) = v10;
  v11 = *(_QWORD *)(v4 + 104);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *(_QWORD *)(result + 72) = v11;
  v12 = *(_BYTE *)(v4 + 116);
  *(_DWORD *)(result + 80) = *(_DWORD *)(v4 + 112);
  *(_BYTE *)(result + 84) = v12;
  v13 = *(_QWORD *)(v4 + 120);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(result + 88) = v13;
  v14 = *(_BYTE *)(v4 + 132);
  *(_DWORD *)(result + 96) = *(_DWORD *)(v4 + 128);
  *(_BYTE *)(result + 100) = v14;
  v15 = *(_QWORD *)(v4 + 136);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)(result + 104) = v15;
  v16 = *(_BYTE *)(v4 + 148);
  *(_DWORD *)(result + 112) = *(_DWORD *)(v4 + 144);
  *(_BYTE *)(result + 116) = v16;
  v17 = *(_BYTE *)(v4 + 154);
  *(_WORD *)(result + 120) = *(_WORD *)(v4 + 152);
  *(_BYTE *)(result + 122) = v17;
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(result + 128) = v5;
  *(_DWORD *)(result + 136) = *(_DWORD *)(result + 32);
  *(_BYTE *)(result + 140) = *(_BYTE *)(result + 36);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(result + 144) = v7;
  *(_DWORD *)(result + 152) = *(_DWORD *)(result + 48);
  *(_BYTE *)(result + 156) = *(_BYTE *)(result + 52);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  *(_QWORD *)(result + 160) = v9;
  *(_DWORD *)(result + 168) = *(_DWORD *)(result + 64);
  *(_BYTE *)(result + 172) = *(_BYTE *)(result + 68);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *(_QWORD *)(result + 176) = v11;
  *(_DWORD *)(result + 184) = *(_DWORD *)(result + 80);
  *(_BYTE *)(result + 188) = *(_BYTE *)(result + 84);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(result + 192) = v13;
  *(_DWORD *)(result + 200) = *(_DWORD *)(result + 96);
  *(_BYTE *)(result + 204) = *(_BYTE *)(result + 100);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)(result + 208) = v15;
  *(_DWORD *)(result + 216) = *(_DWORD *)(result + 112);
  *(_BYTE *)(result + 220) = *(_BYTE *)(result + 116);
  *(_WORD *)(result + 224) = *(_WORD *)(result + 120);
  *(_BYTE *)(result + 226) = *(_BYTE *)(result + 122);
  *(_QWORD *)(result + 232) = 0;
  *(_BYTE *)(result + 240) = a3;
  return result;
}

uint64_t WebCore::EditCommand::editingAction(WebCore::EditCommand *this)
{
  return *((unsigned __int8 *)this + 240);
}

uint64_t *WebCore::EditCommand::setParent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    result = *(uint64_t **)(v3 + 248);
    if (result)
      goto LABEL_23;
    result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    result[1] = v3;
    v5 = *(unsigned int **)(v3 + 248);
    *(_QWORD *)(v3 + 248) = result;
    if (!v5)
      goto LABEL_23;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    result = *(uint64_t **)(v3 + 248);
    if (result)
    {
LABEL_23:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v9 = (unsigned int *)a1[29];
  a1[29] = (uint64_t)result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
    result = (uint64_t *)a1[29];
  }
  if (result)
  {
    v12 = result[1];
    if (v12)
    {
      WebCore::VisibleSelection::operator=(a1 + 3, (uint64_t *)(v12 + 128));
      v13 = a1[29];
      if (v13)
        v13 = *(_QWORD *)(v13 + 8);
      return WebCore::VisibleSelection::operator=(a1 + 16, (uint64_t *)(v13 + 128));
    }
  }
  return result;
}

unsigned int *WebCore::EditCommand::postTextStateChangeNotification(unsigned int *result, void *a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 v4;
  int v5;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  WebCore::AXObjectCache *v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  char v28;
  WebCore::Node *v29;

  v4 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v4 & 1) != 0 && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    result = (unsigned int *)*((_QWORD *)result + 2);
    v5 = result[6];
    result[6] = v5 + 2;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v24 = (int)a2;
      v25 = result;
      if (*((_BYTE *)result + 3362) || *((_BYTE *)result + 3405))
      {
        i = result;
        v17 = *((_QWORD *)result + 66);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          i = result;
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 120);
            i = result;
            if (v19)
            {
              v20 = *(_QWORD *)(v19 + 8);
              for (i = result; v20; v20 = *(_QWORD *)(v23 + 8))
              {
                i = *(unsigned int **)(*(_QWORD *)(v20 + 40) + 8);
                v21 = *((_QWORD *)i + 66);
                if (!v21)
                  break;
                v22 = *(_QWORD *)(v21 + 8);
                if (!v22)
                  break;
                v23 = *(_QWORD *)(v22 + 120);
                if (!v23)
                  break;
              }
            }
          }
        }
      }
      else
      {
        i = result;
        v7 = *((_QWORD *)result + 66);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          i = result;
          if (v8)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
            v10 = v9 && *(_BYTE *)(v9 + 144) == 0;
            i = result;
            if (v10)
            {
              v11 = *(unsigned int **)(v9 + 296);
              i = result;
              if (v11)
                i = v11;
            }
          }
        }
      }
      v12 = (WebCore::AXObjectCache *)*((_QWORD *)i + 186);
      if (v12)
      {
        ++*((_DWORD *)v12 + 2);
        v13 = *a4;
        if (*a4)
        {
          *(_DWORD *)(v13 + 24) += 2;
          v26 = v13;
          v27 = *((_DWORD *)a4 + 2);
          v28 = *((_BYTE *)a4 + 12);
          WebCore::highestEditableRoot((uint64_t)&v26, 1, (uint64_t *)&v29);
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        else
        {
          v26 = 0;
          v27 = *((_DWORD *)a4 + 2);
          v28 = *((_BYTE *)a4 + 12);
          WebCore::highestEditableRoot((uint64_t)&v26, 1, (uint64_t *)&v29);
        }
        v15 = v29;
        WebCore::AXObjectCache::postTextStateChangeNotification(v12, v29, v24);
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, a2);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        v16 = *((_DWORD *)v12 + 2);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x195AA4334);
        }
        *((_DWORD *)v12 + 2) = v16 - 1;
        result = v25;
        v5 = v25[6] - 2;
      }
    }
    if (v5)
    {
      result[6] = v5;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::SimpleEditCommand::doReapply(WebCore::SimpleEditCommand *this)
{
  return (*(uint64_t (**)(WebCore::SimpleEditCommand *))(*(_QWORD *)this + 48))(this);
}

BOOL WebCore::hasEditableStyle(WebCore *a1, int a2)
{
  uint64_t v4;
  const WebCore::Node *v5;

  v4 = 1;
  if (WebCore::Node::computeEditability((uint64_t)a1, 0, 1))
    return v4;
  if (a2 != 1)
    return 0;
  return WebCore::isEditableToAccessibility(a1, v5);
}

uint64_t WebCore::lowestEditableAncestor(WebCore *this, WebCore::Node *a2)
{
  WebCore *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t i;

  if (!this)
    return 0;
  v2 = this;
  while (!WebCore::Node::computeEditability((uint64_t)v2, 0, 1))
  {
    if ((*((_WORD *)v2 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v2 = (WebCore *)*((_QWORD *)v2 + 4);
      if (v2)
        continue;
    }
    return 0;
  }
  v3 = 0;
  v5 = (uint64_t)v2;
  do
  {
    if (!WebCore::Node::hasEditableStyle(v5, 0))
      break;
    if ((*(_WORD *)(v5 + 28) & 8) != 0)
      v3 = v5;
    i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if (i == v5)
      break;
    v5 = *(_QWORD *)(v5 + 32);
  }
  while (v5);
  return v3;
}

BOOL WebCore::isAtUnsplittableElement(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v18;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v4 = *((_BYTE *)this + 12) & 7;
  if (v4 > 4)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)this;
    if (((1 << v4) & 0x19) == 0)
      v5 = *(_QWORD *)(v2 + 32);
  }
  if (v4 <= 4 && (((1 << v4) & 0x19) != 0 || (v2 = *(_QWORD *)(v2 + 32)) != 0))
  {
    v6 = 0;
    *(_DWORD *)(v2 + 24) += 2;
    v7 = v2;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v7, 0))
        break;
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        v6 = v7;
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v7)
        break;
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v8);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v5 == v6)
    return 1;
  WebCore::highestEditableRoot((uint64_t)this, 0, &v18);
  v11 = v18;
  v12 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
LABEL_58:
    v13 = 0;
LABEL_59:
    if (!v11)
    {
LABEL_65:
      v15 = v13 == v5;
      if (v13)
        goto LABEL_66;
      return v15;
    }
LABEL_63:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_65;
  }
  *(_DWORD *)(v12 + 24) += 2;
  if (v11)
  {
    while (1)
    {
      v13 = v12;
      if (WebCore::Node::computeEditability(v12, 0, 1))
      {
        if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
            goto LABEL_59;
        }
        else if ((*(_WORD *)(v12 + 28) & 0x10) != 0)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24);
          if (v14 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v14 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            goto LABEL_59;
        }
        if (v12 == v11)
          break;
      }
      v12 = *(_QWORD *)(v12 + 32);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      if (!v12)
        goto LABEL_58;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
      v13 = 0;
    }
    else
    {
      v13 = 0;
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_63;
  }
  while (1)
  {
    v13 = v12;
    if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      break;
    if (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
      goto LABEL_57;
LABEL_46:
    v12 = *(_QWORD *)(v12 + 32);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    if (!v12)
      return v5 == 0;
  }
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0)
    goto LABEL_46;
  v16 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24);
  if (v16 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) && v16 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    goto LABEL_46;
LABEL_57:
  v15 = v12 == v5;
LABEL_66:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v10);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  return v15;
}

BOOL WebCore::isRichlyEditablePosition(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  _BOOL8 v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *((_BYTE *)this + 12) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v5 = WebCore::Node::computeEditability(v2, 0, 1) == 2;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v5;
}

void WebCore::nextCandidate(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  const WebCore::Node *v4;
  const WebCore::Node *v5;
  const WebCore::Node *v6;
  _BYTE v7[24];

  WebCore::PositionIterator::PositionIterator((WebCore::PositionIterator *)v7, this);
  while (!WebCore::PositionIterator::atEnd((WebCore::PositionIterator *)v7, v4))
  {
    WebCore::PositionIterator::increment((uint64_t)v7, v5);
    if (WebCore::PositionIterator::isCandidate((WebCore::PositionIterator *)v7, v6))
    {
      WebCore::PositionIterator::operator WebCore::Position((uint64_t)v7, a2);
      WebCore::PositionIterator::~PositionIterator((WebCore::PositionIterator *)v7);
      return;
    }
  }
  WebCore::PositionIterator::~PositionIterator((WebCore::PositionIterator *)v7);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) &= 0xF0u;
}

void WebCore::PositionIterator::~PositionIterator(WebCore::PositionIterator *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

WebCore::Node *WebCore::nextVisuallyDistinctCandidate@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  WebCore::Node *v6;
  char v7;
  WebCore::Node *v8;
  WebCore::Node *result;
  const WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  WebCore::Node *v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  WebCore::Node *v27;
  unsigned int v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  WebCore::Node *v34;
  uint64_t v35;
  WebCore::Node *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  int v41;
  unsigned __int8 v42;
  WebCore::Node *v43;
  int v44;
  unsigned __int8 v45;
  WebCore::Node *v46;
  int v47;
  char v48;

  v6 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
    *((_DWORD *)v6 + 6) += 2;
  v46 = v6;
  v47 = *(_DWORD *)(a1 + 8);
  v48 = *(_BYTE *)(a1 + 12);
  WebCore::Position::downstream((uint64_t)&v46, (WebCore::Node *)1, (uint64_t)&v43);
  if (WebCore::Position::atEndOfTree((WebCore::Position *)&v46))
  {
LABEL_4:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    v7 = *(_BYTE *)(a3 + 12) & 0xF0;
    goto LABEL_5;
  }
  while (1)
  {
    WebCore::Position::next((uint64_t)&v46, (WebCore::Node *)1, (uint64_t)&v40);
    v11 = v40;
    v40 = 0;
    v12 = v46;
    v46 = v11;
    if (!v12)
      goto LABEL_15;
    if (*((_DWORD *)v12 + 6) != 2)
    {
      *((_DWORD *)v12 + 6) -= 2;
LABEL_15:
      v47 = v41;
      v48 = v42;
      goto LABEL_16;
    }
    if ((*((_WORD *)v12 + 15) & 0x400) != 0)
      goto LABEL_15;
    WebCore::Node::removedLastRef(v12);
    v36 = v40;
    v47 = v41;
    v48 = v42;
    v40 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
LABEL_16:
    if (WebCore::Position::isCandidate((WebCore::Position *)&v46, v10))
    {
      WebCore::Position::downstream((uint64_t)&v46, (WebCore::Node *)1, (uint64_t)&v40);
      v13 = v40;
      if (v40 == v43)
      {
        if ((v42 & 8) == 0 && ((v14 = v42 & 7, v14 == 4) || v14 == 2))
        {
          if (v40)
          {
            v15 = *((_DWORD *)v40 + 6);
            *((_DWORD *)v40 + 6) = v15 + 2;
            v16 = *((_WORD *)v13 + 14);
            if ((v16 & 1) != 0)
            {
              v37 = *((_QWORD *)v13 + 10);
              v18 = v37 ? *(_DWORD *)(v37 + 4) : 0;
            }
            else if ((v16 & 4) != 0 && (v17 = *((_QWORD *)v13 + 10)) != 0)
            {
              v18 = 0;
              do
              {
                ++v18;
                v17 = *(_QWORD *)(v17 + 56);
              }
              while (v17);
            }
            else
            {
              v18 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v13 + 208))(v13) ^ 1;
              v15 = *((_DWORD *)v13 + 6) - 2;
            }
            if (v15)
            {
              *((_DWORD *)v13 + 6) = v15;
            }
            else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v13);
            }
          }
          else
          {
            v18 = 0;
          }
        }
        else
        {
          v18 = v41;
        }
        if ((v45 & 8) == 0 && ((v19 = v45 & 7, v19 != 4) ? (v20 = v19 == 2) : (v20 = 1), v20))
        {
          v21 = v43;
          if (v43)
          {
            v22 = *((_DWORD *)v43 + 6);
            *((_DWORD *)v43 + 6) = v22 + 2;
            v23 = *((_WORD *)v21 + 14);
            if ((v23 & 1) != 0)
            {
              v38 = *((_QWORD *)v21 + 10);
              v25 = v38 ? *(_DWORD *)(v38 + 4) : 0;
            }
            else if ((v23 & 4) != 0 && (v24 = *((_QWORD *)v21 + 10)) != 0)
            {
              v25 = 0;
              do
              {
                ++v25;
                v24 = *(_QWORD *)(v24 + 56);
              }
              while (v24);
            }
            else
            {
              v25 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v21 + 208))(v21) ^ 1;
              v22 = *((_DWORD *)v21 + 6) - 2;
            }
            if (v22)
            {
              *((_DWORD *)v21 + 6) = v22;
            }
            else if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v21);
            }
          }
          else
          {
            v25 = 0;
          }
        }
        else
        {
          v25 = v44;
        }
        v26 = v18 == v25 && ((v45 ^ v42) & 7) == 0;
        v13 = v40;
      }
      else
      {
        v26 = 0;
      }
      v40 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      if (!v26)
        break;
    }
    v27 = v46;
    if (v46)
    {
      v28 = v48 & 7;
      if (v28 <= 4 && (((1 << v28) & 0x19) != 0 || (v27 = (WebCore::Node *)*((_QWORD *)v46 + 4)) != 0))
      {
        v29 = *((_DWORD *)v27 + 6);
        v30 = v29 + 2;
        *((_DWORD *)v27 + 6) = v29 + 2;
        if ((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) == 0)
        {
          if ((a2 & 1) == 0)
          {
            *((_DWORD *)v27 + 6) = v29 + 4;
            if ((*((_WORD *)v27 + 14) & 8) != 0 && (*((_QWORD *)v27 + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v35 = *(_QWORD *)((*((_QWORD *)v27 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
              if (v35)
              {
                if ((*(_QWORD *)(v35 + 16) & 0x1FLL) == 0x12)
                {
                  if (v30)
                  {
                    *((_DWORD *)v27 + 6) = v30;
                  }
                  else if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v27);
                  }
                  goto LABEL_70;
                }
              }
            }
            if (v30)
            {
              *((_DWORD *)v27 + 6) = v30;
            }
            else if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v27);
            }
          }
          if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v27 + 208))(v27) & 1) != 0)
          {
            v31 = *((_WORD *)v27 + 14);
            *((_DWORD *)v27 + 6) += 2;
            if ((v31 & 1) != 0)
            {
              v33 = *((_QWORD *)v27 + 10);
              if (v33)
                v32 = *(_DWORD *)(v33 + 4);
              else
                v32 = 0;
              v3 &= 0xFFFFFFF0;
            }
            else
            {
              v32 = 0;
              v3 = v3 & 0xFFFFFFF0 | 4;
            }
          }
          else
          {
            v32 = 0;
            *((_DWORD *)v27 + 6) += 2;
            v3 = v3 & 0xFFFFFFF0 | 2;
          }
          v34 = v46;
          v46 = v27;
          if (v34)
          {
            if (*((_DWORD *)v34 + 6) == 2)
            {
              if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v34);
            }
            else
            {
              *((_DWORD *)v34 + 6) -= 2;
            }
          }
          v47 = v32;
          v48 = v3;
        }
LABEL_70:
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
    }
    if (WebCore::Position::atEndOfTree((WebCore::Position *)&v46))
      goto LABEL_4;
  }
  v39 = v46;
  v46 = 0;
  *(_QWORD *)a3 = v39;
  *(_DWORD *)(a3 + 8) = v47;
  v7 = v48;
LABEL_5:
  *(_BYTE *)(a3 + 12) = v7;
  v8 = v43;
  v43 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

void WebCore::previousCandidate(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  const WebCore::Node *v4;
  _BYTE v5[24];

  WebCore::PositionIterator::PositionIterator((WebCore::PositionIterator *)v5, this);
  while (!WebCore::PositionIterator::atStart((WebCore::PositionIterator *)v5))
  {
    WebCore::PositionIterator::decrement((WebCore::PositionIterator *)v5);
    if (WebCore::PositionIterator::isCandidate((WebCore::PositionIterator *)v5, v4))
    {
      WebCore::PositionIterator::operator WebCore::Position((uint64_t)v5, a2);
      goto LABEL_5;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) &= 0xF0u;
LABEL_5:
  WebCore::PositionIterator::~PositionIterator((WebCore::PositionIterator *)v5);
}

WebCore::Node *WebCore::previousVisuallyDistinctCandidate@<X0>(WebCore::Node **this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v4;
  unsigned __int8 v5;
  WebCore::Node *v6;
  WebCore::Node *result;
  const WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  WebCore::Node *v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  WebCore::Node *v26;
  unsigned int v27;
  int v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  int v38;
  unsigned __int8 v39;
  WebCore::Node *v40;
  int v41;
  unsigned __int8 v42;
  WebCore::Node *v43;
  int v44;
  unsigned __int8 v45;

  v4 = *this;
  if (*this)
    *((_DWORD *)v4 + 6) += 2;
  v43 = v4;
  v44 = *((_DWORD *)this + 2);
  v45 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v43, (WebCore::Node *)1, (uint64_t)&v40);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v43))
  {
LABEL_4:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 12) & 0xF0;
    goto LABEL_5;
  }
  while (1)
  {
    WebCore::Position::previous((uint64_t)&v43, 1, (uint64_t)&v37);
    v9 = v37;
    v37 = 0;
    v10 = v43;
    v43 = v9;
    if (!v10)
      goto LABEL_15;
    if (*((_DWORD *)v10 + 6) != 2)
    {
      *((_DWORD *)v10 + 6) -= 2;
LABEL_15:
      v44 = v38;
      v45 = v39;
      goto LABEL_16;
    }
    if ((*((_WORD *)v10 + 15) & 0x400) != 0)
      goto LABEL_15;
    WebCore::Node::removedLastRef(v10);
    v32 = v37;
    v44 = v38;
    v45 = v39;
    v37 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
LABEL_16:
    if (WebCore::Position::isCandidate((WebCore::Position *)&v43, v8))
    {
      WebCore::Position::downstream((uint64_t)&v43, (WebCore::Node *)1, (uint64_t)&v37);
      v12 = v37;
      if (v37 == v40)
      {
        if ((v39 & 8) == 0 && ((v13 = v39 & 7, v13 == 4) || v13 == 2))
        {
          if (v37)
          {
            v14 = *((_DWORD *)v37 + 6);
            *((_DWORD *)v37 + 6) = v14 + 2;
            v15 = *((_WORD *)v12 + 14);
            if ((v15 & 1) != 0)
            {
              v34 = *((_QWORD *)v12 + 10);
              v17 = v34 ? *(_DWORD *)(v34 + 4) : 0;
            }
            else if ((v15 & 4) != 0 && (v16 = *((_QWORD *)v12 + 10)) != 0)
            {
              v17 = 0;
              do
              {
                ++v17;
                v16 = *(_QWORD *)(v16 + 56);
              }
              while (v16);
            }
            else
            {
              v17 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v12 + 208))(v12) ^ 1;
              v14 = *((_DWORD *)v12 + 6) - 2;
            }
            if (v14)
            {
              *((_DWORD *)v12 + 6) = v14;
            }
            else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v12);
            }
          }
          else
          {
            v17 = 0;
          }
        }
        else
        {
          v17 = v38;
        }
        if ((v42 & 8) == 0 && ((v18 = v42 & 7, v18 != 4) ? (v19 = v18 == 2) : (v19 = 1), v19))
        {
          v20 = v40;
          if (v40)
          {
            v21 = *((_DWORD *)v40 + 6);
            *((_DWORD *)v40 + 6) = v21 + 2;
            v22 = *((_WORD *)v20 + 14);
            if ((v22 & 1) != 0)
            {
              v35 = *((_QWORD *)v20 + 10);
              v24 = v35 ? *(_DWORD *)(v35 + 4) : 0;
            }
            else if ((v22 & 4) != 0 && (v23 = *((_QWORD *)v20 + 10)) != 0)
            {
              v24 = 0;
              do
              {
                ++v24;
                v23 = *(_QWORD *)(v23 + 56);
              }
              while (v23);
            }
            else
            {
              v24 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v20 + 208))(v20) ^ 1;
              v21 = *((_DWORD *)v20 + 6) - 2;
            }
            if (v21)
            {
              *((_DWORD *)v20 + 6) = v21;
            }
            else if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v20);
            }
          }
          else
          {
            v24 = 0;
          }
        }
        else
        {
          v24 = v41;
        }
        v25 = v17 == v24 && ((v42 ^ v39) & 7) == 0;
        v12 = v37;
      }
      else
      {
        v25 = 0;
      }
      v37 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if (!v25)
        break;
    }
    v26 = v43;
    if (v43)
    {
      v27 = v45 & 7;
      if (v27 <= 4 && (((1 << v27) & 0x19) != 0 || (v26 = (WebCore::Node *)*((_QWORD *)v43 + 4)) != 0))
      {
        v28 = *((_DWORD *)v26 + 6) + 2;
        *((_DWORD *)v26 + 6) = v28;
        if ((*((_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFLL) != 0)
          goto LABEL_60;
        WebCore::firstPositionInOrBeforeNode((uint64_t)v26, v11, (uint64_t)&v37);
        v29 = v37;
        v37 = 0;
        v30 = v43;
        v43 = v29;
        if (v30)
        {
          if (*((_DWORD *)v30 + 6) == 2)
          {
            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v30);
              v33 = v37;
              v44 = v38;
              v45 = v39;
              v37 = 0;
              if (v33)
              {
                if (*((_DWORD *)v33 + 6) == 2)
                {
                  if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v33);
                }
                else
                {
                  *((_DWORD *)v33 + 6) -= 2;
                }
              }
              goto LABEL_59;
            }
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
        }
        v44 = v38;
        v45 = v39;
LABEL_59:
        v28 = *((_DWORD *)v26 + 6);
LABEL_60:
        v31 = v28 - 2;
        if (v31)
        {
          *((_DWORD *)v26 + 6) = v31;
        }
        else if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v26);
        }
      }
    }
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v43))
      goto LABEL_4;
  }
  v36 = v43;
  v43 = 0;
  *(_QWORD *)a2 = v36;
  *(_DWORD *)(a2 + 8) = v44;
  v5 = v45;
LABEL_5:
  *(_BYTE *)(a2 + 12) = v5;
  v6 = v40;
  v40 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

BOOL WebCore::isInline(WebCore *this, const WebCore::Node *a2)
{
  return (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) == 0;
}

uint64_t WebCore::directionOfEnclosingBlock(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  WebCore::Node *v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this
    && (v3 = *((_BYTE *)this + 12) & 7, v3 <= 4)
    && (((1 << v3) & 0x19) != 0 || (v2 = *(_QWORD *)(v2 + 32)) != 0))
  {
    *(_DWORD *)(v2 + 24) += 2;
    v6 = v2;
    WebCore::enclosingBlock(&v6, (WebCore::Node *)1, &v7);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    v6 = 0;
    WebCore::enclosingBlock(&v6, (WebCore::Node *)1, &v7);
  }
  if (!v7)
    return 0;
  if ((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AA55C0);
    }
    v4 = (*(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x7B) >> 2) & 1;
  }
  else
  {
    v4 = 0;
  }
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return v4;
}

uint64_t WebCore::stringWithRebalancedWhitespace@<X0>(WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, int a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  unint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  char v15;
  char v16;
  unsigned int v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t result;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  char v36;
  unsigned __int8 v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  v5 = *this;
  if (!*this)
    goto LABEL_79;
  v6 = *((unsigned int *)v5 + 1);
  if (!(_DWORD)v6)
    goto LABEL_78;
  v7 = (char)a2;
  v32 = a4;
  v9 = 0;
  LOBYTE(a4) = 0;
  v10 = a3 ^ 1;
  do
  {
    v11 = *this;
    if (!*this
      || v9 >= *((unsigned int *)v11 + 1)
      || ((v12 = *((_QWORD *)v11 + 1), (*((_BYTE *)v11 + 16) & 4) == 0)
        ? (v13 = *(unsigned __int16 *)(v12 + 2 * v9))
        : (v13 = *(unsigned __int8 *)(v12 + v9)),
          v13 <= 0x20 ? (v14 = ((1 << v13) & 0x100000600) == 0) : (v14 = 1),
          v14 && v13 != 160))
    {
      LOBYTE(a4) = 0;
      goto LABEL_52;
    }
    if (v9)
      v15 = 0;
    else
      v15 = v7;
    v16 = a4 | v15;
    if ((_DWORD)v6 - 1 == v9)
      v17 = v10;
    else
      v17 = 1;
    if (v17)
      v18 = 32;
    else
      v18 = -96;
    if ((v16 & 1) != 0)
      a4 = 0;
    else
      a4 = (WTF::StringImpl **)v17;
    if ((v16 & 1) != 0)
      v19 = -96;
    else
      v19 = v18;
    if (v13 != v19)
    {
      WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v33);
      if ((v35 & 0x80000000) != 0)
      {
        __break(0xC471u);
        goto LABEL_92;
      }
      if (*this)
        v20 = *((unsigned int *)*this + 1) | ((unint64_t)((*((_DWORD *)*this + 4) >> 2) & 1) << 32);
      else
        v20 = 0x100000000;
      if (v20 <= v35)
        goto LABEL_45;
      LODWORD(v21) = v9 - v35;
      if (v20 - v35 <= v9 - v35)
      {
        if (!v35)
        {
          v21 = v20;
          goto LABEL_44;
        }
        LODWORD(v21) = v20 - v35;
      }
      v21 = v21;
      v22 = v20 - (unint64_t)v35;
      if ((v20 & 0x100000000) != 0)
      {
        if (v22 < v21)
          goto LABEL_92;
        v21 = v21 | 0x100000000;
      }
      else if (v22 < v21)
      {
        goto LABEL_92;
      }
LABEL_44:
      if ((v21 & 0x100000000) == 0)
      {
        WTF::StringBuilder::append();
        goto LABEL_46;
      }
LABEL_45:
      WTF::StringBuilder::append();
LABEL_46:
      v37 = v19;
      if (!v34 || (v23 = v35, v35 >= *((_DWORD *)v34 + 1)) || v33)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v24 = *((_DWORD *)v34 + 4);
        v25 = *((_QWORD *)v34 + 1);
        ++v35;
        if ((v24 & 4) != 0)
          *(_BYTE *)(v25 + v23) = v19;
        else
          *(_WORD *)(v25 + 2 * v23) = v19;
      }
    }
LABEL_52:
    ++v9;
  }
  while (v6 != v9);
  if (!v35)
  {
    v5 = *this;
    a4 = v32;
    if (*this)
      goto LABEL_78;
    goto LABEL_79;
  }
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v33);
  a4 = v32;
  if ((v35 & 0x80000000) != 0)
  {
    result = 268;
    __break(0xC471u);
    return result;
  }
  if (*this)
    v26 = *((unsigned int *)*this + 1) | ((unint64_t)((*((_DWORD *)*this + 4) >> 2) & 1) << 32);
  else
    v26 = 0x100000000;
  if (v26 <= v35)
    goto LABEL_75;
  v27 = v6 - v35;
  if (v26 - v35 > v6 - v35)
    goto LABEL_65;
  if (!v35)
  {
    v28 = v26;
    goto LABEL_74;
  }
  v27 = v26 - v35;
LABEL_65:
  v28 = v27;
  v29 = v26 - (unint64_t)v35;
  if ((v26 & 0x100000000) != 0)
  {
    if (v29 >= v28)
    {
      v28 |= 0x100000000uLL;
      goto LABEL_74;
    }
LABEL_92:
    __break(1u);
LABEL_75:
    WTF::StringBuilder::append();
    goto LABEL_76;
  }
  if (v29 < v28)
    goto LABEL_92;
LABEL_74:
  if ((v28 & 0x100000000) != 0)
    goto LABEL_75;
  WTF::StringBuilder::append();
LABEL_76:
  v5 = v33;
  if (!v33)
  {
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v33);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v33);
    v5 = v33;
    if (!v33)
      goto LABEL_79;
  }
LABEL_78:
  *(_DWORD *)v5 += 2;
LABEL_79:
  *a4 = v5;
  v30 = v34;
  v34 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = (uint64_t)v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::isTableStructureNode(WebCore *this, const WebCore::Node *a2)
{
  return (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0
      && *(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) - 37 < 4;
}

uint64_t WebCore::isFirstPositionAfterTable@<X0>(WebCore::Node **this@<X0>, WebCore::Node **a2@<X8>)
{
  WebCore::Node *v4;
  const WebCore::Node *v5;
  uint64_t result;
  WebCore::Node *v7;
  int v8;
  int v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  WebCore::Node *v13[2];

  v4 = *this;
  if (*this)
    *((_DWORD *)v4 + 6) += 2;
  v10 = v4;
  v11 = *((_DWORD *)this + 2);
  v12 = *((_BYTE *)this + 12);
  WebCore::Position::upstream((uint64_t)&v10, (WebCore::Node *)1, (uint64_t)v13);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v7 = v13[0];
  if (!v13[0])
  {
    *a2 = 0;
    return result;
  }
  v8 = *((_DWORD *)v13[0] + 6);
  *((_DWORD *)v13[0] + 6) = v8 + 2;
  if ((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_14;
  v9 = *(unsigned __int8 *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
  if (v9 != 63 && v9 != 35)
    goto LABEL_14;
  if (!WebCore::Position::atLastEditingPositionForNode((WebCore::Position *)v13, v5))
  {
    v8 = *((_DWORD *)v7 + 6) - 2;
LABEL_14:
    *a2 = 0;
    if (v8)
    {
      *((_DWORD *)v7 + 6) = v8;
    }
    else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v7);
    }
    goto LABEL_16;
  }
  if ((*((_WORD *)v7 + 14) & 8) == 0)
  {
    result = 316;
    __break(0xC471u);
    return result;
  }
  *a2 = v7;
LABEL_16:
  result = (uint64_t)v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::visiblePositionBeforeNode@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  unsigned int *result;
  WebCore::Node *v6[2];

  if ((*((_WORD *)this + 14) & 4) != 0 && *((_QWORD *)this + 10))
  {
    WebCore::firstPositionInOrBeforeNode((uint64_t)this, a2, (uint64_t)v6);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v6, a3);
    *(_BYTE *)(a3 + 16) = 1;
    result = (unsigned int *)v6[0];
    v6[0] = 0;
    if (!result)
      return result;
  }
  else
  {
    WebCore::positionInParentBeforeNode(this, a2, (uint64_t)v6);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v6, a3);
    *(_BYTE *)(a3 + 16) = 1;
    result = (unsigned int *)v6[0];
    if (!v6[0])
      return result;
  }
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

WebCore::Node *WebCore::visiblePositionAfterNode@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v5;
  uint64_t v6;
  char v7;
  void *v8;
  WebCore::Node *result;
  WebCore::Node *v10;
  int v11;
  char v12;

  if ((*((_WORD *)this + 14) & 4) != 0 && *((_QWORD *)this + 10))
  {
    if (((*(uint64_t (**)(WebCore *, WebCore::Node *))(*(_QWORD *)this + 208))(this, a2) & 1) != 0)
    {
      v5 = *((_WORD *)this + 14);
      *((_DWORD *)this + 6) += 2;
      if ((v5 & 1) != 0)
      {
        v6 = *((_QWORD *)this + 10);
        if (v6)
          LODWORD(v6) = *(_DWORD *)(v6 + 4);
        v7 = 0;
        v10 = this;
      }
      else
      {
        LODWORD(v6) = 0;
        v10 = this;
        v7 = 4;
      }
    }
    else
    {
      LODWORD(v6) = 0;
      *((_DWORD *)this + 6) += 2;
      v10 = this;
      v7 = 2;
    }
    v11 = v6;
    v12 = v7;
    result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v10, a3);
    *(_BYTE *)(a3 + 16) = 1;
    if (*((_DWORD *)this + 6) != 2)
    {
      *((_DWORD *)this + 6) -= 2;
      return result;
    }
    if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      result = this;
      return (WebCore::Node *)WebCore::Node::removedLastRef(result, v8);
    }
  }
  else
  {
    WebCore::positionInParentAfterNode((uint64_t)this, a2, (uint64_t)&v10);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v10, a3);
    *(_BYTE *)(a3 + 16) = 1;
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) != 2)
      {
        *((_DWORD *)result + 6) -= 2;
        return result;
      }
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result, v8);
    }
  }
  return result;
}

uint64_t WebCore::closestEditablePositionInElementForAbsolutePoint@<X0>(uint64_t this@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  WebCore::RenderObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  void *v17;
  WebCore::Node *v18;
  WTF *v19;
  WTF *v20;
  float v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  WebCore::Node *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  WebCore::Node *v31;
  char v32;
  int v33;
  unint64_t v34;
  WebCore::Node *v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  uint64_t v45;

  if ((*(_BYTE *)(this + 22) & 8) == 0
    || (v5 = this, v6 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8), (v7 = *(_QWORD *)(v6 + 528)) == 0)
    || !*(_QWORD *)(v7 + 8))
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  *(_DWORD *)(this + 24) += 2;
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::updateLayout(v6, 2u, 0);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v10 = (WebCore::RenderObject *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL);
  if (v10)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AA61ECLL);
    }
    ++*(_DWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 872))(v5);
  if ((_DWORD)this)
  {
    *(_DWORD *)(v5 + 24) += 2;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1440))(v5);
    if ((this & 1) == 0)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 1;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v10)
        goto LABEL_55;
      goto LABEL_53;
    }
    (*(void (**)(WebCore::Node **__return_ptr, uint64_t))(*(_QWORD *)v5 + 1408))(&v35, v5);
    this = (uint64_t)v35;
    if (v35)
    {
      v12 = *((_QWORD *)v35 + 8) & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        if ((*(_BYTE *)((*((_QWORD *)v35 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195AA625CLL);
        }
        if (*(_BYTE *)((*((_QWORD *)v35 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
        {
          __break(0xC471u);
          JUMPOUT(0x195AA627CLL);
        }
        ++*(_DWORD *)((*((_QWORD *)v35 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      }
      if (v10)
      {
        v13 = *((_DWORD *)v10 + 4);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x195AA623CLL);
        }
        *((_DWORD *)v10 + 4) = v13 - 1;
      }
      v35 = 0;
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v11);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
      v10 = (WebCore::RenderObject *)v12;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (v10)
  {
    v14 = WebCore::RenderObject::absoluteBoundingBoxRect(v10, 1, 0);
    v16.i32[0] = v15 + v14;
    v16.i32[1] = ((v15 & 0xFFFFFFFF00000000) + v14) >> 32;
    v35 = (WebCore::Node *)vcvt_f32_s32(vmax_s32((int32x2_t)v14, vmin_s32(*a2, v16)));
    v39 = 0;
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v43 = 0;
    v44 = 1;
    v45 = 0x100000000;
    (*(void (**)(WebCore::RenderObject *, uint64_t, WebCore::Node **))(*(_QWORD *)v10 + 584))(v10, 2, &v35);
    WebCore::TransformState::flatten((WebCore::TransformState *)&v35, 0);
    v18 = v35;
    v19 = v41;
    v41 = 0;
    if (v19)
      WTF::fastFree(v19, v17);
    v20 = v40;
    v40 = 0;
    if (v20)
      WTF::fastFree(v20, v17);
    v21 = floorf(*(float *)&v18 * 64.0);
    if (v21 >= 2147500000.0)
    {
      v22 = 0x7FFFFFFFLL;
    }
    else if (v21 <= -2147500000.0)
    {
      v22 = 0x80000000;
    }
    else
    {
      v22 = (int)v21;
    }
    v23 = floorf(*((float *)&v18 + 1) * 64.0);
    if (v23 >= 2147500000.0)
    {
      v24 = 0x7FFFFFFF00000000;
    }
    else if (v23 <= -2147500000.0)
    {
      v24 = 0x8000000000000000;
    }
    else
    {
      v24 = (unint64_t)(int)v23 << 32;
    }
    v34 = v24 | v22;
    (*(void (**)(WebCore::Node **__return_ptr, WebCore::RenderObject *, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v10 + 352))(&v35, v10, &v34, 1, 0);
    v25 = v35;
    if (!v35)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_46:
      this = (uint64_t)v35;
      v35 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v11);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
LABEL_53:
      v33 = *((_DWORD *)v10 + 4);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195AA620CLL);
      }
      *((_DWORD *)v10 + 4) = v33 - 1;
      goto LABEL_55;
    }
    v26 = *((_DWORD *)v35 + 6) + 2;
    *((_DWORD *)v35 + 6) = v26;
    v27 = BYTE4(v36) & 7;
    if (v27 > 4)
      goto LABEL_69;
    v28 = (uint64_t)v25;
    if (((1 << v27) & 0x19) == 0)
    {
      v28 = *((_QWORD *)v25 + 4);
      if (!v28)
        goto LABEL_69;
      v26 = *(_DWORD *)(v28 + 24);
    }
    *(_DWORD *)(v28 + 24) = v26 + 2;
    v29 = WebCore::Node::computeEditability(v28, 0, 0);
    v30 = *(_DWORD *)(v28 + 24) - 2;
    if (v29)
    {
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
      }
      else
      {
        *(_DWORD *)(v28 + 24) = v30;
      }
      v31 = v35;
      if (v35)
        *((_DWORD *)v35 + 6) += 2;
      *(_QWORD *)a3 = v31;
      *(_DWORD *)(a3 + 8) = v36;
      *(_BYTE *)(a3 + 12) = BYTE4(v36);
      v32 = BYTE8(v36);
      goto LABEL_44;
    }
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
    }
    else
    {
      *(_DWORD *)(v28 + 24) = v30;
    }
LABEL_69:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v32 = 1;
LABEL_44:
    *(_BYTE *)(a3 + 16) = v32;
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v11);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
    goto LABEL_46;
  }
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_55:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return this;
}

BOOL WebCore::isListItem(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
      if (v3 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
        || v3 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
        || v3 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
      {
        return 1;
      }
    }
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    return *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19;
  return 0;
}

uint64_t WebCore::enclosingElementWithTag(WebCore *this, const WebCore::Position *a2, const WebCore::QualifiedName *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  WebCore::highestEditableRoot((uint64_t)this, 0, &v15);
  v6 = *(_QWORD *)this;
  v7 = v15;
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    if (v7)
    {
      while (1)
      {
        v8 = v6;
        if (WebCore::Node::computeEditability(v6, 0, 1) && (*(_WORD *)(v6 + 28) & 8) != 0)
        {
          v9 = *(_QWORD *)(v6 + 96);
          v10 = *(_QWORD *)a2;
          if (v9 == *(_QWORD *)a2
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(v10 + 24) && *(_QWORD *)(v9 + 32) == *(_QWORD *)(v10 + 32))
          {
            goto LABEL_31;
          }
          if (v6 == v7)
            break;
        }
        v6 = *(_QWORD *)(v6 + 32);
        if (v6)
          *(_DWORD *)(v6 + 24) += 2;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (!v6)
          goto LABEL_34;
      }
      v13 = 0;
      v8 = v7;
    }
    else
    {
      while (1)
      {
        v8 = v6;
        if ((*(_WORD *)(v6 + 28) & 8) != 0)
        {
          v11 = *(_QWORD *)(v6 + 96);
          v12 = *(_QWORD *)a2;
          if (v11 == *(_QWORD *)a2
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(v12 + 24) && *(_QWORD *)(v11 + 32) == *(_QWORD *)(v12 + 32))
          {
            break;
          }
        }
        v6 = *(_QWORD *)(v6 + 32);
        if (v6)
          *(_DWORD *)(v6 + 24) += 2;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (!v6)
          goto LABEL_34;
      }
LABEL_31:
      v13 = v8;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
LABEL_34:
    v13 = 0;
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return v13;
}

unsigned int *WebCore::highestEnclosingNodeOfType@<X0>(unsigned int *result@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned int *v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  *a5 = 0;
  if (a3 == 1)
    result = (unsigned int *)WebCore::highestEditableRoot((uint64_t)result, 0, &v17);
  else
    v17 = 0;
  v9 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
  {
    v10 = v7[3] & 7;
    if (v10 <= 4 && (((1 << v10) & 0x19) != 0 || (v9 = *(_QWORD *)(v9 + 32)) != 0))
    {
      *(_DWORD *)(v9 + 24) += 2;
      v11 = v17;
      if (v17)
      {
        v12 = 0;
        while (1)
        {
          if (v9 == a4)
            goto LABEL_46;
          v13 = v9;
          result = (unsigned int *)WebCore::Node::computeEditability(v9, 0, 1);
          if ((_DWORD)result)
            break;
LABEL_18:
          v9 = *(_QWORD *)(v9 + 32);
          if (v9)
            *(_DWORD *)(v9 + 24) += 2;
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
          if (!v9)
            goto LABEL_48;
        }
        if (((unsigned int (*)(uint64_t))a2)(v9))
        {
          *(_DWORD *)(v9 + 24) += 2;
          *a5 = v9;
          result = (unsigned int *)v9;
          if (!v12)
            goto LABEL_17;
          if (v12[6] != 2)
          {
            v12[6] -= 2;
LABEL_15:
            result = (unsigned int *)v9;
            goto LABEL_17;
          }
          result = (unsigned int *)v9;
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
            goto LABEL_15;
          }
        }
        else
        {
          result = v12;
        }
LABEL_17:
        v12 = result;
        if (v9 == v11)
        {
          a4 = v11;
          goto LABEL_46;
        }
        goto LABEL_18;
      }
      v14 = 0;
      while (1)
      {
        if (v9 == a4)
        {
LABEL_46:
          if (*(_DWORD *)(a4 + 24) == 2)
          {
            if ((*(_WORD *)(a4 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)a4, a2);
          }
          else
          {
            *(_DWORD *)(a4 + 24) -= 2;
          }
          goto LABEL_48;
        }
        v15 = v14;
        v16 = v9;
        result = (unsigned int *)((uint64_t (*)(uint64_t))a2)(v9);
        if ((_DWORD)result)
        {
          *(_DWORD *)(v9 + 24) += 2;
          *a5 = v9;
          v14 = v9;
          if (v15)
          {
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              v14 = v9;
              if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
                goto LABEL_35;
              result = WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
            v14 = v9;
          }
        }
LABEL_35:
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
        if (!v9)
          return result;
      }
    }
  }
  v11 = v17;
LABEL_48:
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::highestNodeToRemoveInPruning@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v13;

  if (!this)
  {
    v5 = 0;
    v8 = 0;
LABEL_81:
    *a3 = 0;
    if (!v5)
      goto LABEL_84;
    goto LABEL_82;
  }
  v4 = this;
  v5 = 0;
  v6 = (uint64_t)this;
  do
  {
    if (!WebCore::Node::hasEditableStyle(v6, 0))
      break;
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
      v5 = v6;
    i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if (i == v6)
      break;
    v6 = *(_QWORD *)(v6 + 32);
  }
  while (v6);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v8 = 0;
  v4[6] += 2;
  while (1)
  {
    v9 = v8;
    v8 = v4;
    this = (unsigned int *)(*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL);
    if (this)
      break;
LABEL_61:
    v8[6] += 2;
    if (v9)
    {
      if (v9[6] == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
      }
      else
      {
        v9[6] -= 2;
      }
    }
    v4 = (unsigned int *)*((_QWORD *)v8 + 4);
    if (v4)
      v4[6] += 2;
    if (v8[6] == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      v8[6] -= 2;
    }
    if (!v4)
      goto LABEL_81;
  }
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 128))(this);
  if (!(_DWORD)this)
    goto LABEL_76;
  if ((v4[7] & 4) == 0 || (this = (unsigned int *)*((_QWORD *)v4 + 10)) == 0)
  {
LABEL_60:
    if ((unsigned int *)v5 == v8)
    {
      v8 = (unsigned int *)v5;
      goto LABEL_76;
    }
    goto LABEL_61;
  }
  this[6] += 2;
  while (this == v9)
  {
    if (v9 != v8)
    {
      v10 = (unsigned int *)*((_QWORD *)v9 + 7);
      if (v10)
      {
LABEL_39:
        v10[6] += 2;
        goto LABEL_40;
      }
      v11 = v9;
      while (1)
      {
        v11 = (unsigned int *)*((_QWORD *)v11 + 4);
        if (!v11 || v11 == v8)
          break;
        v10 = (unsigned int *)*((_QWORD *)v11 + 7);
        if (v10)
          goto LABEL_39;
      }
    }
    v10 = 0;
LABEL_40:
    if (v9[6] == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        this = v9;
LABEL_59:
        WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
    }
    else
    {
      v9[6] -= 2;
    }
LABEL_52:
    this = v10;
    if (!v10)
      goto LABEL_60;
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if ((this[7] & 4) != 0)
    {
      v10 = (unsigned int *)*((_QWORD *)this + 10);
      if (v10)
        goto LABEL_49;
    }
    if (this == v8)
      goto LABEL_30;
    v10 = (unsigned int *)*((_QWORD *)this + 7);
    if (v10)
    {
LABEL_49:
      v10[6] += 2;
    }
    else
    {
      v13 = this;
      while (1)
      {
        v13 = (unsigned int *)*((_QWORD *)v13 + 4);
        if (!v13 || v13 == v8)
          break;
        v10 = (unsigned int *)*((_QWORD *)v13 + 7);
        if (v10)
          goto LABEL_49;
      }
LABEL_30:
      v10 = 0;
    }
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) != 0)
        goto LABEL_52;
      goto LABEL_59;
    }
    this[6] -= 2;
    goto LABEL_52;
  }
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
LABEL_76:
  *a3 = v9;
  if (v8[6] == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
  }
  else
  {
    v8[6] -= 2;
  }
  v8 = 0;
  if (v5)
  {
LABEL_82:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
LABEL_84:
  if (v8)
  {
    if (v8[6] == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      v8[6] -= 2;
    }
  }
  return this;
}

uint64_t WebCore::enclosingTableCell@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = WebCore::highestEditableRoot((uint64_t)this, 0, &v12);
  v7 = v12;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_DWORD *)(v8 + 24) += 2;
    if (!v7)
    {
      do
      {
        v9 = v8;
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
            goto LABEL_41;
        }
        else if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
          if (v11 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v11 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            goto LABEL_41;
        }
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          *(_DWORD *)(v8 + 24) += 2;
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      while (v8);
      v9 = 0;
      goto LABEL_42;
    }
    while (1)
    {
      v9 = v8;
      result = WebCore::Node::computeEditability(v8, 0, 1);
      if ((_DWORD)result)
      {
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
            goto LABEL_34;
        }
        else if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
          if (v10 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v10 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            goto LABEL_34;
        }
        if (v8 == v7)
          break;
      }
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v8)
        goto LABEL_33;
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
      v9 = 0;
    }
    else
    {
      v9 = 0;
      *(_DWORD *)(v7 + 24) -= 2;
    }
    goto LABEL_38;
  }
LABEL_33:
  v9 = 0;
LABEL_34:
  if (v7)
  {
LABEL_38:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (!v9)
  {
LABEL_42:
    *a2 = v9;
    return result;
  }
LABEL_41:
  if ((*(_WORD *)(v9 + 28) & 8) != 0)
    goto LABEL_42;
  result = 261;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::enclosingList@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v4;
  void *v5;
  WebCore::Node *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::Node *v13[2];
  WebCore::Node *v14;

  if (this)
  {
    v4 = this;
    WebCore::firstPositionInOrBeforeNode((uint64_t)this, a2, (uint64_t)v13);
    WebCore::highestEditableRoot((uint64_t)v13, 0, (uint64_t *)&v14);
    v6 = v13[0];
    v13[0] = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v5);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    v7 = *((_QWORD *)v4 + 4);
    if (v7)
    {
      *(_DWORD *)(v7 + 24) += 2;
      v8 = v14;
      while (1)
      {
        v9 = (WebCore::Node *)v7;
        if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
          if (v10 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v10 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
          {
            v11 = *(_DWORD *)(v7 + 24);
            *(_DWORD *)(v7 + 24) = v11 + 2;
            v12 = v7;
            goto LABEL_22;
          }
        }
        if ((WebCore::Node *)v7 == v8)
          break;
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v5);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
        if (!v7)
          goto LABEL_24;
      }
      v12 = 0;
      v11 = *((_DWORD *)v8 + 6) - 2;
      v9 = v8;
LABEL_22:
      *a3 = v12;
      if (v11)
      {
        *((_DWORD *)v9 + 6) = v11;
      }
      else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v9, v5);
      }
    }
    else
    {
LABEL_24:
      *a3 = 0;
    }
    this = (unsigned int *)v14;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v14, v5);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unsigned int *WebCore::enclosingListChild@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  void *v5;
  WebCore::Node *v6;
  int v7;
  unsigned int *v8;
  WebCore::Node *v9;
  unsigned int *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  WebCore::Node *v15[2];
  WebCore::Node *v16;

  if (!this)
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  WebCore::firstPositionInOrBeforeNode((uint64_t)this, a2, (uint64_t)v15);
  WebCore::highestEditableRoot((uint64_t)v15, 0, (uint64_t *)&v16);
  v6 = v15[0];
  v15[0] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  v7 = v4[6];
  v4[6] = v7 + 2;
  v8 = (unsigned int *)*((_QWORD *)v4 + 4);
  if (!v8)
  {
LABEL_35:
    if (v7)
    {
      v4[6] = v7;
    }
    else if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    *a3 = 0;
    goto LABEL_38;
  }
  v9 = v16;
  while (1)
  {
    v10 = v4;
    v4 = v8;
    v11 = *((_WORD *)v10 + 14);
    if ((v11 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v10 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
    {
LABEL_34:
      *a3 = v10;
      goto LABEL_38;
    }
    if ((v4[7] & 0x10) != 0)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
      if (v12 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v12 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
      {
        if (v10 != (unsigned int *)v9)
          goto LABEL_34;
      }
      else if (v12 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24) && v10 != (unsigned int *)v9)
      {
        goto LABEL_34;
      }
    }
    if (v10 == (unsigned int *)v9)
      goto LABEL_31;
    if ((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      break;
    if (*(_BYTE *)((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
      goto LABEL_30;
LABEL_21:
    v4[6] += 2;
    if (v10[6] == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
    }
    else
    {
      v10[6] -= 2;
    }
    v8 = (unsigned int *)*((_QWORD *)v4 + 4);
    if (!v8)
    {
      v7 = v4[6] - 2;
      goto LABEL_35;
    }
  }
  if ((v11 & 0x10) == 0)
    goto LABEL_21;
  v14 = *(_QWORD *)(*((_QWORD *)v10 + 12) + 24);
  if (v14 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) && v14 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    goto LABEL_21;
LABEL_30:
  v9 = (WebCore::Node *)v10;
LABEL_31:
  *a3 = 0;
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9, v5);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
LABEL_38:
  this = (unsigned int *)v16;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v16, v5);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::enclosingEmptyListItem@<X0>(unsigned int *this@<X0>, VisiblePosition *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  uint64_t *v5;
  int v6;
  int v7;
  _BOOL4 v9;
  BOOL v11;
  void *v12;
  WebCore::Node *v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  __int16 v18;
  void *v19;
  WebCore::Node *v20;
  unsigned int *v21;
  int v22;
  char v23;
  WebCore::Node *v24[2];
  char v25;
  unsigned int *v26;
  WebCore::Node *v27[2];
  char v28;

  v4 = *(unsigned int **)this;
  if (!*(_QWORD *)this)
  {
LABEL_29:
    *a3 = 0;
    v17 = v4;
    goto LABEL_30;
  }
  v5 = (uint64_t *)this;
  v4[6] += 4;
  this = WebCore::enclosingListChild(v4, (WebCore::Node *)a2, &v26);
  v6 = v4[6] - 2;
  if (v4[6] == 2)
  {
    v18 = *((_WORD *)v4 + 15);
    if ((v18 & 0x400) != 0)
      goto LABEL_39;
    this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    v6 = v4[6];
  }
  else
  {
    v4[6] = v6;
  }
  v7 = v6 - 2;
  if (v7)
  {
    v4[6] = v7;
    goto LABEL_6;
  }
  v18 = *((_WORD *)v4 + 15);
LABEL_39:
  if ((v18 & 0x400) == 0)
    this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
LABEL_6:
  v4 = v26;
  if (!v26)
    goto LABEL_29;
  if (!(*v5
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0))
    goto LABEL_29;
  WebCore::startOfParagraph((uint64_t)v5, 1, v27);
  v9 = WebCore::operator==(v5, (uint64_t *)v27);
  this = (unsigned int *)v27[0];
  v27[0] = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
  }
  if (!v9)
    goto LABEL_29;
  if (!(*v5
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0))
    goto LABEL_29;
  WebCore::endOfParagraph((WebCore::Node *)v5, 1, v27);
  v11 = WebCore::operator==(v5, (uint64_t *)v27);
  this = (unsigned int *)v27[0];
  v27[0] = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
  }
  if (!v11)
    goto LABEL_29;
  WebCore::firstPositionInOrBeforeNode((uint64_t)v4, (WebCore::Node *)a2, (uint64_t)v24);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v24, (uint64_t)v27);
  v28 = 1;
  v13 = v24[0];
  v24[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v12);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 208))(v4) & 1) != 0)
  {
    v14 = *((_WORD *)v4 + 14);
    v4[6] += 2;
    if ((v14 & 1) != 0)
    {
      v15 = *((_QWORD *)v4 + 10);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 4);
      v16 = 0;
      v21 = v4;
    }
    else
    {
      LODWORD(v15) = 0;
      v21 = v4;
      v16 = 4;
    }
  }
  else
  {
    LODWORD(v15) = 0;
    v4[6] += 2;
    v21 = v4;
    v16 = 2;
  }
  v22 = v15;
  v23 = v16;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v21, (uint64_t)v24);
  v25 = 1;
  if (v4[6] == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v19);
  }
  else
  {
    v4[6] -= 2;
  }
  if (WebCore::operator==((uint64_t *)v27, v5) && WebCore::operator==((uint64_t *)v24, v5))
  {
    v17 = 0;
    v26 = 0;
  }
  else
  {
    v17 = v4;
    v4 = 0;
  }
  *a3 = v4;
  v20 = v24[0];
  v24[0] = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, a2);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  this = (unsigned int *)v27[0];
  v27[0] = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
  }
LABEL_30:
  v26 = 0;
  if (v17)
  {
    if (v17[6] == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    }
    else
    {
      v17[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::outermostEnclosingList@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *result;
  WebCore::Node *v7;
  unsigned int *v8;
  unsigned int *v9;
  WebCore::Node *v10;
  WebCore *v11;

  result = WebCore::enclosingList((unsigned int *)this, a2, &v11);
  v8 = (unsigned int *)v11;
  if (v11)
  {
    while (1)
    {
      result = WebCore::enclosingList(v8, v7, &v10);
      if (!v10)
      {
        v9 = v8;
        goto LABEL_12;
      }
      v9 = v8;
      if (v10 == a2)
        break;
      v8 = (unsigned int *)v10;
      if (v9[6] == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
      }
      else
      {
        v9[6] -= 2;
      }
    }
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(a2, v7);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_12:
  *a3 = v9;
  return result;
}

BOOL WebCore::canMergeLists(WebCore *this, WebCore::Element *a2, WebCore::Element *a3)
{
  WebCore *v3;
  _BOOL8 v4;
  WebCore::Element *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t j;
  WebCore::Node *v14;
  void *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21[2];
  WebCore::Node *v22[2];
  WebCore::Node *v23[2];
  WebCore::Node *v24[2];
  char v25;
  WebCore::Node *v26[2];
  char v27;

  if (this)
  {
    if ((*((_WORD *)this + 14) & 0x10) != 0)
      v3 = this;
    else
      v3 = 0;
    if (!a2)
      return 0;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return 0;
  }
  v4 = 0;
  if ((*((_WORD *)a2 + 14) & 0x10) != 0)
    v5 = a2;
  else
    v5 = 0;
  if (v3 && v5)
  {
    if (*(_QWORD *)(*((_QWORD *)v3 + 12) + 24) != *(_QWORD *)(*((_QWORD *)v5 + 12) + 24)
      || !WebCore::Node::computeEditability((uint64_t)v3, 0, 1)
      || !WebCore::Node::computeEditability((uint64_t)v5, 0, 1))
    {
      return 0;
    }
    v7 = 0;
    v8 = (uint64_t)v3;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v8, 0))
        break;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        v7 = v8;
      i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v8)
        break;
      v8 = *(_QWORD *)(v8 + 32);
    }
    while (v8);
    v10 = 0;
    v11 = (uint64_t)v5;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v11, 0))
        break;
      if ((*(_WORD *)(v11 + 28) & 8) != 0)
        v10 = v11;
      j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 1272);
      if (j)
      {
        if ((*(_WORD *)(j + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
          {
            if ((*(_WORD *)(j + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          j = 0;
        }
      }
      if (j == v11)
        break;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v7 != v10)
      return 0;
    WebCore::positionInParentAfterNode((uint64_t)v3, v12, (uint64_t)v22);
    WebCore::positionInParentBeforeNode(v5, v14, (uint64_t)v21);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v22, (uint64_t)v26);
    v27 = 1;
    WebCore::Position::upstream((uint64_t)v21, (WebCore::Node *)1, (uint64_t)v23);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v23, (uint64_t)v24);
    v25 = 1;
    v4 = WebCore::operator==((uint64_t *)v26, (uint64_t *)v24);
    v16 = v24[0];
    v24[0] = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v15);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v17 = v23[0];
    v23[0] = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v15);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v18 = v26[0];
    v26[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v15);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    v19 = v21[0];
    v21[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v15);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v20 = v22[0];
    v22[0] = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v15);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
  }
  return v4;
}

uint64_t WebCore::nextLeafNode(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v3;
  WebCore *v4;

  do
  {
    if (!this
      || (*((_WORD *)this + 14) & 4) == 0
      || !*((_QWORD *)this + 10)
      || !(*(unsigned int (**)(WebCore *, const WebCore::Node *))(*(_QWORD *)this + 208))(this, a2)
      || (*((_WORD *)this + 14) & 4) == 0
      || (v3 = *((_QWORD *)this + 10)) == 0)
    {
      v3 = *((_QWORD *)this + 7);
      if (!v3)
      {
        *((_DWORD *)this + 6) += 2;
        while (1)
        {
          v4 = this;
          v3 = *((_QWORD *)this + 7);
          if (v3)
            break;
          this = (WebCore *)*((_QWORD *)this + 4);
          if (this)
            *((_DWORD *)this + 6) += 2;
          if (*((_DWORD *)v4 + 6) == 2)
          {
            if ((*((_WORD *)v4 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v4);
          }
          else
          {
            *((_DWORD *)v4 + 6) -= 2;
          }
          if (!this)
            return 0;
        }
        if (*((_DWORD *)this + 6) == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(this);
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
      }
    }
    if ((*(_WORD *)(v3 + 28) & 4) == 0)
      break;
    if (!*(_QWORD *)(v3 + 80))
      break;
    this = (WebCore *)v3;
  }
  while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3) & 1) != 0);
  return v3;
}

uint64_t WebCore::isRenderedTable(WebCore *this, const WebCore::Node *a2)
{
  _BOOL8 v2;
  int v3;
  int v4;
  uint64_t result;

  if (!this || (*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = 0;
LABEL_12:
    if (v3)
    {
      *((_DWORD *)this + 6) = v3;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this);
    }
    return v2;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    v4 = *(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
    v2 = v4 == 35 || v4 == 63;
    goto LABEL_12;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::isEmptyTableCell(uint64_t this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (this)
  {
    while (1)
    {
      v2 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
      if (v2)
        break;
      this = *(_QWORD *)(this + 32);
      if (!this)
        return this;
    }
    v3 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v3 + 1;
    v4 = *(unsigned __int8 *)(v2 + 46);
    if (v4 != 17)
    {
      v5 = v2;
LABEL_7:
      if (v4 == 37)
      {
        v6 = *(unsigned int *)(v5 + 64);
        if (v6 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)
          && (v7 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8)) != 0)
        {
          v8 = *(_DWORD *)(v7 + 16);
          *(_DWORD *)(v7 + 16) = v8 + 1;
          if (*(_BYTE *)(v7 + 46) != 17 || (*(_BYTE *)(v7 + 52) & 7) == 2 && (*(_BYTE *)(v7 + 53) & 1) != 0)
          {
            this = 0;
          }
          else
          {
            v12 = *(unsigned int *)(v7 + 47);
            if (v12 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
              this = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8) == 0;
            else
              this = 1;
          }
          if (v8 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x195AA7B24);
          }
          *(_DWORD *)(v7 + 16) = v8;
        }
        else
        {
          this = 1;
        }
      }
      else
      {
        this = 0;
      }
LABEL_16:
      v9 = *(_DWORD *)(v5 + 16);
      if (v9)
      {
        *(_DWORD *)(v5 + 16) = v9 - 1;
        return this;
      }
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x195AA7B04);
    }
    if ((*(_BYTE *)(v2 + 52) & 7) == 2 && (*(_BYTE *)(v2 + 53) & 1) != 0)
    {
      this = 0;
      v5 = v2;
      goto LABEL_16;
    }
    v10 = *(_QWORD *)(v2 + 32);
    if (v10)
    {
      v5 = *(_QWORD *)(v10 + 8);
      if (v5)
      {
        ++*(_DWORD *)(v5 + 16);
        v11 = *(_DWORD *)(v2 + 16);
        if (!v11)
          goto LABEL_34;
        *(_DWORD *)(v2 + 16) = v11 - 1;
        v4 = *(unsigned __int8 *)(v5 + 46);
        goto LABEL_7;
      }
    }
    if (v3 == -1)
      goto LABEL_34;
    this = 0;
    *(_DWORD *)(v2 + 16) = v3;
  }
  return this;
}

uint64_t WebCore::createDefaultParagraphElement@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (**v9)(WebCore::Node *__hidden);
  uint64_t v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;

  v5 = *((_QWORD *)this + 382);
  if (!v5)
  {
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, this);
    v13 = (WebCore::Editor *)*((_QWORD *)this + 382);
    *((_QWORD *)this + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v5 = *((_QWORD *)this + 382);
  }
  v6 = (char *)this + 96;
  if (*(_BYTE *)(v5 + 120))
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x101C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v6;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*((_DWORD *)this + 831);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v8 = WebCore::HTMLNames::pTag;
    if (WebCore::HTMLNames::pTag)
      ++*(_DWORD *)WebCore::HTMLNames::pTag;
    *(_QWORD *)(result + 96) = v8;
    *(_QWORD *)(result + 104) = 0;
    v9 = off_1E33C9E10;
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x101C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v6;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*((_DWORD *)this + 831);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v10 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(result + 96) = v10;
    *(_QWORD *)(result + 104) = 0;
    v9 = off_1E33B9CC0;
  }
  *(_QWORD *)result = v9;
  *a2 = result;
  return result;
}

uint64_t WebCore::parentTabSpanNode(WebCore *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!this)
    return 0;
  if ((*((_WORD *)this + 14) & 2) == 0)
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
  {
    return 0;
  }
  v3 = *(_QWORD *)(v2 + 104);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_9;
LABEL_17:
    v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_17;
LABEL_9:
  v6 = v6;
  v7 = (_QWORD *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::classAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_18:
  if ((MEMORY[0x19AEA53F4](*v7, "Apple-tab-span", 14) & 1) == 0)
    return 0;
  return v2;
}

WTF::StringImpl *WebCore::createTabSpanElement(WebCore *this, WebCore::Document *a2, WebCore::Text *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __n128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;

  v6 = bmalloc::api::isoAllocate();
  v7 = (WTF::StringImpl *)v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::spanTag;
  if (WebCore::HTMLNames::spanTag)
    ++*(_DWORD *)WebCore::HTMLNames::spanTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33CBA30;
  WTF::AtomStringImpl::add();
  v9 = *((_QWORD *)v7 + 13);
  if (!v9)
    goto LABEL_15;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) != 0)
  {
    v11 = *(uint64_t **)(v9 + 40);
    v12 = *(_DWORD *)(v9 + 52);
    if (!v12)
    {
LABEL_15:
      v13 = 0xFFFFFFFFLL;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = (uint64_t *)(v9 + 32);
    v12 = v10 >> 5;
    if (!v12)
      goto LABEL_15;
  }
  v13 = 0;
  while (1)
  {
    v14 = *v11;
    if (*v11 == WebCore::HTMLNames::classAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
    {
      break;
    }
    ++v13;
    v11 += 2;
    if (v12 == v13)
      goto LABEL_15;
  }
LABEL_16:
  WebCore::Element::setAttributeInternal(v7, v13, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v29, 0);
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::AtomStringImpl::add();
  WebCore::Element::setAttribute(v7, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v29, 0, &v26, v17);
  if (v28)
  {
    v19 = v27;
    v27 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = (WTF::StringImpl *)WebCore::ContainerNode::appendChild((uint64_t)v7, a3, (uint64_t)v23);
  if (v25)
  {
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *(_QWORD *)this = v7;
  return result;
}

WTF::StringImpl *WebCore::createTabSpanElement@<X0>(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x320300000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  v7 = v10;
  if (v10 || (v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)(v5 + 80) = v7;
  *(_QWORD *)v5 = off_1E33A8078;
  WebCore::createTabSpanElement(a2, this, (WebCore::Text *)v5);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

BOOL WebCore::lineBreakExistsAtPosition(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  _BOOL8 v8;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
LABEL_7:
    v4 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v4 && (*(_WORD *)(v2 + 28) & 2) != 0)
    {
      v5 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v5 + 2;
      if ((*(_BYTE *)(v4 + 45) & 2) != 0)
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
      v6 = *(_DWORD *)(v4 + 120);
      v7 = (v6 >> 27) & 7;
      if (((v6 & 0x40000000) == 0 && v7 == 3
         || v7 && ((v10 = v6 & 0x40000000) != 0 ? (v11 = 1) : (v11 = 2), v7 == v11 || !((v7 != 1) | (v10 >> 30) & 1)))
        && (v12 = *(_QWORD *)(v2 + 80)) != 0
        && (v13 = *((unsigned int *)this + 2), v13 < *(_DWORD *)(v12 + 4)))
      {
        v14 = *(_QWORD *)(v12 + 8);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v13);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v13);
        v8 = v15 == 10;
        if (!v5)
          goto LABEL_28;
      }
      else
      {
        v8 = 0;
        if (!v5)
        {
LABEL_28:
          if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
          return v8;
        }
      }
      *(_DWORD *)(v2 + 24) = v5;
      return v8;
    }
    return 0;
  }
  if ((*((_BYTE *)this + 12) & 7) == 0)
  {
    if (!*((_DWORD *)this + 2))
      return 1;
LABEL_6:
    v2 = *(_QWORD *)this;
    goto LABEL_7;
  }
  v8 = 1;
  switch(*((_BYTE *)this + 12) & 7)
  {
    case 1:
    case 3:
      return v8;
    case 2:
    case 4:
      v16 = this;
      v17 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v17 + 2;
      if ((v3 & 1) != 0)
      {
        v20 = *(_QWORD *)(v2 + 80);
        if (v20)
          v19 = *(_DWORD *)(v20 + 4);
        else
          v19 = 0;
      }
      else if ((v3 & 4) != 0 && (v18 = *(_QWORD *)(v2 + 80)) != 0)
      {
        v19 = 0;
        do
        {
          ++v19;
          v18 = *(_QWORD *)(v18 + 56);
        }
        while (v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t, const WebCore::Position *))(*(_QWORD *)v2 + 208))(v2, a2) ^ 1;
        v17 = *(_DWORD *)(v2 + 24) - 2;
      }
      if (v17)
      {
        *(_DWORD *)(v2 + 24) = v17;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
      }
      this = v16;
      if (!v19)
        return 1;
      goto LABEL_6;
    default:
      goto LABEL_6;
  }
  return v8;
}

unsigned int *WebCore::selectionForParagraphIteration@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const WebCore::VisiblePosition *v12;
  int v13;
  int v14;
  const WebCore::VisiblePosition *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  __int16 v20;
  WebCore::Node *v21;
  int v22;
  WebCore::Node *v24;
  void *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  void *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  void *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  int v34;
  __int16 v35;
  WebCore::Node *v36;
  int v37;
  WebCore::Node *v39;
  WebCore::Node *v40;
  unsigned int *result;
  WebCore::Node *v42[3];
  WebCore::Node *v43;
  int v44;
  char v45;
  char v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  int v49;
  char v50;
  char v51;
  WebCore::Node *v52;
  int v53;
  char v54;
  char v55;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    *(_DWORD *)(v4 + 24) += 2;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 2);
  *(_BYTE *)(a2 + 12) = *((_BYTE *)this + 12);
  v5 = *((_QWORD *)this + 2);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)this + 6);
  *(_BYTE *)(a2 + 28) = *((_BYTE *)this + 28);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 10);
  *(_BYTE *)(a2 + 44) = *((_BYTE *)this + 44);
  v7 = *((_QWORD *)this + 6);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 56) = *((_DWORD *)this + 14);
  *(_BYTE *)(a2 + 60) = *((_BYTE *)this + 60);
  v8 = *((_QWORD *)this + 8);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  *(_QWORD *)(a2 + 64) = v8;
  *(_DWORD *)(a2 + 72) = *((_DWORD *)this + 18);
  *(_BYTE *)(a2 + 76) = *((_BYTE *)this + 76);
  v9 = *((_QWORD *)this + 10);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  *(_QWORD *)(a2 + 80) = v9;
  *(_DWORD *)(a2 + 88) = *((_DWORD *)this + 22);
  *(_BYTE *)(a2 + 92) = *((_BYTE *)this + 92);
  *(_WORD *)(a2 + 96) = *((_WORD *)this + 48);
  *(_BYTE *)(a2 + 98) = *((_BYTE *)this + 98);
  v10 = *(unsigned __int8 *)(a2 + 97);
  v11 = *(unsigned __int8 *)(a2 + 96);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 64), (uint64_t)&v52);
  v55 = 1;
  if (v10 != 2 && !v11)
  {
    v24 = v52;
    if (v52)
    {
      *((_DWORD *)v52 + 6) += 2;
      v43 = v24;
      v44 = v53;
      v45 = v54;
      v46 = 0;
      if (!WebCore::inSameLine((WebCore *)&v52, (const WebCore::VisiblePosition *)&v43, v12))
        v55 = 0;
      v26 = v43;
      v43 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26, v25);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
    }
  }
  v13 = *(unsigned __int8 *)(a2 + 97);
  v14 = *(unsigned __int8 *)(a2 + 96);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 80), (uint64_t)&v48);
  v51 = 1;
  if (v13 == 2 || !v14)
  {
    v27 = v48;
    if (v48)
    {
      *((_DWORD *)v48 + 6) += 2;
      v43 = v27;
      v44 = v49;
      v45 = v50;
      v46 = 0;
      if (!WebCore::inSameLine((WebCore *)&v48, (const WebCore::VisiblePosition *)&v43, v15))
        v51 = 0;
      v29 = v43;
      v43 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v28);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
    }
  }
  WebCore::isFirstPositionAfterTable(&v48, &v47);
  v17 = v47;
  if (v47)
  {
    v18 = v52;
    if (!v52)
    {
      if ((*((_WORD *)v47 + 14) & 0xF000) != 0x9000
        || (WebCore::Node *)*MEMORY[0x28] != v47
        || (MEMORY[0x1C] & 0xF000) == 0x9000
        || (MEMORY[0x16] & 8) == 0)
      {
        goto LABEL_59;
      }
LABEL_56:
      WebCore::VisiblePosition::previous(&v48, 1, 0, (uint64_t)v42);
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v43, (const WebCore::VisiblePosition *)&v52, (const WebCore::VisiblePosition *)v42, 0);
      WebCore::VisibleSelection::operator=((uint64_t *)a2, (uint64_t *)&v43);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v43);
      v30 = v42[0];
      v42[0] = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v16);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      goto LABEL_59;
    }
    v19 = *((_DWORD *)v52 + 6);
    *((_DWORD *)v52 + 6) = v19 + 2;
    v20 = *((_WORD *)v17 + 14);
    if ((v20 & 0xF000) == 0x9000)
    {
      if (**((WebCore::Node ***)v18 + 5) == v17 && (*((_WORD *)v18 + 14) & 0xF000) != 0x9000)
      {
        v22 = (*((unsigned __int8 *)v18 + 22) >> 3) & 1;
        if (v19)
        {
LABEL_55:
          *((_DWORD *)v18 + 6) = v19;
          if ((v22 & 1) != 0)
            goto LABEL_56;
LABEL_59:
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v16);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
          goto LABEL_61;
        }
        goto LABEL_109;
      }
    }
    else if ((v20 & 4) != 0
           && *((_QWORD *)v17 + 10)
           && ((*((unsigned __int8 *)v18 + 22) ^ *((unsigned __int8 *)v17 + 22)) & 8) == 0)
    {
      v21 = v18;
      do
      {
        v21 = (WebCore::Node *)*((_QWORD *)v21 + 4);
        v22 = v21 != 0;
      }
      while (v21 != v17 && v21 != 0);
LABEL_54:
      if (v19)
        goto LABEL_55;
LABEL_109:
      if ((*((_WORD *)v18 + 15) & 0x400) != 0)
      {
        if (!v22)
          goto LABEL_59;
      }
      else
      {
        WebCore::Node::removedLastRef(v18, v16);
        if ((v22 & 1) == 0)
          goto LABEL_59;
      }
      goto LABEL_56;
    }
    v22 = 0;
    goto LABEL_54;
  }
LABEL_61:
  WebCore::isLastPositionBeforeTable(&v52, &v47);
  v32 = v47;
  if (!v47)
    goto LABEL_93;
  v33 = v48;
  if (!v48)
  {
    if ((*((_WORD *)v47 + 14) & 0xF000) != 0x9000
      || (WebCore::Node *)*MEMORY[0x28] != v47
      || (MEMORY[0x1C] & 0xF000) == 0x9000
      || (MEMORY[0x16] & 8) == 0)
    {
      goto LABEL_91;
    }
LABEL_88:
    WebCore::VisiblePosition::next((unsigned __int8 *)&v52, 1, 0, (uint64_t)v42);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v43, (const WebCore::VisiblePosition *)v42, (const WebCore::VisiblePosition *)&v48, 0);
    WebCore::VisibleSelection::operator=((uint64_t *)a2, (uint64_t *)&v43);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v43);
    v39 = v42[0];
    v42[0] = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v31);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    goto LABEL_91;
  }
  v34 = *((_DWORD *)v48 + 6);
  *((_DWORD *)v48 + 6) = v34 + 2;
  v35 = *((_WORD *)v32 + 14);
  if ((v35 & 0xF000) != 0x9000)
  {
    if ((v35 & 4) != 0
      && *((_QWORD *)v32 + 10)
      && ((*((unsigned __int8 *)v33 + 22) ^ *((unsigned __int8 *)v32 + 22)) & 8) == 0)
    {
      v36 = v33;
      do
      {
        v36 = (WebCore::Node *)*((_QWORD *)v36 + 4);
        v37 = v36 != 0;
      }
      while (v36 != v32 && v36 != 0);
LABEL_86:
      if (v34)
        goto LABEL_87;
      goto LABEL_115;
    }
LABEL_85:
    v37 = 0;
    goto LABEL_86;
  }
  if (**((WebCore::Node ***)v33 + 5) != v32 || (*((_WORD *)v33 + 14) & 0xF000) == 0x9000)
    goto LABEL_85;
  v37 = (*((unsigned __int8 *)v33 + 22) >> 3) & 1;
  if (!v34)
  {
LABEL_115:
    if ((*((_WORD *)v33 + 15) & 0x400) != 0)
    {
      if (!v37)
        goto LABEL_91;
    }
    else
    {
      WebCore::Node::removedLastRef(v33, v31);
      if ((v37 & 1) == 0)
        goto LABEL_91;
    }
    goto LABEL_88;
  }
LABEL_87:
  *((_DWORD *)v33 + 6) = v34;
  if ((v37 & 1) != 0)
    goto LABEL_88;
LABEL_91:
  if (*((_DWORD *)v32 + 6) == 2)
  {
    if ((*((_WORD *)v32 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v32, v31);
  }
  else
  {
    *((_DWORD *)v32 + 6) -= 2;
  }
LABEL_93:
  v40 = v48;
  v48 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v31);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  result = (unsigned int *)v52;
  v52 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v31);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::indexForVisiblePosition(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v5;
  WebCore::Node *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  int v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  int v23;
  char v24;

  v2 = *a1;
  if (!*a1)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  v22 = (WebCore::Node *)v2;
  v23 = *((_DWORD *)a1 + 2);
  v24 = *((_BYTE *)a1 + 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  WebCore::highestEditableRoot((uint64_t)&v22, v5 & 1, (uint64_t *)&v21);
  if (v21 && !*(_BYTE *)(v4 + 3361))
  {
    WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)a2, (uint64_t *)&v21);
    goto LABEL_19;
  }
  v6 = v22;
  if (!v22)
    goto LABEL_7;
  if ((v24 & 7u) - 1 <= 1)
    goto LABEL_56;
  while (1)
  {
    if ((*((_BYTE *)v6 + 22) & 0x10) != 0)
    {
      v10 = **((_QWORD **)v6 + 5);
      if ((*(_WORD *)(v10 + 28) & 0x80) == 0)
        v10 = 0;
      if (v10)
        *(_DWORD *)(v10 + 24) += 2;
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v10;
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 24) - 2;
        if (*(_DWORD *)(v7 + 24) != 2)
          goto LABEL_17;
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
LABEL_7:
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 24) - 2;
        if (*(_DWORD *)(v7 + 24) != 2)
        {
          v4 = 0;
LABEL_17:
          *(_DWORD *)(v7 + 24) = v8;
          goto LABEL_19;
        }
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      v4 = 0;
    }
LABEL_19:
    a2 = *(_QWORD *)a2;
    *(_DWORD *)(a2 + 24) += 2;
    WebCore::makeBoundaryPoint((uint64_t *)&v22, (uint64_t)&v17);
    if ((_BYTE)v19)
      break;
    if (*(_DWORD *)(a2 + 24) != 2)
    {
      *(_DWORD *)(a2 + 24) -= 2;
      goto LABEL_53;
    }
    while ((*(_WORD *)(a2 + 30) & 0x400) != 0)
LABEL_53:
      __break(1u);
    WebCore::Node::removedLastRef((WebCore::Node *)a2);
    __break(1u);
LABEL_56:
    v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
  }
  v11 = v17;
  v12 = v18;
  v17 = (WebCore::Node *)a2;
  v18 = 0;
  v19 = v11;
  v20 = v12;
  v9 = WebCore::characterCount((int *)&v17, 1);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  return v9;
}

uint64_t WebCore::indexForVisiblePosition(WebCore::Node *a1, _QWORD *a2, __int16 a3)
{
  void *v4;
  WebCore::Node *v5;
  void *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13[2];
  WebCore::Node *v14;
  char v15;

  if (!*a2)
    return 0;
  *((_DWORD *)a1 + 6) += 2;
  v11 = a1;
  v12 = 0;
  WebCore::makeSimpleRange<WebCore::BoundaryPoint,WebCore::VisiblePosition const&>((uint64_t *)&v11, (uint64_t)a2, (uint64_t)v13);
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (!v15)
    return 0;
  v7 = WebCore::characterCount((int *)v13, a3);
  if (v15)
  {
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v6);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v9 = v13[0];
    v13[0] = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v6);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  return v7;
}

uint64_t *WebCore::makeSimpleRange<WebCore::BoundaryPoint,WebCore::VisiblePosition const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;

  v4 = *a1;
  *a1 = 0;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    *(_DWORD *)(v6 + 24) += 2;
    v13 = v6;
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_BYTE *)(a2 + 12);
    result = WebCore::makeBoundaryPoint(&v13, (uint64_t)&v10);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_BYTE *)(a2 + 12);
    result = WebCore::makeBoundaryPoint(&v13, (uint64_t)&v10);
  }
  if (v12)
  {
    v8 = v10;
    v9 = v11;
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = v5;
    *(_QWORD *)(a3 + 16) = v8;
    *(_DWORD *)(a3 + 24) = v9;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::visiblePositionForPositionWithOffset@<X0>(WebCore *this@<X0>, const VisiblePosition *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  unsigned int *result;
  void *v6;
  WebCore::Node *v7;

  v3 = (int)a2;
  v7 = 0;
  result = (unsigned int *)WebCore::indexForVisiblePosition((uint64_t *)this, (uint64_t)&v7);
  if (v7)
  {
    WebCore::visiblePositionForIndex((unsigned int *)((_DWORD)result + v3), (uint64_t)v7, 1, a3);
    result = (unsigned int *)v7;
    v7 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::visiblePositionForIndex@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, _QWORD *a4@<X8>)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  int v17;
  int v18;
  WebCore::Node *v19;
  void *v20;
  WebCore::Node *v21;
  int v22;
  WebCore::Node *v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  char v27;
  WebCore::Node *v28;

  if (!a2)
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *((_BYTE *)a4 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 24) += 4;
  v5 = *(_WORD *)(a2 + 28);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 80);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 4);
  }
  else if ((v5 & 4) != 0 && (v6 = *(_QWORD *)(a2 + 80)) != 0)
  {
    LODWORD(v7) = 0;
    do
    {
      LODWORD(v7) = v7 + 1;
      v6 = *(_QWORD *)(v6 + 56);
    }
    while (v6);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v21 = (WebCore::Node *)a2;
  v22 = 0;
  v23 = (WebCore::Node *)a2;
  v24 = v7;
  WebCore::resolveCharacterRange(&v21, (int)result, 0, a3, &v25);
  v9 = v25;
  v10 = v26;
  v11 = v28;
  v25 = 0;
  v28 = 0;
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 6) - 2;
    if (*((_DWORD *)v11 + 6) != 2)
      goto LABEL_14;
    if ((*((_WORD *)v11 + 15) & 0x400) != 0)
      goto LABEL_15;
    WebCore::Node::removedLastRef(v11, v8);
    v11 = v25;
    v25 = 0;
    if (!v11)
      goto LABEL_15;
    v12 = *((_DWORD *)v11 + 6) - 2;
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v20);
    }
    else
    {
LABEL_14:
      *((_DWORD *)v11 + 6) = v12;
    }
  }
LABEL_15:
  *((_DWORD *)v9 + 6) += 2;
  v25 = v9;
  v26 = v10;
  v13 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9);
  if (v10)
    v14 = 10;
  else
    v14 = 9;
  if ((v13 & 1) != 0)
    v15 = 8;
  else
    v15 = v14;
  v27 = v15;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v25, (uint64_t)a4);
  *((_BYTE *)a4 + 16) = 1;
  v17 = *((_DWORD *)v9 + 6) - 2;
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) != 0)
    {
LABEL_34:
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v16);
      goto LABEL_25;
    }
    WebCore::Node::removedLastRef(v9, v16);
    v17 = *((_DWORD *)v9 + 6);
  }
  else
  {
    *((_DWORD *)v9 + 6) = v17;
  }
  v18 = v17 - 2;
  if (!v18)
    goto LABEL_34;
  *((_DWORD *)v9 + 6) = v18;
LABEL_25:
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v16);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::visiblePositionForIndexUsingCharacterIterator@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unsigned __int16 *v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  WTF::StringImpl *v27;
  WebCore::Node *v28;
  int v29;
  char v30;
  const WebCore::VisiblePosition *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore *v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  WebCore::Node *v40;
  int v41;
  WebCore::Node *v42;
  int v43;
  int32x2_t v44[12];
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int *v50;
  int v51;
  WebCore *v52;
  int v53;
  WebCore::Node *v54;
  int v55;
  char v56;
  char v57;

  if ((int)a2 <= 0)
  {
    WebCore::firstPositionInOrBeforeNode((uint64_t)this, a2, (uint64_t)v44);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v44, a3);
    *(_BYTE *)(a3 + 16) = 1;
    result = (unsigned int *)v44[0];
    v44[0] = 0;
    if (!result)
      return result;
    goto LABEL_84;
  }
  v4 = (int)a2;
  *((_DWORD *)this + 6) += 4;
  v5 = *((_WORD *)this + 14);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 10);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 4);
  }
  else if ((v5 & 4) != 0 && (v6 = *((_QWORD *)this + 10)) != 0)
  {
    LODWORD(v7) = 0;
    do
    {
      LODWORD(v7) = v7 + 1;
      v6 = *(_QWORD *)(v6 + 56);
    }
    while (v6);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v50 = (unsigned int *)this;
  v51 = 0;
  v52 = this;
  v53 = v7;
  result = (unsigned int *)WebCore::TextIterator::TextIterator((uint64_t)v44, &v50, 0);
  v48 = 0;
  v49 = 1;
  while (1)
  {
    if (!v45)
      goto LABEL_58;
    v11 = v47;
    if ((_DWORD)v47)
      break;
    result = (unsigned int *)WebCore::TextIterator::advance((WebCore::TextIterator *)v44, v10);
  }
  v12 = HIDWORD(v48);
  if (v4 >= 2)
  {
    v13 = v4 - 1;
    v49 = 0;
    v14 = v47 - HIDWORD(v48);
    if ((int)v47 - HIDWORD(v48) < v4)
    {
      LODWORD(v48) = v48 + v14;
      result = (unsigned int *)WebCore::TextIterator::advance((WebCore::TextIterator *)v44, v10);
      if (v45)
      {
        v12 = v13 - v14;
        do
        {
          if ((_DWORD)v47)
          {
            v13 = v12;
            if ((int)v12 < (int)v47)
              goto LABEL_28;
            LODWORD(v48) = v48 + v47;
            v12 -= v47;
          }
          else
          {
            v49 = 1;
          }
          result = (unsigned int *)WebCore::TextIterator::advance((WebCore::TextIterator *)v44, v10);
        }
        while (v45);
      }
LABEL_57:
      v49 = 1;
      HIDWORD(v48) = 0;
LABEL_58:
      v28 = (WebCore::Node *)v50;
      v50[6] += 2;
      v40 = v28;
      v41 = v51;
      v21 = v52;
      *((_DWORD *)v52 + 6) += 2;
      v42 = v21;
      v29 = v53;
      v43 = v53;
      goto LABEL_64;
    }
    v12 = HIDWORD(v48) + v13;
LABEL_28:
    HIDWORD(v48) = v12;
    LODWORD(v48) = v48 + v13;
    v11 = v47;
  }
  v15 = v11 - v12;
  if (v11 <= v12)
    goto LABEL_63;
  v16 = v46;
  if (v12)
  {
    v18 = v11 - (unint64_t)v12;
    if ((v11 & 0xFF00000000) != 0)
    {
      if (v18 >= v15)
      {
        if ((_DWORD)v15 != 1)
          goto LABEL_63;
        if (v11 != (unint64_t)v12)
        {
          v16 = (unsigned __int16 *)((char *)v46 + v12);
          goto LABEL_39;
        }
      }
    }
    else if (v18 >= v15)
    {
      if ((_DWORD)v15 != 1)
        goto LABEL_63;
      if (v11 != (unint64_t)v12)
      {
        v16 = &v46[v12];
        goto LABEL_33;
      }
    }
    __break(1u);
    return result;
  }
  if ((_DWORD)v11 != 1)
  {
LABEL_63:
    WebCore::CharacterIterator::range(v44, (int32x2_t *)&v40);
    v21 = v42;
    v29 = v43;
LABEL_64:
    *((_DWORD *)v21 + 6) += 2;
    v37 = v21;
    v38 = v29;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v21 + 208))(v21) & 1) != 0)
    {
      v30 = 8;
    }
    else if (v29)
    {
      v30 = 10;
    }
    else
    {
      v30 = 9;
    }
    v39 = v30;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v37, a3);
    *(_BYTE *)(a3 + 16) = 1;
    v32 = *(WebCore::Node **)a3;
    if (*(_QWORD *)a3)
    {
      *((_DWORD *)v32 + 6) += 2;
      v54 = v32;
      v55 = *(_DWORD *)(a3 + 8);
      v56 = *(_BYTE *)(a3 + 12);
      v57 = 0;
      if (!WebCore::inSameLine((WebCore *)a3, (const WebCore::VisiblePosition *)&v54, v31))
        *(_BYTE *)(a3 + 16) = 0;
      v33 = v54;
      v54 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v26);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
    }
    goto LABEL_72;
  }
  if ((v11 & 0xFF00000000) == 0)
  {
LABEL_33:
    v17 = *v16;
    goto LABEL_40;
  }
LABEL_39:
  v17 = *(unsigned __int8 *)v16;
LABEL_40:
  if (v17 != 10)
    goto LABEL_63;
  v49 = 0;
  if ((int)v15 < 2)
  {
    LODWORD(v48) = v48 + v15;
    WebCore::TextIterator::advance((WebCore::TextIterator *)v44, v10);
    if (v45)
    {
      v19 = 1 - v15;
      do
      {
        if ((_DWORD)v47)
        {
          v20 = v19;
          if (v19 < (int)v47)
            goto LABEL_43;
          LODWORD(v48) = v48 + v47;
          v19 -= v47;
        }
        else
        {
          v49 = 1;
        }
        WebCore::TextIterator::advance((WebCore::TextIterator *)v44, v27);
      }
      while (v45);
    }
    goto LABEL_57;
  }
  v19 = v12 + 1;
  v20 = 1;
LABEL_43:
  HIDWORD(v48) = v19;
  LODWORD(v48) = v48 + v20;
  WebCore::CharacterIterator::range(v44, (int32x2_t *)&v40);
  v21 = v40;
  *((_DWORD *)v40 + 6) += 2;
  v22 = v41;
  v54 = v21;
  v55 = v41;
  v23 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v21 + 208))(v21);
  if (v22)
    v24 = 10;
  else
    v24 = 9;
  if ((v23 & 1) != 0)
    v25 = 8;
  else
    v25 = v24;
  v56 = v25;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v54, a3);
  *(_BYTE *)(a3 + 16) = 1;
LABEL_72:
  if (*((_DWORD *)v21 + 6) == 2)
  {
    if ((*((_WORD *)v21 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v21, v26);
  }
  else
  {
    *((_DWORD *)v21 + 6) -= 2;
  }
  v34 = v42;
  v42 = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v26);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  v35 = v40;
  v40 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v26);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v44, v26);
  v36 = v52;
  v52 = 0;
  if (v36)
  {
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v8);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
  }
  result = v50;
  v50 = 0;
  if (result)
  {
LABEL_84:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::isNodeVisiblyContainedWithin(WebCore *this, WebCore::Node *a2, const WebCore::SimpleRange *a3)
{
  uint64_t v5;
  WebCore::Node *v6;
  int v7;
  char v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  char v12;
  void *v13;
  _BOOL4 v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  unsigned __int8 v17;
  BOOL v19;
  WebCore::Node *v20;
  _BOOL4 v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  unsigned __int8 v24;
  _BOOL4 v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v31[2];
  char v32;
  WebCore::Node *v33[3];
  WebCore::Node *v34;
  int v35;
  char v36;
  WebCore::Node *v37;
  int v38;
  char v39;

  if (WebCore::contains<(WebCore::TreeType)2>((int *)a2, this))
    return 1;
  v6 = *(WebCore::Node **)a2;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v7 = *((_DWORD *)a2 + 2);
  v37 = v6;
  v38 = v7;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 208))(v6) & 1) != 0)
  {
    v8 = 8;
  }
  else if (v7)
  {
    v8 = 10;
  }
  else
  {
    v8 = 9;
  }
  v39 = v8;
  v9 = (WebCore::Node *)*((_QWORD *)a2 + 2);
  *((_DWORD *)v9 + 6) += 2;
  v10 = *((_DWORD *)a2 + 6);
  v34 = v9;
  v35 = v10;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
  {
    v12 = 8;
  }
  else if (v10)
  {
    v12 = 10;
  }
  else
  {
    v12 = 9;
  }
  v36 = v12;
  WebCore::visiblePositionBeforeNode(this, v11, (uint64_t)v33);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v37, (uint64_t)v31);
  v32 = 1;
  v14 = WebCore::operator==((uint64_t *)v33, (uint64_t *)v31);
  v15 = v31[0];
  v31[0] = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v13);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v16 = v33[0];
  v33[0] = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v13);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  if (!v14)
    goto LABEL_25;
  WebCore::positionInParentAfterNode((uint64_t)this, (WebCore::Node *)v13, (uint64_t)v33);
  v17 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)v33, (uint64_t)&v34);
  v19 = v17 != 129 && (v17 & 0x80u) != 0;
  v20 = v33[0];
  v33[0] = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v13);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  if (v19)
  {
    v5 = 1;
  }
  else
  {
LABEL_25:
    WebCore::visiblePositionAfterNode(this, (WebCore::Node *)v13, (uint64_t)v33);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v34, (uint64_t)v31);
    v32 = 1;
    v21 = WebCore::operator==((uint64_t *)v33, (uint64_t *)v31);
    v22 = v31[0];
    v31[0] = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v13);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    v23 = v33[0];
    v33[0] = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v13);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    if (v21)
    {
      WebCore::positionInParentBeforeNode(this, (WebCore::Node *)v13, (uint64_t)v33);
      v24 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v37, (uint64_t)v33);
      v26 = v24 != 129 && (v24 & 0x80u) != 0;
      v27 = v33[0];
      v33[0] = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, v13);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
    }
    else
    {
      v26 = 0;
    }
    v5 = v26 | v14 & v21;
  }
  v28 = v34;
  v34 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v13);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  v29 = v37;
  v37 = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v13);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  return v5;
}

uint64_t *WebCore::adjustedSelectionStartForStyleComputation@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;

  v6 = *((_BYTE *)this + 97) == 2 || *((_BYTE *)this + 96) != 0;
  WebCore::VisiblePosition::VisiblePosition((uint64_t)&v18, (WebCore *)((char *)this + 64), v6);
  v7 = v18;
  if (!v18)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    v8 = *(_BYTE *)(a2 + 12) & 0xF0;
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 97) == 1)
  {
    *(_DWORD *)(v18 + 24) += 2;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = v19;
    v8 = v20;
LABEL_10:
    *(_BYTE *)(a2 + 12) = v8;
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v18);
  }
  if (WebCore::isEndOfParagraph((WebCore::Node *)&v18, 1))
  {
    WebCore::VisiblePosition::next((unsigned __int8 *)&v18, 0, 0, (uint64_t)&v12);
    v10 = v12;
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    v15 = v10;
    v16 = v13;
    v17 = v14;
    WebCore::Position::downstream((uint64_t)&v15, (WebCore::Node *)1, a2);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12);
  }
  else
  {
    v11 = v18;
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    v12 = v11;
    v13 = v19;
    v14 = v20;
    WebCore::Position::downstream((uint64_t)&v12, (WebCore::Node *)1, a2);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12);
  }
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v18);
}

uint64_t WebCore::deprecatedEnclosingBlockFlowElement(uint64_t this, WebCore::Node *a2)
{
  __int16 v2;

  if (this)
  {
    if ((*(_WORD *)(this + 28) & 8) == 0 || (*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_6;
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x195AA9B3CLL);
    }
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
    {
LABEL_6:
      for (this = *(_QWORD *)(this + 32); this; this = *(_QWORD *)(this + 32))
      {
        v2 = *(_WORD *)(this + 28);
        if ((v2 & 8) != 0 && (*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_15;
          if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
            break;
        }
        if ((v2 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
      }
    }
  }
  return this;
}

WebCore::RenderObject *WebCore::rendererForCaretPainting(WebCore *this, const WebCore::Node *a2)
{
  WebCore::RenderObject *v2;
  WebCore::RenderObject *result;
  int v5;
  int v6;

  if (!this)
    return 0;
  v2 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v2)
    return v2;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
    return WebCore::RenderObject::containingBlock(v2);
  if ((*((_WORD *)this + 14) & 0x10) == 0)
    goto LABEL_7;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v5 + 2;
  if ((*((_BYTE *)v2 + 45) & 2) == 0)
  {
    v6 = *((unsigned __int8 *)v2 + 46);
    if (v5)
    {
      *((_DWORD *)this + 6) = v5;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, a2);
    }
    if (v6 == 35 || v6 == 63)
      return WebCore::RenderObject::containingBlock(v2);
LABEL_7:
    if (((*(uint64_t (**)(WebCore *, const WebCore::Node *))(*(_QWORD *)this + 208))(this, a2) & 1) != 0)
      return v2;
    return WebCore::RenderObject::containingBlock(v2);
  }
  result = (WebCore::RenderObject *)105;
  __break(0xC471u);
  return result;
}

WebCore::Node *WebCore::localCaretRectInRendererForCaretPainting(WebCore *this, VisiblePosition *a2, WebCore::RenderBlock **a3)
{
  WebCore::RenderBlock **v5;
  uint64_t v6;
  WebCore::Node *v7;
  unint64_t v9[2];
  WebCore::Node *v10;

  if (!*(_QWORD *)this)
    return 0;
  WebCore::VisiblePosition::localCaretRect((unint64_t)this, v9);
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return WebCore::localCaretRectInRendererForRect((WebCore *)v9, 0, v10, (WebCore::RenderObject *)a2, v5);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = WebCore::localCaretRectInRendererForRect((WebCore *)v9, (WebCore::LayoutRect *)v6, v10, (WebCore::RenderObject *)a2, v5);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v7;
}

WebCore::Node *WebCore::localCaretRectInRendererForRect(WebCore *this, WebCore::LayoutRect *a2, WebCore::Node *a3, WebCore::RenderObject *a4, WebCore::RenderBlock **a5)
{
  WebCore::RenderObject *v8;
  WebCore::Node *result;
  WebCore::Node *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  if (a2)
  {
    v19 = *((_QWORD *)a2 + 8);
    v8 = (WebCore::RenderObject *)(v19 & 0xFFFFFFFFFFFFLL);
    if ((v19 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v19 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
        goto LABEL_24;
      if ((*((_WORD *)a2 + 14) & 0x10) != 0)
      {
        v20 = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = v20 + 2;
        if ((*((_BYTE *)v8 + 45) & 2) != 0)
        {
          __break(0xC471u);
          goto LABEL_30;
        }
        v21 = *((unsigned __int8 *)v8 + 46);
        if (v20)
        {
          *((_DWORD *)a2 + 6) = v20;
        }
        else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(a2);
        }
        if (v21 == 35 || v21 == 63)
          goto LABEL_24;
      }
      if (((*(uint64_t (**)(WebCore::LayoutRect *))(*(_QWORD *)a2 + 208))(a2) & 1) == 0)
LABEL_24:
        v8 = WebCore::RenderObject::containingBlock(v8);
    }
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)a4 = v8;
  if (v8 != a3)
  {
    while (1)
    {
      result = (WebCore::Node *)WebCore::RenderObject::container(a3);
      if (!result)
        return result;
      v10 = result;
      ++*((_DWORD *)result + 4);
      v22 = *(_QWORD *)this;
      v11 = (*(uint64_t (**)(WebCore::Node *, WebCore::Node *, uint64_t *, _QWORD))(*(_QWORD *)a3 + 360))(a3, result, &v22, 0);
      v12 = *((_DWORD *)this + 1);
      v13 = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(*(_DWORD *)this, (_DWORD)v11))
        v13 = *(_DWORD *)this + v11;
      v14 = __OFADD__(v12, HIDWORD(v11));
      v15 = v12 + HIDWORD(v11);
      v16 = (v12 >> 31) + 0x7FFFFFFF;
      if (v14)
        v15 = v16;
      *(_DWORD *)this = v13;
      *((_DWORD *)this + 1) = v15;
      v17 = *((_DWORD *)v10 + 4);
      if (!v17)
        break;
      *((_DWORD *)v10 + 4) = v17 - 1;
      a3 = v10;
      if (v10 == *(WebCore::Node **)a4)
        return *(WebCore::Node **)this;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x195AA9EA4);
  }
  return *(WebCore::Node **)this;
}

unint64_t WebCore::absoluteBoundsForLocalCaretRect(WebCore *this, WebCore::RenderBlock *a2, const WebCore::LayoutRect *a3, BOOL *a4)
{
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  __int128 v47;
  float v48;
  float v49;
  float v50;
  float v51;

  if (a3)
    *(_BYTE *)a3 = 0;
  if (!this)
    return 0;
  v5 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  v6 = v5 < 1 || v4 < 1;
  v7 = 0;
  if (!v6)
  {
    v9 = *(_DWORD *)a2;
    v8 = *((_DWORD *)a2 + 1);
    v10 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v6 = v10 > 5;
    v11 = (1 << v10) & 0x2A;
    if (!v6 && v11 != 0)
    {
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v35 = *((_DWORD *)this + 40);
        v31 = __OFADD__(v9, v5);
        v36 = v9 + v5;
        v37 = (v9 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v37 = v36;
        v31 = __OFSUB__(v35, v37);
        v9 = v35 - v37;
        v38 = (v35 >> 31) + 0x7FFFFFFF;
        if (v31)
          v9 = v38;
      }
      else
      {
        v30 = *((_DWORD *)this + 41);
        v31 = __OFADD__(v8, v4);
        v32 = v8 + v4;
        v33 = (v8 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v33 = v32;
        v31 = __OFSUB__(v30, v33);
        v8 = v30 - v33;
        v34 = (v30 >> 31) + 0x7FFFFFFF;
        if (v31)
          v8 = v34;
      }
    }
    v39 = (float)v9 * 0.015625;
    v40 = (float)v8 * 0.015625;
    v41 = (float)((float)v5 * 0.015625) + v39;
    v42 = v40;
    v43 = v41;
    v44 = (float)((float)v4 * 0.015625) + v40;
    v45 = v39;
    v46 = v44;
    WebCore::RenderObject::localToContainerQuad((uint64_t)this, &v39, 0, 2u, &v47);
    if (v50 >= v48)
      v13 = v48;
    else
      v13 = v50;
    if (*((float *)&v47 + 2) >= *(float *)&v47)
      v14 = *(float *)&v47;
    else
      v14 = *((float *)&v47 + 2);
    if (v13 >= v14)
      v13 = v14;
    v15 = fabsf(v13);
    if (v15 == INFINITY || v15 > 2147500000.0)
      v13 = (float)((SLODWORD(v13) >> 31) ^ 0x7FFFFFFF);
    if (v51 >= v49)
      v17 = v49;
    else
      v17 = v51;
    if (*((float *)&v47 + 3) >= *((float *)&v47 + 1))
      v18 = *((float *)&v47 + 1);
    else
      v18 = *((float *)&v47 + 3);
    if (v17 >= v18)
      v17 = v18;
    v19 = fabsf(v17);
    if (v19 == INFINITY || v19 > 2147500000.0)
      v17 = (float)((SLODWORD(v17) >> 31) ^ 0x7FFFFFFF);
    v21 = floorf(v13);
    v22 = -2147500000.0;
    if (v21 > -2147500000.0)
      v22 = (float)(int)v21;
    if (v21 < 2147500000.0)
      v23 = v22;
    else
      v23 = 2147500000.0;
    v24 = floorf(v17);
    v25 = -2147500000.0;
    if (v24 > -2147500000.0)
      v25 = (float)(int)v24;
    if (v24 < 2147500000.0)
      v26 = v25;
    else
      v26 = 2147500000.0;
    if (v23 >= 2147500000.0)
    {
      v27 = 0x7FFFFFFFLL;
    }
    else if (v23 <= -2147500000.0)
    {
      v27 = 0x80000000;
    }
    else
    {
      v27 = (int)v23;
    }
    if (v26 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFF00000000;
    }
    else if (v26 <= -2147500000.0)
    {
      v28 = 0x8000000000000000;
    }
    else
    {
      v28 = (unint64_t)(int)v26 << 32;
    }
    return v28 | v27;
  }
  return v7;
}

void WebCore::visibleImageElementsInRangeWithNonLoadedImages(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  int32x2_t v11[12];
  uint64_t v12;

  *a2 = 0;
  WebCore::TextIterator::TextIterator((uint64_t)v11, this, 0);
  while (v12)
  {
    v5 = WebCore::TextIterator::node(v11);
    if (v5
      && (*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      *(_DWORD *)(v5 + 24) += 2;
      v10 = (WebCore::Node *)v5;
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 176) + 24);
      if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || (*(_WORD *)(v8 + 557) & 0x400) == 0)
      {
        v10 = 0;
LABEL_10:
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
        goto LABEL_12;
      }
      WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::add(a2, (uint64_t *)&v10, (uint64_t)&v9);
      v5 = (uint64_t)v10;
      v10 = 0;
      if (v5)
        goto LABEL_10;
    }
LABEL_12:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v11, (WTF::StringImpl *)v6);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v11, v4);
}

void WebCore::CreateLinkCommand::~CreateLinkCommand(WebCore::CreateLinkCommand *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33A9BF8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A9BF8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::CreateLinkCommand::editingAction(WebCore::CreateLinkCommand *this)
{
  return 7;
}

uint64_t WebCore::CreateLinkCommand::inputEventData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 280);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void WebCore::CustomUndoStep::~CustomUndoStep(WebCore::CustomUndoStep *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CustomUndoStep::editingAction(WebCore::CustomUndoStep *this)
{
  return 59;
}

void WebCore::DeleteFromTextNodeCommand::~DeleteFromTextNodeCommand(WebCore::DeleteFromTextNodeCommand *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DeleteFromTextNodeCommand::~DeleteFromTextNodeCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A9D10;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::DeleteFromTextNodeCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::DeleteFromTextNodeCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

void WebCore::DeleteSelectionCommand::~DeleteSelectionCommand(WebCore::DeleteSelectionCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DeleteSelectionCommand::~DeleteSelectionCommand(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EditingStyle *v8;
  WebCore::EditingStyle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;

  *(_QWORD *)this = off_1E33A9F48;
  v3 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (WebCore::EditingStyle *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v8, (WTF::StringImpl *)a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (WebCore::EditingStyle *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v9, (WTF::StringImpl *)a2);
      WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v15 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v16 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  v17 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::DeleteSelectionCommand *)((char *)this + 296));
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, v19);
}

void WebCore::DictationCommand::~DictationCommand(WebCore::DictationCommand *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E33A9D68;
  v3 = (WTF *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33A9D68;
  v3 = (WTF *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::DictationCommand::isDictationCommand(WebCore::DictationCommand *this)
{
  return 1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned char,char>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  _BOOL4 v27;

  v9 = *(int8x16_t **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_28;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_5;
  }
  v15 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x195AAA6FCLL);
  }
LABEL_5:
  v16 = *a4;
  v17 = *a5;
  if (v12)
    v18 = *(_DWORD *)(v12 + 4);
  else
    v18 = 0;
  v19 = 0;
  v20 = v16;
  do
  {
    ++v19;
    v21 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v21);
  if (v19 < 0)
    goto LABEL_24;
  v22 = __OFADD__(v19, 1);
  v23 = v19 + 1;
  if (v22)
    goto LABEL_24;
  v22 = __OFADD__(v15, v23);
  v24 = v15 + v23;
  v25 = v22;
  if (v18 < 0 || v25 || (v22 = __OFADD__(v18, v24), v26 = v18 + v24, v22) || (result = v11 + v26, __OFADD__(v11, v26)))
  {
LABEL_24:
    *a6 = 0;
  }
  else
  {
    v27 = !v12 || (*(_BYTE *)(v12 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(result, v27, v9, v11, v12, v13, v15, v16, a6, v17);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, unsigned __int8 a8@<W7>, _QWORD *a9@<X8>, char a10)
{
  int v16;
  _QWORD *i;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  unsigned __int128 *v24;
  unsigned __int128 *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  char v28;
  uint64_t v30;

  v16 = result;
  i = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v30;
        if (v30)
        {
          v19 = (_BYTE *)(v30 + 20);
          *(_DWORD *)v30 = 2;
          *(_DWORD *)(v30 + 4) = v16;
          *(_QWORD *)(v30 + 8) = v30 + 20;
          *(_DWORD *)(v30 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v19 = a3->i8[0];
            else
              memcpy((void *)(v30 + 20), a3, a4);
          }
          v20 = &v19[a4];
          if (a5)
          {
            v21 = *(_BYTE **)(a5 + 8);
            v22 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              i = a9;
              if ((_DWORD)v22)
              {
                if ((_DWORD)v22 == 1)
                  *v20 = *v21;
                else
                  memcpy(v20, v21, v22);
              }
            }
            else
            {
              v24 = (unsigned __int128 *)&v20[v22];
              if (v22 < 0x10)
              {
                v25 = (unsigned __int128 *)v20;
              }
              else
              {
                v25 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
                v26 = (unsigned __int128 *)v20;
                do
                {
                  v27 = (unsigned __int128)vld2q_s8(v21);
                  v21 += 32;
                  *v26++ = v27;
                }
                while (v26 != v25);
              }
              for (i = a9; v25 != v24; v25 = (unsigned __int128 *)((char *)v25 + 1))
              {
                v28 = *v21;
                v21 += 2;
                *(_BYTE *)v25 = v28;
              }
            }
            v23 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v23 = 0;
            i = a9;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(&v20[v23], a6, a7, a8, a10);
        }
        goto LABEL_19;
      }
LABEL_24:
      v18 = 0;
      goto LABEL_19;
    }
LABEL_23:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if (!(_DWORD)result)
    goto LABEL_23;
  if (result > 0x7FFFFFEF)
    goto LABEL_24;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v30;
  if (v30)
  {
    *(_DWORD *)v30 = 2;
    *(_DWORD *)(v30 + 4) = v16;
    *(_QWORD *)(v30 + 8) = v30 + 20;
    *(_DWORD *)(v30 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((char *)(v30 + 20), a3, a4, a5, a6, a7, a8, a10);
  }
LABEL_19:
  *i = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, unsigned __int8 a7, char a8)
{
  char *v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned int v50;
  char *v51;
  int v53;
  unsigned int v54;
  _BYTE v55[12];
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  v13 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v14 = &result[2 * (a3 & 0xFFFFFFC0)];
    v15 = 0uLL;
    do
    {
      v56.val[0] = *a2;
      v16 = a2[1];
      v59.val[0] = a2[2];
      v17 = a2[3];
      a2 += 4;
      v18 = v17;
      v59.val[1] = 0uLL;
      v62.val[0] = v16;
      v56.val[1] = 0uLL;
      v19 = result;
      vst2q_s8(v19, v56);
      v19 += 32;
      v62.val[1] = 0uLL;
      vst2q_s8(v19, v62);
      v20 = result + 64;
      vst2q_s8(v20, v59);
      v21 = result + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      result += 128;
    }
    while (result != v14);
    result = v14;
  }
  while (result != v13)
  {
    v22 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v22;
    result += 2;
  }
  if (a4)
  {
    v23 = *(int8x16_t **)(a4 + 8);
    v24 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v25 = &v13[2 * v24];
      if (v24 >= 0x40)
      {
        v26 = &v13[2 * (v24 & 0xFFFFFFC0)];
        v28 = 0uLL;
        v29 = v13;
        do
        {
          v57.val[0] = *v23;
          v30 = v23[1];
          v60.val[0] = v23[2];
          v31 = v23[3];
          v23 += 4;
          v32 = v31;
          v60.val[1] = 0uLL;
          v63.val[0] = v30;
          v57.val[1] = 0uLL;
          v33 = v29;
          vst2q_s8(v33, v57);
          v33 += 32;
          v63.val[1] = 0uLL;
          vst2q_s8(v33, v63);
          v34 = v29 + 64;
          vst2q_s8(v34, v60);
          v35 = v29 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
          v29 += 128;
        }
        while (v29 != v26);
      }
      else
      {
        v26 = v13;
      }
      while (v26 != v25)
      {
        v36 = v23->u8[0];
        v23 = (int8x16_t *)((char *)v23 + 1);
        *(_WORD *)v26 = v36;
        v26 += 2;
      }
    }
    else if ((_DWORD)v24 == 1)
    {
      *(_WORD *)v13 = v23->i16[0];
    }
    else if ((_DWORD)v24)
    {
      result = (char *)memcpy(v13, v23, 2 * v24);
    }
    v27 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v27 = 0;
  }
  v37 = &v13[2 * v27];
  v38 = &v37[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v39 = &v37[2 * (a6 & 0xFFFFFFC0)];
    v40 = 0uLL;
    do
    {
      v58.val[0] = *a5;
      v41 = a5[1];
      v61.val[0] = a5[2];
      v42 = a5[3];
      a5 += 4;
      v43 = v42;
      v61.val[1] = 0uLL;
      v64.val[0] = v41;
      v58.val[1] = 0uLL;
      v44 = v37;
      vst2q_s8(v44, v58);
      v44 += 32;
      v64.val[1] = 0uLL;
      vst2q_s8(v44, v64);
      v45 = v37 + 64;
      vst2q_s8(v45, v61);
      v46 = v37 + 96;
      vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
      v37 += 128;
    }
    while (v37 != v39);
    v37 = v39;
  }
  while (v37 != v38)
  {
    v47 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v37 = v47;
    v37 += 2;
  }
  v48 = 0;
  v49 = a7;
  do
  {
    v50 = v49;
    v55[v48-- + 3] = (v49 % 0xAu) | 0x30;
    v49 /= 0xAu;
  }
  while (v50 > 9);
  if (v48 + 5 <= 4)
  {
    v51 = v38;
    do
    {
      *(_WORD *)v51 = v55[v48 + 4];
      v51 += 2;
    }
    while (!__CFADD__(v48++, 1));
  }
  v53 = 0;
  do
  {
    ++v53;
    v54 = a7;
    a7 /= 0xAu;
  }
  while (v54 > 9);
  *(_WORD *)&v38[2 * v53] = a8;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, unsigned __int8 a4, char a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  unsigned int v14;
  _BYTE v15[4];

  v8 = __dst;
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v9 = 0;
  v10 = a4;
  do
  {
    v11 = v10;
    v15[v9-- + 3] = (v10 % 0xAu) | 0x30;
    v10 /= 0xAu;
  }
  while (v11 > 9);
  v12 = &v8[a3];
  if (v9 + 5 <= 4)
    __dst = memcpy(v12, &v15[v9 + 4], -v9);
  v13 = 0;
  do
  {
    ++v13;
    v14 = a4;
    a4 /= 0xAu;
  }
  while (v14 > 9);
  v12[v13] = a5;
  return __dst;
}

void WebCore::DictationMarkerSupplier::~DictationMarkerSupplier(WebCore::DictationMarkerSupplier *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E33A9EE8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E33A9EE8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::DictationMarkerSupplier::addMarkersToTextNode(unsigned int *this, WebCore::Text *a2, int a3, WTF **a4)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v25;
  uint64_t v26[8];
  int v27;
  WTF *v28;
  int v29;
  unint64_t v30;
  _QWORD v31[8];
  int v32;
  uint64_t v33;

  v6 = this;
  v33 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(uint64_t **)(v7 + 1496);
  if (!v8)
  {
    this = (unsigned int *)WebCore::Document::ensureMarkers((WebCore::Document *)v7);
    v8 = (uint64_t *)this;
  }
  v9 = v6[7];
  if (!v9)
    goto LABEL_31;
  v10 = (int *)*((_QWORD *)v6 + 2);
  v11 = &v10[6 * v9];
  do
  {
    v12 = *((_QWORD *)v10 + 2);
    v13 = *v10;
    v14 = v10[2];
    v15 = *a4;
    if (*a4)
    {
      if (v13 || *((_DWORD *)v15 + 1) > v14)
      {
        WTF::StringImpl::substring(v15);
        v15 = v28;
        v13 = *v10;
        v14 = v10[2];
      }
      else
      {
        v13 = 0;
        *(_DWORD *)v15 += 2;
      }
    }
    v26[0] = v12;
    v26[1] = (uint64_t)v15;
    v27 = 1;
    v28 = 0;
    v29 = 512;
    v30 = (v13 + a3) | ((unint64_t)(v13 + a3 + v14) << 32);
    LOBYTE(v31[0]) = 0;
    v32 = -1;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_((uint64_t)&v25, v31, v26);
    v32 = 1;
    WebCore::DocumentMarkerController::addMarker(v8, a2, &v28);
    if (v32 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v32])(&v25, v31);
    v32 = -1;
    v17 = (unsigned int *)v28;
    if (v28)
    {
      *((_QWORD *)v28 + 1) = 0;
      v28 = 0;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
    }
    if (v27 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E33A9F00[v27])(&v28, v26);
    v20 = (*v10 + a3);
    v21 = v10[2];
    v26[0] = 0;
    v27 = 0;
    v28 = 0;
    v29 = 128;
    v30 = v20 | ((unint64_t)(v20 + v21) << 32);
    LOBYTE(v31[0]) = 0;
    v32 = -1;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_((uint64_t)&v25, v31, v26);
    v32 = 0;
    WebCore::DocumentMarkerController::addMarker(v8, a2, &v28);
    if (v32 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v32])(&v25, v31);
    v32 = -1;
    this = (unsigned int *)v28;
    if (v28)
    {
      *((_QWORD *)v28 + 1) = 0;
      v28 = 0;
      do
      {
        v22 = __ldaxr(this);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, this));
      if (!v23)
      {
        atomic_store(1u, this);
        this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
      }
    }
    if (v27 != -1)
      this = (unsigned int *)((uint64_t (*)(WTF **, uint64_t *))off_1E33A9F00[v27])(&v28, v26);
    v10 += 6;
  }
  while (v10 != v11);
  if (v7)
  {
LABEL_31:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return this;
}

BOOL WebCore::isEditableToAccessibility(WebCore *this, const WebCore::Node *a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::AXObjectCache *v9;
  const WebCore::Node *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!WebCore::Document::hasEverCreatedAnAXObjectCache)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
  {
    while (1)
    {
      v12 = *(_QWORD *)(v3 + 528);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 120);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        break;
      v3 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
    }
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
        if (v6 && *(_BYTE *)(v6 + 144) == 0)
        {
          v8 = *(_QWORD *)(v6 + 296);
          if (v8)
            v3 = v8;
        }
      }
    }
  }
  v9 = *(WebCore::AXObjectCache **)(v3 + 1488);
  if (!v9)
    return 0;
  ++*((_DWORD *)v9 + 2);
  v10 = WebCore::AXObjectCache::rootAXEditableElement(v9, this);
  v11 = *((_DWORD *)v9 + 2);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x195AAB10CLL);
  }
  result = v10 != 0;
  *((_DWORD *)v9 + 2) = v11 - 1;
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_34;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_22;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_29:
      result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(v4, v24, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_33;
    }
LABEL_22:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_29;
  }
LABEL_33:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_34:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

unsigned int *WebCore::enclosingNodeOfType(unsigned int **a1, uint64_t *a2, int a3)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != 1)
  {
    v7 = *a2;
    if (*a2)
    {
      *(_DWORD *)(v7 + 24) += 2;
      goto LABEL_18;
    }
LABEL_28:
    result = 0;
    goto LABEL_29;
  }
  result = (unsigned int *)WebCore::highestEditableRoot((uint64_t)a2, 0, &v9);
  v6 = v9;
  v7 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v7 + 24) += 2;
    if (v6)
    {
      while (1)
      {
        v8 = v7;
        result = (unsigned int *)WebCore::Node::computeEditability(v7, 0, 1);
        if ((_DWORD)result)
        {
          if ((*(_WORD *)(v7 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
          {
            goto LABEL_31;
          }
          if (v7 == v6)
            break;
        }
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (!v7)
          goto LABEL_30;
      }
      *a1 = 0;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      goto LABEL_35;
    }
LABEL_18:
    while (1)
    {
      result = (unsigned int *)v7;
      if ((*(_WORD *)(v7 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
      {
        break;
      }
      v7 = *(_QWORD *)(v7 + 32);
      if (v7)
        *(_DWORD *)(v7 + 24) += 2;
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
      if (!v7)
        goto LABEL_28;
    }
LABEL_29:
    *a1 = result;
    return result;
  }
LABEL_30:
  v8 = 0;
LABEL_31:
  *a1 = (unsigned int *)v8;
  if (v6)
  {
LABEL_35:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLElementEquivalent::valueIsPresentInStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  int v8;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result)
  {
    v6 = WebCore::StyleProperties::propertyAsValueID(*(_QWORD *)(a3 + 8), (WTF::StringImpl *)*(unsigned __int16 *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 16);
    if ((*(_WORD *)(v7 + 4) & 0x7F) == 0x50)
      v8 = *(unsigned __int16 *)(v7 + 8);
    else
      v8 = 0;
    return (v6 & 0xFF0000) != 0 && v8 == (unsigned __int16)v6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLElementEquivalent::addToStyle(uint64_t a1, __n128 a2, uint64_t a3, WTF::StringBuilder *a4, WTF::String *a5)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v6 = *(unsigned __int16 *)(a1 + 8);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v9, *(_QWORD *)(a1 + 16), a4, a5, a2);
  WebCore::EditingStyle::setProperty((uint64_t)a4, v6, (uint64_t)&v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::EditingStyle::setProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v18;

  v8 = *(_QWORD **)(a1 + 8);
  if (!v8)
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    *v8 = 0x900000001;
    v8[1] = 0;
    v8[2] = v8 + 4;
    v8[3] = 4;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v12 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v12)
        {
          v13 = 16 * v12;
          v14 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
          do
          {
            v15 = *v14;
            *v14 = 0;
            if (v15)
            {
              if (*v15 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v9);
              else
                *v15 -= 2;
            }
            v14 += 2;
            v13 -= 16;
          }
          while (v13);
        }
        v16 = *(WTF **)(v10 + 16);
        if ((WTF *)(v10 + 32) != v16 && v16 != 0)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          WTF::fastFree(v16, v9);
        }
        v18 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        WTF::fastFree((WTF *)v10, v9);
        v8 = *(_QWORD **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  return WebCore::MutableStyleProperties::setProperty((uint64_t)v8, a2, a3, a4, 0);
}

uint64_t WebCore::HTMLAttributeEquivalent::valueIsPresentInStyle(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  const WebCore::CSSLinearGradientValue **v23;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))((_QWORD *)&v21 + 1);
  WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(a3 + 8), a1[4], &v21);
  v7 = (WTF::StringImpl *)*((_QWORD *)&v21 + 1);
  v8 = (_DWORD *)v21;
  v9 = v21 == 0;
  if (*((_QWORD *)&v21 + 1))
    v10 = (_QWORD)v21 == 0;
  else
    v10 = 1;
  if (v10)
  {
LABEL_35:
    if (!v8)
      goto LABEL_10;
    goto LABEL_7;
  }
  v11 = *(unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 4) | (*(unsigned __int8 *)(*((_QWORD *)&v21 + 1) + 6) << 16);
  v12 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
  if (((v12 ^ v11) & 0x3F800) == 0)
  {
    v22 = v21;
    v23 = (const WebCore::CSSLinearGradientValue **)&v22;
    v9 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(*((uint64_t *)&v21 + 1), &v23, v6);
    goto LABEL_7;
  }
  if ((v11 & 0x3F800) == 0x1D800)
  {
    v15 = v21;
LABEL_17:
    v16 = (uint64_t)v7;
    while (*(_DWORD *)(v16 + 8) == 1)
    {
      v16 = *(_QWORD *)(v16 + 16);
      v17 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      if (((v17 ^ v12) & 0x3F800) == 0)
      {
        v22 = v15;
        goto LABEL_34;
      }
      if ((v17 & 0x3F800) != 0x1D800)
      {
        v9 = 0;
        v18 = v12 & 0x3F800;
        v12 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        v7 = (WTF::StringImpl *)v15;
        v15 = v16;
        if (v18 == 120832)
          goto LABEL_17;
        goto LABEL_35;
      }
    }
    goto LABEL_37;
  }
  if ((v12 & 0x3F800) == 0x1D800)
  {
    v5 = (WTF::StringImpl *)v21;
LABEL_25:
    v16 = (uint64_t)v5;
    while (*(_DWORD *)(v16 + 8) == 1)
    {
      v16 = *(_QWORD *)(v16 + 16);
      v19 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      if (((v19 ^ v11) & 0x3F800) == 0)
      {
        v22 = (uint64_t)v7;
LABEL_34:
        v23 = (const WebCore::CSSLinearGradientValue **)&v22;
        v9 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v16, &v23, v6);
        goto LABEL_35;
      }
      if ((v19 & 0x3F800) != 0x1D800)
      {
        v9 = 0;
        v20 = v11 & 0x3F800;
        v11 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        v5 = v7;
        v7 = (WTF::StringImpl *)v16;
        if (v20 == 120832)
          goto LABEL_25;
        goto LABEL_35;
      }
    }
LABEL_37:
    v9 = 0;
    if (!(_QWORD)v21)
      goto LABEL_10;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (*v8 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
  else
    *v8 -= 2;
LABEL_10:
  v13 = (_DWORD *)*((_QWORD *)&v21 + 1);
  *((_QWORD *)&v21 + 1) = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
    else
      *v13 -= 2;
  }
  return v9;
}

_DWORD *WebCore::HTMLAttributeEquivalent::addToStyle(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(*(_QWORD *)a1 + 56))(&v13);
  if (v13)
  {
    v9 = a1[4];
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v12, (uint64_t)v13, v6, v7, v8);
    WebCore::EditingStyle::setProperty(a3, v9, (uint64_t)&v12, 0);
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
      else
        *result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::HTMLAttributeEquivalent::attributeValueAsCSSValue@<X0>(const WebCore::QualifiedName **this@<X0>, WebCore::Element *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, _QWORD *a5@<X8>, __n128 a6@<Q0>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v18;

  result = (_QWORD *)WebCore::Element::getAttribute(a2, this[4], a3, a4, a6);
  if (*result)
  {
    v9 = (uint64_t)result;
    v10 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v10 = 0x900000001;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = v10 + 32;
    *(_QWORD *)(v10 + 24) = 4;
    WebCore::MutableStyleProperties::setProperty(v10, *((unsigned __int16 *)this + 4), v9, 0, 0);
    result = (_QWORD *)WebCore::StyleProperties::getPropertyCSSValue(v10, *((unsigned __int16 *)this + 4), a5);
    if (*(_DWORD *)v10 == 1)
    {
      v12 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v12)
      {
        v13 = 16 * v12;
        v14 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
        do
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            if (*v15 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v11);
            else
              *v15 -= 2;
          }
          v14 += 2;
          v13 -= 16;
        }
        while (v13);
      }
      v16 = *(WTF **)(v10 + 16);
      if ((WTF *)(v10 + 32) != v16 && v16 != 0)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v16, v11);
      }
      v18 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      return (_QWORD *)WTF::fastFree((WTF *)v10, v11);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebCore::HTMLFontSizeEquivalent::attributeValueAsCSSValue@<X0>(const WebCore::QualifiedName **this@<X0>, WebCore::Element *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, int **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t result;
  int *v8;
  unsigned __int16 v9;

  result = WebCore::Element::getAttribute(a2, this[4], a3, a4, a6);
  if (!*(_QWORD *)result)
  {
    *a5 = 0;
    return result;
  }
  v9 = 0;
  result = WebCore::HTMLFontElement::cssValueFromFontSizeNumber((uint64_t *)result, &v9);
  if ((_DWORD)result)
  {
    if (v9 >= 0x48EuLL)
    {
      result = 92;
      __break(0xC471u);
      return result;
    }
    v8 = &WebCore::staticCSSValuePool[4 * v9 + 3088];
    *v8 += 2;
  }
  else
  {
    v8 = 0;
  }
  *a5 = v8;
  return result;
}

unsigned int *WebCore::EditingStyle::init(uint64_t a1, WebCore *this, int a3)
{
  WebCore *v4;
  uint64_t v6;
  WebCore::Node *v7;
  WebCore *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v11;
  int v12;
  WTF::StringBuilder *v13;
  WTF::String *v14;
  __n128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD **v28;
  _DWORD *v29;
  WTF *v30;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v40;
  WTF::StringBuilder *v41;
  WTF::String *v42;
  __n128 v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::String *v46;
  __n128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::String *v55;
  uint64_t v56;
  __n128 v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringBuilder *v60;
  WTF::String *v61;
  __n128 v62;
  WTF *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned int *result;
  int v73;
  WTF::StringImpl *v74;
  WebCore::Node *v75;
  _BYTE v76[8];
  WTF::StringImpl *v77;
  char v78;
  char v79;
  WTF *v80;
  WTF::StringImpl *v81;
  char v82;

  v4 = this;
  v6 = WebCore::parentTabSpanNode(this, this);
  if (v6)
    goto LABEL_2;
  if (v4
    && (*((_WORD *)v4 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
  {
    v20 = *((_QWORD *)v4 + 13);
    if (v20)
    {
      v21 = *(_DWORD *)(v20 + 4);
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(v20 + 40);
        LODWORD(v23) = *(_DWORD *)(v20 + 52);
        if ((_DWORD)v23)
        {
LABEL_25:
          v23 = v23;
          v24 = (_QWORD *)(v22 + 8);
          while (1)
          {
            v25 = *(v24 - 1);
            if (v25 == WebCore::HTMLNames::classAttr
              || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
              && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
            {
              break;
            }
            v24 += 2;
            if (!--v23)
            {
              v24 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_114:
          v73 = MEMORY[0x19AEA53F4](*v24, "Apple-tab-span", 14);
          v6 = (uint64_t)v4;
          if (v73)
          {
LABEL_2:
            v4 = *(WebCore **)(v6 + 32);
            goto LABEL_3;
          }
          goto LABEL_3;
        }
      }
      else
      {
        v22 = v20 + 32;
        LODWORD(v23) = v21 >> 5;
        if ((_DWORD)v23)
          goto LABEL_25;
      }
    }
    v24 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_114;
  }
LABEL_3:
  v8 = WebCore::styleElementForNode(v4, v7);
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v75 = v8;
  v76[0] = 0;
  v78 = 0;
  v79 = 0;
  if ((a3 - 1) > 1)
    WebCore::ComputedStyleExtractor::copyProperties((WebCore::ComputedStyleExtractor *)&v75, (uint64_t *)&v80);
  else
    WebCore::ComputedStyleExtractor::copyProperties((uint64_t)&v75, WebCore::editingProperties, 0x16uLL, (uint64_t *)&v80);
  v10 = v80;
  v80 = 0;
  v11 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  if (v11)
  {
    v12 = *(_DWORD *)v11 - 1;
    if (*(_DWORD *)v11 != 1)
    {
LABEL_10:
      *(_DWORD *)v11 = v12;
      goto LABEL_11;
    }
    v26 = *((unsigned int *)v11 + 7);
    if ((_DWORD)v26)
    {
      v27 = 16 * v26;
      v28 = (_DWORD **)(*((_QWORD *)v11 + 2) + 8);
      do
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v9);
          else
            *v29 -= 2;
        }
        v28 += 2;
        v27 -= 16;
      }
      while (v27);
    }
    v30 = (WTF *)*((_QWORD *)v11 + 2);
    if ((WTF *)((char *)v11 + 32) != v30 && v30 != 0)
    {
      *((_QWORD *)v11 + 2) = 0;
      *((_DWORD *)v11 + 6) = 0;
      WTF::fastFree(v30, v9);
    }
    v32 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    WTF::fastFree(v11, v9);
    v11 = v80;
    v80 = 0;
    if (v11)
    {
      v12 = *(_DWORD *)v11 - 1;
      if (*(_DWORD *)v11 != 1)
        goto LABEL_10;
      v34 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v34)
      {
        v35 = 16 * v34;
        v36 = (_DWORD **)(*((_QWORD *)v11 + 2) + 8);
        do
        {
          v37 = *v36;
          *v36 = 0;
          if (v37)
          {
            if (*v37 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v33);
            else
              *v37 -= 2;
          }
          v36 += 2;
          v35 -= 16;
        }
        while (v35);
      }
      v38 = (WTF *)*((_QWORD *)v11 + 2);
      if ((WTF *)((char *)v11 + 32) != v38 && v38 != 0)
      {
        *((_QWORD *)v11 + 2) = 0;
        *((_DWORD *)v11 + 6) = 0;
        WTF::fastFree(v38, v33);
      }
      v40 = *((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      WTF::fastFree(v11, v33);
    }
  }
LABEL_11:
  if (a3 == 2)
  {
    WebCore::backgroundColorInEffect((unsigned int *)&v80, v4);
    if (v80)
    {
      v16 = *(_QWORD *)(a1 + 8);
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v74, (uint64_t)v80, v13, v14, v15);
      WebCore::MutableStyleProperties::setProperty(v16, 61, (uint64_t)&v74, 0, 0);
      v18 = v74;
      v74 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v80;
      v80 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v75, 341, 1, 0, &v80);
    if (v80)
    {
      v44 = *(_QWORD *)(a1 + 8);
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v74, (uint64_t)v80, v41, v42, v43);
      WebCore::MutableStyleProperties::setProperty(v44, 255, (uint64_t)&v74, 0, 0);
      v48 = v74;
      v74 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v45);
        else
          *(_DWORD *)v48 -= 2;
      }
      WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)0x155, 0, v46, v47);
      v50 = v80;
      v80 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v49);
          if (!v4)
            goto LABEL_96;
          goto LABEL_72;
        }
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  if (!v4)
    goto LABEL_96;
LABEL_72:
  LOBYTE(v80) = 0;
  v82 = 0;
  v52 = (*(uint64_t (**)(WebCore *, WTF **))(*(_QWORD *)v4 + 264))(v4, &v80);
  if (!v82 || (v53 = v81, v81 = 0, !v53))
  {
LABEL_76:
    if (!v52)
      goto LABEL_96;
    goto LABEL_77;
  }
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_76;
  }
  WTF::StringImpl::destroy(v53, v51);
  if (!v52)
    goto LABEL_96;
LABEL_77:
  LOBYTE(v80) = 0;
  v82 = 0;
  v56 = (*(uint64_t (**)(WebCore *, WTF **))(*(_QWORD *)v4 + 264))(v4, &v80);
  if (v82)
  {
    v58 = v81;
    v81 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v54);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  v59 = *(_QWORD *)(v56 + 24);
  if (*(_DWORD *)(v59 + 40) == 1)
  {
    WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)0x156, 0, v55, v57);
    v59 = *(_QWORD *)(v56 + 24);
  }
  if (*(_DWORD *)(v59 + 24) == 1)
    WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)0x158, 0, v55, v57);
  if ((*(_WORD *)(*(_QWORD *)(v56 + 32) + 228) & 0x78) != 0)
  {
    WebCore::ComputedStyleExtractor::getFontSizeCSSValuePreferringKeyword((WebCore::ComputedStyleExtractor *)&v75, (int **)&v80);
    v63 = v80;
    if (v80)
    {
      v64 = *(_QWORD *)(a1 + 8);
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v74, (uint64_t)v80, v60, v61, v62);
      WebCore::MutableStyleProperties::setProperty(v64, 13, (uint64_t)&v74, 0, 0);
      v66 = v74;
      v74 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v65);
        else
          *(_DWORD *)v66 -= 2;
      }
      if (*(_DWORD *)v63 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v63, v65);
      else
        *(_DWORD *)v63 -= 2;
    }
  }
LABEL_96:
  v69 = v75
     && (v67 = (*(uint64_t (**)(WebCore::Node *, _BYTE *))(*(_QWORD *)v75 + 264))(v75, v76)) != 0
     && (v68 = *(_QWORD *)(*(_QWORD *)(v67 + 32) + 216), *(_DWORD *)(v68 + 4) == 1)
     && *(_QWORD *)(v68 + 8) == WebCore::WebKitFontFamilyNames::monospaceFamily;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFE | v69;
  WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)a1);
  if (v78)
  {
    v71 = v77;
    v77 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v70);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  result = (unsigned int *)v75;
  v75 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v70);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::EditingStyle *WebCore::EditingStyle::EditingStyle(WebCore::EditingStyle *this, const WebCore::CSSStyleDeclaration *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WTF *v23;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) &= 0xE0u;
  *((_DWORD *)this + 5) = WebCore::EditingStyle::NoFontDelta;
  if (a2)
  {
    (*(void (**)(WTF **__return_ptr, const WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 160))(&v23, a2);
    v4 = v23;
    v23 = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 1;
      if (*(_DWORD *)v5 != 1)
      {
LABEL_4:
        *(_DWORD *)v5 = v6;
        goto LABEL_5;
      }
      v8 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v8)
      {
        v9 = 16 * v8;
        v10 = (_DWORD **)(*((_QWORD *)v5 + 2) + 8);
        do
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*v11 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v3);
            else
              *v11 -= 2;
          }
          v10 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      v12 = (WTF *)*((_QWORD *)v5 + 2);
      if ((WTF *)((char *)v5 + 32) != v12 && v12 != 0)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v12, v3);
      }
      v14 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      WTF::fastFree(v5, v3);
      v5 = v23;
      v23 = 0;
      if (v5)
      {
        v6 = *(_DWORD *)v5 - 1;
        if (*(_DWORD *)v5 != 1)
          goto LABEL_4;
        v16 = *((unsigned int *)v5 + 7);
        if ((_DWORD)v16)
        {
          v17 = 16 * v16;
          v18 = (_DWORD **)(*((_QWORD *)v5 + 2) + 8);
          do
          {
            v19 = *v18;
            *v18 = 0;
            if (v19)
            {
              if (*v19 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v15);
              else
                *v19 -= 2;
            }
            v18 += 2;
            v17 -= 16;
          }
          while (v17);
        }
        v20 = (WTF *)*((_QWORD *)v5 + 2);
        if ((WTF *)((char *)v5 + 32) != v20 && v20 != 0)
        {
          *((_QWORD *)v5 + 2) = 0;
          *((_DWORD *)v5 + 6) = 0;
          WTF::fastFree(v20, v15);
        }
        v22 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        WTF::fastFree(v5, v15);
      }
    }
  }
LABEL_5:
  WebCore::EditingStyle::extractFontSizeDelta(this);
  return this;
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WTF *v23;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) &= 0xE0u;
  *((_DWORD *)this + 5) = WebCore::EditingStyle::NoFontDelta;
  if (a2)
  {
    (*(void (**)(WTF **__return_ptr, const WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 160))(&v23, a2);
    v4 = v23;
    v23 = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 1;
      if (*(_DWORD *)v5 != 1)
      {
LABEL_4:
        *(_DWORD *)v5 = v6;
        goto LABEL_5;
      }
      v8 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v8)
      {
        v9 = 16 * v8;
        v10 = (_DWORD **)(*((_QWORD *)v5 + 2) + 8);
        do
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*v11 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v3);
            else
              *v11 -= 2;
          }
          v10 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      v12 = (WTF *)*((_QWORD *)v5 + 2);
      if ((WTF *)((char *)v5 + 32) != v12 && v12 != 0)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v12, v3);
      }
      v14 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      WTF::fastFree(v5, v3);
      v5 = v23;
      v23 = 0;
      if (v5)
      {
        v6 = *(_DWORD *)v5 - 1;
        if (*(_DWORD *)v5 != 1)
          goto LABEL_4;
        v16 = *((unsigned int *)v5 + 7);
        if ((_DWORD)v16)
        {
          v17 = 16 * v16;
          v18 = (_DWORD **)(*((_QWORD *)v5 + 2) + 8);
          do
          {
            v19 = *v18;
            *v18 = 0;
            if (v19)
            {
              if (*v19 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v15);
              else
                *v19 -= 2;
            }
            v18 += 2;
            v17 -= 16;
          }
          while (v17);
        }
        v20 = (WTF *)*((_QWORD *)v5 + 2);
        if ((WTF *)((char *)v5 + 32) != v20 && v20 != 0)
        {
          *((_QWORD *)v5 + 2) = 0;
          *((_DWORD *)v5 + 6) = 0;
          WTF::fastFree(v20, v15);
        }
        v22 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        WTF::fastFree(v5, v15);
      }
    }
  }
LABEL_5:
  WebCore::EditingStyle::extractFontSizeDelta(this);
  return this;
}

uint64_t WebCore::EditingStyle::extractFontSizeDelta(WebCore::EditingStyle *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::String *v4;
  __n128 v5;
  WTF::StringImpl *v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  double v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;

  result = *((_QWORD *)this + 1);
  if (!result)
    return result;
  WebCore::StyleProperties::getPropertyCSSValue(result, 13, &v17);
  if (!v17)
  {
    result = WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)this + 1), 320, &v16);
    v9 = v16;
    if (!v16)
      return result;
    if (((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) & 0x3F800) != 0)
    {
      v12 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, v6);
      goto LABEL_23;
    }
    result = *(_WORD *)(v16 + 4) & 0x7F;
    if ((result - 63) > 0x11 || ((1 << ((*(_WORD *)(v16 + 4) & 0x7F) - 63)) & 0x34001) == 0)
    {
      if ((_DWORD)result == 73)
      {
        result = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8);
        v13 = *(unsigned __int8 *)(result + 12);
        if (v13 != 1 && (v13 - 5) > 3)
          goto LABEL_22;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
      }
      if ((_DWORD)result == 6)
      {
        if ((*(_WORD *)(v9 + 4) & 0x7F) == 0x49)
        {
          v14 = *(_QWORD *)(v9 + 8);
          v17 = 0;
          v11 = WebCore::CSSCalcValue::doubleValue(v14, (uint64_t)&v17);
          if (v17)
            WTF::fastFree((WTF *)(v17 - 4), v15);
        }
        else
        {
          v11 = *(double *)(v9 + 8);
        }
        v8.n128_u32[1] = 1206910975;
        if (v11 >= 3.40282347e38)
        {
          v8.n128_u32[0] = 2139095039;
        }
        else
        {
          v8.n128_u32[0] = -8388609;
          if (v11 > -3.40282347e38)
            v8.n128_f32[0] = v11;
        }
        *((_DWORD *)this + 5) = v8.n128_u32[0];
        result = WebCore::MutableStyleProperties::removeProperty(*((_QWORD *)this + 1), (WTF::StringImpl *)0x140, 0, v7, v8);
      }
    }
LABEL_22:
    v12 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v6);
LABEL_23:
    *(_DWORD *)v9 = v12;
    return result;
  }
  if (*v17 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v3);
  else
    *v17 -= 2;
  return WebCore::MutableStyleProperties::removeProperty(*((_QWORD *)this + 1), (WTF::StringImpl *)0x140, 0, v4, v5);
}

WebCore::EditingStyle *WebCore::EditingStyle::EditingStyle(WebCore::EditingStyle *this, const WebCore::StyleProperties *a2)
{
  WebCore::MutableStyleProperties *v4;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v15;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) &= 0xE0u;
  *((_DWORD *)this + 5) = WebCore::EditingStyle::NoFontDelta;
  if (a2)
  {
    v4 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    v5 = WebCore::MutableStyleProperties::MutableStyleProperties(v4, a2);
    v7 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        v9 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v9)
        {
          v10 = 16 * v9;
          v11 = (_DWORD **)(*(_QWORD *)(v7 + 16) + 8);
          do
          {
            v12 = *v11;
            *v11 = 0;
            if (v12)
            {
              if (*v12 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v6);
              else
                *v12 -= 2;
            }
            v11 += 2;
            v10 -= 16;
          }
          while (v10);
        }
        v13 = *(WTF **)(v7 + 16);
        if ((WTF *)(v7 + 32) != v13 && v13 != 0)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          WTF::fastFree(v13, v6);
        }
        v15 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        WTF::fastFree((WTF *)v7, v6);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  WebCore::EditingStyle::extractFontSizeDelta(this);
  return this;
}

void WebCore::EditingStyle::~EditingStyle(WebCore::EditingStyle *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 28);
      if ((_DWORD)v3)
      {
        v4 = 16 * v3;
        v5 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
        do
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
            else
              *v6 -= 2;
          }
          v5 += 2;
          v4 -= 16;
        }
        while (v4);
      }
      v7 = *(WTF **)(v2 + 16);
      if ((WTF *)(v2 + 32) != v7 && v7 != 0)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      v9 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 28);
      if ((_DWORD)v3)
      {
        v4 = 16 * v3;
        v5 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
        do
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
            else
              *v6 -= 2;
          }
          v5 += 2;
          v4 -= 16;
        }
        while (v4);
      }
      v7 = *(WTF **)(v2 + 16);
      if ((WTF *)(v2 + 32) != v7 && v7 != 0)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      v9 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

unsigned int *WebCore::backgroundColorInEffect(unsigned int *this, WebCore::Node *a2)
{
  unsigned int *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  WebCore *v5;
  WTF::StringImpl *v6;
  WebCore::Node *v7;
  int v8;
  uint64_t v9;
  WebCore::Node *v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;

  v2 = this;
  if (!a2)
  {
LABEL_38:
    *(_QWORD *)v2 = 0;
    return this;
  }
  v3 = a2;
  *((_DWORD *)a2 + 6) += 2;
  while (1)
  {
    v4 = v3;
    v5 = WebCore::styleElementForNode(v3, a2);
    if (v5)
      *((_DWORD *)v5 + 6) += 2;
    v10 = v5;
    v11 = 0;
    v13 = 0;
    v14 = 0;
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v10, 61, 1, 0, v2);
    if (v13)
    {
      v6 = v12;
      v12 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, a2);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    this = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
      break;
    *(_QWORD *)v2 = 0;
LABEL_23:
    v3 = (WebCore::Node *)*((_QWORD *)v3 + 4);
    if (v3)
      *((_DWORD *)v3 + 6) += 2;
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(v4, a2);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    if (!v3)
      goto LABEL_38;
  }
  v8 = (*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F87F;
  if (v8 == 24)
  {
    v9 = *((_QWORD *)this + 1);
    if ((v9 & 0x8000000000000) != 0)
    {
      if (*(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        goto LABEL_35;
    }
    else if (*((_QWORD *)this + 1))
    {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  if (v8 == 80 && *((_WORD *)this + 4) == 125)
  {
LABEL_20:
    *(_QWORD *)v2 = 0;
    if (*this == 2)
      this = (unsigned int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, a2);
    else
      *this -= 2;
    goto LABEL_23;
  }
LABEL_35:
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v3, a2);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return this;
}

WebCore::MutableStyleProperties *WebCore::EditingStyle::mergeStyle(WebCore::MutableStyleProperties *this, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned int *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  WTF *v18;
  _DWORD *v19;
  WebCore::MutableStyleProperties *v20;
  __int16 v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD **v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  unint64_t v36;
  WTF *v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  WebCore::MutableStyleProperties *v49;
  __int16 v50;
  unsigned int v51;
  _DWORD *v52;
  _DWORD *v53;
  WTF *v54;
  uint64_t v55;
  _DWORD *v56;
  WTF *v57;
  WTF *v59;
  uint64_t v60;
  _DWORD *v61;
  WTF *v62;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF *v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  WTF *v73;
  void *v74;
  float v75;
  WebCore::MutableStyleProperties *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD **v81;
  _DWORD *v82;
  WTF *v83;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  int v89;
  unsigned int v90;
  _BYTE v91[32];
  _DWORD *v92;
  _DWORD *v93;
  WTF *v94;
  uint64_t v95;
  _BYTE v96[32];
  uint64_t v97;

  if (a2)
  {
    v4 = (uint64_t)this;
    if (*((_QWORD *)this + 1))
    {
      v6 = 0;
      v7 = a2 + 8;
      while (1)
      {
        v8 = *(unsigned int *)(a2 + 4);
        if ((v8 & 8) != 0)
        {
          if (*(_DWORD *)(a2 + 28) <= v6)
          {
LABEL_151:
            v75 = *(float *)(v4 + 20);
            this = (WebCore::MutableStyleProperties *)WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v4);
            *(float *)(v4 + 20) = *(float *)(v4 + 20) + (float)(int)v75;
            return this;
          }
          v9 = (unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 16 * v6);
          v11 = *((_QWORD *)v9 + 1);
        }
        else
        {
          if (v6 >= v8 >> 4)
            goto LABEL_151;
          v9 = (unsigned __int16 *)(v7 + 2 * v6);
          v10 = (unsigned int *)(v7 + 5 * v6 + ((v8 >> 3) & 0x1FFFFFFE));
          v11 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        }
        WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v4 + 8), *v9 & 0x3FF, &v97);
        v13 = *v9 & 0x3FF;
        if (v13 != 341 && v13 != 255)
          goto LABEL_22;
        v14 = v97;
        if (!v97)
          goto LABEL_22;
        if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0x1D800 || v11 == 0)
          goto LABEL_22;
        if (((*(unsigned __int16 *)(v97 + 4) | (*(unsigned __int8 *)(v97 + 6) << 16)) & 0x3F800) == 0x1D800)
        {
          v94 = (WTF *)v96;
          v95 = 4;
          v16 = *(unsigned int *)(v97 + 8);
          if (v16 >= 5)
          {
            if (v16 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195AAD874);
            }
            v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16));
            LODWORD(v95) = v16;
            v94 = v18;
            v17 = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 8);
            if ((_DWORD)v16)
            {
LABEL_33:
              v23 = 0;
              v24 = 0;
              v25 = *(_QWORD *)(v14 + 48);
              v26 = HIDWORD(v95);
              do
              {
                if (v23 > 3)
                {
                  if (v16 <= v23)
                    goto LABEL_176;
                  v27 = (_DWORD **)(v25 + 8 * (v24 - 4));
                }
                else
                {
                  v27 = (_DWORD **)(v14 + 16 + 8 * v24);
                }
                v28 = *v27;
                *v28 += 2;
                *((_QWORD *)v18 + v26++) = v28;
                HIDWORD(v95) = v26;
                v23 = v24 + 1;
                v24 = (v24 + 1);
              }
              while ((_DWORD)v16 != v23);
            }
          }
          else
          {
            v17 = 4;
            v18 = (WTF *)v96;
            if ((_DWORD)v16)
              goto LABEL_33;
          }
          v29 = *(_DWORD *)(v11 + 8);
          if (v29)
          {
            v30 = 0;
            v31 = 0;
            v32 = v11 + 16;
            while (1)
            {
              if (v30 > 3)
              {
                if (v29 <= v30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195AAD84CLL);
                }
                v33 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 8 * (v31 - 4));
              }
              else
              {
                v33 = (uint64_t *)(v32 + 8 * v31);
              }
              v34 = *v33;
              if (((*(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16)) & 0x3F800) == 0
                && (*(_WORD *)(v34 + 4) & 0x7F) == 0x50
                && *(_WORD *)(v34 + 8) == 495)
              {
                break;
              }
              v30 = v31 + 1;
              v31 = (v31 + 1);
              if (v29 == v30)
                goto LABEL_60;
            }
            v35 = v94;
            v36 = HIDWORD(v95);
            if (HIDWORD(v95))
            {
              v37 = v94;
              v38 = HIDWORD(v95);
              while (((*(unsigned __int16 *)(*(_QWORD *)v37 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v37 + 6) << 16)) & 0x3F800) != 0
                   || (*(_WORD *)(*(_QWORD *)v37 + 4) & 0x7F) != 0x50
                   || *(_WORD *)(*(_QWORD *)v37 + 8) != 495)
              {
                v37 = (WTF *)((char *)v37 + 8);
                if (!--v38)
                  goto LABEL_57;
              }
            }
            else
            {
LABEL_57:
              WebCore::staticCSSValuePool[5068] += 2;
              if ((_DWORD)v36 == v17)
              {
                v86 = v35;
                v65 = v36 + (v36 >> 2);
                v66 = v65 >= 0x10 ? v65 + 1 : 16;
                v67 = v66 <= v36 + 1 ? v36 + 1 : v66;
                if (v67 < 5)
                {
                  v68 = (WTF *)v96;
                  v94 = (WTF *)v96;
                  LODWORD(v95) = 4;
                }
                else
                {
                  if (v67 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195AAD87CLL);
                  }
                  v68 = (WTF *)WTF::fastMalloc((WTF *)(8 * v67));
                  LODWORD(v95) = v67;
                  v94 = v68;
                }
                memcpy(v68, v86, 8 * v36);
                if (v96 != (_BYTE *)v86 && v86)
                {
                  if (v94 == v86)
                  {
                    v94 = 0;
                    LODWORD(v95) = 0;
                  }
                  WTF::fastFree(v86, v69);
                }
                LODWORD(v36) = HIDWORD(v95);
                v39 = (_QWORD *)((char *)v94 + 8 * HIDWORD(v95));
                v29 = *(_DWORD *)(v11 + 8);
              }
              else
              {
                v39 = (_QWORD *)((char *)v35 + 8 * v36);
              }
              *v39 = &WebCore::staticCSSValuePool[5068];
              HIDWORD(v95) = v36 + 1;
            }
LABEL_60:
            if (v29)
            {
              v40 = 0;
              v41 = 0;
              while (1)
              {
                if (v40 > 3)
                {
                  if (v29 <= v40)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195AAD86CLL);
                  }
                  v42 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 8 * (v41 - 4));
                }
                else
                {
                  v42 = (uint64_t *)(v32 + 8 * v41);
                }
                v43 = *v42;
                if (((*(unsigned __int16 *)(v43 + 4) | (*(unsigned __int8 *)(v43 + 6) << 16)) & 0x3F800) == 0
                  && (*(_WORD *)(v43 + 4) & 0x7F) == 0x50
                  && *(_WORD *)(v43 + 8) == 474)
                {
                  break;
                }
                v40 = v41 + 1;
                v41 = (v41 + 1);
                if (v29 == v40)
                  goto LABEL_80;
              }
              v44 = v94;
              v45 = HIDWORD(v95);
              if (HIDWORD(v95))
              {
                v46 = 0;
                do
                {
                  v47 = *(_QWORD *)((char *)v94 + v46);
                  if (((*(unsigned __int16 *)(v47 + 4) | (*(unsigned __int8 *)(v47 + 6) << 16)) & 0x3F800) == 0
                    && (*(_WORD *)(v47 + 4) & 0x7F) == 0x50
                    && *(_WORD *)(v47 + 8) == 474)
                  {
                    goto LABEL_81;
                  }
                  v46 += 8;
                }
                while (8 * HIDWORD(v95) != v46);
              }
              WebCore::staticCSSValuePool[4984] += 2;
              if ((_DWORD)v45 == (_DWORD)v95)
              {
                v87 = v44;
                v70 = v45 + (v45 >> 2);
                if (v70 >= 0x10)
                  v71 = v70 + 1;
                else
                  v71 = 16;
                if (v71 <= v45 + 1)
                  v72 = v45 + 1;
                else
                  v72 = v71;
                if (v72 < 5)
                {
                  v73 = (WTF *)v96;
                  v94 = (WTF *)v96;
                  LODWORD(v95) = 4;
                }
                else
                {
                  if (v72 >> 29)
                  {
LABEL_176:
                    __break(0xC471u);
                    JUMPOUT(0x195AAD82CLL);
                  }
                  v73 = (WTF *)WTF::fastMalloc((WTF *)(8 * v72));
                  LODWORD(v95) = v72;
                  v94 = v73;
                }
                memcpy(v73, v87, 8 * v45);
                if (v96 != (_BYTE *)v87 && v87)
                {
                  if (v94 == v87)
                  {
                    v94 = 0;
                    LODWORD(v95) = 0;
                  }
                  WTF::fastFree(v87, v74);
                }
                LODWORD(v45) = HIDWORD(v95);
                v48 = (_QWORD *)((char *)v94 + 8 * HIDWORD(v95));
              }
              else
              {
                v48 = (_QWORD *)((char *)v44 + 8 * v45);
              }
              *v48 = &WebCore::staticCSSValuePool[4984];
              HIDWORD(v95) = v45 + 1;
            }
          }
LABEL_80:
          v44 = v94;
LABEL_81:
          v49 = *(WebCore::MutableStyleProperties **)(v4 + 8);
          v50 = *v9;
          v88 = (WTF *)v91;
          v89 = 4;
          if (v44 == (WTF *)v96)
          {
            v51 = HIDWORD(v95);
            memcpy(v91, v96, 8 * HIDWORD(v95));
          }
          else
          {
            v94 = (WTF *)v96;
            v88 = v44;
            v64 = v95;
            v51 = HIDWORD(v95);
            LODWORD(v95) = 4;
            v89 = v64;
          }
          HIDWORD(v95) = 0;
          v90 = v51;
          WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v88, (uint64_t *)&v92);
          v52 = v92;
          v92 = 0;
          v93 = v52;
          WebCore::MutableStyleProperties::setProperty(v49, v50 & 0x3FF, &v93, (*v9 >> 13) & 1);
          v53 = v93;
          v93 = 0;
          if (v53)
          {
            if (*v53 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v12);
            else
              *v53 -= 2;
          }
          if (v90)
          {
            v54 = v88;
            v55 = 8 * v90;
            do
            {
              v56 = *(_DWORD **)v54;
              *(_QWORD *)v54 = 0;
              if (v56)
              {
                if (*v56 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v12);
                else
                  *v56 -= 2;
              }
              v54 = (WTF *)((char *)v54 + 8);
              v55 -= 8;
            }
            while (v55);
          }
          v57 = v88;
          if (v91 != (_BYTE *)v88 && v88 != 0)
          {
            v88 = 0;
            v89 = 0;
            WTF::fastFree(v57, v12);
          }
          if (HIDWORD(v95))
          {
            v59 = v94;
            v60 = 8 * HIDWORD(v95);
            do
            {
              v61 = *(_DWORD **)v59;
              *(_QWORD *)v59 = 0;
              if (v61)
              {
                if (*v61 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v12);
                else
                  *v61 -= 2;
              }
              v59 = (WTF *)((char *)v59 + 8);
              v60 -= 8;
            }
            while (v60);
          }
          v62 = v94;
          if (v96 != (_BYTE *)v94 && v94 != 0)
          {
            v94 = 0;
            LODWORD(v95) = 0;
            WTF::fastFree(v62, v12);
          }
          goto LABEL_113;
        }
        v97 = 0;
        if (*(_DWORD *)v14 != 2)
          break;
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, v12);
        if (!a3)
          goto LABEL_25;
LABEL_23:
        if (a3 != 1)
          goto LABEL_113;
        v19 = (_DWORD *)v97;
        if (!v97)
        {
LABEL_25:
          v20 = *(WebCore::MutableStyleProperties **)(v4 + 8);
          v21 = *v9;
          if (v11)
            *(_DWORD *)v11 += 2;
          v94 = (WTF *)v11;
          WebCore::MutableStyleProperties::setProperty(v20, v21 & 0x3FF, (_DWORD **)&v94, (*v9 >> 13) & 1);
          v22 = v94;
          v94 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v12);
            else
              *(_DWORD *)v22 -= 2;
          }
LABEL_113:
          v19 = (_DWORD *)v97;
          if (!v97)
            goto LABEL_117;
        }
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v12);
        else
          *v19 -= 2;
LABEL_117:
        v6 = (v6 + 1);
      }
      *(_DWORD *)v14 -= 2;
LABEL_22:
      if (!a3)
        goto LABEL_25;
      goto LABEL_23;
    }
    v76 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    this = WebCore::MutableStyleProperties::MutableStyleProperties(v76, (const WebCore::StyleProperties *)a2);
    v78 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = this;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
      {
        v79 = *(unsigned int *)(v78 + 28);
        if ((_DWORD)v79)
        {
          v80 = 16 * v79;
          v81 = (_DWORD **)(*(_QWORD *)(v78 + 16) + 8);
          do
          {
            v82 = *v81;
            *v81 = 0;
            if (v82)
            {
              if (*v82 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, v77);
              else
                *v82 -= 2;
            }
            v81 += 2;
            v80 -= 16;
          }
          while (v80);
        }
        v83 = *(WTF **)(v78 + 16);
        if ((WTF *)(v78 + 32) != v83 && v83 != 0)
        {
          *(_QWORD *)(v78 + 16) = 0;
          *(_DWORD *)(v78 + 24) = 0;
          WTF::fastFree(v83, v77);
        }
        v85 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        if (v85)
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
        return (WebCore::MutableStyleProperties *)WTF::fastFree((WTF *)v78, v77);
      }
      else
      {
        --*(_DWORD *)v78;
      }
    }
  }
  return this;
}

uint64_t WebCore::EditingStyle::prepareToApplyAt(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  WTF::String *v22;
  __n128 v23;
  int v24;
  void *v25;
  WTF::String *v26;
  __n128 v27;
  _BOOL4 v28;
  void *v29;
  WTF::String *v30;
  __n128 v31;
  _BOOL4 v32;
  WTF::StringImpl *v33;
  WTF::String *v34;
  __n128 v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  WTF::StringBuilder *v40;
  WTF::String *v41;
  __n128 v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  WTF::StringBuilder *v47;
  WTF::StringImpl *v48;
  int v49;
  _DWORD *v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD **v55;
  _DWORD *v56;
  WTF *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD **v63;
  _DWORD *v64;
  WTF *v65;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD **v91;
  _DWORD *v92;
  WTF *v93;
  uint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v99;
  unsigned int v100;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  WTF::StringImpl *v120;

  v3 = *(_QWORD *)(result + 8);
  if (!v3)
    return result;
  v6 = result;
  ++*(_DWORD *)v3;
  v7 = WTF::fastMalloc((WTF *)0x18);
  v8 = (WTF *)v7;
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) &= 0xE0u;
  *(_DWORD *)(v7 + 20) = WebCore::EditingStyle::NoFontDelta;
  v9 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::EditingStyle::init(v7, (WebCore *)v9, 2);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  else
  {
    WebCore::EditingStyle::init(v7, 0, 2);
  }
  v11 = *((_QWORD *)v8 + 1);
  if (v11)
    ++*(_DWORD *)v11;
  if (a3)
  {
    LOWORD(v12) = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v12 = WebCore::StyleProperties::propertyAsValueID(v3, (WTF::StringImpl *)0x11D);
    v16 = WebCore::StyleProperties::propertyAsValueID(v3, (WTF::StringImpl *)6);
    v14 = v16;
    v13 = BYTE2(v12);
    v15 = BYTE2(v16);
  }
  WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>(v6, v11);
  v17 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v3, 249);
  v18 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v3, 6);
  v19 = 260;
  switch(v17)
  {
    case 258:
    case 262:
      v19 = 258;
      break;
    case 259:
    case 263:
      v19 = 259;
      break;
    case 260:
    case 264:
      break;
    case 261:
      v19 = 261;
      break;
    default:
      if (v17 == 500 || v17 == 501)
      {
        if (v18 == 434)
          v19 = 259;
        else
          v19 = 258;
      }
      else
      {
        v19 = 0;
      }
      break;
  }
  v20 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v11, 249);
  v21 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v11, 6);
  v24 = 260;
  switch(v20)
  {
    case 258:
    case 262:
      v24 = 258;
      break;
    case 259:
    case 263:
      v24 = 259;
      break;
    case 260:
    case 264:
      break;
    case 261:
      v24 = 261;
      break;
    default:
      if (v20 == 500 || v20 == 501)
      {
        if (v21 == 434)
          v24 = 259;
        else
          v24 = 258;
      }
      else
      {
        v24 = 0;
      }
      break;
  }
  if (v19 == v24)
    WebCore::MutableStyleProperties::removeProperty(v3, (WTF::StringImpl *)0xF9, 0, v22, v23);
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v120, v3);
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v119, v11);
  if (((unint64_t)v120 & 0x8000000000000) == 0)
  {
    if ((v119 & 0x8000000000000) == 0 && (_DWORD)v120 == (_DWORD)v119)
    {
      v28 = ((v119 ^ (unint64_t)v120) & 0xFE000000000000) == 0;
      goto LABEL_36;
    }
    if ((v119 & 0x8000000000000) != 0)
    {
      v28 = 0;
      v96 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
      goto LABEL_199;
    }
LABEL_182:
    v28 = 0;
    goto LABEL_36;
  }
  if ((v119 & 0x8000000000000) == 0)
    goto LABEL_182;
  v27.n128_u32[0] = *(_DWORD *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 0x10);
  v96 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
  if (*(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 4))
  {
    if (*(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 8))
    {
      if (*(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 0xC))
        v28 = v27.n128_f32[0] == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 0x10)
           && ((v119 ^ (unint64_t)v120) & 0xFE000000000000) == 0
           && (unint64_t)v120 >> 56 == HIBYTE(v119);
      else
        v28 = 0;
    }
    else
    {
      v28 = 0;
    }
  }
  else
  {
    v28 = 0;
  }
  do
  {
LABEL_199:
    v99 = __ldaxr(v96);
    v100 = v99 - 1;
  }
  while (__stlxr(v100, v96));
  if (!v100)
  {
    atomic_store(1u, v96);
    WTF::fastFree((WTF *)v96, v25);
  }
LABEL_36:
  if (((unint64_t)v120 & 0x8000000000000) != 0)
  {
    v104 = (unsigned int *)((unint64_t)v120 & 0xFFFFFFFFFFFFLL);
    do
    {
      v105 = __ldaxr(v104);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, v104));
    if (!v106)
    {
      atomic_store(1u, v104);
      WTF::fastFree((WTF *)v104, v25);
    }
  }
  if (v28)
    WebCore::MutableStyleProperties::removeProperty(v3, (WTF::StringImpl *)5, 0, v26, v27);
  WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v120, v3);
  WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v119, v11);
  if (((unint64_t)v120 & 0x8000000000000) == 0)
  {
    if ((v119 & 0x8000000000000) == 0 && (_DWORD)v120 == (_DWORD)v119)
    {
      v32 = ((v119 ^ (unint64_t)v120) & 0xFE000000000000) == 0;
      goto LABEL_43;
    }
    if ((v119 & 0x8000000000000) != 0)
    {
      v32 = 0;
      v97 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
      goto LABEL_213;
    }
LABEL_184:
    v32 = 0;
    goto LABEL_43;
  }
  if ((v119 & 0x8000000000000) == 0)
    goto LABEL_184;
  v31.n128_u32[0] = *(_DWORD *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 0x10);
  v97 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
  v32 = *(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 4)
     && *(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 8)
     && *(float *)(((unint64_t)v120 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 0xC)
     && v31.n128_f32[0] == *(float *)((v119 & 0xFFFFFFFFFFFFLL) + 0x10)
     && ((v119 ^ (unint64_t)v120) & 0xFE000000000000) == 0
     && (unint64_t)v120 >> 56 == HIBYTE(v119);
  do
  {
LABEL_213:
    v102 = __ldaxr(v97);
    v103 = v102 - 1;
  }
  while (__stlxr(v103, v97));
  if (!v103)
  {
    atomic_store(1u, v97);
    WTF::fastFree((WTF *)v97, v29);
  }
LABEL_43:
  if (((unint64_t)v120 & 0x8000000000000) != 0)
  {
    v107 = (unsigned int *)((unint64_t)v120 & 0xFFFFFFFFFFFFLL);
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
    {
      atomic_store(1u, v107);
      WTF::fastFree((WTF *)v107, v29);
    }
  }
  if (v32)
    WebCore::MutableStyleProperties::removeProperty(v3, (WTF::StringImpl *)0x53, 0, v30, v31);
  WebCore::StyleProperties::getPropertyCSSValue(v3, 61, &v120);
  if (!v120)
    goto LABEL_91;
  v36 = (*((unsigned __int16 *)v120 + 2) | (*((unsigned __int8 *)v120 + 6) << 16)) & 0x3F87F;
  if (v36 == 24)
  {
    v37 = *((_QWORD *)v120 + 1);
    if ((v37 & 0x8000000000000) != 0)
    {
      v35.n128_u32[0] = *(_DWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10);
      v38 = v35.n128_f32[0] > 0.0;
    }
    else
    {
      v38 = *((_QWORD *)v120 + 1) != 0;
    }
    v39 = !v38;
  }
  else
  {
    if (v36 != 80)
    {
      if (*(_DWORD *)v120 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v33);
      else
        *(_DWORD *)v120 -= 2;
      goto LABEL_61;
    }
    v39 = *((unsigned __int16 *)v120 + 4) == 125;
  }
  if (*(_DWORD *)v120 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v33);
    if (v39)
      goto LABEL_91;
  }
  else
  {
    *(_DWORD *)v120 -= 2;
    if (v39)
      goto LABEL_91;
  }
LABEL_61:
  WebCore::StyleProperties::getPropertyCSSValue(v3, 61, &v117);
  if (v117 && (v43 = *(unsigned __int16 *)(v117 + 4) | (*(unsigned __int8 *)(v117 + 6) << 16), (v43 & 0x3F800) == 0))
  {
    if ((v43 & 0x3F87F) == 0x18)
    {
      v68 = *(_QWORD *)(v117 + 8);
      v118 = v68;
      if ((v68 & 0x8000000000000) != 0)
      {
        v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 + 1, v69));
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v120, v117, v40, v41, v42);
      WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v120, 0, (uint64_t *)&v118, v74, v75, v76, v77, v78, v79);
      v81 = v120;
      v120 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v80);
        else
          *(_DWORD *)v81 -= 2;
      }
    }
  }
  else
  {
    v118 = 0x1104000000000000;
  }
  v44 = *a2;
  if (*a2)
  {
    v45 = *((_BYTE *)a2 + 12) & 7;
    v46 = 1;
    if (v45 > 4)
    {
      v44 = 0;
    }
    else if (((1 << v45) & 0x19) != 0 || (v44 = *(_QWORD *)(v44 + 32)) != 0)
    {
      v46 = 0;
      *(_DWORD *)(v44 + 24) += 2;
    }
  }
  else
  {
    v46 = 1;
  }
  WebCore::backgroundColorInEffect((unsigned int *)&v119, (WebCore::Node *)v44);
  v48 = (WTF::StringImpl *)v119;
  if (v119 && (v49 = *(unsigned __int16 *)(v119 + 4) | (*(unsigned __int8 *)(v119 + 6) << 16), (v49 & 0x3F800) == 0))
  {
    if ((v49 & 0x3F87F) == 0x18)
    {
      v71 = *(_QWORD *)(v119 + 8);
      v116 = v71;
      if ((v71 & 0x8000000000000) != 0)
      {
        v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 + 1, v72));
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v120, v119, v47, v34, v35);
      WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v120, 0, (uint64_t *)&v116, v82, v83, v84, v85, v86, v87);
      v88 = v120;
      v120 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v48);
        else
          *(_DWORD *)v88 -= 2;
      }
    }
  }
  else
  {
    v116 = 0x1104000000000000;
  }
  v50 = (_DWORD *)v119;
  v119 = 0;
  if (v50)
  {
    if (*v50 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v48);
    else
      *v50 -= 2;
  }
  if ((v118 & 0x8000000000000) != 0)
  {
    if ((v116 & 0x8000000000000) == 0)
    {
      v52 = 0;
      goto LABEL_83;
    }
    v35.n128_u32[0] = *(_DWORD *)((v118 & 0xFFFFFFFFFFFFLL) + 0x10);
    v113 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v118 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v116 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v118 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v116 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v118 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v116 & 0xFFFFFFFFFFFFLL) + 0xC)
      && v35.n128_f32[0] == *(float *)((v116 & 0xFFFFFFFFFFFFLL) + 0x10))
    {
      v52 = HIBYTE(v118) == HIBYTE(v116) && BYTE6(v118) == BYTE6(v116);
    }
    else
    {
      v52 = 0;
    }
  }
  else
  {
    v52 = (v116 & 0x8000000000000) == 0 && v118 == v116;
    if ((v116 & 0x8000000000000) == 0)
      goto LABEL_83;
    v52 = 0;
    v113 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFLL);
  }
  do
  {
    v114 = __ldaxr(v113);
    v115 = v114 - 1;
  }
  while (__stlxr(v115, v113));
  if (!v115)
  {
    atomic_store(1u, v113);
    WTF::fastFree((WTF *)v113, v48);
  }
LABEL_83:
  if ((v46 & 1) == 0)
  {
    if (*(_DWORD *)(v44 + 24) == 2)
    {
      if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v44, v48);
    }
    else
    {
      *(_DWORD *)(v44 + 24) -= 2;
    }
  }
  if ((v118 & 0x8000000000000) != 0)
  {
    v110 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
    do
    {
      v111 = __ldaxr(v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v110));
    if (!v112)
    {
      atomic_store(1u, v110);
      WTF::fastFree((WTF *)v110, v48);
    }
  }
  result = v117;
  if (!v117)
  {
LABEL_90:
    if (!v52)
      goto LABEL_92;
    goto LABEL_91;
  }
  if (*(_DWORD *)v117 != 2)
  {
    *(_DWORD *)v117 -= 2;
    goto LABEL_90;
  }
  result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v117, v48);
  if (v52)
LABEL_91:
    result = WebCore::MutableStyleProperties::removeProperty(v3, (WTF::StringImpl *)0x3D, 0, v34, v35);
LABEL_92:
  if (v13)
  {
    result = WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v3, 285, (unsigned __int16)v12, 0);
    if (v15)
      result = WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v3, 6, v14, 0);
  }
  if (*(_DWORD *)v11 == 1)
  {
    v53 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v53)
    {
      v54 = 16 * v53;
      v55 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8);
      do
      {
        v56 = *v55;
        *v55 = 0;
        if (v56)
        {
          if (*v56 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v48);
          else
            *v56 -= 2;
        }
        v55 += 2;
        v54 -= 16;
      }
      while (v54);
    }
    v57 = *(WTF **)(v11 + 16);
    if ((WTF *)(v11 + 32) != v57 && v57 != 0)
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v57, v48);
    }
    v59 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    result = WTF::fastFree((WTF *)v11, v48);
  }
  else
  {
    --*(_DWORD *)v11;
  }
  if (*(_DWORD *)v8 == 1)
  {
    v60 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
      {
        v89 = *(unsigned int *)(v60 + 28);
        if ((_DWORD)v89)
        {
          v90 = 16 * v89;
          v91 = (_DWORD **)(*(_QWORD *)(v60 + 16) + 8);
          do
          {
            v92 = *v91;
            *v91 = 0;
            if (v92)
            {
              if (*v92 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v92, v48);
              else
                *v92 -= 2;
            }
            v91 += 2;
            v90 -= 16;
          }
          while (v90);
        }
        v93 = *(WTF **)(v60 + 16);
        if ((WTF *)(v60 + 32) != v93 && v93 != 0)
        {
          *(_QWORD *)(v60 + 16) = 0;
          *(_DWORD *)(v60 + 24) = 0;
          WTF::fastFree(v93, v48);
        }
        v95 = *(_QWORD *)(v60 + 8);
        *(_QWORD *)(v60 + 8) = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
        WTF::fastFree((WTF *)v60, v48);
      }
      else
      {
        --*(_DWORD *)v60;
      }
    }
    result = WTF::fastFree(v8, v48);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  if (*(_DWORD *)v3 == 1)
  {
    v61 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v61)
    {
      v62 = 16 * v61;
      v63 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
      do
      {
        v64 = *v63;
        *v63 = 0;
        if (v64)
        {
          if (*v64 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v48);
          else
            *v64 -= 2;
        }
        v63 += 2;
        v62 -= 16;
      }
      while (v62);
    }
    v65 = *(WTF **)(v3 + 16);
    if ((WTF *)(v3 + 32) != v65 && v65 != 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v65, v48);
    }
    v67 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    return WTF::fastFree((WTF *)v3, v48);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t WebCore::applyTextDecorationChangeToValueList(uint64_t result, int a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  const WebCore::CSSLinearGradientValue **v38;

  v4 = result;
  if (a2 == 2)
  {
    v9 = *(uint64_t **)result;
    v10 = *(unsigned int *)(result + 12);
    v11 = (uint64_t *)(*(_QWORD *)result + 8 * v10);
    v12 = 0;
    if ((_DWORD)v10)
    {
      v13 = *(_QWORD *)a3;
      v14 = (uint64_t *)(*(_QWORD *)result + 8 * v10);
      v15 = (char *)v14;
      do
      {
        v16 = *v9;
        v17 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
        v18 = *(unsigned __int16 *)(*v9 + 4) | (*(unsigned __int8 *)(*v9 + 6) << 16);
        if (((v18 ^ v17) & 0x3F800) != 0)
        {
          if ((v17 & 0x3F800) == 0x1D800)
          {
            v21 = v13;
LABEL_23:
            result = v21;
            while (*(_DWORD *)(result + 8) == 1)
            {
              result = *(_QWORD *)(result + 16);
              v22 = *(unsigned __int16 *)(result + 4) | (*(unsigned __int8 *)(result + 6) << 16);
              if (((v22 ^ v18) & 0x3F800) == 0)
              {
                v37 = v16;
                v38 = (const WebCore::CSSLinearGradientValue **)&v37;
                goto LABEL_9;
              }
              if ((v22 & 0x3F800) != 0x1D800)
              {
                v23 = v18 & 0x3F800;
                v18 = *(unsigned __int16 *)(result + 4) | (*(unsigned __int8 *)(result + 6) << 16);
                v21 = v16;
                v16 = result;
                if (v23 == 120832)
                  goto LABEL_23;
                break;
              }
            }
          }
          else if ((v18 & 0x3F800) == 0x1D800)
          {
            v24 = v13;
LABEL_31:
            result = v16;
            while (*(_DWORD *)(result + 8) == 1)
            {
              result = *(_QWORD *)(result + 16);
              v25 = *(unsigned __int16 *)(result + 4) | (*(unsigned __int8 *)(result + 6) << 16);
              if (((v25 ^ v17) & 0x3F800) == 0)
              {
                v37 = v24;
                v38 = (const WebCore::CSSLinearGradientValue **)&v37;
                result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(result, &v38, a3);
                if ((_DWORD)result)
                  goto LABEL_10;
                break;
              }
              if ((v25 & 0x3F800) != 0x1D800)
              {
                v26 = v17 & 0x3F800;
                v17 = *(unsigned __int16 *)(result + 4) | (*(unsigned __int8 *)(result + 6) << 16);
                v16 = v24;
                v24 = result;
                if (v26 == 120832)
                  goto LABEL_31;
                break;
              }
            }
          }
        }
        else
        {
          v37 = *v9;
          v38 = (const WebCore::CSSLinearGradientValue **)&v37;
          result = v13;
LABEL_9:
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(result, &v38, a3);
          if ((result & 1) != 0)
          {
LABEL_10:
            v20 = (char *)v9;
            if (v15 != (char *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 12)))
            {
              if (v14 == v9)
              {
                v20 = v15;
              }
              else
              {
                memmove(v15, v14, (char *)v9 - (char *)v14);
                v20 = &v15[(char *)v9 - (char *)v14];
              }
            }
            result = *v9;
            *v9 = 0;
            v14 = v9 + 1;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v19);
              else
                *(_DWORD *)result -= 2;
            }
            ++v12;
            v15 = v20;
          }
        }
        ++v9;
      }
      while (v9 < v11);
      v9 = *(uint64_t **)v4;
      LODWORD(v10) = *(_DWORD *)(v4 + 12);
      v11 = (uint64_t *)v15;
    }
    else
    {
      v14 = (uint64_t *)(*(_QWORD *)result + 8 * v10);
    }
    v27 = &v9[v10];
    if (v14 != v27)
    {
      result = (uint64_t)memmove(v11, v14, (char *)v27 - (char *)v14);
      LODWORD(v10) = *(_DWORD *)(v4 + 12);
    }
    v6 = v10 - v12;
    goto LABEL_44;
  }
  if (a2 != 1)
    return result;
  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5 != *(_DWORD *)(result + 8))
  {
    v6 = v5 + 1;
    v7 = *(uint64_t **)result;
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v7[v5] = v8;
LABEL_44:
    *(_DWORD *)(v4 + 12) = v6;
    return result;
  }
  v28 = v5 + (v5 >> 2);
  if (v28 >= 0x10)
    v29 = v28 + 1;
  else
    v29 = 16;
  if (v29 <= v5 + 1)
    v30 = v5 + 1;
  else
    v30 = v29;
  v31 = *(uint64_t **)result;
  if (v30 < 5)
  {
    v32 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
  }
  else
  {
    if (v30 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
    *(_DWORD *)(v4 + 8) = v30;
    *(_QWORD *)v4 = v32;
  }
  result = (uint64_t)memcpy(v32, v31, 8 * v5);
  if ((uint64_t *)(v4 + 16) != v31 && v31)
  {
    if (*(uint64_t **)v4 == v31)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v31, v33);
  }
  v34 = *(unsigned int *)(v4 + 12);
  v35 = *(uint64_t **)v4;
  v36 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v35[v34] = v36;
  *(_DWORD *)(v4 + 12) = v34 + 1;
  return result;
}

float WebCore::EditingStyle::copy@<S0>(WebCore::EditingStyle *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const WebCore::StyleProperties *v6;
  WebCore::MutableStyleProperties *v7;
  WebCore::MutableStyleProperties *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  float result;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v20;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_BYTE *)(v4 + 16) & 0xE0;
  *(_BYTE *)(v4 + 16) &= 0xE0u;
  *(_DWORD *)(v4 + 20) = WebCore::EditingStyle::NoFontDelta;
  *a2 = v4;
  v6 = (const WebCore::StyleProperties *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    v8 = WebCore::MutableStyleProperties::MutableStyleProperties(v7, v6);
    v10 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v14 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v14)
        {
          v15 = 16 * v14;
          v16 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
          do
          {
            v17 = *v16;
            *v16 = 0;
            if (v17)
            {
              if (*v17 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
              else
                *v17 -= 2;
            }
            v16 += 2;
            v15 -= 16;
          }
          while (v15);
        }
        v18 = *(WTF **)(v10 + 16);
        if ((WTF *)(v10 + 32) != v18 && v18 != 0)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          WTF::fastFree(v18, v9);
        }
        v20 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        WTF::fastFree((WTF *)v10, v9);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    v5 = *(_BYTE *)(v4 + 16) & 0xFE;
  }
  v11 = *((_BYTE *)this + 16) & 1 | v5;
  *(_BYTE *)(v4 + 16) = v11;
  v12 = v11 & 0xFFFFFFF9 | (2 * ((*((unsigned __int8 *)this + 16) >> 1) & 3));
  *(_BYTE *)(v4 + 16) = v12;
  *(_BYTE *)(v4 + 16) = v12 & 0xE7 | *((_BYTE *)this + 16) & 0x18;
  result = *((float *)this + 5);
  *(float *)(v4 + 20) = result;
  return result;
}

uint64_t WebCore::EditingStyle::extractAndRemoveBlockProperties@<X0>(WebCore::EditingStyle *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  WTF *v25;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) &= 0xE0u;
  *(_DWORD *)(v4 + 20) = WebCore::EditingStyle::NoFontDelta;
  *a2 = v4;
  result = *((_QWORD *)this + 1);
  if (result)
  {
    WebCore::StyleProperties::copyProperties(result, WebCore::blockProperties, 0x14uLL, (uint64_t *)&v25);
    v7 = v25;
    v25 = 0;
    v8 = *(WTF **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 1;
      if (*(_DWORD *)v8 != 1)
        goto LABEL_4;
      v10 = *((unsigned int *)v8 + 7);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        v12 = (_DWORD **)(*((_QWORD *)v8 + 2) + 8);
        do
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            if (*v13 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
            else
              *v13 -= 2;
          }
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      v14 = (WTF *)*((_QWORD *)v8 + 2);
      if ((WTF *)((char *)v8 + 32) != v14 && v14 != 0)
      {
        *((_QWORD *)v8 + 2) = 0;
        *((_DWORD *)v8 + 6) = 0;
        WTF::fastFree(v14, v6);
      }
      v16 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      WTF::fastFree(v8, v6);
      v8 = v25;
      v25 = 0;
      if (!v8)
        return WebCore::MutableStyleProperties::removeProperties(*((_QWORD *)this + 1), WebCore::blockProperties, 20);
      v9 = *(_DWORD *)v8 - 1;
      if (*(_DWORD *)v8 == 1)
      {
        v18 = *((unsigned int *)v8 + 7);
        if ((_DWORD)v18)
        {
          v19 = 16 * v18;
          v20 = (_DWORD **)(*((_QWORD *)v8 + 2) + 8);
          do
          {
            v21 = *v20;
            *v20 = 0;
            if (v21)
            {
              if (*v21 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v17);
              else
                *v21 -= 2;
            }
            v20 += 2;
            v19 -= 16;
          }
          while (v19);
        }
        v22 = (WTF *)*((_QWORD *)v8 + 2);
        if ((WTF *)((char *)v8 + 32) != v22 && v22 != 0)
        {
          *((_QWORD *)v8 + 2) = 0;
          *((_DWORD *)v8 + 6) = 0;
          WTF::fastFree(v22, v17);
        }
        v24 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        WTF::fastFree(v8, v17);
      }
      else
      {
LABEL_4:
        *(_DWORD *)v8 = v9;
      }
    }
    return WebCore::MutableStyleProperties::removeProperties(*((_QWORD *)this + 1), WebCore::blockProperties, 20);
  }
  return result;
}

BOOL WebCore::EditingStyle::extractAndRemoveTextDirection@<W0>(WebCore::EditingStyle *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::MutableStyleProperties *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int PropertyIndex;
  unsigned __int16 *v10;
  int v11;
  uint64_t v12;
  WTF::StringBuilder *v13;
  WTF::String *v14;
  __n128 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::String *v21;
  __n128 v22;
  WTF::StringImpl *v23;
  WTF::String *v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v33;
  WTF::StringImpl *v34;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) &= 0xE0u;
  *(_DWORD *)(v4 + 20) = WebCore::EditingStyle::NoFontDelta;
  *a2 = v4;
  v6 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v6 = 0x900000001;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = (char *)v6 + 32;
  *((_QWORD *)v6 + 3) = 4;
  v7 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v27 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v27)
      {
        v28 = 16 * v27;
        v29 = (_DWORD **)(*(_QWORD *)(v7 + 16) + 8);
        do
        {
          v30 = *v29;
          *v29 = 0;
          if (v30)
          {
            if (*v30 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v5);
            else
              *v30 -= 2;
          }
          v29 += 2;
          v28 -= 16;
        }
        while (v28);
      }
      v31 = *(WTF **)(v7 + 16);
      if ((WTF *)(v7 + 32) != v31 && v31 != 0)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v31, v5);
      }
      v33 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      WTF::fastFree((WTF *)v7, v5);
      v6 = *(WebCore::MutableStyleProperties **)(v4 + 8);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *((_QWORD *)this + 1);
  PropertyIndex = WebCore::StyleProperties::findPropertyIndex(v8, 285);
  if (PropertyIndex == -1)
  {
    v11 = 0;
  }
  else
  {
    if ((*(_BYTE *)(v8 + 4) & 8) != 0)
    {
      if (*(_DWORD *)(v8 + 28) <= PropertyIndex)
      {
        __break(0xC471u);
        goto LABEL_40;
      }
      v10 = (unsigned __int16 *)(*(_QWORD *)(v8 + 16) + 16 * PropertyIndex);
    }
    else
    {
      v10 = (unsigned __int16 *)(v8 + 2 * PropertyIndex + 8);
    }
    v11 = (*v10 >> 13) & 1;
  }
  WebCore::MutableStyleProperties::setProperty(v6, 285, 0x1C9u, v11);
  v12 = *(_QWORD *)(v4 + 8);
  WebCore::StyleProperties::serializeLonghandValue(*((_QWORD *)this + 1), 6, v13, v14, (WebCore *)&v34, v15);
  v16 = *((_QWORD *)this + 1);
  v17 = WebCore::StyleProperties::findPropertyIndex(v16, 6);
  if (v17 == -1)
  {
    v19 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(v16 + 4) & 8) != 0)
  {
    if (*(_DWORD *)(v16 + 28) > v17)
    {
      v18 = (unsigned __int16 *)(*(_QWORD *)(v16 + 16) + 16 * v17);
      goto LABEL_17;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x195AAEC88);
  }
  v18 = (unsigned __int16 *)(v16 + 2 * v17 + 8);
LABEL_17:
  v19 = (*v18 >> 13) & 1;
LABEL_18:
  WebCore::MutableStyleProperties::setProperty(v12, 6, (uint64_t)&v34, v19, 0);
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::MutableStyleProperties::removeProperty(*((_QWORD *)this + 1), (WTF::StringImpl *)0x11D, 0, v21, v22);
  return WebCore::MutableStyleProperties::removeProperty(*((_QWORD *)this + 1), (WTF::StringImpl *)6, 0, v24, v25);
}

uint64_t WebCore::EditingStyle::removeStyleAddedByNode(uint64_t this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  WebCore *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::Node *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WebCore::Node *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  char v36;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 4);
    if (v3)
    {
      v4 = this;
      *(_DWORD *)(v3 + 24) += 2;
      v5 = WebCore::styleElementForNode((WebCore *)v3, a2);
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      v32 = v5;
      v33 = 0;
      v35 = 0;
      v36 = 0;
      WebCore::ComputedStyleExtractor::copyProperties((uint64_t)&v32, WebCore::editingProperties, 0x18uLL, (uint64_t *)&v31);
      if (v35)
      {
        v7 = v34;
        v34 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v8 = v32;
      v32 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v6);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
      v9 = WebCore::styleElementForNode(a2, v6);
      if (v9)
        *((_DWORD *)v9 + 6) += 2;
      v32 = v9;
      v33 = 0;
      v35 = 0;
      v36 = 0;
      WebCore::ComputedStyleExtractor::copyProperties((uint64_t)&v32, WebCore::editingProperties, 0x18uLL, (uint64_t *)&v30);
      if (v35)
      {
        v11 = v34;
        v34 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      v12 = v32;
      v32 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v10);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>(v4, (uint64_t)v31);
      this = (uint64_t)WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>(v4, (uint64_t)v30);
      v14 = v30;
      v30 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          v16 = *((unsigned int *)v14 + 7);
          if ((_DWORD)v16)
          {
            v17 = 16 * v16;
            v18 = (_DWORD **)(*((_QWORD *)v14 + 2) + 8);
            do
            {
              v19 = *v18;
              *v18 = 0;
              if (v19)
              {
                if (*v19 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v13);
                else
                  *v19 -= 2;
              }
              v18 += 2;
              v17 -= 16;
            }
            while (v17);
          }
          v20 = (WTF *)*((_QWORD *)v14 + 2);
          if ((WTF *)((char *)v14 + 32) != v20 && v20 != 0)
          {
            *((_QWORD *)v14 + 2) = 0;
            *((_DWORD *)v14 + 6) = 0;
            WTF::fastFree(v20, v13);
          }
          v22 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          this = WTF::fastFree(v14, v13);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
      v15 = v31;
      v31 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          v23 = *((unsigned int *)v15 + 7);
          if ((_DWORD)v23)
          {
            v24 = 16 * v23;
            v25 = (_DWORD **)(*((_QWORD *)v15 + 2) + 8);
            do
            {
              v26 = *v25;
              *v25 = 0;
              if (v26)
              {
                if (*v26 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v13);
                else
                  *v26 -= 2;
              }
              v25 += 2;
              v24 -= 16;
            }
            while (v24);
          }
          v27 = (WTF *)*((_QWORD *)v15 + 2);
          if ((WTF *)((char *)v15 + 32) != v27 && v27 != 0)
          {
            *((_QWORD *)v15 + 2) = 0;
            *((_DWORD *)v15 + 6) = 0;
            WTF::fastFree(v27, v13);
          }
          v29 = *((_QWORD *)v15 + 1);
          *((_QWORD *)v15 + 1) = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          return WTF::fastFree(v15, v13);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
  }
  return this;
}

WTF *WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  _WORD *v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  WTF *result;
  __int16 v15;
  WTF *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 28))
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 16) + 16 * v5;
      if (WebCore::StyleProperties::propertyMatches(a2, *(_WORD *)v6 & 0x3FF, *(_QWORD *)(v6 + 8)))
      {
        v7 = *(_WORD *)v6 & 0x3FF;
        v15 = v7;
        v8 = HIDWORD(v17);
        if (HIDWORD(v17) == (_DWORD)v17)
        {
          v9 = (_WORD *)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v16, HIDWORD(v17) + 1, (unint64_t)&v15);
          v8 = HIDWORD(v17);
          *((_WORD *)v16 + HIDWORD(v17)) = *v9;
        }
        else
        {
          *((_WORD *)v16 + HIDWORD(v17)) = v7;
        }
        HIDWORD(v17) = v8 + 1;
      }
      v10 = v5 + 1;
      v5 = (v5 + 1);
    }
    while (*(_DWORD *)(v2 + 28) > v10);
    v2 = *(_QWORD *)(a1 + 8);
    v11 = v16;
    v12 = HIDWORD(v17);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  WebCore::MutableStyleProperties::removeProperties(v2, v11, v12);
  result = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v13);
  }
  return result;
}

uint64_t WebCore::EditingStyle::removeStyleConflictingWithStyleOfNode(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  WTF *v32;
  WebCore::Node *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  char v37;

  v2 = *((_QWORD *)a2 + 4);
  if (v2)
  {
    v3 = this;
    if (*(_QWORD *)(this + 8))
    {
      *(_DWORD *)(v2 + 24) += 2;
      v5 = WebCore::styleElementForNode((WebCore *)v2, a2);
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      v33 = v5;
      v34 = 0;
      v36 = 0;
      v37 = 0;
      WebCore::ComputedStyleExtractor::copyProperties((uint64_t)&v33, WebCore::editingProperties, 0x18uLL, (uint64_t *)&v32);
      if (v36)
      {
        v7 = v35;
        v35 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v8 = v33;
      v33 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v6);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      v9 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 16) &= 0xE0u;
      *(_DWORD *)(v9 + 20) = WebCore::EditingStyle::NoFontDelta;
      WebCore::EditingStyle::init(v9, a2, 2);
      this = (uint64_t)WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>(v9, (uint64_t)v32);
      v13 = *(_QWORD *)(v9 + 8);
      if (*(_DWORD *)(v13 + 28))
      {
        v14 = 0;
        do
        {
          this = WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(v3 + 8), (WTF::StringImpl *)(*(_WORD *)(*(_QWORD *)(v13 + 16) + 16 * v14) & 0x3FF), 0, v11, v12);
          v15 = v14 + 1;
          v14 = (v14 + 1);
        }
        while (*(_DWORD *)(v13 + 28) > v15);
      }
      if (*(_DWORD *)v9 == 1)
      {
        v17 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            v25 = *(unsigned int *)(v17 + 28);
            if ((_DWORD)v25)
            {
              v26 = 16 * v25;
              v27 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
              do
              {
                v28 = *v27;
                *v27 = 0;
                if (v28)
                {
                  if (*v28 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v10);
                  else
                    *v28 -= 2;
                }
                v27 += 2;
                v26 -= 16;
              }
              while (v26);
            }
            v29 = *(WTF **)(v17 + 16);
            if ((WTF *)(v17 + 32) != v29 && v29 != 0)
            {
              *(_QWORD *)(v17 + 16) = 0;
              *(_DWORD *)(v17 + 24) = 0;
              WTF::fastFree(v29, v10);
            }
            v31 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v17 + 8) = 0;
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            WTF::fastFree((WTF *)v17, v10);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        this = WTF::fastFree((WTF *)v9, v10);
      }
      else
      {
        --*(_DWORD *)v9;
      }
      v16 = v32;
      v32 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          v18 = *((unsigned int *)v16 + 7);
          if ((_DWORD)v18)
          {
            v19 = 16 * v18;
            v20 = (_DWORD **)(*((_QWORD *)v16 + 2) + 8);
            do
            {
              v21 = *v20;
              *v20 = 0;
              if (v21)
              {
                if (*v21 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v10);
                else
                  *v21 -= 2;
              }
              v20 += 2;
              v19 -= 16;
            }
            while (v19);
          }
          v22 = (WTF *)*((_QWORD *)v16 + 2);
          if ((WTF *)((char *)v16 + 32) != v22 && v22 != 0)
          {
            *((_QWORD *)v16 + 2) = 0;
            *((_DWORD *)v16 + 6) = 0;
            WTF::fastFree(v22, v10);
          }
          v24 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          return WTF::fastFree(v16, v10);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EditingStyle::triStateOfStyle<WebCore::MutableStyleProperties>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;
  WTF *v21;
  uint64_t v23;
  WTF *v24;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 1;
  ++*(_DWORD *)v3;
  WebCore::getPropertiesNotIn<WebCore::MutableStyleProperties>((const WebCore::StyleProperties *)v3, a2, (uint64_t *)&v24);
  if (!a3)
    WebCore::MutableStyleProperties::removeProperties((uint64_t)v24, WebCore::textOnlyProperties, 5);
  v6 = v24;
  v7 = *((unsigned int *)v24 + 7);
  if ((_DWORD)v7)
  {
    v8 = 2 * ((_DWORD)v7 != *(_DWORD *)(v3 + 28));
    v24 = 0;
    v9 = *(_DWORD *)v6 - 1;
    if (*(_DWORD *)v6 == 1)
    {
      v10 = 16 * v7;
      v11 = (_DWORD **)(*((_QWORD *)v6 + 2) + 8);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v5);
          else
            *v12 -= 2;
        }
        v11 += 2;
        v10 -= 16;
      }
      while (v10);
      goto LABEL_18;
    }
  }
  else
  {
    v24 = 0;
    v8 = 1;
    v9 = *(_DWORD *)v6 - 1;
    if (*(_DWORD *)v6 == 1)
    {
LABEL_18:
      v14 = (WTF *)*((_QWORD *)v6 + 2);
      if ((WTF *)((char *)v6 + 32) != v14 && v14 != 0)
      {
        *((_QWORD *)v6 + 2) = 0;
        *((_DWORD *)v6 + 6) = 0;
        WTF::fastFree(v14, v5);
      }
      v16 = *((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      WTF::fastFree(v6, v5);
      goto LABEL_15;
    }
  }
  *(_DWORD *)v6 = v9;
LABEL_15:
  if (*(_DWORD *)v3 == 1)
  {
    v17 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
      do
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v5);
          else
            *v20 -= 2;
        }
        v19 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    v21 = *(WTF **)(v3 + 16);
    if ((WTF *)(v3 + 32) != v21 && v21 != 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v21, v5);
    }
    v23 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    WTF::fastFree((WTF *)v3, v5);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v8;
}

unsigned int *WebCore::EditingStyle::styleAtSelectionStart@<X0>(unsigned int *this@<X0>, const WebCore::VisibleSelection *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  unsigned int *v5;
  void *v6;
  WebCore::Node *v7;
  unsigned int v8;
  WebCore::Node *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  uint64_t v29;
  void *v30;
  WTF::StringBuilder *v31;
  WTF::String *v32;
  __n128 v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  void *v48;
  WebCore::Node *v49;
  int v50;
  char v51;
  WebCore::Node *v52;
  char v53;
  WebCore::Node *v54;
  int v55;
  char v56;

  if (!*((_BYTE *)this + 97))
  {
    *a3 = 0;
    return this;
  }
  v4 = (int)a2;
  v5 = this;
  WebCore::adjustedSelectionStartForStyleComputation((WebCore *)this, (uint64_t)&v54);
  v7 = v54;
  if (!v54)
    goto LABEL_41;
  v8 = v56 & 7;
  if (v8 <= 4)
  {
    v9 = v54;
    if ((((1 << v8) & 0x19) != 0 || (v9 = (WebCore::Node *)*((_QWORD *)v54 + 4)) != 0)
      && (*((_WORD *)v9 + 14) & 2) != 0)
    {
      v10 = *((_DWORD *)v9 + 6) + 2;
      *((_DWORD *)v9 + 6) = v10;
      if (*((_BYTE *)v5 + 97) != 2)
        goto LABEL_28;
      switch(v8)
      {
        case 0u:
          LODWORD(v11) = v55;
          goto LABEL_20;
        case 4u:
          v12 = *((_WORD *)v7 + 14);
          if ((v12 & 1) != 0)
          {
            v11 = *((_QWORD *)v7 + 10);
            if (v11)
              LODWORD(v11) = *(_DWORD *)(v11 + 4);
          }
          else
          {
            if ((v12 & 4) == 0)
              break;
            v13 = *((_QWORD *)v7 + 10);
            if (!v13)
              break;
            LODWORD(v11) = 0;
            do
            {
              LODWORD(v11) = v11 + 1;
              v13 = *(_QWORD *)(v13 + 56);
            }
            while (v13);
          }
LABEL_20:
          v14 = *((_QWORD *)v9 + 10);
          if (v14)
            LODWORD(v14) = *(_DWORD *)(v14 + 4);
          if ((_DWORD)v11 != (_DWORD)v14)
            goto LABEL_28;
          WebCore::nextVisuallyDistinctCandidate((uint64_t)&v54, 1, (uint64_t)&v49);
          v15 = v49;
          v49 = 0;
          v16 = v54;
          v54 = v15;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v16, v6);
                v38 = v49;
                v55 = v50;
                v56 = v51;
                v49 = 0;
                if (v38)
                {
                  if (*((_DWORD *)v38 + 6) == 2)
                  {
                    if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v38, v6);
                  }
                  else
                  {
                    *((_DWORD *)v38 + 6) -= 2;
                  }
                }
                goto LABEL_27;
              }
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
          v55 = v50;
          v56 = v51;
LABEL_27:
          v10 = *((_DWORD *)v9 + 6);
LABEL_28:
          v17 = v10 - 2;
          if (v17)
          {
            *((_DWORD *)v9 + 6) = v17;
          }
          else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v9, v6);
          }
          goto LABEL_30;
        case 1u:
          v46 = *((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFLL;
          if (v46)
          {
            LODWORD(v11) = 0;
            do
            {
              LODWORD(v11) = v11 + 1;
              v46 = *(_QWORD *)(v46 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v46);
            goto LABEL_20;
          }
          break;
        case 2u:
          v45 = *((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFLL;
          if (v45)
          {
            LODWORD(v11) = 1;
            do
            {
              LODWORD(v11) = v11 + 1;
              v45 = *(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v45);
          }
          else
          {
            LODWORD(v11) = 1;
          }
          goto LABEL_20;
      }
      LODWORD(v11) = 0;
      goto LABEL_20;
    }
  }
LABEL_30:
  v18 = v54;
  if (v54)
  {
    *((_DWORD *)v54 + 6) += 2;
    while (1)
    {
      v19 = v18;
      if ((*((_WORD *)v18 + 14) & 8) != 0)
        break;
      v18 = (WebCore::Node *)*((_QWORD *)v18 + 4);
      if (v18)
        *((_DWORD *)v18 + 6) += 2;
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v6);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      if (!v18)
        goto LABEL_41;
    }
    v20 = *((_DWORD *)v18 + 6);
    *((_DWORD *)v18 + 6) = v20 + 2;
    if (v20)
    {
      *((_DWORD *)v18 + 6) = v20;
    }
    else if ((*((_WORD *)v18 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v18, v6);
    }
    v21 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 16) &= 0xE0u;
    *(_DWORD *)(v21 + 20) = WebCore::EditingStyle::NoFontDelta;
    WebCore::EditingStyle::init(v21, v19, 0);
    v22 = *(_QWORD *)(*((_QWORD *)v19 + 5) + 8);
    *(_DWORD *)(v22 + 24) += 2;
    WebCore::EditingStyle::mergeTypingStyle((WebCore::MutableStyleProperties *)v21, (WebCore::Document *)v22);
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v6);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
    if (!v4)
      goto LABEL_88;
    if (*((_BYTE *)v5 + 97) != 2)
    {
      WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v21 + 8), 61, &v49);
      if (v49)
      {
        v23 = (*((unsigned __int16 *)v49 + 2) | (*((unsigned __int8 *)v49 + 6) << 16)) & 0x3F87F;
        if (v23 == 24)
        {
          v24 = *((_QWORD *)v49 + 1);
          if ((v24 & 0x8000000000000) != 0)
            v25 = *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
          else
            v25 = *((_QWORD *)v49 + 1) != 0;
          v26 = !v25;
        }
        else
        {
          if (v23 != 80)
          {
            if (*(_DWORD *)v49 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v49, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v49 -= 2;
LABEL_88:
            *a3 = v21;
            if (*((_DWORD *)v19 + 6) == 2)
            {
              if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v19, v6);
            }
            else
            {
              *((_DWORD *)v19 + 6) -= 2;
            }
            goto LABEL_90;
          }
          v26 = *((unsigned __int16 *)v49 + 4) == 125;
        }
        if (*(_DWORD *)v49 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v49, (WTF::StringImpl *)v6);
          if ((v26 & 1) == 0)
            goto LABEL_88;
        }
        else
        {
          *(_DWORD *)v49 -= 2;
          if (!v26)
            goto LABEL_88;
        }
      }
    }
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v5, &v49);
    if (v53)
    {
      v27 = v49;
      v28 = v52;
      if (v49 == v52)
        goto LABEL_69;
      v39 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v49);
      v40 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v28);
      v41 = v40 - v39;
      v42 = v39 >= v40;
      v43 = v39 - v40;
      if (v39 >= v40)
        v29 = (uint64_t)v27;
      else
        v29 = (uint64_t)v28;
      if (v42)
        v27 = v28;
      if (v42)
        v44 = v43;
      else
        v44 = v41;
      for (; v44; --v44)
        v29 = WebCore::Node::parentInComposedTree((WebCore::Node *)v29);
      if ((WebCore::Node *)v29 == v27)
      {
LABEL_69:
        v29 = (uint64_t)v27;
      }
      else
      {
        do
        {
          v29 = WebCore::Node::parentInComposedTree((WebCore::Node *)v29);
          v27 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v27);
        }
        while ((WebCore::Node *)v29 != v27);
      }
      if (v29)
      {
        *(_DWORD *)(v29 + 24) += 2;
        WebCore::backgroundColorInEffect((unsigned int *)&v48, (WebCore::Node *)v29);
        if (*(_DWORD *)(v29 + 24) == 2)
        {
          if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
        }
        else
        {
          *(_DWORD *)(v29 + 24) -= 2;
        }
        v6 = v48;
        if (v48)
        {
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v47, (uint64_t)v48, v31, v32, v33);
          WebCore::EditingStyle::setProperty(v21, 61, (uint64_t)&v47, 0);
          v34 = v47;
          v47 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = v48;
          v48 = 0;
          if (v35)
          {
            if (*v35 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)v6);
            else
              *v35 -= 2;
          }
        }
      }
      if (v53)
      {
        v36 = v52;
        v52 = 0;
        if (v36)
        {
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v36, v6);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        v37 = v49;
        v49 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v6);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
      }
    }
    goto LABEL_88;
  }
LABEL_41:
  *a3 = 0;
LABEL_90:
  this = (unsigned int *)v54;
  v54 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

uint64_t WebCore::EditingStyle::conflictsWithInlineStyleOfElement(uint64_t a1, WTF::StringImpl *a2, WebCore::MutableStyleProperties **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v8;
  uint64_t v10;
  WebCore::MutableStyleProperties *v11;
  WebCore::MutableStyleProperties *v12;
  char v13;
  int v14;
  int v15;
  WTF::String *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD **v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int64_t v52;
  WTF::StringImpl *v53;
  size_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  _QWORD *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  _QWORD *v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF *v82;
  uint64_t v83;
  _DWORD *v84;
  WTF *v85;
  unsigned int v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  _DWORD *v94;
  WTF::StringImpl *v95;
  WTF::StringBuilder *v96;
  WTF::String *v97;
  __n128 v98;
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  _DWORD *v102;
  WTF *v103;
  int v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  _DWORD *v108;
  WTF::StringImpl *v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  WTF::String *v121;
  __n128 v122;
  _QWORD *v123;
  uint64_t v124;
  WTF::StringBuilder *v125;
  WTF::String *v126;
  __n128 v127;
  unsigned int PropertyIndex;
  char *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::String *v133;
  __n128 v134;
  WTF::StringBuilder *v135;
  WTF::String *v136;
  __n128 v137;
  uint64_t v138;
  WTF::StringBuilder *v139;
  WTF::String *v140;
  WTF::StringBuilder *v141;
  WTF::String *v142;
  __n128 v143;
  WTF::StringImpl *v144;
  WTF::StringBuilder *v145;
  WTF::String *v146;
  __n128 v147;
  unsigned int v148;
  char *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  WTF::String *v152;
  __n128 v153;
  WTF::StringImpl *v154;
  uint64_t IsImportant;
  WTF::StringImpl *v156;
  unsigned int v157;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD **v162;
  _DWORD *v163;
  WTF *v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD **v169;
  _DWORD *v170;
  WTF *v171;
  uint64_t v173;
  unint64_t v174;
  unsigned int *v175;
  _DWORD *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  void *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  void *v188;
  int v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *__src;
  WTF *v196;
  int v197;
  unsigned int v198;
  _BYTE v199[32];
  WTF *v200;
  int v201;
  unsigned int v202;
  _BYTE v203[32];
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  _BYTE v208[32];
  WTF::StringImpl *v209;
  uint64_t v210;
  _BYTE v211[144];
  uint64_t v212;
  char v213;

  v4 = *((_QWORD *)a2 + 13);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v22 = 0;
    return v22 & 1;
  }
  v8 = a2;
  ++*(_DWORD *)v5;
  if (a3)
  {
    v10 = WTF::fastMalloc((WTF *)0x60);
    v11 = WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v10, (const WebCore::StyleProperties *)v5);
    ++*(_DWORD *)v11;
    v12 = *a3;
    *a3 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        v37 = *((unsigned int *)v12 + 7);
        if ((_DWORD)v37)
        {
          v38 = 16 * v37;
          v39 = (_DWORD **)(*((_QWORD *)v12 + 2) + 8);
          do
          {
            v40 = *v39;
            *v39 = 0;
            if (v40)
            {
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, a2);
              else
                *v40 -= 2;
            }
            v39 += 2;
            v38 -= 16;
          }
          while (v38);
        }
        v41 = (WTF *)*((_QWORD *)v12 + 2);
        if ((WebCore::MutableStyleProperties *)((char *)v12 + 32) != v41 && v41 != 0)
        {
          *((_QWORD *)v12 + 2) = 0;
          *((_DWORD *)v12 + 6) = 0;
          WTF::fastFree(v41, a2);
        }
        v43 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        WTF::fastFree(v12, a2);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v13 = *(_BYTE *)(a1 + 16);
  v14 = v13 & 6;
  v15 = v13 & 0x18;
  if (v14 != 4 && v15 != 16)
  {
    v22 = 0;
LABEL_221:
    v114 = *(_QWORD *)(a1 + 8);
    if (v114 && *(_DWORD *)(v114 + 28))
    {
      v115 = 0;
      __src = (char *)(v5 + 8);
      while (1)
      {
        v116 = *(_WORD *)(*(_QWORD *)(v114 + 16) + 16 * v115) & 0x3FF;
        if ((_DWORD)v116 != 270)
        {
          if ((_DWORD)v116 == 341)
          {
            WebCore::StyleProperties::getPropertyCSSValue(v5, 255, &v209);
            if (v209)
            {
              if (*(_DWORD *)v209 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v209, a2);
                if (!v10)
                  goto LABEL_298;
              }
              else
              {
                *(_DWORD *)v209 -= 2;
                if (!v10)
                  goto LABEL_298;
              }
              WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)0xFF, 0, v121, v122);
              if (a4)
              {
                WebCore::StyleProperties::serializeLonghandValue(v5, 255, v125, v126, (WebCore *)&v209, v127);
                PropertyIndex = WebCore::StyleProperties::findPropertyIndex(v5, 255);
                if (PropertyIndex == -1)
                {
                  v130 = 0;
                }
                else
                {
                  if ((*(_BYTE *)(v5 + 4) & 8) != 0)
                  {
                    if (*(_DWORD *)(v5 + 28) <= PropertyIndex)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195AB0D98);
                    }
                    v129 = (char *)(*(_QWORD *)(v5 + 16) + 16 * PropertyIndex);
                  }
                  else
                  {
                    v129 = &__src[2 * PropertyIndex];
                  }
                  v130 = (*(unsigned __int16 *)v129 >> 13) & 1;
                }
                WebCore::EditingStyle::setProperty(a4, 255, (uint64_t)&v209, v130);
                v132 = v209;
                v209 = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                    WTF::StringImpl::destroy(v132, v131);
                  else
                    *(_DWORD *)v132 -= 2;
                }
              }
              v22 = 1;
            }
            goto LABEL_261;
          }
          if ((_DWORD)v116 != 294)
            goto LABEL_261;
        }
        if ((*((_WORD *)v8 + 14) & 0x10) == 0
          || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
        {
          goto LABEL_261;
        }
        v117 = *((_QWORD *)v8 + 13);
        if (!v117)
          break;
        v118 = *(unsigned int *)(v117 + 4);
        if ((v118 & 1) != 0)
        {
          v119 = *(_QWORD *)(v117 + 40);
          v120 = *(unsigned int *)(v117 + 52);
          if (!v120)
            break;
        }
        else
        {
          v119 = v117 + 32;
          v120 = v118 >> 5;
          if (!(v118 >> 5))
            break;
        }
        v123 = (_QWORD *)(v119 + 8);
        while (1)
        {
          v124 = *(v123 - 1);
          if (v124 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v124 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v124 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            break;
          }
          v123 += 2;
          if (!--v120)
            goto LABEL_245;
        }
LABEL_246:
        if ((MEMORY[0x19AEA53F4](*v123, "Apple-tab-span", 14) & 1) != 0)
          goto LABEL_293;
LABEL_261:
        WebCore::StyleProperties::getPropertyCSSValue(v5, v116, &v209);
        if (v209)
        {
          if (*(_DWORD *)v209 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v209, a2);
          else
            *(_DWORD *)v209 -= 2;
          if ((_DWORD)v116 == 285 && (WebCore::StyleProperties::getPropertyCSSValue(v5, 6, &v209), v209))
          {
            if (*(_DWORD *)v209 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v209, a2);
              if (!v10)
              {
LABEL_298:
                v22 = 1;
                goto LABEL_304;
              }
            }
            else
            {
              *(_DWORD *)v209 -= 2;
              if (!v10)
                goto LABEL_298;
            }
            WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)6, 0, v133, v134);
            if (a4)
            {
              WebCore::StyleProperties::serializeLonghandValue(v5, 285, v145, v146, (WebCore *)&v209, v147);
              v148 = WebCore::StyleProperties::findPropertyIndex(v5, 285);
              if (v148 == -1)
              {
                v150 = 0;
              }
              else
              {
                if ((*(_BYTE *)(v5 + 4) & 8) != 0)
                {
                  if (*(_DWORD *)(v5 + 28) <= v148)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195AB0DA0);
                  }
                  v149 = (char *)(*(_QWORD *)(v5 + 16) + 16 * v148);
                }
                else
                {
                  v149 = &__src[2 * v148];
                }
                v150 = (*(unsigned __int16 *)v149 >> 13) & 1;
              }
              WebCore::EditingStyle::setProperty(a4, 285, (uint64_t)&v209, v150);
              v154 = v209;
              v209 = 0;
              if (v154)
              {
                if (*(_DWORD *)v154 == 2)
                  WTF::StringImpl::destroy(v154, v151);
                else
                  *(_DWORD *)v154 -= 2;
              }
              WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)0x11D, 0, v152, v153);
LABEL_288:
              WebCore::StyleProperties::serializeLonghandValue(v5, v116, v135, v136, (WebCore *)&v206, v137);
              goto LABEL_289;
            }
            WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)0x11D, 0, v146, v147);
          }
          else
          {
            if (!v10)
              goto LABEL_298;
            WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)v116, 0, v133, v134);
            if (a4)
            {
              if ((v116 - 2) <= 0x1C8)
                goto LABEL_288;
              v209 = (WTF::StringImpl *)WebCore::shorthandForProperty(v116);
              v210 = v138;
              memset(v211, 0, sizeof(v211));
              v212 = 0;
              v213 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)&v209, (const WebCore::StyleProperties *)v5, v139, v140, (__n128)0);
              WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)&v209, v141, v142, (WebCore::ShorthandSerializer *)&v206, v143);
              WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)&v209, v144);
LABEL_289:
              IsImportant = WebCore::StyleProperties::propertyIsImportant(v5, v116);
              WebCore::EditingStyle::setProperty(a4, v116, (uint64_t)&v206, IsImportant);
              v156 = v206;
              v206 = 0;
              if (v156)
              {
                if (*(_DWORD *)v156 == 2)
                  WTF::StringImpl::destroy(v156, a2);
                else
                  *(_DWORD *)v156 -= 2;
              }
            }
          }
          v22 = 1;
        }
LABEL_293:
        v157 = v115 + 1;
        v115 = (v115 + 1);
        if (*(_DWORD *)(v114 + 28) <= v157)
          goto LABEL_301;
      }
LABEL_245:
      v123 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      goto LABEL_246;
    }
    goto LABEL_301;
  }
  WebCore::StyleProperties::getPropertyCSSValue(v5, 255, &v209);
  v19 = v209;
  if (!v209)
  {
    v21 = 0;
    goto LABEL_46;
  }
  v20 = *(_DWORD *)v209;
  if (((*((unsigned __int16 *)v209 + 2) | (*((unsigned __int8 *)v209 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v20 += 2;
    *(_DWORD *)v209 = v20;
    v21 = (uint64_t)v19;
  }
  else
  {
    v21 = 0;
  }
  v23 = v20 - 2;
  if (v23)
  {
    *(_DWORD *)v19 = v23;
    if (v21)
      goto LABEL_20;
LABEL_46:
    v22 = 0;
    goto LABEL_217;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
  if (!v21)
    goto LABEL_46;
LABEL_20:
  a2 = (WTF::StringImpl *)v211;
  v209 = (WTF::StringImpl *)v211;
  v210 = 4;
  v24 = *(unsigned int *)(v21 + 8);
  if (v24 < 5)
  {
    v25 = (WTF::StringImpl *)v211;
    if (!(_DWORD)v24)
      goto LABEL_32;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(v21 + 48);
    v29 = HIDWORD(v210);
    while (1)
    {
      if (v26 > 3)
      {
        if (v24 <= v26)
        {
          __break(0xC471u);
          goto LABEL_389;
        }
        v30 = (_DWORD **)(v28 + 8 * (v27 - 4));
      }
      else
      {
        v30 = (_DWORD **)(v21 + 16 + 8 * v27);
      }
      v31 = *v30;
      *v31 += 2;
      *((_QWORD *)v25 + v29++) = v31;
      HIDWORD(v210) = v29;
      v26 = v27 + 1;
      v27 = (v27 + 1);
      if ((_DWORD)v24 == v26)
        goto LABEL_32;
    }
  }
  if (v24 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x195AB0DA8);
  }
  v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v24));
  LODWORD(v210) = v24;
  v209 = v25;
  LODWORD(v24) = *(_DWORD *)(v21 + 8);
  a2 = (WTF::StringImpl *)v211;
  if ((_DWORD)v24)
    goto LABEL_25;
LABEL_32:
  v206 = (WTF::StringImpl *)v208;
  v207 = 4;
  if (v14 == 4)
  {
    v32 = *(_DWORD *)(v21 + 8);
    if (v32)
    {
      v33 = 0;
      v34 = 0;
      while (1)
      {
        if (v33 > 3)
        {
          if (v32 <= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x195AB0D00);
          }
          v35 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 8 * (v34 - 4));
        }
        else
        {
          v35 = (uint64_t *)(v21 + 16 + 8 * v34);
        }
        v36 = *v35;
        if (((*(unsigned __int16 *)(v36 + 4) | (*(unsigned __int8 *)(v36 + 6) << 16)) & 0x3F800) == 0
          && (*(_WORD *)(v36 + 4) & 0x7F) == 0x50
          && *(_WORD *)(v36 + 8) == 495)
        {
          break;
        }
        v33 = v34 + 1;
        v34 = (v34 + 1);
        if (v32 == v33)
          goto LABEL_44;
      }
      if (!v10)
        goto LABEL_119;
      v191 = a1;
      v193 = v21;
      v44 = HIDWORD(v210);
      v45 = (WTF::StringImpl *)((char *)v25 + 8 * HIDWORD(v210));
      v46 = 0;
      if (HIDWORD(v210))
      {
        v47 = v25;
        v48 = (WTF::StringImpl *)((char *)v25 + 8 * HIDWORD(v210));
        v49 = v48;
        while (1)
        {
          v50 = *(_QWORD *)v25;
          if (((*(unsigned __int16 *)(*(_QWORD *)v25 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v25 + 6) << 16)) & 0x3F800) != 0
            || (*(_WORD *)(*(_QWORD *)v25 + 4) & 0x7F) != 0x50
            || *(_WORD *)(v50 + 8) != 495)
          {
            goto LABEL_78;
          }
          v51 = v25;
          if (v49 == (WTF::StringImpl *)((char *)v209 + 8 * HIDWORD(v210)))
            goto LABEL_73;
          if (v25 == v48)
            break;
          v189 = v46;
          v52 = v47 - v48;
          v53 = v48;
          v54 = v47 - v48;
          v55 = v49;
          memmove(v49, v53, v54);
          v49 = (WTF::StringImpl *)((char *)v55 + v52);
          v50 = *(_QWORD *)v25;
          *(_QWORD *)v25 = 0;
          v48 = (WTF::StringImpl *)((char *)v25 + 8);
          if (v50)
          {
            a2 = (WTF::StringImpl *)v211;
            v46 = v189;
            goto LABEL_74;
          }
          a2 = (WTF::StringImpl *)v211;
          v46 = v189;
LABEL_77:
          ++v46;
LABEL_78:
          v25 = (WTF::StringImpl *)((char *)v25 + 8);
          v47 = (WTF::StringImpl *)((char *)v47 + 8);
          if (v25 >= v45)
          {
            v25 = v209;
            v44 = HIDWORD(v210);
            v45 = v49;
            goto LABEL_83;
          }
        }
        v51 = v49;
LABEL_73:
        *(_QWORD *)v25 = 0;
        v48 = (WTF::StringImpl *)((char *)v25 + 8);
        v49 = v51;
LABEL_74:
        if (*(_DWORD *)v50 == 2)
        {
          v190 = v49;
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v50, (WTF::StringImpl *)v211);
          v49 = v190;
          a2 = (WTF::StringImpl *)v211;
        }
        else
        {
          *(_DWORD *)v50 -= 2;
        }
        goto LABEL_77;
      }
      v48 = v25;
LABEL_83:
      v56 = (WTF::StringImpl *)((char *)v25 + 8 * v44);
      if (v48 != v56)
      {
        memmove(v45, v48, v56 - v48);
        a2 = (WTF::StringImpl *)v211;
        v44 = HIDWORD(v210);
      }
      HIDWORD(v210) = v44 - v46;
      WebCore::staticCSSValuePool[5068] += 2;
      v57 = HIDWORD(v207);
      if (HIDWORD(v207) == (_DWORD)v207)
      {
        v177 = HIDWORD(v207) + ((unint64_t)HIDWORD(v207) >> 2);
        if (v177 >= 0x10)
          v178 = v177 + 1;
        else
          v178 = 16;
        if (v178 <= (unint64_t)HIDWORD(v207) + 1)
          v179 = HIDWORD(v207) + 1;
        else
          v179 = v178;
        v180 = v206;
        if (v179 < 5)
        {
          v181 = (WTF::StringImpl *)v208;
          v206 = (WTF::StringImpl *)v208;
          LODWORD(v207) = 4;
        }
        else
        {
          if (v179 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195AB0DC0);
          }
          v181 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v179));
          LODWORD(v207) = v179;
          v206 = v181;
        }
        memcpy(v181, v180, 8 * HIDWORD(v207));
        if (v208 != (_BYTE *)v180 && v180)
        {
          if (v206 == v180)
          {
            v206 = 0;
            LODWORD(v207) = 0;
          }
          WTF::fastFree(v180, v182);
        }
        v57 = HIDWORD(v207);
        v58 = (_QWORD *)((char *)v206 + 8 * HIDWORD(v207));
        a1 = v191;
        v21 = v193;
        a2 = (WTF::StringImpl *)v211;
      }
      else
      {
        v58 = (_QWORD *)((char *)v206 + 8 * HIDWORD(v207));
        a1 = v191;
        v21 = v193;
      }
      v32 = v57 + 1;
      *v58 = &WebCore::staticCSSValuePool[5068];
      HIDWORD(v207) = v57 + 1;
    }
  }
  else
  {
LABEL_44:
    v32 = 0;
  }
  if (v15 != 16)
    goto LABEL_126;
  v59 = *(_DWORD *)(v21 + 8);
  if (!v59)
    goto LABEL_126;
  v60 = 0;
  v61 = 0;
  while (1)
  {
    if (v60 > 3)
    {
      if (v59 <= v60)
      {
        __break(0xC471u);
        JUMPOUT(0x195AB0D20);
      }
      v62 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 8 * (v61 - 4));
    }
    else
    {
      v62 = (uint64_t *)(v21 + 16 + 8 * v61);
    }
    v63 = *v62;
    if (((*(unsigned __int16 *)(v63 + 4) | (*(unsigned __int8 *)(v63 + 6) << 16)) & 0x3F800) == 0
      && (*(_WORD *)(v63 + 4) & 0x7F) == 0x50
      && *(_WORD *)(v63 + 8) == 474)
    {
      break;
    }
    v60 = v61 + 1;
    v61 = (v61 + 1);
    if (v59 == v60)
      goto LABEL_126;
  }
  if (!v10)
  {
LABEL_119:
    v22 = 0;
    v73 = 0;
    goto LABEL_188;
  }
  v192 = a1;
  v194 = v21;
  v64 = v209;
  v65 = HIDWORD(v210);
  v66 = (WTF::StringImpl *)((char *)v209 + 8 * HIDWORD(v210));
  v67 = 0;
  if (HIDWORD(v210))
  {
    v68 = v209;
    v69 = (WTF::StringImpl *)((char *)v209 + 8 * HIDWORD(v210));
    v70 = v69;
    while (1)
    {
      v71 = *(_QWORD *)v64;
      if (((*(unsigned __int16 *)(*(_QWORD *)v64 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v64 + 6) << 16)) & 0x3F800) != 0
        || (*(_WORD *)(*(_QWORD *)v64 + 4) & 0x7F) != 0x50
        || *(_WORD *)(v71 + 8) != 474)
      {
        goto LABEL_116;
      }
      v72 = v64;
      if (v70 == (WTF::StringImpl *)((char *)v209 + 8 * HIDWORD(v210)))
        goto LABEL_111;
      if (v64 == v69)
        break;
      memmove(v70, v69, v68 - v69);
      v70 = (WTF::StringImpl *)((char *)v70 + v68 - v69);
      v71 = *(_QWORD *)v64;
      *(_QWORD *)v64 = 0;
      v69 = (WTF::StringImpl *)((char *)v64 + 8);
      if (v71)
      {
        a2 = (WTF::StringImpl *)v211;
        goto LABEL_112;
      }
      a2 = (WTF::StringImpl *)v211;
LABEL_115:
      ++v67;
LABEL_116:
      v64 = (WTF::StringImpl *)((char *)v64 + 8);
      v68 = (WTF::StringImpl *)((char *)v68 + 8);
      if (v64 >= v66)
      {
        v64 = v209;
        v65 = HIDWORD(v210);
        v66 = v70;
        goto LABEL_121;
      }
    }
    v72 = v70;
LABEL_111:
    *(_QWORD *)v64 = 0;
    v69 = (WTF::StringImpl *)((char *)v64 + 8);
    v70 = v72;
LABEL_112:
    if (*(_DWORD *)v71 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v71, (WTF::StringImpl *)v211);
      a2 = (WTF::StringImpl *)v211;
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
    goto LABEL_115;
  }
  v69 = v209;
LABEL_121:
  v74 = (WTF::StringImpl *)((char *)v64 + 8 * v65);
  if (v69 != v74)
  {
    memmove(v66, v69, v74 - v69);
    a2 = (WTF::StringImpl *)v211;
    v65 = HIDWORD(v210);
  }
  HIDWORD(v210) = v65 - v67;
  WebCore::staticCSSValuePool[4984] += 2;
  v75 = HIDWORD(v207);
  v21 = v194;
  if (HIDWORD(v207) == (_DWORD)v207)
  {
    v183 = HIDWORD(v207) + ((unint64_t)HIDWORD(v207) >> 2);
    if (v183 >= 0x10)
      v184 = v183 + 1;
    else
      v184 = 16;
    if (v184 <= (unint64_t)HIDWORD(v207) + 1)
      v185 = HIDWORD(v207) + 1;
    else
      v185 = v184;
    v186 = v206;
    if (v185 < 5)
    {
      v187 = (WTF::StringImpl *)v208;
      v206 = (WTF::StringImpl *)v208;
      LODWORD(v207) = 4;
    }
    else
    {
      if (v185 >> 29)
      {
        __break(0xC471u);
LABEL_389:
        JUMPOUT(0x195AB0CD0);
      }
      v187 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v185));
      LODWORD(v207) = v185;
      v206 = v187;
    }
    memcpy(v187, v186, 8 * HIDWORD(v207));
    if (v208 != (_BYTE *)v186 && v186)
    {
      if (v206 == v186)
      {
        v206 = 0;
        LODWORD(v207) = 0;
      }
      WTF::fastFree(v186, v188);
    }
    v75 = HIDWORD(v207);
    v76 = (_QWORD *)((char *)v206 + 8 * HIDWORD(v207));
    a1 = v192;
    v21 = v194;
    a2 = (WTF::StringImpl *)v211;
  }
  else
  {
    v76 = (_QWORD *)((char *)v206 + 8 * HIDWORD(v207));
    a1 = v192;
  }
  v32 = v75 + 1;
  *v76 = &WebCore::staticCSSValuePool[4984];
  HIDWORD(v207) = v75 + 1;
LABEL_126:
  if (!v32)
  {
    v22 = 0;
LABEL_181:
    v73 = 1;
    goto LABEL_188;
  }
  v77 = HIDWORD(v210);
  if (HIDWORD(v210))
  {
    v200 = (WTF *)v203;
    v201 = 4;
    v78 = v209;
    if (v209 == (WTF::StringImpl *)v211)
    {
      memcpy(v203, v211, 8 * HIDWORD(v210));
    }
    else
    {
      v209 = (WTF::StringImpl *)v211;
      v200 = v78;
      v105 = v210;
      LODWORD(v210) = 4;
      v201 = v105;
    }
    HIDWORD(v210) = 0;
    v202 = v77;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v200, (uint64_t *)&v204);
    v79 = v204;
    v204 = 0;
    v205 = v79;
    WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v10, 255, (_DWORD **)&v205, 0);
    v81 = v205;
    v205 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v81, v80);
      else
        *(_DWORD *)v81 -= 2;
    }
    if (v202)
    {
      v82 = v200;
      v83 = 8 * v202;
      do
      {
        v84 = *(_DWORD **)v82;
        *(_QWORD *)v82 = 0;
        if (v84)
        {
          if (*v84 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v84, v80);
          else
            *v84 -= 2;
        }
        v82 = (WTF *)((char *)v82 + 8);
        v83 -= 8;
      }
      while (v83);
    }
    v85 = v200;
    if (v203 != (_BYTE *)v200 && v200 != 0)
    {
      v200 = 0;
      v201 = 0;
      WTF::fastFree(v85, v80);
      if (!a4)
        goto LABEL_187;
LABEL_150:
      v87 = WebCore::StyleProperties::findPropertyIndex(v5, 255);
      if (v87 == -1)
      {
        v89 = 0;
      }
      else
      {
        if ((*(_BYTE *)(v5 + 4) & 8) != 0)
        {
          if (*(_DWORD *)(v5 + 28) <= v87)
          {
            __break(0xC471u);
            JUMPOUT(0x195AB0DB8);
          }
          v88 = (unsigned __int16 *)(*(_QWORD *)(v5 + 16) + 16 * v87);
        }
        else
        {
          v88 = (unsigned __int16 *)(v5 + 2 * v87 + 8);
        }
        v89 = (*v88 >> 13) & 1;
      }
      v90 = HIDWORD(v207);
      v196 = (WTF *)v199;
      v197 = 4;
      v198 = HIDWORD(v207);
      if (HIDWORD(v207) < 5)
      {
        v91 = (WTF *)v199;
      }
      else
      {
        if (HIDWORD(v207) >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195AB0DB0);
        }
        v91 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v207)));
        v197 = v90;
        v196 = v91;
        v90 = HIDWORD(v207);
      }
      if ((_DWORD)v90)
      {
        v92 = v206;
        v93 = 8 * v90;
        do
        {
          v94 = *(_DWORD **)v92;
          v92 = (WTF::StringImpl *)((char *)v92 + 8);
          *v94 += 2;
          *(_QWORD *)v91 = v94;
          v91 = (WTF *)((char *)v91 + 8);
          v93 -= 8;
        }
        while (v93);
      }
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v196, (uint64_t *)&v204);
      v95 = v204;
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v205, (uint64_t)v204, v96, v97, v98);
      WebCore::EditingStyle::setProperty(a4, 255, (uint64_t)&v205, v89);
      v99 = v205;
      v205 = 0;
      a2 = (WTF::StringImpl *)v211;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v211);
          a2 = (WTF::StringImpl *)v211;
          if (!v95)
            goto LABEL_168;
          goto LABEL_183;
        }
        *(_DWORD *)v99 -= 2;
      }
      if (!v95)
      {
LABEL_168:
        if (v198)
        {
          v100 = v196;
          v101 = 8 * v198;
          do
          {
            v102 = *(_DWORD **)v100;
            *(_QWORD *)v100 = 0;
            if (v102)
            {
              if (*v102 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v102, (WTF::StringImpl *)v211);
                a2 = (WTF::StringImpl *)v211;
              }
              else
              {
                *v102 -= 2;
              }
            }
            v100 = (WTF *)((char *)v100 + 8);
            v101 -= 8;
          }
          while (v101);
        }
        v103 = v196;
        if (v199 != (_BYTE *)v196 && v196 != 0)
        {
          v196 = 0;
          v197 = 0;
          WTF::fastFree(v103, v211);
          a2 = (WTF::StringImpl *)v211;
        }
        v22 = 1;
        goto LABEL_181;
      }
LABEL_183:
      if (*(_DWORD *)v95 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v95, (WTF::StringImpl *)v211);
      else
        *(_DWORD *)v95 -= 2;
      a2 = (WTF::StringImpl *)v211;
      goto LABEL_168;
    }
    if (a4)
      goto LABEL_150;
  }
  else
  {
    WebCore::MutableStyleProperties::removeProperty(v10, (WTF::StringImpl *)0xFF, 0, v17, v18);
    if (a4)
      goto LABEL_150;
  }
LABEL_187:
  v22 = 1;
  v73 = 1;
  a2 = (WTF::StringImpl *)v211;
LABEL_188:
  v106 = v206;
  if (HIDWORD(v207))
  {
    v107 = 8 * HIDWORD(v207);
    do
    {
      v108 = *(_DWORD **)v106;
      *(_QWORD *)v106 = 0;
      if (v108)
      {
        if (*v108 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v108, (WTF::StringImpl *)v211);
          a2 = (WTF::StringImpl *)v211;
        }
        else
        {
          *v108 -= 2;
        }
      }
      v106 = (WTF::StringImpl *)((char *)v106 + 8);
      v107 -= 8;
    }
    while (v107);
    v106 = v206;
  }
  if (v208 != (_BYTE *)v106 && v106 != 0)
  {
    v206 = 0;
    LODWORD(v207) = 0;
    WTF::fastFree(v106, v211);
    a2 = (WTF::StringImpl *)v211;
  }
  v110 = v209;
  if (HIDWORD(v210))
  {
    v111 = 8 * HIDWORD(v210);
    do
    {
      v112 = *(_DWORD **)v110;
      *(_QWORD *)v110 = 0;
      if (v112)
      {
        if (*v112 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v112, (WTF::StringImpl *)v211);
          a2 = (WTF::StringImpl *)v211;
        }
        else
        {
          *v112 -= 2;
        }
      }
      v110 = (WTF::StringImpl *)((char *)v110 + 8);
      v111 -= 8;
    }
    while (v111);
    v110 = v209;
  }
  if (v211 == (_BYTE *)v110 || v110 == 0)
  {
    if (v73)
      goto LABEL_217;
  }
  else
  {
    v209 = 0;
    LODWORD(v210) = 0;
    WTF::fastFree(v110, v211);
    if (v73)
    {
LABEL_217:
      v73 = 1;
      if (!v21)
        goto LABEL_220;
    }
  }
  if (*(_DWORD *)v21 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v21, a2);
    if (v73)
      goto LABEL_221;
    goto LABEL_300;
  }
  *(_DWORD *)v21 -= 2;
LABEL_220:
  if (v73)
    goto LABEL_221;
LABEL_300:
  v22 = 1;
LABEL_301:
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v167 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v167)
      {
        v168 = 16 * v167;
        v169 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
        do
        {
          v170 = *v169;
          *v169 = 0;
          if (v170)
          {
            if (*v170 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v170, a2);
            else
              *v170 -= 2;
          }
          v169 += 2;
          v168 -= 16;
        }
        while (v168);
      }
      v171 = *(WTF **)(v10 + 16);
      if ((WTF *)(v10 + 32) != v171 && v171 != 0)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v171, a2);
      }
      v173 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v173)
        (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
      WTF::fastFree((WTF *)v10, a2);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
LABEL_304:
  if (*(_DWORD *)v5 == 1)
  {
    v159 = *(unsigned int *)(v5 + 4);
    if ((v159 & 8) != 0)
    {
      v160 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v160)
      {
        v161 = 16 * v160;
        v162 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
        do
        {
          v163 = *v162;
          *v162 = 0;
          if (v163)
          {
            if (*v163 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v163, a2);
            else
              *v163 -= 2;
          }
          v162 += 2;
          v161 -= 16;
        }
        while (v161);
      }
      v164 = *(WTF **)(v5 + 16);
      if ((WTF *)(v5 + 32) != v164 && v164 != 0)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v164, a2);
      }
      v166 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v166)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
    }
    else if (v159 >= 0x10)
    {
      v174 = 0;
      v175 = (unsigned int *)(v5 + ((v159 >> 3) & 0x1FFFFFFE) + 8);
      do
      {
        v176 = (_DWORD *)(*v175 | ((unint64_t)*((unsigned __int8 *)v175 + 4) << 32));
        if (*v176 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v176, a2);
        else
          *v176 -= 2;
        ++v174;
        v175 = (unsigned int *)((char *)v175 + 5);
      }
      while (v174 < (unint64_t)*(unsigned int *)(v5 + 4) >> 4);
    }
    WTF::fastFree((WTF *)v5, a2);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return v22 & 1;
}

