unsigned int *WebCore::rangeExpandedAroundPositionByCharacters@<X0>(WebCore *this@<X0>, const WebCore::VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  WebCore::Node *v5;
  int v6;
  char *v7;
  int v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  void *v15;
  WebCore::Node *v16;
  void *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  unsigned int *result;
  int v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  WebCore::Node *v26;
  int v27;
  char v28;
  WebCore::Node *v29;
  int v30;
  char v31;

  v3 = (int)a2;
  v5 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
  {
    v6 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v6 + 2;
    v8 = *((_DWORD *)this + 2);
    v7 = (char *)this + 8;
    v30 = v8;
    v31 = v7[4];
    *((_DWORD *)v5 + 6) = v6 + 4;
  }
  else
  {
    v22 = *((_DWORD *)this + 2);
    v7 = (char *)this + 8;
    v30 = v22;
    v31 = v7[4];
  }
  v29 = v5;
  v26 = v5;
  v27 = *(_DWORD *)v7;
  v28 = v7[4];
  if ((int)a2 >= 1)
  {
    while (1)
    {
      WebCore::Position::previous((uint64_t)&v29, 1, (uint64_t)&v23);
      v10 = v23;
      v23 = 0;
      v11 = v29;
      v29 = v10;
      if (!v11)
        goto LABEL_7;
      if (*((_DWORD *)v11 + 6) != 2)
        break;
      if ((*((_WORD *)v11 + 15) & 0x400) != 0)
        goto LABEL_7;
      WebCore::Node::removedLastRef(v11, v9);
      v16 = v23;
      v30 = v24;
      v31 = v25;
      v23 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v15);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
LABEL_8:
      WebCore::Position::next((uint64_t)&v26, (WebCore::Node *)1, (uint64_t)&v23);
      v13 = v23;
      v23 = 0;
      v14 = v26;
      v26 = v13;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v14, v12);
            v18 = v23;
            v27 = v24;
            v28 = v25;
            v23 = 0;
            if (v18)
            {
              if (*((_DWORD *)v18 + 6) == 2)
              {
                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v18, v17);
              }
              else
              {
                *((_DWORD *)v18 + 6) -= 2;
              }
            }
            goto LABEL_12;
          }
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      v27 = v24;
      v28 = v25;
LABEL_12:
      if (!--v3)
        goto LABEL_26;
    }
    *((_DWORD *)v11 + 6) -= 2;
LABEL_7:
    v30 = v24;
    v31 = v25;
    goto LABEL_8;
  }
LABEL_26:
  WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)&v29, (uint64_t *)&v26, a3);
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v19);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v19);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::rangeExpandedAroundRangeByCharacters@<X0>(WebCore *this@<X0>, const WebCore::VisibleSelection *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unsigned int *result;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11[3];
  WebCore::Node *v12[3];
  WebCore::Node *v13;
  int v14;
  WebCore::Node *v15;
  int v16;
  char v17;

  result = (unsigned int *)WebCore::VisibleSelection::firstRange(this, &v13);
  if (v17)
  {
    result = (unsigned int *)WebCore::rangeExpandedAroundRangeByCharacters(WebCore::VisibleSelection const&,unsigned long long,unsigned long long)::$_0::operator()(v12, (uint64_t)v13, v14, (uint64_t)a2, 1);
    if (v17)
    {
      WebCore::rangeExpandedAroundRangeByCharacters(WebCore::VisibleSelection const&,unsigned long long,unsigned long long)::$_0::operator()(v11, (uint64_t)v15, v16, a3, 0);
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v12, (uint64_t)v11, (uint64_t)a4);
      v9 = v11[0];
      v11[0] = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v8);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      result = (unsigned int *)v12[0];
      v12[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (v17)
      {
        v10 = v15;
        v15 = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v8);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        result = (unsigned int *)v13;
        v13 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
          }
          else
          {
            result[6] -= 2;
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
  return result;
}

WebCore::Node *WebCore::rangeExpandedAroundRangeByCharacters(WebCore::VisibleSelection const&,unsigned long long,unsigned long long)::$_0::operator()(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  WebCore::Node *result;
  void *v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  char v17;

  *(_DWORD *)(a2 + 24) += 2;
  v14 = (WebCore::Node *)a2;
  v15 = a3;
  v16 = 0;
  result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v14, (uint64_t)a1);
  a1[16] = 1;
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      result = (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)a2, v10);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  if (a4)
  {
    v11 = a1 + 8;
    while (1)
    {
      WebCore::positionOfNextBoundaryOfGranularity((WebCore::Node *)a1, 0, a5, (uint64_t)&v14);
      result = v14;
      if (!v14)
        return result;
      *((_DWORD *)v14 + 6) += 2;
      v13 = *(_QWORD *)a1;
      *(_QWORD *)a1 = result;
      if (!v13)
        goto LABEL_9;
      if (*(_DWORD *)(v13 + 24) != 2)
        break;
      if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
        goto LABEL_9;
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v12);
      result = v14;
      *v11 = v15;
      a1[12] = v16;
      a1[16] = v17;
      v14 = 0;
      if (result)
        goto LABEL_10;
LABEL_12:
      if (!--a4)
        return result;
    }
    *(_DWORD *)(v13 + 24) -= 2;
LABEL_9:
    *v11 = v15;
    a1[12] = v16;
    a1[16] = v17;
    v14 = 0;
LABEL_10:
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v12);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
    goto LABEL_12;
  }
  return result;
}

WebCore::Node *WebCore::wordBoundaryForPositionWithoutCrossingLine@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *result;
  WebCore::Node *v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  char v10;
  void *v11;
  const WebCore::VisiblePosition *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)();
  char v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  int v26;
  char v27;
  WebCore::Node *v28;
  int v29;
  char v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  char v40;

  result = (WebCore::Node *)WebCore::atBoundaryOfGranularity(this, (const WebCore::Node *)3, 0);
  if ((_DWORD)result)
    goto LABEL_33;
  if (WebCore::withinTextUnitOfGranularity(this, 1, 0))
  {
    v6 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
      *((_DWORD *)v6 + 6) += 2;
    v37 = v6;
    v38 = *((_DWORD *)this + 2);
    v39 = *((_BYTE *)this + 12);
    v40 = *((_BYTE *)this + 16);
    WebCore::enclosingTextUnitOfGranularity((uint64_t)this, 1, 0, &v31);
    if (v36)
    {
      v8 = v31;
      *((_DWORD *)v31 + 6) += 2;
      v9 = v32;
      v25 = v8;
      v26 = v32;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 208))(v8) & 1) == 0)
        goto LABEL_62;
      v10 = 8;
      while (1)
      {
        v27 = v10;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v25, (uint64_t)&v28);
        v13 = v37;
        v37 = v28;
        if (v13)
        {
          if (*((_DWORD *)v13 + 6) == 2)
          {
            if ((*((_WORD *)v13 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v13, v11);
          }
          else
          {
            *((_DWORD *)v13 + 6) -= 2;
          }
        }
        v38 = v29;
        v39 = v30;
        v40 = 1;
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v11);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
        if ((uint64_t)WebCore::distanceBetweenPositions((WebCore::Node **)this, &v37, v12) < 2)
          break;
        if (v36)
        {
          v14 = v34;
          *((_DWORD *)v34 + 6) += 2;
          v15 = v35;
          v25 = v14;
          v26 = v35;
          if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 208))(v14) & 1) != 0)
          {
            v16 = 8;
          }
          else if (v15)
          {
            v16 = 10;
          }
          else
          {
            v16 = 9;
          }
          v27 = v16;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v25, (uint64_t)&v28);
          v17 = v37;
          v37 = v28;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17, v7);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          v38 = v29;
          v39 = v30;
          v40 = 1;
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14, v7);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
          break;
        }
        __break(1u);
LABEL_62:
        if (v9)
          v10 = 10;
        else
          v10 = 9;
      }
      if (v36)
      {
        v18 = v34;
        v34 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v7);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        v19 = v31;
        v31 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v7);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
      }
    }
    result = v37;
    if (!v37)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v38;
      *(_BYTE *)(a2 + 12) = v39;
      *(_BYTE *)(a2 + 16) = v40;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    v20 = *((_DWORD *)v37 + 6);
    *((_DWORD *)v37 + 6) = v20 + 2;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v38;
    *(_BYTE *)(a2 + 12) = v39;
    *(_BYTE *)(a2 + 16) = v40;
    *(_BYTE *)(a2 + 24) = 1;
    v37 = 0;
    if (v20)
    {
LABEL_31:
      *((_DWORD *)result + 6) = v20;
      return result;
    }
    goto LABEL_46;
  }
  result = (WebCore::Node *)WebCore::atBoundaryOfGranularity(this, (const WebCore::Node *)1, 1);
  if ((_DWORD)result)
  {
LABEL_33:
    v21 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      *(_DWORD *)(v21 + 24) += 2;
    *(_QWORD *)a2 = v21;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 2);
    *(_BYTE *)(a2 + 12) = *((_BYTE *)this + 12);
    *(_BYTE *)(a2 + 16) = *((_BYTE *)this + 16);
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    WebCore::positionOfNextBoundaryOfGranularity(this, (const WebCore::Node *)1, 0, (uint64_t)&v31);
    result = v31;
    v22 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v31)
      v22 = 0;
    if (v22)
    {
      if (v31)
        *((_DWORD *)v31 + 6) += 2;
      v38 = v32;
      v39 = v33;
      v23 = (char)v34;
      v24 = result;
    }
    else
    {
      WebCore::endOfEditableContent(this, (uint64_t)&v37);
      v24 = v37;
      v23 = v40;
      result = v31;
    }
    *(_QWORD *)a2 = v24;
    *(_DWORD *)(a2 + 8) = v38;
    *(_BYTE *)(a2 + 12) = v39;
    *(_BYTE *)(a2 + 16) = v23;
    *(_BYTE *)(a2 + 24) = 0;
    v31 = 0;
    if (result)
    {
      v20 = *((_DWORD *)result + 6) - 2;
      if (*((_DWORD *)result + 6) != 2)
        goto LABEL_31;
LABEL_46:
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result, v7);
    }
  }
  return result;
}

unsigned int *WebCore::WebContentReader::addFragment(uint64_t a1, WebCore::Node **a2)
{
  uint64_t v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  WebCore::Node *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    result = (unsigned int *)WebCore::ContainerNode::appendChild(v2, *a2, (uint64_t)v7);
    if (v9)
    {
      result = (unsigned int *)v8;
      v8 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    result = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::FrameWebContentReader::shouldSanitize(WebCore::FrameWebContentReader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF *v9;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 296);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::originIdentifierForPasteboard((WebCore::Document *)v3, a2, &v9);
  v4 = v9;
  v7 = WTF::equal(v9, *((const WTF::StringImpl **)this + 1), v5);
  if (!v4)
  {
LABEL_6:
    if (!v3)
      return v7 ^ 1u;
    goto LABEL_7;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, v6);
  if (!v3)
    return v7 ^ 1u;
LABEL_7:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v7 ^ 1u;
}

uint64_t WebCore::WebContentReader::readFilePaths(uint64_t a1, char **a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  _BYTE v10[32];

  v2 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v2 || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296))
    return 0;
  v4 = *a2;
  v5 = 8 * v2;
  do
  {
    v10[0] = 0;
    v10[8] = 0;
    v10[16] = 0;
    v10[24] = 0;
    v9 = 0;
    WebCore::WebContentReader::readFilePath(a1, v4, (uint64_t)v10, &v9);
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v4 += 8;
    v5 -= 8;
  }
  while (v5);
  return 1;
}

void WebCore::WebCorePasteboardFileReader::~WebCorePasteboardFileReader(WebCore::WebCorePasteboardFileReader *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  int v9;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 274);
    if (*(_BYTE *)(v8 + 274))
    {
      if (v9 == 1)
      {
        if (*(_DWORD *)(v8 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        else
          --*(_DWORD *)(v8 + 312);
      }
      else if (v9 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v8 + 312));
      }
    }
    else if (*(_DWORD *)(v8 - 168) == 2)
    {
      if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v8 - 168) -= 2;
    }
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  int v9;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 274);
    if (*(_BYTE *)(v8 + 274))
    {
      if (v9 == 1)
      {
        if (*(_DWORD *)(v8 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        else
          --*(_DWORD *)(v8 + 312);
      }
      else if (v9 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v8 + 312));
      }
    }
    else if (*(_DWORD *)(v8 - 168) == 2)
    {
      if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v8 - 168) -= 2;
    }
  }
  JUMPOUT(0x19AEA7644);
}

unsigned int *WebCore::WebCorePasteboardFileReader::readFilename(WebCore::WebCorePasteboardFileReader *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  unsigned int *result;
  int v14;
  _BYTE v15[16];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1 || v4 == 2)
        ++*(_DWORD *)(v3 + 312);
    }
    else
    {
      *(_DWORD *)(v3 - 168) += 2;
    }
  }
  v5 = (uint64_t *)((char *)this + 16);
  v16 = 0;
  v17 = 0;
  v15[0] = 0;
  v15[8] = 0;
  WebCore::File::create(&v16, v3, a2, &v17, (WTF::String *)v15, (uint64_t *)&v18);
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7 == *((_DWORD *)this + 6))
  {
    v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 2, v7 + 1, (unint64_t)&v18);
    v7 = *((unsigned int *)this + 7);
    v9 = *((_QWORD *)this + 2);
    v10 = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
  }
  else
  {
    v9 = *v5;
    v10 = (uint64_t)v18;
    v18 = 0;
  }
  *(_QWORD *)(v9 + 8 * v7) = v10;
  *((_DWORD *)this + 7) = v7 + 1;
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (unsigned int *)v17;
  v17 = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      if (!v3)
        return result;
      goto LABEL_17;
    }
    *result -= 2;
  }
  if (!v3)
    return result;
LABEL_17:
  v14 = *(unsigned __int8 *)(v3 + 274);
  if (*(_BYTE *)(v3 + 274))
  {
    if (v14 == 1)
    {
      if (*(_DWORD *)(v3 + 312) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      else
        --*(_DWORD *)(v3 + 312);
    }
    else if (v14 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
    }
  }
  else if (*(_DWORD *)(v3 - 168) == 2)
  {
    if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), v6);
  }
  else
  {
    *(_DWORD *)(v3 - 168) -= 2;
  }
  return result;
}

unsigned int *WebCore::WebCorePasteboardFileReader::readBuffer(unsigned int *result, _DWORD **a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  WTF *v27;
  _QWORD *v28;
  _DWORD *v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;

  v6 = result;
  v7 = *((_QWORD *)result + 1);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 274);
    if (*(_BYTE *)(v7 + 274))
    {
      if (v8 == 1 || v8 == 2)
        ++*(_DWORD *)(v7 + 312);
    }
    else
    {
      *(_DWORD *)(v7 - 168) += 2;
    }
  }
  v9 = *a4;
  v10 = atomic_load(*a4);
  if (v10 == 1)
  {
    WebCore::FragmentedSharedBuffer::takeData((WTF *)*a4, &v30);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v26 = *((_QWORD *)v9 + 6);
    if (v26)
    {
      if (HIDWORD(v26))
      {
        __break(0xC471u);
        return result;
      }
      v27 = (WTF *)WTF::fastMalloc(*((WTF **)v9 + 6));
      LODWORD(v31) = v26;
      v30 = v27;
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E3406E88;
    v28[1] = &v30;
    v32 = v28;
    WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)v9, &v32);
    v29 = v32;
    v32 = 0;
    if (v29)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
  }
  v11 = (_DWORD *)bmalloc::api::isoAllocate();
  v12 = WebCore::Blob::Blob((uint64_t)v11, (WebCore::ScriptExecutionContext *)v7, (uint64_t)&v30, a3);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v12 + 24));
  v13 = bmalloc::api::isoAllocate();
  v15 = (_QWORD *)WebCore::Blob::Blob(v13, v14, (WebCore::ScriptExecutionContext *)v7, (uint64_t)v11);
  *v15 = off_1E33AE6D8;
  v15[3] = &unk_1E33AE718;
  v16 = v15 + 3;
  *(_QWORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  v17 = *a2;
  if (*a2)
    *v17 += 2;
  *(_QWORD *)(v13 + 144) = v17;
  *(_BYTE *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 160) = 0;
  *(_BYTE *)(v13 + 168) = 0;
  *(_BYTE *)(v13 + 176) = 0;
  *(_WORD *)(v13 + 184) = 0;
  v32 = (_DWORD *)v13;
  WebCore::ActiveDOMObject::suspendIfNeeded(v16);
  v19 = v6[7];
  if ((_DWORD)v19 == v6[6])
  {
    v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6 + 2, v19 + 1, (unint64_t)&v32);
    v21 = v6[7];
    v22 = *((_QWORD *)v6 + 2);
    v23 = *(_QWORD *)v20;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v22 + 8 * v21) = v23;
    v24 = v32;
    v6[7] = v21 + 1;
    v32 = 0;
    if (v24)
    {
      if (v24[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[4];
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v6 + 2) + 8 * v19) = v13;
    v6[7] = v19 + 1;
    v32 = 0;
  }
  if (v11[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  else
    --v11[4];
  result = (unsigned int *)v30;
  if (v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
  }
  if (v7)
  {
    v25 = *(unsigned __int8 *)(v7 + 274);
    if (*(_BYTE *)(v7 + 274))
    {
      if (v25 == 1)
      {
        if (*(_DWORD *)(v7 + 312) == 1)
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        else
          --*(_DWORD *)(v7 + 312);
      }
      else if (v25 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 312));
      }
    }
    else if (*(_DWORD *)(v7 - 168) == 2)
    {
      if ((*(_WORD *)(v7 - 162) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 192), v18);
    }
    else
    {
      *(_DWORD *)(v7 - 168) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::WrapContentsInDummySpanCommand::executeApply(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;

  v2 = this;
  v3 = *(_QWORD *)(this + 248);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 80);
  if (v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = 0;
    *(_DWORD *)(v4 + 24) += 2;
    while (1)
    {
      v8 = v4;
      v9 = v5;
      if (v5 == (_DWORD)v6)
      {
        v10 = v5 + ((unint64_t)v5 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= (unint64_t)v5 + 1)
          v6 = v5 + 1;
        else
          v6 = v11;
        if (v6 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v12 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
        this = (uint64_t)memcpy(v12, v7, 8 * v9);
        if (v7)
        {
          if (v12 == v7)
          {
            v12 = 0;
            LODWORD(v6) = 0;
          }
          this = WTF::fastFree((WTF *)v7, a2);
        }
        v7 = v12;
      }
      v13 = *(_DWORD *)(v4 + 24) + 2;
      *(_DWORD *)(v4 + 24) = v13;
      *((_QWORD *)v7 + v9) = v4;
      v4 = *(_QWORD *)(v4 + 56);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        v13 = *(_DWORD *)(v8 + 24);
      }
      v14 = v13 - 2;
      if (v14)
      {
        *(_DWORD *)(v8 + 24) = v14;
      }
      else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      {
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      v5 = v9 + 1;
      if (!v4)
        goto LABEL_25;
    }
  }
  v7 = 0;
  v5 = 0;
LABEL_25:
  v15 = *(_QWORD *)(v2 + 256);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  if (v5)
  {
    v16 = 8 * v5;
    v17 = (WebCore::Node **)v7;
    do
    {
      WebCore::ContainerNode::appendChild(v15, *v17, (uint64_t)v26);
      if (v28)
      {
        v19 = v27;
        v27 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      ++v17;
      v16 -= 8;
    }
    while (v16);
  }
  this = WebCore::ContainerNode::appendChild(v3, (WebCore::Node *)v15, (uint64_t)&v23);
  if (v25)
  {
    this = (uint64_t)v24;
    v24 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *(_DWORD *)this -= 2;
    }
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v15, v20);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, v20);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  if (v5)
  {
    v21 = 8 * v5;
    v22 = (uint64_t *)v7;
    do
    {
      this = *v22;
      *v22 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v20);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      ++v22;
      v21 -= 8;
    }
    while (v21);
  }
  if (v7)
    return WTF::fastFree((WTF *)v7, v20);
  return this;
}

uint64_t WebCore::WrapContentsInDummySpanCommand::doApply(WebCore::WrapContentsInDummySpanCommand *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  WebCore::Node *v7;
  WebCore::Node *v8;

  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::spanTag, (const WebCore::QualifiedName *)v2, 0, 0, (uint64_t *)&v8);
  v4 = v8;
  v8 = 0;
  v5 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) != 2)
    {
      *(_DWORD *)(v5 + 24) -= 2;
LABEL_4:
      v8 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
      goto LABEL_4;
    WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, v3);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
  }
LABEL_5:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return WebCore::WrapContentsInDummySpanCommand::executeApply((uint64_t)this, v3);
}

unsigned int *WebCore::WrapContentsInDummySpanCommand::doUnapply(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  unsigned int **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  unsigned int **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char v26[8];
  WTF::StringImpl *v27;
  char v28;

  if (*((_QWORD *)this + 32))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 31);
    *(_DWORD *)(v2 + 24) += 2;
    this = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
    if (!(_DWORD)this)
      goto LABEL_52;
    v4 = *((_QWORD *)v1 + 32);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    v5 = *(unsigned int ***)(v4 + 80);
    if (v5)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      v8 = 0;
      *((_DWORD *)v5 + 6) += 2;
      do
      {
        v9 = v5;
        v10 = v6;
        if (v6 == (_DWORD)v7)
        {
          v11 = v6 + 1;
          v12 = v10 + (v10 >> 2);
          if (v12 >= 0x10)
            v13 = v12 + 1;
          else
            v13 = 16;
          if (v13 <= v11)
            v7 = v10 + 1;
          else
            v7 = v13;
          if (v7 >> 29)
          {
            __break(0xC471u);
            return this;
          }
          v14 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
          this = (unsigned int *)memcpy(v14, v8, 8 * v10);
          if (v8)
          {
            if (v14 == v8)
            {
              v14 = 0;
              LODWORD(v7) = 0;
            }
            this = (unsigned int *)WTF::fastFree((WTF *)v8, v3);
          }
          v8 = v14;
        }
        v15 = *((_DWORD *)v9 + 6) + 2;
        *((_DWORD *)v9 + 6) = v15;
        *(_QWORD *)&v8[8 * v10] = v9;
        v5 = (unsigned int **)v9[7];
        if (v5)
        {
          *((_DWORD *)v5 + 6) += 2;
          v15 = *((_DWORD *)v9 + 6);
        }
        v16 = v15 - 2;
        if (v16)
        {
          *((_DWORD *)v9 + 6) = v16;
        }
        else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v9, v3);
        }
        v6 = v10 + 1;
      }
      while (v5);
      v5 = (unsigned int **)&v8[8 * v6];
      if ((_DWORD)v10 == -1)
        goto LABEL_38;
      v17 = 0;
      do
      {
        this = (unsigned int *)WebCore::ContainerNode::appendChild(v2, *(WebCore::Node **)&v8[v17], (uint64_t)v26);
        if (v28)
        {
          this = (unsigned int *)v27;
          v27 = 0;
          if (this)
          {
            if (*this == 2)
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v3);
            else
              *this -= 2;
          }
        }
        v17 += 8;
      }
      while (8 * (v10 + 1) != v17);
      v18 = 0;
    }
    else
    {
      v8 = 0;
LABEL_38:
      v18 = 1;
    }
    v19 = *(_QWORD *)(v4 + 32);
    if (v19)
    {
      *(_DWORD *)(v19 + 24) += 2;
      this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v19, (WebCore::Node *)v4, &v23);
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        v20 = *(_WORD *)(v19 + 30);
        if ((v20 & 0x400) == 0)
        {
          v21 = *(_WORD *)(v19 + 28);
          if ((v21 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v19, v3);
          }
          else
          {
            if ((v21 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
              v20 = *(_WORD *)(v19 + 30);
            }
            *(_WORD *)(v19 + 30) = v20 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
          }
        }
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
    }
    if ((_BYTE)v25)
    {
      this = (unsigned int *)v24;
      v24 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v3);
        else
          *this -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if ((v18 & 1) == 0)
    {
      v22 = (unsigned int **)v8;
      do
      {
        this = *v22;
        *v22 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, v3);
          }
          else
          {
            this[6] -= 2;
          }
        }
        ++v22;
      }
      while (v22 != v5);
    }
    if (v8)
      this = (unsigned int *)WTF::fastFree((WTF *)v8, v3);
    if (v2)
    {
LABEL_52:
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::WrapContentsInDummySpanCommand::doReapply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;

  if (*(_QWORD *)(this + 256))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 248);
    *(_DWORD *)(v2 + 24) += 2;
    this = WebCore::Node::computeEditability(v2, 0, 1);
    v4 = this;
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    if (v4)
      return WebCore::WrapContentsInDummySpanCommand::executeApply(v1, v3);
  }
  return this;
}

void WebCore::TypingCommand::~TypingCommand(WebCore::TypingCommand *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::TypingCommand::preservesTypingStyle(WebCore::TypingCommand *this)
{
  return *((unsigned __int8 *)this + 311);
}

uint64_t WebCore::TypingCommand::shouldRetainAutocorrectionIndicator(WebCore::TypingCommand *this)
{
  return *((unsigned __int8 *)this + 314);
}

uint64_t WebCore::TypingCommand::shouldStopCaretBlinking(WebCore::TypingCommand *this)
{
  return 1;
}

void WebCore::UnlinkCommand::~UnlinkCommand(WebCore::UnlinkCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::UnlinkCommand::editingAction(WebCore::UnlinkCommand *this)
{
  return 57;
}

void WebCore::WrapContentsInDummySpanCommand::~WrapContentsInDummySpanCommand(WebCore::WrapContentsInDummySpanCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33AE1C0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::WrapContentsInDummySpanCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::WrapContentsInDummySpanCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33AE1C0;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33A9E38;
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::WrapContentsInDummySpanCommand *)((char *)this + 128));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::WrapContentsInDummySpanCommand *)((char *)this + 24));
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WTF::fastFree(this, v8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21formattingContextRootEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 24) + 16);
  if ((*(_BYTE *)(result + 52) & 7) != 1)
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21formattingContextRootEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 32);
  if (v2)
    result = *(_QWORD *)(v2 + 8);
  else
    result = 0;
  if ((*(_BYTE *)(result + 45) & 8) == 0 || (*(_BYTE *)(result + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195B59CACLL);
  }
  return result;
}

void WebCore::LineSelection::logicalRect(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InlineIterator::LineBox *v6;
  char v7;
  char *v8;

  v1 = a1[4];
  if ((_DWORD)v1 == -1)
    goto LABEL_6;
  v8 = &v7;
  ((void (*)(char **, unsigned int *))off_1E33AE2A8[v1])(&v8, a1);
  v3 = a1[4];
  if ((_DWORD)v3 == -1
    || (v8 = &v7,
        (*(&off_1E33AE2B8 + v3))((int)&v8, (WebCore::InlineIterator::LineBoxIteratorModernPath *)a1),
        v4 = a1[4],
        (_DWORD)v4 == -1)
    || (v8 = &v7,
        ((void (*)(char **, unsigned int *))off_1E33AE2C8[v4])(&v8, a1),
        v5 = a1[4],
        (_DWORD)v5 == -1))
  {
LABEL_6:
    v6 = (WebCore::InlineIterator::LineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::InlineIterator::LineBox::contentLogicalTopAdjustedForPrecedingLineBox(v6);
  }
  else
  {
    v8 = &v7;
    (*(&off_1E33AE2D8 + v5))((int)&v8, (WebCore::InlineIterator::LineBoxIteratorModernPath *)a1);
  }
}

uint64_t WebCore::InlineIterator::LineBox::contentLogicalTopAdjustedForPrecedingLineBox(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator::LineBox *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::LineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::LineBox::contentLogicalBottomAdjustedForFollowingLineBox(v3);
  }
  else
  {
    v5 = &v4;
    return (*(&off_1E33AE2B8 + v1))((int)&v5, this);
  }
}

void WebCore::InlineIterator::LineBox::contentLogicalBottomAdjustedForFollowingLineBox(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v2 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18contentLogicalLeftEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(v2, v3);
  }
  else
  {
    v5 = &v4;
    (*(&off_1E33AE2D8 + v1))((int)&v5, this);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18contentLogicalLeftEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18contentLogicalLeftEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = 44;
  if ((*(_WORD *)(v2 + 52) & 0x800) == 0)
    v3 = 48;
  return *(float *)(v2 + v3);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox44contentLogicalTopAdjustedForPrecedingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(int a1, WebCore::InlineIterator::LineBoxIteratorModernPath *this)
{
  return WebCore::InlineIterator::LineBoxIteratorModernPath::contentLogicalTopAdjustedForPrecedingLineBox(this);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox44contentLogicalTopAdjustedForPrecedingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  WebCore::LegacyRootInlineBox *v9;

  v2 = *a2;
  if (*a2)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 45) & 8) == 0)
    goto LABEL_15;
  v4 = *(_DWORD *)(v2 + 116);
  v5 = (unsigned __int16)*(_DWORD *)(v3 + 124) >> 13;
  v6 = v5 > 4;
  v7 = (1 << v5) & 0x16;
  if (v6 || v7 == 0)
  {
    v9 = *(WebCore::LegacyRootInlineBox **)(v2 + 88);
    if (v9)
    {
      if (((*(uint64_t (**)(WebCore::LegacyRootInlineBox *))(*(_QWORD *)v9 + 88))(v9) & 1) != 0)
      {
        v4 = WebCore::LegacyRootInlineBox::selectionBottom(v9);
        return (float)v4 * 0.015625;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x195B59F7CLL);
    }
  }
  return (float)v4 * 0.015625;
}

float WebCore::InlineIterator::LineBoxIteratorModernPath::contentLogicalTopAdjustedForPrecedingLineBox(WebCore::InlineIterator::LineBoxIteratorModernPath *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  float result;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
  if ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = v3 > 4;
  v5 = (1 << v3) & 0x16;
  v6 = v4 || v5 == 0;
  if (!v6 || (v7 = *((_QWORD *)this + 1)) == 0)
  {
    v8 = *((_QWORD *)this + 1);
    if (v8 >= *(unsigned int *)(v1 + 44))
    {
      __break(0xC471u);
      JUMPOUT(0x195B5A0A4);
    }
    return *(float *)(*(_QWORD *)(v1 + 32) + 152 * v8 + 96);
  }
  WebCore::InlineIterator::LineBoxIteratorModernPath::LineBoxIteratorModernPath((WebCore::InlineIterator::LineBoxIteratorModernPath *)&v16, (const WebCore::LayoutIntegration::InlineContent *)v1, v7 - 1);
  v11 = (unsigned int *)v16;
  v12 = *(_QWORD *)(v16 + 8);
  if (v17 >= *(unsigned int *)(v12 + 44))
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x195B5A09CLL);
  }
  result = *(float *)(*(_QWORD *)(v12 + 32) + 152 * v17 + 100);
  v16 = 0;
  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
  {
    atomic_store(1u, v11);
    v15 = result;
    WTF::fastFree((WTF *)v11, v10);
    return v15;
  }
  return result;
}

WebCore::InlineIterator::LineBoxIteratorModernPath *WebCore::InlineIterator::LineBoxIteratorModernPath::LineBoxIteratorModernPath(WebCore::InlineIterator::LineBoxIteratorModernPath *this, const WebCore::LayoutIntegration::InlineContent *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    goto LABEL_12;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v10 = *(unsigned int **)a2;
  *(_QWORD *)a2 = v5;
  if (!v10)
    goto LABEL_12;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
LABEL_12:
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = a3;
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox19contentLogicalRightEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox19contentLogicalRightEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v3 = 44;
  if ((*(_WORD *)(v2 + 52) & 0x800) == 0)
    v3 = 48;
  return *(float *)(v2 + v3) + *(float *)(v2 + 40);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(int a1, WebCore::InlineIterator::LineBoxIteratorModernPath *this)
{
  return WebCore::InlineIterator::LineBoxIteratorModernPath::contentLogicalBottomAdjustedForFollowingLineBox(this);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WebCore::LegacyRootInlineBox *v2;

  if (*(_QWORD *)a2)
    v2 = *(WebCore::LegacyRootInlineBox **)(*(_QWORD *)a2 + 8);
  else
    v2 = 0;
  return (float)(int)WebCore::LegacyRootInlineBox::selectionBottom(v2) * 0.015625;
}

float WebCore::InlineIterator::LineBoxIteratorModernPath::contentLogicalBottomAdjustedForFollowingLineBox(WebCore::InlineIterator::LineBoxIteratorModernPath *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
  if ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = v3 > 4;
  v5 = (1 << v3) & 0x16;
  if (v4 || v5 == 0)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *(unsigned int *)(v1 + 44);
  }
  else
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *(unsigned int *)(v1 + 44);
    if (v7 != v8 - 1)
    {
      WebCore::InlineIterator::LineBoxIteratorModernPath::LineBoxIteratorModernPath((WebCore::InlineIterator::LineBoxIteratorModernPath *)&v16, (const WebCore::LayoutIntegration::InlineContent *)v1, v7 + 1);
      v11 = (unsigned int *)v16;
      v12 = *(_QWORD *)(v16 + 8);
      if (v17 < *(unsigned int *)(v12 + 44))
      {
        v15 = *(float *)(*(_QWORD *)(v12 + 32) + 152 * v17 + 96);
        v16 = 0;
        do
        {
          v13 = __ldaxr(v11);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v11));
        if (!v14)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v10);
        }
        return v15;
      }
      __break(0xC471u);
LABEL_20:
      JUMPOUT(0x195B5A294);
    }
  }
  if (v7 >= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195B5A304);
  }
  return *(float *)(*(_QWORD *)(v1 + 32) + 152 * v7 + 100);
}

uint64_t WebCore::InlineIterator::Box::isText(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  int v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::logicallyPreviousBox(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33AE2E8[v1])(&v5, this);
  }
}

uint64_t WebCore::logicallyPreviousBox(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  WebCore::InlineIterator::BoxIterator *v35;
  char **v36;
  _BYTE v37[16];
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  WebCore::Node *v49[2];
  _BYTE v50[16];
  int v51;
  _QWORD v52[2];
  unsigned int v53;
  _QWORD v54[2];
  unsigned int v55;
  _BYTE v56[16];
  int v57;
  char v58;
  _QWORD v59[2];

  v56[0] = 0;
  v57 = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(WTF **, _BYTE *, uint64_t))off_1E33AE288[v10])(&v39, v56, a3);
    v57 = v10;
  }
  WebCore::previousTextOrLineBreakBox((_QWORD *)a1, (WebCore::InlineIterator::BoxIterator *)v56, a4);
  if (v57 != -1)
    ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v57])(&v39, v56);
  v57 = -1;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
  if (!(_DWORD)result)
    return result;
  v12 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v12 != -1)
    ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v12])(&v39, a1);
  *(_DWORD *)(a1 + 16) = -1;
  v13 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v13 == -1)
    goto LABEL_107;
  v39 = (WTF *)v54;
  ((void (*)(_QWORD *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v13])(v52, &v39, a3);
  LOBYTE(v39) = 0;
  v41 = -1;
  v14 = v53;
  if (v53 == -1)
    goto LABEL_107;
  ((void (*)(_QWORD *, WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v53])(v54, &v39, v52);
  v41 = v14;
  v54[0] = v49;
  ((void (*)(_QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v14])(v54, &v39);
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  v15 = v41;
  if (v41 != -1)
  {
    ((void (*)(WebCore::Node **, _QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v41])(v49, v54, &v39);
    v55 = v15;
    if (v41 != -1)
      ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v41])(v49, &v39);
  }
  if (v53 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E33AE258[v53])(&v39, v52);
  if (v55 == -1)
  {
LABEL_107:
    v34 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::previousTextOrLineBreakBox(v34, v35, v36);
  }
  v39 = (WTF *)v52;
  result = ((uint64_t (*)(WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v55])(&v39, v54);
  if ((result & 1) != 0)
    goto LABEL_25;
  v50[0] = 0;
  v51 = -1;
  v16 = v55;
  if (v55 != -1)
  {
    ((void (*)(WTF **, _BYTE *, _QWORD *))off_1E33AE2F8[v55])(&v39, v50, v54);
    v51 = v16;
  }
  WebCore::endTextOrLineBreakBox(a1, (WebCore::InlineIterator::LineBoxIterator *)v50, (uint64_t *)a4);
  if (v51 != -1)
    ((void (*)(WTF **, _BYTE *))off_1E33AE258[v51])(&v39, v50);
  v51 = -1;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
  if ((_DWORD)result)
  {
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17 != -1)
      result = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v17])(&v39, a1);
    *(_DWORD *)(a1 + 16) = -1;
LABEL_25:
    v18 = 1;
    goto LABEL_27;
  }
  v18 = 0;
LABEL_27:
  if (v55 != -1)
    result = ((uint64_t (*)(WTF **, _QWORD *))off_1E33AE258[v55])(&v39, v54);
  if (v18)
  {
    while (1)
    {
      v19 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v19 == -1)
        goto LABEL_107;
      v39 = (WTF *)v54;
      result = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v19])(&v39, a3);
      v20 = result;
      v21 = *(_BYTE *)(result + 45);
      if ((v21 & 1) != 0 || (result = *(_QWORD *)(*(_QWORD *)(result + 24) + 8)) == 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_105;
      }
      else
      {
        if ((~*(unsigned __int16 *)(result + 28) & 0x408) == 0)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 368))(result);
          if ((_DWORD)result)
            goto LABEL_105;
          v21 = *(_BYTE *)(v20 + 45);
        }
        if ((v21 & 1) != 0)
          goto LABEL_105;
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8);
      if (!v22)
        goto LABEL_105;
      *(_DWORD *)(v22 + 24) += 2;
      result = WebCore::previousLineCandidatePosition((uint64_t *)v49, v22, a2, 0);
      if (v49[0])
        break;
      v24 = 3;
LABEL_93:
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v22);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
      if (v24)
      {
        if (v24 == 1)
          return result;
LABEL_105:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 16) = 1;
        return result;
      }
    }
    WebCore::RenderedPosition::RenderedPosition((uint64_t)&v39, (WebCore::Position *)v49, (const WebCore::Node *)1);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v40) & 1) != 0)
    {
      v54[0] = 0;
      v55 = 1;
      v23 = 1;
    }
    else
    {
      if (v42 == -1)
        goto LABEL_107;
      v52[0] = v59;
      ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(v54, v52, &v40);
      v23 = v55;
      if (v55 == -1)
        goto LABEL_107;
    }
    v52[0] = v59;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v23])(v52, v54) & 1) != 0)
    {
      v24 = 3;
LABEL_75:
      if (v55 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v55])(v52, v54);
      if (v48)
      {
        if (v47 != -1)
          ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v47])(v54, &v46);
        v47 = -1;
      }
      if (v45)
      {
        if (v44 != -1)
          ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v44])(v54, &v43);
        v44 = -1;
      }
      if (v42 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v42])(v54, &v40);
      v42 = -1;
      v33 = v39;
      v39 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v25);
        else
          --*(_DWORD *)v33;
      }
      result = (uint64_t)v49[0];
      v49[0] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      goto LABEL_93;
    }
    v26 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v26 == -1)
      goto LABEL_107;
    v59[0] = &v58;
    ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v26])(v52, v59, a3);
    v27 = v53;
    v28 = v53 == (unint64_t)v55;
    if (v53 == 0xFFFFFFFFLL)
      v28 = 0;
    if (v55 == 0xFFFFFFFFLL)
      v29 = v53 == 0xFFFFFFFFLL;
    else
      v29 = v28;
    if (v55 != -1 && v28)
    {
      v59[0] = &v58;
      v29 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v55])(v59, v54, v52);
      v27 = v53;
    }
    if (v27 != 0xFFFFFFFFLL)
      ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v27])(v59, v52);
    if ((v29 & 1) == 0)
    {
      v37[0] = 0;
      v38 = -1;
      v30 = v55;
      if (v55 != -1)
      {
        ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E33AE2F8[v55])(v52, v37, v54);
        v38 = v30;
      }
      WebCore::endTextOrLineBreakBox(a1, (WebCore::InlineIterator::LineBoxIterator *)v37, (uint64_t *)a4);
      if (v38 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E33AE258[v38])(v52, v37);
      v38 = -1;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1) & 1) == 0)
      {
        v24 = 1;
        *a5 = 1;
        goto LABEL_75;
      }
      v31 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v31 != -1)
        ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v31])(v52, a1);
      *(_DWORD *)(a1 + 16) = -1;
    }
    WebCore::InlineIterator::firstLeafOnLineInLogicalOrder((WebCore::InlineIterator::LineBoxIterator *)v54, (uint64_t *)a4, (uint64_t)v52);
    v32 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v32 == -1)
    {
      if (v53 == -1)
      {
LABEL_73:
        v24 = 0;
        goto LABEL_75;
      }
    }
    else if (v53 == -1)
    {
      ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v32])(v59, a3);
      *(_DWORD *)(a3 + 16) = -1;
      goto LABEL_71;
    }
    v59[0] = a3;
    ((void (*)(_QWORD *, uint64_t, _QWORD *))off_1E33AE308[v53])(v59, a3, v52);
LABEL_71:
    if (v53 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v53])(v59, v52);
    goto LABEL_73;
  }
  return result;
}

uint64_t WebCore::previousTextOrLineBreakBox(_QWORD *a1, WebCore::InlineIterator::BoxIterator *this, char **a3)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BYTE v16[16];
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  WebCore::InlineIterator::BoxIterator *v20;

  do
  {
    result = WebCore::InlineIterator::BoxIterator::atEnd(this);
    if ((result & 1) != 0)
    {
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 4) = 1;
      return result;
    }
    result = WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded((unsigned int *)this, a3);
    v7 = *a3;
    v8 = *((_QWORD *)*a3 + 5);
    if (v8)
    {
      v9 = v8 - 1;
      *((_QWORD *)v7 + 5) = v9;
      if (v9 >= *((unsigned int *)v7 + 9))
        goto LABEL_37;
      v10 = *((_QWORD *)v7 + 3) + 24 * v9;
      LOBYTE(v18[0]) = 0;
      LODWORD(v19) = -1;
      v11 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v11 == -1)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_9;
      }
      ((void (*)(WebCore::InlineIterator::BoxIterator **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v11])(&v20, v18);
    }
    else
    {
      v18[0] = 0;
      v18[1] = 0;
      v11 = 1;
      v19 = 0;
    }
    LODWORD(v19) = v11;
LABEL_9:
    v12 = *((unsigned int *)this + 4);
    if ((_DWORD)v12 == -1)
    {
      if (v11 == 0xFFFFFFFFLL)
      {
        v16[0] = 0;
        LODWORD(v13) = -1;
        goto LABEL_19;
      }
LABEL_14:
      v20 = this;
      ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *, _QWORD *))off_1E33AE308[v11])(&v20, this, v18);
      goto LABEL_15;
    }
    if (v11 != 0xFFFFFFFFLL)
      goto LABEL_14;
    ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v12])(&v20, this);
    *((_DWORD *)this + 4) = -1;
LABEL_15:
    if ((_DWORD)v19 != -1)
      ((void (*)(WebCore::InlineIterator::BoxIterator **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v19])(&v20, v18);
    v13 = *((unsigned int *)this + 4);
    v16[0] = 0;
    v17 = -1;
    if ((_DWORD)v13 == -1)
      goto LABEL_20;
    ((void (*)(_QWORD *, _BYTE *, WebCore::InlineIterator::BoxIterator *))off_1E33AE288[v13])(v18, v16, this);
LABEL_19:
    v17 = v13;
LABEL_20:
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v16);
    if ((result & 1) != 0)
      goto LABEL_25;
    result = WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v16);
    if ((result & 1) != 0)
      goto LABEL_22;
    if (v17 == -1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
      __break(0xC471u);
      return result;
    }
    v18[0] = &v20;
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v17])(v18, v16);
    if (*(_BYTE *)(result + 46) == 17)
    {
      if ((*(_BYTE *)(result + 52) & 7) != 2)
      {
LABEL_22:
        v14 = 1;
        goto LABEL_26;
      }
      v14 = (*(_BYTE *)(result + 53) & 1) == 0;
    }
    else
    {
LABEL_25:
      v14 = 0;
    }
LABEL_26:
    if (v17 != -1)
      result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v17])(v18, v16);
    v17 = -1;
  }
  while (!v14);
  *(_BYTE *)a1 = 0;
  *((_DWORD *)a1 + 4) = -1;
  v15 = *((unsigned int *)this + 4);
  if ((_DWORD)v15 != -1)
  {
    result = ((uint64_t (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::BoxIterator *))off_1E33AE248[v15])(v18, a1, this);
    *((_DWORD *)a1 + 4) = v15;
  }
  return result;
}

void WebCore::endTextOrLineBreakBox(uint64_t a1, WebCore::InlineIterator::LineBoxIterator *a2, uint64_t *a3)
{
  int v5;
  _BOOL4 v6;
  _BYTE *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  _BYTE v13[16];
  int v14;
  _BYTE v15[16];
  int v16;
  _BYTE v17[16];
  int v18;
  char v19;
  char *v20;

  WebCore::InlineIterator::lastLeafOnLineInLogicalOrder(a2, a3, (uint64_t)v17);
  v15[0] = 0;
  v16 = -1;
  v5 = v18;
  if (v18 != -1)
  {
    ((void (*)(char **, _BYTE *, _BYTE *))off_1E33AE288[v18])(&v20, v15, v17);
    v16 = v5;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15) & 1) != 0)
    goto LABEL_8;
  if ((WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v15) & 1) != 0)
  {
LABEL_5:
    v6 = 1;
    goto LABEL_9;
  }
  if (v16 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(v10, v11, v12);
    return;
  }
  v20 = &v19;
  v7 = (_BYTE *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v16])(&v20, v15);
  if (v7[46] == 17)
  {
    if ((v7[52] & 7) != 2)
      goto LABEL_5;
    v6 = (v7[53] & 1) == 0;
  }
  else
  {
LABEL_8:
    v6 = 0;
  }
LABEL_9:
  if (v16 != -1)
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v16])(&v20, v15);
  v16 = -1;
  if (v6)
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v8 = v18;
    if (v18 == -1)
      return;
    ((void (*)(char **, uint64_t, _BYTE *))off_1E33AE248[v18])(&v20, a1, v17);
    *(_DWORD *)(a1 + 16) = v8;
  }
  else
  {
    v13[0] = 0;
    v14 = -1;
    v9 = v18;
    if (v18 != -1)
    {
      ((void (*)(char **, _BYTE *, _BYTE *))off_1E33AE288[v18])(&v20, v13, v17);
      v14 = v9;
    }
    WebCore::previousTextOrLineBreakBox((_QWORD *)a1, (WebCore::InlineIterator::BoxIterator *)v13, (char **)a3);
    if (v14 != -1)
      ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v14])(&v20, v13);
    v14 = -1;
  }
  if (v18 != -1)
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v18])(&v20, v17);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;

  v3 = *a3;
  if (*a3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = a3[1];
  *a2 = v3;
  a2[1] = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = *a3;
  if (*a3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v3;
}

uint64_t WebCore::logicallyNextBox(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  WebCore::InlineIterator::BoxIterator *v35;
  char **v36;
  _BYTE v37[16];
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  WebCore::Node *v49[2];
  _BYTE v50[16];
  int v51;
  unsigned int v52[4];
  unsigned int v53;
  _QWORD v54[2];
  unsigned int v55;
  _BYTE v56[16];
  int v57;
  char v58;
  _QWORD v59[2];

  v56[0] = 0;
  v57 = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(WTF **, _BYTE *, uint64_t))off_1E33AE288[v10])(&v39, v56, a3);
    v57 = v10;
  }
  WebCore::nextTextOrLineBreakBox((_QWORD *)a1, (WebCore::InlineIterator::BoxIterator *)v56, a4);
  if (v57 != -1)
    ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v57])(&v39, v56);
  v57 = -1;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
  if (!(_DWORD)result)
    return result;
  v12 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v12 != -1)
    ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v12])(&v39, a1);
  *(_DWORD *)(a1 + 16) = -1;
  v13 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v13 == -1)
    goto LABEL_107;
  v39 = (WTF *)v54;
  ((void (*)(unsigned int *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v13])(v52, &v39, a3);
  LOBYTE(v39) = 0;
  v41 = -1;
  v14 = v53;
  if (v53 == -1)
    goto LABEL_107;
  ((void (*)(_QWORD *, WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v53])(v54, &v39, v52);
  v41 = v14;
  v54[0] = v49;
  ((void (*)(_QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v14])(v54, &v39);
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  v15 = v41;
  if (v41 != -1)
  {
    ((void (*)(WebCore::Node **, _QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v41])(v49, v54, &v39);
    v55 = v15;
    if (v41 != -1)
      ((void (*)(WebCore::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v41])(v49, &v39);
  }
  if (v53 != -1)
    ((void (*)(WTF **, unsigned int *))off_1E33AE258[v53])(&v39, v52);
  if (v55 == -1)
  {
LABEL_107:
    v34 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::nextTextOrLineBreakBox(v34, v35, v36);
  }
  v39 = (WTF *)v52;
  result = ((uint64_t (*)(WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v55])(&v39, v54);
  if ((result & 1) != 0)
    goto LABEL_25;
  v50[0] = 0;
  v51 = -1;
  v16 = v55;
  if (v55 != -1)
  {
    ((void (*)(WTF **, _BYTE *, _QWORD *))off_1E33AE2F8[v55])(&v39, v50, v54);
    v51 = v16;
  }
  WebCore::startTextOrLineBreakBox(a1, (WebCore::InlineIterator::LineBoxIterator *)v50, (uint64_t *)a4);
  if (v51 != -1)
    ((void (*)(WTF **, _BYTE *))off_1E33AE258[v51])(&v39, v50);
  v51 = -1;
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
  if ((_DWORD)result)
  {
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17 != -1)
      result = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v17])(&v39, a1);
    *(_DWORD *)(a1 + 16) = -1;
LABEL_25:
    v18 = 1;
    goto LABEL_27;
  }
  v18 = 0;
LABEL_27:
  if (v55 != -1)
    result = ((uint64_t (*)(WTF **, _QWORD *))off_1E33AE258[v55])(&v39, v54);
  if (v18)
  {
    while (1)
    {
      v19 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v19 == -1)
        goto LABEL_107;
      v39 = (WTF *)v54;
      result = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v19])(&v39, a3);
      v20 = result;
      v21 = *(_BYTE *)(result + 45);
      if ((v21 & 1) != 0 || (result = *(_QWORD *)(*(_QWORD *)(result + 24) + 8)) == 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_105;
      }
      else
      {
        if ((~*(unsigned __int16 *)(result + 28) & 0x408) == 0)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 368))(result);
          if ((_DWORD)result)
            goto LABEL_105;
          v21 = *(_BYTE *)(v20 + 45);
        }
        if ((v21 & 1) != 0)
          goto LABEL_105;
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8);
      if (!v22)
        goto LABEL_105;
      *(_DWORD *)(v22 + 24) += 2;
      result = (uint64_t)WebCore::nextLineCandidatePosition((uint64_t *)v49, (WebCore *)v22, a2, 0);
      if (v49[0])
        break;
      v24 = 3;
LABEL_93:
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v22);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
      if (v24)
      {
        if (v24 == 1)
          return result;
LABEL_105:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 16) = 1;
        return result;
      }
    }
    WebCore::RenderedPosition::RenderedPosition((uint64_t)&v39, (WebCore::Position *)v49, (const WebCore::Node *)1);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v40) & 1) != 0)
    {
      v54[0] = 0;
      v55 = 1;
      v23 = 1;
    }
    else
    {
      if (v42 == -1)
        goto LABEL_107;
      *(_QWORD *)v52 = v59;
      ((void (*)(_QWORD *__return_ptr, unsigned int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(v54, v52, &v40);
      v23 = v55;
      if (v55 == -1)
        goto LABEL_107;
    }
    *(_QWORD *)v52 = v59;
    if ((((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v23])(v52, v54) & 1) != 0)
    {
      v24 = 3;
LABEL_75:
      if (v55 != -1)
        ((void (*)(unsigned int *, _QWORD *))off_1E33AE258[v55])(v52, v54);
      if (v48)
      {
        if (v47 != -1)
          ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v47])(v54, &v46);
        v47 = -1;
      }
      if (v45)
      {
        if (v44 != -1)
          ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v44])(v54, &v43);
        v44 = -1;
      }
      if (v42 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v42])(v54, &v40);
      v42 = -1;
      v33 = v39;
      v39 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v25);
        else
          --*(_DWORD *)v33;
      }
      result = (uint64_t)v49[0];
      v49[0] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      goto LABEL_93;
    }
    v26 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v26 == -1)
      goto LABEL_107;
    v59[0] = &v58;
    ((void (*)(unsigned int *__return_ptr, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v26])(v52, v59, a3);
    v27 = v53;
    v28 = v53 == (unint64_t)v55;
    if (v53 == 0xFFFFFFFFLL)
      v28 = 0;
    if (v55 == 0xFFFFFFFFLL)
      v29 = v53 == 0xFFFFFFFFLL;
    else
      v29 = v28;
    if (v55 != -1 && v28)
    {
      v59[0] = &v58;
      v29 = ((uint64_t (*)(_QWORD *, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v55])(v59, v54, v52);
      v27 = v53;
    }
    if (v27 != 0xFFFFFFFFLL)
      ((void (*)(_QWORD *, unsigned int *))off_1E33AE258[v27])(v59, v52);
    if ((v29 & 1) == 0)
    {
      v37[0] = 0;
      v38 = -1;
      v30 = v55;
      if (v55 != -1)
      {
        ((void (*)(unsigned int *, _BYTE *, _QWORD *))off_1E33AE2F8[v55])(v52, v37, v54);
        v38 = v30;
      }
      WebCore::startTextOrLineBreakBox(a1, (WebCore::InlineIterator::LineBoxIterator *)v37, (uint64_t *)a4);
      if (v38 != -1)
        ((void (*)(unsigned int *, _BYTE *))off_1E33AE258[v38])(v52, v37);
      v38 = -1;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1) & 1) == 0)
      {
        v24 = 1;
        *a5 = 1;
        goto LABEL_75;
      }
      v31 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v31 != -1)
        ((void (*)(unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v31])(v52, a1);
      *(_DWORD *)(a1 + 16) = -1;
    }
    WebCore::InlineIterator::lastLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v54, (uint64_t *)a4, v52);
    v32 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v32 == -1)
    {
      if (v53 == -1)
      {
LABEL_73:
        v24 = 0;
        goto LABEL_75;
      }
    }
    else if (v53 == -1)
    {
      ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v32])(v59, a3);
      *(_DWORD *)(a3 + 16) = -1;
      goto LABEL_71;
    }
    v59[0] = a3;
    ((void (*)(_QWORD *, uint64_t, unsigned int *))off_1E33AE308[v53])(v59, a3, v52);
LABEL_71:
    if (v53 != -1)
      ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v53])(v59, v52);
    goto LABEL_73;
  }
  return result;
}

uint64_t WebCore::nextTextOrLineBreakBox(_QWORD *a1, WebCore::InlineIterator::BoxIterator *this, char **a3)
{
  uint64_t result;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  WebCore::InlineIterator::LineBoxIterator *v16;
  _BYTE v17[16];
  int v18;
  _QWORD v19[2];
  uint64_t v20;
  WebCore::InlineIterator::BoxIterator *v21;

  do
  {
    result = WebCore::InlineIterator::BoxIterator::atEnd(this);
    if ((result & 1) != 0)
    {
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 4) = 1;
      return result;
    }
    WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded((unsigned int *)this, a3);
    v7 = *a3;
    v8 = *((_QWORD *)*a3 + 5) + 1;
    *((_QWORD *)v7 + 5) = v8;
    if (v8 >= *((unsigned int *)v7 + 9))
    {
      v19[0] = 0;
      v19[1] = 0;
      v10 = 1;
      v20 = 0;
    }
    else
    {
      v9 = *((_QWORD *)v7 + 3) + 24 * v8;
      LOBYTE(v19[0]) = 0;
      LODWORD(v20) = -1;
      v10 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v10 == -1)
      {
        v10 = 0xFFFFFFFFLL;
        goto LABEL_8;
      }
      ((void (*)(WebCore::InlineIterator::BoxIterator **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v10])(&v21, v19);
    }
    LODWORD(v20) = v10;
LABEL_8:
    v11 = *((unsigned int *)this + 4);
    if ((_DWORD)v11 == -1)
    {
      if (v10 == 0xFFFFFFFFLL)
      {
        v17[0] = 0;
        LODWORD(v12) = -1;
        goto LABEL_18;
      }
LABEL_13:
      v21 = this;
      ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *, _QWORD *))off_1E33AE308[v10])(&v21, this, v19);
      goto LABEL_14;
    }
    if (v10 != 0xFFFFFFFFLL)
      goto LABEL_13;
    ((void (*)(WebCore::InlineIterator::BoxIterator **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v11])(&v21, this);
    *((_DWORD *)this + 4) = -1;
LABEL_14:
    if ((_DWORD)v20 != -1)
      ((void (*)(WebCore::InlineIterator::BoxIterator **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v20])(&v21, v19);
    v12 = *((unsigned int *)this + 4);
    v17[0] = 0;
    v18 = -1;
    if ((_DWORD)v12 == -1)
      goto LABEL_19;
    ((void (*)(_QWORD *, _BYTE *, WebCore::InlineIterator::BoxIterator *))off_1E33AE288[v12])(v19, v17, this);
LABEL_18:
    v18 = v12;
LABEL_19:
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v17);
    if ((result & 1) != 0)
      goto LABEL_24;
    result = WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v17);
    if ((result & 1) != 0)
      goto LABEL_21;
    if (v18 == -1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::startTextOrLineBreakBox(v15, v16);
    }
    v19[0] = &v21;
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v18])(v19, v17);
    if (*(_BYTE *)(result + 46) == 17)
    {
      if ((*(_BYTE *)(result + 52) & 7) != 2)
      {
LABEL_21:
        v13 = 1;
        goto LABEL_25;
      }
      v13 = (*(_BYTE *)(result + 53) & 1) == 0;
    }
    else
    {
LABEL_24:
      v13 = 0;
    }
LABEL_25:
    if (v18 != -1)
      result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v18])(v19, v17);
    v18 = -1;
  }
  while (!v13);
  *(_BYTE *)a1 = 0;
  *((_DWORD *)a1 + 4) = -1;
  v14 = *((unsigned int *)this + 4);
  if ((_DWORD)v14 != -1)
  {
    result = ((uint64_t (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::BoxIterator *))off_1E33AE248[v14])(v19, a1, this);
    *((_DWORD *)a1 + 4) = v14;
  }
  return result;
}

uint64_t WebCore::startTextOrLineBreakBox(uint64_t a1, WebCore::InlineIterator::LineBoxIterator *a2, uint64_t *a3)
{
  int v5;
  uint64_t result;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  WebCore::InlineIterator::BoxModernPath *v11;
  _BYTE v12[16];
  int v13;
  _BYTE v14[16];
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;
  char *v19;

  WebCore::InlineIterator::firstLeafOnLineInLogicalOrder(a2, a3, (uint64_t)v16);
  v14[0] = 0;
  v15 = -1;
  v5 = v17;
  if (v17 != -1)
  {
    ((void (*)(char **, _BYTE *, _BYTE *))off_1E33AE288[v17])(&v19, v14, v16);
    v15 = v5;
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v14);
  if ((result & 1) != 0)
    goto LABEL_8;
  result = WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v14);
  if ((result & 1) != 0)
  {
LABEL_5:
    v7 = 1;
    goto LABEL_9;
  }
  if (v15 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox12originalTextEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(v10, v11);
  }
  v19 = &v18;
  result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v15])(&v19, v14);
  if (*(_BYTE *)(result + 46) == 17)
  {
    if ((*(_BYTE *)(result + 52) & 7) != 2)
      goto LABEL_5;
    v7 = (*(_BYTE *)(result + 53) & 1) == 0;
  }
  else
  {
LABEL_8:
    v7 = 0;
  }
LABEL_9:
  if (v15 != -1)
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(&v19, v14);
  v15 = -1;
  if (v7)
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v8 = v17;
    if (v17 == -1)
      return result;
    result = ((uint64_t (*)(char **, uint64_t, _BYTE *))off_1E33AE248[v17])(&v19, a1, v16);
    *(_DWORD *)(a1 + 16) = v8;
  }
  else
  {
    v12[0] = 0;
    v13 = -1;
    v9 = v17;
    if (v17 != -1)
    {
      ((void (*)(char **, _BYTE *, _BYTE *))off_1E33AE288[v17])(&v19, v12, v16);
      v13 = v9;
    }
    result = WebCore::nextTextOrLineBreakBox((_QWORD *)a1, (WebCore::InlineIterator::BoxIterator *)v12, (char **)a3);
    if (v13 != -1)
      result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v13])(&v19, v12);
    v13 = -1;
  }
  if (v17 != -1)
    return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v17])(&v19, v16);
  return result;
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox12originalTextEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(int a1, WebCore::InlineIterator::BoxModernPath *this)
{
  return WebCore::InlineIterator::BoxModernPath::originalText((const char *)this);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox12originalTextEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(int a1, WebCore::InlineIterator::BoxLegacyPath *this)
{
  return WebCore::InlineIterator::BoxLegacyPath::originalText(this);
}

const char *WebCore::InlineIterator::BoxModernPath::originalText(const char *this)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v1 < *(unsigned int *)(v2 + 60))
    return WebCore::InlineDisplay::Box::Text::originalContent((WebCore::InlineDisplay::Box::Text *)(*(_QWORD *)(v2 + 48)
                                                                                                  + 80 * v1
                                                                                                  + 52));
  __break(0xC471u);
  return this;
}

const char *WebCore::InlineIterator::BoxLegacyPath::originalText(WebCore::InlineIterator::BoxLegacyPath *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this && ((*(uint64_t (**)(_QWORD))(*v2 + 80))(*(_QWORD *)this) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v3 = v2[4];
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B5BD08);
  }
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = *(_QWORD *)this;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 80))(*(_QWORD *)this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B5BD28);
  }
  v8 = *(_DWORD **)this;
  v9 = *(unsigned int *)(v7 + 72);
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 80))(v8) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  if (v6 <= v9)
    return "";
  v10 = v8[19];
  if ((int)v6 - (int)v9 <= v10)
  {
    if (!(_DWORD)v9)
      return (const char *)v5;
    v10 = v6 - v9;
  }
  v11 = v6 - v9;
  if ((v6 & 0x100000000) == 0)
  {
    if (v11 >= v10)
    {
      v5 += 2 * v9;
      return (const char *)v5;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    JUMPOUT(0x195B5BCD8);
  }
  if (v11 < v10)
    goto LABEL_26;
  v5 += v9;
  return (const char *)v5;
}

uint64_t WebCore::endPositionForLine(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned __int16 *v23;
  WTF *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  int v31;
  int v32;
  int v33;
  char v34;
  const WebCore::VisiblePosition *v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  char v46;
  uint64_t v47[2];
  int v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  int v63;

  v3 = result;
  v4 = *a2;
  if (!*a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v60 = v4;
  v7 = a2 + 1;
  v61 = *((_DWORD *)a2 + 2);
  v62 = *((_BYTE *)a2 + 12);
  WebCore::RenderedPosition::RenderedPosition((uint64_t)&v50, (WebCore::Position *)&v60, (const WebCore::Node *)*((unsigned __int8 *)a2 + 16));
  v8 = v60;
  v60 = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v51) & 1) != 0)
  {
    v60 = 0;
    v63 = 1;
  }
  else
  {
    if (v53 == -1)
      goto LABEL_138;
    v47[0] = (uint64_t)&v44;
    ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v53])(&v60, v47, &v51);
  }
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v58])(v47, &v57);
    v58 = -1;
  }
  if (v56)
  {
    if (v55 != -1)
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v55])(v47, &v54);
    v55 = -1;
  }
  if (v53 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v53])(v47, &v51);
  v53 = -1;
  v10 = v50;
  v50 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v9);
    else
      --*(_DWORD *)v10;
  }
  if (v63 == -1)
    goto LABEL_138;
  v50 = (WTF *)v47;
  result = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v63])(&v50, &v60);
  if ((_DWORD)result)
  {
    v11 = *a2;
    if (*a2)
      *(_DWORD *)(v11 + 24) += 2;
    v50 = (WTF *)v11;
    LODWORD(v51) = *(_DWORD *)v7;
    BYTE4(v51) = *((_BYTE *)v7 + 4);
    if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x40) != 0)
    {
      if ((v51 & 0x800000000) == 0 && ((v12 = BYTE4(v51) & 7, v12 == 4) || v12 == 2))
      {
        result = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v50);
        if (!(_DWORD)result)
        {
LABEL_120:
          v43 = *a2;
          if (*a2)
            *(_DWORD *)(v43 + 24) += 2;
          *(_QWORD *)v3 = v43;
          *(_DWORD *)(v3 + 8) = *(_DWORD *)v7;
          *(_BYTE *)(v3 + 12) = *((_BYTE *)v7 + 4);
          v13 = *((_BYTE *)a2 + 16);
          goto LABEL_33;
        }
      }
      else
      {
        result = v51;
        if (!(_DWORD)v51)
          goto LABEL_120;
      }
    }
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    v13 = 1;
LABEL_33:
    *(_BYTE *)(v3 + 16) = v13;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_115;
  }
  v49 = 0;
  if (a3)
  {
    WebCore::InlineIterator::LineBox::lastLeafBox(v47, (WebCore::InlineIterator::LineBox *)&v60);
    for (result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v47);
          (result & 1) == 0;
          result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v47))
    {
      if (v48 == -1)
        goto LABEL_138;
      v50 = (WTF *)&v44;
      v15 = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v48])(&v50, v47);
      v16 = v15;
      v17 = *(_BYTE *)(v15 + 45);
      if ((v17 & 1) == 0)
      {
        v18 = *(unsigned __int16 **)(*(_QWORD *)(v15 + 24) + 8);
        if (v18)
        {
          if ((~v18[14] & 0x408) == 0)
          {
            if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v18 + 368))(v18))
              goto LABEL_45;
            v17 = *(_BYTE *)(v16 + 45);
          }
        }
      }
      if ((v17 & 1) == 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8);
        if (v19)
          goto LABEL_73;
      }
LABEL_45:
      WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)v47);
    }
LABEL_48:
    v19 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 16) = 1;
    goto LABEL_98;
  }
  WebCore::InlineIterator::lastLeafOnLineInLogicalOrder((WebCore::InlineIterator::LineBoxIterator *)&v60, (uint64_t *)&v49, (uint64_t)v47);
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v47);
  if ((result & 1) != 0)
    goto LABEL_48;
  while (1)
  {
    if (v48 == -1)
      goto LABEL_138;
    v50 = (WTF *)&v44;
    v20 = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v48])(&v50, v47);
    v21 = v20;
    v22 = *(_BYTE *)(v20 + 45);
    if ((v22 & 1) == 0)
    {
      v23 = *(unsigned __int16 **)(*(_QWORD *)(v20 + 24) + 8);
      if (v23)
      {
        if ((~v23[14] & 0x408) == 0)
        {
          if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v23 + 368))(v23))
            goto LABEL_57;
          v22 = *(_BYTE *)(v21 + 45);
        }
      }
    }
    if ((v22 & 1) == 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8);
      if (v19)
        break;
    }
LABEL_57:
    WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded((unsigned int *)v47, (char **)&v49);
    v24 = v49;
    v25 = *((_QWORD *)v49 + 5);
    if (v25)
    {
      v26 = v25 - 1;
      *((_QWORD *)v49 + 5) = v26;
      if (v26 >= *((unsigned int *)v24 + 9))
        goto LABEL_139;
      v27 = *((_QWORD *)v24 + 3) + 24 * v26;
      LOBYTE(v50) = 0;
      LODWORD(v52) = -1;
      v28 = *(unsigned int *)(v27 + 16);
      if ((_DWORD)v28 == -1)
      {
        v28 = 0xFFFFFFFFLL;
        goto LABEL_64;
      }
      ((void (*)(uint64_t **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v28])(&v44, &v50);
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v28 = 1;
      v52 = 0;
    }
    LODWORD(v52) = v28;
LABEL_64:
    if (v48 != -1)
    {
      if (v28 == 0xFFFFFFFFLL)
      {
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v48])(&v44, v47);
        v48 = -1;
      }
      else
      {
LABEL_68:
        v44 = v47;
        ((void (*)(uint64_t **, uint64_t *, WTF **))off_1E33AE308[v28])(&v44, v47, &v50);
      }
      if ((_DWORD)v52 != -1)
        ((void (*)(uint64_t **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v52])(&v44, &v50);
      goto LABEL_71;
    }
    if (v28 != 0xFFFFFFFFLL)
      goto LABEL_68;
LABEL_71:
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v47);
    if ((_DWORD)result)
      goto LABEL_48;
  }
LABEL_73:
  v29 = *(_DWORD *)(v19 + 24);
  *(_DWORD *)(v19 + 24) = v29 + 2;
  v30 = *(_WORD *)(v19 + 28);
  if ((v30 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
  {
    *(_DWORD *)(v19 + 24) = v29 + 4;
    v44 = (uint64_t *)v19;
    v45 = 0;
    v34 = 1;
LABEL_89:
    v46 = v34;
    goto LABEL_90;
  }
  *(_DWORD *)(v19 + 24) = v29 + 4;
  if ((v30 & 2) == 0)
  {
    v44 = (uint64_t *)v19;
    v45 = 0;
    v34 = 2;
    goto LABEL_89;
  }
  if (v48 == -1)
    goto LABEL_138;
  v50 = (WTF *)&v44;
  if (!((unsigned int (*)(WTF **, uint64_t *))off_1E33AE2E8[v48])(&v50, v47))
  {
    v33 = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v33 + 2;
    v44 = (uint64_t *)v19;
    v45 = 0;
    v46 = 2;
    if (v33)
    {
      *(_DWORD *)(v19 + 24) = v33;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    goto LABEL_90;
  }
  if (v48 == -1)
    goto LABEL_138;
  v50 = (WTF *)&v44;
  if ((((uint64_t (*)(WTF **, uint64_t *))off_1E33AE2E8[v48])(&v50, v47) & 1) == 0)
    goto LABEL_139;
  if (v48 == -1)
    goto LABEL_138;
  v50 = (WTF *)&v44;
  v31 = ((uint64_t (*)(WTF **, uint64_t *))off_1E33AE338[v48])(&v50, v47);
  if (v48 == -1)
    goto LABEL_138;
  v32 = v31;
  v50 = (WTF *)&v44;
  if ((((uint64_t (*)(WTF **, uint64_t *))off_1E33AE358[v48])(&v50, v47) & 1) != 0)
    goto LABEL_85;
  if (v48 == -1)
  {
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x195B5C5D4);
  }
  v50 = (WTF *)&v44;
  v32 += ((uint64_t (*)(WTF **, uint64_t *))off_1E33AE318[v48])(&v50, v47);
LABEL_85:
  v44 = (uint64_t *)v19;
  v45 = v32;
  v46 = 0;
LABEL_90:
  result = (uint64_t)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v44, v3);
  *(_BYTE *)(v3 + 16) = 1;
  v36 = *(WTF **)v3;
  if (*(_QWORD *)v3)
  {
    *((_DWORD *)v36 + 6) += 2;
    v50 = v36;
    LODWORD(v51) = *(_DWORD *)(v3 + 8);
    BYTE4(v51) = *(_BYTE *)(v3 + 12);
    LOBYTE(v52) = 0;
    if (!WebCore::inSameLine((WebCore *)v3, (const WebCore::VisiblePosition *)&v50, v35))
      *(_BYTE *)(v3 + 16) = 0;
    result = (uint64_t)v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v19);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
LABEL_98:
  if (v48 != -1)
    result = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v48])(&v50, v47);
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  v37 = v49;
  if (v49)
  {
    v38 = *((unsigned int *)v49 + 9);
    v39 = (unsigned int *)*((_QWORD *)v49 + 3);
    if ((_DWORD)v38)
    {
      v40 = 24 * v38;
      do
      {
        v41 = v39[4];
        if ((_DWORD)v41 != -1)
          ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v41])(&v50, v39);
        v39[4] = -1;
        v39 += 6;
        v40 -= 24;
      }
      while (v40);
      v39 = (unsigned int *)*((_QWORD *)v37 + 3);
    }
    if (v39)
    {
      *((_QWORD *)v37 + 3) = 0;
      *((_DWORD *)v37 + 8) = 0;
      WTF::fastFree((WTF *)v39, v14);
    }
    v42 = *((unsigned int *)v37 + 4);
    if ((_DWORD)v42 != -1)
      ((void (*)(WTF **, WTF *))off_1E33AE258[v42])(&v50, v37);
    *((_DWORD *)v37 + 4) = -1;
    result = WTF::fastFree(v37, v14);
  }
LABEL_115:
  if (v63 != -1)
    return ((uint64_t (*)(WTF **, uint64_t *))off_1E33AE258[v63])(&v50, &v60);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33AE258[v5])(&v12, v4);
LABEL_9:
    v10 = *a3;
    v11 = a3[1];
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v7;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  a2[1] = a3[1];
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33AE258[v5])(&v10, v4);
LABEL_8:
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox13logicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox13logicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 128) * 0.015625;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox10logicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox10logicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 124) * 0.015625;
}

void WebCore::InlineIterator::contentStartInBlockDirection(WebCore::InlineIterator *this, const WebCore::InlineIterator::LineBox *a2)
{
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];
  unsigned int v18;
  _QWORD v19[2];
  unsigned int v20;
  char v21;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 != -1)
  {
    v19[0] = v17;
    v4 = (unsigned __int16)*(_DWORD *)(((uint64_t (*)(_QWORD *, WebCore::InlineIterator *))off_1E33AE298[v2])(v19, this)+ 124) >> 13;
    v5 = v4 > 5;
    v6 = (1 << v4) & 0x2A;
    if (v5 || v6 == 0)
    {
      v8 = *((unsigned int *)this + 4);
      if ((_DWORD)v8 != -1)
      {
        v19[0] = v17;
        ((void (*)(_QWORD *, WebCore::InlineIterator *))off_1E33AE398[v8])(v19, this);
        LOBYTE(v19[0]) = 0;
        v20 = -1;
        v9 = *((unsigned int *)this + 4);
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v9])(v17, v19, this);
          v20 = v9;
          v17[0] = &v21;
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v9])(v17, v19);
          LOBYTE(v17[0]) = 0;
          v18 = -1;
          v10 = v20;
          if (v20 != -1)
          {
            ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v20])(&v21, v17, v19);
            v18 = v10;
            if (v20 == -1
              || (((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v20])(&v21, v19), v10 = v18, v18 != -1))
            {
              v19[0] = &v21;
              v11 = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v10])(v19, v17);
              if (v18 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E33AE258[v18])(v19, v17);
              if (!v11)
              {
                WebCore::InlineIterator::LineBox::contentLogicalTopAdjustedForPrecedingLineBox(this);
                return;
              }
              v12 = *((unsigned int *)this + 4);
              if ((_DWORD)v12 != -1)
              {
                v19[0] = v17;
                v13 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator *))off_1E33AE298[v12])(v19, this);
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1048))(v13);
                (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 960))(v13);
                return;
              }
            }
          }
        }
      }
    }
    else
    {
      v14 = *((unsigned int *)this + 4);
      if ((_DWORD)v14 != -1)
      {
        v19[0] = v17;
        ((void (*)(_QWORD *, WebCore::InlineIterator *))off_1E33AE3A8[v14])(v19, this);
        WebCore::InlineIterator::LineBox::contentLogicalBottomAdjustedForFollowingLineBox(this);
        return;
      }
    }
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox17contentLogicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(v15, v16);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox17contentLogicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox17contentLogicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 116) * 0.015625;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox20contentLogicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox20contentLogicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 120) * 0.015625;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12isHorizontalEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 44))
    return (*(unsigned __int8 *)(*(_QWORD *)(v3 + 32) + 152 * v2 + 124) >> 1) & 1;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12isHorizontalEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 52) >> 11) & 1;
}

unsigned int *WebCore::WritingToolsCompositionCommand::replaceContentsOfRangeWithFragment(uint64_t a1, uint64_t *a2, int *a3, char a4, int a5)
{
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  const WebCore::VisibleSelection *v15;
  void *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WebCore::Node *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  WebCore::Node *v29;
  uint64_t v30;
  WebCore::Node *v31;
  uint64_t v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  uint64_t v35;
  unsigned int *result;
  WebCore::Node *v37;
  int v38;
  WebCore::Node *v39;
  int v40;
  char v41;
  WebCore::Node *v42;
  WebCore::EditCommand *v43;
  WebCore::Node *v44;
  int v45;
  uint64_t v46;
  int v47;

  v10 = *(WebCore::Node **)(a1 + 280);
  *((_DWORD *)v10 + 6) += 2;
  v44 = v10;
  v45 = *(_DWORD *)(a1 + 288);
  v11 = *(_QWORD *)(a1 + 296);
  *(_DWORD *)(v11 + 24) += 2;
  v46 = v11;
  v47 = *(_DWORD *)(a1 + 304);
  v12 = WebCore::characterCount((int *)&v44, 0);
  v13 = v44;
  *((_DWORD *)v44 + 6) += 2;
  v37 = v13;
  v38 = v45;
  v14 = *(WebCore::Node **)a3;
  *((_DWORD *)v14 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v39 = v14;
  v40 = a3[2];
  v15 = (const WebCore::VisibleSelection *)WebCore::characterCount((int *)&v37, 0);
  v17 = WebCore::characterCount(a3, 0);
  v18 = v39;
  v39 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v19 = v37;
  v37 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v16);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  v20 = *(WebCore::Node **)(a1 + 16);
  *((_DWORD *)v20 + 6) += 2;
  v42 = v20;
  v21 = WTF::fastMalloc((WTF *)0x1D8);
  v22 = WebCore::EditCommand::EditCommand(v21, (uint64_t *)&v42, 17);
  *(_OWORD *)(v22 + 248) = 0u;
  *(_OWORD *)(v22 + 264) = 0u;
  *(_QWORD *)v22 = off_1E33ADA18;
  *(_QWORD *)(v22 + 280) = 0;
  *(_DWORD *)(v22 + 288) = 0;
  *(_BYTE *)(v22 + 292) &= 0xF0u;
  *(_QWORD *)(v22 + 296) = 0;
  *(_DWORD *)(v22 + 304) = 0;
  *(_BYTE *)(v22 + 308) &= 0xF0u;
  *(_QWORD *)(v22 + 312) = 0;
  *(_DWORD *)(v22 + 320) = 0;
  *(_BYTE *)(v22 + 324) &= 0xF0u;
  *(_QWORD *)(v22 + 328) = 0;
  *(_DWORD *)(v22 + 336) = 0;
  *(_BYTE *)(v22 + 340) &= 0xF0u;
  *(_QWORD *)(v22 + 344) = 0;
  *(_DWORD *)(v22 + 352) = 0;
  *(_BYTE *)(v22 + 356) &= 0xF0u;
  *(_QWORD *)(v22 + 360) = 0;
  *(_DWORD *)(v22 + 368) = 0;
  *(_BYTE *)(v22 + 372) &= 0xF0u;
  *(_WORD *)(v22 + 376) = 1;
  *(_BYTE *)(v22 + 378) = *(_BYTE *)(v22 + 378) & 0xFC | 1;
  *(_QWORD *)(v22 + 384) = 0;
  *(_DWORD *)(v22 + 392) = 0;
  *(_BYTE *)(v22 + 396) &= 0xF0u;
  *(_QWORD *)(v22 + 400) = 0;
  *(_DWORD *)(v22 + 408) = 0;
  *(_BYTE *)(v22 + 412) &= 0xF0u;
  *(_QWORD *)(v22 + 416) = 0;
  *(_WORD *)(v22 + 424) = 1;
  *(_BYTE *)(v22 + 426) = a4;
  v23 = *a2;
  *a2 = 0;
  *(_QWORD *)(v22 + 432) = v23;
  *(_QWORD *)(v22 + 440) = 0;
  *(_QWORD *)(v22 + 448) = 0;
  *(_QWORD *)(v22 + 456) = 0;
  *(_DWORD *)(v22 + 464) = 65537;
  *(_BYTE *)(v22 + 468) = 0;
  v43 = (WebCore::EditCommand *)v22;
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v37, (uint64_t)a3, 1, 0);
  WebCore::CompositeEditCommand::applyCommandToComposite(a1, &v43, (const WebCore::VisibleSelection *)&v37);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v37);
  if (v43)
  {
    if (*((_DWORD *)v43 + 2) == 1)
      (*(void (**)(WebCore::EditCommand *))(*(_QWORD *)v43 + 8))(v43);
    else
      --*((_DWORD *)v43 + 2);
  }
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v24);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v26 + 24) += 2;
  WebCore::FrameSelection::setSelection(*(_QWORD *)(v26 + 3064), a1 + 128, 6u, 0, 0, 0, 0);
  if (*(_DWORD *)(v26 + 24) == 2)
  {
    if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v26, v27);
  }
  else
  {
    *(_DWORD *)(v26 + 24) -= 2;
  }
  if (a5 == 1)
    WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)a1);
  WebCore::rangeExpandedAroundRangeByCharacters((WebCore *)(a1 + 128), v15, v12 - ((_QWORD)v15 + v17), &v37);
  if (v41)
  {
    v29 = v37;
    *((_DWORD *)v37 + 6) += 2;
    v30 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v29;
    if (v30)
    {
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v30, v28);
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    *(_DWORD *)(a1 + 288) = v38;
    v31 = v39;
    *((_DWORD *)v39 + 6) += 2;
    v32 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v31;
    if (v32)
    {
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v32, v28);
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
    }
    *(_DWORD *)(a1 + 304) = v40;
    if (v41)
    {
      v33 = v39;
      v39 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v28);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      v34 = v37;
      v37 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v28);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
    }
  }
  v35 = v46;
  v46 = 0;
  if (v35)
  {
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, v28);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  result = (unsigned int *)v44;
  v44 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v28);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::replaceSubresourceURLs(uint64_t result, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int i;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  WTF *v41;
  WTF *v42;
  const WebCore::QualifiedName *v43;
  WTF::StringImpl **v44;
  WebCore::Element *v45;
  WTF *v46;
  uint64_t v47;
  WebCore::Node *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  v46 = 0;
  v47 = 0;
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(*(_QWORD *)result + 80);
  if (!v6)
    return result;
  while ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      return result;
  }
  do
  {
LABEL_5:
    *(_DWORD *)(v6 + 24) += 2;
    v8 = *(_QWORD *)(v6 + 104);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 4) & 8) != 0)
        result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v6, a2, a5, a3, a4);
      if ((*(_WORD *)(v6 + 28) & 0x20) != 0)
        result = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v6);
      v9 = *(_QWORD *)(v6 + 104);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 4);
        if ((v10 & 1) != 0)
        {
          v12 = *(_DWORD *)(v9 + 52);
          if (!v12)
            goto LABEL_48;
          v11 = *(_QWORD *)(v9 + 40);
        }
        else
        {
          if (v10 < 0x20)
            goto LABEL_48;
          v11 = v9 + 32;
          v12 = v10 >> 5;
        }
        if (v12)
        {
          v13 = 0;
          do
          {
            v14 = v11 + 16 * v13;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 608))(v6, v14);
            if ((_DWORD)result)
            {
              v15 = *(_QWORD *)(v14 + 8);
              if (v15)
              {
                if (*(_DWORD *)(v15 + 4))
                {
                  v17 = *(_QWORD *)a2;
                  if (*(_QWORD *)a2)
                  {
                    v18 = 0;
                    for (i = *(_DWORD *)(v15 + 16) >> 8; ; i = v18 + v20)
                    {
                      v20 = i & *(_DWORD *)(v17 - 8);
                      v21 = *(_QWORD *)(v17 + 16 * v20);
                      if (v21 != -1)
                      {
                        if (!v21)
                          goto LABEL_20;
                        if (v21 == v15)
                          break;
                      }
                      ++v18;
                    }
                    v22 = *(WTF::StringImpl **)(v17 + 16 * v20 + 8);
                    if (v22)
                    {
                      *(_DWORD *)v22 += 2;
                      *(_DWORD *)(v6 + 24) += 2;
                      v23 = *(WTF::StringImpl **)v14;
                      if (*(_QWORD *)v14)
                        ++*(_DWORD *)v23;
                      v48 = (WebCore::Node *)v6;
                      v49 = v23;
                      v50 = v22;
                      v24 = HIDWORD(v47);
                      if (HIDWORD(v47) == (_DWORD)v47)
                      {
                        v25 = WTF::Vector<WebCore::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1, (unint64_t)&v48);
                        v24 = HIDWORD(v47);
                        v26 = (_QWORD *)((char *)v46 + 24 * HIDWORD(v47));
                        v27 = *(_QWORD *)v25;
                        *(_QWORD *)v25 = 0;
                        *v26 = v27;
                        v28 = *((_QWORD *)v25 + 1);
                        *((_QWORD *)v25 + 1) = 0;
                        v26[1] = v28;
                        v29 = (WTF::StringImpl **)(v26 + 2);
                        v30 = (WTF::StringImpl **)(v25 + 4);
                      }
                      else
                      {
                        v31 = (_QWORD *)((char *)v46 + 24 * HIDWORD(v47));
                        v48 = 0;
                        *v31 = v6;
                        v32 = v49;
                        v49 = 0;
                        v31[1] = v32;
                        v29 = (WTF::StringImpl **)(v31 + 2);
                        v30 = &v50;
                      }
                      v33 = *v30;
                      *v30 = 0;
                      *v29 = v33;
                      HIDWORD(v47) = v24 + 1;
                      v34 = v50;
                      v50 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      v35 = (WTF::StringImpl **)v49;
                      v49 = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 1)
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
                          WTF::fastFree(v36, v37);
                        }
                        else
                        {
                          --*(_DWORD *)v35;
                        }
                      }
                      result = (uint64_t)v48;
                      v48 = 0;
                      if (result)
                      {
                        if (*(_DWORD *)(result + 24) == 2)
                        {
                          if ((*(_WORD *)(result + 30) & 0x400) == 0)
                            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                        }
                        else
                        {
                          *(_DWORD *)(result + 24) -= 2;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_20:
            v16 = v13 + 1;
            v13 = (v13 + 1);
          }
          while (v12 != v16);
        }
      }
    }
LABEL_48:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    v38 = *(_QWORD *)(v6 + 80);
    if (!v38)
    {
      if (v6 == v5)
        goto LABEL_72;
      while (1)
      {
        v38 = *(_QWORD *)(v6 + 56);
        if (v38)
          break;
        v6 = *(_QWORD *)(v6 + 32);
        if (v6)
          v40 = v6 == v5;
        else
          v40 = 1;
        if (v40)
          goto LABEL_72;
      }
    }
    v6 = v38;
  }
  while ((*(_WORD *)(v38 + 28) & 8) != 0);
  while (v38 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v38 + 56);
      if (v6)
        break;
      v38 = *(_QWORD *)(v38 + 32);
      if (v38)
        v39 = v38 == v5;
      else
        v39 = 1;
      if (v39)
        goto LABEL_72;
    }
    v38 = *(_QWORD *)(v38 + 56);
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
      goto LABEL_5;
  }
LABEL_72:
  v41 = v46;
  if (HIDWORD(v47))
  {
    v42 = (WTF *)((char *)v46 + 24 * HIDWORD(v47));
    do
    {
      v43 = (WTF *)((char *)v41 + 8);
      v45 = *(WebCore::Element **)v41;
      v44 = (WTF::StringImpl **)((char *)v41 + 16);
      result = (uint64_t)WebCore::Element::setAttribute(v45, v43, v44, 0, &v48, a5);
      if ((_BYTE)v50)
      {
        result = (uint64_t)v49;
        v49 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
      }
      v41 = (WTF *)(v44 + 1);
    }
    while (v41 != v42);
    v41 = v46;
    if (HIDWORD(v47))
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::AttributeChange>::destruct((unsigned int *)v46, (WTF *)((char *)v46 + 24 * HIDWORD(v47)));
  }
  if (v41)
    return WTF::fastFree(v41, a2);
  return result;
}

uint64_t WebCore::removeSubresourceURLAttributes(uint64_t result, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  WebCore::QualifiedName::QualifiedNameImpl **v25;
  WebCore::QualifiedName::QualifiedNameImpl **v26;
  _QWORD *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  WTF::StringImpl **v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  const WebCore::QualifiedName *v39;
  WebCore::Element *v40;
  uint64_t v41;
  WTF::StringImpl ***v42;
  WTF::StringImpl **v43;
  WTF *v44;
  void *v45;
  WTF::StringImpl *v46;
  WebCore::QualifiedName::QualifiedNameImpl *v47;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl *v50;

  v48 = 0;
  v49 = 0;
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(*(_QWORD *)result + 80);
  if (!v6)
    return result;
  while ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      return result;
  }
  do
  {
LABEL_5:
    *(_DWORD *)(v6 + 24) += 2;
    v8 = *(_QWORD *)(v6 + 104);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 4) & 8) != 0)
        result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v6, a2, a5, a3, a4);
      if ((*(_WORD *)(v6 + 28) & 0x20) != 0)
        result = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v6);
      v9 = *(_QWORD *)(v6 + 104);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 4);
        if ((v10 & 1) != 0)
        {
          v12 = *(_DWORD *)(v9 + 52);
          if (!v12)
            goto LABEL_47;
          v11 = *(_QWORD *)(v9 + 40);
        }
        else
        {
          if (v10 < 0x20)
            goto LABEL_47;
          v11 = v9 + 32;
          v12 = v10 >> 5;
        }
        if (v12)
        {
          v13 = 0;
          while (1)
          {
            v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v11 + 16 * v13);
            result = (*(uint64_t (**)(uint64_t, WebCore::QualifiedName::QualifiedNameImpl **))(*(_QWORD *)v6 + 608))(v6, v14);
            if (!(_DWORD)result)
              goto LABEL_20;
            v15 = v14[1];
            if (!v15 || !*((_DWORD *)v15 + 1))
              goto LABEL_20;
            *(_DWORD *)v15 += 2;
            v50 = v15;
            MEMORY[0x19AEA52D4](&v46, &v50, 0);
            v18 = v50;
            v50 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v17);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, &v46);
            result = (uint64_t)v46;
            v46 = 0;
            if (!result)
              goto LABEL_29;
            if (*(_DWORD *)result != 2)
              break;
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
            if (v19)
            {
LABEL_30:
              *(_DWORD *)(v6 + 24) += 2;
              v46 = (WTF::StringImpl *)v6;
              v20 = *v14;
              if (*v14)
                ++*(_DWORD *)v20;
              v47 = v20;
              v21 = HIDWORD(v49);
              if (HIDWORD(v49) == (_DWORD)v49)
              {
                v22 = (_QWORD *)WTF::Vector<std::pair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::QualifiedName>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v46);
                v21 = HIDWORD(v49);
                v23 = (_QWORD *)((char *)v48 + 16 * HIDWORD(v49));
                v24 = *v22;
                *v22 = 0;
                v25 = (WebCore::QualifiedName::QualifiedNameImpl **)(v22 + 1);
                *v23 = v24;
                v26 = (WebCore::QualifiedName::QualifiedNameImpl **)(v23 + 1);
              }
              else
              {
                v27 = (_QWORD *)((char *)v48 + 16 * HIDWORD(v49));
                v46 = 0;
                *v27 = v6;
                v26 = (WebCore::QualifiedName::QualifiedNameImpl **)(v27 + 1);
                v25 = &v47;
              }
              v28 = *v25;
              *v25 = 0;
              *v26 = v28;
              HIDWORD(v49) = v21 + 1;
              v29 = (WTF::StringImpl **)v47;
              v47 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
                  WTF::fastFree(v30, v31);
                }
                else
                {
                  --*(_DWORD *)v29;
                }
              }
              result = (uint64_t)v46;
              v46 = 0;
              if (result)
              {
                if (*(_DWORD *)(result + 24) == 2)
                {
                  if ((*(_WORD *)(result + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                }
                else
                {
                  *(_DWORD *)(result + 24) -= 2;
                }
              }
            }
LABEL_20:
            v16 = v13 + 1;
            v13 = (v13 + 1);
            if (v12 == v16)
              goto LABEL_47;
          }
          *(_DWORD *)result -= 2;
LABEL_29:
          if (v19)
            goto LABEL_30;
          goto LABEL_20;
        }
      }
    }
LABEL_47:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    v32 = *(_QWORD *)(v6 + 80);
    if (!v32)
    {
      if (v6 == v5)
        goto LABEL_71;
      while (1)
      {
        v32 = *(_QWORD *)(v6 + 56);
        if (v32)
          break;
        v6 = *(_QWORD *)(v6 + 32);
        if (v6)
          v34 = v6 == v5;
        else
          v34 = 1;
        if (v34)
          goto LABEL_71;
      }
    }
    v6 = v32;
  }
  while ((*(_WORD *)(v32 + 28) & 8) != 0);
  while (v32 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v32 + 56);
      if (v6)
        break;
      v32 = *(_QWORD *)(v32 + 32);
      if (v32)
        v33 = v32 == v5;
      else
        v33 = 1;
      if (v33)
        goto LABEL_71;
    }
    v32 = *(_QWORD *)(v32 + 56);
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
      goto LABEL_5;
  }
LABEL_71:
  v35 = v48;
  v36 = HIDWORD(v49);
  if (HIDWORD(v49))
  {
    v37 = (WTF *)((char *)v48 + 16 * HIDWORD(v49));
    v38 = v48;
    do
    {
      v39 = (WTF *)((char *)v38 + 8);
      v40 = *(WebCore::Element **)v38;
      v38 = (WTF *)((char *)v38 + 16);
      WebCore::Element::removeAttribute(v40, v39);
    }
    while (v38 != v37);
    v41 = 16 * v36;
    v42 = (WTF::StringImpl ***)((char *)v35 + 8);
    do
    {
      v43 = *v42;
      *v42 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v43);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v43;
        }
      }
      result = (uint64_t)*(v42 - 1);
      *(v42 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v42 += 2;
      v41 -= 16;
    }
    while (v41);
  }
  if (v35)
    return WTF::fastFree(v35, a2);
  return result;
}

void WebCore::createPageForSanitizingWebContent(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  WebCore::FrameLoader *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  _QWORD v45[87];
  unsigned int *v46[5];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  WebCore::pageConfigurationWithEmptyClients(0, 0, 1, v45);
  v3 = WTF::fastMalloc((WTF *)0x788);
  v4 = WebCore::Page::Page(v3, (uint64_t)v45);
  *a1 = v4;
  v6 = *(_QWORD *)(v4 + 112);
  v7 = *(_DWORD *)(v6 + 720);
  *(_QWORD *)(v6 + 712) &= ~0x80000000000000uLL;
  *(_DWORD *)(v6 + 720) = v7;
  v8 = *(_QWORD *)(v4 + 112);
  v9 = *(_QWORD *)(v8 + 712);
  v10 = *(_OWORD *)(v8 + 664);
  *(_OWORD *)(v8 + 696) = *(_OWORD *)(v8 + 696);
  *(_OWORD *)(v8 + 664) = v10;
  v11 = *(_DWORD *)(v8 + 720);
  v12 = *(_BYTE *)(v8 + 724);
  v13 = *(_QWORD *)(v8 + 680);
  *(_QWORD *)(v8 + 688) &= ~0x10000000000000uLL;
  *(_QWORD *)(v8 + 680) = v13;
  *(_DWORD *)(v8 + 720) = v11;
  *(_BYTE *)(v8 + 724) = v12;
  *(_QWORD *)(v8 + 712) = v9;
  v14 = *(_QWORD *)(v4 + 112);
  *(_BYTE *)(v14 + 392) = 1;
  v15 = *(_QWORD *)(v14 + 664);
  if ((v15 & 0x10) != 0)
  {
    v16 = *(unsigned int *)(v14 + 720) | ((unint64_t)*(unsigned __int8 *)(v14 + 724) << 32);
    v17 = *(_QWORD *)(v14 + 712);
    v18 = *(_QWORD *)(v14 + 704);
    v19 = *(_QWORD *)(v14 + 696);
    v20 = *(_QWORD *)(v14 + 688);
    v21 = *(_QWORD *)(v14 + 680);
    v22 = *(_QWORD *)(v14 + 672);
    *(_QWORD *)(v14 + 664) = v15 & 0xFFFFFFFFFFFFFFEFLL;
    *(_QWORD *)(v14 + 672) = v22;
    *(_QWORD *)(v14 + 680) = v21;
    *(_QWORD *)(v14 + 688) = v20;
    *(_QWORD *)(v14 + 696) = v19;
    *(_QWORD *)(v14 + 704) = v18;
    *(_QWORD *)(v14 + 712) = v17;
    *(_DWORD *)(v14 + 720) = v16;
    *(_BYTE *)(v14 + 724) = BYTE4(v16);
    WebCore::SettingsBase::setNeedsRecalcStyleInAllFrames((WebCore::Page *)v14);
    v14 = *(_QWORD *)(v3 + 112);
  }
  *(_QWORD *)(v14 + 680) &= ~0x100000000000000uLL;
  v23 = *(_QWORD *)(v3 + 160);
  if (!v23 || *(_BYTE *)(v23 + 144))
    goto LABEL_41;
  v24 = (unsigned int *)(v23 + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v44 = 0x25800000320;
  WebCore::LocalFrameView::create((WebCore::LocalFrameView *)v23, (WebCore::LocalFrame *)&v44, (WebCore::LocalFrameView **)&v47);
  v46[0] = (unsigned int *)v47;
  WebCore::LocalFrame::setView(v23, (uint64_t *)v46);
  v26 = v46[0];
  v46[0] = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *(WebCore::FrameLoader **)(v23 + 280);
  ++*(_DWORD *)v27;
  WebCore::FrameLoader::init(v27);
  if (!*(_DWORD *)v27)
  {
    __break(0xC471u);
    JUMPOUT(0x195B5DBA4);
  }
  --*(_DWORD *)v27;
  v28 = *(_QWORD *)(v23 + 280);
  v29 = 88;
  if (!*(_BYTE *)(v28 + 80))
    v29 = 96;
  v30 = *(_QWORD *)(v28 + v29);
  if (v30)
    ++*(_DWORD *)(v30 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = (WTF::StringImpl *)v46[0];
  if (v46[0])
    *v46[0] += 2;
  v33 = *(WTF::StringImpl **)(v30 + 120);
  *(_QWORD *)(v30 + 120) = v32;
  if (!v33)
  {
LABEL_20:
    if (v32)
      goto LABEL_21;
    goto LABEL_23;
  }
  if (*(_DWORD *)v33 != 2)
  {
    *(_DWORD *)v33 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v33, v31);
  if (v32)
  {
LABEL_21:
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
LABEL_23:
  v46[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v46);
  v47 = 0uLL;
  v48 = 0;
  WebCore::DocumentWriter::begin(v30 + 112, (uint64_t)v46, 1, 0, &v47, 0);
  v35 = (WTF::StringImpl *)v46[0];
  v46[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DocumentWriter::insertDataSynchronously((WebCore::DocumentWriter *)(v30 + 112), v46);
  v37 = (WTF::StringImpl *)v46[0];
  v46[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  WebCore::DocumentWriter::end(v30 + 112);
  v38 = *(_QWORD *)(*(_QWORD *)(v23 + 296) + 1272);
  if (!v38
    || (*(_WORD *)(v38 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v38 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    || (v39 = *(_QWORD *)(v38 + 80)) == 0)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x195B5DADCLL);
  }
  while ((*(_WORD *)(v39 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v39 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v39 = *(_QWORD *)(v39 + 56);
    if (!v39)
      goto LABEL_36;
  }
  if (*(_DWORD *)(v30 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  else
    --*(_DWORD *)(v30 + 24);
  do
  {
    v40 = __ldaxr(v24);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v24));
  if (!v41)
  {
    atomic_store(1u, v24);
    v42 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v42 = off_1E31FE290;
    *(_QWORD *)(v42 + 8) = v24;
    v46[0] = (unsigned int *)v42;
    WTF::ensureOnMainThread();
    v43 = v46[0];
    v46[0] = 0;
    if (v43)
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
  }
LABEL_41:
  WebCore::PageConfiguration::~PageConfiguration((WebCore::PageConfiguration *)v45, v5);
}

WebCore::Page *WebCore::sanitizeMarkup@<X0>(unsigned int **a1@<X0>, char a2@<W1>, _BYTE *a3@<X2>, WebCore::Node **a4@<X8>)
{
  uint64_t v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::Node *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::Page *result;
  WTF *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Page *v22;
  WebCore::Node *v23;

  WebCore::createPageForSanitizingWebContent((uint64_t *)&v22);
  v8 = *((_QWORD *)v22 + 20);
  if (v8)
    v9 = *(_BYTE *)(v8 + 144) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(v8 + 296);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    WebCore::createFragmentFromMarkup(v12, a1, MEMORY[0x1E0CBF738], 0, (unint64_t)&v23);
    v13 = v23;
    if (a3[8])
      (*(void (**)(_QWORD, WebCore::Node *))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, v23);
    WebCore::sanitizedMarkupForFragmentInDocument(&v23, v12, a2, (uint64_t *)a1, a4);
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v14);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    do
    {
      v15 = __ldaxr(v10);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v10));
    if (!v16)
    {
      atomic_store(1u, v10);
      v20 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v20 = off_1E31FE290;
      *((_QWORD *)v20 + 1) = v10;
      v23 = v20;
      WTF::ensureOnMainThread();
      v21 = v23;
      v23 = 0;
      if (v21)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  else
  {
    *a4 = 0;
  }
  result = v22;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::Page::~Page((uint64_t)v22);
      return (WebCore::Page *)WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  return result;
}

uint64_t WebCore::createFragmentFromMarkup@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, WTF **a3@<X2>, char a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  BOOL v22;
  uint64_t *v23;
  WTF *v24;
  _QWORD *v25;
  __int16 v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  __int16 v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  BOOL v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  __int16 v53;
  BOOL v54;
  BOOL v55;
  WebCore::ScriptExecutionContext *v56;
  WTF::StringImpl **v57;
  WTF ***v58;
  WTF *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  const WTF::StringImpl **v63;
  uint64_t v64;
  WTF *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF **v72;
  WTF *v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  WTF **v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl **v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  WTF::StringImpl **v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF *v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  void *v108;
  uint64_t v109;
  __int16 v110;
  BOOL v111;
  BOOL v112;
  WTF *v113;
  int **v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int **v122;
  uint64_t v123;
  int *v124;
  int v125;
  uint64_t v126;
  const WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  const WTF::StringImpl **v133;
  const WTF::StringImpl *v134;
  const WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  WTF::String *v138;
  __n128 v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WebCore::Element **v142;
  WebCore::Element **v143;
  const WebCore::QualifiedName *v144;
  WTF::StringImpl **v145;
  WebCore::Element *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int v162;
  unsigned int *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  WTF::StringImpl **v168;
  _QWORD *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl **v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF *v176;
  void *v177;
  uint64_t v178;
  BOOL v179;
  BOOL v180;
  uint64_t v181;
  WTF **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  WTF *v193;
  char *__src;
  WebCore::ScriptExecutionContext *__srca;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201[5];
  WTF::StringImpl *v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  _QWORD v205[2];

  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x101C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = a1 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v12 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33B5118;
  WebCore::DocumentFragment::create((WebCore::DocumentFragment *)a1, (uint64_t *)a5);
  v13 = *(_QWORD *)a5;
  result = WebCore::DocumentFragment::parseHTML(*(_QWORD *)a5, a2, v11, a4);
  {
    if (byte_1ECE90A59)
    {
      if (*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) == v13)
        v17 = 0;
      else
        v17 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      v18 = *(_QWORD *)(v13 + 80);
      if (v18)
      {
        v19 = *(_QWORD *)(v13 + 80);
        while (1)
        {
          v20 = v19;
          v21 = *(_WORD *)(v19 + 28);
          if ((v21 & 0x10) != 0
            && (v21 & 0x110) != 0x110
            && *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
          {
            break;
          }
          if ((v21 & 4) != 0)
          {
            v19 = *(_QWORD *)(v20 + 80);
            if (v19)
              continue;
          }
          if (v20 == v13)
          {
LABEL_25:
            v23 = 0;
            v24 = 0;
LABEL_26:
            v193 = v24;
            v192 = 1;
            goto LABEL_27;
          }
          while (1)
          {
            v19 = *(_QWORD *)(v20 + 56);
            if (v19)
              break;
            v20 = *(_QWORD *)(v20 + 32);
            if (v20)
              v22 = v20 == v13;
            else
              v22 = 1;
            if (v22)
              goto LABEL_25;
          }
        }
        v190 = a1;
        v193 = 0;
        LODWORD(v45) = 0;
        v46 = 0;
        while (1)
        {
          v47 = v46;
          if (v46 == (_DWORD)v45)
          {
            v48 = v46 + 1;
            v49 = ((unint64_t)v45 >> 2) + v45;
            if (v49 >= 0x10)
              v50 = v49 + 1;
            else
              v50 = 16;
            if (v50 <= v48)
              v45 = v47 + 1;
            else
              v45 = v50;
            if (v45 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195B5F1B0);
            }
            v51 = (WTF *)WTF::fastMalloc((WTF *)(8 * v45));
            result = (uint64_t)memcpy(v51, v193, 8 * v47);
            if (v193)
            {
              if (v51 == v193)
              {
                LODWORD(v45) = 0;
                v51 = 0;
              }
              result = WTF::fastFree(v193, v15);
            }
          }
          else
          {
            v51 = v193;
          }
          *(_DWORD *)(v20 + 24) += 2;
          v193 = v51;
          *((_QWORD *)v51 + v47) = v20;
          v46 = v47 + 1;
          v52 = *(_QWORD *)(v20 + 80);
          a1 = v190;
          if (!v52)
            break;
LABEL_106:
          while (1)
          {
            v20 = v52;
            v53 = *(_WORD *)(v52 + 28);
            if ((v53 & 0x10) != 0
              && (v53 & 0x110) != 0x110
              && *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
            {
              break;
            }
            if ((v53 & 4) != 0)
            {
              v52 = *(_QWORD *)(v20 + 80);
              if (v52)
                continue;
            }
            if (v20 == v13)
              goto LABEL_126;
            while (1)
            {
              v52 = *(_QWORD *)(v20 + 56);
              if (v52)
                break;
              v20 = *(_QWORD *)(v20 + 32);
              if (v20)
                v54 = v20 == v13;
              else
                v54 = 1;
              if (v54)
                goto LABEL_126;
            }
          }
        }
        if (v20 != v13)
        {
          do
          {
            v52 = *(_QWORD *)(v20 + 56);
            if (v52)
              goto LABEL_106;
            v20 = *(_QWORD *)(v20 + 32);
            if (v20)
              v55 = v20 == v13;
            else
              v55 = 1;
          }
          while (!v55);
        }
LABEL_126:
        v24 = v51;
        v23 = (uint64_t *)((char *)v51 + 8 * v46);
        if (!v46)
        {
          v18 = *(_QWORD *)(v13 + 80);
          if (!v18)
            goto LABEL_321;
          goto LABEL_26;
        }
        v182 = a3;
        v183 = v11;
        v56 = (WebCore::ScriptExecutionContext *)(v17 + 192);
        if (!v17)
          v56 = 0;
        __srca = v56;
        v57 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        v58 = (WTF ***)v51;
        while (1)
        {
          v59 = (*v58)[13];
          if (!v59)
            break;
          v60 = *((unsigned int *)v59 + 1);
          if ((v60 & 1) != 0)
          {
            v61 = (char *)*((_QWORD *)v59 + 5);
            v62 = *((unsigned int *)v59 + 13);
            if (!v62)
              break;
          }
          else
          {
            v61 = (char *)v59 + 32;
            v62 = v60 >> 5;
            if (!(v60 >> 5))
              break;
          }
          v63 = (const WTF::StringImpl **)(v61 + 8);
          while (1)
          {
            v64 = (uint64_t)*(v63 - 1);
            if (v64 == WebCore::HTMLNames::webkitattachmentidAttr
              || *(_QWORD *)(v64 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentidAttr + 24)
              && *(_QWORD *)(v64 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentidAttr + 32))
            {
              break;
            }
            v63 += 2;
            if (!--v62)
              goto LABEL_142;
          }
LABEL_143:
          WebCore::HTMLAttachmentElement::setUniqueIdentifier(*v58, v63, v16);
          v65 = (*v58)[13];
          if (!v65)
            goto LABEL_155;
          v66 = *((unsigned int *)v65 + 1);
          if ((v66 & 1) != 0)
          {
            v67 = (char *)*((_QWORD *)v65 + 5);
            v68 = *((unsigned int *)v65 + 13);
            if (!v68)
            {
LABEL_155:
              v69 = v57;
              goto LABEL_156;
            }
          }
          else
          {
            v67 = (char *)v65 + 32;
            v68 = v66 >> 5;
            if (!(v66 >> 5))
              goto LABEL_155;
          }
          v69 = (WTF::StringImpl **)(v67 + 8);
          while (1)
          {
            v70 = (uint64_t)*(v69 - 1);
            if (v70 == WebCore::HTMLNames::webkitattachmentpathAttr
              || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentpathAttr + 24)
              && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentpathAttr + 32))
            {
              break;
            }
            v69 += 2;
            if (!--v68)
              goto LABEL_155;
          }
LABEL_156:
          v71 = *v69;
          if (*v69)
            *(_DWORD *)v71 += 2;
          v202 = v71;
          WebCore::HTMLAttachmentElement::blobURL((WebCore::HTMLAttachmentElement *)*v58, (uint64_t)v201);
          if (v202 && *((_DWORD *)v202 + 1))
          {
            v77 = *v58;
            v196 = 0;
            v197 = 0;
            LOBYTE(v198) = 0;
            LOBYTE(v199) = 0;
            WebCore::File::create(&v196, (uint64_t)__srca, &v202, &v197, (WTF::String *)&v198, (uint64_t *)&v204);
            v78 = (uint64_t)v204;
            v204 = 0;
            v205[0] = v78;
            WebCore::HTMLAttachmentElement::setFile((WebCore::Element *)v77, (WTF::StringImpl *)v205, 0);
            v80 = (_DWORD *)v205[0];
            v205[0] = 0;
            if (v80)
            {
              if (v80[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
              else
                --v80[4];
            }
            v81 = v204;
            v204 = 0;
            if (v81)
            {
              if (*((_DWORD *)v81 + 4) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v81 + 8))(v81);
              else
                --*((_DWORD *)v81 + 4);
            }
            v82 = v196;
            v196 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
                WTF::StringImpl::destroy(v82, v79);
              else
                *(_DWORD *)v82 -= 2;
            }
            v83 = v197;
            v197 = 0;
            if (!v83)
              goto LABEL_224;
            goto LABEL_222;
          }
          if (!v201[0] || !*((_DWORD *)v201[0] + 1))
            goto LABEL_224;
          v72 = *v58;
          v205[0] = 0;
          v73 = (*v58)[13];
          if (!v73)
          {
LABEL_185:
            v84 = v57;
            goto LABEL_186;
          }
          v74 = *((unsigned int *)v73 + 1);
          if ((v74 & 1) != 0)
          {
            v75 = (char *)*((_QWORD *)v73 + 5);
            v76 = *((unsigned int *)v73 + 13);
            if (!v76)
              goto LABEL_185;
          }
          else
          {
            v75 = (char *)v73 + 32;
            v76 = v74 >> 5;
            if (!(v74 >> 5))
              goto LABEL_185;
          }
          v84 = (WTF::StringImpl **)(v75 + 8);
          while (1)
          {
            v85 = (uint64_t)*(v84 - 1);
            if (v85 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v85 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v85 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              break;
            }
            v84 += 2;
            if (!--v76)
              goto LABEL_185;
          }
LABEL_186:
          v86 = *v84;
          if (*v84)
            *(_DWORD *)v86 += 2;
          v204 = v86;
          v87 = (*v58)[13];
          if (v87)
          {
            v88 = *((unsigned int *)v87 + 1);
            if ((v88 & 1) != 0)
            {
              v89 = (char *)*((_QWORD *)v87 + 5);
              v90 = *((unsigned int *)v87 + 13);
              if (v90)
              {
LABEL_193:
                v91 = (WTF::StringImpl **)(v89 + 8);
                do
                {
                  v92 = (uint64_t)*(v91 - 1);
                  if (v92 == WebCore::HTMLNames::titleAttr
                    || *(_QWORD *)(v92 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                    && *(_QWORD *)(v92 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
                  {
                    goto LABEL_201;
                  }
                  v91 += 2;
                }
                while (--v90);
              }
            }
            else
            {
              v89 = (char *)v87 + 32;
              v90 = v88 >> 5;
              if (v88 >> 5)
                goto LABEL_193;
            }
          }
          v91 = v57;
LABEL_201:
          v93 = *v91;
          if (*v91 && *((_DWORD *)v93 + 1))
            goto LABEL_207;
          v94 = (*v58)[15];
          if (!v94)
          {
            v93 = 0;
            goto LABEL_208;
          }
          v93 = (WTF::StringImpl *)*((_QWORD *)v94 + 18);
          if (v93)
LABEL_207:
            *(_DWORD *)v93 += 2;
LABEL_208:
          v95 = bmalloc::api::isoAllocate();
          v97 = (_QWORD *)WebCore::Blob::Blob(v95, v96, __srca, (const WTF::URL *)v201, (WTF::String *)&v204, 0, 0, 0, (const WTF::URL *)v205);
          *v97 = off_1E33AE6D8;
          v97[3] = &unk_1E33AE718;
          v98 = v97 + 3;
          v99 = v205[0];
          if (v205[0])
            *(_DWORD *)v205[0] += 2;
          *(_QWORD *)(v95 + 128) = v99;
          *(_QWORD *)(v95 + 136) = 0;
          if (v93)
            *(_DWORD *)v93 += 2;
          *(_QWORD *)(v95 + 144) = v93;
          *(_BYTE *)(v95 + 152) = 0;
          *(_DWORD *)(v95 + 153) = (_DWORD)v197;
          *(_DWORD *)(v95 + 156) = *(_DWORD *)((char *)&v197 + 3);
          *(_BYTE *)(v95 + 160) = 0;
          *(_DWORD *)(v95 + 161) = (_DWORD)v196;
          *(_DWORD *)(v95 + 164) = *(_DWORD *)((char *)&v196 + 3);
          *(_BYTE *)(v95 + 168) = 0;
          *(_BYTE *)(v95 + 176) = 0;
          *(_WORD *)(v95 + 184) = 0;
          WebCore::ActiveDOMObject::suspendIfNeeded(v98);
          v198 = (WTF::StringImpl *)v95;
          WebCore::HTMLAttachmentElement::setFile((WebCore::Element *)v72, (WTF::StringImpl *)&v198, 0);
          v100 = v198;
          v198 = 0;
          a1 = v190;
          if (v100)
          {
            if (*((_DWORD *)v100 + 4) == 1)
            {
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v100 + 8))(v100);
              if (!v93)
                goto LABEL_218;
              goto LABEL_216;
            }
            --*((_DWORD *)v100 + 4);
          }
          if (!v93)
            goto LABEL_218;
LABEL_216:
          if (*(_DWORD *)v93 == 2)
            WTF::StringImpl::destroy(v93, v79);
          else
            *(_DWORD *)v93 -= 2;
LABEL_218:
          v101 = v204;
          v204 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v79);
            else
              *(_DWORD *)v101 -= 2;
          }
          v83 = (WTF::StringImpl *)v205[0];
          v205[0] = 0;
          if (!v83)
            goto LABEL_224;
LABEL_222:
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v79);
          else
            *(_DWORD *)v83 -= 2;
LABEL_224:
          WebCore::Element::removeAttribute((WebCore::Element *)*v58, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitattachmentidAttr);
          WebCore::Element::removeAttribute((WebCore::Element *)*v58, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitattachmentpathAttr);
          WebCore::Element::removeAttribute((WebCore::Element *)*v58, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitattachmentbloburlAttr);
          v102 = v201[0];
          v201[0] = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v102 -= 2;
          }
          result = (uint64_t)v202;
          v202 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)result -= 2;
          }
          if (++v58 == (WTF ***)v23)
          {
            v18 = *(_QWORD *)(v13 + 80);
            if (!v18)
            {
              a3 = v182;
              v11 = v183;
              v24 = v193;
              goto LABEL_366;
            }
            v192 = 0;
            a3 = v182;
            v11 = v183;
LABEL_27:
            while (1)
            {
              v25 = (_QWORD *)v18;
              v26 = *(_WORD *)(v18 + 28);
              if ((v26 & 0x10) != 0 && *(_QWORD *)(v25[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
                break;
              if ((v26 & 4) != 0)
              {
                v18 = v25[10];
                if (v18)
                  continue;
              }
              if (v25 == (_QWORD *)v13)
              {
LABEL_39:
                __src = 0;
                LODWORD(v28) = 0;
                v29 = 0;
                goto LABEL_40;
              }
              while (1)
              {
                v18 = v25[7];
                if (v18)
                  break;
                v25 = (_QWORD *)v25[4];
                if (v25)
                  v27 = v25 == (_QWORD *)v13;
                else
                  v27 = 1;
                if (v27)
                  goto LABEL_39;
              }
            }
            v186 = (uint64_t *)a5;
            v189 = a1;
            v29 = 0;
            LODWORD(a5) = 0;
            __src = 0;
            while (1)
            {
              v35 = v29;
              if (v29 == (_DWORD)a5)
              {
                v36 = v29 + 1;
                v37 = v35 + (v35 >> 2);
                if (v37 >= 0x10)
                  v38 = v37 + 1;
                else
                  v38 = 16;
                if (v38 <= v36)
                  a5 = v35 + 1;
                else
                  a5 = v38;
                if (a5 >> 29)
                {
LABEL_447:
                  __break(0xC471u);
                  JUMPOUT(0x195B5F1A8);
                }
                v39 = (char *)WTF::fastMalloc((WTF *)(8 * a5));
                memcpy(v39, __src, 8 * v35);
                if (__src)
                {
                  if (v39 == __src)
                  {
                    v39 = 0;
                    LODWORD(a5) = 0;
                  }
                  WTF::fastFree((WTF *)__src, v40);
                }
                result = (*(uint64_t (**)(_QWORD *))(v25[14] + 48))(v25 + 14);
                __src = v39;
                *(_QWORD *)&v39[8 * v35] = v25 + 14;
              }
              else
              {
                result = (*(uint64_t (**)(_QWORD *))(v25[14] + 48))(v25 + 14);
                *(_QWORD *)&__src[8 * v35] = v25 + 14;
              }
              v29 = v35 + 1;
              v41 = v25[10];
              a1 = v189;
              if (!v41)
                break;
LABEL_70:
              while (1)
              {
                v25 = (_QWORD *)v41;
                v42 = *(_WORD *)(v41 + 28);
                if ((v42 & 0x10) != 0 && *(_QWORD *)(v25[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
                  break;
                if ((v42 & 4) != 0)
                {
                  v41 = v25[10];
                  if (v41)
                    continue;
                }
                if (v25 == (_QWORD *)v13)
                  goto LABEL_89;
                while (1)
                {
                  v41 = v25[7];
                  if (v41)
                    break;
                  v25 = (_QWORD *)v25[4];
                  if (v25)
                    v43 = v25 == (_QWORD *)v13;
                  else
                    v43 = 1;
                  if (v43)
                    goto LABEL_89;
                }
              }
            }
            if (v25 != (_QWORD *)v13)
            {
              do
              {
                v41 = v25[7];
                if (v41)
                  goto LABEL_70;
                v25 = (_QWORD *)v25[4];
                if (v25)
                  v44 = v25 == (_QWORD *)v13;
                else
                  v44 = 1;
              }
              while (!v44);
            }
LABEL_89:
            LODWORD(v28) = a5;
            a5 = (unint64_t)v186;
LABEL_40:
            v30 = *(_QWORD *)(v13 + 80);
            if (v30)
            {
              v31 = v23;
              while (1)
              {
                v32 = (_QWORD *)v30;
                v33 = *(_WORD *)(v30 + 28);
                if ((v33 & 0x10) != 0 && *(_QWORD *)(v32[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
                  break;
                if ((v33 & 4) != 0)
                {
                  v30 = v32[10];
                  if (v30)
                    continue;
                }
                if (v32 == (_QWORD *)v13)
                  goto LABEL_278;
                while (1)
                {
                  v30 = v32[7];
                  if (v30)
                    break;
                  v32 = (_QWORD *)v32[4];
                  if (v32)
                    v34 = v32 == (_QWORD *)v13;
                  else
                    v34 = 1;
                  if (v34)
                    goto LABEL_278;
                }
              }
              v187 = (uint64_t *)a5;
              v191 = a1;
              while (1)
              {
                v103 = v29;
                if (v29 == (_DWORD)v28)
                {
                  v104 = v29 + 1;
                  v105 = v103 + (v103 >> 2);
                  if (v105 >= 0x10)
                    v106 = v105 + 1;
                  else
                    v106 = 16;
                  if (v106 <= v104)
                    v28 = v103 + 1;
                  else
                    v28 = v106;
                  if (v28 >> 29)
                    goto LABEL_447;
                  v107 = (char *)WTF::fastMalloc((WTF *)(8 * v28));
                  memcpy(v107, __src, 8 * v103);
                  if (__src)
                  {
                    if (v107 == __src)
                    {
                      v107 = 0;
                      LODWORD(v28) = 0;
                    }
                    WTF::fastFree((WTF *)__src, v108);
                  }
                  result = (*(uint64_t (**)(_QWORD *))(v32[14] + 48))(v32 + 14);
                  __src = v107;
                  *(_QWORD *)&v107[8 * v103] = v32 + 14;
                }
                else
                {
                  result = (*(uint64_t (**)(_QWORD *))(v32[14] + 48))(v32 + 14);
                  *(_QWORD *)&__src[8 * v103] = v32 + 14;
                }
                v29 = v103 + 1;
                v109 = v32[10];
                a1 = v191;
                if (!v109)
                  break;
LABEL_258:
                while (1)
                {
                  v32 = (_QWORD *)v109;
                  v110 = *(_WORD *)(v109 + 28);
                  if ((v110 & 0x10) != 0
                    && *(_QWORD *)(v32[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
                  {
                    break;
                  }
                  if ((v110 & 4) != 0)
                  {
                    v109 = v32[10];
                    if (v109)
                      continue;
                  }
                  if (v32 == (_QWORD *)v13)
                    goto LABEL_277;
                  while (1)
                  {
                    v109 = v32[7];
                    if (v109)
                      break;
                    v32 = (_QWORD *)v32[4];
                    if (v32)
                      v111 = v32 == (_QWORD *)v13;
                    else
                      v111 = 1;
                    if (v111)
                      goto LABEL_277;
                  }
                }
              }
              if (v32 != (_QWORD *)v13)
              {
                do
                {
                  v109 = v32[7];
                  if (v109)
                    goto LABEL_258;
                  v32 = (_QWORD *)v32[4];
                  if (v32)
                    v112 = v32 == (_QWORD *)v13;
                  else
                    v112 = 1;
                }
                while (!v112);
              }
LABEL_277:
              a5 = (unint64_t)v187;
LABEL_278:
              v23 = v31;
            }
            v113 = (WTF *)__src;
            if (!v29)
              goto LABEL_318;
            v185 = v23;
            v188 = (uint64_t *)a5;
            v184 = v11;
            v181 = v29;
            v114 = (int **)MEMORY[0x1E0CBF2F8];
            v115 = &__src[8 * v29];
            v116 = __src;
            while (2)
            {
              v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v116 + 16))(*v116);
              *(_DWORD *)(v117 + 24) += 2;
              v118 = *(_QWORD *)(v117 + 104);
              if (v118)
              {
                v119 = *(unsigned int *)(v118 + 4);
                if ((v119 & 1) != 0)
                {
                  v120 = *(_QWORD *)(v118 + 40);
                  v121 = *(unsigned int *)(v118 + 52);
                  if (!v121)
                    goto LABEL_293;
                }
                else
                {
                  v120 = v118 + 32;
                  v121 = v119 >> 5;
                  if (!(v119 >> 5))
                    goto LABEL_293;
                }
                v122 = (int **)(v120 + 8);
                while (1)
                {
                  v123 = (uint64_t)*(v122 - 1);
                  if (v123 == WebCore::HTMLNames::webkitattachmentidAttr
                    || *(_QWORD *)(v123 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentidAttr + 24)
                    && *(_QWORD *)(v123 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitattachmentidAttr + 32))
                  {
                    break;
                  }
                  v122 += 2;
                  if (!--v121)
                    goto LABEL_293;
                }
              }
              else
              {
LABEL_293:
                v122 = v114;
              }
              v124 = *v122;
              if (*v122)
              {
                v125 = *v124 + 2;
                *v124 = v125;
                v201[0] = (WTF::StringImpl *)v124;
                if (v124[1])
                {
                  v126 = bmalloc::api::isoAllocate();
                  *(_OWORD *)(v126 + 8) = xmmword_1968BC9D0;
                  *(_QWORD *)(v126 + 24) = 0x101C00000002;
                  *(_QWORD *)(v126 + 32) = 0;
                  *(_QWORD *)(v126 + 40) = v17 + 96;
                  *(_OWORD *)(v126 + 48) = 0u;
                  *(_OWORD *)(v126 + 64) = 0u;
                  ++*(_DWORD *)(v17 + 3324);
                  *(_QWORD *)(v126 + 80) = 0;
                  *(_QWORD *)(v126 + 88) = 0;
                  v128 = WebCore::HTMLNames::attachmentTag;
                  if (WebCore::HTMLNames::attachmentTag)
                    ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
                  *(_QWORD *)(v126 + 96) = v128;
                  *(_QWORD *)(v126 + 104) = 0;
                  *(_QWORD *)v126 = off_1E33B4248;
                  *(_BYTE *)(v126 + 112) = 0;
                  *(_OWORD *)(v126 + 136) = 0uLL;
                  *(_OWORD *)(v126 + 152) = 0uLL;
                  *(_OWORD *)(v126 + 168) = 0uLL;
                  *(_OWORD *)(v126 + 184) = 0uLL;
                  *(_OWORD *)(v126 + 200) = 0uLL;
                  *(_OWORD *)(v126 + 216) = 0uLL;
                  *(_OWORD *)(v126 + 232) = 0uLL;
                  *(_OWORD *)(v126 + 120) = 0uLL;
                  *(_OWORD *)(v126 + 248) = 0uLL;
                  *(_OWORD *)(v126 + 264) = 0uLL;
                  *(_BYTE *)(v126 + 280) = 1;
                  v198 = (WTF::StringImpl *)v126;
                  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 704) & 0x100000000000) != 0)
                  {
                    *(_BYTE *)(v126 + 112) = 1;
                    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v126);
                    v126 = (uint64_t)v198;
                  }
                  WebCore::HTMLAttachmentElement::setUniqueIdentifier((WTF **)v126, v201, v127);
                  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*v116 + 40))(*v116, &v198);
                  WebCore::Element::removeAttribute((WebCore::Element *)v117, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitattachmentidAttr);
                  v129 = v198;
                  v198 = 0;
                  if (v129)
                  {
                    if (*((_DWORD *)v129 + 6) == 2)
                    {
                      if ((*((_WORD *)v129 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v129, v15);
                    }
                    else
                    {
                      *((_DWORD *)v129 + 6) -= 2;
                    }
                  }
                  v125 = *v124;
                }
                v130 = v125 - 2;
                if (v130)
                  *v124 = v130;
                else
                  WTF::StringImpl::destroy((WTF::StringImpl *)v124, (WTF::StringImpl *)v15);
              }
              if (*(_DWORD *)(v117 + 24) == 2)
              {
                if ((*(_WORD *)(v117 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v117, v15);
              }
              else
              {
                *(_DWORD *)(v117 + 24) -= 2;
              }
              if (++v116 == (_QWORD *)v115)
              {
                v131 = 8 * v181;
                v113 = (WTF *)__src;
                v132 = (uint64_t *)__src;
                v11 = v184;
                v23 = v185;
                a5 = (unint64_t)v188;
                do
                {
                  result = *v132;
                  *v132 = 0;
                  if (result)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
                  ++v132;
                  v131 -= 8;
                }
                while (v131);
LABEL_318:
                if (v113)
                  result = WTF::fastFree(v113, v15);
                v24 = v193;
                if ((v192 & 1) != 0)
                {
LABEL_321:
                  if (v24)
                    result = WTF::fastFree(v24, v15);
                  goto LABEL_323;
                }
LABEL_366:
                v149 = (uint64_t *)v24;
                do
                {
                  result = *v149;
                  *v149 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v15);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                  ++v149;
                }
                while (v149 != v23);
                goto LABEL_321;
              }
              continue;
            }
          }
        }
LABEL_142:
        v63 = v57;
        goto LABEL_143;
      }
LABEL_323:
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, v15);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  if (!*a3)
    goto LABEL_327;
  if (!*((_DWORD *)*a3 + 1))
    goto LABEL_327;
  v133 = (const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)result);
  result = WTF::equal(*a3, *v133, v134);
  if ((result & 1) != 0)
    goto LABEL_327;
  result = WTF::equal(*a3, *(const WTF::StringImpl **)(a1 + 848), v135);
  if ((result & 1) != 0)
    goto LABEL_327;
  v136 = *(_QWORD *)a5;
  v202 = 0;
  v203 = 0;
  v198 = 0;
  WTF::URL::invalidate((WTF::URL *)&v198);
  MEMORY[0x19AEA52F8](v201, &v198, a3, 0);
  v140 = v198;
  v198 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v140 -= 2;
  }
  v141 = *(_QWORD *)(v136 + 80);
  if (!v141)
    goto LABEL_339;
  while ((*(_WORD *)(v141 + 28) & 8) == 0)
  {
    v141 = *(_QWORD *)(v141 + 56);
    if (!v141)
      goto LABEL_339;
  }
  do
  {
LABEL_374:
    *(_DWORD *)(v141 + 24) += 2;
    v150 = *(_QWORD *)(v141 + 104);
    if (v150)
    {
      if ((*(_BYTE *)(v150 + 4) & 8) != 0)
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v141, (unsigned __int8 *)v15, v139, v137, v138);
      if ((*(_WORD *)(v141 + 28) & 0x20) != 0)
        WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v141);
      v151 = *(_QWORD *)(v141 + 104);
      if (v151)
      {
        v152 = *(_DWORD *)(v151 + 4);
        if ((v152 & 1) != 0)
        {
          v154 = *(_DWORD *)(v151 + 52);
          if (!v154)
            goto LABEL_420;
          v153 = *(_QWORD *)(v151 + 40);
        }
        else
        {
          if (v152 < 0x20)
            goto LABEL_420;
          v153 = v151 + 32;
          v154 = v152 >> 5;
        }
        if (v154)
        {
          v155 = 0;
          do
          {
            v156 = v153 + 16 * v155;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 608))(v141, v156))
            {
              v157 = *(_QWORD *)(v156 + 8);
              if (v157)
              {
                if (*(_DWORD *)(v157 + 4))
                {
                  *(_DWORD *)(v141 + 24) += 2;
                  v159 = *(WTF::StringImpl **)v156;
                  if (*(_QWORD *)v156)
                    ++*(_DWORD *)v159;
                  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v141 + 616))(&v197, v141, v201, v153 + 16 * v155, 2);
                  v160 = v197;
                  v197 = 0;
                  if (v160)
                  {
                    v204 = v160;
                    if ((*((_BYTE *)v160 + 16) & 0x10) == 0)
                    {
                      WTF::AtomStringImpl::addSlowCase();
                      v161 = v204;
                      v160 = (WTF::StringImpl *)v205[0];
                      v204 = 0;
                      v205[0] = 0;
                      if (v161)
                      {
                        if (*(_DWORD *)v161 == 2)
                          WTF::StringImpl::destroy(v161, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v161 -= 2;
                      }
                    }
                  }
                  v198 = (WTF::StringImpl *)v141;
                  v199 = v159;
                  v200 = v160;
                  v162 = HIDWORD(v203);
                  if (HIDWORD(v203) == (_DWORD)v203)
                  {
                    v163 = WTF::Vector<WebCore::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, HIDWORD(v203) + 1, (unint64_t)&v198);
                    v162 = HIDWORD(v203);
                    v164 = (_QWORD *)((char *)v202 + 24 * HIDWORD(v203));
                    v165 = *(_QWORD *)v163;
                    *(_QWORD *)v163 = 0;
                    *v164 = v165;
                    v166 = *((_QWORD *)v163 + 1);
                    *((_QWORD *)v163 + 1) = 0;
                    v164[1] = v166;
                    v167 = (WTF::StringImpl **)(v164 + 2);
                    v168 = (WTF::StringImpl **)(v163 + 4);
                  }
                  else
                  {
                    v169 = (_QWORD *)((char *)v202 + 24 * HIDWORD(v203));
                    v198 = 0;
                    *v169 = v141;
                    v170 = v199;
                    v199 = 0;
                    v169[1] = v170;
                    v167 = (WTF::StringImpl **)(v169 + 2);
                    v168 = &v200;
                  }
                  v171 = *v168;
                  *v168 = 0;
                  *v167 = v171;
                  HIDWORD(v203) = v162 + 1;
                  v172 = v200;
                  v200 = 0;
                  if (v172)
                  {
                    if (*(_DWORD *)v172 == 2)
                      WTF::StringImpl::destroy(v172, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v172 -= 2;
                  }
                  v173 = (WTF::StringImpl **)v199;
                  v199 = 0;
                  if (v173)
                  {
                    if (*(_DWORD *)v173 == 1)
                    {
                      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v173);
                      WTF::fastFree(v176, v177);
                    }
                    else
                    {
                      --*(_DWORD *)v173;
                    }
                  }
                  v174 = v198;
                  v198 = 0;
                  if (v174)
                  {
                    if (*((_DWORD *)v174 + 6) == 2)
                    {
                      if ((*((_WORD *)v174 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v174, v15);
                    }
                    else
                    {
                      *((_DWORD *)v174 + 6) -= 2;
                    }
                  }
                  v175 = v197;
                  v197 = 0;
                  if (v175)
                  {
                    if (*(_DWORD *)v175 == 2)
                      WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v175 -= 2;
                  }
                }
              }
            }
            v158 = v155 + 1;
            v155 = (v155 + 1);
          }
          while (v154 != v158);
        }
      }
    }
LABEL_420:
    if (*(_DWORD *)(v141 + 24) == 2)
    {
      if ((*(_WORD *)(v141 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v141, v15);
    }
    else
    {
      *(_DWORD *)(v141 + 24) -= 2;
    }
    v178 = *(_QWORD *)(v141 + 80);
    if (!v178)
    {
      if (v141 == v136)
        goto LABEL_339;
      while (1)
      {
        v178 = *(_QWORD *)(v141 + 56);
        if (v178)
          break;
        v141 = *(_QWORD *)(v141 + 32);
        if (v141)
          v180 = v141 == v136;
        else
          v180 = 1;
        if (v180)
          goto LABEL_339;
      }
    }
    v141 = v178;
  }
  while ((*(_WORD *)(v178 + 28) & 8) != 0);
  while (v178 != v136)
  {
    while (1)
    {
      v141 = *(_QWORD *)(v178 + 56);
      if (v141)
        break;
      v178 = *(_QWORD *)(v178 + 32);
      if (v178)
        v179 = v178 == v136;
      else
        v179 = 1;
      if (v179)
        goto LABEL_339;
    }
    v178 = *(_QWORD *)(v178 + 56);
    if ((*(_WORD *)(v141 + 28) & 8) != 0)
      goto LABEL_374;
  }
LABEL_339:
  if (HIDWORD(v203))
  {
    v142 = (WebCore::Element **)v202;
    v143 = (WebCore::Element **)((char *)v202 + 24 * HIDWORD(v203));
    do
    {
      v144 = (const WebCore::QualifiedName *)(v142 + 1);
      v146 = *v142;
      v145 = v142 + 2;
      WebCore::Element::setAttribute(v146, v144, v145, 0, &v198, v139);
      if ((_BYTE)v200)
      {
        v147 = v199;
        v199 = 0;
        if (v147)
        {
          if (*(_DWORD *)v147 == 2)
            WTF::StringImpl::destroy(v147, (WTF::StringImpl *)v15);
          else
            *(_DWORD *)v147 -= 2;
        }
      }
      v142 = v145 + 1;
    }
    while (v142 != v143);
  }
  result = (uint64_t)v201[0];
  v201[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  v148 = v202;
  if (HIDWORD(v203))
    result = (uint64_t)WTF::VectorDestructor<true,WebCore::AttributeChange>::destruct((unsigned int *)v202, (WTF::StringImpl *)((char *)v202 + 24 * HIDWORD(v203)));
  if (v148)
    result = WTF::fastFree(v148, v15);
LABEL_327:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::sanitizedMarkupForFragmentInDocument@<X0>(WebCore::Node **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, WebCore::Node **a5@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BOOL4 v18;
  WebCore::Node *v19;
  int16x8_t v20;
  WebCore::Node *v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  int16x8_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int16 v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  _BYTE *v37;
  WebCore::Node *v38;
  unsigned int *result;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  WebCore::Node *v45;
  _BYTE *v46;
  size_t v47;
  _DWORD *v48;
  int v49;
  int v50;
  WebCore::Node *v51;
  unsigned __int128 *v52;
  unsigned __int128 *v53;
  unsigned __int128 v54;
  char v55;
  uint64_t v56;
  WebCore::Node *v57;
  char v58[8];
  WTF::StringImpl *v59;
  char v60;
  WebCore::Node *v61;
  uint64_t v62;
  WebCore::Node *v63;
  unint64_t v64;

  if ((a3 & 1) == 0)
  {
    v9 = *a4;
    if (*a4)
    {
      v10 = *(unsigned int *)(v9 + 16);
      v11 = *(WebCore::Node **)(v9 + 8);
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
      v12 = (v10 >> 2) & 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v63 = v11;
    v64 = v9 | (unint64_t)(v12 << 32);
    if (WTF::StringView::startsWith())
    {
      if (BYTE4(v64))
      {
        if ((_DWORD)v64)
        {
          v14 = 16;
          if (v64 < 0x10uLL)
            v14 = v64;
          v15 = v14;
          v16 = v63;
          do
          {
            if (*v16 == 62)
              goto LABEL_15;
            ++v16;
            --v15;
          }
          while (v15);
          if (v64 >= 0x11)
          {
            v16 = memchr((char *)v63 + v14, 62, v64 - v14);
            if (v16)
            {
LABEL_15:
              v17 = v16 - (_BYTE *)v63;
              goto LABEL_16;
            }
          }
        }
      }
      else if ((_DWORD)v64)
      {
        v19 = (WebCore::Node *)((char *)v63 + 2 * v64);
        if (v64 <= 0x1F)
        {
          v56 = 2 * v64;
          v26 = v63;
          while (*(_WORD *)v26 != 62)
          {
            v18 = 0;
            v26 = (WebCore::Node *)((char *)v26 + 2);
            v56 -= 2;
            if (!v56)
              goto LABEL_37;
          }
LABEL_34:
          if (v26 != v19)
          {
            v17 = (v26 - v63) >> 1;
LABEL_16:
            if (v17 != -1)
            {
              if (v64 <= v17)
                v17 = v64;
              else
                v17 = BYTE4(v64) ? v17 | 0x100000000 : v17;
              v61 = v63;
              v62 = v17;
              if (WTF::StringView::find() != -1)
              {
                v18 = WTF::StringView::find() != -1;
LABEL_37:
                v8 = !v18;
                goto LABEL_38;
              }
            }
          }
        }
        else
        {
          v20.i64[0] = 0x3E003E003E003ELL;
          v20.i64[1] = 0x3E003E003E003ELL;
          v21 = v63;
          do
          {
            v22 = (int8x16_t)vceqq_s16(*(int16x8_t *)v21, v20);
            LOWORD(v13) = vmaxvq_u16((uint16x8_t)v22);
            if (v13)
              goto LABEL_33;
            v23 = (char *)v21 + 16;
            v24 = (char *)v21 + 30;
            v21 = (WebCore::Node *)((char *)v21 + 16);
          }
          while (v24 < (char *)v19);
          if (v23 < (char *)v19)
          {
            v25.i64[0] = 0x3E003E003E003ELL;
            v25.i64[1] = 0x3E003E003E003ELL;
            v22 = (int8x16_t)vceqq_s16(*((int16x8_t *)v19 - 1), v25);
            v25.i16[0] = vmaxvq_u16((uint16x8_t)v22);
            if (v25.i32[0])
            {
              v21 = (WebCore::Node *)((char *)v19 - 16);
LABEL_33:
              v26 = (WebCore::Node *)((char *)v21
                                    + 2
                                    * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v22)));
              goto LABEL_34;
            }
          }
        }
      }
    }
    v18 = 0;
    goto LABEL_37;
  }
  v8 = 1;
LABEL_38:
  v27 = *(_QWORD *)(a2 + 1272);
  if (!v27
    || (*(_WORD *)(v27 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v28 = 0;
    goto LABEL_89;
  }
  v28 = *(_QWORD *)(v27 + 80);
  if (!v28)
  {
LABEL_89:
    v29 = 1;
    goto LABEL_47;
  }
  while ((*(_WORD *)(v28 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v28 = *(_QWORD *)(v28 + 56);
    if (!v28)
      goto LABEL_89;
  }
  v29 = 0;
  *(_DWORD *)(v28 + 24) += 2;
LABEL_47:
  WebCore::ContainerNode::appendChild(v28, *a1, (uint64_t)v58);
  if (v60)
  {
    v31 = v59;
    v59 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  v32 = *(_WORD *)(v28 + 28);
  v33 = *(_DWORD *)(v28 + 24);
  v63 = (WebCore::Node *)v28;
  LODWORD(v64) = 0;
  v34 = BYTE4(v64) & 0xF0;
  if ((v32 & 1) == 0)
    v34 = BYTE4(v64) & 0xF0 | 3;
  BYTE4(v64) = v34;
  *(_DWORD *)(v28 + 24) = v33 + 4;
  if ((v32 & 1) != 0)
  {
    v36 = *(_QWORD *)(v28 + 80);
    if (v36)
      LODWORD(v36) = *(_DWORD *)(v36 + 4);
    v61 = (WebCore::Node *)v28;
    LODWORD(v62) = v36;
    v35 = BYTE4(v62) & 0xF0;
  }
  else
  {
    v61 = (WebCore::Node *)v28;
    LODWORD(v62) = 0;
    v35 = BYTE4(v62) & 0xF0 | 4;
  }
  BYTE4(v62) = v35;
  WebCore::serializePreservingVisualAppearanceInternal((uint64_t *)&v57, (WebCore *)&v63, (uint64_t)&v61, 0, 3, 0, 0, 1, 0, 1, v8, 0);
  v38 = v61;
  v61 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v37);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  result = (unsigned int *)v63;
  v63 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v37);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v40 = (uint64_t)v57;
  if (v8)
  {
    *a5 = v57;
    goto LABEL_84;
  }
  if (v57)
  {
    v41 = *((_DWORD *)v57 + 1);
    *(_DWORD *)v57 += 2;
    if (v41 < 0)
      goto LABEL_115;
  }
  else
  {
    v41 = 0;
  }
  v42 = __OFADD__(v41, 7);
  v43 = v41 + 7;
  if (v42)
    goto LABEL_115;
  v44 = (v43 + 203);
  if (__OFADD__(v43, 203))
    goto LABEL_115;
  if (v40)
  {
    if ((*(_BYTE *)(v40 + 16) & 4) == 0)
    {
      result = (unsigned int *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v44, 0, (int8x16_t *)"<html xmlns:o=\"urn:schemas-microsoft-com:office:office\"\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\nxmlns=\"http://www.w3.org/TR/REC-html40\">", 0xCBu, v40, (int8x16_t *)"</html>", 7u, a5);
      if (!*a5)
        goto LABEL_116;
LABEL_80:
      v49 = *(_DWORD *)v40 - 2;
      if (*(_DWORD *)v40 == 2)
      {
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v40, (WTF::StringImpl *)v37);
        v49 = *(_DWORD *)v40;
      }
      else
      {
        *(_DWORD *)v40 = v49;
      }
      v50 = v49 - 2;
      if (v50)
        *(_DWORD *)v40 = v50;
      else
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v40, (WTF::StringImpl *)v37);
      goto LABEL_84;
    }
    result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v44 + 20));
    v45 = v63;
    if (v63)
    {
      *(_OWORD *)((char *)v63 + 84) = *(_OWORD *)"\"urn:schemas-microsoft-com:office:word\"\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\nxmlns=\"http://www.w3.org/TR/REC-html40\">";
      qmemcpy((char *)v45 + 100, "rosoft-com:office:word\"\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\nxmlns=\"http://www.w3.org/TR/REC-html40\">", 123);
      *(_DWORD *)v45 = 2;
      *((_DWORD *)v45 + 1) = v44;
      *((_QWORD *)v45 + 1) = (char *)v45 + 20;
      *((_DWORD *)v45 + 4) = 4;
      qmemcpy((char *)v45 + 20, "<html xmlns:o=\"urn:schemas-microsoft-com:office:office\"\nxmlns:w=", 64);
      v46 = (char *)v45 + 223;
      v37 = *(_BYTE **)(v40 + 8);
      v47 = *(unsigned int *)(v40 + 4);
      if ((*(_BYTE *)(v40 + 16) & 4) != 0)
      {
        if ((_DWORD)v47)
        {
          if ((_DWORD)v47 == 1)
            *v46 = *v37;
          else
            result = (unsigned int *)memcpy((char *)v45 + 223, v37, v47);
        }
      }
      else
      {
        if (v47 < 0x10)
        {
          v52 = (unsigned __int128 *)((char *)v45 + 223);
        }
        else
        {
          v52 = (unsigned __int128 *)&v46[v47 & 0xFFFFFFF0];
          v53 = (unsigned __int128 *)((char *)v45 + 223);
          do
          {
            v54 = (unsigned __int128)vld2q_s8(v37);
            v37 += 32;
            *v53++ = v54;
          }
          while (v53 != v52);
        }
        while (v52 != (unsigned __int128 *)&v46[v47])
        {
          v55 = *v37;
          v37 += 2;
          *(_BYTE *)v52 = v55;
          v52 = (unsigned __int128 *)((char *)v52 + 1);
        }
      }
      v48 = &v46[*(unsigned int *)(v40 + 4)];
      *(_DWORD *)((char *)v48 + 3) = 1047293300;
      *v48 = 1952984892;
      *a5 = v45;
      goto LABEL_80;
    }
LABEL_115:
    *a5 = 0;
LABEL_116:
    __break(0xC471u);
    return result;
  }
  result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v44 + 20));
  v51 = v63;
  if (!v63)
    goto LABEL_115;
  *(_OWORD *)((char *)v63 + 164) = *(_OWORD *)"fice/2004/12/omml\"\nxmlns=\"http://www.w3.org/TR/REC-html40\">";
  qmemcpy((char *)v51 + 180, "l\"\nxmlns=\"http://www.w3.org/TR/REC-html40\"></html>", 50);
  *(_DWORD *)v51 = 2;
  *((_DWORD *)v51 + 1) = v44;
  *((_QWORD *)v51 + 1) = (char *)v51 + 20;
  *((_DWORD *)v51 + 4) = 4;
  qmemcpy((char *)v51 + 20, "<html xmlns:o=\"urn:schemas-microsoft-com:office:office\"\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\nxmlns:m=\"http://schemas.microsoft.com/of", 144);
  *a5 = v51;
LABEL_84:
  if ((v29 & 1) == 0)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v28, v37);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::UserSelectNoneStateCache::computeState(WebCore::UserSelectNoneStateCache *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  WebCore::Node *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  WebCore::Node *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  unsigned int *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node **v34;
  WebCore::Node *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int j;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::Node **v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::Node *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WebCore::Node *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  WebCore::Node *v99;

  v2 = a2;
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = v9;
      v12 = *(WebCore::Node **)(v4 + 16 * v9);
      if (v12 != (WebCore::Node *)-1)
      {
        if (!v12)
          goto LABEL_8;
        if (v12 == a2)
          break;
      }
      v9 = (v11 + i) & v5;
    }
    if ((_DWORD)v11 != *(_DWORD *)(v4 - 4))
      return (unsigned int *)*(unsigned __int8 *)(v4 + 16 * v11 + 8);
  }
LABEL_8:
  v13 = (_QWORD *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
  if (!v13)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v13 = *(_QWORD **)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v13)
      v13 = (_QWORD *)v13[1];
  }
  v14 = v13[13];
  if ((*(_BYTE *)(v14 + 239) & 1) == 0)
  {
    v15 = *(_DWORD *)(v14 + 228);
    if ((v15 & 0x30) != 0 && (*(_DWORD *)(*(_QWORD *)(v13[11] + 32) + 148) & 0xC00000) != 0x800000)
      return 0;
    if ((v15 & 0x18000) != 0)
      return 0;
  }
  v17 = 0;
  *((_DWORD *)a2 + 6) += 2;
  v16 = 2;
  v18 = a2;
  do
  {
    while (1)
    {
      if (!v18)
        return (unsigned int *)v16;
      v19 = (_QWORD *)(*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL);
      if (!v19)
        goto LABEL_21;
      if ((*(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v19 = *(_QWORD **)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v19)
          v19 = (_QWORD *)v19[1];
      }
      v20 = v19[13];
      if ((*(_BYTE *)(v20 + 239) & 1) == 0)
      {
        if ((v21 = *(_DWORD *)(v20 + 228), (v21 & 0x30) != 0)
          && (*(_DWORD *)(*(_QWORD *)(v19[11] + 32) + 148) & 0xC00000) != 0x800000
          || (v21 & 0x18000) != 0)
        {
LABEL_21:
          v16 = 1;
          v17 = 1;
        }
      }
      v22 = *((_WORD *)v18 + 14);
      if (!*((_BYTE *)this + 8))
        goto LABEL_27;
      if ((v22 & 8) != 0 && (*((_QWORD *)v18 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v25 = *(_QWORD *)((*((_QWORD *)v18 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v25)
        {
          if (*(_BYTE *)(v25 + 193))
          {
            v23 = (uint64_t *)(v25 + 80);
            goto LABEL_29;
          }
        }
      }
      if ((v22 & 0x10) == 0
        || *(_QWORD *)(*((_QWORD *)v18 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        goto LABEL_27;
      }
      v26 = **((_QWORD **)v18 + 5);
      if (!v26 || (*(_WORD *)(v26 + 28) & 0x80) == 0)
        goto LABEL_27;
      v28 = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v28 + 2;
      result = *(unsigned int **)(v26 + 224);
      if (result)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, WebCore::Node *, uint64_t))(*(_QWORD *)result + 24))(result, v18, v26);
        v30 = (uint64_t)result;
        v28 = *(_DWORD *)(v26 + 24) - 2;
      }
      else
      {
        v30 = 0;
      }
      if (v28)
      {
        *(_DWORD *)(v26 + 24) = v28;
      }
      else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)v26, a2);
      }
      if (!v30)
      {
        v22 = *((_WORD *)v18 + 14);
LABEL_27:
        if ((v22 & 4) == 0)
          goto LABEL_56;
        v23 = (uint64_t *)((char *)v18 + 80);
        goto LABEL_29;
      }
      if (!*(_DWORD *)(v30 + 12))
      {
        __break(0xC471u);
        return result;
      }
      v31 = **(_QWORD **)v30;
      if (!v31)
      {
LABEL_56:
        v24 = 0;
        break;
      }
      v23 = (uint64_t *)(v31 + 8);
LABEL_29:
      v24 = *v23;
      if (!*v23)
        break;
      *(_DWORD *)(v24 + 24) += 2;
      if ((v17 & 1) != 0)
        break;
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, a2);
        v18 = (WebCore::Node *)v24;
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
        v18 = (WebCore::Node *)v24;
      }
    }
    if (v18 != v2)
    {
      if (!*((_BYTE *)this + 8))
        goto LABEL_62;
      v32 = *((_QWORD *)v18 + 4);
      if (!v32)
        goto LABEL_62;
      if ((*(_WORD *)(v32 + 28) & 8) == 0)
        goto LABEL_62;
      v33 = *(_QWORD *)(v32 + 72) & 0xFFFFFFFFFFFFLL;
      if (!v33)
        goto LABEL_62;
      v83 = *(_QWORD *)(v33 + 88);
      if (!v83)
        goto LABEL_62;
      v84 = *(_QWORD *)(v83 + 224);
      if (!v84)
        goto LABEL_62;
      v85 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v84 + 16))(v84, v18);
      if (!v85)
        goto LABEL_62;
      a2 = v85;
      v86 = **((_QWORD **)v85 + 5);
      v87 = (*(_WORD *)(v86 + 28) & 0x80) != 0 ? **((_QWORD **)v85 + 5) : 0;
      if (*(_BYTE *)(v87 + 193))
      {
        v88 = *(_DWORD *)(v86 + 24);
        *(_DWORD *)(v86 + 24) = v88 + 2;
        v89 = *(_QWORD *)(v86 + 224);
        if (v89)
        {
          v90 = (*(uint64_t (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)v89 + 24))(v89, a2, v86);
          v88 = *(_DWORD *)(v86 + 24) - 2;
        }
        else
        {
          v90 = 0;
        }
        if (v88)
        {
          *(_DWORD *)(v86 + 24) = v88;
        }
        else if ((*(_WORD *)(v86 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v86, a2);
        }
        v94 = *(unsigned int *)(v90 + 12);
        if ((_DWORD)v94)
        {
          v95 = 0;
          while (1)
          {
            v96 = *(_QWORD *)(*(_QWORD *)v90 + 8 * v95);
            if (v96)
            {
              if (*(WebCore::Node **)(v96 + 8) == v18)
                break;
            }
            if (v94 == ++v95)
              goto LABEL_228;
          }
        }
        else
        {
LABEL_228:
          v95 = -1;
        }
        v97 = v95 + 1;
        if (v97 >= v94)
          goto LABEL_232;
        v98 = *(_QWORD *)(*(_QWORD *)v90 + 8 * v97);
        if (!v98)
          goto LABEL_232;
        v34 = (WebCore::Node **)(v98 + 8);
      }
      else
      {
LABEL_62:
        v34 = (WebCore::Node **)((char *)v18 + 56);
      }
      v35 = *v34;
      if (*v34)
      {
        *((_DWORD *)v35 + 6) += 2;
        if ((v17 & 1) == 0)
          goto LABEL_201;
        v99 = v35;
LABEL_66:
        if (*((_BYTE *)this + 8))
        {
          v37 = (uint64_t *)((char *)v18 + 32);
          v36 = *((_QWORD *)v18 + 4);
          if (v36)
          {
            if ((*(_WORD *)(v36 + 28) & 8) != 0)
            {
              v38 = *(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL;
              if (v38)
              {
                v91 = *(_QWORD *)(v38 + 88);
                if (v91)
                {
                  v92 = *(_QWORD *)(v91 + 224);
                  if (v92)
                  {
                    v40 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v92 + 16))(v92, v18);
                    if (v40)
                    {
LABEL_77:
                      *(_DWORD *)(v40 + 24) += 2;
                      while (1)
                      {
                        v41 = v40;
                        *(_DWORD *)(v40 + 24) += 2;
                        v42 = *(_QWORD *)this;
                        if (*(_QWORD *)this
                          || (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WebCore::TextManipulationControllerExclusionRule::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash((uint64_t *)this, 8u), (v42 = *(_QWORD *)this) != 0))
                        {
                          v43 = *(_DWORD *)(v42 - 8);
                        }
                        else
                        {
                          v43 = 0;
                        }
                        v44 = 0;
                        v45 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
                        v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
                        v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
                        v48 = (v47 >> 31) ^ v47;
                        for (j = 1; ; ++j)
                        {
                          v50 = v48 & v43;
                          v51 = (uint64_t *)(v42 + 16 * v50);
                          v52 = *v51;
                          if (*v51 == -1)
                          {
                            v44 = v42 + 16 * v50;
                            goto LABEL_87;
                          }
                          if (!v52)
                          {
                            if (v44)
                            {
                              *(_QWORD *)v44 = 0;
                              *(_BYTE *)(v44 + 8) = 0;
                              --*(_DWORD *)(*(_QWORD *)this - 16);
                              *(_QWORD *)v44 = v40;
                            }
                            else
                            {
                              *v51 = v40;
                              v44 = v42 + 16 * v50;
                            }
                            *(_BYTE *)(v44 + 8) = v16;
                            v53 = *(_QWORD *)this;
                            if (*(_QWORD *)this)
                              v54 = *(_DWORD *)(v53 - 12) + 1;
                            else
                              v54 = 1;
                            *(_DWORD *)(v53 - 12) = v54;
                            v55 = *(_QWORD *)this;
                            if (*(_QWORD *)this)
                              v56 = *(_DWORD *)(v55 - 12);
                            else
                              v56 = 0;
                            v57 = (*(_DWORD *)(v55 - 16) + v56);
                            v58 = *(unsigned int *)(v55 - 4);
                            if (v58 > 0x400)
                            {
                              if (v58 > 2 * v57)
                                goto LABEL_107;
LABEL_103:
                              v59 = (_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58));
                            }
                            else
                            {
                              if (3 * v58 > 4 * v57)
                                goto LABEL_107;
                              if ((_DWORD)v58)
                                goto LABEL_103;
                              v59 = 8;
                            }
                            WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WebCore::TextManipulationControllerExclusionRule::Type,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WebCore::TextManipulationControllerExclusionRule::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash((uint64_t *)this, v59);
                            goto LABEL_107;
                          }
                          if (v52 == v40)
                            break;
LABEL_87:
                          v48 = j + v50;
                        }
                        *(_BYTE *)(v42 + 16 * v50 + 8) = v16;
                        if (v40)
                        {
                          if (*(_DWORD *)(v40 + 24) == 2)
                          {
                            if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
                          }
                          else
                          {
                            *(_DWORD *)(v40 + 24) -= 2;
                          }
                        }
LABEL_107:
                        if ((WebCore::Node *)v40 == v2)
                        {
                          if (*((_DWORD *)v18 + 6) == 2)
                          {
                            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v18, a2);
                            v35 = 0;
                          }
                          else
                          {
                            v35 = 0;
                            *((_DWORD *)v18 + 6) -= 2;
                          }
                          v41 = (uint64_t)v2;
                          goto LABEL_174;
                        }
                        if (!*((_BYTE *)this + 8))
                          goto LABEL_112;
                        v60 = *(_QWORD *)(v40 + 32);
                        if (!v60)
                          goto LABEL_112;
                        if ((*(_WORD *)(v60 + 28) & 8) == 0)
                          goto LABEL_112;
                        v61 = *(_QWORD *)(v60 + 72) & 0xFFFFFFFFFFFFLL;
                        if (!v61)
                          goto LABEL_112;
                        v67 = *(_QWORD *)(v61 + 88);
                        if (!v67)
                          goto LABEL_112;
                        v68 = *(_QWORD *)(v67 + 224);
                        if (!v68)
                          goto LABEL_112;
                        v69 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v40, v44);
                        if (!v69)
                          goto LABEL_112;
                        a2 = v69;
                        v70 = **((_QWORD **)v69 + 5);
                        v71 = (*(_WORD *)(v70 + 28) & 0x80) != 0 ? **((_QWORD **)v69 + 5) : 0;
                        if (!*(_BYTE *)(v71 + 193))
                        {
LABEL_112:
                          v62 = (WebCore::Node **)(v41 + 56);
                          goto LABEL_113;
                        }
                        v72 = *(_DWORD *)(v70 + 24);
                        *(_DWORD *)(v70 + 24) = v72 + 2;
                        v73 = *(_QWORD *)(v70 + 224);
                        if (v73)
                        {
                          v74 = (*(uint64_t (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)v73 + 24))(v73, a2, v70);
                          v72 = *(_DWORD *)(v70 + 24) - 2;
                        }
                        else
                        {
                          v74 = 0;
                        }
                        if (v72)
                        {
                          *(_DWORD *)(v70 + 24) = v72;
                        }
                        else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef((WebCore::Node *)v70, a2);
                        }
                        v78 = *(unsigned int *)(v74 + 12);
                        if ((_DWORD)v78)
                        {
                          v79 = 0;
                          while (1)
                          {
                            v80 = *(_QWORD *)(*(_QWORD *)v74 + 8 * v79);
                            if (v80)
                            {
                              if (*(_QWORD *)(v80 + 8) == v41)
                                break;
                            }
                            if (v78 == ++v79)
                              goto LABEL_163;
                          }
                        }
                        else
                        {
LABEL_163:
                          v79 = -1;
                        }
                        v81 = v79 + 1;
                        if (v81 < v78)
                        {
                          v82 = *(_QWORD *)(*(_QWORD *)v74 + 8 * v81);
                          if (v82)
                          {
                            v62 = (WebCore::Node **)(v82 + 8);
LABEL_113:
                            v35 = *v62;
                            if (*v62)
                            {
                              v63 = *((_DWORD *)v35 + 6);
                              *((_DWORD *)v35 + 6) = v63 + 2;
                              if ((v17 & 1) != 0)
                              {
                                if (v63)
                                {
                                  *((_DWORD *)v35 + 6) = v63;
                                }
                                else if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                                {
                                  WebCore::Node::removedLastRef(v35, a2);
                                }
                                goto LABEL_117;
                              }
                              if (*((_DWORD *)v18 + 6) == 2)
                              {
                                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v18, a2);
                              }
                              else
                              {
                                *((_DWORD *)v18 + 6) -= 2;
                              }
LABEL_174:
                              v18 = v99;
                              if (*(_DWORD *)(v41 + 24) == 2)
                              {
                                if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v41, a2);
                              }
                              else
                              {
                                *(_DWORD *)(v41 + 24) -= 2;
                              }
LABEL_200:
                              if (v18)
                              {
LABEL_201:
                                if (*((_DWORD *)v18 + 6) != 2)
                                {
                                  v39 = 0;
                                  *((_DWORD *)v18 + 6) -= 2;
                                  if (v24)
                                    goto LABEL_203;
                                  goto LABEL_205;
                                }
                                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v18, a2);
                              }
                              v39 = 0;
                              if (v24)
                                goto LABEL_203;
                              goto LABEL_205;
                            }
                          }
                        }
LABEL_117:
                        if (!*((_BYTE *)this + 8))
                        {
                          if ((*(_WORD *)(v41 + 28) & 0x80) != 0)
                            goto LABEL_152;
                          v65 = (uint64_t *)(v41 + 32);
LABEL_125:
                          v40 = *v65;
                          if (!*v65)
                            goto LABEL_127;
LABEL_126:
                          *(_DWORD *)(v40 + 24) += 2;
                          goto LABEL_127;
                        }
                        v65 = (uint64_t *)(v41 + 32);
                        v64 = *(_QWORD *)(v41 + 32);
                        if (v64)
                        {
                          if ((*(_WORD *)(v64 + 28) & 8) != 0)
                          {
                            v66 = *(_QWORD *)(v64 + 72) & 0xFFFFFFFFFFFFLL;
                            if (v66)
                            {
                              v75 = *(_QWORD *)(v66 + 88);
                              if (v75)
                              {
                                v76 = *(_QWORD *)(v75 + 224);
                                if (v76)
                                {
                                  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v41, v44);
                                  if (v40)
                                    goto LABEL_126;
                                }
                              }
                            }
                          }
                        }
                        if ((*(_WORD *)(v41 + 28) & 0x80) == 0)
                          goto LABEL_125;
LABEL_152:
                        v77 = *(_QWORD *)(v41 + 200);
                        if (v77)
                        {
                          v65 = (uint64_t *)(v77 + 8);
                          goto LABEL_125;
                        }
                        v40 = 0;
LABEL_127:
                        if (*(_DWORD *)(v41 + 24) == 2)
                        {
                          if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v41, a2);
                        }
                        else
                        {
                          *(_DWORD *)(v41 + 24) -= 2;
                        }
                        if (!v40)
                        {
LABEL_197:
                          if (*((_DWORD *)v18 + 6) == 2)
                          {
                            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v18, a2);
                            v35 = 0;
                          }
                          else
                          {
                            v35 = 0;
                            *((_DWORD *)v18 + 6) -= 2;
                          }
                          v18 = v99;
                          goto LABEL_200;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((*((_WORD *)v18 + 14) & 0x80) == 0)
          {
LABEL_76:
            v40 = *v37;
            if (!*v37)
              goto LABEL_197;
            goto LABEL_77;
          }
        }
        else if ((*((_WORD *)v18 + 14) & 0x80) == 0)
        {
          v37 = (uint64_t *)((char *)v18 + 32);
          goto LABEL_76;
        }
        v93 = *((_QWORD *)v18 + 25);
        if (!v93)
          goto LABEL_197;
        v37 = (uint64_t *)(v93 + 8);
        goto LABEL_76;
      }
LABEL_232:
      v99 = 0;
      goto LABEL_66;
    }
    v39 = 3;
    v35 = v2;
    if (v24)
    {
LABEL_203:
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
LABEL_205:
    v18 = v35;
  }
  while (!v39);
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, a2);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  return (unsigned int *)v16;
}

WTF::StringImpl *WebCore::StyledMarkupAccumulator::wrapWithNode(uint64_t a1, WTF::StringBuilder *a2, int a3, int a4, __n128 a5)
{
  int v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    if (a3 && (*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      v8 = *(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1;
    else
      v8 = 0;
    WebCore::StyledMarkupAccumulator::appendStartTag(a1, (uint64_t)&v30, a2, v8, a4);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2, v9);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    WebCore::MarkupAccumulator::appendNonElementNode((WTF::StringImpl *)a1, (WebCore *)&v30, a2, 0, a5);
  }
  v10 = v30;
  if (v30
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v30),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v30),
        (v10 = v30) != 0))
  {
    *(_DWORD *)v10 += 2;
  }
  v29 = v10;
  v11 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 168))
  {
    v23 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 160, v11 + 1, (unint64_t)&v29);
    v25 = *(unsigned int *)(a1 + 172);
    v26 = *(_QWORD *)(a1 + 160);
    v27 = *v23;
    *v23 = 0;
    *(_QWORD *)(v26 + 8 * v25) = v27;
    v28 = v29;
    *(_DWORD *)(a1 + 172) = v25 + 1;
    v29 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v24);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v11) = v10;
    *(_DWORD *)(a1 + 172) = v11 + 1;
  }
  if ((*((_WORD *)a2 + 14) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, WTF::StringBuilder *))(*(_QWORD *)a1 + 24))(a1, a1 + 16, a2);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(a2, v13);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    result = WebCore::MarkupAccumulator::suitableShadowRoot((WebCore::MarkupAccumulator *)a1, a2);
    if (result)
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
    {
      v16 = v15 + (v15 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v15 + 1)
        v18 = v15 + 1;
      else
        v18 = v17;
      if (v18 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v19 = *(void **)v14;
      v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
      *(_DWORD *)(v14 + 8) = v18;
      *(_QWORD *)v14 = v20;
      memcpy(v20, v19, 8 * v15);
      if (v19)
      {
        if (*(void **)v14 == v19)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
        }
        WTF::fastFree((WTF *)v19, v13);
      }
      v15 = *(unsigned int *)(v14 + 12);
      v21 = (_QWORD *)(*(_QWORD *)v14 + 8 * v15);
    }
    else
    {
      v21 = (_QWORD *)(*(_QWORD *)v14 + 8 * v15);
    }
    *((_DWORD *)a2 + 6) += 2;
    *v21 = a2;
    *(_DWORD *)(v14 + 12) = v15 + 1;
  }
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::StyledMarkupAccumulator::appendStartTag(uint64_t a1, uint64_t a2, WebCore::DataDetection *this, int a4, int a5)
{
  __n128 v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;
  int v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  WTF::String *v49;
  uint64_t v50;
  __n128 v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  WTF::String *v59;
  __n128 v60;
  unsigned int v61;
  unsigned __int8 v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t result;
  WebCore::EditingStyle *v69;
  WTF *v70;
  void *v71;
  __int16 v73;
  int v74;
  int v75;
  int v76;
  WTF::StringImpl *v77;

  v73 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358);
  if ((*((_WORD *)this + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    v10 = 1;
  }
  else
  {
    if (!WebCore::DataDetection::isDataDetectorElement(this, (const WebCore::Element *)a2))
    {
      WebCore::MarkupAccumulator::appendOpenTag(a1, a2, (size_t)this, 0, v9);
      v11 = 0;
      v76 = 0;
      goto LABEL_8;
    }
    v10 = 2;
  }
  v76 = v10;
  WTF::StringBuilder::append();
  v11 = 1;
LABEL_8:
  v15.n128_f64[0] = WebCore::StyledMarkupAccumulator::appendCustomAttributes(a1, (WTF::StringImpl *)a2, (uint64_t)this, 0);
  if ((*((_WORD *)this + 14) & 0x10) != 0)
  {
    v16 = 1;
    if (*(_BYTE *)(a1 + 176) || (a4 & 1) != 0)
      goto LABEL_155;
  }
  v17 = *(_QWORD *)(a1 + 184);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 32) == *((_QWORD *)this + 4))
    {
      v17 = *(_QWORD *)(a1 + 192);
      if (v17)
        LODWORD(v17) = *(_QWORD *)(v17 + 8) != 0;
    }
    else
    {
      LODWORD(v17) = 0;
    }
  }
  v16 = 0;
  v18 = 0;
  if ((v11 | v17) == 1)
  {
LABEL_155:
    if (*(_BYTE *)(a1 + 207))
    {
      v19 = 1;
    }
    else if (*(_BYTE *)(a1 + 204)
           && (v20 = *(WTF::StringImpl **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v13, v14, v15)) != 0)
    {
      *(_DWORD *)v20 += 2;
      v19 = (WTF::StringImpl::startsWith() & 1) != 0 || WTF::StringImpl::find() != -1 || WTF::StringImpl::find() != -1;
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    else
    {
      v19 = 0;
    }
    v18 = !v19;
  }
  v74 = v16;
  v75 = a4;
  v21 = *((_QWORD *)this + 13);
  if (v21)
  {
    if ((*(_BYTE *)(v21 + 4) & 8) != 0)
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)v12, v15, v13, v14);
    if ((*((_WORD *)this + 14) & 0x20) != 0)
      WebCore::SVGElement::synchronizeAllAttributes(this);
    v22 = *((_QWORD *)this + 13);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 + 4);
      if ((v23 & 1) != 0)
      {
        v25 = *(_DWORD *)(v22 + 52);
        if (!v25)
          goto LABEL_94;
        v24 = *(_QWORD *)(v22 + 40);
      }
      else
      {
        if (v23 < 0x20)
          goto LABEL_94;
        v24 = v22 + 32;
        v25 = v23 >> 5;
        if (!(v23 >> 5))
          goto LABEL_94;
      }
      if (v76 == 2)
      {
        if ((v18 & 1) != 0)
        {
          v26 = 0;
          do
          {
            v27 = (uint64_t *)(v24 + 16 * v26);
            v28 = *v27;
            if (*v27 != WebCore::HTMLNames::styleAttr
              && (*(_QWORD *)(v28 + 32) || !*(_QWORD *)(v28 + 24) || (WTF::StringImpl::startsWith() & 1) == 0)
              && ((*(uint64_t (**)(WebCore::DataDetection *, uint64_t, __n128))(*(_QWORD *)this + 472))(this, v24 + 16 * v26, v15) & 1) == 0)
            {
              v29 = *v27;
              v30 = *v27 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                 || v29 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr;
              v31 = v30 || v29 == WebCore::HTMLNames::x_apple_data_detectors_typeAttr;
              if (!v31 && v29 != WebCore::HTMLNames::hrefAttr)
                WebCore::MarkupAccumulator::appendAttribute(a1, a2, (uint64_t)this, (WTF::StringImpl **)(v24 + 16 * v26), 0);
            }
            v33 = v26 + 1;
            v26 = (v26 + 1);
          }
          while (v25 != v33);
        }
        else
        {
          v38 = 0;
          do
          {
            v39 = (uint64_t *)(v24 + 16 * v38);
            if ((*(_QWORD *)(*v39 + 32) || !*(_QWORD *)(*v39 + 24) || (WTF::StringImpl::startsWith() & 1) == 0)
              && ((*(uint64_t (**)(WebCore::DataDetection *, uint64_t, __n128))(*(_QWORD *)this + 472))(this, v24 + 16 * v38, v15) & 1) == 0)
            {
              v40 = *v39;
              v41 = *v39 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                 || v40 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr;
              v42 = v41 || v40 == WebCore::HTMLNames::x_apple_data_detectors_typeAttr;
              if (!v42 && v40 != WebCore::HTMLNames::hrefAttr)
                WebCore::MarkupAccumulator::appendAttribute(a1, a2, (uint64_t)this, (WTF::StringImpl **)(v24 + 16 * v38), 0);
            }
            v44 = v38 + 1;
            v38 = (v38 + 1);
          }
          while (v25 != v44);
        }
      }
      else
      {
        v34 = 0;
        if ((v18 & 1) != 0)
        {
          do
          {
            v35 = (uint64_t *)(v24 + 16 * v34);
            v36 = *v35;
            if (*v35 != WebCore::HTMLNames::styleAttr
              && (*(_QWORD *)(v36 + 32) || !*(_QWORD *)(v36 + 24) || (WTF::StringImpl::startsWith() & 1) == 0)
              && ((*(uint64_t (**)(WebCore::DataDetection *, uint64_t, __n128))(*(_QWORD *)this + 472))(this, v24 + 16 * v34, v15) & 1) == 0)
            {
              WebCore::MarkupAccumulator::appendAttribute(a1, a2, (uint64_t)this, (WTF::StringImpl **)(v24 + 16 * v34), 0);
            }
            v37 = v34 + 1;
            v34 = (v34 + 1);
          }
          while (v25 != v37);
        }
        else
        {
          do
          {
            v45 = v24 + 16 * v34;
            if ((*(_QWORD *)(*(_QWORD *)v45 + 32)
               || !*(_QWORD *)(*(_QWORD *)v45 + 24)
               || (WTF::StringImpl::startsWith() & 1) == 0)
              && ((*(uint64_t (**)(WebCore::DataDetection *, uint64_t, __n128))(*(_QWORD *)this + 472))(this, v24 + 16 * v34, v15) & 1) == 0)
            {
              WebCore::MarkupAccumulator::appendAttribute(a1, a2, (uint64_t)this, (WTF::StringImpl **)(v24 + 16 * v34), 0);
            }
            v46 = v34 + 1;
            v34 = (v34 + 1);
          }
          while (v25 != v46);
        }
      }
    }
  }
LABEL_94:
  if (!v18)
    return WebCore::MarkupAccumulator::appendCloseTag(a1, (WTF::StringBuilder *)a2, this);
  v47 = *(_QWORD *)(a1 + 184);
  if (v47
    && *(_QWORD *)(v47 + 32) == *((_QWORD *)this + 4)
    && (v69 = *(WebCore::EditingStyle **)(a1 + 192)) != 0
    && *((_QWORD *)v69 + 1))
  {
    WebCore::EditingStyle::copy(v69, (uint64_t *)&v77);
    v50 = (uint64_t)v77;
    WebCore::EditingStyle::removePropertiesInElementDefaultStyle(v77, this);
    WebCore::EditingStyle::removeStyleConflictingWithStyleOfNode(v50, this);
  }
  else
  {
    v50 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = 0;
    *(_BYTE *)(v50 + 16) &= 0xE0u;
    v51.n128_u32[0] = WebCore::EditingStyle::NoFontDelta;
    *(_DWORD *)(v50 + 20) = WebCore::EditingStyle::NoFontDelta;
  }
  if (v76 == 1)
    WebCore::EditingStyle::addDisplayContents((WebCore::EditingStyle *)v50);
  if ((*((_WORD *)this + 14) & 0x70) != 0)
  {
    v52 = *((_DWORD *)this + 6) + 2;
    *((_DWORD *)this + 6) = v52;
    v53 = *((_QWORD *)this + 13);
    if (v53)
    {
      v48 = *(void **)(v53 + 8);
      if (v48)
      {
        WebCore::EditingStyle::mergeStyle((WebCore::MutableStyleProperties *)v50, (uint64_t)v48, 0);
        v52 = *((_DWORD *)this + 6);
      }
    }
    v54 = v52 - 2;
    if (v54)
    {
      *((_DWORD *)this + 6) = v54;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, v48);
    }
  }
  if (v76 == 2)
  {
    v55 = *(_QWORD *)(v50 + 8);
    if (v55)
      WebCore::MutableStyleProperties::removeProperty(v55, (WTF::StringImpl *)0xFE, 0, v49, v51);
  }
  if (!v74)
  {
LABEL_120:
    v57 = *(_QWORD *)(v50 + 8);
    if (v57 && *(_DWORD *)(v57 + 28)
      || *(float *)(v50 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
      || (*(_BYTE *)(v50 + 16) & 0x1E) != 0)
    {
      WTF::StringBuilder::append();
      WebCore::StyleProperties::asText(*(WebCore::StyleProperties **)(v50 + 8), v58, v59, &v77, v60);
      if (v77)
        v61 = *((_DWORD *)v77 + 1);
      else
        v61 = 0;
      if ((v73 & 1) != 0)
        v62 = 25;
      else
        v62 = -17;
      WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)a2, (uint64_t *)&v77, 0, v61, v62);
      v63 = v77;
      v77 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v48);
        else
          *(_DWORD *)v63 -= 2;
      }
      LOBYTE(v77) = 34;
      v64 = *(_QWORD *)(a2 + 8);
      if (!v64 || (v65 = *(unsigned int *)(a2 + 16), v65 >= *(_DWORD *)(v64 + 4)) || *(_QWORD *)a2)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v66 = *(_DWORD *)(v64 + 16);
        v67 = *(_QWORD *)(v64 + 8);
        *(_DWORD *)(a2 + 16) = v65 + 1;
        if ((v66 & 4) != 0)
          *(_BYTE *)(v67 + v65) = 34;
        else
          *(_WORD *)(v67 + 2 * v65) = 34;
      }
    }
    if (*(_DWORD *)v50 == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v50, (WTF::StringImpl *)v48);
      WTF::fastFree(v70, v71);
    }
    else
    {
      --*(_DWORD *)v50;
    }
    return WebCore::MarkupAccumulator::appendCloseTag(a1, (WTF::StringBuilder *)a2, this);
  }
  if (!*(_BYTE *)(a1 + 176))
  {
LABEL_113:
    if (v75)
      WebCore::EditingStyle::forceInline((WebCore::EditingStyle *)v50);
    if (*(_BYTE *)(a1 + 202))
    {
      *(_BYTE *)(a1 + 205) |= WebCore::EditingStyle::convertPositionStyle((WebCore::EditingStyle *)v50);
      *(_BYTE *)(a1 + 206) |= WebCore::EditingStyle::isFloating((WebCore::EditingStyle *)v50);
    }
    if (a5 == 1)
    {
      v56 = *(_QWORD *)(v50 + 8);
      if (v56)
        WebCore::MutableStyleProperties::removeProperty(v56, (WTF::StringImpl *)0x7B, 0, v49, v51);
    }
    goto LABEL_120;
  }
  if ((*((_WORD *)this + 14) & 0x10) != 0)
  {
    WebCore::EditingStyle::mergeStyleFromRulesForSerialization((WebCore::EditingStyle *)v50, this, *(unsigned __int8 *)(a1 + 203));
    goto LABEL_113;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::StyledMarkupAccumulator::wrapWithStyleNode(WebCore::StyledMarkupAccumulator *this, WebCore::StyleProperties *a2, WebCore::Document *a3)
{
  unsigned __int8 *v6;
  WTF::String *v7;
  __n128 v8;
  unsigned int v9;
  unsigned __int8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;
  WTF::StringImpl *v28;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  WTF::StringBuilder::append();
  WebCore::StyleProperties::asText(a2, v6, v7, &v28, v8);
  if (v28)
    v9 = *((_DWORD *)v28 + 1);
  else
    v9 = 0;
  if ((*((_WORD *)a3 + 1679) & 1) != 0)
    v10 = 25;
  else
    v10 = -17;
  WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)&v24, (uint64_t *)&v28, 0, v9, v10);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringBuilder::append();
  v13 = v24;
  if (v24
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24),
        (v13 = v24) != 0))
  {
    *(_DWORD *)v13 += 2;
  }
  v28 = v13;
  v14 = *((unsigned int *)this + 43);
  if ((_DWORD)v14 == *((_DWORD *)this + 42))
  {
    v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 160, v14 + 1, (unint64_t)&v28);
    v20 = *((unsigned int *)this + 43);
    v21 = *((_QWORD *)this + 20);
    v22 = *v18;
    *v18 = 0;
    *(_QWORD *)(v21 + 8 * v20) = v22;
    v23 = v28;
    *((_DWORD *)this + 43) = v20 + 1;
    v28 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v14) = v13;
    *((_DWORD *)this + 43) = v14 + 1;
  }
  if ((_MergedGlobals_436 & 1) == 0)
  {
    _MergedGlobals_38 += 2;
    qword_1EE337BC8 = (uint64_t)&_MergedGlobals_38;
    _MergedGlobals_436 = 1;
  }
  if ((byte_1EE337BC1 & 1) == 0)
  {
    dword_1ECE7B870 += 2;
    qword_1EE337BD0 = (uint64_t)&dword_1ECE7B870;
    byte_1EE337BC1 = 1;
  }
  WebCore::MarkupAccumulator::append<WTF::String const&>((uint64_t)this, (WTF::StringImpl *)&qword_1EE337BC8);
  v16 = v25;
  v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::MarkupAccumulator::append<WTF::String const&>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl **)(a1 + 16);
  if (*(_DWORD *)(a1 + 32) || *(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      return (WTF::StringImpl **)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl **)WTF::StringBuilder::append();
  }
  else
  {
    v5 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    v6 = *result;
    *result = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        result = (WTF::StringImpl **)WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      LODWORD(v7) = *((_DWORD *)v7 + 1);
    *(_DWORD *)(a1 + 32) = (_DWORD)v7;
  }
  return result;
}

WTF::StringImpl *WebCore::StyledMarkupAccumulator::appendText(WebCore::StyledMarkupAccumulator *this, WTF::StringBuilder *a2, const WebCore::Text *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  const WebCore::Text *v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  char v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WebCore::Text *v19;
  unsigned int v20;
  int v21;
  WebCore::EditingStyle *v22;
  char v23;
  WebCore::MutableStyleProperties **v24;
  WebCore::StyleProperties *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  WTF::String *v28;
  __n128 v29;
  unsigned int v30;
  unsigned __int8 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  void *v34;
  const WebCore::Text *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  const WebCore::Text *v41;
  char v42;
  char v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned __int8 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *result;
  const WebCore::Text *v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  const WebCore::Text *v56;
  __int16 v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  int v61;
  void *v62;
  __int16 v63;
  WebCore::Node *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unsigned int v69;
  const WebCore::Text *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int *v78;
  WTF *v79;
  void *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WebCore::Node *v84;
  char v85;
  WTF::StringImpl *v86;
  int v87;
  char v88;
  WTF::StringImpl *v89;
  int v90;
  char v91;

  v6 = *((_QWORD *)a3 + 4);
  v7 = v6
    && (~*(unsigned __int16 *)(v6 + 28) & 0x18) == 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24);
  v8 = *((_QWORD *)this + 23);
  if (v8
    && *(_QWORD *)(v8 + 32) == v6
    && (v22 = (WebCore::EditingStyle *)*((_QWORD *)this + 24)) != 0
    && (!*((_QWORD *)v22 + 1) ? (v23 = 1) : (v23 = v7), (v23 & 1) == 0))
  {
    WebCore::EditingStyle::copy(v22, (uint64_t *)&v89);
    v24 = (WebCore::MutableStyleProperties **)v89;
    WebCore::EditingStyle::forceInline(v89);
    WebCore::MutableStyleProperties::setProperty(v24[1], 123, 6u, 0);
    v25 = v24[1];
    v26 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 8);
    *(_DWORD *)(v26 + 24) += 2;
    WTF::StringBuilder::append();
    WebCore::StyleProperties::asText(v25, v27, v28, &v82, v29);
    if (v82)
      v30 = *((_DWORD *)v82 + 1);
    else
      v30 = 0;
    if ((*(_WORD *)(v26 + 3358) & 1) != 0)
      v31 = 25;
    else
      v31 = -17;
    WebCore::MarkupAccumulator::appendCharactersReplacingEntities(a2, (uint64_t *)&v82, 0, v30, v31);
    v33 = v82;
    v82 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    WTF::StringBuilder::append();
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v34);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v24, (WTF::StringImpl *)v34);
      WTF::fastFree(v79, v80);
    }
    else
    {
      --*(_DWORD *)v24;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  if (*((_BYTE *)this + 176))
    v10 = v7;
  else
    v10 = 1;
  if (v10 != 1)
  {
    v14 = *((_WORD *)a3 + 14);
    *((_DWORD *)a3 + 6) += 2;
    v82 = a3;
    LODWORD(v83) = 0;
    if ((v14 & 1) != 0)
      v15 = BYTE4(v83) & 0xF0;
    else
      v15 = BYTE4(v83) & 0xF0 | 3;
    BYTE4(v83) = v15;
    v17 = WebCore::enclosingElementWithTag((WebCore *)&v82, (const WebCore::Position *)&WebCore::HTMLNames::selectTag, a3);
    v18 = v82;
    v82 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v16);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    if (!v17)
    {
      v38 = *((_QWORD *)this + 16);
      if (!v38)
        goto LABEL_62;
      v39 = *((_BYTE *)this + 140) & 7;
      if (v39 > 4)
        goto LABEL_62;
      v40 = 1 << v39;
      v41 = (const WebCore::Text *)*((_QWORD *)this + 16);
      if ((v40 & 0x19) == 0)
        v41 = *(const WebCore::Text **)(v38 + 32);
      if (v41 == a3)
      {
        *(_DWORD *)(v38 + 24) += 2;
        v89 = (WTF::StringImpl *)v38;
        v90 = *((_DWORD *)this + 34);
        v43 = *((_BYTE *)this + 140);
      }
      else
      {
LABEL_62:
        v42 = *((_WORD *)a3 + 14);
        *((_DWORD *)a3 + 6) += 2;
        v89 = a3;
        v90 = 0;
        if ((v42 & 1) != 0)
          v43 = 0;
        else
          v43 = 3;
      }
      v91 = v43;
      v53 = *((_QWORD *)this + 18);
      if (!v53)
        goto LABEL_96;
      v54 = *((_BYTE *)this + 156) & 7;
      if (v54 > 4)
        goto LABEL_96;
      v55 = 1 << v54;
      v56 = (const WebCore::Text *)*((_QWORD *)this + 18);
      if ((v55 & 0x19) == 0)
        v56 = *(const WebCore::Text **)(v53 + 32);
      if (v56 == a3)
      {
        v60 = 0;
        *(_DWORD *)(v53 + 24) += 2;
        v86 = (WTF::StringImpl *)v53;
        v87 = *((_DWORD *)this + 38);
        v88 = *((_BYTE *)this + 156);
      }
      else
      {
LABEL_96:
        v57 = *((_WORD *)a3 + 14);
        *((_DWORD *)a3 + 6) += 2;
        if ((v57 & 1) != 0)
        {
          v58 = *((_QWORD *)a3 + 10);
          v59 = 0;
          if (v58)
            LODWORD(v58) = *(_DWORD *)(v58 + 4);
        }
        else
        {
          LODWORD(v58) = 0;
          v59 = 4;
        }
        v86 = a3;
        v87 = v58;
        v88 = v59;
        v60 = (v53 != 0) << 7;
      }
      v61 = *((unsigned __int8 *)this + 201);
      WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)&v89, (uint64_t *)&v86, (uint64_t)&v82);
      if (v85)
      {
        if (v61)
          v63 = v60 | 0x800;
        else
          v63 = v60;
        WebCore::plainText(&v82, v63, 0, (const WTF::String *)&v81);
        if (v85)
        {
          v64 = v84;
          v84 = 0;
          if (v64)
          {
            if (*((_DWORD *)v64 + 6) == 2)
            {
              if ((*((_WORD *)v64 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v64, v62);
            }
            else
            {
              *((_DWORD *)v64 + 6) -= 2;
            }
          }
          v65 = v82;
          v82 = 0;
          if (v65)
          {
            if (*((_DWORD *)v65 + 6) == 2)
            {
              if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v65, v62);
            }
            else
            {
              *((_DWORD *)v65 + 6) -= 2;
            }
          }
        }
      }
      else
      {
        v66 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v66 += 2;
        v81 = v66;
      }
      v67 = v86;
      v86 = 0;
      if (v67)
      {
        if (*((_DWORD *)v67 + 6) == 2)
        {
          if ((*((_WORD *)v67 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v67, v62);
        }
        else
        {
          *((_DWORD *)v67 + 6) -= 2;
        }
      }
      v68 = v89;
      v89 = 0;
      if (v68)
      {
        if (*((_DWORD *)v68 + 6) == 2)
        {
          if ((*((_WORD *)v68 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v68, v62);
        }
        else
        {
          *((_DWORD *)v68 + 6) -= 2;
        }
      }
LABEL_122:
      v52 = v81;
      goto LABEL_123;
    }
    v19 = (const WebCore::Text *)*((_QWORD *)this + 16);
    if (v19)
    {
      v20 = *((_BYTE *)this + 140) & 7;
      if (v20 <= 4)
      {
        if (((1 << v20) & 0x19) == 0)
          v19 = (const WebCore::Text *)*((_QWORD *)v19 + 4);
        if (v19 == a3)
        {
          v21 = *((_DWORD *)this + 34);
LABEL_75:
          v49 = (const WebCore::Text *)*((_QWORD *)this + 18);
          if (!v49)
            goto LABEL_80;
          v50 = *((_BYTE *)this + 156) & 7;
          if (v50 > 4)
            goto LABEL_80;
          if (((1 << v50) & 0x19) == 0)
            v49 = (const WebCore::Text *)*((_QWORD *)v49 + 4);
          if (v49 == a3)
            v51 = *((_DWORD *)this + 38);
          else
LABEL_80:
            v51 = -1;
          v52 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
          if (!v52)
          {
            v69 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            LODWORD(v84) = 0;
            BYTE4(v84) = 1;
            goto LABEL_125;
          }
          if (!v21 && *((_DWORD *)v52 + 1) <= v51)
          {
            *(_DWORD *)v52 += 2;
            v81 = v52;
            v82 = 0;
            v83 = 0;
            LODWORD(v84) = 0;
            BYTE4(v84) = 1;
            goto LABEL_124;
          }
          WTF::StringImpl::substring(v52);
          goto LABEL_122;
        }
      }
    }
    else if (!*((_QWORD *)this + 18))
    {
      v52 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
      if (v52)
        *(_DWORD *)v52 += 2;
      v81 = v52;
LABEL_123:
      v82 = 0;
      v83 = 0;
      LODWORD(v84) = 0;
      BYTE4(v84) = 1;
      if (!v52)
      {
        v69 = 0;
        goto LABEL_125;
      }
LABEL_124:
      v69 = *((_DWORD *)v52 + 1);
LABEL_125:
      WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)&v82, (uint64_t *)&v81, 0, v69, 7u);
      v71 = v82;
      if (v82
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v82),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v82),
            (v71 = v82) != 0))
      {
        *(_DWORD *)v71 += 2;
      }
      v86 = v71;
      WebCore::convertHTMLTextToInterchangeFormat((WTF::StringImpl *)&v86, a3, v70, &v89);
      v72 = v89;
      if (*((_DWORD *)a2 + 4) || *((_QWORD *)a2 + 1))
      {
        if (v89 && (*((_BYTE *)v89 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
LABEL_138:
        v74 = v89;
        v89 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v47);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = v86;
        v86 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v47);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = v83;
        v83 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v47);
          else
            *(_DWORD *)v76 -= 2;
        }
        v77 = v82;
        v82 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v47);
          else
            *(_DWORD *)v77 -= 2;
        }
        result = v81;
        v81 = 0;
        if (!result)
          goto LABEL_153;
        goto LABEL_151;
      }
      if (v89)
        *(_DWORD *)v89 += 2;
      v73 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v72;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::destroy(v73, v47);
          v72 = v89;
          if (!v89)
            goto LABEL_137;
          goto LABEL_136;
        }
        *(_DWORD *)v73 -= 2;
      }
      if (!v72)
      {
LABEL_137:
        *((_DWORD *)a2 + 4) = (_DWORD)v72;
        goto LABEL_138;
      }
LABEL_136:
      LODWORD(v72) = *((_DWORD *)v72 + 1);
      goto LABEL_137;
    }
    v21 = 0;
    goto LABEL_75;
  }
  v11 = (const WebCore::Text *)*((_QWORD *)this + 16);
  if (v11)
  {
    v12 = *((_BYTE *)this + 140) & 7;
    if (v12 <= 4)
    {
      if (((1 << v12) & 0x19) == 0)
        v11 = (const WebCore::Text *)*((_QWORD *)v11 + 4);
      if (v11 == a3)
      {
        v13 = *((_DWORD *)this + 34);
        goto LABEL_51;
      }
    }
  }
  else if (!*((_QWORD *)this + 18))
  {
    v44 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
    if (v44)
      *(_DWORD *)v44 += 2;
    v82 = v44;
    if (v44)
      goto LABEL_70;
LABEL_189:
    v45 = 0;
    goto LABEL_71;
  }
  v13 = 0;
LABEL_51:
  v35 = (const WebCore::Text *)*((_QWORD *)this + 18);
  if (!v35)
    goto LABEL_56;
  v36 = *((_BYTE *)this + 156) & 7;
  if (v36 > 4)
    goto LABEL_56;
  if (((1 << v36) & 0x19) == 0)
    v35 = (const WebCore::Text *)*((_QWORD *)v35 + 4);
  if (v35 == a3)
    v37 = *((_DWORD *)this + 38);
  else
LABEL_56:
    v37 = -1;
  v44 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
  if (v44)
  {
    if (!v13 && *((_DWORD *)v44 + 1) <= v37)
    {
      *(_DWORD *)v44 += 2;
      v82 = v44;
LABEL_70:
      v45 = *((_DWORD *)v44 + 1);
      goto LABEL_71;
    }
    WTF::StringImpl::substring(v44);
    v44 = v82;
    if (v82)
      goto LABEL_70;
    goto LABEL_189;
  }
  v45 = 0;
  v82 = 0;
LABEL_71:
  v46 = WebCore::MarkupAccumulator::entityMaskForText(this, a3);
  WebCore::MarkupAccumulator::appendCharactersReplacingEntities(a2, (uint64_t *)&v82, 0, v45, v46);
  result = v82;
  v82 = 0;
  if (!result)
    goto LABEL_153;
LABEL_151:
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
    if (!v9)
      return result;
    goto LABEL_154;
  }
  *(_DWORD *)result -= 2;
LABEL_153:
  if (!v9)
    return result;
LABEL_154:
  if ((_MergedGlobals_436[0] & 1) == 0)
  {
    _MergedGlobals_38 += 2;
    qword_1EE337BC8 = (uint64_t)&_MergedGlobals_38;
    _MergedGlobals_436[0] = 1;
  }
  if (byte_1EE337BC1 == 1)
  {
    v78 = (int *)qword_1EE337BD0;
  }
  else
  {
    v78 = &dword_1ECE7B870;
    dword_1ECE7B870 += 2;
    qword_1EE337BD0 = (uint64_t)&dword_1ECE7B870;
    byte_1EE337BC1 = 1;
  }
  if (!*((_DWORD *)a2 + 4) && !*((_QWORD *)a2 + 1))
  {
    if (v78)
      dword_1ECE7B870 += 2;
    result = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v78;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
        v78 = (int *)qword_1EE337BD0;
        if (!qword_1EE337BD0)
          goto LABEL_167;
        goto LABEL_166;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v78)
    {
LABEL_167:
      *((_DWORD *)a2 + 4) = (_DWORD)v78;
      return result;
    }
LABEL_166:
    LODWORD(v78) = v78[1];
    goto LABEL_167;
  }
  if (v78 && (byte_1ECE7B880 & 4) == 0)
    return (WTF::StringImpl *)WTF::StringBuilder::append();
  else
    return (WTF::StringImpl *)WTF::StringBuilder::append();
}

double WebCore::StyledMarkupAccumulator::appendCustomAttributes(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  __int16 v8;
  uint64_t v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WTF::StringImpl *v12;
  double result;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;
  int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t i;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  WebCore::QualifiedName::QualifiedNameImpl *v43;
  WebCore::QualifiedName::QualifiedNameImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl **v46;
  WTF *v47;
  void *v48;
  WebCore::QualifiedName::QualifiedNameImpl *v49;
  WTF::StringImpl *v50;

  {
    result = 0.0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    return result;
  }
  if (byte_1ECE90A59)
  {
    v8 = *(_WORD *)(a3 + 28);
    if ((v8 & 0x10) == 0 || (v8 & 0x110) == 0x110)
    {
      if ((v8 & 0x10) == 0)
        return result;
      v9 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
    }
    else
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
      if (v9 == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        *(_DWORD *)(a3 + 24) += 2;
        v10 = *(WebCore::QualifiedName::QualifiedNameImpl **)(a3 + 128);
        if (v10)
        {
          if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v10 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(a3 + 128), a2);
            v10 = v49;
          }
        }
        v11 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::webkitattachmentidAttr;
        if (WebCore::HTMLNames::webkitattachmentidAttr)
          ++*(_DWORD *)WebCore::HTMLNames::webkitattachmentidAttr;
        v49 = v11;
        if (v10)
          *(_DWORD *)v10 += 2;
        v50 = v10;
        WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v49, a4);
        v14 = v50;
        v50 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = (WTF::StringImpl **)v49;
        v49 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v15);
            WTF::fastFree(v28, v29);
            if (!v10)
              goto LABEL_22;
            goto LABEL_20;
          }
          --*(_DWORD *)v15;
        }
        if (!v10)
          goto LABEL_22;
LABEL_20:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v12);
        else
          *(_DWORD *)v10 -= 2;
LABEL_22:
        v16 = *(_QWORD *)(a3 + 120);
        if (v16)
        {
          ++*(_DWORD *)(v16 + 16);
          v17 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v16 + 128);
          if (v17)
          {
            if ((*((_BYTE *)v17 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v17 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(v16 + 128), v12);
              v17 = v49;
            }
          }
          v18 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::webkitattachmentpathAttr;
          if (WebCore::HTMLNames::webkitattachmentpathAttr)
            ++*(_DWORD *)WebCore::HTMLNames::webkitattachmentpathAttr;
          v49 = v18;
          if (v17)
            *(_DWORD *)v17 += 2;
          v50 = v17;
          WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v49, a4);
          v20 = v50;
          v50 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = (WTF::StringImpl **)v49;
          v49 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
              WTF::fastFree(v30, v31);
              if (v17)
              {
LABEL_37:
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v19);
                else
                  *(_DWORD *)v17 -= 2;
              }
LABEL_39:
              v22 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v16 + 80);
              if (v22)
              {
                v23 = *(_DWORD *)v22;
                *(_DWORD *)v22 += 2;
                if ((*((_BYTE *)v22 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v22 = v23 + 4;
                  v24 = v22;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(v22, v19);
                  v24 = v49;
                }
              }
              else
              {
                v24 = 0;
              }
              v25 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::webkitattachmentbloburlAttr;
              if (WebCore::HTMLNames::webkitattachmentbloburlAttr)
                ++*(_DWORD *)WebCore::HTMLNames::webkitattachmentbloburlAttr;
              v49 = v25;
              if (v24)
                *(_DWORD *)v24 += 2;
              v50 = v24;
              WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v49, a4);
              v26 = v50;
              v50 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v12);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = (WTF::StringImpl **)v49;
              v49 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v27);
                  WTF::fastFree(v32, v33);
                  if (v24)
                  {
LABEL_53:
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
LABEL_55:
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, v12);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                  if (*(_DWORD *)(v16 + 16) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
                  else
                    --*(_DWORD *)(v16 + 16);
                  goto LABEL_120;
                }
                --*(_DWORD *)v27;
              }
              if (v24)
                goto LABEL_53;
              goto LABEL_55;
            }
            --*(_DWORD *)v21;
          }
          if (v17)
            goto LABEL_37;
          goto LABEL_39;
        }
LABEL_120:
        if (*(_DWORD *)(a3 + 24) == 2)
        {
          if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a3, v12);
        }
        else
        {
          *(_DWORD *)(a3 + 24) -= 2;
        }
        return result;
      }
    }
    if (v9 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v34 = *(_QWORD *)(a3 + 112);
      *(_DWORD *)(a3 + 24) += 2;
      v35 = (*(uint64_t (**)(void))(v34 + 24))();
      if ((*(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_120;
      v36 = *(_QWORD *)((*(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (!v36)
        goto LABEL_120;
      v37 = *(_DWORD *)(v36 + 24);
      *(_DWORD *)(v36 + 24) = v37 + 2;
      i = *(_QWORD *)(v36 + 80);
      if (i)
      {
        while (1)
        {
          v39 = *(_WORD *)(i + 28);
          if ((v39 & 0x10) != 0
            && (v39 & 0x110) != 0x110
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
          {
            break;
          }
          i = *(_QWORD *)(i + 56);
          if (!i)
            goto LABEL_99;
        }
LABEL_98:
        *(_DWORD *)(i + 24) += 2;
        v37 = *(_DWORD *)(v36 + 24) - 2;
      }
    }
    else
    {
      if (v9 != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
        return result;
      v40 = *(_QWORD *)(a3 + 112);
      *(_DWORD *)(a3 + 24) += 2;
      v41 = (*(uint64_t (**)(void))(v40 + 24))();
      if ((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_120;
      v36 = *(_QWORD *)((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (!v36)
        goto LABEL_120;
      v37 = *(_DWORD *)(v36 + 24);
      *(_DWORD *)(v36 + 24) = v37 + 2;
      for (i = *(_QWORD *)(v36 + 80); i; i = *(_QWORD *)(i + 56))
      {
        v42 = *(_WORD *)(i + 28);
        if ((v42 & 0x10) != 0
          && (v42 & 0x110) != 0x110
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
        {
          goto LABEL_98;
        }
      }
    }
LABEL_99:
    if (v37)
    {
      *(_DWORD *)(v36 + 24) = v37;
    }
    else if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v36, v12);
    }
    if (!i)
      goto LABEL_120;
    v43 = *(WebCore::QualifiedName::QualifiedNameImpl **)(i + 128);
    if (v43)
    {
      if ((*((_BYTE *)v43 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v43 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(i + 128), v12);
        v43 = v49;
      }
    }
    v44 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::webkitattachmentidAttr;
    if (WebCore::HTMLNames::webkitattachmentidAttr)
      ++*(_DWORD *)WebCore::HTMLNames::webkitattachmentidAttr;
    v49 = v44;
    if (v43)
      *(_DWORD *)v43 += 2;
    v50 = v43;
    WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v49, a4);
    v45 = v50;
    v50 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v12);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = (WTF::StringImpl **)v49;
    v49 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v46);
        WTF::fastFree(v47, v48);
        if (!v43)
          goto LABEL_118;
        goto LABEL_116;
      }
      --*(_DWORD *)v46;
    }
    if (!v43)
      goto LABEL_118;
LABEL_116:
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v12);
    else
      *(_DWORD *)v43 -= 2;
LABEL_118:
    if (*(_DWORD *)(i + 24) == 2)
    {
      if ((*(_WORD *)(i + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)i, v12);
    }
    else
    {
      *(_DWORD *)(i + 24) -= 2;
    }
    goto LABEL_120;
  }
  return result;
}

uint64_t WebCore::StyledMarkupAccumulator::appendEndTag(WebCore::StyledMarkupAccumulator *this, WTF::StringBuilder *a2, const WebCore::Element *a3)
{
  if ((*((_WORD *)a3 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24)
    || WebCore::DataDetection::isDataDetectorElement(a3, a2))
  {
    return WTF::StringBuilder::append();
  }
  else
  {
    return WebCore::MarkupAccumulator::appendEndTag((uint64_t)this, a2, a3);
  }
}

unsigned int *WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WTF::StringBuilder **a1, WebCore::MarkupAccumulator *this, WTF::StringBuilder *a3, uint64_t a4, int a5, __n128 a6)
{
  WTF::StringBuilder *v7;
  WebCore::MarkupAccumulator *v8;
  char v9;
  int v10;
  WTF::StringBuilder *v11;
  unsigned int *v12;
  __int16 v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  WTF::StringBuilder *v17;
  __int16 v18;
  BOOL v19;
  __int16 v20;
  uint64_t v21;
  const WebCore::QualifiedName *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringBuilder *v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v38;
  __int16 v39;
  WTF::StringBuilder *v40;
  WTF::StringBuilder **v42;
  int *v43;
  BOOL *v44;
  WTF::StringBuilder **v45;
  WebCore::MarkupAccumulator *v46;
  uint64_t v47;
  BOOL v48;
  WTF::StringBuilder *v49;
  WTF::StringBuilder *v50;
  uint64_t v51;
  WTF::StringBuilder *v52;
  WTF::StringBuilder *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _OWORD *v82;
  _WORD *v83;
  _WORD *v84;
  char *v85;
  __int16 v86;
  char *v87;
  int8x16_t v88;
  int8x16_t v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  WTF::StringBuilder *v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *result;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringBuilder *v115;
  WebCore::Node *v116;
  _QWORD v117[4];
  WTF *v118;
  uint64_t v119;
  _BYTE v120[64];
  WTF::StringBuilder *v121;
  unsigned int *v122;
  int *v123;
  BOOL *v124;
  WebCore::MarkupAccumulator *v125;
  WTF::StringBuilder **v126;
  int v127;
  _QWORD *v128;
  char v129;
  BOOL v130;
  _QWORD v131[3];
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;

  v7 = a3;
  v8 = this;
  v130 = a5 == 0;
  v9 = *((_BYTE *)this + 200);
  v128 = 0;
  v129 = v9;
  *((_BYTE *)this + 207) = 0;
  v127 = 0;
  *a1 = 0;
  v123 = &v127;
  v124 = &v130;
  v125 = this;
  v126 = a1;
  v121 = a3;
  v122 = 0;
  v10 = *((_DWORD *)a3 + 6) + 2;
  *((_DWORD *)a3 + 6) = v10;
  if (a3 == (WTF::StringBuilder *)a4)
  {
    v11 = 0;
    v121 = 0;
    goto LABEL_289;
  }
  v11 = 0;
  v115 = (WebCore::MarkupAccumulator *)((char *)this + 16);
  a6 = (__n128)xmmword_1969F0E90;
  do
  {
    v116 = v11;
    v118 = (WTF *)v120;
    v119 = 8;
    v12 = v122;
    v122 = 0;
    if (v12)
    {
      if (v12[6] == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, this);
          v7 = v121;
        }
      }
      else
      {
        v12[6] -= 2;
      }
    }
    v117[0] = v8;
    v117[1] = &v121;
    v117[2] = &v122;
    v117[3] = &v118;
    v13 = *((_WORD *)v7 + 14);
    if (!*((_BYTE *)v8 + 200))
    {
      if ((v13 & 4) == 0)
        goto LABEL_22;
      goto LABEL_8;
    }
    if ((v13 & 8) != 0
      && (*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v55 = *(_QWORD *)((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0
      && *(_BYTE *)(v55 + 193))
    {
      v14 = (unsigned int **)(v55 + 80);
    }
    else
    {
      if ((v13 & 0x10) == 0)
        goto LABEL_21;
      if (*(_QWORD *)(*((_QWORD *)v7 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
        goto LABEL_21;
      v59 = **((_QWORD **)v7 + 5);
      if (!v59 || (*(_WORD *)(v59 + 28) & 0x80) == 0)
        goto LABEL_21;
      v60 = *(_DWORD *)(v59 + 24);
      *(_DWORD *)(v59 + 24) = v60 + 2;
      v61 = *(_QWORD *)(v59 + 224);
      if (v61)
      {
        v62 = (*(uint64_t (**)(uint64_t, WTF::StringBuilder *, uint64_t))(*(_QWORD *)v61 + 24))(v61, v7, v59);
        v60 = *(_DWORD *)(v59 + 24) - 2;
      }
      else
      {
        v62 = 0;
      }
      if (v60)
      {
        *(_DWORD *)(v59 + 24) = v60;
      }
      else if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v59, this);
      }
      if (!v62)
      {
        v13 = *((_WORD *)v7 + 14);
LABEL_21:
        if ((v13 & 4) == 0)
          goto LABEL_22;
LABEL_8:
        v14 = (unsigned int **)((char *)v7 + 80);
        goto LABEL_9;
      }
      if (!*(_DWORD *)(v62 + 12))
      {
        __break(0xC471u);
        goto LABEL_367;
      }
      v75 = **(_QWORD **)v62;
      if (!v75)
      {
LABEL_22:
        WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_2::operator()((unsigned int *)v117, (unsigned int *)this);
        goto LABEL_23;
      }
      v14 = (unsigned int **)(v75 + 8);
    }
LABEL_9:
    v15 = *v14;
    if (!v15)
      goto LABEL_22;
    v15[6] += 2;
    v16 = v122;
    v122 = v15;
    if (v16)
    {
      if (v16[6] == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, this);
      }
      else
      {
        v16[6] -= 2;
      }
    }
LABEL_23:
    v17 = v121;
    if ((*((_QWORD *)v121 + 8) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*((_QWORD *)v121 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
    {
      v18 = *((_WORD *)v121 + 14);
      if ((v18 & 2) == 0
        && ((v18 & 0x10) == 0
         || *(_QWORD *)(*((_QWORD *)v121 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)))
      {
        if ((*(unsigned int (**)(WTF::StringBuilder *))(*(_QWORD *)v121 + 208))(v121))
          v19 = v122 == (unsigned int *)a4;
        else
          v19 = 0;
        if (v19)
          goto LABEL_141;
        v17 = v121;
      }
    }
    if (!*((_BYTE *)v8 + 204) || !v130)
      goto LABEL_34;
    v28 = *((_WORD *)v17 + 14);
    if ((v28 & 0xF000) != 0x8000)
    {
      if ((v28 & 0x10) == 0)
        goto LABEL_34;
      if ((v28 & 4) == 0)
        goto LABEL_34;
      if (*(_QWORD *)(*((_QWORD *)v17 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
        goto LABEL_34;
      v58 = *((_QWORD *)v17 + 10);
      if (!v58 || (*(_WORD *)(v58 + 28) & 2) == 0)
        goto LABEL_34;
      *(_DWORD *)(v58 + 24) += 2;
      if (*(_QWORD *)(v58 + 80))
      {
        v63 = WTF::StringImpl::find();
        if (*(_QWORD *)(v58 + 80))
        {
          v64 = WTF::StringImpl::find();
          if (*(_QWORD *)(v58 + 80))
          {
            v65 = WTF::StringImpl::reverseFind();
            v57 = 0;
            if (v64 == -1 || v65 == -1)
              goto LABEL_200;
            if (v63 >= v64 || v63 == -1)
              v67 = v64;
            else
              v67 = v63;
            if (*(_QWORD *)(v58 + 80))
            {
              v68 = WTF::StringImpl::find();
              v57 = 0;
              if (v68 != -1 && v68 > v67)
              {
                v69 = *(_QWORD *)(v58 + 80);
                if (v69)
                {
                  v70 = *(const char **)(v69 + 8);
                  v71 = *(unsigned int *)(v69 + 4) | ((unint64_t)((*(_DWORD *)(v69 + 16) >> 2) & 1) << 32);
                }
                else
                {
                  v70 = 0;
                  v71 = 0x100000000;
                }
                if (v71 <= v67)
                {
                  LODWORD(v73) = 0;
                  v77 = 0x100000000;
                  v70 = "";
                  goto LABEL_257;
                }
                v72 = v68 - v67 + 3;
                if ((int)v71 - (int)v67 <= v72)
                {
                  if (!(_DWORD)v67)
                  {
                    v73 = v71;
LABEL_256:
                    v77 = v73;
LABEL_257:
                    v78 = *((_QWORD *)v8 + 3);
                    if (v78 || (v78 = *(_QWORD *)v115) != 0)
                    {
                      if ((v77 & 0x100000000) != 0 && (*(_DWORD *)(v78 + 16) & 4) != 0)
                      {
LABEL_261:
                        v79 = MEMORY[0x19AEA4824](v115);
                        if (v79)
                        {
                          qmemcpy((void *)v79, "<head><style class=\"WebKit-mso-list-quirks-style\">\n<!--\n", 56);
                          v80 = (char *)(v79 + 56);
                          if ((_DWORD)v73)
                          {
                            if ((_DWORD)v73 == 1)
                              *v80 = *v70;
                            else
                              memcpy((void *)(v79 + 56), v70, v77);
                          }
                          a6 = *(__n128 *)"\n-->\n</style></head>";
                          v81 = &v80[v77];
                          *(_OWORD *)v81 = *(_OWORD *)"\n-->\n</style></head>";
                          *((_DWORD *)v81 + 4) = 1046765925;
                        }
LABEL_276:
                        v57 = 1;
                        goto LABEL_200;
                      }
                    }
                    else if ((v77 & 0x100000000) != 0)
                    {
                      goto LABEL_261;
                    }
                    v82 = (_OWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v115);
                    if (v82)
                    {
                      *v82 = xmmword_1969F0E10;
                      v82[1] = xmmword_1969F0E20;
                      v82[2] = xmmword_1969F0E30;
                      v82[3] = xmmword_1969F0E40;
                      v82[4] = xmmword_1969F0E50;
                      v82[5] = xmmword_1969F0E60;
                      v83 = v82 + 7;
                      v82[6] = xmmword_1969F0E70;
                      if ((v77 & 0x100000000) != 0)
                      {
                        if (v73 >= 0x40)
                        {
                          v85 = (char *)&v83[v77 & 0xFFFFFFC0];
                          v87 = (char *)(v82 + 7);
                          do
                          {
                            v132.val[0] = *(int8x16_t *)v70;
                            v88 = *((int8x16_t *)v70 + 1);
                            v133.val[0] = (int8x16_t)*((_OWORD *)v70 + 2);
                            v89 = *((int8x16_t *)v70 + 3);
                            v70 += 64;
                            v135.val[1] = 0u;
                            v135.val[0] = v89;
                            v133.val[1] = 0u;
                            v134.val[0] = v88;
                            v132.val[1] = 0u;
                            v90 = v87;
                            vst2q_s8(v90, v132);
                            v90 += 32;
                            v134.val[1] = 0u;
                            vst2q_s8(v90, v134);
                            v91 = v87 + 64;
                            vst2q_s8(v91, v133);
                            v92 = v87 + 96;
                            vst2q_s8(v92, v135);
                            v87 += 128;
                          }
                          while (v87 != v85);
                        }
                        else
                        {
                          v85 = (char *)(v82 + 7);
                        }
                        while (v85 != (char *)&v83[v77])
                        {
                          v86 = *(unsigned __int8 *)v70++;
                          *(_WORD *)v85 = v86;
                          v85 += 2;
                        }
                      }
                      else if ((_DWORD)v73 == 1)
                      {
                        *v83 = *(_WORD *)v70;
                      }
                      else if ((_DWORD)v73)
                      {
                        memcpy(v82 + 7, v70, 2 * v77);
                      }
                      v84 = &v83[v77];
                      a6 = (__n128)xmmword_1969F0E90;
                      *(_OWORD *)v84 = xmmword_1969F0E80;
                      *((_OWORD *)v84 + 1) = xmmword_1969F0E90;
                      *((_QWORD *)v84 + 4) = 0x3E006400610065;
                    }
                    goto LABEL_276;
                  }
                  v72 = v71 - v67;
                }
                v73 = v72;
                v74 = v71 - (unint64_t)v67;
                if ((v71 & 0x100000000) != 0)
                {
                  if (v74 < v73)
                    goto LABEL_366;
                  v70 += v67;
                  v73 |= 0x100000000uLL;
                }
                else
                {
                  if (v74 < v73)
                    goto LABEL_366;
                  v70 += 2 * v67;
                }
                goto LABEL_256;
              }
LABEL_200:
              if (*(_DWORD *)(v58 + 24) == 2)
              {
                if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v58, this);
              }
              else
              {
                *(_DWORD *)(v58 + 24) -= 2;
              }
              goto LABEL_202;
            }
          }
        }
      }
      v57 = 0;
      goto LABEL_200;
    }
    *((_DWORD *)v17 + 6) += 2;
    if (*((_BYTE *)v8 + 207))
      goto LABEL_67;
    if ((MEMORY[0x19AEA53F4](*((_QWORD *)v17 + 10), "[if !supportLists]", 18) & 1) != 0)
    {
      v29 = 1;
      goto LABEL_80;
    }
    if (*((_BYTE *)v8 + 207))
    {
LABEL_67:
      if ((MEMORY[0x19AEA53F4](*((_QWORD *)v17 + 10), "[endif]", 7) & 1) != 0)
      {
        v29 = 0;
LABEL_80:
        *((_BYTE *)v8 + 207) = v29;
        WebCore::MarkupAccumulator::startAppendingNode(v8, v17, 0, (WTF::String *)a4, a6);
        if (*((_DWORD *)v17 + 6) != 2)
        {
          *((_DWORD *)v17 + 6) -= 2;
LABEL_82:
          if ((_DWORD)v119)
          {
            v34 = v118;
            if (HIDWORD(v119))
            {
              v35 = 8 * HIDWORD(v119);
              do
              {
                v36 = *(_QWORD *)v34;
                *(_QWORD *)v34 = 0;
                if (v36)
                {
                  if (*(_DWORD *)(v36 + 24) == 2)
                  {
                    if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v36, this);
                  }
                  else
                  {
                    *(_DWORD *)(v36 + 24) -= 2;
                  }
                }
                v34 = (WTF *)((char *)v34 + 8);
                v35 -= 8;
              }
              while (v35);
              HIDWORD(v119) = 0;
              v34 = v118;
            }
            if (v120 != (_BYTE *)v34 && v34 != 0)
            {
              v118 = 0;
              LODWORD(v119) = 0;
              WTF::fastFree(v34, this);
              v34 = v118;
            }
            if (!v34)
            {
              v118 = (WTF *)v120;
              LODWORD(v119) = 8;
            }
          }
          WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_2::operator()((unsigned int *)v117, (unsigned int *)this);
          if (!a4)
            goto LABEL_117;
          goto LABEL_100;
        }
        v57 = 1;
        goto LABEL_186;
      }
    }
    if (*((_DWORD *)v17 + 6) != 2)
    {
      *((_DWORD *)v17 + 6) -= 2;
      goto LABEL_34;
    }
    v57 = 0;
LABEL_186:
    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v17, this);
      if ((v57 & 1) != 0)
        goto LABEL_82;
      goto LABEL_34;
    }
LABEL_202:
    if ((v57 & 1) != 0)
      goto LABEL_82;
LABEL_34:
    v20 = *((_WORD *)v17 + 14);
    if ((v20 & 8) != 0)
    {
      *((_DWORD *)v17 + 6) += 2;
      v21 = *((_QWORD *)v17 + 9) & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        v21 = *(_QWORD *)((*((_QWORD *)v17 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v21)
          LOBYTE(v21) = (*(_QWORD *)(v21 + 16) & 0x1FLL) == 18;
      }
    }
    else
    {
      LOBYTE(v21) = 0;
    }
    if ((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) != 0 || (v21 & 1) != 0)
      goto LABEL_43;
    WebCore::firstPositionInOrBeforeNode((uint64_t)v17, this, (uint64_t)v131);
    v23 = WebCore::enclosingElementWithTag((WebCore *)v131, (const WebCore::Position *)&WebCore::HTMLNames::selectTag, v22);
    v24 = v131[0];
    v131[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, this);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
    if (v23)
    {
LABEL_43:
      if (*((_BYTE *)v8 + 201)
        && WebCore::UserSelectNoneStateCache::computeState((WebCore::UserSelectNoneStateCache *)&v128, v17) == 2)
      {
        LOBYTE(v23) = 0;
      }
      else
      {
        ++v127;
        if (v130)
          WebCore::MarkupAccumulator::startAppendingNode(v8, v17, 0, (WTF::String *)a4, a6);
        LOBYTE(v23) = 1;
      }
    }
    if ((v20 & 8) != 0)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, this);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    if ((v23 & 1) == 0)
      goto LABEL_82;
    v25 = v121;
    v26 = *((_WORD *)v121 + 14);
    if (*((_BYTE *)v8 + 200))
    {
      if ((v26 & 8) != 0 && (*((_QWORD *)v121 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v56 = *(_QWORD *)((*((_QWORD *)v121 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v56)
        {
          if (*(_BYTE *)(v56 + 193))
          {
            v27 = (_QWORD *)(v56 + 80);
            goto LABEL_55;
          }
        }
      }
      if ((v26 & 0x10) == 0)
        goto LABEL_53;
      if (*(_QWORD *)(*((_QWORD *)v121 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
        goto LABEL_53;
      v30 = **((_QWORD **)v121 + 5);
      if (!v30 || (*(_WORD *)(v30 + 28) & 0x80) == 0)
        goto LABEL_53;
      v31 = *(_DWORD *)(v30 + 24);
      *(_DWORD *)(v30 + 24) = v31 + 2;
      v32 = *(_QWORD *)(v30 + 224);
      if (v32)
      {
        v33 = (*(uint64_t (**)(uint64_t, WTF::StringBuilder *, uint64_t))(*(_QWORD *)v32 + 24))(v32, v25, v30);
        v31 = *(_DWORD *)(v30 + 24) - 2;
      }
      else
      {
        v33 = 0;
      }
      if (v31)
      {
        *(_DWORD *)(v30 + 24) = v31;
      }
      else if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v30, this);
      }
      if (!v33)
      {
        v26 = *((_WORD *)v25 + 14);
        goto LABEL_53;
      }
      if (*(_DWORD *)(v33 + 12))
      {
        v76 = **(_QWORD **)v33;
        if (!v76)
          goto LABEL_56;
        v27 = (_QWORD *)(v76 + 8);
LABEL_55:
        if (*v27)
          goto LABEL_117;
        goto LABEL_56;
      }
      __break(0xC471u);
LABEL_366:
      __break(1u);
LABEL_367:
      JUMPOUT(0x195B63220);
    }
LABEL_53:
    if ((v26 & 4) != 0)
    {
      v27 = (_QWORD *)((char *)v25 + 80);
      goto LABEL_55;
    }
LABEL_56:
    WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_1::operator()(&v123, v121, a6);
    if (!a4)
      goto LABEL_117;
LABEL_100:
    v38 = v122;
    if (!v122)
    {
      *(_DWORD *)(a4 + 24) += 2;
      v122 = (unsigned int *)a4;
      goto LABEL_117;
    }
    this = v121;
    if (*((_BYTE *)v8 + 200))
    {
      if (!WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)a4, v121))
        goto LABEL_117;
      v38 = v122;
      goto LABEL_113;
    }
    v39 = *((_WORD *)v121 + 14);
    if ((v39 & 0xF000) != 0x9000)
    {
      if ((v39 & 4) == 0
        || !*((_QWORD *)v121 + 10)
        || ((*(unsigned __int8 *)(a4 + 22) ^ *((unsigned __int8 *)v121 + 22)) & 8) != 0)
      {
        goto LABEL_117;
      }
      v40 = (WTF::StringBuilder *)a4;
      do
        v40 = (WTF::StringBuilder *)*((_QWORD *)v40 + 4);
      while (v40 != v121 && v40 != 0);
      if (!v40)
        goto LABEL_117;
LABEL_113:
      *(_DWORD *)(a4 + 24) += 2;
      v122 = (unsigned int *)a4;
      if (v38)
        goto LABEL_114;
      goto LABEL_117;
    }
    if (**(WTF::StringBuilder ***)(a4 + 40) == v121
      && (*(_WORD *)(a4 + 28) & 0xF000) != 0x9000
      && (*(_BYTE *)(a4 + 22) & 8) != 0)
    {
      *(_DWORD *)(a4 + 24) += 2;
      v122 = (unsigned int *)a4;
LABEL_114:
      if (v38[6] == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v38, this);
      }
      else
      {
        v38[6] -= 2;
      }
    }
LABEL_117:
    v42 = (WTF::StringBuilder **)v118;
    if (!HIDWORD(v119))
      goto LABEL_150;
    v43 = v123;
    v44 = v124;
    v46 = v125;
    v45 = v126;
    v47 = 8 * HIDWORD(v119);
    do
    {
      if (v127)
        v48 = 0;
      else
        v48 = v122 == (unsigned int *)a4;
      if (v48)
        break;
      v49 = *v42;
      if (*v43)
      {
        --*v43;
        if (*v44)
        {
          if ((*((_WORD *)v49 + 14) & 8) != 0)
          {
            *((_DWORD *)v49 + 6) += 2;
            (*(void (**)(WebCore::MarkupAccumulator *, uint64_t, WTF::StringBuilder *))(*(_QWORD *)v46 + 24))(v46, (uint64_t)v46 + 16, v49);
            if (*((_DWORD *)v49 + 6) == 2)
            {
              if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v49, this);
            }
            else
            {
              *((_DWORD *)v49 + 6) -= 2;
            }
          }
          else if (WebCore::MarkupAccumulator::suitableShadowRoot(v46, v49))
          {
            WTF::StringBuilder::append();
          }
        }
      }
      else if (*v44)
      {
        WebCore::StyledMarkupAccumulator::wrapWithNode((uint64_t)v46, *v42, 0, 0, a6);
      }
      *((_DWORD *)v49 + 6) += 2;
      v50 = *v45;
      *v45 = v49;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50, this);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
      ++v42;
      v47 -= 8;
    }
    while (v47);
LABEL_141:
    v42 = (WTF::StringBuilder **)v118;
    if (HIDWORD(v119))
    {
      v51 = 8 * HIDWORD(v119);
      do
      {
        v52 = *v42;
        *v42 = 0;
        if (v52)
        {
          if (*((_DWORD *)v52 + 6) == 2)
          {
            if ((*((_WORD *)v52 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v52, this);
          }
          else
          {
            *((_DWORD *)v52 + 6) -= 2;
          }
        }
        ++v42;
        v51 -= 8;
      }
      while (v51);
      v42 = (WTF::StringBuilder **)v118;
    }
LABEL_150:
    if (v120 != (_BYTE *)v42 && v42 != 0)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      WTF::fastFree((WTF *)v42, this);
    }
    v11 = v121;
    if (v121)
      *((_DWORD *)v121 + 6) += 2;
    if (v116)
    {
      if (*((_DWORD *)v116 + 6) == 2)
      {
        if ((*((_WORD *)v116 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v116, this);
      }
      else
      {
        *((_DWORD *)v116 + 6) -= 2;
      }
    }
    v7 = (WTF::StringBuilder *)v122;
    if (v122)
      v122[6] += 2;
    v54 = v121;
    v121 = v7;
    if (v54)
    {
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v54, this);
          v7 = v121;
        }
      }
      else
      {
        *((_DWORD *)v54 + 6) -= 2;
      }
    }
  }
  while (v7 != (WTF::StringBuilder *)a4);
  v121 = 0;
  if (a4)
  {
    v10 = *(_DWORD *)(a4 + 24);
    v7 = (WTF::StringBuilder *)a4;
LABEL_289:
    v93 = v10 - 2;
    if (v93)
    {
      *((_DWORD *)v7 + 6) = v93;
    }
    else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v7, this);
    }
  }
  if (!v127)
    goto LABEL_327;
  if (a4)
    v94 = (WTF::StringBuilder *)a4;
  else
    v94 = v11;
  if (*((_BYTE *)v8 + 200))
  {
    v95 = (uint64_t *)((char *)v94 + 32);
    v110 = *((_QWORD *)v94 + 4);
    if (!v110
      || (*(_WORD *)(v110 + 28) & 8) == 0
      || (v111 = *(_QWORD *)(v110 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v113 = *(_QWORD *)(v111 + 88)) == 0
      || (v114 = *(_QWORD *)(v113 + 224)) == 0
      || (v96 = (*(uint64_t (**)(uint64_t, WTF::StringBuilder *))(*(_QWORD *)v114 + 16))(v114, v94)) == 0)
    {
      if ((*((_WORD *)v94 + 14) & 0x80) == 0)
        goto LABEL_298;
      goto LABEL_358;
    }
  }
  else
  {
    if ((*((_WORD *)v94 + 14) & 0x80) == 0)
    {
      v95 = (uint64_t *)((char *)v94 + 32);
      goto LABEL_298;
    }
LABEL_358:
    v112 = *((_QWORD *)v94 + 25);
    if (!v112)
      goto LABEL_327;
    v95 = (uint64_t *)(v112 + 8);
LABEL_298:
    v96 = *v95;
    if (!*v95)
      goto LABEL_327;
  }
  v97 = *(_DWORD *)(v96 + 24);
  *(_DWORD *)(v96 + 24) = v97 + 2;
  if (!v127)
  {
LABEL_325:
    if (v97)
    {
      *(_DWORD *)(v96 + 24) = v97;
    }
    else if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v96, this);
    }
    goto LABEL_327;
  }
  while (2)
  {
    WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_1::operator()(&v123, (WTF::StringBuilder *)v96, a6);
    if (*((_BYTE *)v8 + 200))
    {
      v98 = (uint64_t *)(v96 + 32);
      v100 = *(_QWORD *)(v96 + 32);
      if (v100)
      {
        if ((*(_WORD *)(v100 + 28) & 8) != 0)
        {
          v101 = *(_QWORD *)(v100 + 72) & 0xFFFFFFFFFFFFLL;
          if (v101)
          {
            v103 = *(_QWORD *)(v101 + 88);
            if (v103)
            {
              v104 = *(_QWORD *)(v103 + 224);
              if (v104)
              {
                v99 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v96);
                if (v99)
                {
LABEL_304:
                  *(_DWORD *)(v99 + 24) += 2;
                  goto LABEL_305;
                }
              }
            }
          }
        }
      }
      if ((*(_WORD *)(v96 + 28) & 0x80) != 0)
        goto LABEL_316;
LABEL_303:
      v99 = *v98;
      if (!*v98)
        goto LABEL_305;
      goto LABEL_304;
    }
    if ((*(_WORD *)(v96 + 28) & 0x80) == 0)
    {
      v98 = (uint64_t *)(v96 + 32);
      goto LABEL_303;
    }
LABEL_316:
    v102 = *(_QWORD *)(v96 + 200);
    if (v102)
    {
      v98 = (uint64_t *)(v102 + 8);
      goto LABEL_303;
    }
    v99 = 0;
LABEL_305:
    if (*(_DWORD *)(v96 + 24) == 2)
    {
      if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v96, this);
    }
    else
    {
      *(_DWORD *)(v96 + 24) -= 2;
    }
    if (v99)
    {
      v96 = v99;
      if (v127)
        continue;
    }
    break;
  }
  if (v99)
  {
    v97 = *(_DWORD *)(v99 + 24) - 2;
    v96 = v99;
    goto LABEL_325;
  }
LABEL_327:
  result = v122;
  v122 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, this);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v11, this);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v106 = v128;
  if (v128)
  {
    v107 = *((unsigned int *)v128 - 1);
    if ((_DWORD)v107)
    {
      v108 = v128;
      do
      {
        v109 = *v108;
        if (*v108 != -1)
        {
          *v108 = 0;
          if (v109)
          {
            if (*(_DWORD *)(v109 + 24) == 2)
            {
              if ((*(_WORD *)(v109 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v109, this);
            }
            else
            {
              *(_DWORD *)(v109 + 24) -= 2;
            }
          }
        }
        v108 += 2;
        --v107;
      }
      while (v107);
    }
    return (unsigned int *)WTF::fastFree((WTF *)(v106 - 2), this);
  }
  return result;
}

unsigned int *WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_2::operator()(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  char **v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int **v31;
  char *v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = **((_QWORD **)result + 1);
  if (!*(_BYTE *)(*(_QWORD *)result + 200))
    goto LABEL_2;
  v8 = *(_QWORD *)(v4 + 32);
  if (!v8)
    goto LABEL_2;
  if ((*(_WORD *)(v8 + 28) & 8) == 0)
    goto LABEL_2;
  v9 = *(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v9)
    goto LABEL_2;
  v10 = *(_QWORD *)(v9 + 88);
  if (!v10)
    goto LABEL_2;
  result = *(unsigned int **)(v10 + 224);
  if (!result)
    goto LABEL_2;
  result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v4);
  if (!result)
    goto LABEL_2;
  a2 = result;
  v11 = **((_QWORD **)result + 5);
  v12 = (*(_WORD *)(v11 + 28) & 0x80) != 0 ? **((_QWORD **)result + 5) : 0;
  if (!*(_BYTE *)(v12 + 193))
  {
LABEL_2:
    v5 = (unsigned int **)(v4 + 56);
    goto LABEL_3;
  }
  v13 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v13 + 2;
  result = *(unsigned int **)(v11 + 224);
  if (result)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)result
                                                                                                + 24))(result, a2, v11);
    v14 = result;
    v13 = *(_DWORD *)(v11 + 24) - 2;
  }
  else
  {
    v14 = 0;
  }
  if (v13)
  {
    *(_DWORD *)(v11 + 24) = v13;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
  }
  v15 = v14[3];
  if ((_DWORD)v15)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v16);
      if (v17)
      {
        if (*(_QWORD *)(v17 + 8) == v4)
          break;
      }
      if (v15 == ++v16)
        goto LABEL_29;
    }
  }
  else
  {
LABEL_29:
    v16 = -1;
  }
  v18 = v16 + 1;
  if (v18 < v15)
  {
    v19 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v18);
    if (v19)
    {
      v5 = (unsigned int **)(v19 + 8);
LABEL_3:
      v6 = *v5;
      if (v6)
      {
        v7 = (unsigned int **)*((_QWORD *)v2 + 2);
        v6[6] += 2;
        result = *v7;
        *v7 = v6;
        if (result)
        {
          if (result[6] != 2)
          {
            result[6] -= 2;
            return result;
          }
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        return result;
      }
    }
  }
  v20 = **((_QWORD **)v2 + 1);
  if (!*(_BYTE *)(v3 + 200))
  {
    if ((*(_WORD *)(v20 + 28) & 0x80) == 0)
    {
      v21 = (unsigned int **)(v20 + 32);
      goto LABEL_36;
    }
    goto LABEL_124;
  }
  v21 = (unsigned int **)(v20 + 32);
  v54 = *(_QWORD *)(v20 + 32);
  if (!v54
    || (*(_WORD *)(v54 + 28) & 8) == 0
    || (v55 = *(_QWORD *)(v54 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v57 = *(_QWORD *)(v55 + 88)) == 0
    || (result = *(unsigned int **)(v57 + 224)) == 0
    || (result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)result + 16))(result, **((_QWORD **)v2 + 1)), (v22 = result) == 0))
  {
    if ((*(_WORD *)(v20 + 28) & 0x80) == 0)
    {
LABEL_36:
      v22 = *v21;
      if (!*v21)
        return result;
      goto LABEL_37;
    }
LABEL_124:
    v56 = *(_QWORD *)(v20 + 200);
    if (!v56)
      return result;
    v21 = (unsigned int **)(v56 + 8);
    goto LABEL_36;
  }
LABEL_37:
  v22[6] += 2;
  while (1)
  {
    v23 = v22;
    v24 = (char **)*((_QWORD *)v2 + 3);
    v25 = *((unsigned int *)v24 + 3);
    if ((_DWORD)v25 == *((_DWORD *)v24 + 2))
    {
      v26 = v25 + (v25 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v25 + 1)
        v28 = v25 + 1;
      else
        v28 = v27;
      v29 = *v24;
      if (v28 < 9)
      {
        v30 = (char *)(v24 + 2);
        *v24 = (char *)(v24 + 2);
        *((_DWORD *)v24 + 2) = 8;
      }
      else
      {
        if (v28 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195B63778);
        }
        v30 = (char *)WTF::fastMalloc((WTF *)(8 * v28));
        *((_DWORD *)v24 + 2) = v28;
        *v24 = v30;
      }
      result = (unsigned int *)memcpy(v30, v29, 8 * v25);
      if (v24 + 2 != (char **)v29 && v29 != 0)
      {
        if (*v24 == v29)
        {
          *v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
        }
        result = (unsigned int *)WTF::fastFree((WTF *)v29, a2);
      }
      v25 = *((unsigned int *)v24 + 3);
      v33 = *v24;
      v23[6] += 2;
      v31 = (unsigned int **)&v33[8 * v25];
    }
    else
    {
      v31 = (unsigned int **)&(*v24)[8 * v25];
      v22[6] += 2;
    }
    *v31 = v23;
    *((_DWORD *)v24 + 3) = v25 + 1;
    if (!*(_BYTE *)(v3 + 200))
      goto LABEL_59;
    v37 = *((_QWORD *)v23 + 4);
    if (!v37)
      goto LABEL_59;
    if ((*(_WORD *)(v37 + 28) & 8) == 0)
      goto LABEL_59;
    v38 = *(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v38)
      goto LABEL_59;
    v39 = *(_QWORD *)(v38 + 88);
    if (!v39)
      goto LABEL_59;
    result = *(unsigned int **)(v39 + 224);
    if (!result)
      goto LABEL_59;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)result + 16))(result, v23);
    if (!result)
      goto LABEL_59;
    a2 = result;
    v40 = **((_QWORD **)result + 5);
    v41 = (*(_WORD *)(v40 + 28) & 0x80) != 0 ? **((_QWORD **)result + 5) : 0;
    if (!*(_BYTE *)(v41 + 193))
    {
LABEL_59:
      v34 = (unsigned int **)(v23 + 14);
      goto LABEL_60;
    }
    v42 = *(_DWORD *)(v40 + 24);
    *(_DWORD *)(v40 + 24) = v42 + 2;
    result = *(unsigned int **)(v40 + 224);
    if (result)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)result
                                                                                                  + 24))(result, a2, v40);
      v43 = result;
      v42 = *(_DWORD *)(v40 + 24) - 2;
    }
    else
    {
      v43 = 0;
    }
    if (v42)
    {
      *(_DWORD *)(v40 + 24) = v42;
    }
    else if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
    }
    v48 = v43[3];
    if ((_DWORD)v48)
    {
      v49 = 0;
      while (1)
      {
        v50 = *(_QWORD *)(*(_QWORD *)v43 + 8 * v49);
        if (v50)
        {
          if (*(unsigned int **)(v50 + 8) == v23)
            break;
        }
        if (v48 == ++v49)
          goto LABEL_103;
      }
    }
    else
    {
LABEL_103:
      v49 = -1;
    }
    v51 = v49 + 1;
    if (v51 < v48)
    {
      v52 = *(_QWORD *)(*(_QWORD *)v43 + 8 * v51);
      if (v52)
        break;
    }
LABEL_61:
    if (!*(_BYTE *)(v3 + 200))
    {
      if ((v23[7] & 0x80) == 0)
      {
        v36 = (unsigned int **)(v23 + 8);
        goto LABEL_64;
      }
LABEL_88:
      v46 = *((_QWORD *)v23 + 25);
      if (!v46)
      {
        v22 = 0;
        goto LABEL_66;
      }
      v36 = (unsigned int **)(v46 + 8);
      goto LABEL_64;
    }
    v36 = (unsigned int **)(v23 + 8);
    v44 = *((_QWORD *)v23 + 4);
    if (v44)
    {
      if ((*(_WORD *)(v44 + 28) & 8) != 0)
      {
        v45 = *(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL;
        if (v45)
        {
          v47 = *(_QWORD *)(v45 + 88);
          if (v47)
          {
            result = *(unsigned int **)(v47 + 224);
            if (result)
            {
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)result
                                                                                                 + 16))(result, v23);
              v22 = result;
              if (result)
              {
LABEL_65:
                v22[6] += 2;
                goto LABEL_66;
              }
            }
          }
        }
      }
    }
    if ((v23[7] & 0x80) != 0)
      goto LABEL_88;
LABEL_64:
    v22 = *v36;
    if (*v36)
      goto LABEL_65;
LABEL_66:
    if (v23[6] == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
    }
    else
    {
      v23[6] -= 2;
    }
    if (!v22)
      return result;
  }
  v34 = (unsigned int **)(v52 + 8);
LABEL_60:
  v35 = *v34;
  if (!v35)
    goto LABEL_61;
  v35[6] += 2;
  v53 = (unsigned int **)*((_QWORD *)v2 + 2);
  result = *v53;
  *v53 = v35;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v23[6] != 2)
  {
    v23[6] -= 2;
    return result;
  }
  if ((*((_WORD *)v23 + 15) & 0x400) == 0)
  {
    result = v23;
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

unsigned int *WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(WebCore::Node &,WebCore::Node*,WebCore::StyledMarkupAccumulator::NodeTraversalMode)::$_1::operator()(int **a1, WTF::StringBuilder *a2, __n128 a3)
{
  WebCore::MarkupAccumulator *v5;
  int v6;
  unsigned int **v7;
  unsigned int *result;

  v5 = (WebCore::MarkupAccumulator *)a1[2];
  v6 = **a1;
  if (v6)
  {
    **a1 = v6 - 1;
    if (*(_BYTE *)a1[1])
    {
      if ((*((_WORD *)a2 + 14) & 8) != 0)
      {
        *((_DWORD *)a2 + 6) += 2;
        (*(void (**)(WebCore::MarkupAccumulator *, uint64_t, WTF::StringBuilder *))(*(_QWORD *)v5 + 24))(v5, (uint64_t)v5 + 16, a2);
        if (*((_DWORD *)a2 + 6) == 2)
        {
          if ((*((_WORD *)a2 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(a2, a2);
        }
        else
        {
          *((_DWORD *)a2 + 6) -= 2;
        }
      }
      else if (WebCore::MarkupAccumulator::suitableShadowRoot(v5, a2))
      {
        WTF::StringBuilder::append();
      }
    }
  }
  else if (*(_BYTE *)a1[1])
  {
    WebCore::StyledMarkupAccumulator::wrapWithNode((uint64_t)a1[2], a2, 0, 0, a3);
  }
  v7 = (unsigned int **)a1[3];
  *((_DWORD *)a2 + 6) += 2;
  result = *v7;
  *v7 = (unsigned int *)a2;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::serializePreservingVisualAppearance@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  WebCore::Node *v12;
  int v13;
  char v14;
  char v15;
  char v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  void *v20;
  WebCore::Node *v21;
  unsigned int *result;
  WebCore::Node *v23;
  int v24;
  char v25;
  WebCore::Node *v26;
  int v27;
  char v28;

  v12 = *(WebCore::Node **)a1;
  *((_DWORD *)v12 + 6) += 2;
  v13 = *(_DWORD *)(a1 + 8);
  v26 = v12;
  v27 = v13;
  v14 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v12 + 208))(v12);
  if (v13)
    v15 = 10;
  else
    v15 = 9;
  if ((v14 & 1) != 0)
    v16 = 8;
  else
    v16 = v15;
  v28 = v16;
  v17 = *(WebCore::Node **)(a1 + 16);
  *((_DWORD *)v17 + 6) += 2;
  v18 = *(_DWORD *)(a1 + 24);
  v23 = v17;
  v24 = v18;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v17 + 208))(v17) & 1) != 0)
  {
    v19 = 8;
  }
  else if (v18)
  {
    v19 = 10;
  }
  else
  {
    v19 = 9;
  }
  v25 = v19;
  WebCore::serializePreservingVisualAppearanceInternal(a6, (WebCore *)&v26, (uint64_t)&v23, a2, a5, 0, 0, a3, a4, 0, 1, 0);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v20);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  result = (unsigned int *)v26;
  v26 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v20);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::serializePreservingVisualAppearanceInternal(uint64_t *a1, WebCore *this, uint64_t a3, uint64_t a4, char a5, char a6, _BOOL4 a7, int a8, unsigned __int8 a9, char a10, char a11, char a12)
{
  unsigned int *result;
  const WebCore::Position *v20;
  unsigned int *v21;
  uint64_t v22;
  const WebCore::QualifiedName *v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  void *v27;
  const WebCore::QualifiedName *v28;
  uint64_t v29;
  WebCore::Node *v30;
  char v31;
  char v32;
  void *v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WebCore::Node *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Node *i;
  void *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  WebCore::Node *v54;
  WebCore::RenderObject *v55;
  __int16 v56;
  char v57;
  WebCore::RenderObject *v58;
  uint64_t v59;
  void *v60;
  WebCore::Node *v61;
  char v62;
  WTF::StringImpl *v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __int16 v78;
  char v79;
  uint64_t v80;
  void *v81;
  const WebCore::QualifiedName *v82;
  uint64_t v83;
  WebCore::Node *v84;
  unsigned int *v85;
  __int16 v86;
  char v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  WebCore::Node *v91;
  BOOL v92;
  void *v93;
  const WebCore::QualifiedName *v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  WebCore::Document *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  WebCore::Node *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  WTF::StringImpl *v114;
  WebCore::Node *v115;
  unsigned __int8 v116;
  WebCore::Node *v117;
  uint64_t v118;
  WTF::String *v119;
  __n128 v120;
  uint64_t v121;
  int v122;
  uint64_t SkippingChildrenInComposedTreeIgnoringUserAgentShadow;
  int v124;
  int v125;
  char v126;
  uint64_t *v127;
  void *v128;
  WebCore::Node *v129;
  void *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WebCore::Node *v133;
  void *v134;
  WebCore::Node *v135;
  int v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WebCore::EditingStyle *v139;
  WebCore::EditingStyle *v140;
  WTF::StringImpl *v141;
  WebCore::Node *v142;
  WTF::StringBuilder **v143;
  WTF::StringBuilder *v144;
  WTF::StringBuilder *v145;
  __int16 v146;
  uint64_t v147;
  const WebCore::StyleProperties *v148;
  WebCore::MutableStyleProperties **v149;
  WebCore::EditingStyle *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  int v163;
  _BOOL4 v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  unint64_t v167;
  WebCore::MutableStyleProperties *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  void *v175;
  WTF::StringBuilder **v176;
  WTF::StringBuilder **v177;
  WTF *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  const WebCore::StyleProperties *v187;
  WebCore::MutableStyleProperties **v188;
  WebCore::EditingStyle *v189;
  void *v190;
  WTF::StringImpl *v191;
  void *v192;
  uint64_t v193;
  void *v194;
  _BOOL4 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  WTF::String *v200;
  uint64_t v201;
  char v202;
  char v203;
  BOOL v204;
  uint64_t v205;
  WTF::String *v206;
  int v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  WTF::String *v212;
  WTF::String *v213;
  void *v214;
  uint64_t v215;
  WTF::String *v216;
  unsigned int v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  int v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  unsigned int v223;
  uint64_t v224;
  WTF::String *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  WTF::String *v230;
  WTF::String *v231;
  void *v232;
  WTF::String *v233;
  uint64_t v234;
  WTF::String *v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  WTF::String *v242;
  WTF::String *v243;
  void *v244;
  WTF::String *v245;
  uint64_t v246;
  unsigned int v247;
  char v248;
  WTF::String *v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  unsigned int v253;
  WTF::StringImpl *v254;
  char *v255;
  uint64_t v256;
  WTF::StringImpl *v257;
  BOOL v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WebCore::Node *v267;
  WebCore::Node *v268;
  void *v269;
  WebCore::Node *v270;
  WTF *v271;
  void *v272;
  WTF *v273;
  void *v274;
  WebCore::EditingStyle *v275;
  uint64_t *v276;
  uint64_t v277;
  WTF::String *v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  void *v281;
  WTF *v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  char v291;
  _BOOL4 v292;
  unsigned int *v293;
  uint64_t v294;
  WebCore::Node *v295;
  _DWORD *v297;
  WebCore::Node *v298;
  WebCore::Node *v299;
  int v300;
  char v301;
  WebCore::Node *v302;
  uint64_t v303;
  __int128 v304;
  unsigned int v305;
  char v306;
  char v307;
  BOOL v308;
  uint64_t v309;
  _DWORD v310[9];
  _BYTE v311[40];
  uint64_t v312;
  int v313;
  char v314;
  uint64_t v315;
  int v316;
  char v317;
  WTF::String *v318;
  uint64_t v319;
  unsigned __int8 v320;
  WebCore::Node *v321;
  WebCore::EditingStyle *v322;
  char v323;
  BOOL v324;
  char v325;
  unsigned __int8 v326;
  char v327;
  __int16 v328;
  char v329;
  WebCore::Node *v330[2];
  char v331;
  uint64_t v332[2];
  char v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  uint64_t v336;
  int v337;
  char v338;
  uint64_t v339;
  int v340;
  char v341;
  uint64_t v342;
  int v343;
  char v344;
  uint64_t v345;
  int v346;
  char v347;
  uint64_t v348;
  int v349;
  char v350;
  __int16 v351;
  char v352;
  uint64_t v353;
  int v354;
  char v355;
  __int128 v356;
  uint64_t v357;

  if ((byte_1EE337BC2 & 1) == 0)
  {
    v302 = (WebCore::Node *)"<br class=\"";
    LODWORD(v303) = 11;
    v334 = (WTF::StringImpl *)"Apple-interchange-newline";
    LODWORD(v335) = 25;
    *(_QWORD *)&v356 = "\">";
    DWORD2(v356) = 2;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v302, (uint64_t)&v334, (uint64_t)&v356, v332);
    if (!v332[0])
    {
      __break(0xC471u);
      JUMPOUT(0x195B64D38);
    }
    qword_1EE337BD8 = v332[0];
    byte_1EE337BC2 = 1;
  }
  result = (unsigned int *)WebCore::treeOrder<(WebCore::TreeType)2>(this, a3);
  if (result == 129
    || ((char)result & 0x80000000) == 0
    || (result = (unsigned int *)WebCore::commonInclusiveAncestor(this, (const WebCore::Position *)a3, v20)) == 0)
  {
    v38 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v38 += 2;
    *a1 = (uint64_t)v38;
    return result;
  }
  v21 = result;
  v291 = a6;
  v292 = a7;
  result[6] += 2;
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8);
  else
    v22 = 0;
  *(_DWORD *)(v22 + 24) += 2;
  WebCore::Document::updateLayout(v22, 2u, 0);
  WebCore::VisiblePosition::canonicalPosition(this, (uint64_t)v332);
  v333 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)a3, (uint64_t)v330);
  v331 = 1;
  v24 = *((_WORD *)v21 + 14);
  v21[6] += 2;
  v302 = (WebCore::Node *)v21;
  LODWORD(v303) = 0;
  if ((v24 & 1) != 0)
    v25 = BYTE4(v303) & 0xF0;
  else
    v25 = BYTE4(v303) & 0xF0 | 3;
  BYTE4(v303) = v25;
  v26 = WebCore::enclosingElementWithTag((WebCore *)&v302, (const WebCore::Position *)&WebCore::HTMLNames::bodyTag, v23);
  v29 = v26;
  if (v26)
    *(_DWORD *)(v26 + 24) += 2;
  v30 = v302;
  v302 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v27);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  v295 = (WebCore::Node *)v22;
  v290 = a1;
  if (!v29)
    goto LABEL_39;
  v31 = *(_WORD *)(v29 + 28);
  *(_DWORD *)(v29 + 24) += 2;
  *(_QWORD *)&v356 = v29;
  DWORD2(v356) = 0;
  if ((v31 & 1) != 0)
    v32 = 0;
  else
    v32 = 3;
  BYTE12(v356) = v32;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v356, (uint64_t)&v302);
  LOBYTE(v304) = 1;
  v34 = 0;
  if (WebCore::operator==((uint64_t *)&v302, v332))
  {
    v35 = *(_WORD *)(v29 + 28);
    *(_DWORD *)(v29 + 24) += 2;
    if ((v35 & 1) != 0)
    {
      v36 = *(_QWORD *)(v29 + 80);
      v37 = 0;
      if (v36)
        LODWORD(v36) = *(_DWORD *)(v36 + 4);
    }
    else
    {
      LODWORD(v36) = 0;
      v37 = 4;
    }
    v353 = v29;
    v354 = v36;
    v355 = v37;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v353, (uint64_t)&v334);
    LOBYTE(v336) = 1;
    v34 = WebCore::operator==((uint64_t *)&v334, (uint64_t *)v330);
    v39 = v334;
    v334 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v33);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v33);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  v40 = v302;
  v302 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v33);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v29, v33);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  if (v34)
  {
    *(_DWORD *)(v29 + 24) += 2;
    v294 = (*(_QWORD *)(*(_QWORD *)(v22 + 680) + 696) >> 13) & 1;
    v41 = v29;
  }
  else
  {
LABEL_39:
    v41 = 0;
    LODWORD(v294) = 0;
  }
  v293 = v21;
  if (!a8)
    goto LABEL_113;
  v21[6] += 2;
  v334 = (WTF::StringImpl *)v21;
  WebCore::enclosingBlock((uint64_t *)&v334, (WebCore::Node *)1, &v302);
  if (!v302)
  {
    i = 0;
    goto LABEL_66;
  }
  if ((*((_WORD *)v302 + 14) & 0x10) == 0)
    goto LABEL_63;
  v43 = *(_QWORD *)(*((_QWORD *)v302 + 12) + 24);
  if (v43 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24) || v43 == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
  {
    for (i = (WebCore::Node *)*((_QWORD *)v302 + 4); i; i = (WebCore::Node *)*((_QWORD *)i + 4))
    {
      if ((*((_WORD *)i + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)i + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        break;
      }
    }
    goto LABEL_64;
  }
  v44 = *(_QWORD *)(*((_QWORD *)v302 + 12) + 24);
  if (v44 == *(_QWORD *)(WebCore::HTMLNames::listingTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::preTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::xmpTag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
    || v44 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24))
  {
    i = v302;
  }
  else
  {
LABEL_63:
    i = 0;
  }
LABEL_64:
  if (*((_DWORD *)v302 + 6) == 2)
  {
    if ((*((_WORD *)v302 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v302, v42);
  }
  else
  {
    *((_DWORD *)v302 + 6) -= 2;
  }
LABEL_66:
  if (v21[6] == 2)
  {
    if ((*((_WORD *)v21 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v42);
  }
  else
  {
    v21[6] -= 2;
  }
  if (i)
    *((_DWORD *)i + 6) += 2;
  WebCore::enclosingNodeOfType((uint64_t)this, (uint64_t (*)(uint64_t))WebCore::isListItem, 1, (uint64_t *)&v356);
  if ((_QWORD)v356)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v356 + 208))(v356))
    {
      WebCore::VisibleSelection::selectionFromContentsOfNode((WebCore::VisibleSelection *)v356, (WebCore::VisibleSelection *)&v302);
      v47 = *(WTF::StringImpl **)this;
      if (*(_QWORD *)this)
        *((_DWORD *)v47 + 6) += 2;
      v334 = v47;
      LODWORD(v335) = *((_DWORD *)this + 2);
      BYTE4(v335) = *((_BYTE *)this + 12);
      v48 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)(v48 + 24) += 2;
      v336 = v48;
      v337 = *(_DWORD *)(a3 + 8);
      v338 = *(_BYTE *)(a3 + 12);
      v339 = 0;
      v340 = 0;
      v341 &= 0xF0u;
      v342 = 0;
      v343 = 0;
      v344 &= 0xF0u;
      v345 = 0;
      v346 = 0;
      v347 &= 0xF0u;
      v348 = 0;
      v349 = 0;
      v350 &= 0xF0u;
      v351 = 1;
      v352 &= ~2u;
      WebCore::VisibleSelection::validate((uint64_t)&v334, 0);
      v49 = WebCore::operator==((uint64_t)&v302, (uint64_t)&v334);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v334);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v302);
      if (v49)
      {
        v50 = *(_QWORD *)(v356 + 32);
        if (v50)
          *(_DWORD *)(v50 + 24) += 2;
        if (i)
        {
          if (*((_DWORD *)i + 6) == 2)
          {
            if ((*((_WORD *)i + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(i, v46);
          }
          else
          {
            *((_DWORD *)i + 6) -= 2;
          }
        }
        if (v50)
        {
          while (1)
          {
            i = (WebCore::Node *)v50;
            if ((*(_WORD *)(v50 + 28) & 0x10) != 0)
            {
              v51 = *(_QWORD *)(*(_QWORD *)(v50 + 96) + 24);
              if (v51 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
                || v51 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
                || v51 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
              {
                break;
              }
            }
            v50 = *(_QWORD *)(v50 + 32);
            if (v50)
              *(_DWORD *)(v50 + 24) += 2;
            if (*((_DWORD *)i + 6) == 2)
            {
              if ((*((_WORD *)i + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(i, v46);
            }
            else
            {
              *((_DWORD *)i + 6) -= 2;
            }
            if (!v50)
            {
              i = 0;
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
    }
    v52 = v356;
    *(_QWORD *)&v356 = 0;
    if (v52)
    {
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, v46);
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
    }
  }
  WebCore::highestEnclosingNodeOfType((unsigned int *)this, WebCore::isMailBlockquote, 0, 0, (uint64_t *)&v302);
  v54 = v302;
  if (!v302)
  {
    v54 = i;
    if (i)
      goto LABEL_114;
LABEL_113:
    v54 = 0;
    i = (WebCore::Node *)v21;
    goto LABEL_114;
  }
  v302 = 0;
  if (i)
  {
    if (*((_DWORD *)i + 6) == 2)
    {
      if ((*((_WORD *)i + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(i, v53);
        v129 = v302;
        v302 = 0;
        if (v129)
        {
          if (*((_DWORD *)v129 + 6) == 2)
          {
            if ((*((_WORD *)v129 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v129, v128);
          }
          else
          {
            *((_DWORD *)v129 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      *((_DWORD *)i + 6) -= 2;
    }
  }
  i = v54;
LABEL_114:
  *((_DWORD *)i + 6) += 2;
  v55 = (WebCore::RenderObject *)(*((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL);
  if (v55 && WebCore::RenderObject::containingBlock(v55))
  {
    v56 = *((_WORD *)i + 14);
    *((_DWORD *)i + 6) += 2;
    v302 = i;
    LODWORD(v303) = 0;
    if ((v56 & 1) != 0)
      v57 = BYTE4(v303) & 0xF0;
    else
      v57 = BYTE4(v303) & 0xF0 | 3;
    BYTE4(v303) = v57;
    v58 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)(*((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL));
    if ((*((_BYTE *)v58 + 45) & 1) != 0 || (v59 = *(_QWORD *)(*((_QWORD *)v58 + 3) + 8)) == 0)
    {
      WebCore::highestEnclosingNodeOfType((unsigned int *)&v302, WebCore::isElementPresentational, 0, 0, (uint64_t *)&v334);
    }
    else
    {
      if ((*(_WORD *)(v59 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B64C20);
      }
      *(_DWORD *)(v59 + 24) += 2;
      WebCore::highestEnclosingNodeOfType((unsigned int *)&v302, WebCore::isElementPresentational, 0, v59, (uint64_t *)&v334);
      if (*(_DWORD *)(v59 + 24) == 2)
      {
        if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v59, v60);
      }
      else
      {
        *(_DWORD *)(v59 + 24) -= 2;
      }
    }
    v61 = v302;
    v302 = 0;
    if (v61)
    {
      if (*((_DWORD *)v61 + 6) == 2)
      {
        if ((*((_WORD *)v61 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v61, v60);
      }
      else
      {
        *((_DWORD *)v61 + 6) -= 2;
      }
    }
    v62 = a5;
    v63 = v334;
    if (v334)
    {
      v334 = 0;
      if (v54)
      {
        if (*((_DWORD *)v54 + 6) == 2)
        {
          if ((*((_WORD *)v54 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v54, v60);
            v131 = v334;
            v334 = 0;
            if (v131)
            {
              if (*((_DWORD *)v131 + 6) == 2)
              {
                if ((*((_WORD *)v131 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v131, v130);
              }
              else
              {
                *((_DWORD *)v131 + 6) -= 2;
              }
            }
          }
        }
        else
        {
          *((_DWORD *)v54 + 6) -= 2;
        }
      }
    }
    else
    {
      v63 = v54;
    }
    v54 = v63;
    a5 = v62;
  }
  if (v54)
    goto LABEL_134;
  if ((v21[7] & 2) != 0)
  {
    v65 = *((_QWORD *)v21 + 4);
    if (v65)
    {
      if ((*(_WORD *)(v65 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v65 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
      {
        v66 = *(_QWORD *)(v65 + 104);
        if (v66
          && ((v67 = *(_DWORD *)(v66 + 4), (v67 & 1) != 0)
            ? (v68 = *(_QWORD *)(v66 + 40), LODWORD(v69) = *(_DWORD *)(v66 + 52))
            : (v68 = v66 + 32, LODWORD(v69) = v67 >> 5),
              (_DWORD)v69))
        {
          v69 = v69;
          v70 = (_QWORD *)(v68 + 8);
          while (1)
          {
            v71 = *(v70 - 1);
            if (v71 == WebCore::HTMLNames::classAttr
              || *(_QWORD *)(v71 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
              && *(_QWORD *)(v71 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
            {
              break;
            }
            v70 += 2;
            if (!--v69)
            {
              v70 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v70 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        if (MEMORY[0x19AEA53F4](*v70, "Apple-tab-span", 14))
        {
          v54 = (WebCore::Node *)*((_QWORD *)v21 + 4);
          if (v54)
          {
LABEL_173:
            *((_DWORD *)v54 + 6) += 2;
LABEL_134:
            v64 = v54;
            goto LABEL_175;
          }
        }
      }
    }
  }
  if ((v21[7] & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v21 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
  {
    v72 = *((_QWORD *)v21 + 13);
    if (v72)
    {
      v73 = *(_DWORD *)(v72 + 4);
      if ((v73 & 1) != 0)
      {
        v74 = *(_QWORD *)(v72 + 40);
        LODWORD(v75) = *(_DWORD *)(v72 + 52);
        if ((_DWORD)v75)
        {
LABEL_163:
          v75 = v75;
          v76 = (_QWORD *)(v74 + 8);
          while (1)
          {
            v77 = *(v76 - 1);
            if (v77 == WebCore::HTMLNames::classAttr
              || *(_QWORD *)(v77 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
              && *(_QWORD *)(v77 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
            {
              break;
            }
            v76 += 2;
            if (!--v75)
            {
              v76 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_172:
          v54 = (WebCore::Node *)v21;
          if ((MEMORY[0x19AEA53F4](*v76, "Apple-tab-span", 14) & 1) != 0)
            goto LABEL_173;
          goto LABEL_174;
        }
      }
      else
      {
        v74 = v72 + 32;
        LODWORD(v75) = v73 >> 5;
        if ((_DWORD)v75)
          goto LABEL_163;
      }
    }
    v76 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_172;
  }
LABEL_174:
  v54 = 0;
  v64 = v21;
LABEL_175:
  v78 = v64[14];
  *((_DWORD *)v64 + 6) += 2;
  v302 = (WebCore::Node *)v64;
  LODWORD(v303) = 0;
  v79 = BYTE4(v303) & 0xF0;
  if ((v78 & 1) == 0)
    v79 = BYTE4(v303) & 0xF0 | 3;
  BYTE4(v303) = v79;
  v80 = WebCore::enclosingElementWithTag((WebCore *)&v302, (const WebCore::Position *)&WebCore::HTMLNames::aTag, v28);
  v83 = v80;
  if (v80)
    *(_DWORD *)(v80 + 24) += 2;
  v84 = v302;
  v302 = 0;
  if (v84)
  {
    if (*((_DWORD *)v84 + 6) == 2)
    {
      if ((*((_WORD *)v84 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v84, v81);
    }
    else
    {
      *((_DWORD *)v84 + 6) -= 2;
    }
  }
  if (v83)
  {
    if (v54)
    {
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v54, v81);
      }
      else
      {
        *((_DWORD *)v54 + 6) -= 2;
      }
    }
  }
  else
  {
    v83 = (uint64_t)v54;
    if (!v54)
    {
      v85 = v21;
      goto LABEL_188;
    }
  }
  v85 = (unsigned int *)v83;
LABEL_188:
  v86 = *((_WORD *)v85 + 14);
  v85[6] += 2;
  v302 = (WebCore::Node *)v85;
  LODWORD(v303) = 0;
  v87 = BYTE4(v303) & 0xF0;
  if ((v86 & 1) == 0)
    v87 = BYTE4(v303) & 0xF0 | 3;
  BYTE4(v303) = v87;
  v88 = WebCore::enclosingElementWithTag((WebCore *)&v302, (const WebCore::Position *)&WebCore::HTMLNames::pictureTag, v82);
  v90 = v88;
  if (v88)
    *(_DWORD *)(v88 + 24) += 2;
  v91 = v302;
  v302 = 0;
  if (v91)
  {
    if (*((_DWORD *)v91 + 6) == 2)
    {
      if ((*((_WORD *)v91 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v91, v89);
    }
    else
    {
      *((_DWORD *)v91 + 6) -= 2;
    }
  }
  if (v90)
  {
    if (v83)
    {
      if (*(_DWORD *)(v83 + 24) == 2)
      {
        if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v83, v89);
      }
      else
      {
        *(_DWORD *)(v83 + 24) -= 2;
      }
    }
  }
  else
  {
    v90 = v83;
  }
  if (*((_DWORD *)i + 6) == 2)
  {
    if ((*((_WORD *)i + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(i, v89);
  }
  else
  {
    *((_DWORD *)i + 6) -= 2;
  }
  v92 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8) + 3358) & 1) == 0;
  v334 = 0;
  v335 = 0;
  v302 = (WebCore::Node *)&off_1E33AD290;
  v303 = a4;
  v304 = 0uLL;
  v305 = 0;
  v306 = 1;
  v307 = a5;
  v308 = v92;
  *(_QWORD *)v310 = 0;
  v309 = 0;
  *(_QWORD *)((char *)&v310[1] + 1) = 0;
  *(_QWORD *)&v310[5] = 0;
  *(_QWORD *)&v310[7] = 0;
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v311, (uint64_t *)&v334);
  v311[16] = 0;
  v311[32] = 0;
  if (HIDWORD(v335))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v334, (WTF::StringImpl *)((char *)v334 + 24 * HIDWORD(v335)));
  v95 = v334;
  if (v334)
  {
    v334 = 0;
    LODWORD(v335) = 0;
    WTF::fastFree(v95, v93);
  }
  v302 = (WebCore::Node *)&off_1E33AE5B0;
  v96 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    *(_DWORD *)(v96 + 24) += 2;
  v312 = v96;
  v313 = *((_DWORD *)this + 2);
  v314 = *((_BYTE *)this + 12);
  v97 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v97 + 24) += 2;
  v315 = v97;
  v316 = *(_DWORD *)(a3 + 8);
  v317 = *(_BYTE *)(a3 + 12);
  v318 = 0;
  v319 = 0;
  v320 = a8;
  if (v90)
    *(_DWORD *)(v90 + 24) += 2;
  v321 = (WebCore::Node *)v90;
  v322 = 0;
  v323 = v291;
  v98 = v292;
  if (v292)
  {
    if (v96)
      v99 = *(WebCore::Document **)(*(_QWORD *)(v96 + 40) + 8);
    else
      v99 = 0;
    v100 = *((_QWORD *)v99 + 86);
    if (!v100)
    {
      v100 = WebCore::Document::ensureQuirks(v99);
      v96 = *(_QWORD *)this;
    }
    v98 = *(_BYTE *)(v100 + 66) == 0;
  }
  v324 = v98;
  v325 = v294;
  v326 = a10;
  v327 = a11 ^ 1;
  v328 = 0;
  v329 = 0;
  if (v96)
    *(_DWORD *)(v96 + 24) += 2;
  v299 = (WebCore::Node *)v96;
  v300 = *((_DWORD *)this + 2);
  v301 = *((_BYTE *)this + 12);
  v101 = WebCore::enclosingElementWithTag((WebCore *)&v299, (const WebCore::Position *)&WebCore::HTMLNames::pictureTag, v94);
  if (v101)
  {
    v103 = v101;
    v104 = *(_WORD *)(v101 + 28);
    *(_DWORD *)(v101 + 24) += 4;
    if ((v104 & 1) != 0)
      v105 = 0;
    else
      v105 = 3;
    v106 = v299;
    v299 = (WebCore::Node *)v103;
    if (v106)
    {
      if (*((_DWORD *)v106 + 6) == 2)
      {
        if ((*((_WORD *)v106 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v106, v102);
      }
      else
      {
        *((_DWORD *)v106 + 6) -= 2;
      }
    }
    v300 = 0;
    v301 = v105;
    if (*(_DWORD *)(v103 + 24) == 2)
    {
      if ((*(_WORD *)(v103 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v103, v102);
    }
    else
    {
      *(_DWORD *)(v103 + 24) -= 2;
    }
  }
  if (a8 && WebCore::needInterchangeNewlineAfter((WebCore *)v332, (const WebCore::VisiblePosition *)v102))
  {
    WebCore::previousVisuallyDistinctCandidate(v330, (uint64_t)&v353);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v353))
    {
      v356 = 0uLL;
      v357 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v353, (uint64_t)&v334);
      *(_QWORD *)&v356 = v334;
      DWORD2(v356) = (_DWORD)v335;
      BYTE12(v356) = BYTE4(v335);
    }
    LOBYTE(v357) = 1;
    v108 = v353;
    v353 = 0;
    if (v108)
    {
      if (*(_DWORD *)(v108 + 24) == 2)
      {
        if ((*(_WORD *)(v108 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v108, v107);
      }
      else
      {
        *(_DWORD *)(v108 + 24) -= 2;
      }
    }
    v110 = WebCore::operator==(v332, (uint64_t *)&v356);
    v111 = v356;
    *(_QWORD *)&v356 = 0;
    if (v111)
    {
      if (*(_DWORD *)(v111 + 24) == 2)
      {
        if ((*(_WORD *)(v111 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v111, v109);
      }
      else
      {
        *(_DWORD *)(v111 + 24) -= 2;
      }
    }
    if (v110)
      goto LABEL_242;
    WebCore::MarkupAccumulator::append<WTF::String const&>((uint64_t)&v302, (WTF::StringImpl *)&qword_1EE337BD8);
    WebCore::VisiblePosition::next((unsigned __int8 *)v332, 0, 0, (uint64_t)&v334);
    v114 = v334;
    if (v334)
      *((_DWORD *)v334 + 6) += 2;
    LODWORD(v356) = (_DWORD)v335;
    BYTE4(v356) = BYTE4(v335);
    v115 = v299;
    v299 = v114;
    if (v115)
    {
      if (*((_DWORD *)v115 + 6) == 2)
      {
        if ((*((_WORD *)v115 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v115, v113);
          v114 = v334;
        }
      }
      else
      {
        *((_DWORD *)v115 + 6) -= 2;
      }
    }
    v300 = v356;
    v301 = BYTE4(v356);
    v334 = 0;
    if (v114)
    {
      if (*((_DWORD *)v114 + 6) == 2)
      {
        if ((*((_WORD *)v114 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v114, v113);
      }
      else
      {
        *((_DWORD *)v114 + 6) -= 2;
      }
    }
    v116 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v299, a3);
    if (v116 == 129 || ((char)v116 & 0x80000000) == 0)
    {
LABEL_242:
      v112 = qword_1EE337BD8;
      if (qword_1EE337BD8)
        *(_DWORD *)qword_1EE337BD8 += 2;
      *v290 = v112;
      goto LABEL_629;
    }
  }
  WebCore::Position::firstNode((uint64_t)&v299, (uint64_t *)&v334);
  if (!v334)
  {
    v298 = 0;
    goto LABEL_363;
  }
  v121 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_344;
  v122 = *(_BYTE *)(a3 + 12) & 7;
  SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)a3;
  switch(*(_BYTE *)(a3 + 12) & 7)
  {
    case 0:
      if ((*(_WORD *)(v121 + 28) & 4) == 0)
        goto LABEL_328;
      v124 = *(_DWORD *)(a3 + 8);
      SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v121 + 80);
      if (v124 && SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
      {
        v125 = v124 - 1;
        do
        {
          SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow
                                                                            + 56);
          v252 = v125-- != 0;
          v126 = v252;
        }
        while (SkippingChildrenInComposedTreeIgnoringUserAgentShadow && (v126 & 1) != 0);
      }
      break;
    case 1:
      goto LABEL_274;
    case 2:
      v127 = (uint64_t *)(v121 + 56);
      goto LABEL_272;
    case 3:
      if ((*(_WORD *)(v121 + 28) & 4) == 0)
        goto LABEL_328;
      v127 = (uint64_t *)(v121 + 80);
LABEL_272:
      SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *v127;
      break;
    case 4:
      goto LABEL_328;
    default:
      goto LABEL_344;
  }
  if (SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
  {
LABEL_274:
    *(_DWORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow + 24) += 2;
    goto LABEL_345;
  }
  if ((v122 - 3) >= 2
    && (*(_BYTE *)(a3 + 12) & 7) != 0
    && ((v122 - 1) > 1 || (v121 = *(_QWORD *)(v121 + 32)) == 0))
  {
LABEL_344:
    SkippingChildrenInComposedTreeIgnoringUserAgentShadow = 0;
    goto LABEL_345;
  }
LABEL_328:
  *(_DWORD *)(v121 + 24) += 2;
  if (!v323)
  {
    SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v121 + 56);
    if (!SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
    {
      v132 = v121;
      while (1)
      {
        v132 = *(_QWORD *)(v132 + 32);
        if (!v132)
          break;
        SkippingChildrenInComposedTreeIgnoringUserAgentShadow = *(_QWORD *)(v132 + 56);
        if (SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
          goto LABEL_333;
      }
      SkippingChildrenInComposedTreeIgnoringUserAgentShadow = 0;
      goto LABEL_335;
    }
    goto LABEL_333;
  }
  SkippingChildrenInComposedTreeIgnoringUserAgentShadow = WebCore::nextSkippingChildrenInComposedTreeIgnoringUserAgentShadow((WebCore *)v121, v117);
  if (SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
LABEL_333:
    *(_DWORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow + 24) += 2;
LABEL_335:
  if (*(_DWORD *)(v121 + 24) == 2)
  {
    if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v121, v117);
  }
  else
  {
    *(_DWORD *)(v121 + 24) -= 2;
  }
LABEL_345:
  v133 = v321;
  if (v321)
    goto LABEL_351;
  WebCore::StyledMarkupAccumulator::traverseNodesForSerialization((WTF::StringBuilder **)&v356, (WebCore::MarkupAccumulator *)&v302, v334, SkippingChildrenInComposedTreeIgnoringUserAgentShadow, 1, v120);
  v133 = (WebCore::Node *)v356;
  *(_QWORD *)&v356 = 0;
  v135 = v321;
  v321 = v133;
  if (!v135)
    goto LABEL_350;
  v136 = *((_DWORD *)v135 + 6) - 2;
  if (*((_DWORD *)v135 + 6) == 2)
  {
    if ((*((_WORD *)v135 + 15) & 0x400) != 0)
      goto LABEL_349;
    WebCore::Node::removedLastRef(v135, v134);
    v135 = (WebCore::Node *)v356;
    *(_QWORD *)&v356 = 0;
    if (!v135)
      goto LABEL_349;
    v136 = *((_DWORD *)v135 + 6) - 2;
    if (*((_DWORD *)v135 + 6) == 2)
    {
      if ((*((_WORD *)v135 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v135, v281);
      goto LABEL_349;
    }
  }
  *((_DWORD *)v135 + 6) = v136;
LABEL_349:
  v133 = v321;
LABEL_350:
  if (v133)
  {
LABEL_351:
    v137 = *((_QWORD *)v133 + 4);
    if (v137)
    {
      *(_DWORD *)(v137 + 24) += 2;
      WebCore::EditingStyle::wrappingStyleForSerialization(v137, v320, v326, (uint64_t *)&v356);
      v139 = (WebCore::EditingStyle *)v356;
      *(_QWORD *)&v356 = 0;
      v140 = v322;
      v322 = v139;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
        {
          WebCore::EditingStyle::~EditingStyle(v140, v138);
          WTF::fastFree(v273, v274);
          v275 = (WebCore::EditingStyle *)v356;
          *(_QWORD *)&v356 = 0;
          if (v275)
          {
            if (*(_DWORD *)v275 == 1)
            {
              WebCore::EditingStyle::~EditingStyle(v275, v138);
              WTF::fastFree(v282, v283);
            }
            else
            {
              --*(_DWORD *)v275;
            }
          }
        }
        else
        {
          --*(_DWORD *)v140;
          *(_QWORD *)&v356 = 0;
        }
      }
      if (*(_DWORD *)(v137 + 24) == 2)
      {
        if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v137, v138);
      }
      else
      {
        *(_DWORD *)(v137 + 24) -= 2;
      }
    }
  }
  WebCore::StyledMarkupAccumulator::traverseNodesForSerialization(&v298, (WebCore::MarkupAccumulator *)&v302, v334, SkippingChildrenInComposedTreeIgnoringUserAgentShadow, 0, v120);
  if (SkippingChildrenInComposedTreeIgnoringUserAgentShadow)
  {
    if (*(_DWORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow + 24) == 2)
    {
      if ((*(_WORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)SkippingChildrenInComposedTreeIgnoringUserAgentShadow, v117);
    }
    else
    {
      *(_DWORD *)(SkippingChildrenInComposedTreeIgnoringUserAgentShadow + 24) -= 2;
    }
  }
  v141 = v334;
  v334 = 0;
  if (v141)
  {
    if (*((_DWORD *)v141 + 6) == 2)
    {
      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v141, v117);
    }
    else
    {
      *((_DWORD *)v141 + 6) -= 2;
    }
  }
LABEL_363:
  if (!v90)
    goto LABEL_484;
  v142 = v298;
  if (!v298)
    goto LABEL_484;
  if (!v323)
  {
    if ((*((_WORD *)v298 + 14) & 0x80) == 0)
    {
      v143 = (WTF::StringBuilder **)((char *)v298 + 32);
      goto LABEL_368;
    }
    goto LABEL_725;
  }
  v143 = (WTF::StringBuilder **)((char *)v298 + 32);
  v284 = *((_QWORD *)v298 + 4);
  if (!v284
    || (*(_WORD *)(v284 + 28) & 8) == 0
    || (v285 = *(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v288 = *(_QWORD *)(v285 + 88)) == 0
    || (v289 = *(_QWORD *)(v288 + 224)) == 0
    || (v144 = (WTF::StringBuilder *)(*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v289 + 16))(v289, v298)) == 0)
  {
    if ((*((_WORD *)v142 + 14) & 0x80) == 0)
    {
LABEL_368:
      v144 = *v143;
      if (!*v143)
        goto LABEL_484;
      goto LABEL_369;
    }
LABEL_725:
    v286 = *((_QWORD *)v142 + 25);
    if (!v286)
      goto LABEL_484;
    v143 = (WTF::StringBuilder **)(v286 + 8);
    goto LABEL_368;
  }
LABEL_369:
  *((_DWORD *)v144 + 6) += 2;
  while (1)
  {
    v145 = v144;
    if (v144 != (WTF::StringBuilder *)v41 || (a9 & 1) != 0)
    {
      WebCore::StyledMarkupAccumulator::wrapWithNode((uint64_t)&v302, v144, a9, 1, v120);
      if (!a4)
        goto LABEL_452;
      goto LABEL_437;
    }
    v146 = *(_WORD *)(v41 + 28);
    if ((v146 & 0x10) == 0)
    {
      v149 = 0;
LABEL_389:
      v152 = 0;
      goto LABEL_390;
    }
    *(_DWORD *)(v41 + 24) += 2;
    v147 = *(_QWORD *)(v41 + 104);
    if (v147)
      v148 = *(const WebCore::StyleProperties **)(v147 + 8);
    else
      v148 = 0;
    v149 = (WebCore::MutableStyleProperties **)WTF::fastMalloc((WTF *)0x18);
    v150 = WebCore::EditingStyle::EditingStyle((WebCore::EditingStyle *)v149, v148);
    WebCore::EditingStyle::mergeStyleFromRules(v150, (WebCore::StyledElement *)v41);
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v117);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
    v151 = (uint64_t)v149[1];
    if (!v151)
      goto LABEL_389;
    WebCore::StyleProperties::getPropertyCSSValue(v151, 62, &v297);
    if (v297)
    {
      if (*v297 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v297, v117);
      else
        *v297 -= 2;
      goto LABEL_423;
    }
    v152 = 1;
LABEL_390:
    v153 = *(_QWORD *)(v41 + 104);
    if (!v153)
      goto LABEL_403;
    v154 = *(unsigned int *)(v153 + 4);
    if ((v154 & 1) == 0)
    {
      v155 = (uint64_t *)(v153 + 32);
      v156 = v154 >> 5;
      if (!(v154 >> 5))
        goto LABEL_403;
LABEL_395:
      while (1)
      {
        v157 = *v155;
        if (*v155 == WebCore::HTMLNames::backgroundAttr
          || *(_QWORD *)(v157 + 24) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 24)
          && *(_QWORD *)(v157 + 32) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 32))
        {
          break;
        }
        v155 += 2;
        if (!--v156)
          goto LABEL_403;
      }
      v158 = 1;
      if (v152)
        goto LABEL_404;
LABEL_401:
      if (!v158)
        goto LABEL_423;
LABEL_409:
      v159 = (uint64_t)v149[1];
      v160 = *(_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v41, (const WebCore::QualifiedName *)&WebCore::HTMLNames::backgroundAttr, v118, v119, v120);
      if (v160)
      {
        v161 = *(_DWORD *)(v160 + 4);
        *(_DWORD *)v160 += 2;
        if (v161 < 0)
          goto LABEL_733;
      }
      else
      {
        v161 = 0;
      }
      v162 = __OFADD__(v161, 2);
      v163 = v161 + 2;
      if (v162 || __OFADD__(v163, 5))
      {
LABEL_733:
        v334 = 0;
LABEL_734:
        __break(0xC471u);
        JUMPOUT(0x195B65E9CLL);
      }
      v164 = !v160 || (*(_BYTE *)(v160 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v163 + 5), v164, (int8x16_t *)"url('", 5u, v160, (int8x16_t *)"')", 2u, &v334);
      if (!v334)
        goto LABEL_734;
      WebCore::MutableStyleProperties::setProperty(v159, 62, (uint64_t)&v334, 0, 0);
      v165 = v334;
      v334 = 0;
      if (v165)
      {
        if (*(_DWORD *)v165 == 2)
        {
          WTF::StringImpl::destroy(v165, v117);
          if (!v160)
            goto LABEL_423;
          goto LABEL_421;
        }
        *(_DWORD *)v165 -= 2;
      }
      if (!v160)
        goto LABEL_423;
LABEL_421:
      if (*(_DWORD *)v160 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v160, v117);
      else
        *(_DWORD *)v160 -= 2;
      goto LABEL_423;
    }
    v155 = *(uint64_t **)(v153 + 40);
    v156 = *(unsigned int *)(v153 + 52);
    if (v156)
      goto LABEL_395;
LABEL_403:
    v158 = 0;
    if (!v152)
      goto LABEL_401;
LABEL_404:
    if (v297)
    {
      if (*v297 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v297, v117);
      else
        *v297 -= 2;
    }
    if ((v158 & 1) != 0)
      goto LABEL_409;
LABEL_423:
    v166 = (uint64_t)v149[1];
    if (v166)
    {
      v167 = WebCore::StyleProperties::propertyAsValueID(v166, (WTF::StringImpl *)0xFF);
      if ((v167 & 0xFF0000) != 0 && (unsigned __int16)v167 != 6)
        WebCore::MutableStyleProperties::setProperty(v149[1], 255, 6u, 0);
      v168 = v149[1];
      if (v168)
      {
        v169 = WebCore::StyleProperties::propertyAsValueID((uint64_t)v168, (WTF::StringImpl *)0x155);
        if ((v169 & 0xFF0000) == 0 || (unsigned __int16)v169 == 6)
          goto LABEL_432;
        v168 = v149[1];
      }
      WebCore::MutableStyleProperties::setProperty(v168, 341, 6u, 0);
LABEL_432:
      WebCore::StyledMarkupAccumulator::wrapWithStyleNode((WebCore::StyledMarkupAccumulator *)&v302, v149[1], v295);
    }
    if ((v146 & 0x10) != 0)
    {
      if (*(_DWORD *)v149 == 1)
      {
        WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v149, v117);
        WTF::fastFree(v178, v179);
        if (!a4)
          goto LABEL_452;
        goto LABEL_437;
      }
      --*(_DWORD *)v149;
    }
    if (!a4)
      goto LABEL_452;
LABEL_437:
    v170 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v170 == *(_DWORD *)(a4 + 8))
    {
      v171 = v170 + (v170 >> 2);
      if (v171 >= 0x10)
        v172 = v171 + 1;
      else
        v172 = 16;
      if (v172 <= v170 + 1)
        v173 = v170 + 1;
      else
        v173 = v172;
      if (v173 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195B65EA4);
      }
      v174 = *(void **)a4;
      v175 = (void *)WTF::fastMalloc((WTF *)(8 * v173));
      *(_DWORD *)(a4 + 8) = v173;
      *(_QWORD *)a4 = v175;
      memcpy(v175, v174, 8 * v170);
      if (v174)
      {
        if (*(void **)a4 == v174)
        {
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 8) = 0;
        }
        WTF::fastFree((WTF *)v174, v117);
      }
      v170 = *(unsigned int *)(a4 + 12);
      v176 = (WTF::StringBuilder **)(*(_QWORD *)a4 + 8 * v170);
    }
    else
    {
      v176 = (WTF::StringBuilder **)(*(_QWORD *)a4 + 8 * v170);
    }
    *((_DWORD *)v145 + 6) += 2;
    *v176 = v145;
    *(_DWORD *)(a4 + 12) = v170 + 1;
LABEL_452:
    if (v145 == (WTF::StringBuilder *)v90)
      break;
    if (!v323)
    {
      if ((*((_WORD *)v145 + 14) & 0x80) == 0)
      {
        v177 = (WTF::StringBuilder **)((char *)v145 + 32);
        goto LABEL_456;
      }
LABEL_473:
      v182 = *((_QWORD *)v145 + 25);
      if (!v182)
      {
        v144 = 0;
        goto LABEL_458;
      }
      v177 = (WTF::StringBuilder **)(v182 + 8);
      goto LABEL_456;
    }
    v177 = (WTF::StringBuilder **)((char *)v145 + 32);
    v180 = *((_QWORD *)v145 + 4);
    if (v180)
    {
      if ((*(_WORD *)(v180 + 28) & 8) != 0)
      {
        v181 = *(_QWORD *)(v180 + 72) & 0xFFFFFFFFFFFFLL;
        if (v181)
        {
          v183 = *(_QWORD *)(v181 + 88);
          if (v183)
          {
            v184 = *(_QWORD *)(v183 + 224);
            if (v184)
            {
              v144 = (WTF::StringBuilder *)(*(uint64_t (**)(uint64_t, WTF::StringBuilder *))(*(_QWORD *)v184 + 16))(v184, v145);
              if (v144)
              {
LABEL_457:
                *((_DWORD *)v144 + 6) += 2;
                goto LABEL_458;
              }
            }
          }
        }
      }
    }
    if ((*((_WORD *)v145 + 14) & 0x80) != 0)
      goto LABEL_473;
LABEL_456:
    v144 = *v177;
    if (*v177)
      goto LABEL_457;
LABEL_458:
    if (*((_DWORD *)v145 + 6) == 2)
    {
      if ((*((_WORD *)v145 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v145, v117);
    }
    else
    {
      *((_DWORD *)v145 + 6) -= 2;
    }
    if (!v144)
      goto LABEL_484;
  }
  if (*(_DWORD *)(v90 + 24) == 2)
  {
    if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v90, v117);
  }
  else
  {
    *(_DWORD *)(v90 + 24) -= 2;
  }
LABEL_484:
  if ((_BYTE)v328)
    v185 = v294;
  else
    v185 = 0;
  if (v185 == 1)
  {
    if (HIBYTE(v328))
      WTF::StringBuilder::append();
    if ((*(_WORD *)(v29 + 28) & 0x10) != 0)
    {
      *(_DWORD *)(v29 + 24) += 2;
      v186 = *(_QWORD *)(v29 + 104);
      if (v186)
        v187 = *(const WebCore::StyleProperties **)(v186 + 8);
      else
        v187 = 0;
      v188 = (WebCore::MutableStyleProperties **)WTF::fastMalloc((WTF *)0x18);
      v189 = WebCore::EditingStyle::EditingStyle((WebCore::EditingStyle *)v188, v187);
      WebCore::EditingStyle::mergeStyleFromRules(v189, (WebCore::StyledElement *)v29);
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, v190);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
    else
    {
      v188 = 0;
    }
    WebCore::MutableStyleProperties::setProperty(v188[1], 202, 0x1E8u, 0);
    WebCore::StyledMarkupAccumulator::wrapWithStyleNode((WebCore::StyledMarkupAccumulator *)&v302, v188[1], v295);
    if (*(_DWORD *)v188 == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v188, v191);
      WTF::fastFree(v271, v272);
    }
    else
    {
      --*(_DWORD *)v188;
    }
  }
  if (a8)
  {
    WebCore::previousVisuallyDistinctCandidate(v330, (uint64_t)&v353);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v353))
    {
      v356 = 0uLL;
      v357 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v353, (uint64_t)&v334);
      *(_QWORD *)&v356 = v334;
      DWORD2(v356) = (_DWORD)v335;
      BYTE12(v356) = BYTE4(v335);
    }
    LOBYTE(v357) = 1;
    v193 = v353;
    v353 = 0;
    if (v193)
    {
      if (*(_DWORD *)(v193 + 24) == 2)
      {
        if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v193, v192);
      }
      else
      {
        *(_DWORD *)(v193 + 24) -= 2;
      }
    }
    v195 = WebCore::needInterchangeNewlineAfter((WebCore *)&v356, (const WebCore::VisiblePosition *)v192);
    v196 = v356;
    *(_QWORD *)&v356 = 0;
    if (v196)
    {
      if (*(_DWORD *)(v196 + 24) == 2)
      {
        if ((*(_WORD *)(v196 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v196, v194);
      }
      else
      {
        *(_DWORD *)(v196 + 24) -= 2;
      }
    }
    if (v195)
      WebCore::MarkupAccumulator::append<WTF::String const&>((uint64_t)&v302, (WTF::StringImpl *)&qword_1EE337BD8);
  }
  if (!a12 || (v197 = *((_QWORD *)v295 + 148)) == 0)
  {
    v198 = 0;
    goto LABEL_512;
  }
  v287 = *(_QWORD *)(v197 + 8);
  v198 = v287;
  if (v287)
  {
    v199 = 0;
    *(_DWORD *)(v287 + 24) += 2;
  }
  else
  {
LABEL_512:
    v199 = 1;
  }
  if (HIDWORD(v319))
  {
    v200 = v318;
    v201 = 8 * HIDWORD(v319);
    while (WTF::String::containsOnlyASCII(v200))
    {
      v200 = (WTF::String *)((char *)v200 + 8);
      v201 -= 8;
      if (!v201)
        goto LABEL_517;
    }
    v203 = 0;
    v204 = v198 == 0;
LABEL_521:
    v205 = HIDWORD(v319);
    if (HIDWORD(v319) == (_DWORD)v319)
    {
      v208 = v199;
      v209 = HIDWORD(v319) + ((unint64_t)HIDWORD(v319) >> 2);
      if (v209 >= 0x10)
        v210 = v209 + 1;
      else
        v210 = 16;
      if (v210 <= (unint64_t)HIDWORD(v319) + 1)
        v211 = HIDWORD(v319) + 1;
      else
        v211 = v210;
      if (v211 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195B65EB8);
      }
      v212 = v318;
      v213 = (WTF::String *)WTF::fastMalloc((WTF *)(8 * v211));
      LODWORD(v319) = v211;
      v318 = v213;
      memcpy(v213, v212, 8 * v205);
      if (v212)
      {
        if (v318 == v212)
        {
          v318 = 0;
          LODWORD(v319) = 0;
        }
        WTF::fastFree(v212, v214);
      }
      v215 = HIDWORD(v319);
      v216 = v318;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v207 = HIDWORD(v319);
      *((_QWORD *)v216 + v215) = v334;
      v199 = v208;
    }
    else
    {
      v206 = v318;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v207 = HIDWORD(v319);
      *((_QWORD *)v206 + v205) = v334;
    }
    v217 = v207 + 1;
    HIDWORD(v319) = v207 + 1;
    if (!v204)
    {
      v334 = 0;
      v335 = 0;
      LODWORD(v336) = 0;
      BYTE4(v336) = 1;
      WebCore::StyledMarkupAccumulator::appendStartTag((uint64_t)&v302, (uint64_t)&v334, (WebCore::DataDetection *)v198, 0, 1);
      v219 = v334;
      if (v334
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v334),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v334),
            (v219 = v334) != 0))
      {
        *(_DWORD *)v219 += 2;
      }
      *(_QWORD *)&v356 = v219;
      v220 = HIDWORD(v319);
      if (HIDWORD(v319) == (_DWORD)v319)
      {
        v276 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, HIDWORD(v319) + 1, (unint64_t)&v356);
        v277 = HIDWORD(v319);
        v278 = v318;
        v279 = *v276;
        *v276 = 0;
        *((_QWORD *)v278 + v277) = v279;
        v280 = (WTF::StringImpl *)v356;
        HIDWORD(v319) = v277 + 1;
        *(_QWORD *)&v356 = 0;
        if (v280)
        {
          if (*(_DWORD *)v280 == 2)
            WTF::StringImpl::destroy(v280, v218);
          else
            *(_DWORD *)v280 -= 2;
        }
      }
      else
      {
        *((_QWORD *)v318 + HIDWORD(v319)) = v219;
        HIDWORD(v319) = v220 + 1;
      }
      v221 = v335;
      v335 = 0;
      if (v221)
      {
        if (*(_DWORD *)v221 == 2)
          WTF::StringImpl::destroy(v221, v218);
        else
          *(_DWORD *)v221 -= 2;
      }
      v222 = v334;
      v334 = 0;
      if (v222)
      {
        if (*(_DWORD *)v222 == 2)
          WTF::StringImpl::destroy(v222, v218);
        else
          *(_DWORD *)v222 -= 2;
      }
      v217 = HIDWORD(v319);
    }
    v223 = v319;
    if ((v203 & 1) == 0)
    {
      v224 = v217;
      if (v217 == (_DWORD)v319)
      {
        v227 = v217 + ((unint64_t)v217 >> 2);
        if (v227 >= 0x10)
          v228 = v227 + 1;
        else
          v228 = 16;
        if (v228 <= (unint64_t)v217 + 1)
          v229 = v217 + 1;
        else
          v229 = v228;
        if (v229 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195B65EC8);
        }
        v230 = v318;
        v231 = (WTF::String *)WTF::fastMalloc((WTF *)(8 * v229));
        LODWORD(v319) = v229;
        v318 = v231;
        memcpy(v231, v230, 8 * v224);
        v233 = v318;
        if (v230)
        {
          if (v318 == v230)
          {
            v318 = 0;
            LODWORD(v319) = 0;
          }
          WTF::fastFree(v230, v232);
          v233 = v318;
        }
        v234 = HIDWORD(v319);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v226 = HIDWORD(v319);
        *((_QWORD *)v233 + v234) = v334;
      }
      else
      {
        v225 = v318;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v226 = HIDWORD(v319);
        *((_QWORD *)v225 + v217) = v334;
      }
      v217 = v226 + 1;
      HIDWORD(v319) = v226 + 1;
      v223 = v319;
    }
    if (v217 == v223)
    {
      v237 = v223;
      v238 = v223 + 1;
      v239 = ((unint64_t)v223 >> 2) + v223;
      if (v239 >= 0x10)
        v240 = v239 + 1;
      else
        v240 = 16;
      if (v240 <= v238)
        v241 = v237 + 1;
      else
        v241 = v240;
      if (v241 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195B65EC0);
      }
      v242 = v318;
      v243 = (WTF::String *)WTF::fastMalloc((WTF *)(8 * v241));
      LODWORD(v319) = v241;
      v318 = v243;
      memcpy(v243, v242, 8 * v237);
      v245 = v318;
      if (v242)
      {
        if (v318 == v242)
        {
          v318 = 0;
          LODWORD(v319) = 0;
        }
        WTF::fastFree(v242, v244);
        v245 = v318;
      }
      v246 = HIDWORD(v319);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v236 = HIDWORD(v319);
      *((_QWORD *)v245 + v246) = v334;
    }
    else
    {
      v235 = v318;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v236 = HIDWORD(v319);
      *((_QWORD *)v235 + v217) = v334;
    }
    HIDWORD(v319) = v236 + 1;
  }
  else
  {
LABEL_517:
    v202 = WTF::StringBuilder::containsOnlyASCII((WTF::StringBuilder *)&v304);
    v203 = v202;
    v204 = v198 == 0;
    if (v198 || (v202 & 1) == 0)
      goto LABEL_521;
  }
  v247 = v305;
  if ((v305 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B65E04);
  }
  if (HIDWORD(v319))
  {
    v248 = 0;
    v249 = v318;
    v250 = 8 * HIDWORD(v319);
    do
    {
      v251 = *(_QWORD *)v249;
      if (*(_QWORD *)v249)
        LODWORD(v251) = *(_DWORD *)(v251 + 4);
      v252 = __CFADD__(v247, (_DWORD)v251);
      v253 = v247 + v251;
      if (v252)
        v248 = 1;
      if (!v252)
        v247 = v253;
      v249 = (WTF::String *)((char *)v249 + 8);
      v250 -= 8;
    }
    while (v250);
    v334 = 0;
    v335 = 0;
    LODWORD(v336) = 0;
    BYTE4(v336) = 1;
    if (v248)
    {
      __break(0xC471u);
      JUMPOUT(0x195B65844);
    }
  }
  else
  {
    v334 = 0;
    v335 = 0;
    LODWORD(v336) = 0;
    BYTE4(v336) = 1;
  }
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v334);
  if (HIDWORD(v319))
  {
    v255 = (char *)v318 - 8;
    v256 = 8 * HIDWORD(v319);
    do
    {
      v257 = *(WTF::StringImpl **)&v255[v256];
      if ((_DWORD)v336)
        v258 = 0;
      else
        v258 = v335 == 0;
      if (v258)
      {
        if (v257)
          *(_DWORD *)v257 += 2;
        v259 = v334;
        v334 = v257;
        if (v259)
        {
          if (*(_DWORD *)v259 == 2)
            WTF::StringImpl::destroy(v259, v254);
          else
            *(_DWORD *)v259 -= 2;
        }
        v260 = *(_QWORD *)&v255[v256];
        if (v260)
          LODWORD(v260) = *(_DWORD *)(v260 + 4);
        LODWORD(v336) = v260;
      }
      else if (v257 && (*((_BYTE *)v257 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v256 -= 8;
    }
    while (v256);
  }
  v356 = v304;
  LODWORD(v357) = v305;
  BYTE4(v357) = v306;
  v304 = 0uLL;
  v305 = 0;
  v306 = 1;
  WTF::StringBuilder::append(&v334, (WTF::StringImpl **)&v356);
  v262 = (WTF::StringImpl *)*((_QWORD *)&v356 + 1);
  *((_QWORD *)&v356 + 1) = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
      WTF::StringImpl::destroy(v262, v261);
    else
      *(_DWORD *)v262 -= 2;
  }
  v263 = (WTF::StringImpl *)v356;
  *(_QWORD *)&v356 = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
      WTF::StringImpl::destroy(v263, v261);
    else
      *(_DWORD *)v263 -= 2;
  }
  v264 = v334;
  if (v334
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v334),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v334),
        (v264 = v334) != 0))
  {
    *(_DWORD *)v264 += 2;
    WTF::StringImpl::replace();
    *v290 = v356;
    if (*(_DWORD *)v264 == 2)
      WTF::StringImpl::destroy(v264, (WTF::StringImpl *)v109);
    else
      *(_DWORD *)v264 -= 2;
  }
  else
  {
    *v290 = 0;
  }
  v265 = v335;
  v335 = 0;
  v21 = v293;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
      WTF::StringImpl::destroy(v265, (WTF::StringImpl *)v109);
    else
      *(_DWORD *)v265 -= 2;
  }
  v266 = v334;
  v334 = 0;
  if (!v266)
  {
LABEL_623:
    if ((v199 & 1) != 0)
      goto LABEL_626;
    goto LABEL_624;
  }
  if (*(_DWORD *)v266 != 2)
  {
    *(_DWORD *)v266 -= 2;
    goto LABEL_623;
  }
  WTF::StringImpl::destroy(v266, (WTF::StringImpl *)v109);
  if ((v199 & 1) == 0)
  {
LABEL_624:
    if (*(_DWORD *)(v198 + 24) == 2)
    {
      if ((*(_WORD *)(v198 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v198, v109);
    }
    else
    {
      *(_DWORD *)(v198 + 24) -= 2;
    }
  }
LABEL_626:
  v267 = v298;
  v298 = 0;
  if (v267)
  {
    if (*((_DWORD *)v267 + 6) == 2)
    {
      if ((*((_WORD *)v267 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v267, v109);
    }
    else
    {
      *((_DWORD *)v267 + 6) -= 2;
    }
  }
LABEL_629:
  v268 = v299;
  v299 = 0;
  if (v268)
  {
    if (*((_DWORD *)v268 + 6) == 2)
    {
      if ((*((_WORD *)v268 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v268, v109);
    }
    else
    {
      *((_DWORD *)v268 + 6) -= 2;
    }
  }
  WebCore::StyledMarkupAccumulator::~StyledMarkupAccumulator((WebCore::StyledMarkupAccumulator *)&v302, (WTF::StringImpl *)v109);
  if (v90)
  {
    if (*(_DWORD *)(v90 + 24) == 2)
    {
      if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v90, v269);
    }
    else
    {
      *(_DWORD *)(v90 + 24) -= 2;
    }
  }
  if (v41)
  {
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v269);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
  }
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v269);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  v270 = v330[0];
  v330[0] = 0;
  if (v270)
  {
    if (*((_DWORD *)v270 + 6) == 2)
    {
      if ((*((_WORD *)v270 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v270, v269);
    }
    else
    {
      *((_DWORD *)v270 + 6) -= 2;
    }
  }
  result = (unsigned int *)v332[0];
  v332[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v269);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v295)
  {
    if (*((_DWORD *)v295 + 6) == 2)
    {
      if ((*((_WORD *)v295 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v295, v269);
    }
    else
    {
      *((_DWORD *)v295 + 6) -= 2;
    }
  }
  if (v21[6] == 2)
  {
    if ((*((_WORD *)v21 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v21, v269);
  }
  else
  {
    v21[6] -= 2;
  }
  return result;
}

void WebCore::serializeFragment(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, __int16 a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  int v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];

  if ((a5 & 0xFF00) == 0)
    LOBYTE(a5) = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3358) & 1) == 0;
  v15[0] = &off_1E33AD290;
  v15[1] = a3;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 1;
  v19 = a4;
  v20 = a5;
  v22 = 0;
  v21 = 0;
  v23 = 0;
  v24 = a6;
  v25 = *a7;
  v12 = a7[1];
  *a7 = 0;
  a7[1] = 0;
  v26 = v12;
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v27, a8);
  v27[16] = 0;
  v27[32] = 0;
  WebCore::MarkupAccumulator::serializeNodesWithNamespaces((WebCore::MarkupAccumulator *)v15, a1, a2, 0);
  v14 = (_DWORD *)v16[0];
  if (v16[0]
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)v16),
        (v14 = (_DWORD *)v16[0]) != 0))
  {
    *v14 += 2;
  }
  *a9 = v14;
  WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v15, v13);
}

void WebCore::serializeFragmentWithURLReplacement(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, __int16 a5@<W4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t *a10, uint64_t *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD v21[4];
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  char v33;
  _QWORD v34[2];

  if ((a5 & 0xFF00) == 0)
    LOBYTE(a5) = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3358) & 1) == 0;
  v21[0] = &off_1E33AD290;
  v21[1] = a3;
  v21[2] = 0;
  v21[3] = 0;
  v22 = 0;
  v23 = 1;
  v24 = a4;
  v25 = a5;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  v29 = a8;
  v30 = *a10;
  v16 = a10[1];
  *a10 = 0;
  a10[1] = 0;
  v31 = v16;
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v32, a11);
  v17 = *a6;
  *a6 = 0;
  v18 = *a7;
  *a7 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v32[2] = v17;
  v32[3] = v18;
  v33 = 1;
  WebCore::MarkupAccumulator::URLReplacementData::~URLReplacementData((WebCore::MarkupAccumulator::URLReplacementData *)v34, v19);
  WebCore::MarkupAccumulator::serializeNodes(v21, a1, a2, a9);
  WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v21, v20);
}

BOOL WebCore::isPlainTextMarkup(WebCore *this, WebCore::Node *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  __int16 v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;

  v5 = *((_WORD *)this + 14);
  if ((v5 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
    return 0;
  *((_DWORD *)this + 6) += 2;
  v7 = *((_QWORD *)this + 13);
  if (!v7)
    goto LABEL_14;
  if ((*(_BYTE *)(v7 + 4) & 8) == 0)
  {
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
  if ((*((_WORD *)this + 14) & 0x20) != 0)
LABEL_6:
    WebCore::SVGElement::synchronizeAllAttributes(this);
LABEL_7:
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      if (*(_DWORD *)(v8 + 52))
        goto LABEL_13;
    }
    else if (v9 >> 5)
    {
      goto LABEL_13;
    }
  }
LABEL_14:
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    v12 = *(_QWORD *)(v11 + 56);
    if (v12)
    {
      *(_DWORD *)(v12 + 24) += 2;
      if (*(_QWORD *)(v12 + 56))
      {
        v10 = 0;
      }
      else
      {
        if ((*(_WORD *)(v11 + 28) & 4) != 0)
        {
          v13 = *(_QWORD *)(v11 + 80);
          if (v13)
            *(_DWORD *)(v13 + 24) += 2;
        }
        else
        {
          v13 = 0;
        }
        if (WebCore::parentTabSpanNode((WebCore *)v13, a2))
          v10 = (*(unsigned __int16 *)(v12 + 28) >> 1) & 1;
        else
          v10 = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
      }
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    else
    {
      v15 = *(_WORD *)(v11 + 28);
      if ((v15 & 2) != 0)
        v10 = 1;
      else
        v10 = (v15 & 4) != 0 && *(_QWORD *)(v11 + 80) != 0;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_32;
  }
LABEL_13:
  v10 = 0;
LABEL_32:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, a2);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v10;
}

unsigned int *WebCore::createFragmentFromText@<X0>(WebCore::Node **this@<X0>, const WebCore::SimpleRange *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  unsigned int *result;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  const WTF::String *v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  unsigned int v31;
  char v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  int v55;
  char v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  WebCore::Node *v60;
  __int16 v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  int v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t *v83;
  unsigned int v84;
  WebCore::Node *v85;
  uint64_t v86;
  unint64_t v87;
  WebCore::ContainerNode *v88;
  _BOOL4 v89;
  uint64_t v90;
  WebCore::Element *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  const WTF::String *v98;
  uint64_t v99;
  WebCore *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl **v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  int16x8_t *v116;
  int16x8_t v117;
  int16x8_t *v118;
  int8x16_t v119;
  int16x8_t *v120;
  char *v121;
  int16x8_t v122;
  __int16 *v123;
  unsigned __int8 *v124;
  int16x8_t v125;
  int16x8_t *v126;
  int8x16_t v127;
  int16x8_t *v128;
  char *v129;
  int16x8_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL4 v134;
  char v135[8];
  WTF::StringImpl *v136;
  char v137;
  uint64_t v138;
  WebCore::Node *v139;
  char v140[8];
  WTF::StringImpl *v141;
  char v142;
  char v143[8];
  WTF::StringImpl *v144;
  char v145;
  char v146[8];
  WTF::StringImpl *v147;
  char v148;
  WTF::StringImpl *v149;
  WTF::StringImpl **v150;
  int v151;
  unsigned int v152;
  WTF::StringImpl *v153;
  int v154;
  char v155;
  WebCore::Element *v156[2];

  v7 = *(_QWORD *)(*((_QWORD *)*this + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  result = (unsigned int *)bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
  *((_QWORD *)result + 3) = 0xB00400000002;
  *((_QWORD *)result + 4) = 0;
  v11 = v7 + 96;
  if (v7)
    v12 = v7 + 96;
  else
    v12 = 0;
  *((_QWORD *)result + 5) = v12;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = 0;
  *(_QWORD *)result = off_1E33A31A0;
  *a3 = (uint64_t)result;
  v13 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_5;
  v14 = *(unsigned int *)(v13 + 4);
  if (!(_DWORD)v14)
    goto LABEL_5;
  v15 = (WebCore *)result;
  v16 = *(_QWORD *)(v13 + 8);
  if ((*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    v17 = 16;
    if (v14 < 0x10)
      v17 = *(unsigned int *)(v13 + 4);
    v18 = v17;
    v19 = *(_BYTE **)(v13 + 8);
    do
    {
      if (*v19 == 13)
        goto LABEL_17;
      ++v19;
      --v18;
    }
    while (v18);
    if (v14 >= 0x11)
    {
      v19 = memchr((void *)(v16 + v17), 13, v14 - v17);
      if (v19)
      {
LABEL_17:
        v20 = (uint64_t)&v19[-v16];
        goto LABEL_18;
      }
    }
LABEL_19:
    *(_DWORD *)v13 += 2;
    v149 = (WTF::StringImpl *)v13;
    goto LABEL_20;
  }
  v116 = (int16x8_t *)(v16 + 2 * v14);
  if (v14 > 0x1F)
  {
    v117.i64[0] = 0xD000D000D000DLL;
    v117.i64[1] = 0xD000D000D000DLL;
    v118 = *(int16x8_t **)(v13 + 8);
    do
    {
      v119 = (int8x16_t)vceqq_s16(*v118, v117);
      LOWORD(v10) = vmaxvq_u16((uint16x8_t)v119);
      if (v10)
        goto LABEL_273;
      v120 = v118 + 1;
      v121 = &v118[1].i8[14];
      ++v118;
    }
    while (v121 < (char *)v116);
    if (v120 < v116)
    {
      v122.i64[0] = 0xD000D000D000DLL;
      v122.i64[1] = 0xD000D000D000DLL;
      v119 = (int8x16_t)vceqq_s16(v116[-1], v122);
      v122.i16[0] = vmaxvq_u16((uint16x8_t)v119);
      if (v122.i32[0])
      {
        v118 = v116 - 1;
LABEL_273:
        v123 = &v118->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v119))];
        goto LABEL_274;
      }
    }
    goto LABEL_19;
  }
  v132 = 2 * v14;
  v123 = *(__int16 **)(v13 + 8);
  while (*v123 != 13)
  {
    ++v123;
    v132 -= 2;
    if (!v132)
      goto LABEL_19;
  }
LABEL_274:
  if (v123 == (__int16 *)v116)
    goto LABEL_19;
  v20 = ((uint64_t)v123 - v16) >> 1;
LABEL_18:
  if (v20 == -1)
    goto LABEL_19;
  WTF::makeStringBySimplifyingNewLinesSlowCase(a2, (const WTF::String *)v20);
LABEL_20:
  *(_DWORD *)(v7 + 24) += 2;
  v21 = *this;
  *((_DWORD *)v21 + 6) = *((_DWORD *)*this + 6) + 2;
  v22 = *((_DWORD *)this + 2);
  v150 = (WTF::StringImpl **)v21;
  v151 = v22;
  v23 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v21 + 208))(v21);
  if (v22)
    v24 = 10;
  else
    v24 = 9;
  if ((v23 & 1) != 0)
    v25 = 8;
  else
    v25 = v24;
  LOBYTE(v152) = v25;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v150, (uint64_t)&v153);
  v29 = v153;
  if (!v153)
  {
    v33 = 0;
    v32 = 1;
    goto LABEL_35;
  }
  v30 = *((_DWORD *)v153 + 6) + 2;
  *((_DWORD *)v153 + 6) = v30;
  v31 = v155 & 7;
  v32 = 1;
  if (v31 > 4)
  {
    v33 = 0;
  }
  else
  {
    if (((1 << v31) & 0x19) != 0)
    {
      v33 = v29;
LABEL_30:
      v32 = 0;
      *((_DWORD *)v33 + 6) = v30 + 2;
      v30 = *((_DWORD *)v29 + 6);
      goto LABEL_31;
    }
    v33 = (WTF::StringImpl *)*((_QWORD *)v29 + 4);
    if (v33)
    {
      v30 = *((_DWORD *)v33 + 6);
      goto LABEL_30;
    }
  }
LABEL_31:
  v34 = v30 - 2;
  if (v34)
  {
    *((_DWORD *)v29 + 6) = v34;
    goto LABEL_33;
  }
  if ((*((_WORD *)v29 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v29, v26);
    v34 = *((_DWORD *)v29 + 6);
LABEL_33:
    v35 = v34 - 2;
    if (v35)
    {
      *((_DWORD *)v29 + 6) = v35;
      goto LABEL_35;
    }
  }
  if ((*((_WORD *)v29 + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(v29, v26);
LABEL_35:
  if (*((_DWORD *)v21 + 6) == 2)
  {
    if ((*((_WORD *)v21 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v21, v26);
  }
  else
  {
    *((_DWORD *)v21 + 6) -= 2;
  }
  if ((v32 & 1) == 0)
  {
    v36 = *((_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v36)
      goto LABEL_44;
    if ((*(_BYTE *)((*((_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v36 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v37 = *(_DWORD *)(v36 + 120);
    v38 = (v37 >> 27) & 7;
    if ((v37 & 0x40000000) == 0 && v38 == 3)
    {
      v72 = 0;
    }
    else
    {
      if (!v38)
      {
LABEL_44:
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v26);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
        goto LABEL_46;
      }
      if ((v37 & 0x40000000) != 0)
        v70 = 1;
      else
        v70 = 2;
      v71 = (v37 >> 30) & 1;
      if (v38 != 1)
        LOBYTE(v71) = 1;
      if (v38 == v70)
        v72 = 0;
      else
        v72 = v71;
    }
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33, v26);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
    if ((v72 & 1) == 0)
    {
      if (v149)
        v73 = WTF::StringImpl::endsWith();
      else
        v73 = 0;
      v74 = bmalloc::api::isoAllocate();
      v75 = v74;
      *(_OWORD *)(v74 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v74 + 24) = 0x300300000002;
      *(_QWORD *)(v74 + 32) = 0;
      *(_QWORD *)(v74 + 40) = v11;
      *(_OWORD *)(v74 + 48) = 0u;
      *(_OWORD *)(v74 + 64) = 0u;
      ++*(_DWORD *)(v7 + 3324);
      v76 = v149;
      if (v149 || (v76 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v76 += 2;
      *(_QWORD *)(v74 + 80) = v76;
      *(_QWORD *)v74 = off_1E33A8078;
      WebCore::ContainerNode::appendChild((uint64_t)v15, (WebCore::Node *)v74, (uint64_t)v146);
      if (v148)
      {
        v77 = v147;
        v147 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v9);
          else
            *(_DWORD *)v77 -= 2;
        }
      }
      if (*(_DWORD *)(v75 + 24) == 2)
      {
        if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v75, v9);
      }
      else
      {
        *(_DWORD *)(v75 + 24) -= 2;
      }
      if (v73)
      {
        v78 = bmalloc::api::isoAllocate();
        v79 = v78;
        *(_OWORD *)(v78 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v78 + 24) = 0x101C00000002;
        *(_QWORD *)(v78 + 32) = 0;
        *(_QWORD *)(v78 + 40) = v11;
        *(_OWORD *)(v78 + 48) = 0u;
        *(_OWORD *)(v78 + 64) = 0u;
        ++*(_DWORD *)(v7 + 3324);
        *(_QWORD *)(v78 + 80) = 0;
        *(_QWORD *)(v78 + 88) = 0;
        v80 = WebCore::HTMLNames::brTag;
        if (WebCore::HTMLNames::brTag)
          ++*(_DWORD *)WebCore::HTMLNames::brTag;
        *(_QWORD *)(v78 + 96) = v80;
        *(_QWORD *)(v78 + 104) = 0;
        *(_QWORD *)v78 = off_1E33B4C28;
        WTF::AtomStringImpl::add();
        v81 = *(_QWORD *)(v79 + 104);
        if (v81
          && ((v82 = *(_DWORD *)(v81 + 4), (v82 & 1) != 0)
            ? (v83 = *(uint64_t **)(v81 + 40), v84 = *(_DWORD *)(v81 + 52))
            : (v83 = (uint64_t *)(v81 + 32), v84 = v82 >> 5),
              v84))
        {
          v111 = 0;
          while (1)
          {
            v112 = *v83;
            if (*v83 == WebCore::HTMLNames::classAttr
              || *(_QWORD *)(v112 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
              && *(_QWORD *)(v112 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
            {
              break;
            }
            ++v111;
            v83 += 2;
            if (v84 == v111)
              goto LABEL_241;
          }
        }
        else
        {
LABEL_241:
          v111 = 0xFFFFFFFFLL;
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v79, v111, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v153, 0);
        v114 = v153;
        v153 = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
            WTF::StringImpl::destroy(v114, v113);
          else
            *(_DWORD *)v114 -= 2;
        }
        WebCore::ContainerNode::appendChild((uint64_t)v15, (WebCore::Node *)v79, (uint64_t)v143);
        if (v145)
        {
          v115 = v144;
          v144 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v9);
            else
              *(_DWORD *)v115 -= 2;
          }
        }
        if (*(_DWORD *)(v79 + 24) == 2)
        {
          if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v79, v9);
        }
        else
        {
          *(_DWORD *)(v79 + 24) -= 2;
        }
      }
LABEL_297:
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      goto LABEL_299;
    }
  }
LABEL_46:
  if (!v149)
    goto LABEL_295;
  v39 = *((_DWORD *)v149 + 4);
  v40 = (char *)*((_QWORD *)v149 + 1);
  v41 = *((unsigned int *)v149 + 1);
  if ((v39 & 4) != 0)
  {
    if ((_DWORD)v41)
    {
      v42 = 16;
      if (v41 < 0x10)
        v42 = *((unsigned int *)v149 + 1);
      v43 = v42;
      v44 = (_BYTE *)*((_QWORD *)v149 + 1);
      do
      {
        if (*v44 == 10)
          goto LABEL_56;
        ++v44;
        --v43;
      }
      while (v43);
      if (v41 >= 0x11)
      {
        v44 = memchr(&v40[v42], 10, v41 - v42);
        if (v44)
        {
LABEL_56:
          v45 = v44 - v40;
          goto LABEL_57;
        }
      }
    }
LABEL_295:
    WebCore::fillContainerFromString(v15, (WebCore::ContainerNode *)&v149, v27);
    goto LABEL_296;
  }
  if (!(_DWORD)v41)
    goto LABEL_295;
  v124 = (unsigned __int8 *)&v40[2 * v41];
  if (v41 <= 0x1F)
  {
    v133 = 2 * v41;
    v131 = (char *)*((_QWORD *)v149 + 1);
    while (*(_WORD *)v131 != 10)
    {
      v131 += 2;
      v133 -= 2;
      if (!v133)
        goto LABEL_295;
    }
  }
  else
  {
    v125.i64[0] = 0xA000A000A000ALL;
    v125.i64[1] = 0xA000A000A000ALL;
    v126 = (int16x8_t *)*((_QWORD *)v149 + 1);
    do
    {
      v127 = (int8x16_t)vceqq_s16(*v126, v125);
      LOWORD(v28) = vmaxvq_u16((uint16x8_t)v127);
      if (v28)
        goto LABEL_284;
      v128 = v126 + 1;
      v129 = &v126[1].i8[14];
      ++v126;
    }
    while (v129 < (char *)v124);
    if (v128 >= (int16x8_t *)v124)
      goto LABEL_295;
    v130.i64[0] = 0xA000A000A000ALL;
    v130.i64[1] = 0xA000A000A000ALL;
    v127 = (int8x16_t)vceqq_s16(*((int16x8_t *)v124 - 1), v130);
    v130.i16[0] = vmaxvq_u16((uint16x8_t)v127);
    if (!v130.i32[0])
      goto LABEL_295;
    v126 = (int16x8_t *)(v124 - 16);
LABEL_284:
    v131 = &v126->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v127))];
  }
  if (v131 == (char *)v124)
    goto LABEL_295;
  v45 = (v131 - v40) >> 1;
LABEL_57:
  if (v45 == -1)
    goto LABEL_295;
  if ((_DWORD)v41 == 1)
  {
    v46 = (v39 & 4) != 0 ? *v40 : *(unsigned __int16 *)v40;
    if (v46 == 10)
    {
      v47 = bmalloc::api::isoAllocate();
      v48 = v47;
      *(_OWORD *)(v47 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v47 + 24) = 0x101C00000002;
      *(_QWORD *)(v47 + 32) = 0;
      *(_QWORD *)(v47 + 40) = v11;
      *(_OWORD *)(v47 + 48) = 0u;
      *(_OWORD *)(v47 + 64) = 0u;
      ++*(_DWORD *)(v7 + 3324);
      *(_QWORD *)(v47 + 80) = 0;
      *(_QWORD *)(v47 + 88) = 0;
      v49 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v47 + 96) = v49;
      *(_QWORD *)(v47 + 104) = 0;
      *(_QWORD *)v47 = off_1E33B4C28;
      WTF::AtomStringImpl::add();
      v50 = *(_QWORD *)(v48 + 104);
      if (v50
        && ((v51 = *(_DWORD *)(v50 + 4), (v51 & 1) != 0)
          ? (v52 = *(uint64_t **)(v50 + 40), v53 = *(_DWORD *)(v50 + 52))
          : (v52 = (uint64_t *)(v50 + 32), v53 = v51 >> 5),
            v53))
      {
        v65 = 0;
        while (1)
        {
          v66 = *v52;
          if (*v52 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v66 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v66 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            break;
          }
          ++v65;
          v52 += 2;
          if (v53 == v65)
            goto LABEL_108;
        }
      }
      else
      {
LABEL_108:
        v65 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v48, v65, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v153, 0);
      v68 = v153;
      v153 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v67);
        else
          *(_DWORD *)v68 -= 2;
      }
      WebCore::ContainerNode::appendChild((uint64_t)v15, (WebCore::Node *)v48, (uint64_t)v140);
      if (v142)
      {
        v69 = v141;
        v141 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v9);
          else
            *(_DWORD *)v69 -= 2;
        }
      }
      if (*(_DWORD *)(v48 + 24) != 2)
      {
        *(_DWORD *)(v48 + 24) -= 2;
        goto LABEL_296;
      }
      if ((*(_WORD *)(v48 + 30) & 0x400) != 0)
        goto LABEL_296;
      v107 = (WTF::StringImpl *)v48;
LABEL_219:
      WebCore::Node::removedLastRef(v107, v9);
      goto LABEL_296;
    }
  }
  v54 = *this;
  *((_DWORD *)v54 + 6) = *((_DWORD *)*this + 6) + 2;
  v55 = *((_DWORD *)this + 2);
  v153 = v54;
  v154 = v55;
  if (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v54 + 208))(v54) & 1) != 0)
  {
    v56 = 8;
  }
  else if (v55)
  {
    v56 = 10;
  }
  else
  {
    v56 = 9;
  }
  v155 = v155 & 0xF0 | v56;
  WebCore::Position::firstNode((uint64_t)&v153, (uint64_t *)&v150);
  v57 = (uint64_t)v150;
  if (v150)
  {
    *((_DWORD *)v150 + 6) += 2;
    v138 = v57;
    WebCore::enclosingBlock(&v138, (WebCore::Node *)1, &v139);
    v138 = 0;
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v58);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  else
  {
    v138 = 0;
    WebCore::enclosingBlock(&v138, (WebCore::Node *)1, &v139);
    v138 = 0;
  }
  v59 = (uint64_t)v150;
  v150 = 0;
  if (v59)
  {
    if (*(_DWORD *)(v59 + 24) == 2)
    {
      if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v59, v58);
    }
    else
    {
      *(_DWORD *)(v59 + 24) -= 2;
    }
  }
  v60 = v139;
  if (!v139)
    goto LABEL_89;
  v61 = *((_WORD *)v139 + 14);
  if ((v61 & 0x10) == 0)
  {
LABEL_155:
    v134 = v60 != (WebCore::Node *)WebCore::editableRootForPosition((uint64_t)&v153, 0);
    goto LABEL_156;
  }
  v62 = *(_QWORD *)(*((_QWORD *)v139 + 12) + 24);
  if (v62 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24) || v62 == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
LABEL_89:
    v134 = 0;
    goto LABEL_156;
  }
  if ((v61 & 0x10) == 0)
    goto LABEL_155;
  v63 = *((_DWORD *)v139 + 6);
  *((_DWORD *)v139 + 6) = v63 + 2;
  if ((*((_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if (v63)
    {
      *((_DWORD *)v60 + 6) = v63;
    }
    else if ((*((_WORD *)v60 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v60, v58);
    }
    goto LABEL_155;
  }
  if ((*(_BYTE *)((*((_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_312;
  }
  v64 = *(unsigned __int8 *)((*((_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
  if (v63)
  {
    v134 = 0;
    *((_DWORD *)v60 + 6) = v63;
  }
  else
  {
    if ((*((_WORD *)v60 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v60, v58);
    v134 = 0;
  }
  if (v64 != 35 && v64 != 63)
    goto LABEL_155;
LABEL_156:
  v85 = WebCore::enclosingTextFormControl((WebCore *)&v153, (const WebCore::Position *)v58);
  WTF::String::splitAllowingEmptyEntries();
  v86 = v152;
  if (!v152)
    goto LABEL_204;
  v87 = 0;
  do
  {
    if (v87 >= v152)
    {
      __break(0xC471u);
LABEL_312:
      JUMPOUT(0x195B671A0);
    }
    v88 = (WebCore::ContainerNode *)&v150[v87];
    if (*(_QWORD *)v88)
      v89 = *(_DWORD *)(*(_QWORD *)v88 + 4) == 0;
    else
      v89 = 1;
    if (++v87 == v86 && v89)
    {
      v90 = bmalloc::api::isoAllocate();
      v91 = (WebCore::Element *)v90;
      *(_OWORD *)(v90 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v90 + 24) = 0x101C00000002;
      *(_QWORD *)(v90 + 32) = 0;
      *(_QWORD *)(v90 + 40) = v11;
      *(_OWORD *)(v90 + 48) = 0u;
      *(_OWORD *)(v90 + 64) = 0u;
      ++*(_DWORD *)(v7 + 3324);
      *(_QWORD *)(v90 + 80) = 0;
      *(_QWORD *)(v90 + 88) = 0;
      v92 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v90 + 96) = v92;
      *(_QWORD *)(v90 + 104) = 0;
      *(_QWORD *)v90 = off_1E33B4C28;
      WTF::AtomStringImpl::add();
      v93 = *((_QWORD *)v91 + 13);
      if (!v93)
        goto LABEL_187;
      v94 = *(unsigned int *)(v93 + 4);
      if ((v94 & 1) != 0)
      {
        v95 = *(uint64_t **)(v93 + 40);
        v96 = *(unsigned int *)(v93 + 52);
        if (!v96)
        {
LABEL_187:
          v101 = 0xFFFFFFFFLL;
LABEL_188:
          WebCore::Element::setAttributeInternal(v91, v101, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, v156, 0);
          v104 = v156[0];
          v156[0] = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, v103);
            else
              *(_DWORD *)v104 -= 2;
          }
          goto LABEL_191;
        }
      }
      else
      {
        v95 = (uint64_t *)(v93 + 32);
        v96 = v94 >> 5;
        if (!(v94 >> 5))
          goto LABEL_187;
      }
      v101 = 0;
      while (1)
      {
        v102 = *v95;
        if (*v95 == WebCore::HTMLNames::classAttr
          || *(_QWORD *)(v102 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
          && *(_QWORD *)(v102 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
        {
          goto LABEL_188;
        }
        ++v101;
        v95 += 2;
        if (v96 == v101)
          goto LABEL_187;
      }
    }
    if (v85)
    {
      v97 = bmalloc::api::isoAllocate();
      v91 = (WebCore::Element *)v97;
      *(_OWORD *)(v97 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v97 + 24) = 0x101C00000002;
      *(_QWORD *)(v97 + 32) = 0;
      *(_QWORD *)(v97 + 40) = v11;
      *(_OWORD *)(v97 + 48) = 0u;
      *(_OWORD *)(v97 + 64) = 0u;
      ++*(_DWORD *)(v7 + 3324);
      *(_QWORD *)(v97 + 80) = 0;
      *(_QWORD *)(v97 + 88) = 0;
      v99 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v97 + 96) = v99;
      *(_QWORD *)(v97 + 104) = 0;
      *(_QWORD *)v97 = off_1E33B4C28;
      v100 = (WebCore *)*a3;
    }
    else
    {
      if (v134)
        WebCore::Element::cloneElementWithoutChildren(v139, v156);
      else
        WebCore::createDefaultParagraphElement((WebCore *)v7, v156);
      v91 = v156[0];
      v100 = v156[0];
    }
    WebCore::fillContainerFromString(v100, v88, v98);
LABEL_191:
    WebCore::ContainerNode::appendChild(*a3, v91, (uint64_t)v135);
    if (v137)
    {
      v105 = v136;
      v136 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v9);
        else
          *(_DWORD *)v105 -= 2;
      }
    }
    if (*((_DWORD *)v91 + 6) == 2)
    {
      if ((*((_WORD *)v91 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v91, v9);
    }
    else
    {
      *((_DWORD *)v91 + 6) -= 2;
    }
  }
  while (v87 != v86);
  if (v152)
  {
    v108 = v150;
    v109 = 8 * v152;
    do
    {
      v110 = *v108;
      *v108 = 0;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2)
          WTF::StringImpl::destroy(v110, v9);
        else
          *(_DWORD *)v110 -= 2;
      }
      ++v108;
      v109 -= 8;
    }
    while (v109);
  }
LABEL_204:
  v106 = (WTF *)v150;
  if (v150)
  {
    v150 = 0;
    v151 = 0;
    WTF::fastFree(v106, v9);
  }
  if (v139)
  {
    if (*((_DWORD *)v139 + 6) == 2)
    {
      if ((*((_WORD *)v139 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v139, v9);
    }
    else
    {
      *((_DWORD *)v139 + 6) -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*((_DWORD *)v107 + 6) != 2)
    {
      *((_DWORD *)v107 + 6) -= 2;
      goto LABEL_296;
    }
    if ((*((_WORD *)v107 + 15) & 0x400) == 0)
      goto LABEL_219;
  }
LABEL_296:
  if (v7)
    goto LABEL_297;
LABEL_299:
  result = (unsigned int *)v149;
  v149 = 0;
  if (!result)
  {
LABEL_302:
    if (!v7)
      return result;
    goto LABEL_5;
  }
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_302;
  }
  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
  if (v7)
  {
LABEL_5:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::fillContainerFromString(WebCore *this, WebCore::ContainerNode *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  char v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  WTF::StringImpl *v49;
  char v50;
  _BYTE v51[8];
  WTF::StringImpl *v52;
  char v53;
  WTF::StringImpl *v54;
  _BYTE v55[8];
  WTF::StringImpl *v56;
  char v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  char v61;
  WTF *v62;
  int v63;
  unsigned int v64;
  _BYTE v65[8];
  unsigned int *v66;
  char v67;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    result = (unsigned int *)WTF::String::splitAllowingEmptyEntries();
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 1;
    if (v64)
    {
      v10 = 0;
      v11 = 0;
      v47 = v4 + 96;
      v12 = v64 - 1;
      v13 = &bmalloc::api::IsoHeapBase<WebCore::Text>::provideHeap(void)::heap;
      v14 = 1;
      while (1)
      {
        v15 = (WTF::StringImpl **)((char *)v62 + v10);
        v16 = *(_QWORD *)((char *)v62 + v10);
        if (v16 && *(_DWORD *)(v16 + 4))
        {
          if (v60)
          {
            v21 = v58;
            if (v58
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v58),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v58),
                  (v21 = v58) != 0))
            {
              *(_DWORD *)v21 += 2;
            }
            v22 = v13;
            v23 = bmalloc::api::isoAllocate();
            v24 = v23;
            *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v23 + 24) = 0x300300000002;
            *(_QWORD *)(v23 + 32) = 0;
            *(_QWORD *)(v23 + 40) = v47;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            ++*(_DWORD *)(v4 + 3324);
            v25 = v21;
            if (v21 || (v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
              *(_DWORD *)v25 += 2;
            *(_QWORD *)(v23 + 80) = v25;
            *(_QWORD *)v23 = off_1E33A8078;
            WebCore::createTabSpanElement((WebCore *)&v54, (WebCore::Document *)v4, (WebCore::Text *)v23);
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, v26);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
            v27 = v54;
            WebCore::ContainerNode::appendChild((uint64_t)this, v54, (uint64_t)v55);
            if (v57)
            {
              v29 = v56;
              v56 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v28);
                else
                  *(_DWORD *)v29 -= 2;
              }
            }
            v54 = 0;
            if (*((_DWORD *)v27 + 6) == 2)
            {
              if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v27, v28);
            }
            else
            {
              *((_DWORD *)v27 + 6) -= 2;
            }
            v13 = v22;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v28);
              else
                *(_DWORD *)v21 -= 2;
            }
            v30 = v58;
            v58 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v28);
              else
                *(_DWORD *)v30 -= 2;
            }
            v31 = v59;
            v59 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v28);
              else
                *(_DWORD *)v31 -= 2;
            }
            v60 = 0;
          }
          WebCore::stringWithRebalancedWhitespace(v15, (const WTF::String *)(v14 & 1), v12 == v11, &v54);
          v33 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v33 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v33 + 24) = 0x300300000002;
          *(_QWORD *)(v33 + 32) = 0;
          *(_QWORD *)(v33 + 40) = v47;
          *(_OWORD *)(v33 + 48) = 0u;
          *(_OWORD *)(v33 + 64) = 0u;
          ++*(_DWORD *)(v4 + 3324);
          v34 = v54;
          if (v54)
          {
            v36 = *(_DWORD *)v54;
            *(_DWORD *)v54 += 2;
            *(_QWORD *)(v33 + 80) = v34;
            *(_QWORD *)v33 = off_1E33A8078;
            v54 = 0;
            if (v36)
              *(_DWORD *)v34 = v36;
            else
              WTF::StringImpl::destroy(v34, v32);
          }
          else
          {
            v35 = (_DWORD *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
            {
              *v35 += 2;
              *(_QWORD *)(v33 + 80) = v35;
            }
            else
            {
              *(_QWORD *)(v33 + 80) = 0;
            }
            *(_QWORD *)v33 = off_1E33A8078;
          }
          result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)this, (WebCore::Node *)v33, (uint64_t)v51);
          if (v53)
          {
            result = (unsigned int *)v52;
            v52 = 0;
            if (result)
            {
              if (*result == 2)
                result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
              else
                *result -= 2;
            }
          }
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v33, v9);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        if (v12 == v11)
          break;
        LOBYTE(v54) = 9;
        if (v59 && ((v17 = v60, v60 < *((_DWORD *)v59 + 1)) ? (v18 = v58 == 0) : (v18 = 0), v18))
        {
          v19 = *((_DWORD *)v59 + 4);
          v20 = *((_QWORD *)v59 + 1);
          ++v60;
          if ((v19 & 4) != 0)
            *(_BYTE *)(v20 + v17) = 9;
          else
            *(_WORD *)(v20 + 2 * v17) = 9;
        }
        else
        {
          result = (unsigned int *)WTF::StringBuilder::append();
        }
        v14 = 0;
        ++v11;
        v10 += 8;
        if (v11 >= v64)
        {
          __break(0xC471u);
          return result;
        }
      }
      if (v60)
      {
        v37 = v58;
        if (v58
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v58),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v58),
              (v37 = v58) != 0))
        {
          *(_DWORD *)v37 += 2;
        }
        v38 = bmalloc::api::isoAllocate();
        v39 = v38;
        *(_OWORD *)(v38 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v38 + 24) = 0x300300000002;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 40) = v47;
        *(_OWORD *)(v38 + 48) = 0u;
        *(_OWORD *)(v38 + 64) = 0u;
        ++*(_DWORD *)(v4 + 3324);
        v40 = v37;
        if (v37 || (v40 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v40 += 2;
        *(_QWORD *)(v38 + 80) = v40;
        *(_QWORD *)v38 = off_1E33A8078;
        WebCore::createTabSpanElement((WebCore *)&v54, (WebCore::Document *)v4, (WebCore::Text *)v38);
        if (*(_DWORD *)(v39 + 24) == 2)
        {
          if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v39, v41);
        }
        else
        {
          *(_DWORD *)(v39 + 24) -= 2;
        }
        v42 = v54;
        WebCore::ContainerNode::appendChild((uint64_t)this, v54, (uint64_t)v48);
        if (v50)
        {
          v43 = v49;
          v49 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v9);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        v54 = 0;
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v42, v9);
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v9);
          else
            *(_DWORD *)v37 -= 2;
        }
      }
      v44 = v59;
      v59 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v9);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    result = (unsigned int *)v58;
    v58 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *result -= 2;
    }
    v45 = v62;
    if (v64)
    {
      v46 = 8 * v64;
      do
      {
        result = *(unsigned int **)v45;
        *(_QWORD *)v45 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          else
            *result -= 2;
        }
        v45 = (WTF *)((char *)v45 + 8);
        v46 -= 8;
      }
      while (v46);
      v45 = v62;
      if (!v62)
      {
LABEL_106:
        if (!v4)
          return result;
        goto LABEL_10;
      }
    }
    else if (!v62)
    {
      goto LABEL_106;
    }
    v62 = 0;
    v63 = 0;
    result = (unsigned int *)WTF::fastFree(v45, v9);
    if (!v4)
      return result;
  }
  else
  {
    v5 = bmalloc::api::isoAllocate();
    v6 = v5;
    *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v5 + 24) = 0x101C00000002;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = v4 + 96;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    ++*(_DWORD *)(v4 + 3324);
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = 0;
    v7 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v5 + 96) = v7;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)v5 = off_1E33B4C28;
    result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)this, (WebCore::Node *)v5, (uint64_t)v65);
    if (v67)
    {
      result = v66;
      v66 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        else
          *result -= 2;
      }
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_10:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::documentTypeString@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  _QWORD v11[4];
  int v12;
  char v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  _DWORD v17[9];
  _BYTE v18[40];

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    while ((*(_WORD *)(v4 + 28) & 0xF000) != 0xA000)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_4;
    }
    *(_DWORD *)(v4 + 24) += 2;
    v9 = 0;
    v10 = 0;
    v6 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 3358) & 1) == 0;
    v11[0] = &off_1E33AD290;
    memset(&v11[1], 0, 24);
    v12 = 0;
    v13 = 1;
    v14 = 0;
    v15 = v6;
    *(_QWORD *)v17 = 0;
    v16 = 0;
    *(_QWORD *)((char *)&v17[1] + 1) = 0;
    *(_QWORD *)&v17[5] = 0;
    *(_QWORD *)&v17[7] = 0;
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v18, (uint64_t *)&v9);
    v18[16] = 0;
    v18[32] = 0;
    WebCore::MarkupAccumulator::serializeNodes(v11, v4, 0, a2);
    WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v11, v7);
    if (HIDWORD(v10))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v9, (WTF *)((char *)v9 + 24 * HIDWORD(v10)));
    this = (unsigned int *)v9;
    if (v9)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      this = (unsigned int *)WTF::fastFree((WTF *)this, v8);
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
LABEL_4:
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *a2 = v5;
  }
  return this;
}

uint64_t WebCore::createFragmentForTransformToFragment@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, WTF **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  __n128 v16;
  uint64_t v17;
  const WebCore::Style::RuleSet *v18;
  WTF::String *v19;
  unsigned int *v20;
  void *v21;

  v8 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0xB00400000002;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = a1 + 96;
  *(_QWORD *)(v8 + 40) = a1 + 96;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)v8 = off_1E33A31A0;
  if (MEMORY[0x19AEA53F4](*a3, "text/html", 9))
  {
    v11 = bmalloc::api::isoAllocate();
    v12 = v11;
    *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v11 + 24) = 0x101C00000002;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = v9;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 88) = 0;
    v13 = WebCore::HTMLNames::bodyTag;
    if (WebCore::HTMLNames::bodyTag)
      ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
    *(_QWORD *)(v11 + 96) = v13;
    *(_QWORD *)(v11 + 104) = 0;
    *(_QWORD *)v11 = off_1E33B5118;
    result = WebCore::DocumentFragment::parseHTML(v8, a2, v11, 3);
LABEL_10:
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v15);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    goto LABEL_12;
  }
  if (WTF::equal(*a3, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v10))
  {
    v17 = bmalloc::api::isoAllocate();
    v12 = v17;
    *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v17 + 24) = 0x300300000002;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = v9;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    v20 = *a2;
    if (*a2 || (v20 = (unsigned int *)*MEMORY[0x1E0CBF738]) != 0)
      *v20 += 2;
    *(_QWORD *)(v17 + 80) = v20;
    *(_QWORD *)v17 = off_1E33A8078;
    result = WebCore::ContainerNode::parserAppendChild(v8, (WebCore::Node *)v17, v18, v19);
    goto LABEL_10;
  }
  result = WebCore::XMLDocumentParser::parseDocumentFragment((const WTF::String *)a2, v8, 0, (WTF::String *)3, v16);
  if ((_DWORD)result)
  {
LABEL_12:
    *a4 = v8;
    return result;
  }
  *a4 = 0;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v21);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::createFragmentForImageAndURL@<X0>(WebCore::HTMLImageElement *a1@<X0>, WTF::AtomString **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v8;
  WebCore::HTMLLabelElement *v9;
  WTF::AtomString *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int *result;
  WTF::StringImpl *v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;
  char v39;
  WebCore::HTMLLabelElement *v40;
  WTF::AtomString *v41;

  WebCore::HTMLImageElement::create(a1, (uint64_t *)&v40);
  v9 = v40;
  v10 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v10 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v10, v8);
      v10 = v41;
    }
  }
  v41 = v10;
  v11 = *((_QWORD *)v9 + 13);
  if (!v11)
    goto LABEL_16;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_DWORD *)(v11 + 52);
    if (!v14)
    {
LABEL_16:
      v15 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
  }
  else
  {
    v13 = (uint64_t *)(v11 + 32);
    v14 = v12 >> 5;
    if (!v14)
      goto LABEL_16;
  }
  v15 = 0;
  while (1)
  {
    v16 = *v13;
    if (*v13 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v15;
    v13 += 2;
    if (v14 == v15)
      goto LABEL_16;
  }
LABEL_17:
  WebCore::Element::setAttributeInternal(v9, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v41, 0);
  v18 = v41;
  v41 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*(_BYTE *)(a3 + 8))
  {
    WTF::AtomString::number(v18, *(double *)a3);
    v19 = *((_QWORD *)v9 + 13);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 + 4);
      if ((v20 & 1) == 0)
      {
        v21 = (uint64_t *)(v19 + 32);
        v22 = v20 >> 5;
        if (!v22)
          goto LABEL_33;
LABEL_26:
        v23 = 0;
        while (1)
        {
          v24 = *v21;
          if (*v21 == WebCore::HTMLNames::widthAttr
            || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
            && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
          {
            goto LABEL_34;
          }
          ++v23;
          v21 += 2;
          if (v22 == v23)
            goto LABEL_33;
        }
      }
      v21 = *(uint64_t **)(v19 + 40);
      v22 = *(_DWORD *)(v19 + 52);
      if (v22)
        goto LABEL_26;
    }
LABEL_33:
    v23 = 0xFFFFFFFFLL;
LABEL_34:
    WebCore::Element::setAttributeInternal(v9, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v41, 0);
    v18 = v41;
    v41 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v25);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (!*(_BYTE *)(a3 + 24))
    goto LABEL_54;
  WTF::AtomString::number(v18, *(double *)(a3 + 16));
  v26 = *((_QWORD *)v9 + 13);
  if (!v26)
    goto LABEL_50;
  v27 = *(_DWORD *)(v26 + 4);
  if ((v27 & 1) == 0)
  {
    v28 = (uint64_t *)(v26 + 32);
    v29 = v27 >> 5;
    if (!v29)
      goto LABEL_50;
LABEL_43:
    v30 = 0;
    while (1)
    {
      v31 = *v28;
      if (*v28 == WebCore::HTMLNames::heightAttr
        || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
        && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
      {
        goto LABEL_51;
      }
      ++v30;
      v28 += 2;
      if (v29 == v30)
        goto LABEL_50;
    }
  }
  v28 = *(uint64_t **)(v26 + 40);
  v29 = *(_DWORD *)(v26 + 52);
  if (v29)
    goto LABEL_43;
LABEL_50:
  v30 = 0xFFFFFFFFLL;
LABEL_51:
  WebCore::Element::setAttributeInternal(v9, v30, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v41, 0);
  v33 = v41;
  v41 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_54:
  v34 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v34 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v34 + 24) = 0xB00400000002;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = (char *)a1 + 96;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)(v34 + 64) = 0u;
  ++*((_DWORD *)a1 + 831);
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 88) = 0;
  *(_QWORD *)v34 = off_1E33A31A0;
  *a4 = v34;
  result = (unsigned int *)WebCore::ContainerNode::appendChild(v34, v9, (uint64_t)v37);
  if (v39)
  {
    result = (unsigned int *)v38;
    v38 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v36);
      else
        *result -= 2;
    }
  }
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v9, v36);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  return result;
}

WebCore::ChildListMutationAccumulator *WebCore::replaceChildrenWithFragment@<X0>(WebCore::ContainerNode *a1@<X0>, WebCore::Node **a2@<X1>, _QWORD *a3@<X8>)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::ChildListMutationAccumulator *result;
  WTF *v11;
  void *v12;
  WebCore::Node *v13;
  uint64_t v15;
  int v16;
  int v17;
  WebCore::Node *v18;
  WebCore::ChildListMutationAccumulator *v19;

  *((_DWORD *)a1 + 6) += 2;
  WebCore::ChildListMutationScope::ChildListMutationScope(&v19, a1);
  v7 = *((_QWORD *)*a2 + 10);
  if (!v7)
  {
    WebCore::ContainerNode::removeChildren((uint64_t)a1);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_6;
  }
  v8 = *((_QWORD *)a1 + 10);
  if (!v8 || (*(_WORD *)(v8 + 28) & 2) == 0 || *(_QWORD *)(v8 + 56))
  {
    WebCore::ContainerNode::removeChildren((uint64_t)a1);
    WebCore::ContainerNode::appendChild((uint64_t)a1, *a2, (uint64_t)a3);
    goto LABEL_6;
  }
  if (v7 != *((_QWORD *)*a2 + 11) || (*(_WORD *)(v7 + 28) & 2) == 0)
    goto LABEL_15;
  *(_DWORD *)(v7 + 24) += 2;
  if (*(_DWORD *)(v8 + 24) > 1u)
    goto LABEL_40;
  if (v19
     ? WTF::RefPtr<WebCore::ChildListMutationAccumulator,WTF::RawPtrTraits<WebCore::ChildListMutationAccumulator>,WTF::DefaultRefDerefTraits<WebCore::ChildListMutationAccumulator>>::unspecifiedBoolTypeInstance
     : 0)
  {
    goto LABEL_40;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
  v16 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 2;
  v17 = *(_WORD *)(v15 + 3292) & 0x2F;
  if (v16)
  {
    *(_DWORD *)(v15 + 24) = v16;
  }
  else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  if (v17)
  {
LABEL_40:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
LABEL_15:
    v13 = *a2;
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::ContainerNode::replaceChild(a1, v13, (WebCore::Node *)v8, (uint64_t)a3);
    if (*(_DWORD *)(v8 + 24) != 2)
    {
      *(_DWORD *)(v8 + 24) -= 2;
      goto LABEL_6;
    }
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      v18 = (WebCore::Node *)v8;
LABEL_39:
      WebCore::Node::removedLastRef(v18);
      goto LABEL_6;
    }
    goto LABEL_6;
  }
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::CharacterData::setData((WebCore::CharacterData *)v8, (const WTF::StringImpl **)(v7 + 80), v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(v7 + 24) != 2)
  {
    *(_DWORD *)(v7 + 24) -= 2;
    goto LABEL_6;
  }
  if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    v18 = (WebCore::Node *)v7;
    goto LABEL_39;
  }
LABEL_6:
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v9);
      result = (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  if (*((_DWORD *)a1 + 6) == 2)
  {
    if ((*((_WORD *)a1 + 15) & 0x400) == 0)
      return (WebCore::ChildListMutationAccumulator *)WebCore::Node::removedLastRef(a1);
  }
  else
  {
    *((_DWORD *)a1 + 6) -= 2;
  }
  return result;
}

BOOL WebCore::isCharacterSmartReplaceExempt(UTF32Char theChar, int a2)
{
  uint64_t v4;
  __CFCharacterSet *v5;
  __CFCharacterSet *Mutable;
  const void *v7;
  const __CFString *v8;
  __CFCharacterSet *v9;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v11;
  CFRange v13;
  CFRange v14;
  CFRange v15;
  CFRange v16;
  CFRange v17;
  CFRange v18;
  CFRange v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;

  if ((byte_1EE337BC3 & 1) == 0)
  {
    unk_1EE337BE0 = 0;
    byte_1EE337BC3 = 1;
  }
  if ((byte_1EE337BC4 & 1) == 0)
  {
    qword_1EE337BE8 = 0;
    byte_1EE337BC4 = 1;
  }
  if (a2)
    v4 = 32;
  else
    v4 = 40;
  v5 = *(__CFCharacterSet **)&_MergedGlobals_436[v4];
  if (!v5)
  {
    Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    v7 = *(const void **)&_MergedGlobals_436[v4];
    *(_QWORD *)&_MergedGlobals_436[v4] = Mutable;
    if (v7)
    {
      CFRelease(v7);
      Mutable = *(__CFCharacterSet **)&_MergedGlobals_436[v4];
    }
    if (a2)
    else
      v8 = CFSTR(")].,;:?'!\"%*-/}");
    CFCharacterSetAddCharactersInString(Mutable, v8);
    v9 = *(__CFCharacterSet **)&_MergedGlobals_436[v4];
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
    CFCharacterSetUnion(v9, Predefined);
    v13.location = 4352;
    v13.length = 256;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v13);
    v14.location = 11904;
    v14.length = 352;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v14);
    v15.location = 12272;
    v15.length = 464;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v15);
    v16.location = 12800;
    v16.length = 29392;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v16);
    v17.location = 44032;
    v17.length = 11183;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v17);
    v18.location = 63744;
    v18.length = 352;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v18);
    v19.location = 65072;
    v19.length = 32;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v19);
    v20.location = 65280;
    v20.length = 240;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v20);
    v21.location = 0x20000;
    v21.length = 42711;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v21);
    v22.location = 194560;
    v22.length = 542;
    CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)&_MergedGlobals_436[v4], v22);
    v5 = *(__CFCharacterSet **)&_MergedGlobals_436[v4];
    if ((a2 & 1) == 0)
    {
      v11 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
      CFCharacterSetUnion(v5, v11);
      v5 = (__CFCharacterSet *)qword_1EE337BE8;
    }
  }
  return CFCharacterSetIsLongCharacterMember(v5, theChar) != 0;
}

WTF::StringImpl *WebCore::AutofillElements::computeAutofillElements@<X0>(WTF::StringImpl *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::FocusController *v10;
  __int16 v11;
  WTF::StringImpl *v12;
  int v13;
  BOOL v14;
  unsigned __int8 **v15;
  WTF::StringImpl *v16;
  unsigned __int8 **v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WebCore::Node *v32;
  int v33;
  BOOL v34;
  WTF::StringImpl *v35;
  int v36;
  BOOL v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BOOL4 v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WebCore::Node *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  WTF::StringImpl *v58;
  int v59;
  int v60;
  BOOL v61;
  WTF::StringImpl *v62;
  int v63;
  BOOL v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int16 v68;

  v4 = *(WTF::StringImpl **)result;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 40) + 8) + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 24)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  v9 = result;
  v10 = *(WebCore::FocusController **)(v8 + 72);
  ++*(_DWORD *)v10;
  v11 = *((_WORD *)v4 + 14);
  if (*(_DWORD *)(*((_QWORD *)v4 + 30) + 12) == 2048)
  {
    if ((v11 & 8) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      while (1)
      {
        result = WebCore::FocusController::previousFocusableElement(v10, v4);
        v12 = result;
        if (result)
          *((_DWORD *)result + 6) += 2;
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v4, a2);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
        if (!v12)
          break;
        v4 = v12;
        if ((*((_WORD *)v12 + 14) & 0x10) != 0)
        {
          v4 = v12;
          if (*(_QWORD *)(*((_QWORD *)v12 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v13 = *(_DWORD *)(*((_QWORD *)v12 + 30) + 12);
            v14 = v13 != 32 && (v13 & 0x2A8C20) == 0;
            v4 = v12;
            if (!v14)
            {
              v25 = *((_DWORD *)v12 + 6);
              *((_DWORD *)v12 + 6) = v25 + 2;
              if (v25)
              {
                *((_DWORD *)v12 + 6) = v25;
              }
              else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              {
                result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v12, a2);
              }
              v26 = *(WTF::StringImpl **)v9;
              if (*(_QWORD *)v9 && (*((_WORD *)v26 + 14) & 8) != 0)
              {
                *((_DWORD *)v26 + 6) += 2;
                while (1)
                {
                  result = WebCore::FocusController::nextFocusableElement(v10, v26);
                  v35 = result;
                  if (result)
                    *((_DWORD *)result + 6) += 2;
                  if (*((_DWORD *)v26 + 6) == 2)
                  {
                    if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                      result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v26, a2);
                  }
                  else
                  {
                    *((_DWORD *)v26 + 6) -= 2;
                  }
                  if (!v35)
                    break;
                  v26 = v35;
                  if ((*((_WORD *)v35 + 14) & 0x10) != 0)
                  {
                    v26 = v35;
                    if (*(_QWORD *)(*((_QWORD *)v35 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                    {
                      v36 = *(_DWORD *)(*((_QWORD *)v35 + 30) + 12);
                      v37 = v36 != 32 && (v36 & 0x2A8C20) == 0;
                      v26 = v35;
                      if (!v37)
                      {
                        v44 = *((_DWORD *)v35 + 6);
                        *((_DWORD *)v35 + 6) = v44 + 2;
                        if (v44)
                        {
                          *((_DWORD *)v35 + 6) = v44;
                        }
                        else if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v35, a2);
                        }
                        v45 = *(_DWORD *)(*((_QWORD *)v12 + 30) + 12) != 2048;
                        goto LABEL_119;
                      }
                    }
                  }
                }
              }
              v27 = *(_DWORD *)(*((_QWORD *)v12 + 30) + 12);
              v28 = *(WTF::StringImpl **)v9;
              *(_QWORD *)v9 = 0;
              if (v27 != 2048)
              {
                *(_QWORD *)a3 = v12;
                *(_QWORD *)(a3 + 8) = v28;
                goto LABEL_53;
              }
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = v28;
              *(_QWORD *)(a3 + 16) = 0;
              *(_BYTE *)(a3 + 24) = 1;
LABEL_63:
              if (*((_DWORD *)v12 + 6) != 2)
              {
                *((_DWORD *)v12 + 6) -= 2;
                goto LABEL_55;
              }
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              {
                v52 = v12;
                goto LABEL_136;
              }
              goto LABEL_55;
            }
          }
        }
      }
      if (!*(_QWORD *)v9)
      {
        v4 = 0;
        goto LABEL_52;
      }
      v62 = *(WTF::StringImpl **)v9;
      if ((*(_WORD *)(*(_QWORD *)v9 + 28) & 8) == 0)
      {
        v4 = *(WTF::StringImpl **)v9;
        goto LABEL_52;
      }
      *((_DWORD *)v62 + 6) += 2;
      while (1)
      {
        result = WebCore::FocusController::nextFocusableElement(v10, v62);
        v35 = result;
        if (result)
          *((_DWORD *)result + 6) += 2;
        if (*((_DWORD *)v62 + 6) == 2)
        {
          if ((*((_WORD *)v62 + 15) & 0x400) == 0)
            result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v62, a2);
        }
        else
        {
          *((_DWORD *)v62 + 6) -= 2;
        }
        if (!v35)
        {
          v4 = *(WTF::StringImpl **)v9;
          goto LABEL_52;
        }
        v62 = v35;
        if ((*((_WORD *)v35 + 14) & 0x10) != 0)
        {
          v62 = v35;
          if (*(_QWORD *)(*((_QWORD *)v35 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v63 = *(_DWORD *)(*((_QWORD *)v35 + 30) + 12);
            v64 = v63 != 32 && (v63 & 0x2A8C20) == 0;
            v62 = v35;
            if (!v64)
              break;
          }
        }
      }
      v65 = *((_DWORD *)v35 + 6);
      *((_DWORD *)v35 + 6) = v65 + 2;
      if (v65)
      {
        v45 = 0;
        v12 = 0;
        *((_DWORD *)v35 + 6) = v65;
      }
      else
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, a2);
        v45 = 0;
        v12 = 0;
      }
LABEL_119:
      result = (WTF::StringImpl *)*((_QWORD *)v35 + 30);
      if (*((_DWORD *)result + 3) != 2048)
      {
        v51 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (v45)
        {
          *(_QWORD *)a3 = v12;
          *(_QWORD *)(a3 + 8) = v51;
          v12 = 0;
          goto LABEL_192;
        }
        *(_QWORD *)a3 = 0;
LABEL_191:
        *(_QWORD *)(a3 + 8) = v51;
LABEL_192:
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v35, a2);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
LABEL_194:
        if (v12)
          goto LABEL_63;
        goto LABEL_55;
      }
      v46 = (WTF::StringImpl *)*((_QWORD *)v35 + 27);
      if (v46)
      {
        *(_DWORD *)v46 += 2;
      }
      else
      {
        v47 = *((_QWORD *)v35 + 13);
        if (v47
          && ((v48 = *(_DWORD *)(v47 + 4), (v48 & 1) != 0)
            ? (v49 = *(_QWORD *)(v47 + 40), LODWORD(v50) = *(_DWORD *)(v47 + 52))
            : (v49 = v47 + 32, LODWORD(v50) = v48 >> 5),
              (_DWORD)v50))
        {
          v50 = v50;
          v55 = (_QWORD *)(v49 + 8);
          while (1)
          {
            v56 = *(v55 - 1);
            if (v56 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v56 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v56 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              break;
            }
            v55 += 2;
            if (!--v50)
            {
              v55 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v55 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        if (!*v55)
        {
LABEL_166:
          result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result
                                                                                                + 64))(&v66);
          v46 = v66;
          if (!v66)
          {
            v57 = !v45;
            if (v45)
              v58 = v12;
            else
              v58 = 0;
            if (!v57)
              v12 = 0;
            v51 = *(WTF::StringImpl **)v9;
            *(_QWORD *)v9 = 0;
LABEL_173:
            *(_QWORD *)a3 = v58;
            *(_QWORD *)(a3 + 8) = v51;
            *(_QWORD *)(a3 + 16) = v35;
            *(_BYTE *)(a3 + 24) = 1;
            goto LABEL_194;
          }
          goto LABEL_182;
        }
        result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 296))(&v66);
        v46 = v66;
        if (!v66)
        {
          v66 = 0;
          result = (WTF::StringImpl *)*((_QWORD *)v35 + 30);
          goto LABEL_166;
        }
      }
LABEL_182:
      v60 = *((_DWORD *)v46 + 1);
      v66 = 0;
      v61 = !v45;
      if (v45)
        v58 = v12;
      else
        v58 = 0;
      if (!v61)
        v12 = 0;
      if (*(_DWORD *)v46 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v46 -= 2;
      v51 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      if (!v60)
        goto LABEL_173;
      *(_QWORD *)a3 = v58;
      goto LABEL_191;
    }
LABEL_52:
    *(_QWORD *)v9 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v4;
LABEL_53:
    *(_QWORD *)(a3 + 16) = 0;
LABEL_54:
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_55;
  }
  if ((v11 & 8) == 0)
  {
LABEL_24:
    WebCore::AutofillData::createFromHTMLFormControlElement(*(_QWORD **)v9, (const WebCore::HTMLFormControlElement *)a2, (uint64_t)&v66);
    v68 = 0;
    v15 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::AutofillFieldNameMapping> [59]>::tryGet<WTF::AtomString>((unsigned __int8 ***)&WebCore::fieldNameMap, (uint64_t *)&v66);
    v17 = (unsigned __int8 **)&v68;
    if (v15)
      v17 = v15;
    if (*(_BYTE *)v17 == 8)
    {
      v18 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v18;
      v19 = 1;
    }
    else
    {
      v19 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 24) = v19;
    v24 = v67;
    v67 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    result = v66;
    v66 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_55;
  }
  *((_DWORD *)v4 + 6) += 2;
  while (1)
  {
    result = WebCore::FocusController::nextFocusableElement(v10, v4);
    v20 = result;
    if (result)
      *((_DWORD *)result + 6) += 2;
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v4, a2);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    if (!v20)
      goto LABEL_24;
    v4 = v20;
    if ((*((_WORD *)v20 + 14) & 0x10) != 0)
    {
      v4 = v20;
      if (*(_QWORD *)(*((_QWORD *)v20 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v21 = *((_QWORD *)v20 + 30);
        v22 = *(_DWORD *)(v21 + 12);
        v23 = v22 != 32 && (v22 & 0x2A8C20) == 0;
        v4 = v20;
        if (!v23)
          break;
      }
    }
  }
  v29 = *((_DWORD *)v20 + 6);
  *((_DWORD *)v20 + 6) = v29 + 2;
  if (v29)
  {
    *((_DWORD *)v20 + 6) = v29;
  }
  else if ((*((_WORD *)v20 + 15) & 0x400) == 0)
  {
    result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v20, a2);
    v21 = *((_QWORD *)v20 + 30);
  }
  if (*(_DWORD *)(v21 + 12) != 2048)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, a2);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
    goto LABEL_24;
  }
  if ((*((_WORD *)v20 + 14) & 8) != 0)
  {
    *((_DWORD *)v20 + 6) += 2;
    v32 = v20;
    while (1)
    {
      result = WebCore::FocusController::nextFocusableElement(v10, v32);
      v30 = (WTF::StringImpl **)result;
      if (result)
        *((_DWORD *)result + 6) += 2;
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v32, a2);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
      if (!v30)
        goto LABEL_70;
      v32 = (WebCore::Node *)v30;
      if ((*((_WORD *)v30 + 14) & 0x10) != 0)
      {
        v32 = (WebCore::Node *)v30;
        if (*((_QWORD *)v30[12] + 3) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          result = v30[30];
          v33 = *((_DWORD *)result + 3);
          v34 = v33 != 32 && (v33 & 0x2A8C20) == 0;
          v32 = (WebCore::Node *)v30;
          if (!v34)
            break;
        }
      }
    }
    v38 = *((_DWORD *)v30 + 6);
    *((_DWORD *)v30 + 6) = v38 + 2;
    if (v38)
    {
      *((_DWORD *)v30 + 6) = v38;
    }
    else if ((*((_WORD *)v30 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v30, a2);
      result = v30[30];
    }
    if (*((_DWORD *)result + 3) != 2048)
      goto LABEL_70;
    v39 = v30[27];
    if (v39)
    {
      *(_DWORD *)v39 += 2;
    }
    else
    {
      v40 = v30[13];
      if (v40
        && ((v41 = *((_DWORD *)v40 + 1), (v41 & 1) != 0)
          ? (v42 = *((_QWORD *)v40 + 5), LODWORD(v43) = *((_DWORD *)v40 + 13))
          : (v42 = (uint64_t)v40 + 32, LODWORD(v43) = v41 >> 5),
            (_DWORD)v43))
      {
        v43 = v43;
        v53 = (_QWORD *)(v42 + 8);
        while (1)
        {
          v54 = *(v53 - 1);
          if (v54 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v53 += 2;
          if (!--v43)
          {
            v53 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v53 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v53)
      {
        result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 296))(&v66);
        v39 = v66;
        if (v66)
          goto LABEL_177;
        v66 = 0;
        result = v30[30];
      }
      result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 64))(&v66);
      v39 = v66;
      if (!v66)
      {
        v31 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        goto LABEL_151;
      }
    }
LABEL_177:
    v59 = *((_DWORD *)v39 + 1);
    v66 = 0;
    if (*(_DWORD *)v39 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v39 -= 2;
    v31 = *(WTF::StringImpl **)v9;
    *(_QWORD *)v9 = 0;
    if (v59)
      goto LABEL_71;
LABEL_151:
    *(_QWORD *)a3 = v31;
    *(_QWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 16) = v30;
    goto LABEL_54;
  }
  v30 = 0;
LABEL_70:
  v31 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = 0;
LABEL_71:
  *(_QWORD *)a3 = v31;
  *(_QWORD *)(a3 + 8) = v20;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
      {
        v52 = (WebCore::Node *)v30;
LABEL_136:
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v52, a2);
      }
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
LABEL_55:
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195B68BD0);
  }
  --*(_DWORD *)v10;
  return result;
}

WTF::StringImpl *WebCore::AutofillElements::autofill(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  _BYTE v13[8];
  WTF::StringImpl *v14;
  char v15;

  v5 = *a1;
  if (v5)
  {
    WebCore::HTMLInputElement::setValue(v5, a2, (const WTF::StringImpl *)2, 0, (uint64_t)v13);
    if (v15)
    {
      v7 = v14;
      v14 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v8 = a1[1];
  if (v8)
  {
    WebCore::HTMLInputElement::setValue(v8, a3, (const WTF::StringImpl *)2, 0, (uint64_t)v13);
    if (v15)
    {
      v10 = v14;
      v14 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  result = (WTF::StringImpl *)a1[2];
  if (result)
  {
    result = (WTF::StringImpl *)WebCore::HTMLInputElement::setValue((uint64_t)result, a3, (const WTF::StringImpl *)2, 0, (uint64_t)v13);
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::DictationCommandIOS::doApply(WebCore::DictationCommandIOS *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  const WebCore::VisiblePosition *v20;
  void *v21;
  WebCore::Node *v22;
  WebCore::Node **v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  void *v28;
  WebCore::Node *v29;
  int v30;
  const WebCore::VisiblePosition *v31;
  WebCore::Node *v32;
  void *v33;
  WebCore::Node *v34;
  uint64_t (*v35)();
  WebCore::Node *v36;
  WebCore::Node *v37;
  uint64_t i;
  int v39;
  BOOL v40;
  WebCore::Node *v41;
  void *v42;
  unint64_t v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *result;
  void *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  uint64_t v54;
  uint64_t *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  void *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  int v62;
  unsigned __int8 v63;
  WebCore::Node *v64;
  int v65;
  char v66;
  char v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  WebCore::Node *v71;
  char v72;
  char v73;
  WebCore::Node *v74;
  int v75;
  int v76;
  WebCore::Node *v77;
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 73);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (uint64_t **)*((_QWORD *)this + 35);
    v5 = &v4[2 * v2];
    while (1)
    {
      if (!*((_DWORD *)v4 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195B69864);
      }
      v6 = **v4;
      if (v6)
        v7 = *(unsigned int *)(v6 + 4);
      else
        v7 = 0;
      WebCore::CompositeEditCommand::inputText(this, (WebCore::Node **)*v4, 1);
      v8 = *((unsigned int *)v4 + 3);
      if (v8 >= 2)
      {
        if (v8 >> 29)
        {
          __break(0xC471u);
LABEL_168:
          __break(1u);
LABEL_169:
          JUMPOUT(0x195B69790);
        }
        v9 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * v8));
        v11 = v9;
        v12 = *((unsigned int *)v4 + 3);
        if ((_DWORD)v12)
        {
          v23 = (WebCore::Node **)*v4;
          v24 = 8 * v12;
          v25 = v9;
          do
          {
            v26 = *v23;
            if (*v23)
              *(_DWORD *)v26 += 2;
            *v25++ = v26;
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
        v13 = *v9;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v10);
          else
            *(_DWORD *)v13 -= 2;
        }
        memmove(v11, v11 + 1, 8 * v8 - 8);
        WebCore::VisibleSelection::toNormalizedRange((WebCore::DictationCommandIOS *)((char *)this + 128), &v68);
        if (!v72)
          goto LABEL_168;
        v74 = (WebCore::Node *)v11;
        v75 = v8;
        v76 = v8 - 1;
        v79 = 2;
        v14 = *(_QWORD *)(*((_QWORD *)v68 + 5) + 8);
        *(_DWORD *)(v14 + 24) += 2;
        v15 = *(uint64_t **)(v14 + 1496);
        if (!v15)
          v15 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v14);
        ++*(_DWORD *)v15;
        WebCore::DocumentMarkerController::addMarker(v15, (const WebCore::SimpleRange *)&v68, 2048, (uint64_t)&v74);
        if (!*(_DWORD *)v15)
        {
          __break(0xC471u);
          goto LABEL_169;
        }
        --*(_DWORD *)v15;
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
        if (v79 != -1)
          ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33AE5F8[v79])(&v64, &v74);
        if (v72)
        {
          v17 = v71;
          v71 = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17, v16);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          v18 = v68;
          v68 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v16);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
        }
      }
      if (*((_BYTE *)this + 225) == 2)
        break;
      v19 = *((unsigned __int8 *)this + 224);
      WebCore::VisiblePosition::canonicalPosition((WebCore::DictationCommandIOS *)((char *)this + 208), (uint64_t)&v68);
      LOBYTE(v71) = 1;
      if (!v19)
        goto LABEL_50;
LABEL_29:
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v74, (const WebCore::VisiblePosition *)&v68, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v74);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v74);
      v22 = v68;
      v68 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v21);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      v3 += v7;
      v4 += 2;
      if (v4 == v5)
        goto LABEL_59;
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::DictationCommandIOS *)((char *)this + 208), (uint64_t)&v68);
    LOBYTE(v71) = 1;
LABEL_50:
    v27 = v68;
    if (v68)
    {
      *((_DWORD *)v68 + 6) += 2;
      v74 = v27;
      v75 = v69;
      LOBYTE(v76) = v70;
      LOBYTE(v77) = 0;
      if (!WebCore::inSameLine((WebCore *)&v68, (const WebCore::VisiblePosition *)&v74, v20))
        LOBYTE(v71) = 0;
      v29 = v74;
      v74 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v28);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
    }
    goto LABEL_29;
  }
  v3 = 0;
LABEL_59:
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::DictationCommandIOS *)((char *)this + 208), (uint64_t)&v64);
    v67 = 1;
  }
  else
  {
    v30 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition((WebCore::DictationCommandIOS *)((char *)this + 208), (uint64_t)&v64);
    v67 = 1;
    if (v30)
      goto LABEL_61;
  }
  v58 = v64;
  if (!v64)
    goto LABEL_162;
  *((_DWORD *)v64 + 6) += 2;
  v74 = v58;
  v75 = v65;
  LOBYTE(v76) = v66;
  LOBYTE(v77) = 0;
  if (!WebCore::inSameLine((WebCore *)&v64, (const WebCore::VisiblePosition *)&v74, v31))
    v67 = 0;
  v60 = v74;
  v74 = 0;
  if (v60)
  {
    if (*((_DWORD *)v60 + 6) == 2)
    {
      if ((*((_WORD *)v60 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v60, v59);
    }
    else
    {
      *((_DWORD *)v60 + 6) -= 2;
    }
  }
LABEL_61:
  v32 = v64;
  if (!v64)
  {
LABEL_162:
    v74 = 0;
    v75 = v65;
    LOBYTE(v76) = v66;
    WebCore::makeBoundaryPoint((uint64_t *)&v74, (uint64_t)&v61);
    goto LABEL_64;
  }
  *((_DWORD *)v64 + 6) += 2;
  v74 = v32;
  v75 = v65;
  LOBYTE(v76) = v66;
  WebCore::makeBoundaryPoint((uint64_t *)&v74, (uint64_t)&v61);
  if (*((_DWORD *)v32 + 6) == 2)
  {
    if ((*((_WORD *)v32 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v32, v33);
  }
  else
  {
    *((_DWORD *)v32 + 6) -= 2;
  }
LABEL_64:
  v34 = v64;
  v35 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v64)
    v35 = 0;
  if (!v35 || !v64)
  {
    v39 = v63;
    goto LABEL_99;
  }
  v36 = 0;
  v37 = v64;
  do
  {
    if (!WebCore::Node::hasEditableStyle((uint64_t)v37, 0))
      break;
    if ((*((_WORD *)v37 + 14) & 8) != 0)
      v36 = v37;
    i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 5) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if ((WebCore::Node *)i == v37)
      break;
    v37 = (WebCore::Node *)*((_QWORD *)v37 + 4);
  }
  while (v37);
  v39 = v63;
  if (v63)
    v40 = v36 == 0;
  else
    v40 = 1;
  if (v40)
  {
LABEL_99:
    if (!v39)
      goto LABEL_103;
    goto LABEL_100;
  }
  *((_DWORD *)v36 + 6) += 2;
  v74 = v36;
  v75 = 0;
  v41 = v61;
  v61 = 0;
  v77 = v41;
  v78 = v62;
  v43 = WebCore::characterCount((int *)&v74, 0);
  v44 = v77;
  v77 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v42);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = v74;
  v74 = 0;
  if (v45)
  {
    if (*((_DWORD *)v45 + 6) == 2)
    {
      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v45, v42);
    }
    else
    {
      *((_DWORD *)v45 + 6) -= 2;
    }
  }
  v33 = (void *)(v43 - v3);
  if (v43 >= v3)
  {
    *((_DWORD *)v36 + 6) += 4;
    v46 = *((_WORD *)v36 + 14);
    if ((v46 & 1) != 0)
    {
      v48 = *((_QWORD *)v36 + 10);
      if (v48)
        LODWORD(v48) = *(_DWORD *)(v48 + 4);
    }
    else if ((v46 & 4) != 0 && (v47 = *((_QWORD *)v36 + 10)) != 0)
    {
      LODWORD(v48) = 0;
      do
      {
        LODWORD(v48) = v48 + 1;
        v47 = *(_QWORD *)(v47 + 56);
      }
      while (v47);
    }
    else
    {
      LODWORD(v48) = 0;
    }
    v74 = v36;
    v75 = 0;
    v77 = v36;
    v78 = v48;
    WebCore::resolveCharacterRange(&v74, (unint64_t)v33, v43, 0, &v68);
    v51 = v77;
    v77 = 0;
    if (v51)
    {
      if (*((_DWORD *)v51 + 6) == 2)
      {
        if ((*((_WORD *)v51 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v51, v50);
      }
      else
      {
        *((_DWORD *)v51 + 6) -= 2;
      }
    }
    v52 = v74;
    v74 = 0;
    if (v52)
    {
      if (*((_DWORD *)v52 + 6) == 2)
      {
        if ((*((_WORD *)v52 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v52, v50);
      }
      else
      {
        *((_DWORD *)v52 + 6) -= 2;
      }
    }
    v53 = (WebCore::Node *)*((_QWORD *)this + 37);
    v74 = v53;
    if (v53)
      CFRetain(v53);
    v79 = 3;
    v54 = *(_QWORD *)(*((_QWORD *)v68 + 5) + 8);
    *(_DWORD *)(v54 + 24) += 2;
    v55 = *(uint64_t **)(v54 + 1496);
    if (!v55)
      v55 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v54);
    ++*(_DWORD *)v55;
    WebCore::DocumentMarkerController::addMarker(v55, (const WebCore::SimpleRange *)&v68, 4096, (uint64_t)&v74);
    if (!*(_DWORD *)v55)
    {
      __break(0xC471u);
      JUMPOUT(0x195B69848);
    }
    --*(_DWORD *)v55;
    if (*(_DWORD *)(v54 + 24) == 2)
    {
      if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v54, v33);
    }
    else
    {
      *(_DWORD *)(v54 + 24) -= 2;
    }
    if (v79 != -1)
      ((void (*)(char *, WebCore::Node **))off_1E33AE5F8[v79])(&v73, &v74);
    v56 = v71;
    v71 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56, v33);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
    v57 = v68;
    v68 = 0;
    if (v57)
    {
      if (*((_DWORD *)v57 + 6) == 2)
      {
        if ((*((_WORD *)v57 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v57, v33);
      }
      else
      {
        *((_DWORD *)v57 + 6) -= 2;
      }
    }
  }
LABEL_100:
  if (v61)
  {
    if (*((_DWORD *)v61 + 6) == 2)
    {
      if ((*((_WORD *)v61 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v61, v33);
    }
    else
    {
      *((_DWORD *)v61 + 6) -= 2;
    }
  }
LABEL_103:
  result = (unsigned int *)v64;
  v64 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v33);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void WebCore::StyledMarkupAccumulator::~StyledMarkupAccumulator(WebCore::StyledMarkupAccumulator *this, WTF::StringImpl *a2)
{
  WebCore::StyledMarkupAccumulator::~StyledMarkupAccumulator(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  WebCore::EditingStyle *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = (WebCore::EditingStyle *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::EditingStyle::~EditingStyle(v3, a2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((unsigned int *)this + 43);
  if ((_DWORD)v5)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 20);
    v12 = 8 * v5;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v6 = (WTF *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  WebCore::MarkupAccumulator::~MarkupAccumulator(this, a2);
}

uint64_t WebCore::StyledMarkupAccumulator::appendStartTag(uint64_t a1, uint64_t a2, WebCore::DataDetection *a3)
{
  return WebCore::StyledMarkupAccumulator::appendStartTag(a1, a2, a3, 0, 0);
}

void WebCore::DictationCommandIOS::~DictationCommandIOS(WebCore::DictationCommandIOS *this, WTF::StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 73);
  v5 = (WTF *)*((_QWORD *)this + 35);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v7)
      {
        v9 = *(WTF::StringImpl ***)v5;
        v10 = 8 * v7;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v8 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        WTF::fastFree(v8, a2);
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 35);
  }
  if (v5)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  const void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;

  v3 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 73);
  v5 = (WTF *)*((_QWORD *)this + 35);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v7)
      {
        v9 = *(WTF::StringImpl ***)v5;
        v10 = 8 * v7;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v8 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        WTF::fastFree(v8, a2);
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 35);
  }
  if (v5)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v12, v13);
}

void WebCore::WritingToolsCompositionCommand::~WritingToolsCompositionCommand(WebCore::WritingToolsCompositionCommand *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33AE410;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33AE410;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v5, v6);
}

BOOL WebCore::needInterchangeNewlineAfter(WebCore *this, const WebCore::VisiblePosition *a2)
{
  WebCore::Node *v3;
  void *v4;
  WebCore::Node *v5;
  int v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;
  int v11;
  WebCore::Node *v12;
  uint64_t (*v13)();
  _BOOL8 v14;
  WebCore::Node *v15;
  uint64_t (*v16)();
  WebCore::Node *v17;
  WebCore::Node *v19;
  WebCore::Node *v21;
  int v22;
  char v23;
  WebCore::Node *v24;
  int v25;
  char v26;
  WebCore::Node *v27[3];

  WebCore::VisiblePosition::next((unsigned __int8 *)this, 0, 0, (uint64_t)&v24);
  v3 = v24;
  if (v24)
    *((_DWORD *)v24 + 6) += 2;
  v21 = v3;
  v22 = v25;
  v23 = v26;
  WebCore::Position::upstream((uint64_t)&v21, (WebCore::Node *)1, (uint64_t)v27);
  v5 = v27[0];
  if (v27[0])
  {
    v6 = *((_DWORD *)v27[0] + 6);
    *((_DWORD *)v27[0] + 6) = v6 + 2;
    v27[0] = 0;
    if (v6)
    {
      *((_DWORD *)v5 + 6) = v6;
    }
    else if ((*((_WORD *)v5 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v5, v4);
    }
  }
  else
  {
    v27[0] = 0;
  }
  v7 = v21;
  v21 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v8 = *(WebCore::Node **)this;
  if (*(_QWORD *)this)
    *((_DWORD *)v8 + 6) += 2;
  v21 = v8;
  v22 = *((_DWORD *)this + 2);
  v23 = *((_BYTE *)this + 12);
  WebCore::Position::downstream((uint64_t)&v21, (WebCore::Node *)1, (uint64_t)v27);
  v10 = v27[0];
  if (v27[0])
  {
    v11 = *((_DWORD *)v27[0] + 6);
    *((_DWORD *)v27[0] + 6) = v11 + 2;
    v27[0] = 0;
    if (v11)
    {
      *((_DWORD *)v10 + 6) = v11;
    }
    else if ((*((_WORD *)v10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v10, v9);
    }
  }
  else
  {
    v27[0] = 0;
  }
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v9);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (*(_QWORD *)this)
    v13 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_41;
  WebCore::endOfParagraph(this, 1, v27);
  v14 = WebCore::operator==((uint64_t *)this, (uint64_t *)v27);
  v15 = v27[0];
  v27[0] = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v9);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  if (v14)
  {
    if (v24)
      v16 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v16 = 0;
    if (v16)
    {
      WebCore::startOfParagraph((uint64_t)&v24, 1, v27);
      v14 = WebCore::operator==((uint64_t *)&v24, (uint64_t *)v27);
      v17 = v27[0];
      v27[0] = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v9);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      if (v14)
      {
        v14 = 1;
        if (v5)
        {
          if ((*((_WORD *)v5 + 14) & 0x10) != 0)
            v14 = v5 != v10 || *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
        }
      }
      goto LABEL_42;
    }
LABEL_41:
    v14 = 0;
  }
LABEL_42:
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v9);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v9);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  return v14;
}

BOOL WebCore::isElementPresentational(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v2;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  return v2 == *(_QWORD *)(WebCore::HTMLNames::uTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::sTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::strikeTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::iTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::emTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::bTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::strongTag + 24);
}

unsigned int *WTF::VectorDestructor<true,WebCore::AttributeChange>::destruct(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  void *v7;

  if (result != (unsigned int *)a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = (WTF::StringImpl **)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      result = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v3 += 6;
    }
    while (v3 != (unsigned int *)a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::AttributeChange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int **v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int **v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF::StringImpl *)&v5[6 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195B6A2C0);
      }
      v17 = (WTF::StringImpl *)&v5[6 * *(unsigned int *)(a1 + 12)];
      v18 = 24 * v16;
      v19 = (unsigned int **)WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::AttributeChange>::move(v5, v17, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195B6A2C8);
      }
      v10 = 24 * v9;
      v11 = (unsigned int **)WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::AttributeChange>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,WebCore::AttributeChange>::move(unsigned int *result, WTF::StringImpl *a2, unsigned int **a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF *v11;
  void *v12;

  if (result != (unsigned int *)a2)
  {
    v5 = (unsigned int **)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[2];
      v5[2] = 0;
      a3[2] = v8;
      v9 = (WTF::StringImpl *)v5[2];
      v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl **)v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != (unsigned int **)a2);
  }
  return result;
}

WebCore::AsyncFileStream *WebCore::AsyncFileStream::AsyncFileStream(WebCore::AsyncFileStream *this, WebCore::FileStreamClient *a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)this = v4;
  return this;
}

{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)this = v4;
  return this;
}

void WebCore::AsyncFileStream::~AsyncFileStream(WTF::FileSystemImpl **this)
{
  WTF::FileSystemImpl *v2;
  _QWORD *v3;
  int *v4;
  WTF::FileSystemImpl *v5;
  _QWORD *v6;

  atomic_store(1u, (unsigned __int8 *)*this + 32);
  v2 = *this;
  *this = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E33AEAB8;
  v3[1] = v2;
  v6 = v3;
  WebCore::callOnFileThread((uint64_t *)&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v5 = *this;
  *this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 != -1)
    {
      WTF::FileSystemImpl::closeFile(v5, v4);
      *(_DWORD *)v5 = -1;
    }
    WTF::fastFree(v5, v4);
  }
}

{
  WTF::FileSystemImpl *v2;
  _QWORD *v3;
  int *v4;
  WTF::FileSystemImpl *v5;
  _QWORD *v6;

  atomic_store(1u, (unsigned __int8 *)*this + 32);
  v2 = *this;
  *this = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E33AEAB8;
  v3[1] = v2;
  v6 = v3;
  WebCore::callOnFileThread((uint64_t *)&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v5 = *this;
  *this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 != -1)
    {
      WTF::FileSystemImpl::closeFile(v5, v4);
      *(_DWORD *)v5 = -1;
    }
    WTF::fastFree(v5, v4);
  }
}

unsigned __int8 *WebCore::callOnFileThread(uint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *result;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  _QWORD v10[2];
  char v11;
  _QWORD v12[3];

  if ((byte_1ECE83309 & 1) == 0)
  {
    unk_1ECE83330 = 0;
    *(_OWORD *)&qword_1ECE83338 = 0u;
    *(_OWORD *)&qword_1ECE83348 = 0u;
    byte_1ECE83358 = 0;
    byte_1ECE83309 = 1;
  }
  v2 = atomic_load(&qword_1ECE83310);
  if (v2 != -1)
  {
    v12[0] = &v11;
    v10[0] = v12;
    std::__call_once(&qword_1ECE83310, v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::callOnFileThread(WTF::Function<void ()(void)> &&)::$_0 &&>>);
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v4 = *a1;
  *a1 = 0;
  *v3 = v4;
  LODWORD(v4) = __ldaxr((unsigned __int8 *)&unk_1ECE83330);
  if ((_DWORD)v4)
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C](&unk_1ECE83330);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)&unk_1ECE83330))
    goto LABEL_7;
LABEL_8:
  v5 = qword_1ECE83340;
  if (qword_1ECE83338)
  {
    if (qword_1ECE83340 + 1 != qword_1ECE83338)
      goto LABEL_10;
  }
  else if (qword_1ECE83340)
  {
    if (qword_1ECE83340 != dword_1ECE83350 - 1)
      goto LABEL_10;
  }
  else if (dword_1ECE83350)
  {
    v5 = 0;
    goto LABEL_10;
  }
  WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::expandCapacity(&qword_1ECE83338);
  v5 = qword_1ECE83340;
LABEL_10:
  result = byte_1ECE83331;
  *(_QWORD *)(qword_1ECE83348 + 8 * v5) = v3;
  if (v5 == dword_1ECE83350 - 1)
    v7 = 0;
  else
    v7 = v5 + 1;
  qword_1ECE83340 = v7;
  v8 = atomic_load(byte_1ECE83331);
  if ((v8 & 1) != 0)
  {
    v11 = 0;
    v10[0] = byte_1ECE83331;
    v10[1] = &v11;
    v12[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v12[1] = v12;
    v12[2] = v10;
    result = (unsigned __int8 *)WTF::ParkingLot::unparkOneImpl();
  }
  v9 = __ldxr((unsigned __int8 *)&unk_1ECE83330);
  if (v9 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE83330);
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1ECE83330))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE83330);
  return result;
}

uint64_t WebCore::AsyncFileStream::perform(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E33AEB08;
  v4[1] = v2;
  v4[2] = v3;
  v6 = v4;
  WebCore::callOnFileThread((uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebCore::AsyncFileStream::getSize(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v11;
  __int128 v12;
  _QWORD *v13;

  WTF::String::isolatedCopy();
  *(_QWORD *)&v12 = a3;
  BYTE8(v12) = a4;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E33AEB58;
  *(_QWORD *)(v7 + 8) = v11;
  *(_OWORD *)(v7 + 16) = v12;
  v8 = *a1;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E33AEB08;
  v9[1] = v8;
  v9[2] = v7;
  v13 = v9;
  WebCore::callOnFileThread((uint64_t *)&v13);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 0;
}

uint64_t WebCore::AsyncFileStream::openForRead(WebCore::AsyncFileStream *this, const WTF::String *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v11;
  __int128 v12;
  _QWORD *v13;

  WTF::String::isolatedCopy();
  *(_QWORD *)&v12 = a3;
  *((_QWORD *)&v12 + 1) = a4;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E33AEBA8;
  *(_QWORD *)(v7 + 8) = v11;
  *(_OWORD *)(v7 + 16) = v12;
  v8 = *(_QWORD *)this;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E33AEB08;
  v9[1] = v8;
  v9[2] = v7;
  v13 = v9;
  WebCore::callOnFileThread((uint64_t *)&v13);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 0;
}

_QWORD *WebCore::AsyncFileStream::close(WebCore::AsyncFileStream *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v1 = *(_QWORD *)this;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AEBF8;
  v2[1] = v1;
  v4 = v2;
  WebCore::callOnFileThread((uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebCore::AsyncFileStream::read(WebCore::AsyncFileStream *this, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  _QWORD *v10;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E33AEC20;
  *(_QWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = a3;
  v7 = *(_QWORD *)this;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E33AEB08;
  v8[1] = v7;
  v8[2] = v6;
  v10 = v8;
  WebCore::callOnFileThread((uint64_t *)&v10);
  result = v10;
  if (v10)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

void *WebCore::Blob::bisoHeap(WebCore::Blob *this)
{
  return &WebCore::Blob::bisoHeap(void)::heap;
}

uint64_t WebCore::Blob::operator new(uint64_t this)
{
  if (this == 128)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::BlobURLRegistry::registerURL(WebCore::BlobURLRegistry *this, const WebCore::ScriptExecutionContext *a2, const WTF::URL *a3, WebCore::URLRegistrable *a4)
{
  unsigned __int8 *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  int v31;
  BOOL v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  WTF::StringImpl *v64[3];
  __int16 v65;
  _DWORD *v66;
  _DWORD *v67;
  __int16 v68;
  _DWORD *v69;
  _DWORD *v70;
  char v71;
  char v72;
  _QWORD v73[3];
  int v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEA534C]((char *)this + 8);
LABEL_4:
  v11 = *((_QWORD *)a2 + 28);
  v10 = *((_QWORD *)a2 + 29);
  v12 = *((_QWORD *)a2 + 30);
  v15 = *((_QWORD *)this + 2);
  v14 = (uint64_t *)((char *)this + 16);
  v13 = v15;
  v73[0] = 0;
  if (v15
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(v14, 0), (v13 = *v14) != 0))
  {
    v16 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (v10 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v10 - 1640531527) << 16) ^ ((unsigned __int16)v10
                                                                                             - 1640531527);
  v18 = (v10 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v10) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v10) + (v17 >> 11));
  v19 = (v11 >> 5) & 0x7FFF800 ^ ((v18 + (unsigned __int16)v11 + (v18 >> 11)) << 16) ^ (v18 + (unsigned __int16)v11 + (v18 >> 11));
  v20 = (v11 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v11) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v11) + (v19 >> 11));
  v21 = (v20 + (v20 >> 11)) ^ (8 * (v20 + (v20 >> 11)));
  v22 = (v21 + (v21 >> 5)) ^ (4 * (v21 + (v21 >> 5)));
  v23 = (v22 + (v22 >> 15)) ^ ((v22 + (v22 >> 15)) << 10);
  if (!v23)
    v23 = 0x800000;
  v24 = v16 & v23;
  v25 = v13 + 48 * (v16 & v23);
  v27 = *(_QWORD *)v25;
  v26 = *(_QWORD *)(v25 + 8);
  v28 = *(_QWORD *)(v25 + 16);
  if (*(_OWORD *)v25 == 0 && v28 == 0)
  {
LABEL_64:
    *(_QWORD *)v25 = v11;
    *(_QWORD *)(v25 + 8) = v10;
    *(_QWORD *)(v25 + 16) = v12;
    WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::operator=((WTF::StringImpl ***)(v25 + 32), (WTF::StringImpl *)v73);
    v52 = *v14;
    if (*v14)
      v53 = *(_DWORD *)(v52 - 12) + 1;
    else
      v53 = 1;
    *(_DWORD *)(v52 - 12) = v53;
    v54 = *v14;
    if (*v14)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        goto LABEL_21;
    }
    else if (3 * v57 > 4 * v56)
    {
      goto LABEL_21;
    }
    v25 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(v14, (unint64_t *)v25);
    goto LABEL_21;
  }
  v30 = 0;
  v31 = 1;
  while (1)
  {
    v32 = v26 == v10 && v27 == v11;
    if (v32 && v28 == v12)
      break;
    if (v28 == -1)
      v30 = (_QWORD *)v25;
    v24 = (v24 + v31) & v16;
    v25 = v13 + 48 * v24;
    v27 = *(_QWORD *)v25;
    v26 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    ++v31;
    if (*(_OWORD *)v25 == 0 && v28 == 0)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        v30[2] = 0;
        v30[4] = 0;
        --*(_DWORD *)(*v14 - 16);
        v25 = (uint64_t)v30;
      }
      goto LABEL_64;
    }
  }
LABEL_21:
  WTF::URL::isolatedCopy();
  WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add((uint64_t *)(v25 + 32), v64, (uint64_t)&v61);
  v35 = v64[0];
  v64[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v73[0];
  if (v73[0])
  {
    v58 = *(unsigned int *)(v73[0] - 4);
    if ((_DWORD)v58)
    {
      v59 = (WTF::StringImpl **)v73[0];
      do
      {
        v60 = *v59;
        if (*v59 != (WTF::StringImpl *)-1)
        {
          *v59 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v34);
            else
              *(_DWORD *)v60 -= 2;
          }
        }
        v59 += 5;
        --v58;
      }
      while (v58);
    }
    WTF::fastFree((WTF *)(v36 - 16), v34);
  }
  v37 = __ldxr(v8);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v8))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  WebCore::SecurityContext::securityOrigin(a2, v34);
  v39 = v38;
  WebCore::ContentSecurityPolicy::responseHeaders(*((_QWORD *)a2 + 2), v40, (uint64_t)v64);
  v65 = *((_WORD *)a2 + 12);
  v41 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v41)
    *v41 += 2;
  v66 = v41;
  v42 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v42)
    *v42 += 2;
  v67 = v42;
  v43 = (**(uint64_t (***)(const WebCore::ScriptExecutionContext *))a2)(a2);
  v68 = *(_WORD *)v43;
  v44 = *(_DWORD **)(v43 + 8);
  if (v44)
    *v44 += 2;
  v69 = v44;
  v45 = *(_DWORD **)(v43 + 16);
  if (v45)
    *v45 += 2;
  v70 = v45;
  v71 = (*(uint64_t (**)(const WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 8))(a2);
  v46 = (WTF::StringImpl *)*((_QWORD *)a4 + 10);
  if (v46)
    *(_DWORD *)v46 += 2;
  v61 = v46;
  v62 = *(_OWORD *)((char *)a4 + 88);
  v63 = *(_OWORD *)((char *)a4 + 104);
  v47 = (*(uint64_t (**)(const WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  LOBYTE(v73[0]) = 0;
  v74 = -1;
  v48 = *(unsigned int *)(v47 + 32);
  if ((_DWORD)v48 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E33AE930[v48])(&v72, v73, v47 + 8);
    v74 = v48;
  }
  v75 = 1;
  WebCore::ThreadableBlobRegistry::registerBlobURL(v39, (unint64_t *)v64, a3, (uint64_t)&v61, (uint64_t)v73);
  if (v75 && v74 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v74])(&v72, v73);
  v50 = v61;
  v61 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)v64, v49);
}

uint64_t WebCore::BlobURLRegistry::unregisterURL(uint64_t this, WTF::StringImpl **a2, const WebCore::SecurityOriginData *a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  WTF **v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  WTF **v28;
  unint64_t *v29;
  unint64_t v30;
  int v32;
  const WTF::StringImpl *v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned __int8 *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  WTF::Lock *v45;
  unint64_t *v46;
  char v48;
  WTF::StringImpl *v49[3];
  int v50;
  char v51;
  uint64_t v52;

  v4 = this;
  v52 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)(this + 8);
  if (__ldaxr((unsigned __int8 *)(this + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 8);
LABEL_5:
  v9 = *(_QWORD **)(v4 + 16);
  v8 = (uint64_t *)(v4 + 16);
  v7 = v9;
  v45 = (WTF::Lock *)v5;
  if (!v9)
  {
    v12 = 0;
    LODWORD(v10) = 0;
LABEL_18:
    v11 = &v7[6 * v10];
    goto LABEL_19;
  }
  v10 = *((unsigned int *)v7 - 1);
  v11 = &v7[6 * v10];
  if (!*((_DWORD *)v7 - 3))
  {
    v12 = &v7[6 * v10];
    goto LABEL_18;
  }
  v12 = v7;
  if ((_DWORD)v10)
  {
    v13 = 48 * v10;
    v12 = v7;
    while (1)
    {
      v14 = v12[2];
      if (*v12 | v12[1] | v14 && v14 != -1)
        break;
      v12 += 6;
      v13 -= 48;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_19:
  if (v7)
    v16 = &v7[6 * *((unsigned int *)v7 - 1)];
  else
    v16 = 0;
  if (v16 == v12)
  {
    v35 = 1;
LABEL_72:
    v40 = (unsigned __int8 *)v45;
    goto LABEL_73;
  }
  v44 = v8;
  v46 = v16;
  while (1)
  {
    v18 = (uint64_t *)(v12 + 4);
    v17 = v12[4];
    if (!v17)
      goto LABEL_31;
    v19 = *(_DWORD *)(v17 - 8);
    v20 = *((_DWORD *)*a2 + 4);
    if (v20 < 0x100)
      v21 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v21 = v20 >> 8;
    v22 = v21 & v19;
    v23 = (WTF **)(v17 + 40 * (v21 & v19));
    this = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v23);
    if ((this & 1) != 0)
    {
LABEL_28:
      v26 = *v18;
      v16 = v46;
      if (!*v18)
        goto LABEL_31;
      v27 = *(_DWORD *)(v26 - 4);
      v23 = (WTF **)(v26 + 40 * v27);
      goto LABEL_30;
    }
    v32 = 1;
    while (1)
    {
      if (*v23 != (WTF *)-1)
      {
        this = WTF::equal(*v23, *a2, v25);
        if ((this & 1) != 0)
          break;
      }
      v22 = (v22 + v32) & v19;
      v23 = (WTF **)(v17 + 40 * v22);
      v49[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v49);
      v34 = WTF::equal(*v23, v49[0], v33);
      this = (uint64_t)v49[0];
      v49[0] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v24);
        else
          *(_DWORD *)this -= 2;
      }
      ++v32;
      if (v34)
        goto LABEL_28;
    }
    v26 = *v18;
    if (!*v18)
      break;
    v27 = *(_DWORD *)(v26 - 4);
    v16 = v46;
LABEL_30:
    v28 = (WTF **)(v26 + 40 * v27);
    if (v28 != v23)
      goto LABEL_56;
LABEL_31:
    v29 = v12 + 6;
    v12 = v11;
    if (v29 != v11)
    {
      v12 = v29;
      while (1)
      {
        v30 = v12[2];
        if (*v12 | v12[1] | v30 && v30 != -1)
          break;
        v12 += 6;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
    if (v12 == v16)
    {
      v35 = 1;
      goto LABEL_72;
    }
  }
  v28 = 0;
LABEL_56:
  if (v28 == v23)
  {
LABEL_69:
    if (v26)
      goto LABEL_70;
    goto LABEL_85;
  }
  this = (uint64_t)*v23;
  *v23 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v24);
    else
      *(_DWORD *)this -= 2;
  }
  *v23 = (WTF *)-1;
  ++*(_DWORD *)(*v18 - 16);
  v36 = *v18;
  if (*v18)
    v37 = *(_DWORD *)(v36 - 12) - 1;
  else
    v37 = -1;
  *(_DWORD *)(v36 - 12) = v37;
  v26 = *v18;
  if (!*v18)
    goto LABEL_85;
  v38 = *(_DWORD *)(v26 - 4);
  if (6 * *(_DWORD *)(v26 - 12) < v38 && v38 >= 9)
  {
    this = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::rehash((uint64_t *)v12 + 4, v38 >> 1, 0);
    v26 = *v18;
    goto LABEL_69;
  }
LABEL_70:
  if (*(_DWORD *)(v26 - 12))
    goto LABEL_71;
LABEL_85:
  v43 = *v44;
  if (!*v44)
  {
LABEL_71:
    v35 = 0;
    goto LABEL_72;
  }
  this = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(*v44, *v12, v12[1], v12[2]);
  v35 = 0;
  if (!this)
    goto LABEL_72;
  v40 = (unsigned __int8 *)v45;
  if (this != v43 + 48 * *(unsigned int *)(v43 - 4))
  {
    this = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove((uint64_t)v44, (WTF::StringImpl *)this);
    v35 = 0;
  }
LABEL_73:
  v41 = __ldxr(v40);
  if (v41 != 1)
  {
    __clrex();
LABEL_78:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if ((v35 & 1) == 0)
      goto LABEL_79;
    return this;
  }
  if (__stlxr(0, v40))
    goto LABEL_78;
  if ((v35 & 1) != 0)
    return this;
LABEL_79:
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v42 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v42 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E33AE930[v42])(&v48, v49, a3);
    v50 = v42;
  }
  v51 = 1;
  this = (uint64_t)WebCore::ThreadableBlobRegistry::unregisterBlobURL((uint64_t)a2, (uint64_t)v49);
  if (v51)
  {
    if (v50 != -1)
      return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v50])(&v48, v49);
  }
  return this;
}

uint64_t WebCore::BlobURLRegistry::unregisterURLsForContext(uint64_t this, const WebCore::ScriptExecutionContext *a2)
{
  const WebCore::ScriptExecutionContext *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF **v13;
  WTF **v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF **v19;
  const WTF::StringImpl *v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27[3];
  int v28;
  char v29;
  uint64_t v30;

  v2 = a2;
  v3 = this;
  v30 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(this + 8);
  if (__ldaxr((unsigned __int8 *)(this + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 8);
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v6 = (uint64_t *)(v3 + 16);
  v7 = v8;
  if (v8)
  {
    this = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v7, *((_QWORD *)v2 + 28), *((_QWORD *)v2 + 29), *((_QWORD *)v2 + 30));
    v9 = 0;
    if (this)
    {
      a2 = (const WebCore::ScriptExecutionContext *)this;
      if (this != v7 + 48 * *(unsigned int *)(v7 - 4))
      {
        v9 = *(WTF ***)(this + 32);
        *(_QWORD *)(this + 32) = 0;
        v10 = *v6;
        if (!*v6 || (v10 += 48 * *(unsigned int *)(v10 - 4), v10 != this))
        {
          if (v10 != this)
            this = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove((uint64_t)v6, (WTF::StringImpl *)this);
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v4))
LABEL_17:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v9)
  {
    v14 = 0;
    LODWORD(v12) = 0;
    goto LABEL_27;
  }
  v12 = *((unsigned int *)v9 - 1);
  v13 = &v9[5 * v12];
  if (!*((_DWORD *)v9 - 3))
  {
    v14 = &v9[5 * v12];
LABEL_27:
    v13 = &v9[5 * v12];
    goto LABEL_28;
  }
  v14 = v9;
  if ((_DWORD)v12)
  {
    v15 = 40 * v12;
    v14 = v9;
    while (1)
    {
      this = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v14);
      if ((this & 1) == 0 && *v14 != (WTF *)-1)
        break;
      v14 += 5;
      v15 -= 40;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_28:
  if (v9)
    v16 = &v9[5 * *((unsigned int *)v9 - 1)];
  else
    v16 = 0;
  while (v14 != v16)
  {
    v17 = (*(uint64_t (**)(const WebCore::ScriptExecutionContext *, const WebCore::ScriptExecutionContext *))(*(_QWORD *)v2 + 256))(v2, a2);
    LOBYTE(v27[0]) = 0;
    v28 = -1;
    v18 = *(unsigned int *)(v17 + 32);
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **, uint64_t))off_1E33AE930[v18])(&v26, v27, v17 + 8);
      v28 = v18;
    }
    v29 = 1;
    this = (uint64_t)WebCore::ThreadableBlobRegistry::unregisterBlobURL((uint64_t)v14, (uint64_t)v27);
    if (v29 && v28 != -1)
      this = ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v28])(&v26, v27);
    v19 = v14 + 5;
    v14 = v13;
    if (v19 != v13)
    {
      v14 = v19;
      while (1)
      {
        v27[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v27);
        v21 = WTF::equal(*v14, v27[0], v20);
        this = (uint64_t)v27[0];
        v27[0] = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v22 = *v14 == (WTF *)-1 ? 1 : v21;
        if (v22 != 1)
          break;
        v14 += 5;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  if (v9)
  {
    v23 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v23)
    {
      v24 = v9;
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, a2);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        v24 += 5;
        --v23;
      }
      while (v23);
    }
    return WTF::fastFree((WTF *)(v9 - 2), a2);
  }
  return this;
}

WTF::StringImpl ***WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::operator=(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v3 = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v6 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v6)
    {
      v7 = v4;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 5;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  return a1;
}

WebCore::Blob *WebCore::Blob::Blob(WebCore::Blob *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ScriptExecutionContext *v2;
  WTF::StringImpl *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v2 = a2;
  *(_QWORD *)this = off_1E33AE950;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  v4 = (WebCore::Blob *)((char *)this + 24);
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v5 = (char *)a2 - 192;
    v6 = *((_QWORD *)a2 + 64);
    if (v6)
    {
      v7 = *(char **)(v6 + 8);
      if (v7)
        v5 = v7;
    }
    v2 = (WebCore::ScriptExecutionContext *)(v5 + 192);
  }
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::Blob *)((char *)this + 24), v2);
  *((_QWORD *)this + 3) = &off_1E33A0540;
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (*((_BYTE *)v2 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6B914);
    }
    v16 = v4;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 16, (uint64_t *)&v16, (uint64_t)&v14);
  }
  *(_QWORD *)this = off_1E33AE640;
  *((_QWORD *)this + 3) = &unk_1E33AE680;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 9) = 0;
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, (uint64_t)this + 80);
  *((_QWORD *)this + 15) = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  WebCore::ThreadableBlobRegistry::registerInternalBlobURL((WebCore::Blob *)((char *)this + 80), (uint64_t)&v14, (uint64_t)&v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)v14;
  if (HIDWORD(v15))
  {
    v11 = 48 * HIDWORD(v15);
    do
    {
      v12 = v10[10];
      if ((_DWORD)v12 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33AE9A8[v12])(&v16, v10);
      v10[10] = -1;
      v10 += 12;
      v11 -= 48;
    }
    while (v11);
    v10 = (unsigned int *)v14;
  }
  if (v10)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree((WTF *)v10, v8);
  }
  return this;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      v6 = v4[10];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AE9A8[v6])(&v8, v4);
      v4[10] = -1;
      v4 += 12;
      v5 -= 48;
    }
    while (v5);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebCore::Blob::Blob(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, int *a4)
{
  void *v7;
  _BYTE v9[16];

  *(_QWORD *)a1 = off_1E33AE950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  WebCore::ActiveDOMObject::ActiveDOMObject((WebCore::ActiveDOMObject *)(a1 + 24), a2);
  *(_QWORD *)a1 = off_1E33AE640;
  *(_QWORD *)(a1 + 24) = &unk_1E33AE680;
  WebCore::Blob::normalizedContentType((WTF::String *)a4, (_QWORD *)(a1 + 48));
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = WebCore::computeMemoryCost(*(_QWORD *)a3, *(_DWORD *)(a3 + 12));
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, a1 + 80);
  *(_QWORD *)(a1 + 120) = 0;
  WebCore::buildBlobData((WebCore::BlobBuilder *)v9, *(_QWORD *)a3, *(_DWORD *)(a3 + 12), a4[2]);
  WebCore::ThreadableBlobRegistry::registerInternalBlobURL((WTF *)(a1 + 80), (uint64_t)v9, a1 + 48);
  WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
  return a1;
}

WTF::String *WebCore::Blob::normalizedContentType@<X0>(WTF::String *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  _DWORD *v11;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return (WTF::String *)WTF::String::convertToASCIILowercase(this);
  v4 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v4)
    return (WTF::String *)WTF::String::convertToASCIILowercase(this);
  v5 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*v5 - 127 >= 0xFFFFFFA1)
    {
      v6 = 0;
      v7 = v5 + 1;
      while (v4 - 1 != v6)
      {
        v8 = v7[v6++] - 127;
        if (v8 < 0xFFFFFFA1)
          goto LABEL_13;
      }
      return (WTF::String *)WTF::String::convertToASCIILowercase(this);
    }
  }
  else if (*(unsigned __int16 *)v5 - 127 >= 0xFFFFFFA1)
  {
    v6 = 0;
    v9 = v5 + 2;
    while (v4 - 1 != v6)
    {
      v10 = *(unsigned __int16 *)&v9[2 * v6++] - 127;
      if (v10 < 0xFFFFFFA1)
      {
LABEL_13:
        if (v6 >= v4)
          return (WTF::String *)WTF::String::convertToASCIILowercase(this);
        goto LABEL_14;
      }
    }
    return (WTF::String *)WTF::String::convertToASCIILowercase(this);
  }
LABEL_14:
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v11 += 2;
  *a2 = v11;
  return this;
}

uint64_t WebCore::computeMemoryCost(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  v5 = 0;
  if (a2)
  {
    v4 = 16 * a2;
    do
    {
      WTF::switchOn<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>(a1, (uint64_t)&v5, (uint64_t)&v5, (uint64_t)&v5, (uint64_t)&v5);
      a1 += 16;
      v4 -= 16;
    }
    while (v4);
    return v5;
  }
  return result;
}

void WebCore::buildBlobData(WebCore::BlobBuilder *this, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v6;
  void *v7;
  int v8;
  __int128 v9;
  __int128 v10;

  v8 = a4;
  v9 = 0u;
  v10 = 0u;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      WTF::switchOn<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &,WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>(a2, (uint64_t)&v8);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  WebCore::BlobBuilder::finalize(this, (uint64_t)&v8);
  WebCore::BlobBuilder::~BlobBuilder((WebCore::BlobBuilder *)&v8, v7);
}

uint64_t WebCore::Blob::Blob(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, _QWORD *a4)
{
  WebCore::ScriptExecutionContext *v6;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  WTF *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v6 = a2;
  *(_QWORD *)a1 = off_1E33AE950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  v8 = a1 + 24;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v19 = (char *)a2 - 192;
    v20 = *((_QWORD *)a2 + 64);
    if (v20)
    {
      v21 = *(char **)(v20 + 8);
      if (v21)
        v19 = v21;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v19 + 192);
  }
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), v6);
  *(_QWORD *)(a1 + 24) = &off_1E33A0540;
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
  {
    if (*((_BYTE *)v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6BE6CLL);
    }
    v25 = v8;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, &v25, (uint64_t)&v22);
  }
  *(_QWORD *)a1 = off_1E33AE640;
  *(_QWORD *)(a1 + 24) = &unk_1E33AE680;
  v9 = (_DWORD *)*a4;
  if (*a4)
    *v9 += 2;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = *(unsigned int *)(a3 + 12);
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = *(unsigned int *)(a3 + 12);
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, a1 + 80);
  *(_QWORD *)(a1 + 120) = 0;
  v10 = *(void **)a3;
  v11 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v23 = 1;
  v22 = (WTF *)v12;
  *(_DWORD *)(v12 + 40) = -1;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 12) = v11;
  if ((_DWORD)v11)
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v13;
    memcpy(v13, v10, v11);
  }
  *(_DWORD *)(v12 + 40) = 0;
  v24 = 1;
  WebCore::ThreadableBlobRegistry::registerInternalBlobURL((WTF *)(a1 + 80), (uint64_t)&v22, (uint64_t)a4);
  v15 = (unsigned int *)v22;
  if (v24)
  {
    v16 = 48 * v24;
    do
    {
      v17 = v15[10];
      if ((_DWORD)v17 != -1)
        ((void (*)(uint64_t *, unsigned int *))off_1E33AE9A8[v17])(&v25, v15);
      v15[10] = -1;
      v15 += 12;
      v16 -= 48;
    }
    while (v16);
    v15 = (unsigned int *)v22;
  }
  if (v15)
  {
    v22 = 0;
    v23 = 0;
    WTF::fastFree((WTF *)v15, v14);
  }
  if (v10)
    WTF::fastFree((WTF *)v10, v14);
  return a1;
}

uint64_t WebCore::Blob::Blob(uint64_t a1, int a2, WebCore::ScriptExecutionContext *a3, uint64_t a4)
{
  WebCore::ScriptExecutionContext *v5;
  WTF *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  const WTF::URL *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  char v32;

  v5 = a3;
  *(_QWORD *)a1 = off_1E33AE950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  v7 = (WTF *)(a1 + 24);
  if (a3 && !*((_BYTE *)a3 + 274))
  {
    v8 = (char *)a3 - 192;
    v9 = *((_QWORD *)a3 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v5 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), v5);
  *(_QWORD *)(a1 + 24) = &off_1E33A0540;
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    if (*((_BYTE *)v5 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6C104);
    }
    v29 = v7;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v5 + 16, (uint64_t *)&v29, (uint64_t)&v27);
  }
  *(_QWORD *)a1 = off_1E33AE640;
  *(_QWORD *)(a1 + 24) = &unk_1E33AE680;
  v12 = *(_DWORD **)(a4 + 48);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a1 + 48) = v12;
  if (*(_BYTE *)(a4 + 64))
  {
    v13 = *(_QWORD *)(a4 + 56);
  }
  else
  {
    v14 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(a4 + 80), v11);
    v13 = v14 & ~(v14 >> 63);
    *(_QWORD *)(a4 + 56) = v13;
    *(_BYTE *)(a4 + 64) = 1;
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a4 + 72);
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, a1 + 80);
  *(_QWORD *)(a1 + 120) = 0;
  v15 = *(WTF::StringImpl **)(a4 + 80);
  if (v15)
  {
    v16 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    v17 = *(_OWORD *)(a4 + 104);
    v27 = *(_OWORD *)(a4 + 88);
    v28 = v17;
    *(_DWORD *)v15 = v16 + 4;
  }
  else
  {
    v26 = *(_OWORD *)(a4 + 104);
    v27 = *(_OWORD *)(a4 + 88);
    v28 = v26;
  }
  v18 = WTF::fastMalloc((WTF *)0x30);
  v30 = 1;
  v29 = (WTF *)v18;
  *(_BYTE *)v18 = 0;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)v18 = v15;
  *(_OWORD *)(v18 + 8) = v27;
  *(_OWORD *)(v18 + 24) = v28;
  *(_DWORD *)(v18 + 40) = 1;
  v31 = 1;
  WebCore::ThreadableBlobRegistry::registerInternalBlobURL((WTF *)(a1 + 80), (uint64_t)&v29, a1 + 48);
  v20 = (unsigned int *)v29;
  if (v31)
  {
    v21 = 48 * v31;
    do
    {
      v22 = v20[10];
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AE9A8[v22])(&v32, v20);
      v20[10] = -1;
      v20 += 12;
      v21 -= 48;
    }
    while (v21);
    v20 = (unsigned int *)v29;
  }
  if (v20)
  {
    v29 = 0;
    v30 = 0;
    WTF::fastFree((WTF *)v20, v19);
  }
  if (v15)
  {
    v23 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v19);
      v23 = *(_DWORD *)v15;
    }
    else
    {
      *(_DWORD *)v15 = v23;
    }
    v24 = v23 - 2;
    if (v24)
      *(_DWORD *)v15 = v24;
    else
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v19);
  }
  return a1;
}

uint64_t WebCore::Blob::size(WebCore::Blob *this, const WTF::URL *a2)
{
  uint64_t result;
  uint64_t v4;

  if (*((_BYTE *)this + 64))
    return *((_QWORD *)this + 7);
  v4 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::Blob *)((char *)this + 80), a2);
  result = v4 & ~(v4 >> 63);
  *((_QWORD *)this + 7) = result;
  *((_BYTE *)this + 64) = 1;
  return result;
}

uint64_t WebCore::Blob::Blob(uint64_t a1, int a2, WebCore::ScriptExecutionContext *a3, const WTF::URL *a4, WTF::String *a5, uint64_t a6, uint64_t a7, uint64_t a8, const WTF::URL *a9)
{
  WebCore::ScriptExecutionContext *v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  _DWORD *v28;
  const WTF::String *v29;
  WTF::StringImpl *v30;
  unint64_t v32[3];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41[3];
  int v42;
  char v43;
  uint64_t v44;

  v14 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E33AE950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  v16 = a1 + 24;
  if (a3 && !*((_BYTE *)a3 + 274))
  {
    v17 = (char *)a3 - 192;
    v18 = *((_QWORD *)a3 + 64);
    if (v18)
    {
      v19 = *(char **)(v18 + 8);
      if (v19)
        v17 = v19;
    }
    v14 = (WebCore::ScriptExecutionContext *)(v17 + 192);
  }
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), v14);
  *(_QWORD *)(a1 + 24) = &off_1E33A0540;
  *(_QWORD *)(a1 + 40) = 0;
  if (v14)
  {
    if (*((_BYTE *)v14 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6C430);
    }
    v41[0] = v16;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v14 + 16, v41, (uint64_t)v32);
  }
  *(_QWORD *)a1 = off_1E33AE640;
  *(_QWORD *)(a1 + 24) = &unk_1E33AE680;
  v20 = *(_QWORD *)a5;
  if (!*(_QWORD *)a5 || (v21 = *(unsigned int *)(v20 + 4), !(_DWORD)v21))
  {
LABEL_26:
    WTF::String::convertToASCIILowercase(a5);
    goto LABEL_27;
  }
  v22 = *(unsigned __int8 **)(v20 + 8);
  if ((*(_BYTE *)(v20 + 16) & 4) != 0)
  {
    if (*v22 - 127 >= 0xFFFFFFA1)
    {
      v23 = 0;
      v24 = v22 + 1;
      while (v21 - 1 != v23)
      {
        v25 = v24[v23++] - 127;
        if (v25 < 0xFFFFFFA1)
          goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if (*(unsigned __int16 *)v22 - 127 >= 0xFFFFFFA1)
  {
    v23 = 0;
    v26 = v22 + 2;
    while (v21 - 1 != v23)
    {
      v27 = *(unsigned __int16 *)&v26[2 * v23++] - 127;
      if (v27 < 0xFFFFFFA1)
      {
LABEL_22:
        if (v23 >= v21)
          goto LABEL_26;
        goto LABEL_23;
      }
    }
    goto LABEL_26;
  }
LABEL_23:
  v28 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v28 += 2;
  *(_QWORD *)(a1 + 48) = v28;
LABEL_27:
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 72) = a8;
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, a1 + 80);
  *(_QWORD *)(a1 + 120) = 0;
  if (*(_QWORD *)a9 && *(_DWORD *)(*(_QWORD *)a9 + 4))
  {
    WebCore::ThreadableBlobRegistry::registerInternalBlobURLOptionallyFileBacked((WebCore::ThreadableBlobRegistry *)(a1 + 80), a4, a9, (const WTF::String *)(a1 + 48), v29);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 7;
    LOBYTE(v41[0]) = 0;
    v43 = 0;
    WebCore::ThreadableBlobRegistry::registerBlobURL(0, v32, (WTF::URL *)(a1 + 80), (uint64_t)a4, (uint64_t)v41);
    if (v43 && v42 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v42])(&v40, v41);
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)v32, v30);
  }
  return a1;
}

WebCore::Blob *WebCore::Blob::Blob(WebCore::Blob *this, WebCore::ScriptExecutionContext *a2, const WTF::URL *a3, const WTF::URL *a4, uint64_t a5, uint64_t a6, const WTF::String *a7)
{
  WebCore::ScriptExecutionContext *v12;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  _DWORD *v26;
  const WTF::String *v27;
  uint64_t v29;
  char *v30;

  v12 = a2;
  *(_QWORD *)this = off_1E33AE950;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  v14 = (char *)this + 24;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v15 = (char *)a2 - 192;
    v16 = *((_QWORD *)a2 + 64);
    if (v16)
    {
      v17 = *(char **)(v16 + 8);
      if (v17)
        v15 = v17;
    }
    v12 = (WebCore::ScriptExecutionContext *)(v15 + 192);
  }
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::Blob *)((char *)this + 24), v12);
  *((_QWORD *)this + 3) = &off_1E33A0540;
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*((_BYTE *)v12 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6C660);
    }
    v30 = v14;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v12 + 16, (uint64_t *)&v30, (uint64_t)&v29);
  }
  *(_QWORD *)this = off_1E33AE640;
  *((_QWORD *)this + 3) = &unk_1E33AE680;
  v18 = *(_QWORD *)a7;
  if (!*(_QWORD *)a7 || (v19 = *(unsigned int *)(v18 + 4), !(_DWORD)v19))
  {
LABEL_26:
    WTF::String::convertToASCIILowercase(a7);
    goto LABEL_27;
  }
  v20 = *(unsigned __int8 **)(v18 + 8);
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    if (*v20 - 127 >= 0xFFFFFFA1)
    {
      v21 = 0;
      v22 = v20 + 1;
      while (v19 - 1 != v21)
      {
        v23 = v22[v21++] - 127;
        if (v23 < 0xFFFFFFA1)
          goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if (*(unsigned __int16 *)v20 - 127 >= 0xFFFFFFA1)
  {
    v21 = 0;
    v24 = v20 + 2;
    while (v19 - 1 != v21)
    {
      v25 = *(unsigned __int16 *)&v24[2 * v21++] - 127;
      if (v25 < 0xFFFFFFA1)
      {
LABEL_22:
        if (v21 >= v19)
          goto LABEL_26;
        goto LABEL_23;
      }
    }
    goto LABEL_26;
  }
LABEL_23:
  v26 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v26 += 2;
  *((_QWORD *)this + 6) = v26;
LABEL_27:
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 9) = a6;
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, (uint64_t)this + 80);
  *((_QWORD *)this + 15) = 0;
  WebCore::ThreadableBlobRegistry::registerInternalBlobURLForSlice((WebCore::Blob *)((char *)this + 80), a3, a4, a5, (uint64_t)this + 48, v27);
  return this;
}

void WebCore::Blob::~Blob(WebCore::Blob *this)
{
  WTF::StringImpl **v2;
  WebCore::ActiveDOMObject *v3;
  void *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E33AE640;
  v2 = (WTF::StringImpl **)((char *)this + 80);
  *((_QWORD *)this + 3) = &unk_1E33AE680;
  v3 = (WebCore::Blob *)((char *)this + 24);
  v14[0] = 0;
  v16 = 0;
  WebCore::ThreadableBlobRegistry::unregisterBlobURL((uint64_t)this + 80, (uint64_t)v14);
  if (v16 && v15 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v15])(&v13, v14);
  while (1)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 15);
    if (!v5)
      break;
    if (!*((_DWORD *)v5 - 3))
    {
      v12 = *((_QWORD *)this + 15);
      v10 = *((unsigned int *)v5 - 1);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)this + 15);
        do
        {
          if (*v11 != -1)
            std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v11, 0);
          ++v11;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree((WTF *)(v12 - 16), v4);
      break;
    }
    v9 = (WTF::StringImpl **)WTF::HashSet<std::unique_ptr<WebCore::BlobLoader>,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTableTraits>::begin(v5);
    WebCore::BlobLoader::cancel(*v9);
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, v4);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::Blob::~Blob(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

_QWORD *WTF::HashSet<std::unique_ptr<WebCore::BlobLoader>,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v1 = *((unsigned int *)result - 1);
    v2 = &result[v1];
    if (*((_DWORD *)result - 3))
    {
      if ((_DWORD)v1)
      {
        v3 = 8 * v1;
        while ((unint64_t)(*result + 1) <= 1)
        {
          ++result;
          v3 -= 8;
          if (!v3)
            return v2;
        }
      }
    }
    else
    {
      return v2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BlobLoader::cancel(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    *(_WORD *)(v2 + 204) = 272;
    this = *(WTF::StringImpl **)(v2 + 144);
    if (this)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      this = WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v2, v3);
    }
  }
  v4 = *((_QWORD *)v1 + 3);
  if (v4)
  {
    *((_QWORD *)v1 + 3) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v4 + 16))(v4, v1);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return this;
}

void `non-virtual thunk to'WebCore::Blob::~Blob(WebCore::Blob *this)
{
  WebCore::Blob::~Blob((WebCore::Blob *)((char *)this - 24));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::Blob::~Blob((WebCore::Blob *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t *WebCore::Blob::loadBlob(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  ++*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v6 + 8) = a1;
  ++*(_QWORD *)(a1 + 40);
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E33AE9C8;
  v9[1] = a1;
  v9[2] = v6;
  v9[3] = v7;
  *v8 = off_1E3356C10;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v9;
  v47 = (uint64_t)v8;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (WebCore::ScriptExecutionContext *)(v11 - 96);
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v13 = &off_1E33AEE88;
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 20) = a2;
  v14 = v8[1];
  if (v14)
    goto LABEL_54;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v8;
  v16 = (unsigned int *)v8[1];
  v8[1] = v14;
  if (!v16)
    goto LABEL_54;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  v14 = v8[1];
  if (v14)
  {
LABEL_54:
    do
      v19 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v19 + 1, (unsigned int *)v14));
  }
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 24) = v14;
  *(_QWORD *)(v13 + 32) = &off_1E31F4A18;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(v13 + 72));
  *(_BYTE *)(v13 + 160) = 0;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v20 += 2;
  *(_QWORD *)(v13 + 176) = 0;
  *(_QWORD *)(v13 + 184) = 0;
  *(_QWORD *)(v13 + 168) = v20;
  *(_BYTE *)(v13 + 192) = 0;
  *(_QWORD *)(v13 + 196) = 0;
  *(_WORD *)(v13 + 204) = 0;
  v21 = v8[2];
  v8[2] = v13;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
    v13 = v8[2];
  }
  v22 = *(WTF::StringImpl **)(a1 + 80);
  if (v22)
    *(_DWORD *)v22 += 2;
  v48 = v22;
  v23 = *(_OWORD *)(a1 + 104);
  v49 = *(_OWORD *)(a1 + 88);
  v50 = v23;
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v13, v12, (const WTF::URL *)&v48);
  v25 = v48;
  v48 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (!v8[2] || !v8[3])
    return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v47, 0);
  v28 = *(_QWORD *)(a1 + 120);
  v27 = (uint64_t *)(a1 + 120);
  v26 = v28;
  if (v28
    || (WTF::HashTable<std::unique_ptr<WebCore::BlobLoader>,std::unique_ptr<WebCore::BlobLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>>::rehash(v27, 8u), (v26 = *v27) != 0))
  {
    v29 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v29 = 0;
  }
  v30 = (void *)v47;
  v31 = (~(v47 << 32) + v47) ^ ((unint64_t)(~(v47 << 32) + v47) >> 22);
  v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  v34 = v29 & ((v33 >> 31) ^ v33);
  v35 = (uint64_t *)(v26 + 8 * v34);
  v36 = *v35;
  if (!*v35)
  {
LABEL_34:
    v47 = 0;
    std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v35, v30);
    v39 = *v27;
    if (*v27)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v27;
    if (*v27)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v47, 0);
    }
    else
    {
      if (3 * v44 > 4 * v43)
        return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v47, 0);
      if (!(_DWORD)v44)
      {
        v45 = 8;
        goto LABEL_45;
      }
    }
    v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
LABEL_45:
    WTF::HashTable<std::unique_ptr<WebCore::BlobLoader>,std::unique_ptr<WebCore::BlobLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>>::rehash(v27, v45);
    return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v47, 0);
  }
  v37 = 0;
  v38 = 1;
  while (v36 != v47)
  {
    if (v36 == -1)
      v37 = v35;
    v34 = (v34 + v38) & v29;
    v35 = (uint64_t *)(v26 + 8 * v34);
    v36 = *v35;
    ++v38;
    if (!*v35)
    {
      if (v37)
      {
        *v37 = 0;
        --*(_DWORD *)(*v27 - 16);
        v30 = (void *)v47;
        v35 = v37;
      }
      goto LABEL_34;
    }
  }
  return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v47, 0);
}

WTF::StringImpl *WebCore::Blob::stream@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::ScriptExecutionContext *v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;

  v3 = *((_QWORD *)this + 4);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = this,
        v6 = (WebCore::ScriptExecutionContext *)(v4 - 96),
        (this = (WTF::StringImpl *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v4 - 96))) != 0))
  {
    v7 = this;
    v8 = WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)(v8 + 16) = &unk_1E33AEA60;
    *(_QWORD *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 40) = 0;
    *(_DWORD *)(v8 + 48) = 1;
    *(_QWORD *)v8 = off_1E33AE9F0;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = WTF::fastMalloc((WTF *)0xD0);
    *(_QWORD *)v9 = &off_1E33AEE88;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0x500000000;
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
      goto LABEL_25;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v8;
    v12 = *(unsigned int **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v10;
    if (!v12)
      goto LABEL_25;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
LABEL_25:
      do
        v15 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v15 + 1, (unsigned int *)v10));
    }
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 24) = v10;
    *(_QWORD *)(v9 + 32) = &off_1E31F4A18;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 64) = 0;
    WTF::URL::invalidate((WTF::URL *)(v9 + 72));
    *(_BYTE *)(v9 + 160) = 0;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v16 += 2;
    *(_QWORD *)(v9 + 176) = 0;
    *(_QWORD *)(v9 + 184) = 0;
    *(_QWORD *)(v9 + 168) = v16;
    *(_BYTE *)(v9 + 192) = 0;
    *(_QWORD *)(v9 + 196) = 0;
    *(_WORD *)(v9 + 204) = 0;
    *(_QWORD *)(v8 + 56) = v9;
    *(_BYTE *)(v8 + 112) = 0;
    *(_WORD *)(v8 + 120) = 0;
    *(_OWORD *)(v8 + 64) = 0uLL;
    *(_OWORD *)(v8 + 80) = 0uLL;
    *(_BYTE *)(v8 + 96) = 0;
    v17 = (WTF::StringImpl *)*((_QWORD *)v5 + 10);
    if (v17)
      *(_DWORD *)v17 += 2;
    v22 = v17;
    v18 = *(_OWORD *)((char *)v5 + 104);
    v23 = *(_OWORD *)((char *)v5 + 88);
    v24 = v18;
    WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v9, v6, (const WTF::URL *)&v22);
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v22 = (WTF::StringImpl *)(v8 + 16);
    v21 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>((uint64_t)v7, &v22);
    WebCore::ReadableStream::createFromJSValues(v7, v21, 0xAuLL, a2);
    this = v22;
    v22 = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 24))(this);
  }
  else
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t *WebCore::Blob::registry(WebCore::Blob *this)
{
  if ((_MergedGlobals_178 & 1) == 0)
  {
    qword_1ECE83320 = 0;
    qword_1ECE83328 = 0;
    qword_1ECE83318 = 0;
    *(_QWORD *)WebCore::URLRegistry::URLRegistry((WebCore::URLRegistry *)&qword_1ECE83318) = off_1E33AE8C8;
    LOBYTE(qword_1ECE83320) = 0;
    qword_1ECE83328 = 0;
    _MergedGlobals_178 = 1;
  }
  return &qword_1ECE83318;
}

uint64_t WebCore::Blob::handle@<X0>(WebCore::Blob *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;
  _BYTE v4[24];
  int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v6 = 0;
  result = WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(a2, (uint64_t)this + 80, (uint64_t)v4);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v5])(&v3, v4);
  }
  return result;
}

WTF *WebCore::BlobBuilder::append(WebCore::BlobBuilder *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void **v6;
  WTF *result;
  WTF *v8;
  void *v9;
  WTF *v10;
  size_t v11;
  WTF *v12;
  size_t __n;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  PAL::TextCodecUTF8::encodeUTF8(v3, v4, (uint64_t)&v12);
  if (*(_DWORD *)this == 1)
  {
    WTF::normalizeLineEndingsToNative();
    v8 = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(__n) = 0;
      WTF::fastFree(v8, v5);
    }
    v12 = v10;
    __n = v11;
  }
  v6 = (void **)((char *)this + 24);
  if (*((_DWORD *)this + 9))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v6, v12, HIDWORD(__n));
    result = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(__n) = 0;
      return (WTF *)WTF::fastFree(result, v9);
    }
  }
  else
  {
    result = (WTF *)*v6;
    if (result)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      result = (WTF *)WTF::fastFree(result, v5);
    }
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = __n;
  }
  return result;
}

void **WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, void *__src, size_t __n)
{
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  if ((_DWORD)__n)
  {
    v4 = (uint64_t)result;
    v5 = __n;
    v6 = *((unsigned int *)result + 2);
    v7 = *((unsigned int *)result + 3);
    v8 = v7 + __n;
    if (v8 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = v7 + __n;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_17;
      v13 = *result;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v4 + 8) = v12;
      *(_QWORD *)v4 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v4 == v13)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v4 + 12);
    if (v8 >= v9)
    {
      result = (void **)memcpy((void *)(*(_QWORD *)v4 + v9), __src, v5);
      *(_DWORD *)(v4 + 12) = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195B6D190);
  }
  return result;
}

double WebCore::BlobBuilder::finalize(WebCore::BlobBuilder *this, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  double result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;

  v4 = *(_DWORD *)(a2 + 36);
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 24);
    v6 = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v12 = v6;
    v13 = v4;
    v14 = 0;
    v7 = *(_DWORD *)(a2 + 20);
    if (v7 == *(_DWORD *)(a2 + 16))
    {
      WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v5, (unint64_t)&v11);
    }
    else
    {
      v9 = *v5 + 48 * v7;
      *(_BYTE *)v9 = 0;
      *(_DWORD *)(v9 + 40) = -1;
      v10 = v14;
      if (v14 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t *))off_1E33AECF8[v14])(&v15, v9, &v11);
        *(_DWORD *)(v9 + 40) = v10;
      }
      ++*(_DWORD *)(a2 + 20);
    }
    if (v14 != -1)
      ((void (*)(char *, uint64_t *))off_1E33AE9A8[v14])(&v15, &v11);
  }
  *(_QWORD *)this = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((double *)this + 1) = result;
  return result;
}

WTF::StringImpl *WebCore::BlobURL::createPublicURL@<X0>(WebCore::BlobURL *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WebCore::SecurityOriginData *v6;
  _QWORD *v7;
  int8x16_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;

  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if ((_DWORD)v4 == -1)
    {
      v12 = (int8x16_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::BlobURL::createBlobURL(v12, v13, v14);
    }
    v6 = (WebCore::BlobURL *)((char *)this + 8);
    v16 = (WTF::StringImpl *)&v15;
    v7 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v4])(&v16, (char *)this + 8);
    if (MEMORY[0x19AEA53F4](*v7, "file", 4) && *((_BYTE *)this + 59))
      WTF::String::String(&v16, (uint64_t)"null", 5);
    else
      WebCore::SecurityOriginData::toString(v6, &v16);
  }
  if (v16)
  {
    v8 = (int8x16_t *)*((_QWORD *)v16 + 1);
    v9 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::BlobURL::createBlobURL(v8, v9, a2);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::BlobURL::createBlobURL@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE *v15;
  _BYTE *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char *v19;
  WTF::StringImpl *v20[6];
  _QWORD v21[2];
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;

  WTF::UUID::UUID((WTF::UUID *)v21);
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
  if ((result & 0x80000000) != 0)
    goto LABEL_32;
  v7 = result + 1;
  v8 = __OFADD__((_DWORD)result, 1);
  if ((a2 & 0x80000000) != 0)
    goto LABEL_32;
  if (v8)
    goto LABEL_32;
  v9 = __OFADD__((_DWORD)a2, v7);
  v10 = a2 + v7;
  if (v9)
    goto LABEL_32;
  v11 = (v10 + 5);
  if (__OFADD__(v10, 5))
    goto LABEL_32;
  v13 = (WTF::StringImpl *)v21[0];
  v12 = (WTF::StringImpl *)v21[1];
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v10 != -5)
    {
      if ((v11 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
        v14 = v20[0];
        if (v20[0])
        {
          *(_DWORD *)v20[0] = 2;
          *((_DWORD *)v14 + 1) = v11;
          *((_QWORD *)v14 + 1) = (char *)v14 + 20;
          *((_QWORD *)v14 + 2) = 0x626F6C6200000004;
          v15 = (char *)v14 + 25;
          *((_BYTE *)v14 + 24) = 58;
          if ((_DWORD)a2)
          {
            if ((_DWORD)a2 == 1)
              *v15 = a1->i8[0];
            else
              memcpy((char *)v14 + 25, a1, a2);
          }
          v16 = &v15[a2];
          *v16 = 47;
          v20[0] = v13;
          v20[1] = v12;
          v23 = (WTF::StringImpl *)(v16 + 1);
          v22 = &v23;
          _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v20, (_BYTE ***)&v22);
          goto LABEL_17;
        }
      }
LABEL_32:
      __break(0xC471u);
      return result;
    }
    goto LABEL_31;
  }
  if (v10 == -5)
  {
LABEL_31:
    v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if (v11 > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v11 + 20));
  v14 = v20[0];
  if (!v20[0])
    goto LABEL_32;
  v19 = (char *)v20[0] + 20;
  *(_DWORD *)v20[0] = 2;
  *((_DWORD *)v14 + 1) = v11;
  *((_QWORD *)v14 + 1) = (char *)v14 + 20;
  *((_DWORD *)v14 + 4) = 0;
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((uint64_t)v19, a1, a2, (uint64_t)v13, (uint64_t)v12);
LABEL_17:
  v23 = v14;
  v20[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v20);
  MEMORY[0x19AEA52F8](a3, v20, &v23, 0);
  v18 = v20[0];
  v20[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::BlobURL::getOriginURL@<X0>(uint64_t *__return_ptr a1@<X8>, WebCore::BlobURL *this@<X0>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebCore::BlobURL *v14;
  const WTF::URL *v15;
  uint64_t v16;
  char v17;
  WTF::StringImpl *v18;

  WebCore::SecurityOrigin::createForBlobURL(this, &v16);
  v4 = v16;
  v5 = *(unsigned int *)(v16 + 32);
  if ((_DWORD)v5 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if ((_DWORD)v5 == -1)
    {
      v14 = (WebCore::BlobURL *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::BlobURL::isSecureBlobURL(v14, v15);
    }
    v18 = (WTF::StringImpl *)&v17;
    v6 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v5])(&v18, v16 + 8);
    if (MEMORY[0x19AEA53F4](*v6, "file", 4) && *(_BYTE *)(v4 + 59))
      WTF::String::String(&v18, (uint64_t)"null", 5);
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v4 + 8), &v18);
  }
  MEMORY[0x19AEA52D4](a1, &v18, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  v16 = 0;
  do
  {
    v9 = __ldaxr((unsigned int *)v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v4));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v4);
    v11 = *(WTF::StringImpl **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(WTF::StringImpl **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(unsigned int *)(v4 + 32);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v13])(&v17, v4 + 8);
    *(_DWORD *)(v4 + 32) = -1;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v4, v7);
  }
  return result;
}

uint64_t WebCore::BlobURL::isSecureBlobURL(WebCore::BlobURL *this, const WTF::URL *a2)
{
  WTF::StringImpl *CachedOrigin;
  const WebCore::SecurityOrigin *v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  WebCore::SecurityOrigin *v9;
  uint64_t v10;
  BOOL v11;
  WebCore::Document *v12;
  int v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  const WTF::URL *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  WTF *v34[2];

  CachedOrigin = WebCore::ThreadableBlobRegistry::getCachedOrigin(this, v34);
  v4 = v34[0];
  if (!v34[0])
    goto LABEL_23;
  if (!WTF::isMainThread(CachedOrigin))
    goto LABEL_18;
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t **)&v30);
  v6 = v31;
  v7 = v33;
  if (v31 == v33)
    goto LABEL_18;
  v8 = v32;
  while (1)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v6[4] + 8) + 192), v5);
    if (WebCore::SecurityOrigin::isSameOriginAs(v9, v4))
      break;
    while (1)
    {
      v6 += 6;
      if (v6 == v8)
        break;
      v10 = v6[2];
      if (*v6 | v6[1] | v10)
        v11 = v10 == -1;
      else
        v11 = 1;
      if (!v11)
        goto LABEL_13;
    }
    v6 = v8;
LABEL_13:
    if (v6 == v7)
      goto LABEL_18;
  }
  v12 = *(WebCore::Document **)(v6[4] + 8);
  if (v12)
  {
    LOBYTE(v4) = WebCore::Document::isSecureContext(v12, v5);
    v13 = 0;
  }
  else
  {
LABEL_18:
    v13 = 1;
  }
  v14 = v34[0];
  v34[0] = 0;
  if (!v14)
    goto LABEL_22;
  do
  {
    v15 = __ldaxr((unsigned int *)v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v14));
  if (v16)
  {
LABEL_22:
    if (!v13)
      return v4 & 1;
LABEL_23:
    WebCore::BlobURL::getOriginURL((uint64_t *)&v30, this);
    if ((v31 & 1) == 0)
    {
LABEL_34:
      LOBYTE(v4) = 1;
      goto LABEL_35;
    }
    v34[0] = (WTF *)WTF::URL::protocol((WTF::URL *)&v30);
    v34[1] = v18;
    if (!v34[0])
    {
LABEL_41:
      if (WTF::URL::protocolIs())
        LOBYTE(v4) = WebCore::BlobURL::isSecureBlobURL((WebCore::BlobURL *)&v30, v17);
      else
        LOBYTE(v4) = 0;
LABEL_35:
      v25 = v30;
      v30 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v17);
        else
          *(_DWORD *)v25 -= 2;
      }
      return v4 & 1;
    }
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_29:
    {
      WebCore::secureSchemes(void)::secureSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSecureSchemes);
    }
    v22 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::secureSchemes(void)::secureSchemes, (unsigned __int8 **)v34, v19, v20);
    v23 = v22;
    v24 = __ldxr(WebCore::schemeRegistryLock);
    if (v24 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
      {
        if ((v22 & 1) != 0)
          goto LABEL_34;
        goto LABEL_41;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v23 & 1) != 0)
      goto LABEL_34;
    goto LABEL_41;
  }
  atomic_store(1u, (unsigned int *)v14);
  v27 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
  *((_QWORD *)v14 + 6) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v5);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
  *((_QWORD *)v14 + 5) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v5);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *((unsigned int *)v14 + 8);
  if ((_DWORD)v29 != -1)
    ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v29])(&v30, (char *)v14 + 8);
  *((_DWORD *)v14 + 8) = -1;
  WTF::fastFree(v14, v5);
  if (v13)
    goto LABEL_23;
  return v4 & 1;
}

void *WebCore::File::bisoHeap(WebCore::File *this)
{
  return &WebCore::File::bisoHeap(void)::heap;
}

uint64_t WebCore::File::operator new(uint64_t this)
{
  if (this == 192)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::File::createWithRelativePath@<X0>(WebCore::File *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *result;
  _BYTE v13[16];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v14 = 0;
  v15 = 0;
  v13[0] = 0;
  v13[8] = 0;
  WebCore::File::create(&v14, (uint64_t)this, a2, &v15, (WTF::String *)v13, a4);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *a4;
  v11 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v11 += 2;
  result = *(WTF::StringImpl **)(v10 + 136);
  *(_QWORD *)(v10 + 136) = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::File::create@<X0>(WTF::StringImpl **a1@<X3>, uint64_t a2@<X0>, WTF::StringImpl **a3@<X1>, WTF::StringImpl **a4@<X2>, WTF::String *a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::StringImpl *v11;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35[24];
  _QWORD *v36;

  v33 = 0;
  v34 = 0;
  v11 = *a4;
  if (!*a4)
    v11 = *a3;
  if (v11)
    *(_DWORD *)v11 += 2;
  v32 = v11;
  WebCore::File::computeNameAndContentType((WebCore::File *)&v32, a1, &v34, &v33, a5);
  WebCore::BlobURL::createBlobURL((int8x16_t *)"blobinternal://", 0x10000000FLL, (uint64_t)&v29);
  WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL((WebCore::ThreadableBlobRegistry *)&v29, a3, a4, (const WTF::String *)&v33, v12);
  v13 = bmalloc::api::isoAllocate();
  v14 = v13;
  *(_QWORD *)v13 = off_1E33AE950;
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = 1;
  v15 = (_QWORD *)(v13 + 24);
  if (a2 && !*(_BYTE *)(a2 + 274))
  {
    v16 = a2 - 192;
    v17 = *(_QWORD *)(a2 + 512);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
        v16 = v18;
    }
    a2 = v16 + 192;
  }
  *(_QWORD *)(v13 + 24) = &off_1E33A18C0;
  *(_QWORD *)(v13 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v13 + 24), (WebCore::ScriptExecutionContext *)a2);
  *(_QWORD *)(v14 + 24) = &off_1E33A0540;
  *(_QWORD *)(v14 + 40) = 0;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195B6DDA8);
    }
    v36 = v15;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a2 + 128), (uint64_t *)&v36, (uint64_t)v35);
  }
  *(_QWORD *)v14 = off_1E33AE640;
  v19 = v33;
  v33 = 0;
  *(_QWORD *)(v14 + 48) = v19;
  *(_BYTE *)(v14 + 56) = 0;
  *(_BYTE *)(v14 + 64) = 0;
  v20 = v29;
  v29 = 0;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = v20;
  v21 = v30;
  *(_OWORD *)(v14 + 88) = v30;
  LODWORD(v30) = v21 & 0xFFFFFFFE;
  *(_OWORD *)(v14 + 104) = v31;
  *(_QWORD *)v14 = off_1E33AE6D8;
  *(_QWORD *)(v14 + 24) = &unk_1E33AE718;
  v22 = v32;
  v32 = 0;
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 128) = v22;
  v23 = v34;
  v34 = 0;
  *(_QWORD *)(v14 + 136) = 0;
  *(_QWORD *)(v14 + 144) = v23;
  *(_BYTE *)(v14 + 152) = 0;
  *(_BYTE *)(v14 + 160) = 0;
  *(_OWORD *)(v14 + 168) = *(_OWORD *)a5;
  *(_WORD *)(v14 + 184) = 0;
  *a6 = v14;
  WebCore::ActiveDOMObject::suspendIfNeeded(v15);
  v25 = v29;
  v29 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::File::computeNameAndContentType(WebCore::File *this, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::String *a5)
{
  const WTF::String *v9;
  WTF::String *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (WebCore::File::shouldReplaceFile(this, (const WTF::String *)a2))
    return WebCore::File::computeNameAndContentTypeForReplacedFile(this, a2, a3, a4, v10);
  v12 = *a2;
  if (*a2 && *((_DWORD *)v12 + 1))
  {
    v13 = *(_DWORD *)v12 + 2;
    *(_DWORD *)v12 = v13;
    v17 = v12;
    goto LABEL_6;
  }
  WTF::FileSystemImpl::pathFileName(this, v9);
  v12 = v17;
  if (v17)
  {
    v13 = *(_DWORD *)v17;
LABEL_6:
    *(_DWORD *)v12 = v13 + 2;
  }
  v14 = *a3;
  *a3 = v12;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v9);
      v12 = v17;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = *a3;
  if (*a3)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::reverseFind();
    if (result != (WTF::StringImpl *)-1)
    {
      v15 = result;
      v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v16 = off_1E33AED50;
      *((_QWORD *)v16 + 1) = a4;
      *((_QWORD *)v16 + 2) = a3;
      *((_QWORD *)v16 + 3) = v15;
      v18 = v16;
      WTF::callOnMainThreadAndWait();
      result = v18;
      if (v18)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  return result;
}

WebCore::File *WebCore::File::File(WebCore::File *this, WebCore::ScriptExecutionContext *a2, const WebCore::File *a3, const WTF::String *a4)
{
  _QWORD *v7;
  const WTF::String *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  __int16 v12;
  uint64_t v13;

  v7 = (_QWORD *)WebCore::Blob::Blob((uint64_t)this, (int)a2, a2, (uint64_t)a3);
  *v7 = off_1E33AE6D8;
  v7[3] = &unk_1E33AE718;
  v9 = (_DWORD *)*((_QWORD *)a3 + 16);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 16) = v9;
  v10 = (_DWORD *)*((_QWORD *)a3 + 17);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 17) = v10;
  v11 = *(_DWORD **)a4;
  if (*(_QWORD *)a4 || (v11 = (_DWORD *)*((_QWORD *)a3 + 18)) != 0)
    *v11 += 2;
  *((_QWORD *)this + 18) = v11;
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a3 + 152);
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 176) = 0;
  if (*((_BYTE *)a3 + 185))
  {
    LOBYTE(v12) = *((_BYTE *)a3 + 184) != 0;
  }
  else
  {
    v13 = WTF::FileSystemImpl::fileTypeFollowingSymlinks((const WebCore::File *)((char *)a3 + 128), v8);
    v12 = (v13 & 0xFF00000000) != 0 && (_DWORD)v13 == 1;
    *((_WORD *)a3 + 92) = v12 | 0x100;
  }
  *((_BYTE *)this + 184) = v12;
  *((_BYTE *)this + 185) = 1;
  return this;
}

uint64_t WebCore::File::lastModified(WebCore::File *this, const WTF::String *a2)
{
  WTF::WallTime *v3;
  char v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if (*((_BYTE *)this + 160))
    return *((_QWORD *)this + 19);
  v3 = (WTF::WallTime *)WTF::FileSystemImpl::fileModificationTime((WebCore::File *)((char *)this + 128), a2);
  if (v4)
    v5 = *(double *)&v3;
  else
    WTF::WallTime::now(v3);
  v6 = v5 * 1000.0;
  v7 = -9.22337204e18;
  if (v6 > -9.22337204e18)
    v7 = v6;
  v8 = (double)(uint64_t)v7;
  if (v6 >= 9.22337204e18)
    v9 = 9.22337204e18;
  else
    v9 = v8;
  if (fabs(v9) > 8.64e15)
    return (uint64_t)NAN;
  return (uint64_t)v9;
}

WTF::StringImpl *WebCore::File::contentTypeForFile@<X0>(WebCore::File *this@<X0>, WTF::String *a2@<X4>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v7 = 0;
  v8 = 0;
  *a3 = 0;
  WebCore::File::computeNameAndContentType(this, &v7, &v8, a3, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WebCore::FileList::bisoHeap(WebCore::FileList *this)
{
  return &WebCore::FileList::bisoHeap(void)::heap;
}

uint64_t WebCore::FileList::operator new(uint64_t this)
{
  if (this == 32)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::FileList::item(WebCore::FileList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 7) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
}

_QWORD *WebCore::FileReader::create@<X0>(WebCore::FileReader *this@<X0>, WebCore::ActiveDOMObject **a2@<X8>)
{
  WebCore::FileReader *v5;
  WebCore::ActiveDOMObject *v6;

  v5 = (WebCore::FileReader *)bmalloc::api::isoAllocate();
  v6 = WebCore::FileReader::FileReader(v5, this);
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v6);
}

WebCore::ActiveDOMObject *WebCore::FileReader::FileReader(WebCore::FileReader *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ActiveDOMObject *result;

  *((_DWORD *)this + 6) = 1;
  result = WebCore::ActiveDOMObject::ActiveDOMObject(this, a2);
  *(_QWORD *)result = &off_1E33AE770;
  *((_QWORD *)result + 4) = &unk_1E33AE808;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  *((_QWORD *)result + 7) = &unk_1E33AE880;
  *((_QWORD *)result + 8) = 0;
  *((_DWORD *)result + 18) = 0;
  *((_BYTE *)result + 76) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_DWORD *)result + 22) = 1;
  *((_QWORD *)result + 12) = 0;
  *((_QWORD *)result + 13) = 0;
  *((_QWORD *)result + 14) = 0;
  *((_QWORD *)result + 15) = 0x7FF8000000000000;
  *((_QWORD *)result + 16) = 0;
  return result;
}

void WebCore::FileReader::~FileReader(WebCore::FileReader *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_WORD *)(v3 + 204) = 272;
    v11 = *(_QWORD *)(v3 + 144);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v12);
    }
  }
  WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::~HashMap((uint64_t *)this + 16, a2);
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 8, v4);
  WebCore::EventTarget::~EventTarget((WebCore::FileReader *)((char *)this + 32), v9);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v10);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileReader::~FileReader(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::FileReader::~FileReader(WebCore::FileReader *this, void *a2)
{
  WebCore::FileReader::~FileReader((WebCore::FileReader *)((char *)this - 32), a2);
}

{
  WebCore::FileReader::~FileReader((WebCore::FileReader *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileReader::~FileReader((WebCore::FileReader *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FileReader::~FileReader((WebCore::FileReader *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::FileReader::stop(WebCore::FileReader *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  result = *((_QWORD *)this + 16);
  if (result)
  {
    *((_QWORD *)this + 16) = 0;
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(result, a2);
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    *(_WORD *)(v4 + 204) = 272;
    v5 = *(_QWORD *)(v4 + 144);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v4, v6);
    }
    result = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  }
  *((_DWORD *)this + 18) = 2;
  return result;
}

BOOL WebCore::FileReader::virtualHasPendingActivity(WebCore::FileReader *this)
{
  return *((_DWORD *)this + 18) == 1;
}

uint64_t WebCore::FileReader::readInternal@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int16 v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WebCore::FileReaderLoader *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::ScriptExecutionContext *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;

  if (*(_DWORD *)(result + 72) == 1)
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    v7 = result;
    ++*(_DWORD *)(a2 + 16);
    v8 = *(_DWORD **)(result + 80);
    *(_QWORD *)(v7 + 80) = a2;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[4];
    }
    *(_DWORD *)(v7 + 88) = a3;
    *(_DWORD *)(v7 + 72) = 1;
    v9 = *(_DWORD **)(v7 + 112);
    *(_QWORD *)(v7 + 112) = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v10 = WTF::fastMalloc((WTF *)0xD0);
    v11 = *(_DWORD *)(v7 + 88);
    *(_QWORD *)v10 = &off_1E33AEE88;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 20) = v11;
    v12 = *(_QWORD *)(v7 + 64);
    if (v12)
      goto LABEL_52;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v7 + 56;
    v14 = *(unsigned int **)(v7 + 64);
    *(_QWORD *)(v7 + 64) = v12;
    if (!v14)
      goto LABEL_52;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v12 = *(_QWORD *)(v7 + 64);
    if (v12)
    {
LABEL_52:
      do
        v17 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v17 + 1, (unsigned int *)v12));
    }
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 24) = v12;
    *(_QWORD *)(v10 + 32) = &off_1E31F4A18;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 64) = 0;
    WTF::URL::invalidate((WTF::URL *)(v10 + 72));
    *(_BYTE *)(v10 + 160) = 0;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v19 += 2;
    *(_QWORD *)(v10 + 176) = 0;
    *(_QWORD *)(v10 + 184) = 0;
    *(_QWORD *)(v10 + 168) = v19;
    *(_BYTE *)(v10 + 192) = 0;
    *(_QWORD *)(v10 + 196) = 0;
    *(_WORD *)(v10 + 204) = 0;
    v20 = *(_QWORD *)(v7 + 104);
    *(_QWORD *)(v7 + 104) = v10;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 64))(v20);
      v10 = *(_QWORD *)(v7 + 104);
    }
    v21 = *(_QWORD *)(v7 + 96);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 + 4);
      if ((_DWORD)v22)
      {
        v23 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName(*(_QWORD *)(v21 + 8), (const char *)(v22 | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32)));
        v24 = v18;
        v35 = v23;
        *(_QWORD *)&v36 = v18;
        if (v18 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v35))
          {
            v25 = 165;
          }
          else
          {
            v25 = 92;
          }
        }
        else
        {
          v25 = 92;
        }
        *(_QWORD *)(v10 + 40) = v23;
        *(_QWORD *)(v10 + 48) = v24;
        *(_WORD *)(v10 + 56) = v25;
        v10 = *(_QWORD *)(v7 + 104);
      }
    }
    v26 = *(_DWORD **)(*(_QWORD *)(v7 + 80) + 48);
    if (v26)
      *v26 += 2;
    v27 = *(WTF::StringImpl **)(v10 + 64);
    *(_QWORD *)(v10 + 64) = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v18);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = *(WebCore::FileReaderLoader **)(v7 + 104);
    v29 = *(_QWORD *)(v7 + 8);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
        v31 = (WebCore::ScriptExecutionContext *)(v30 - 96);
      else
        v31 = 0;
    }
    else
    {
      v31 = 0;
    }
    v32 = *(WTF::StringImpl **)(a2 + 80);
    if (v32)
      *(_DWORD *)v32 += 2;
    v35 = v32;
    v33 = *(_OWORD *)(a2 + 104);
    v36 = *(_OWORD *)(a2 + 88);
    v37 = v33;
    WebCore::FileReaderLoader::start(v28, v31, (const WTF::URL *)&v35);
    result = (uint64_t)v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
      else
        *(_DWORD *)result -= 2;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::FileReader::scriptExecutionContext(WebCore::FileReader *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF *WebCore::FileReader::abort(WTF *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WebCore *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  void *v28;
  _DWORD *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned __int8 v35[8];
  WTF::StringImpl *v36;
  _DWORD *v37;

  if (*((_DWORD *)this + 18) == 1)
  {
    v2 = (uint64_t)this;
    if (!*((_BYTE *)this + 76))
    {
      v3 = *((_QWORD *)this + 16);
      if (v3)
      {
        *((_QWORD *)this + 16) = 0;
        v32 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v32)
        {
          v33 = (uint64_t *)(v3 + 8);
          do
          {
            if (*(v33 - 1) != -1)
            {
              v34 = *v33;
              *v33 = 0;
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            }
            v33 += 2;
            --v32;
          }
          while (v32);
        }
        WTF::fastFree((WTF *)(v3 - 16), a2);
      }
      WebCore::FileReader::stop((WebCore::FileReader *)v2, a2);
      v35[0] = 16;
      v36 = 0;
      WebCore::DOMException::create(v35, (uint64_t *)&v37);
      v5 = (uint64_t)v37;
      v37 = 0;
      v6 = *(_DWORD **)(v2 + 112);
      *(_QWORD *)(v2 + 112) = v5;
      if (v6)
      {
        if (v6[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          v29 = v37;
          v37 = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[2];
          }
        }
        else
        {
          --v6[2];
          v37 = 0;
        }
      }
      v7 = v36;
      v36 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          v7 = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v4);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++*(_DWORD *)(v2 + 24);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v9 = *(_QWORD *)(StatusReg + 736);
      if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
        v10 = WebCore::threadGlobalDataSlow(v7);
      v11 = *(_QWORD *)(v10 + 40);
      if (!v11)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
        v11 = *(_QWORD *)(v10 + 40);
      }
      v12 = *(_QWORD *)(v2 + 104);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 + 196);
        v14 = *(unsigned int *)(v12 + 200);
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      v15 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = 1;
      *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x2A0200 | (*(_QWORD *)(v11 + 64) != 0);
      v17 = *(_DWORD **)(v11 + 64);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(v15 + 24) = v17;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = v16;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)v15 = off_1E33A6BE0;
      *(_BYTE *)(v15 + 72) = 1;
      *(_QWORD *)(v15 + 80) = v13;
      *(_QWORD *)(v15 + 88) = v14;
      v18 = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v2 + 32), (WebCore::Event *)v15);
      if (*(_DWORD *)(v15 + 16) == 1)
        v18 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      else
        --*(_DWORD *)(v15 + 16);
      v19 = *(_QWORD *)(StatusReg + 736);
      if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
        v20 = WebCore::threadGlobalDataSlow(v18);
      v21 = *(_QWORD *)(v20 + 40);
      if (!v21)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
        v21 = *(_QWORD *)(v20 + 40);
      }
      v22 = *(_QWORD *)(v2 + 104);
      if (v22)
      {
        v23 = *(unsigned int *)(v22 + 196);
        v24 = *(unsigned int *)(v22 + 200);
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      v25 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
      *(_QWORD *)(v25 + 8) = 0;
      *(_DWORD *)(v25 + 16) = 1;
      *(_DWORD *)(v25 + 20) = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x2A0200 | (*(_QWORD *)(v21 + 1128) != 0);
      v27 = *(_DWORD **)(v21 + 1128);
      if (v27)
        *v27 += 2;
      *(_QWORD *)(v25 + 24) = v27;
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = v26;
      *(_QWORD *)(v25 + 64) = 0;
      *(_QWORD *)v25 = off_1E33A6BE0;
      *(_BYTE *)(v25 + 72) = 1;
      *(_QWORD *)(v25 + 80) = v23;
      *(_QWORD *)(v25 + 88) = v24;
      this = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v2 + 32), (WebCore::Event *)v25);
      if (*(_DWORD *)(v25 + 16) == 1)
        this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      else
        --*(_DWORD *)(v25 + 16);
      if (*(_DWORD *)(v2 + 24) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::FileReader *)v2, v28);
        return (WTF *)bmalloc::api::isoDeallocate(v30, v31);
      }
      else
      {
        --*(_DWORD *)(v2 + 24);
      }
    }
  }
  return this;
}

_QWORD *WebCore::FileReader::didStartLoading(WebCore::FileReader *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AED98;
  v2[1] = this;
  v4 = v2;
  WebCore::FileReader::enqueueTask(this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebCore::FileReader::enqueueTask(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)();
  _QWORD *v35;

  v2 = result[1];
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return result;
  v4 = result;
  v5 = WebCore::FileReader::enqueueTask(WTF::Function<void ()(void)> &&)::taskIdentifierSeed;
  v6 = ++WebCore::FileReader::enqueueTask(WTF::Function<void ()(void)> &&)::taskIdentifierSeed;
  v8 = result + 16;
  v7 = result[16];
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(result + 16, 8u), (v7 = *v8) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v5 - (v6 << 32)) ^ ((unint64_t)(v5 - (v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v7 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != v6)
    {
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (uint64_t *)(v7 + 16 * v13);
      v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v8 - 16);
          v14 = v16;
        }
        goto LABEL_14;
      }
    }
    goto LABEL_29;
  }
LABEL_14:
  v18 = *a2;
  *a2 = 0;
  v19 = v14[1];
  *v14 = v6;
  v14[1] = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v8;
  if (*v8)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v8;
  if (*v8)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_29;
    goto LABEL_25;
  }
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_28;
    }
LABEL_25:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_28:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v8, v26);
  }
LABEL_29:
  v27 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  ++*((_DWORD *)v4 + 6);
  *(_QWORD *)(v27 + 8) = v4;
  ++v4[2];
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v28 = &off_1E33AEE60;
  v28[1] = v4;
  v28[2] = v27;
  v28[3] = v6;
  v29 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v29 = 1;
  v30 = *((_DWORD *)v4 + 6);
  *(_QWORD *)(v29 + 8) = v4;
  ++v4[2];
  *((_DWORD *)v4 + 6) = v30 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E33AEE38;
  result[1] = v4;
  result[2] = v29;
  result[3] = v28;
  v35 = result;
  v31 = v4[1];
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 - 96) + 104))(v32 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v33, 2, (uint64_t *)&v35);
      result = v35;
      v35 = 0;
      if (!result)
        return result;
    }
    else
    {
      v35 = 0;
    }
    v34 = (uint64_t (**)())*result;
  }
  else
  {
    v35 = 0;
    v34 = off_1E33AEE38;
  }
  return (_QWORD *)v34[1]();
}

_QWORD *`non-virtual thunk to'WebCore::FileReader::didStartLoading(WebCore::FileReader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)this - 56);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AED98;
  v2[1] = v1;
  v4 = v2;
  WebCore::FileReader::enqueueTask(v1, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebCore::FileReader::didReceiveData(WebCore::FileReader *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AEDC0;
  v2[1] = this;
  v4 = v2;
  WebCore::FileReader::enqueueTask(this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::FileReader::didReceiveData(WebCore::FileReader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)this - 56);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AEDC0;
  v2[1] = v1;
  v4 = v2;
  WebCore::FileReader::enqueueTask(v1, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebCore::FileReader::didFinishLoading(WebCore::FileReader *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AEDE8;
  v2[1] = this;
  v4 = v2;
  WebCore::FileReader::enqueueTask(this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::FileReader::didFinishLoading(WebCore::FileReader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)this - 56);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33AEDE8;
  v2[1] = v1;
  v4 = v2;
  WebCore::FileReader::enqueueTask(v1, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebCore::FileReader::didFail(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E33AEE10;
  *(_QWORD *)(v4 + 8) = a1;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebCore::FileReader::enqueueTask(a1, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::FileReader::didFail(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = (_QWORD *)(a1 - 56);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E33AEE10;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebCore::FileReader::enqueueTask(v3, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

WTF::StringImpl *WebCore::FileReader::result@<X0>(WebCore::FileReader *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  char v6;
  char v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (result && !*((_QWORD *)this + 14) && *((_DWORD *)this + 18) == 2)
  {
    if (*((_DWORD *)this + 22))
    {
      result = WebCore::FileReaderLoader::stringResult(result, a2, &v8);
      v6 = (char)v8;
      if (v8)
      {
        *(_QWORD *)a3 = v8;
        *(_DWORD *)(a3 + 8) = 0;
        v6 = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      *(_BYTE *)(a3 + 16) = v6;
    }
    else
    {
      WebCore::FileReaderLoader::arrayBufferResult(result, (JSC::ArrayBuffer *)a2, &v8);
      result = v8;
      if (v8)
      {
        *(_DWORD *)v8 += 2;
        *(_QWORD *)a3 = result;
        v7 = 1;
        *(_DWORD *)(a3 + 8) = 1;
        result = (WTF::StringImpl *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      }
      else
      {
        v7 = 0;
        *(_BYTE *)a3 = 0;
      }
      *(_BYTE *)(a3 + 16) = v7;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void WebCore::BlobURLRegistry::~BlobURLRegistry(WebCore::BlobURLRegistry *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 48 * i + 16) != -1)
        {
          v6 = v3 + 48 * i;
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(unsigned int *)(v7 - 4);
            if ((_DWORD)v8)
            {
              v9 = *(WTF::StringImpl ***)(v6 + 32);
              do
              {
                v10 = *v9;
                if (*v9 != (WTF::StringImpl *)-1)
                {
                  *v9 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                      WTF::StringImpl::destroy(v10, a2);
                    else
                      *(_DWORD *)v10 -= 2;
                  }
                }
                v9 += 5;
                --v8;
              }
              while (v8);
            }
            WTF::fastFree((WTF *)(v7 - 16), a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::URLRegistry::~URLRegistry(this);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 48 * i + 16) != -1)
        {
          v6 = v3 + 48 * i;
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(unsigned int *)(v7 - 4);
            if ((_DWORD)v8)
            {
              v9 = *(WTF::StringImpl ***)(v6 + 32);
              do
              {
                v10 = *v9;
                if (*v9 != (WTF::StringImpl *)-1)
                {
                  *v9 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                      WTF::StringImpl::destroy(v10, a2);
                    else
                      *(_DWORD *)v10 -= 2;
                  }
                }
                v9 += 5;
                --v8;
              }
              while (v8);
            }
            WTF::fastFree((WTF *)(v7 - 16), a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::URLRegistry::~URLRegistry(this);
}

uint64_t WebCore::URLRegistry::lookup(WebCore::URLRegistry *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::Blob::isFile(WebCore::Blob *this)
{
  return 0;
}

uint64_t WebCore::Blob::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

_DWORD *WebCore::Blob::deref(_DWORD *this)
{
  if (this[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[4];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Blob::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Blob::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 24) + 8))(this - 24);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::FileReader::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::FileReader *WebCore::FileReader::deref(WebCore::FileReader *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::FileReader::~FileReader(this, a2);
    return (WebCore::FileReader *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::FileReader::eventTargetInterface(WebCore::FileReader *this)
{
  return 57;
}

uint64_t WebCore::FileReader::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FileReader::eventTargetInterface(WebCore::FileReader *this)
{
  return 57;
}

uint64_t `non-virtual thunk to'WebCore::FileReader::scriptExecutionContext(WebCore::FileReader *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::FileReader::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

WebCore::FileReader *`non-virtual thunk to'WebCore::FileReader::derefEventTarget(WebCore::FileReader *this, void *a2)
{
  return WebCore::FileReader::deref((WebCore::FileReader *)((char *)this - 32), a2);
}

void WebCore::File::~File(WebCore::File *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Blob::~Blob(this);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Blob::~Blob(this);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::File::isFile(WebCore::File *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::File::~File(WebCore::File *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Blob::~Blob((WebCore::File *)((char *)this - 24));
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Blob::~Blob((WebCore::File *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::callOnFileThread(WTF::Function<void ()(void)> &&)::$_0 &&>>()
{
  _QWORD *v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t result;
  WTF *v4;
  void *v5;
  _QWORD *v6;
  unsigned int *v7;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E33AE908;
  v6 = v0;
  WTF::Thread::create();
  if (v7)
  {
    do
    {
      v1 = __ldaxr(v7);
      v2 = v1 - 1;
    }
    while (__stlxr(v2, v7));
    if (!v2)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v4, v5);
    }
  }
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::callOnFileThread(WTF::Function<void ()(void)> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  void *v0;
  unint64_t v2;
  uint64_t *v3;
  char v4;
  char v6;
  int v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;
  int v18;
  void *v19;
  unsigned __int8 *v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 **v24;

  while (1)
  {
    WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v16);
    if (__ldaxr((unsigned __int8 *)&unk_1ECE83330))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECE83330))
    {
      goto LABEL_5;
    }
    MEMORY[0x19AEA534C](&unk_1ECE83330);
LABEL_5:
    if (byte_1ECE83358)
    {
LABEL_38:
      v8 = 0;
      goto LABEL_30;
    }
    while (1)
    {
      v2 = qword_1ECE83338;
      if (qword_1ECE83338 != qword_1ECE83340)
        break;
      v17 = 0x7FF0000000000000;
      v18 = 1;
      v22 = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v17);
      v23 = v3;
      if (!WTF::TimeWithDynamicClockType::operator<())
      {
        v19 = &unk_1ECE83330;
        v20 = byte_1ECE83331;
        v22 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        v23 = &v22;
        v24 = &v20;
        v21[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v21[1] = v21;
        v21[2] = &v19;
        v4 = WTF::ParkingLot::parkConditionallyImpl() & 1;
        goto LABEL_9;
      }
      v7 = __ldxr((unsigned __int8 *)&unk_1ECE83330);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)&unk_1ECE83330))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE83330);
LABEL_23:
      v4 = 0;
LABEL_9:
      if (__ldaxr((unsigned __int8 *)&unk_1ECE83330))
      {
        __clrex();
LABEL_12:
        MEMORY[0x19AEA534C](&unk_1ECE83330);
        goto LABEL_13;
      }
      if (__stxr(1u, (unsigned __int8 *)&unk_1ECE83330))
        goto LABEL_12;
LABEL_13:
      if (byte_1ECE83358)
        v6 = 0;
      else
        v6 = v4;
      if ((v6 & 1) == 0)
        goto LABEL_38;
    }
    v8 = *(WTF **)(qword_1ECE83348 + 8 * qword_1ECE83338);
    *(_QWORD *)(qword_1ECE83348 + 8 * qword_1ECE83338) = 0;
    v9 = qword_1ECE83348;
    v10 = (WTF **)(qword_1ECE83348 + 8 * v2);
    v11 = *v10;
    *v10 = 0;
    if (v11)
    {
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree(v11, v0);
    }
    if (qword_1ECE83338 > v2)
    {
      memmove((void *)(v9 + 8 * v2), v10 + 1, v9 + 8 * qword_1ECE83340 - (_QWORD)(v10 + 1));
      qword_1ECE83340 = (qword_1ECE83340 + (unint64_t)dword_1ECE83350 - 1)
                      % dword_1ECE83350;
    }
    else
    {
      memmove((void *)(v9 + 8 * qword_1ECE83338 + 8), (const void *)(v9 + 8 * qword_1ECE83338), (size_t)v10 - v9 + -8 * qword_1ECE83338);
      qword_1ECE83338 = (qword_1ECE83338 + 1) % (unint64_t)dword_1ECE83350;
    }
LABEL_30:
    v13 = __ldxr((unsigned __int8 *)&unk_1ECE83330);
    if (v13 != 1)
    {
      __clrex();
LABEL_34:
      WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE83330);
      goto LABEL_35;
    }
    if (__stlxr(0, (unsigned __int8 *)&unk_1ECE83330))
      goto LABEL_34;
LABEL_35:
    (*(void (**)(_QWORD))(**(_QWORD **)v8 + 16))(*(_QWORD *)v8);
    v15 = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WTF::fastFree(v8, v14);
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v16);
  }
}

uint64_t *WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  int v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *((unsigned int *)result + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = (char *)result[2];
    v5 = v2 + 1;
    v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = (uint64_t)v6;
    v7 = v3[1];
    if (*v3 > v7)
    {
      memcpy(v6, v4, 8 * v7);
      v9 = *v3 - v1 + *((unsigned int *)v3 + 6);
      result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v9), &v4[8 * *v3], 8 * v1 - 8 * *v3);
      *v3 = v9;
    }
    else
    {
      result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    }
    if (v4)
    {
      if ((char *)v3[2] == v4)
      {
        v3[2] = 0;
        *((_DWORD *)v3 + 6) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v8);
    }
  }
  return result;
}

uint64_t WTF::switchOn<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[4];
  _QWORD *v10;

  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&>(v7, v8);
  }
  else
  {
    v10 = v9;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E33AE968[v5])(&v10, a1);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    goto LABEL_21;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v3 + 64) && (v14 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v8 = atomic_load((unint64_t *)(v14 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 48);
  }
  v9 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v10 = v7 + v9 <= v8 && v8 >= v9;
    if (v10)
      v7 = 0;
    goto LABEL_8;
  }
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (v10)
  {
LABEL_21:
    v7 = 0;
    goto LABEL_8;
  }
  v12 = *(_BYTE *)(v2 + 4) - 4;
  if (v12 > 7u)
    LOBYTE(v13) = 0;
  else
    v13 = qword_1969F0EA8[(char)v12];
  v7 = (-1 << v13) & v11;
LABEL_8:
  **(_QWORD **)(*(_QWORD *)result + 8) += v7;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*(_BYTE *)(*a2 + 64) && (v4 = *(_QWORD *)(v2 + 32)) != 0)
    v3 = *(_QWORD *)(v4 + 32);
  else
    v3 = *(_QWORD *)(v2 + 48);
  **(_QWORD **)(*(_QWORD *)result + 16) += v3;
  return result;
}

_QWORD ***std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&>(_QWORD ***result, uint64_t a2)
{
  ***result += *(_QWORD *)(*(_QWORD *)a2 + 72);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_2,WebCore::computeMemoryCost(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2)
    v2 = (*(_DWORD *)(v2 + 4) << ((*(_DWORD *)(v2 + 16) & 4) == 0));
  **(_QWORD **)(*(_QWORD *)result + 24) += v2;
  return result;
}

void WTF::switchOn<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &,WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::BlobBuilder *v3;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v3 = (WebCore::BlobBuilder *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::BlobBuilder::~BlobBuilder(v3);
  }
  else
  {
    v5 = &v4;
    ((void (*)(uint64_t **, uint64_t))off_1E33AE988[v2])(&v5, a1);
  }
}

void WebCore::BlobBuilder::~BlobBuilder(WebCore::BlobBuilder *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 5);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    do
    {
      v7 = v5[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AE9A8[v7])(&v8, v5);
      v5[10] = -1;
      v5 += 12;
      v6 -= 48;
    }
    while (v6);
    v5 = (unsigned int *)*((_QWORD *)this + 1);
  }
  if (v5)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &>(uint64_t **a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *result;
  uint64_t v4;
  size_t v5;
  JSC::ArrayBufferView *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  result = *a2;
  if (*a2)
  {
    v4 = **a1;
    result = (JSC::ArrayBufferView *)JSC::ArrayBufferView::span(result);
    if (v5)
    {
      v6 = result;
      v7 = v5;
      v8 = *(unsigned int *)(v4 + 32);
      v9 = *(unsigned int *)(v4 + 36);
      v10 = v5 + v9;
      if (v5 + v9 > v8)
      {
        v12 = v8 + (v8 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v10)
          v14 = v5 + v9;
        else
          v14 = v13;
        if (HIDWORD(v14))
          goto LABEL_18;
        v15 = *(void **)(v4 + 24);
        v16 = (void *)WTF::fastMalloc((WTF *)v14);
        *(_DWORD *)(v4 + 32) = v14;
        *(_QWORD *)(v4 + 24) = v16;
        memcpy(v16, v15, v9);
        if (v15)
        {
          if (*(void **)(v4 + 24) == v15)
          {
            *(_QWORD *)(v4 + 24) = 0;
            *(_DWORD *)(v4 + 32) = 0;
          }
          WTF::fastFree((WTF *)v15, v17);
        }
      }
      v11 = *(unsigned int *)(v4 + 36);
      if (v10 >= v11)
      {
        result = (JSC::ArrayBufferView *)memcpy((void *)(*(_QWORD *)(v4 + 24) + v11), v6, v7);
        *(_DWORD *)(v4 + 36) = v10;
        return result;
      }
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x195B6FE50);
    }
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v4)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v3 = (v3 & 0x3FFFFFFFFLL) + v4;
      }
    }
    v5 = **result;
    if (*(_BYTE *)(v2 + 64) && (v17 = *(_QWORD *)(v2 + 32)) != 0)
    {
      v6 = *(_QWORD *)(v17 + 32);
      if (!v6)
        return result;
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 48);
      if (!v6)
        return result;
    }
    v7 = *(unsigned int *)(v5 + 32);
    v8 = *(unsigned int *)(v5 + 36);
    v9 = v6 + v8;
    if (v6 + v8 > v7)
    {
      v11 = v7 + (v7 >> 2);
      if (v11 >= 0x10)
        v12 = v11 + 1;
      else
        v12 = 16;
      if (v12 <= v9)
        v13 = v6 + v8;
      else
        v13 = v12;
      if (HIDWORD(v13))
        goto LABEL_28;
      v14 = *(void **)(v5 + 24);
      v15 = (void *)WTF::fastMalloc((WTF *)v13);
      *(_DWORD *)(v5 + 32) = v13;
      *(_QWORD *)(v5 + 24) = v15;
      memcpy(v15, v14, v8);
      if (v14)
      {
        if (*(void **)(v5 + 24) == v14)
        {
          *(_QWORD *)(v5 + 24) = 0;
          *(_DWORD *)(v5 + 32) = 0;
        }
        WTF::fastFree((WTF *)v14, v16);
      }
    }
    v10 = *(unsigned int *)(v5 + 36);
    if (v9 >= v10)
    {
      result = (uint64_t **)memcpy((void *)(*(_QWORD *)(v5 + 24) + v10), (const void *)v3, v6);
      *(_DWORD *)(v5 + 36) = v9;
      return result;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x195B6FF98);
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &>(uint64_t **result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  int v23;
  char v24;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = **result;
    v4 = *(_DWORD *)(v3 + 36);
    if (v4)
    {
      v6 = (_QWORD *)(v3 + 8);
      v20 = *(WTF::StringImpl **)(v3 + 24);
      v7 = *(_DWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)&v21 = __PAIR64__(v4, v7);
      v23 = 0;
      v8 = *(_DWORD *)(v3 + 20);
      if (v8 == *(_DWORD *)(v3 + 16))
      {
        WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v6, (unint64_t)&v20);
      }
      else
      {
        v15 = *v6 + 48 * v8;
        *(_BYTE *)v15 = 0;
        *(_DWORD *)(v15 + 40) = -1;
        v16 = v23;
        if (v23 != -1)
        {
          ((void (*)(__int128 *, uint64_t, WTF::StringImpl **))off_1E33AECF8[v23])(&v18, v15, &v20);
          *(_DWORD *)(v15 + 40) = v16;
        }
        ++*(_DWORD *)(v3 + 20);
      }
      if (v23 != -1)
        ((void (*)(__int128 *, WTF::StringImpl **))off_1E33AE9A8[v23])(&v18, &v20);
      v2 = *(_QWORD *)a2;
    }
    v9 = *(WTF::StringImpl **)(v2 + 80);
    if (v9)
    {
      v10 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      v11 = *(_OWORD *)(v2 + 104);
      v18 = *(_OWORD *)(v2 + 88);
      v19 = v11;
      *(_DWORD *)v9 = v10 + 4;
    }
    else
    {
      v17 = *(_OWORD *)(v2 + 104);
      v18 = *(_OWORD *)(v2 + 88);
      v19 = v17;
    }
    result = (uint64_t **)(v3 + 8);
    v20 = v9;
    v21 = v18;
    v22 = v19;
    v23 = 1;
    v12 = *(_DWORD *)(v3 + 20);
    if (v12 == *(_DWORD *)(v3 + 16))
    {
      result = (uint64_t **)WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)result, (unint64_t)&v20);
    }
    else
    {
      v13 = (uint64_t)&(*result)[6 * v12];
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 40) = -1;
      v14 = v23;
      if (v23 != -1)
      {
        result = (uint64_t **)((uint64_t (*)(char *, uint64_t, WTF::StringImpl **))off_1E33AECF8[v23])(&v24, v13, &v20);
        *(_DWORD *)(v13 + 40) = v14;
      }
      ++*(_DWORD *)(v3 + 20);
    }
    if (v23 != -1)
      result = (uint64_t **)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33AE9A8[v23])(&v24, &v20);
    v23 = -1;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (uint64_t **)WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildBlobData(WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobPropertyBag const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String> &>(WebCore::BlobBuilder ***a1, const WTF::String **a2)
{
  return WebCore::BlobBuilder::append(**a1, *a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Blob::loadBlob(WebCore::FileReaderLoader::ReadType,WTF::CompletionHandler<void ()(WebCore::BlobLoader &)> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;

  *a1 = &off_1E33AE9C8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 40);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 16);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Blob::loadBlob(WebCore::FileReaderLoader::ReadType,WTF::CompletionHandler<void ()(WebCore::BlobLoader &)> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E33AE9C8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 40);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 16);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::Blob::loadBlob(WebCore::FileReaderLoader::ReadType,WTF::CompletionHandler<void ()(WebCore::BlobLoader &)> &&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v7 = *(_QWORD *)(v3 + 120);
  v6 = (uint64_t *)(v3 + 120);
  v5 = v7;
  if (!v7)
    goto LABEL_9;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v5 + 8 * v12);
  if (v13 != a2)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      ++v14;
      if (v13 == a2)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v5 - 4);
  }
LABEL_8:
  if (v12 != *(_DWORD *)(v5 - 4))
  {
    v16 = (uint64_t *)(v5 + 8 * v12);
    v17 = *v16;
    *v16 = 0;
    v25 = v17;
    v18 = *v6;
    if (!*v6 || (v18 += 8 * *(unsigned int *)(v18 - 4), (uint64_t *)v18 != v16))
    {
      if ((uint64_t *)v18 != v16)
      {
        *v16 = -1;
        ++*(_DWORD *)(*v6 - 16);
        v19 = *v6;
        v20 = *v6 ? *(_DWORD *)(v19 - 12) - 1 : -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v6;
        if (*v6)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<std::unique_ptr<WebCore::BlobLoader>,std::unique_ptr<WebCore::BlobLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>>::rehash(v6, v23 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_9:
    v25 = 0;
  }
  return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v25, 0);
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::BlobLoader>,std::unique_ptr<WebCore::BlobLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::BlobLoader>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (uint64_t *)(v4 + 8 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 8 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(v13 + 8 * v20);
          std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v22, 0);
          v23 = *v11;
          *v11 = 0;
          *v22 = v23;
          std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)(v4 + 8 * v9), 0);
        }
        else
        {
          std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)(v4 + 8 * v9), 0);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::Blob::stream(void)::BlobStreamSource::~BlobStreamSource(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  _DWORD *v15;

  *(_QWORD *)a1 = off_1E33AE9F0;
  *(_QWORD *)(a1 + 16) = &unk_1E33AEA60;
  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(uint64_t **)(a1 + 80);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_18;
    v11 = &v6[v4];
    v12 = 8 * v5 - 8 * v4;
    do
    {
      v11 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v11, a2)+ 1;
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    if (v5)
    {
      v7 = 8 * v5;
      do
      {
        v6 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v6, a2)+ 1;
        v7 -= 8;
      }
      while (v7);
      v6 = *(uint64_t **)(a1 + 80);
      v4 = *(_QWORD *)(a1 + 64);
    }
    v8 = *(unsigned int *)(a1 + 88);
    if (v4 != v8)
    {
      v9 = &v6[v4];
      v10 = 8 * v8 - 8 * v4;
      do
      {
        v9 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v9, a2)+ 1;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v6 = *(uint64_t **)(a1 + 80);
LABEL_18:
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree((WTF *)v6, a2);
  }
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
  v14 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = off_1E33676C0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v14)
  {
    v15 = *(_DWORD **)v14;
    *(_QWORD *)v14 = 0;
    if (v15)
    {
      if (v15[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
      else
        --v15[4];
    }
    WTF::fastFree(v14, a2);
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  return a1;
}

{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::Blob::stream(void)::BlobStreamSource::~BlobStreamSource(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t *WebCore::Blob::stream(void)::BlobStreamSource::didReceiveBinaryChunk(uint64_t *result, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v3;
  void *v4;
  BOOL v5;
  WTF::DeferrableRefCountedBase *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::DeferrableRefCountedBase *v23;

  v3 = (uint64_t)result;
  if (*((_BYTE *)result + 120) != 2)
  {
    do
      v7 = __ldaxr((unsigned int *)this);
    while (__stlxr(v7 + 1, (unsigned int *)this));
    v8 = result[8];
    v9 = result[9];
    if (v8)
    {
      if (v9 + 1 != v8)
        goto LABEL_26;
      LODWORD(v10) = *((_DWORD *)result + 22);
    }
    else
    {
      v10 = *((unsigned int *)result + 22);
      if (v9)
      {
        if (v9 != v10 - 1)
          goto LABEL_26;
      }
      else if ((_DWORD)v10)
      {
        goto LABEL_26;
      }
    }
    v11 = v10;
    v12 = ((unint64_t)v10 >> 2) + v10;
    if (v12 <= 0xF)
      v12 = 15;
    if (v12 >= 0x1FFFFFFF)
      goto LABEL_31;
    v13 = (char *)result[10];
    v14 = v12 + 1;
    v15 = (char *)WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
    *(_DWORD *)(v3 + 88) = v14;
    *(_QWORD *)(v3 + 80) = v15;
    v17 = *(_QWORD *)(v3 + 64);
    v16 = *(_QWORD *)(v3 + 72);
    if (v17 > v16)
    {
      memcpy(v15, v13, 8 * v16);
      v18 = *(_QWORD *)(v3 + 64);
      v19 = v18 - v11 + *(unsigned int *)(v3 + 88);
      memcpy((void *)(*(_QWORD *)(v3 + 80) + 8 * v19), &v13[8 * v18], 8 * v11 - 8 * v18);
      *(_QWORD *)(v3 + 64) = v19;
      if (!v13)
        goto LABEL_26;
LABEL_23:
      if (*(char **)(v3 + 80) == v13)
      {
        *(_QWORD *)(v3 + 80) = 0;
        *(_DWORD *)(v3 + 88) = 0;
      }
      WTF::fastFree((WTF *)v13, this);
      goto LABEL_26;
    }
    memcpy(&v15[8 * v17], &v13[8 * v17], 8 * v16 - 8 * v17);
    if (v13)
      goto LABEL_23;
LABEL_26:
    v21 = *(_QWORD *)(v3 + 72);
    v20 = *(_QWORD *)(v3 + 80);
    v23 = 0;
    *(_QWORD *)(v20 + 8 * v21) = this;
    if (v21 == *(unsigned int *)(v3 + 88) - 1)
      v22 = 0;
    else
      v22 = v21 + 1;
    *(_QWORD *)(v3 + 72) = v22;
    return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v23, this);
  }
  *((_BYTE *)result + 120) = 1;
  if (!*((_BYTE *)result + 40))
  {
    result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_31:
    __break(0xC471u);
    return result;
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v23);
  v5 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v3 + 32), &v23);
  v6 = v23;
  v23 = 0;
  if (v6)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  if (v5)
    return (uint64_t *)WebCore::ReadableStreamSource::startFinished((WebCore::ReadableStreamSource *)(v3 + 16), v4);
  else
    return (uint64_t *)WebCore::Blob::stream(void)::BlobStreamSource::didFail((char *)v3, (WTF::StringImpl *)0x24);
}

char *WebCore::Blob::stream(void)::BlobStreamSource::didFinishLoading(char *result)
{
  JSC::Structure *v1;
  char *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  _OWORD v6[4];
  uint64_t v7;

  result[121] = 1;
  if (result[120] && *((_QWORD *)result + 8) == *((_QWORD *)result + 9))
  {
    if (result[112])
    {
      if (result[40])
        return (char *)WebCore::ReadableStreamDefaultController::error((_DWORD **)result + 4, (unsigned __int8 *)result + 96);
      goto LABEL_9;
    }
    if (!result[40])
    {
LABEL_9:
      v2 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebCore::Blob::stream(void)::BlobStreamSource::didFail(v2, v3);
    }
    v5 = (WTF *)((char *)v6 + 8);
    memset(v6, 0, sizeof(v6));
    v7 = 0;
    *((_QWORD *)&v6[0] + 1) = *((_QWORD *)result + 4);
    v4 = 0x800000001;
    v1 = *(JSC::Structure **)(16 * (**((_DWORD **)&v6[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v1, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v1 + 7) + 41456) + 4008));
    return (char *)v6 + 8;
  }
  return result;
}

char *WebCore::Blob::stream(void)::BlobStreamSource::didFail(char *result, WTF::StringImpl *a2)
{
  char *v2;
  unsigned __int8 *v3;
  JSC::Structure *v4;
  uint64_t v5;
  WTF *v6;
  _OWORD v7[4];
  uint64_t v8;

  v2 = result;
  result[96] = (char)a2;
  v3 = (unsigned __int8 *)(result + 96);
  if (result[112])
  {
    result = (char *)*((_QWORD *)result + 13);
    *((_QWORD *)v2 + 13) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *((_QWORD *)result + 13) = 0;
    result[112] = 1;
  }
  v2[121] = 1;
  if (v2[120] && *((_QWORD *)v2 + 8) == *((_QWORD *)v2 + 9))
  {
    if (v2[112])
    {
      if (v2[40])
        return (char *)WebCore::ReadableStreamDefaultController::error((_DWORD **)v2 + 4, v3);
LABEL_15:
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x195B70C24);
    }
    if (!v2[40])
      goto LABEL_15;
    v6 = (WTF *)((char *)v7 + 8);
    memset(v7, 0, sizeof(v7));
    v8 = 0;
    *((_QWORD *)&v7[0] + 1) = *((_QWORD *)v2 + 4);
    v5 = 0x800000001;
    v4 = *(JSC::Structure **)(16 * (**((_DWORD **)&v7[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v4, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v4 + 7) + 41456) + 4008));
    return (char *)v7 + 8;
  }
  return result;
}

char *WebCore::Blob::stream(void)::BlobStreamSource::doStart(char *result)
{
  JSC::Structure *v1;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  _OWORD v5[4];
  uint64_t v6;

  result[120] = 2;
  if (result[121] == 1 && *((_QWORD *)result + 8) == *((_QWORD *)result + 9))
  {
    if (result[112])
    {
      if (result[40])
        return (char *)WebCore::ReadableStreamDefaultController::error((_DWORD **)result + 4, (unsigned __int8 *)result + 96);
      goto LABEL_9;
    }
    if (!result[40])
    {
LABEL_9:
      v2 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WebCore::Blob::stream(void)::BlobStreamSource::doPull(v2);
    }
    v4 = (WTF *)((char *)v5 + 8);
    memset(v5, 0, sizeof(v5));
    v6 = 0;
    *((_QWORD *)&v5[0] + 1) = *((_QWORD *)result + 4);
    v3 = 0x800000001;
    v1 = *(JSC::Structure **)(16 * (**((_DWORD **)&v5[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v1, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v1 + 7) + 41456) + 4008));
    return (char *)v5 + 8;
  }
  return result;
}

uint64_t *WebCore::Blob::stream(void)::BlobStreamSource::doPull(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::FragmentedSharedBuffer *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  WTF::DeferrableRefCountedBase *v10;
  void *v11;
  void *v12;
  JSC::Structure *v13;
  uint64_t v14;
  _QWORD v15[12];
  WebCore::FragmentedSharedBuffer *v16;

  v2 = result;
  if (*((_BYTE *)result + 121) == 1 && *((_BYTE *)result + 120) && result[8] == result[9])
  {
    if (*((_BYTE *)result + 112))
    {
      if (*((_BYTE *)result + 40))
        return (uint64_t *)WebCore::ReadableStreamDefaultController::error((_DWORD **)result + 4, (unsigned __int8 *)result + 96);
    }
    else if (*((_BYTE *)result + 40))
    {
      LOBYTE(v15[0]) = 0;
      v15[2] = &v15[4];
      memset(&v15[3], 0, 72);
      v15[4] = result[4];
      v15[1] = 0x800000001;
      v13 = *(JSC::Structure **)(16 * (*(_DWORD *)v15[4] & 0xFFFFFFFE) + 0x28);
      WebCore::invokeReadableStreamDefaultControllerFunction(v13, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v13 + 7) + 41456) + 4008));
      return &v15[4];
    }
    goto LABEL_20;
  }
  v3 = result[8];
  if (v3 == result[9])
  {
    *((_BYTE *)result + 120) = 2;
    return result;
  }
  v4 = result[10];
  v5 = *(WebCore::FragmentedSharedBuffer **)(v4 + 8 * v3);
  *(_QWORD *)(v4 + 8 * v3) = 0;
  v16 = v5;
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)(result[10] + 8 * v3), a2);
  v6 = v2[8];
  if (v6 == *((unsigned int *)v2 + 22) - 1)
    v7 = 0;
  else
    v7 = v6 + 1;
  v2[8] = v7;
  if (!*((_BYTE *)v2 + 40))
  {
LABEL_20:
    v14 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)WebCore::Blob::stream(void)::BlobStreamSource::doCancel(v14);
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v5, v15);
  v9 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)v2 + 4, v15);
  v10 = (WTF::DeferrableRefCountedBase *)v15[0];
  v15[0] = 0;
  if (v10)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v10);
  if (v9)
  {
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v16, v8);
    return (uint64_t *)WebCore::ReadableStreamSource::startFinished((WebCore::ReadableStreamSource *)(v2 + 2), v11);
  }
  else
  {
    WebCore::Blob::stream(void)::BlobStreamSource::didFail((char *)v2, (WTF::StringImpl *)0x24);
    return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v16, v12);
  }
}

uint64_t *WebCore::Blob::stream(void)::BlobStreamSource::doCancel(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 121) = 2;
  v3 = *(_QWORD *)(a1 + 56);
  *(_WORD *)(v3 + 204) = 272;
  v4 = *(_QWORD *)(v3 + 144);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  result = *(uint64_t **)(a1 + 80);
  if (v6 <= v7)
  {
    if (v6 == v7)
      goto LABEL_16;
    v13 = &result[v6];
    v14 = 8 * v7 - 8 * v6;
    do
    {
      v13 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v13, a2)+ 1;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    if (v7)
    {
      v9 = 8 * v7;
      do
      {
        result = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(result, a2)+ 1;
        v9 -= 8;
      }
      while (v9);
      result = *(uint64_t **)(a1 + 80);
      v6 = *(_QWORD *)(a1 + 64);
    }
    v10 = *(unsigned int *)(a1 + 88);
    if (v6 != v10)
    {
      v11 = &result[v6];
      v12 = 8 * v10 - 8 * v6;
      do
      {
        v11 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v11, a2)+ 1;
        v12 -= 8;
      }
      while (v12);
    }
  }
  result = *(uint64_t **)(a1 + 80);
LABEL_16:
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    return (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Blob::stream(void)::BlobStreamSource::~BlobStreamSource(uint64_t a1, WTF::StringImpl *a2)
{
  return WebCore::Blob::stream(void)::BlobStreamSource::~BlobStreamSource(a1 - 16, a2);
}

{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::Blob::stream(void)::BlobStreamSource::~BlobStreamSource(a1 - 16, a2);
  return WTF::fastFree(v2, v3);
}

char *`non-virtual thunk to'WebCore::Blob::stream(void)::BlobStreamSource::doStart(char *result)
{
  JSC::Structure *v1;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  _OWORD v5[4];
  uint64_t v6;

  result[104] = 2;
  if (result[105] == 1 && *((_QWORD *)result + 6) == *((_QWORD *)result + 7))
  {
    if (result[96])
    {
      if (result[24])
        return (char *)WebCore::ReadableStreamDefaultController::error((_DWORD **)result + 2, (unsigned __int8 *)result + 80);
      goto LABEL_9;
    }
    if (!result[24])
    {
LABEL_9:
      v2 = std::__throw_bad_optional_access[abi:sn180100]();
    }
    v4 = (WTF *)((char *)v5 + 8);
    memset(v5, 0, sizeof(v5));
    v6 = 0;
    *((_QWORD *)&v5[0] + 1) = *((_QWORD *)result + 2);
    v3 = 0x800000001;
    v1 = *(JSC::Structure **)(16 * (**((_DWORD **)&v5[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v1, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v1 + 7) + 41456) + 4008));
    return (char *)v5 + 8;
  }
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::Blob::stream(void)::BlobStreamSource::doPull(uint64_t a1, void *a2)
{
  return WebCore::Blob::stream(void)::BlobStreamSource::doPull((uint64_t *)(a1 - 16), a2);
}

uint64_t *`non-virtual thunk to'WebCore::Blob::stream(void)::BlobStreamSource::doCancel(uint64_t a1, void *a2)
{
  return WebCore::Blob::stream(void)::BlobStreamSource::doCancel(a1 - 16, a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)(a1 + 32);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 5;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::~AsyncFileStream()::$_0,void>::~CallableWrapper(_QWORD *a1, int *a2)
{
  WTF::FileSystemImpl *v3;

  v3 = (WTF::FileSystemImpl *)a1[1];
  *a1 = &off_1E33AEAB8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 != -1)
    {
      WTF::FileSystemImpl::closeFile(v3, a2);
      *(_DWORD *)v3 = -1;
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::~AsyncFileStream()::$_0,void>::~CallableWrapper(WTF *this, int *a2)
{
  WTF::FileSystemImpl *v3;

  v3 = (WTF::FileSystemImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AEAB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 != -1)
    {
      WTF::FileSystemImpl::closeFile(v3, a2);
      *(_DWORD *)v3 = -1;
    }
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::~AsyncFileStream()::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E33AEAE0;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainThread();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::~AsyncFileStream()::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, int *a2)
{
  WTF::FileSystemImpl *v3;

  v3 = (WTF::FileSystemImpl *)a1[1];
  *a1 = &off_1E33AEAE0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 != -1)
    {
      WTF::FileSystemImpl::closeFile(v3, a2);
      *(_DWORD *)v3 = -1;
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::~AsyncFileStream()::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, int *a2)
{
  WTF::FileSystemImpl *v3;

  v3 = (WTF::FileSystemImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AEAE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 != -1)
    {
      WTF::FileSystemImpl::closeFile(v3, a2);
      *(_DWORD *)v3 = -1;
    }
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33AEB08;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33AEB08;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0,void>::call(uint64_t result)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 8) + 32));
  if ((v1 & 1) == 0)
  {
    v5 = *(_QWORD *)(result + 8);
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(result + 16) + 16))(&v6);
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v2 = &off_1E33AEB30;
    v2[1] = v5;
    v3 = v6;
    v6 = 0;
    v2[2] = v3;
    v7 = v2;
    WTF::callOnMainThread();
    v4 = v7;
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    result = v6;
    v6 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33AEB30;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33AEB30;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::perform(WTF::Function<WTF::Function<void ()(WebCore::FileStreamClient &)> ()(WebCore::FileStream &)> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 8) + 32));
  if ((v1 & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), *(_QWORD *)(*(_QWORD *)(result + 8) + 24));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::getSize(WTF::String const&,std::optional<WTF::WallTime>)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E33AEB58;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::getSize(WTF::String const&,std::optional<WTF::WallTime>)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AEB58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::getSize(WTF::String const&,std::optional<WTF::WallTime>)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::call@<X0>(uint64_t a1@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::FileSystemImpl *v4;
  double v5;
  uint64_t v6;
  double v7;
  const WTF::String *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *result;

  v4 = (WTF::FileSystemImpl *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)(a1 + 8), a2));
  if (!(_BYTE)v8)
    goto LABEL_16;
  if (!v6)
    goto LABEL_13;
  v9 = -9.22337204e18;
  if (v5 > -9.22337204e18)
    v10 = v5;
  else
    v10 = -9.22337204e18;
  v11 = (uint64_t)v10;
  v12 = 0x7FFFFFFFFFFFFFFFLL;
  if (v5 >= 9.22337204e18)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  if (v7 > -9.22337204e18)
    v9 = v7;
  if (v7 < 9.22337204e18)
    v12 = (uint64_t)v9;
  if (v11 == v12)
  {
LABEL_13:
    v13 = WTF::FileSystemImpl::fileSize(v4, v8);
    if (v14)
      v15 = v13;
    else
      v15 = -1;
  }
  else
  {
LABEL_16:
    v15 = -1;
  }
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E33AEB80;
  result[1] = v15;
  *a3 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::getSize(WTF::String const&,std::optional<WTF::WallTime>)::$_0::operator() const(WebCore::FileStream &)::{lambda(WebCore::FileStreamClient &)#1},void,WebCore::FileStreamClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::openForRead(WTF::String const&,long long,long long)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E33AEBA8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::openForRead(WTF::String const&,long long,long long)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AEBA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::openForRead(WTF::String const&,long long,long long)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t result;

  if (*(_DWORD *)a2 == -1)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = WTF::FileSystemImpl::openFile();
    *(_DWORD *)a2 = v7;
    if (v7 == -1 || v5 >= 1 && WTF::FileSystemImpl::seekFile() < 0)
    {
      v8 = 0;
      goto LABEL_7;
    }
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v6;
  }
  v8 = 1;
LABEL_7:
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E33AEBD0;
  *(_BYTE *)(result + 8) = v8;
  *a3 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::openForRead(WTF::String const&,long long,long long)::$_0::operator() const(WebCore::FileStream &)::{lambda(WebCore::FileStreamClient &)#1},void,WebCore::FileStreamClient &>::call(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::close(void)::$_0,void>::call(uint64_t result, int *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(result + 8);
  if (*v2 != -1)
  {
    result = WTF::FileSystemImpl::closeFile(*(WTF::FileSystemImpl **)(result + 8), a2);
    *v2 = -1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::read(void *,int)::$_0,WTF::Function<void ()(WebCore::FileStreamClient &)>,WebCore::FileStream &>::call@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t result;

  if (*a2 == -1)
    goto LABEL_9;
  if (*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1) >= *(int *)(a1 + 16))
    v5 = *(_DWORD *)(a1 + 16);
  else
    v5 = a2[4] - a2[2];
  if (v5 < 1)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v6 = WTF::FileSystemImpl::readFromFile();
  v7 = v6;
  if ((v6 & 0x80000000) != 0)
  {
LABEL_9:
    v7 = -1;
  }
  else if (v6)
  {
    *((_QWORD *)a2 + 1) += v6;
  }
LABEL_11:
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E33AEC48;
  *(_DWORD *)(result + 8) = v7;
  *a3 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncFileStream::read(void *,int)::$_0::operator() const(WebCore::FileStream &)::{lambda(WebCore::FileStreamClient &)#1},void,WebCore::FileStreamClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(a1 + 8));
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (unint64_t *)v6;
    do
    {
      v15 = v14[2];
      if (v15 != -1)
      {
        if (v15)
          v16 = 0;
        else
          v16 = *(_OWORD *)v14 == 0;
        if (v16)
        {
          WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v14, v10);
        }
        else
        {
          v17 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v14, v18);
          if (v14 == a3)
            v11 = v17;
        }
      }
      v14 += 6;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(48 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 48);
    do
    {
      *(v5 - 4) = 0;
      *(v5 - 3) = 0;
      *(v5 - 2) = 0;
      *v5 = 0;
      v5 += 6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::reinsert(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;

  v3 = *a2;
  v4 = a2[1];
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = 0;
  v7 = (v4 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v4 - 1640531527) << 16) ^ ((unsigned __int16)v4
                                                                                          - 1640531527);
  v8 = (v4 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v4) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v4) + (v7 >> 11));
  v9 = (v3 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v3 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v3
                                                                                               + (v8 >> 11));
  v10 = (v3 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v3) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v3) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (v13)
    v14 = v13;
  else
    v14 = 0x800000;
  do
  {
    v15 = v14 & v5;
    v16 = a1 + 48 * (v14 & v5);
    v14 = ++v6 + (v14 & v5);
  }
  while (*(_OWORD *)v16 != 0 || *(_QWORD *)(v16 + 16) != 0);
  v18 = a1 + 48 * v15;
  v21 = *(WTF::StringImpl ***)(v18 + 32);
  v19 = (unint64_t *)(v18 + 32);
  v20 = v21;
  if (v21)
  {
    v25 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v25)
    {
      v26 = v20;
      do
      {
        v27 = *v26;
        if (*v26 != (WTF::StringImpl *)-1)
        {
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v27 -= 2;
          }
        }
        v26 += 5;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v20 - 2), a2);
  }
  v22 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v16 = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 16) = v22;
  *v19 = 0;
  v23 = a2[4];
  a2[4] = 0;
  *v19 = v23;
  return v16;
}

void WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  WTF **v11;
  const WTF::StringImpl *v12;
  WTF **v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v9 = v8 >> 8;
  v10 = v9 & v7;
  v11 = (WTF **)(v6 + 40 * (v9 & v7));
  if ((WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v11) & 1) == 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (*v11 == (WTF *)-1)
      {
        v13 = v11;
      }
      else if (WTF::equal(*v11, *a2, v12))
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        v22 = 0;
        v21 = v23 + 40 * v24;
        goto LABEL_19;
      }
      v10 = (v10 + v14) & v7;
      v11 = (WTF **)(v6 + 40 * v10);
      ++v14;
    }
    while (!WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v11));
    if (v13)
    {
      v13[4] = 0;
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v11 = v13;
    }
  }
  WTF::GenericHashTraits<WTF::URL>::assignToEmpty<WTF::URL,WTF::URL>((uint64_t)v11, (uint64_t *)a2);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_18;
LABEL_22:
    v11 = (WTF **)WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand(a1, v11);
    v17 = *a1;
    if (*a1)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_18;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_22;
LABEL_18:
  v21 = v17 + 40 * v20;
  v22 = 1;
LABEL_19:
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
}

uint64_t WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(40 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (WTF **)v6;
    do
    {
      if (*v13 != (WTF *)-1)
      {
        if (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v13))
        {
          v16 = *v13;
          *v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          v14 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::reinsert(a1, (uint64_t)v13);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
          if (v13 == a3)
            v11 = v14;
        }
      }
      v13 += 5;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v22;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v9 = (WTF **)(v3 + 40 * (v6 & v4));
    v22 = 0;
    WTF::URL::invalidate((WTF::URL *)&v22);
    v12 = WTF::equal(*v9, v22, v10);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v6 = ++v7 + v8;
  }
  while (!v12);
  v14 = *v9;
  *v9 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v9 = v15;
  v16 = v3 + 40 * v8;
  v17 = *(_DWORD *)(v16 + 8) & 0xFFFFFFFE | *(_DWORD *)(a2 + 8) & 1;
  *(_DWORD *)(v16 + 8) = v17;
  v18 = v17 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 8) >> 1) & 1));
  *(_DWORD *)(v16 + 8) = v18;
  v19 = v18 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 8) >> 2) & 1));
  *(_DWORD *)(v16 + 8) = v19;
  v20 = v19 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 8) >> 3) & 7));
  *(_DWORD *)(v16 + 8) = v20;
  *(_DWORD *)(v16 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFC0 | v20 & 0x3F;
  *(_OWORD *)(v16 + 12) = *(_OWORD *)(a2 + 12);
  *(_QWORD *)(v16 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(v16 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 8) &= ~1u;
  return v16;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;

  v2 = (uint64_t *)result;
  *(_QWORD *)a2 = 1;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = -1;
  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    v10 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)a2 + 4);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF::StringImpl *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 5;
        --v10;
      }
      while (v10);
    }
    result = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Blob::text(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33AEC80;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Blob::text(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AEC80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Blob::text(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  unsigned int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  objc_class *v11;

  v3 = *(unsigned __int16 **)(a2 + 16);
  if (v3)
  {
    v4 = v3[102];
    if (v4 >= 0x100)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v10 = 0;
      v11 = 0;
      LOBYTE(v9) = v4;
      WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v9, 0, &v11);
      result = v10;
      v10 = 0;
      if (!result)
        return result;
      goto LABEL_8;
    }
    v5 = *(_QWORD *)(a1 + 8);
    WebCore::FileReaderLoader::stringResult((WTF::StringImpl *)v3, (char *)a2, &v9);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v9 = 0;
  }
  WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(v5, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (!result)
    return result;
LABEL_8:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  *(_DWORD *)result -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Blob::arrayBuffer(WebCore::DOMPromiseDeferred<WebCore::IDLArrayBuffer> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33AECA8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Blob::arrayBuffer(WebCore::DOMPromiseDeferred<WebCore::IDLArrayBuffer> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AECA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::Blob::arrayBuffer(WebCore::DOMPromiseDeferred<WebCore::IDLArrayBuffer> &&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1, JSC::ArrayBuffer *a2)
{
  uint64_t v3;
  JSC::ArrayBuffer *v4;
  char v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *result;
  uint64_t v14;
  WebCore *v15;
  uint64_t v16;
  JSC::ArrayBuffer *v17;
  objc_class *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  objc_class *v31;

  v3 = *((_QWORD *)a2 + 2);
  if (!v3)
    goto LABEL_12;
  if (*(unsigned __int16 *)(v3 + 204) >= 0x100u)
  {
    v5 = *(_WORD *)(v3 + 204);
LABEL_13:
    LOBYTE(v27[0]) = v5;
    v28 = 1;
    v27[1] = 0;
    v10 = *(_QWORD *)(a1 + 8);
    v30 = 0;
    v31 = 0;
    LOBYTE(v29) = v5;
    WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v29, 0, &v31);
    v12 = v30;
    v30 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v9 = 1;
    return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33AECC0[v9])(&v29, v27);
  }
  v4 = *(JSC::ArrayBuffer **)(v3 + 152);
  if (!v4)
  {
LABEL_12:
    v5 = 8;
    goto LABEL_13;
  }
  if (*(_DWORD *)(v3 + 196) != *(_DWORD *)(v3 + 200))
  {
    JSC::ArrayBuffer::create(v4, a2);
    v4 = (JSC::ArrayBuffer *)v27[0];
    v27[0] = 0;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v27);
    if (v4)
      goto LABEL_8;
    goto LABEL_12;
  }
  *(_DWORD *)v4 += 2;
LABEL_8:
  v29 = 0;
  v27[0] = (uint64_t)v4;
  v28 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v29);
  v6 = (objc_class *)v27[0];
  v27[0] = 0;
  v31 = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_QWORD *)v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
  {
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v31);
    v9 = 0;
    return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33AECC0[v9])(&v29, v27);
  }
  v14 = *(_QWORD *)(v7 + 32);
  if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
    v15 = 0;
  else
    v15 = *(WebCore **)v14;
  v16 = *((_QWORD *)v15 + 7);
  MEMORY[0x19AEA3294](&v29, v16);
  v18 = (objc_class *)WebCore::toJS(v15, **(_QWORD **)(v7 + 32), v6, v17);
  v19 = *(_QWORD *)(v16 + 16);
  if (v19
    || (WebCore::DeferredPromise::callFunction(v7, (uint64_t *)v15, 0, v18), v9 = 0, (v19 = *(_QWORD *)(v16 + 16)) != 0))
  {
    v26 = v19;
    v20 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
    if (!(*(unsigned int (**)(_QWORD *))(*v20 + 64))(v20))
    {
LABEL_27:
      WebCore::reportException(v15, v26, 0, 0, 0);
      v9 = v28;
      goto LABEL_24;
    }
    v21 = v20[43];
    if (*(_QWORD *)(v16 + 24) == v26)
    {
LABEL_41:
      *(_BYTE *)(*(_QWORD *)(v21 + 8) + 93442) = 1;
      *(_BYTE *)(v7 + 44) = 1;
      goto LABEL_27;
    }
    if (!v21)
      goto LABEL_27;
    v22 = (unsigned __int8 *)(v21 + 40);
    if (__ldaxr((unsigned __int8 *)(v21 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v21 + 40);
LABEL_35:
    v24 = *(unsigned __int8 *)(v21 + 41);
    v25 = __ldxr(v22);
    if (v25 == 1)
    {
      if (!__stlxr(0, v22))
      {
LABEL_40:
        if (!v24)
          goto LABEL_27;
        goto LABEL_41;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v21 + 40));
    goto LABEL_40;
  }
LABEL_24:
  MEMORY[0x19AEA32A0](&v29);
  result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v31);
  if (v9 != -1)
    return (uint64_t *)((uint64_t (*)(_QWORD, _QWORD))off_1E33AECC0[v9])(&v29, v27);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Blob::bytes(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33AECE0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Blob::bytes(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AECE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Blob::bytes(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1, JSC::ArrayBuffer *a2)
{
  uint64_t v3;
  JSC::ArrayBuffer *v4;
  char v5;
  objc_class *v6;
  JSC::ArrayBufferView *v7;
  WTF::DeferrableRefCountedBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28[2];
  int v29;
  objc_class *v30;
  WTF::StringImpl *v31;
  objc_class *v32;

  v3 = *((_QWORD *)a2 + 2);
  if (!v3)
  {
LABEL_21:
    v5 = 8;
    goto LABEL_22;
  }
  if (*(unsigned __int16 *)(v3 + 204) < 0x100u)
  {
    v4 = *(JSC::ArrayBuffer **)(v3 + 152);
    if (v4)
    {
      if (*(_DWORD *)(v3 + 196) == *(_DWORD *)(v3 + 200))
      {
        *(_DWORD *)v4 += 2;
        goto LABEL_8;
      }
      JSC::ArrayBuffer::create(v4, a2);
      v4 = (JSC::ArrayBuffer *)v28[0];
      v28[0] = 0;
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v28);
      if (v4)
      {
LABEL_8:
        v30 = 0;
        v28[0] = (uint64_t)v4;
        v29 = 0;
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v30);
        v6 = (objc_class *)v28[0];
        v28[0] = 0;
        v32 = v6;
        v7 = (JSC::ArrayBufferView *)WTF::fastMalloc((WTF *)0x28);
        v32 = 0;
        v30 = v6;
        JSC::ArrayBufferView::ArrayBufferView();
        v8 = v30;
        v30 = 0;
        if (v8)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v32);
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(v9 + 24);
        if (!v10 || !*(_QWORD *)v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
          goto LABEL_19;
        v11 = *(_QWORD *)(v9 + 32);
        if (!v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
          v12 = 0;
        else
          v12 = *(JSC::JSGlobalObject **)v11;
        v13 = *((_QWORD *)v12 + 7);
        MEMORY[0x19AEA3294](&v30, v13);
        v14 = (objc_class *)JSC::ArrayBufferView::wrap(v7, v12, **(JSC::JSGlobalObject ***)(v9 + 32));
        v15 = *(_QWORD *)(v13 + 16);
        if (!v15)
        {
          WebCore::DeferredPromise::callFunction(v9, (uint64_t *)v12, 0, v14);
          v15 = *(_QWORD *)(v13 + 16);
          if (!v15)
          {
LABEL_18:
            MEMORY[0x19AEA32A0](&v30);
LABEL_19:
            if (*(_DWORD *)v7 == 1)
            {
              JSC::ArrayBufferView::operator delete();
              v16 = 0;
            }
            else
            {
              v16 = 0;
              --*(_DWORD *)v7;
            }
            return ((uint64_t (*)(objc_class **, uint64_t *))off_1E33AECC0[v16])(&v30, v28);
          }
        }
        v27 = v15;
        v21 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
        if (!(*(unsigned int (**)(_QWORD *))(*v21 + 64))(v21))
        {
LABEL_30:
          WebCore::reportException(v12, v27, 0, 0, 0);
          goto LABEL_18;
        }
        v22 = v21[43];
        if (*(_QWORD *)(v13 + 24) == v27)
        {
LABEL_44:
          *(_BYTE *)(*(_QWORD *)(v22 + 8) + 93442) = 1;
          *(_BYTE *)(v9 + 44) = 1;
          goto LABEL_30;
        }
        if (!v22)
          goto LABEL_30;
        v23 = (unsigned __int8 *)(v22 + 40);
        if (__ldaxr((unsigned __int8 *)(v22 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v23))
        {
          goto LABEL_38;
        }
        MEMORY[0x19AEA534C](v22 + 40);
LABEL_38:
        v25 = *(unsigned __int8 *)(v22 + 41);
        v26 = __ldxr(v23);
        if (v26 == 1)
        {
          if (!__stlxr(0, v23))
          {
LABEL_43:
            if (!v25)
              goto LABEL_30;
            goto LABEL_44;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v22 + 40));
        goto LABEL_43;
      }
    }
    goto LABEL_21;
  }
  v5 = *(_WORD *)(v3 + 204);
LABEL_22:
  LOBYTE(v28[0]) = v5;
  v29 = 1;
  v17 = *(_QWORD *)(a1 + 8);
  v28[1] = 0;
  v31 = 0;
  v32 = 0;
  LOBYTE(v30) = v5;
  WebCore::DeferredPromise::reject(v17, (unsigned __int8 *)&v30, 0, &v32);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v16 = 1;
  return ((uint64_t (*)(objc_class **, uint64_t *))off_1E33AECC0[v16])(&v30, v28);
}

unint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 40) = -1;
  v5 = *(unsigned int *)(result + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, unint64_t))off_1E33AECF8[v5])(&v6, v4, result);
    *(_DWORD *)(v4 + 40) = v5;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  return result;
}

unint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x195B72DACLL);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_QWORD *)result + 48 * *(unsigned int *)(result + 12);
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::BlobPart>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::BlobPart>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result != a2)
  {
    v12 = v3;
    v13 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 40) = -1;
      v8 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v8 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33AECF8[v8])(&v10, a3, v7);
        *(_DWORD *)(a3 + 40) = v8;
        v9 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33AE9A8[v9])(&v11, v7);
      }
      *(_DWORD *)(v7 + 40) = -1;
      a3 += 48;
      v7 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E33AED18;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33AED18;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  _WORD *v8;
  char *v9;
  __int128 v10;
  char *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  _WORD *v19;
  _QWORD v21[2];
  char **v22;
  _WORD *v23;
  int8x16x2_t v24;
  int8x16x2_t v25;
  int8x16x2_t v26;

  v7 = a3;
  *(_QWORD *)a1 = 0x62006F006C0062;
  *(_WORD *)(a1 + 8) = 58;
  v8 = (_WORD *)(a1 + 10);
  if ((a3 & 0xFF00000000) != 0)
  {
    if (a3 >= 0x40)
    {
      v9 = (char *)&v8[a3 & 0xFFFFFFC0];
      v10 = 0uLL;
      v11 = (char *)(a1 + 10);
      do
      {
        v24.val[0] = *a2;
        v12 = a2[1];
        v25.val[0] = a2[2];
        v13 = a2[3];
        a2 += 4;
        v14 = v13;
        v25.val[1] = 0uLL;
        v26.val[0] = v12;
        v24.val[1] = 0uLL;
        v15 = v11;
        vst2q_s8(v15, v24);
        v15 += 32;
        v26.val[1] = 0uLL;
        vst2q_s8(v15, v26);
        v16 = v11 + 64;
        vst2q_s8(v16, v25);
        v17 = v11 + 96;
        vst2q_s8(v17, *(int8x16x2_t *)(&v10 - 1));
        v11 += 128;
      }
      while (v11 != v9);
    }
    else
    {
      v9 = (char *)(a1 + 10);
    }
    while (v9 != (char *)&v8[a3])
    {
      v18 = a2->u8[0];
      a2 = (int8x16_t *)((char *)a2 + 1);
      *(_WORD *)v9 = v18;
      v9 += 2;
    }
  }
  else if ((_DWORD)a3 == 1)
  {
    *v8 = a2->i16[0];
  }
  else if ((_DWORD)a3)
  {
    memcpy((void *)(a1 + 10), a2, 2 * a3);
  }
  v19 = &v8[v7];
  *v19 = 47;
  v21[0] = a4;
  v21[1] = a5;
  v23 = v19 + 1;
  v22 = (char **)&v23;
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v21, &v22);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::File::computeNameAndContentType(WTF::String const&,WTF::String const&,WTF::String&,WTF::String&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = **(_QWORD **)(a1 + 16);
  if (v2)
  {
    result = *(WTF::StringImpl **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    result = 0;
    v4 = 0x100000000;
  }
  v5 = (*(_DWORD *)(a1 + 24) + 1);
  v6 = (v4 - v5);
  if (v4 <= v5)
  {
    v6 = 0x100000000;
    result = (WTF::StringImpl *)"";
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 24) != -1)
  {
    v12 = v4 - (unint64_t)v5;
    if ((v4 & 0x100000000) != 0)
    {
      if (v12 >= v6)
      {
        result = (WTF::StringImpl *)((char *)result + v5);
        v6 |= 0x100000000uLL;
        goto LABEL_6;
      }
    }
    else if (v12 >= v6)
    {
      result = (WTF::StringImpl *)((char *)result + 2 * v5);
      goto LABEL_6;
    }
    __break(1u);
    return result;
  }
  v6 = v4;
LABEL_6:
  WebCore::MIMETypeRegistry::mimeTypeForExtension((uint64_t)result, v6, &v13);
  WTF::String::isolatedCopy();
  v8 = *(WTF::StringImpl ***)(a1 + 8);
  v9 = v14;
  v14 = 0;
  v10 = *v8;
  *v8 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::FileReader::didStartLoading(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  _DWORD *v13;
  WTF *result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *(_QWORD *)(v1 + 104);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 196);
    v7 = *(unsigned int *)(v5 + 200);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (WebCore::EventTarget *)(v1 + 32);
  v9 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  *(_QWORD *)(v9 + 8) = 0;
  v11 = *(_QWORD *)(v4 + 1160) != 0;
  v12 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x2A0200;
  *(_DWORD *)(v9 + 16) = 1;
  *(_DWORD *)(v9 + 20) = v12 | v11;
  v13 = *(_DWORD **)(v4 + 1160);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(v9 + 24) = v13;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)v9 = off_1E33A6BE0;
  *(_BYTE *)(v9 + 72) = 1;
  *(_QWORD *)(v9 + 80) = v6;
  *(_QWORD *)(v9 + 88) = v7;
  result = WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v9);
  if (*(_DWORD *)(v9 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  --*(_DWORD *)(v9 + 16);
  return result;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::FileReader::didReceiveData(void)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  double *v1;
  WebCore *result;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unsigned int v14;
  _DWORD *v15;

  v1 = (double *)*((_QWORD *)a1 + 1);
  result = (WebCore *)WTF::MonotonicTime::now(a1);
  v4 = v3;
  if (v3 - v1[15] > 0.05)
  {
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow(result);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    v8 = *((_QWORD *)v1 + 13);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 + 196);
      v10 = *(unsigned int *)(v8 + 200);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    *(_QWORD *)(v11 + 8) = 0;
    v13 = *(_QWORD *)(v7 + 1584) != 0;
    v14 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x2A0200;
    *(_DWORD *)(v11 + 16) = 1;
    *(_DWORD *)(v11 + 20) = v14 | v13;
    v15 = *(_DWORD **)(v7 + 1584);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(v11 + 24) = v15;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)v11 = off_1E33A6BE0;
    *(_BYTE *)(v11 + 72) = 1;
    *(_QWORD *)(v11 + 80) = v9;
    *(_QWORD *)(v11 + 88) = v10;
    result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 4), (WebCore::Event *)v11);
    if (*(_DWORD *)(v11 + 16) == 1)
      result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    else
      --*(_DWORD *)(v11 + 16);
    v1[15] = v4;
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::FileReader::didFinishLoading(void)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  _DWORD *v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::EventTarget *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  _DWORD *v25;
  WebCore *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  unsigned int v36;
  _DWORD *v37;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 72) != 2)
  {
    *(_BYTE *)(v1 + 76) = 1;
    if (*(_DWORD *)(*(_QWORD *)(v1 + 104) + 196))
    {
      v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
        v3 = WebCore::threadGlobalDataSlow(result);
      v4 = *(_QWORD *)(v3 + 40);
      if (!v4)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
        v4 = *(_QWORD *)(v3 + 40);
      }
      v5 = *(_QWORD *)(v1 + 104);
      if (v5)
      {
        v6 = *(unsigned int *)(v5 + 196);
        v7 = *(unsigned int *)(v5 + 200);
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      *(_QWORD *)(v8 + 8) = 0;
      v10 = *(_QWORD *)(v4 + 1584) != 0;
      v11 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x2A0200;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v11 | v10;
      v12 = *(_DWORD **)(v4 + 1584);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)v8 = off_1E33A6BE0;
      *(_BYTE *)(v8 + 72) = 1;
      *(_QWORD *)(v8 + 80) = v6;
      *(_QWORD *)(v8 + 88) = v7;
      result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 32), (WebCore::Event *)v8);
      if (*(_DWORD *)(v8 + 16) == 1)
        result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
    if (*(_DWORD *)(v1 + 72) != 2)
    {
      *(_DWORD *)(v1 + 72) = 2;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v14 = *(_QWORD *)(StatusReg + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(result);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      v17 = *(_QWORD *)(v1 + 104);
      if (v17)
      {
        v18 = *(unsigned int *)(v17 + 196);
        v19 = *(unsigned int *)(v17 + 200);
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = (WebCore::EventTarget *)(v1 + 32);
      v21 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v21);
      *(_QWORD *)(v21 + 8) = 0;
      v23 = *(_QWORD *)(v16 + 1104) != 0;
      v24 = *(_DWORD *)(v21 + 20) & 0xFFC00000 | 0x2A0200;
      *(_DWORD *)(v21 + 16) = 1;
      *(_DWORD *)(v21 + 20) = v24 | v23;
      v25 = *(_DWORD **)(v16 + 1104);
      if (v25)
        *v25 += 2;
      *(_QWORD *)(v21 + 24) = v25;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = v22;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)v21 = off_1E33A6BE0;
      *(_BYTE *)(v21 + 72) = 1;
      *(_QWORD *)(v21 + 80) = v18;
      *(_QWORD *)(v21 + 88) = v19;
      v26 = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 32), (WebCore::Event *)v21);
      if (*(_DWORD *)(v21 + 16) == 1)
        v26 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      else
        --*(_DWORD *)(v21 + 16);
      v27 = *(_QWORD *)(StatusReg + 736);
      if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
        v28 = WebCore::threadGlobalDataSlow(v26);
      v29 = *(_QWORD *)(v28 + 40);
      if (!v29)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v28);
        v29 = *(_QWORD *)(v28 + 40);
      }
      v30 = *(_QWORD *)(v1 + 104);
      if (v30)
      {
        v31 = *(unsigned int *)(v30 + 196);
        v32 = *(unsigned int *)(v30 + 200);
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v33 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v33);
      *(_QWORD *)(v33 + 8) = 0;
      v35 = *(_QWORD *)(v29 + 1128) != 0;
      v36 = *(_DWORD *)(v33 + 20) & 0xFFC00000 | 0x2A0200;
      *(_DWORD *)(v33 + 16) = 1;
      *(_DWORD *)(v33 + 20) = v36 | v35;
      v37 = *(_DWORD **)(v29 + 1128);
      if (v37)
        *v37 += 2;
      *(_QWORD *)(v33 + 24) = v37;
      *(_QWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = v34;
      *(_QWORD *)(v33 + 64) = 0;
      *(_QWORD *)v33 = off_1E33A6BE0;
      *(_BYTE *)(v33 + 72) = 1;
      *(_QWORD *)(v33 + 80) = v31;
      *(_QWORD *)(v33 + 88) = v32;
      result = WebCore::EventTarget::dispatchEvent(v20, (WebCore::Event *)v33);
      if (*(_DWORD *)(v33 + 16) == 1)
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      else
        --*(_DWORD *)(v33 + 16);
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::FileReader::didFail(WebCore::ExceptionCode)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::EventTarget *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WebCore *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  unsigned __int8 v28[8];
  WTF::StringImpl *v29;
  _DWORD *v30;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 72) != 2)
  {
    *(_DWORD *)(v1 + 72) = 2;
    v28[0] = *((_BYTE *)result + 16);
    v29 = 0;
    WebCore::DOMException::create(v28, (uint64_t *)&v30);
    v3 = (uint64_t)v30;
    v30 = 0;
    v4 = *(_DWORD **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = v3;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        v27 = v30;
        v30 = 0;
        if (v27)
        {
          if (v27[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
          else
            --v27[2];
        }
      }
      else
      {
        --v4[2];
        v30 = 0;
      }
    }
    v5 = v29;
    v29 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v2);
      else
        *(_DWORD *)v5 -= 2;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(_QWORD *)(StatusReg + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow(v5);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = *(_QWORD *)(v1 + 104);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 + 196);
      v12 = *(unsigned int *)(v10 + 200);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = (WebCore::EventTarget *)(v1 + 32);
    v14 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 1;
    *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x2A0200 | (*(_QWORD *)(v9 + 784) != 0);
    v16 = *(_DWORD **)(v9 + 784);
    if (v16)
      *v16 += 2;
    *(_QWORD *)(v14 + 24) = v16;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = v15;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)v14 = off_1E33A6BE0;
    *(_BYTE *)(v14 + 72) = 1;
    *(_QWORD *)(v14 + 80) = v11;
    *(_QWORD *)(v14 + 88) = v12;
    v17 = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 32), (WebCore::Event *)v14);
    if (*(_DWORD *)(v14 + 16) == 1)
      v17 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    else
      --*(_DWORD *)(v14 + 16);
    v18 = *(_QWORD *)(StatusReg + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v17);
    v20 = *(_QWORD *)(v19 + 40);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
      v20 = *(_QWORD *)(v19 + 40);
    }
    v21 = *(_QWORD *)(v1 + 104);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 + 196);
      v23 = *(unsigned int *)(v21 + 200);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v24);
    *(_QWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v24 + 16) = 1;
    *(_DWORD *)(v24 + 20) = *(_DWORD *)(v24 + 20) & 0xFFC00000 | 0x2A0200 | (*(_QWORD *)(v20 + 1128) != 0);
    v26 = *(_DWORD **)(v20 + 1128);
    if (v26)
      *v26 += 2;
    *(_QWORD *)(v24 + 24) = v26;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 56) = v25;
    *(_QWORD *)(v24 + 64) = 0;
    *(_QWORD *)v24 = off_1E33A6BE0;
    *(_BYTE *)(v24 + 72) = 1;
    *(_QWORD *)(v24 + 80) = v22;
    *(_QWORD *)(v24 + 88) = v23;
    result = WebCore::EventTarget::dispatchEvent(v13, (WebCore::Event *)v24);
    if (*(_DWORD *)(v24 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    else
      --*(_DWORD *)(v24 + 16);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::FileReader>(WebCore::FileReader &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::FileReader>(WebCore::FileReader &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::FileReader>(WebCore::FileReader &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::FileReader>(WebCore::FileReader &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::FileReader *v5;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E33AEE38;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v9 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v9 + 24) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::FileReader *)v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v9 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::FileReader *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::FileReader::~FileReader(v5, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileReader::enqueueTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E33AEE60;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::FileReader *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileReader::enqueueTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33AEE60;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::FileReader *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::FileReader::enqueueTask(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(v2 + 128);
  v4 = *(_QWORD *)(v2 + 128);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v4 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v4 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      v14 = v13[1];
      v13[1] = 0;
      v15 = *v3;
      if (!*v3 || (v15 += 16 * *(unsigned int *)(v15 - 4), (_QWORD *)v15 != v13))
      {
        if ((_QWORD *)v15 != v13)
        {
          *v13 = -1;
          v13[1] = 0;
          ++*(_DWORD *)(*v3 - 16);
          v16 = *v3;
          v17 = *v3 ? *(_DWORD *)(v16 - 12) - 1 : -1;
          *(_DWORD *)(v16 - 12) = v17;
          v18 = *v3;
          if (*v3)
          {
            v19 = 6 * *(_DWORD *)(v18 - 12);
            v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v3, v20 >> 1);
          }
        }
      }
      if (v14)
      {
        v22 = *(_QWORD *)(v2 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            if (!*(_BYTE *)(v23 + 180))
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
          }
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
}

uint64_t WebCore::FileReaderLoader::FileReaderLoader(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  *(_QWORD *)a1 = &off_1E33AEE88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a2;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
      goto LABEL_16;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a3;
    v7 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v5;
    if (!v7)
      goto LABEL_16;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
    {
LABEL_16:
      do
        v10 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v10 + 1, (unsigned int *)v5));
    }
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &off_1E31F4A18;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 72));
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v11 += 2;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  return a1;
}

{
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  *(_QWORD *)a1 = &off_1E33AEE88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a2;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
      goto LABEL_16;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a3;
    v7 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v5;
    if (!v7)
      goto LABEL_16;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
    {
LABEL_16:
      do
        v10 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v10 + 1, (unsigned int *)v5));
    }
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &off_1E31F4A18;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 72));
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v11 += 2;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  return a1;
}

void WebCore::FileReaderLoader::~FileReaderLoader(WebCore::FileReaderLoader *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  WebCore::HTMLMetaCharsetParser *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  WTF **v27;
  WTF *v28;
  WTF *v29;

  *((_WORD *)this + 102) = 272;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WebCore::FileReaderLoader::cleanup(this, v4);
  }
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v17 = *(WTF **)(v5 + 72);
      if (v17)
      {
        *(_QWORD *)(v5 + 72) = 0;
        *(_DWORD *)(v5 + 80) = 0;
        WTF::fastFree(v17, a2);
      }
      v18 = *(WebCore::HTMLMetaCharsetParser **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v18)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v18, (WTF::StringImpl *)a2);
        WTF::fastFree(v19, v20);
      }
      v21 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      WTF::fastFree((WTF *)v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    v9 = *(_DWORD *)v8 == 2;
    *(_DWORD *)v8 -= 2;
    if (v9)
    {
      v25 = v8[10];
      if (v25)
      {
        *(_QWORD *)(v25 + 8) = 3;
        v8[10] = 0;
      }
      if ((v8[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 2));
      v27 = (WTF **)v8[1];
      if ((v27 & 1) == 0 && v27)
      {
        v29 = (WTF *)v8[1];
        v28 = *v27;
        if (*v27)
        {
          *(_QWORD *)v29 = 0;
          *((_DWORD *)v29 + 2) = 0;
          WTF::fastFree(v28, v26);
        }
        WTF::fastFree(v29, v26);
      }
      WTF::fastFree((WTF *)v8, v26);
    }
  }
  v10 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::FileReaderLoader *)((char *)this + 72));
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v11);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::FileReaderLoader::~FileReaderLoader(this, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

WTF::StringImpl *WebCore::FileReaderLoader::cancel(WebCore::FileReaderLoader *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  *((_WORD *)this + 102) = 272;
  result = (WTF::StringImpl *)*((_QWORD *)this + 18);
  if (result)
  {
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    return WebCore::FileReaderLoader::cleanup(this, v3);
  }
  return result;
}

WTF::StringImpl *WebCore::FileReaderLoader::start(WebCore::FileReaderLoader *this, WebCore::ScriptExecutionContext *a2, WebCore::Blob *a3)
{
  WTF::StringImpl *v3;
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
  if (v3)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  v4 = *(_OWORD *)((char *)a3 + 104);
  v8 = *(_OWORD *)((char *)a3 + 88);
  v9 = v4;
  WebCore::FileReaderLoader::start(this, a2, (const WTF::URL *)&v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FileReaderLoader::start(WebCore::FileReaderLoader *this, WebCore::ScriptExecutionContext *a2, const WTF::URL *a3)
{
  WebCore::BlobURL *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  char v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  char v46;
  char v47;
  char v48;
  __int16 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  __int128 v57;
  __int128 v58;
  _DWORD *v59;
  __int16 v60;
  _DWORD *v61;
  _DWORD *v62;
  char v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  char v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78[3];
  int v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityContext::securityOrigin(a2, a2);
  WebCore::BlobURL::createPublicURL(v6, (uint64_t)&v40);
  v7 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  LOBYTE(v78[0]) = 0;
  v79 = -1;
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_5[v8])(&v56, v78, v7 + 8);
    v79 = v8;
  }
  v80 = 1;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)&v56, (uint64_t)&v40, (uint64_t)v78);
  v9 = (char *)this + 72;
  WebCore::URLKeepingBlobAlive::operator=((uint64_t)this + 72, &v56);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v56);
  if (v80 && v79 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v79])(&v39, v78);
  v11 = v40;
  v40 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*(_QWORD *)v9 && *(_DWORD *)(*(_QWORD *)v9 + 4))
  {
    WebCore::SecurityContext::securityOrigin(a2, v10);
    v15 = v14;
    WebCore::ContentSecurityPolicy::responseHeaders(*((_QWORD *)a2 + 2), v16, (uint64_t)&v56);
    LOWORD(v58) = *((_WORD *)a2 + 12);
    v17 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (v17)
      *v17 += 2;
    *((_QWORD *)&v58 + 1) = v17;
    v18 = (_DWORD *)*((_QWORD *)a2 + 5);
    if (v18)
      *v18 += 2;
    v59 = v18;
    v19 = (**(uint64_t (***)(WebCore::ScriptExecutionContext *))a2)(a2);
    v60 = *(_WORD *)v19;
    v20 = *(_DWORD **)(v19 + 8);
    if (v20)
      *v20 += 2;
    v61 = v20;
    v21 = *(_DWORD **)(v19 + 16);
    if (v21)
      *v21 += 2;
    v62 = v21;
    v63 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 8))(a2);
    WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)this + 28, (uint64_t)&v40);
    WebCore::ThreadableBlobRegistry::registerBlobURL(v15, (unint64_t *)&v56, (WebCore::FileReaderLoader *)((char *)this + 72), (uint64_t)a3, (uint64_t)&v40);
    if (BYTE8(v42) && (_DWORD)v42 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v42])(v78, &v40);
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v56, v22);
    v23 = *(WTF::StringImpl **)v9;
    if (*(_QWORD *)v9)
      *(_DWORD *)v23 += 2;
    v24 = *((_OWORD *)this + 6);
    v57 = *((_OWORD *)this + 5);
    v58 = v24;
    v56 = v23;
    v59 = 0;
    WTF::URL::invalidate((WTF::URL *)&v59);
    v64 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v65 = v40;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0x10000;
    v25 = v70 & 0x80 | 4;
    v70 = v25;
    v71 = 0;
    v26 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v26 += 2;
      v25 = v70;
    }
    v72 = v26;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = v76 & 0xE0 | 5;
    v70 = v25 | 2;
    v77 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ResourceRequestBase::setHTTPMethod(&v56, &v40);
    v28 = v40;
    v40 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    LOWORD(v40) = 256;
    *(_DWORD *)((char *)&v40 + 2) = 2;
    BYTE6(v40) = 0;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0;
    v46 = 1;
    v47 = 0;
    v48 = 0;
    v49 = 20;
    v51 = 0;
    v52 = 0;
    v54 = 0;
    v55 = 1;
    v50 = 201329098;
    v53 = 0;
    v29 = *((_QWORD *)this + 3);
    if (v29 && *(_QWORD *)(v29 + 8))
    {
      v38 = 0;
      v39 = 0;
      WebCore::ThreadableLoader::create(a2, (uint64_t)this, (WebCore::ResourceRequest *)&v56, (uint64_t)&v40, &v39, (uint64_t)&v38, v78);
      v31 = v38;
      v38 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v39;
      v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v30);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v78[0];
      if (v78[0])
      {
        v34 = *((_QWORD *)this + 18);
        *((_QWORD *)this + 18) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
        v35 = *((_QWORD *)this + 18);
        *((_QWORD *)this + 18) = v33;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
      }
    }
    else
    {
      WebCore::ThreadableLoader::loadResourceSynchronously(a2, (WebCore::ResourceRequest *)&v56, (uint64_t)this, (uint64_t)&v40);
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v30);
      else
        *(_DWORD *)v36 -= 2;
    }
    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v40, v30);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v56, v37);
  }
  else
  {
    *((_WORD *)this + 102) = 270;
    WebCore::FileReaderLoader::cleanup(this, v10);
    v12 = *((_QWORD *)this + 3);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, 14);
    }
  }
}

WTF::StringImpl *WebCore::FileReaderLoader::cleanup(WebCore::FileReaderLoader *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  _QWORD *v4;
  BOOL v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  WTF **v9;
  WTF *v10;
  WTF *v11;

  result = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 40))(result);
  if (*((_BYTE *)this + 205))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v4)
    {
      v5 = *(_DWORD *)v4 == 2;
      *(_DWORD *)v4 -= 2;
      if (v5)
      {
        v7 = v4[10];
        if (v7)
        {
          *(_QWORD *)(v7 + 8) = 3;
          v4[10] = 0;
        }
        if ((v4[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
        v9 = (WTF **)v4[1];
        if ((v9 & 1) == 0 && v9)
        {
          v11 = (WTF *)v4[1];
          v10 = *v9;
          if (*v9)
          {
            *(_QWORD *)v11 = 0;
            *((_DWORD *)v11 + 2) = 0;
            WTF::fastFree(v10, v8);
          }
          WTF::fastFree(v11, v8);
        }
        WTF::fastFree((WTF *)v4, v8);
      }
    }
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    result = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v6;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::FileReaderLoader::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  WTF::StringImpl *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;

  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if (*(_WORD *)(a4 + 136) == 200)
  {
    if (*(_DWORD *)(a1 + 20) != 5)
    {
      WebCore::ResourceResponse::platformLazyInit(a4, 1);
      v7 = *(_QWORD *)(a4 + 48);
      if ((v7 & 0x8000000000000000) != 0)
      {
        *(_BYTE *)(a1 + 192) = 1;
        LODWORD(v7) = 0x8000;
      }
      else if (HIDWORD(v7))
      {
        *(_WORD *)(a1 + 204) = 279;
        WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)a1, v6);
        v8 = *(_QWORD *)(a1 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(void (**)(void))(*(_QWORD *)v9 + 48);
LABEL_14:
            v10();
            return;
          }
        }
        return;
      }
      JSC::ArrayBuffer::tryCreate();
      v16 = v27;
      v17 = *(_QWORD **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v27;
      if (v17)
      {
        v18 = *(_DWORD *)v17 == 2;
        *(_DWORD *)v17 -= 2;
        if (v18)
        {
          v23 = v17[10];
          if (v23)
          {
            *(_QWORD *)(v23 + 8) = 3;
            v17[10] = 0;
          }
          if ((v17[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v17 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v17 + 2));
          v25 = (WTF *)v17[1];
          if ((v25 & 1) == 0 && v25)
          {
            v26 = *(WTF **)v25;
            if (*(_QWORD *)v25)
            {
              *(_QWORD *)v25 = 0;
              *((_DWORD *)v25 + 2) = 0;
              WTF::fastFree(v26, v24);
            }
            WTF::fastFree(v25, v24);
          }
          WTF::fastFree((WTF *)v17, v24);
        }
        v16 = *(_QWORD *)(a1 + 152);
      }
      if (!v16)
      {
        *(_WORD *)(a1 + 204) = 279;
        WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)a1, v15);
        v21 = *(_QWORD *)(a1 + 24);
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, 23);
        }
        return;
      }
      *(_DWORD *)(a1 + 200) = v7;
    }
    v19 = *(_QWORD *)(a1 + 24);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    return;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if (*(_WORD *)(a4 + 136) == 403)
    v12 = 270;
  else
    v12 = 279;
  *(_WORD *)(a1 + 204) = v12;
  WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)a1, v11);
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v10 = *(void (**)(void))(*(_QWORD *)v14 + 48);
      goto LABEL_14;
    }
  }
}

uint64_t WebCore::FileReaderLoader::didReceiveData(uint64_t this, const WebCore::SharedBuffer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  WTF *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  int v38;
  int v39;
  char v40;
  char *v41;

  if (*(_BYTE *)(this + 205))
    return this;
  v3 = this;
  if (*(_DWORD *)(this + 20) == 5)
  {
    v4 = *(_QWORD *)(this + 24);
    if (v4)
    {
      this = *(_QWORD *)(v4 + 8);
      if (this)
        return (*(uint64_t (**)(uint64_t, const WebCore::SharedBuffer *))(*(_QWORD *)this + 32))(this, a2);
    }
    return this;
  }
  v5 = *((_QWORD *)a2 + 6);
  v6 = *(_DWORD *)(this + 200);
  if (v6 - *(_DWORD *)(this + 196) < (uint64_t)(int)v5)
  {
    if (v6 == -1)
      goto LABEL_12;
    if (*(_BYTE *)(this + 192))
    {
      v7 = v6 + v5;
      if (!__CFADD__(v6, (_DWORD)v5))
      {
        v9 = v6 + (v6 >> 2);
        if (v7 <= v9 + 1)
          v10 = v9 + 1;
        else
          v10 = v7;
        JSC::ArrayBuffer::tryCreate();
        v12 = v41;
        if (v41)
        {
          v13 = *((_QWORD *)v41 + 2);
          if (v13)
          {
            v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v14)
            {
              if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                v13 = (v13 & 0x3FFFFFFFFLL) + v14;
            }
          }
          v15 = *(_QWORD *)(*(_QWORD *)(v3 + 152) + 16);
          if (v15)
          {
            v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v16)
            {
              if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                v15 = (v15 & 0x3FFFFFFFFLL) + v16;
            }
          }
          this = (uint64_t)memcpy((void *)v13, (const void *)v15, *(unsigned int *)(v3 + 196));
          v17 = v41;
          *(_DWORD *)v41 += 2;
          v18 = *(WTF **)(v3 + 152);
          *(_QWORD *)(v3 + 152) = v17;
          if (v18)
          {
            v19 = *(_DWORD *)v18 == 2;
            *(_DWORD *)v18 -= 2;
            if (v19)
            {
              v37 = v18;
              v39 = v5;
              v33 = *((_QWORD *)v18 + 10);
              if (v33)
              {
                *(_QWORD *)(v33 + 8) = 3;
                *((_QWORD *)v37 + 10) = 0;
              }
              if ((*((_BYTE *)v37 + 72) & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v37 + 72));
              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v37 + 16));
              v35 = (WTF *)*((_QWORD *)v37 + 1);
              if ((v35 & 1) == 0 && v35)
              {
                v36 = *(WTF **)v35;
                if (*(_QWORD *)v35)
                {
                  *(_QWORD *)v35 = 0;
                  *((_DWORD *)v35 + 2) = 0;
                  WTF::fastFree(v36, v34);
                }
                WTF::fastFree(v35, v34);
              }
              this = WTF::fastFree(v37, v34);
              LODWORD(v5) = v39;
            }
          }
          *(_DWORD *)(v3 + 200) = v10;
        }
        else
        {
          *(_WORD *)(v3 + 204) = 279;
          this = (uint64_t)WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v11);
          v28 = *(_QWORD *)(v3 + 24);
          if (v28)
          {
            this = *(_QWORD *)(v28 + 8);
            if (this)
              this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 48))(this, 23);
          }
        }
        v20 = v41;
        v41 = 0;
        if (v20 && (v19 = *(_DWORD *)v20 == 2, *(_DWORD *)v20 -= 2, v19))
        {
          v38 = v5;
          v29 = *((_QWORD *)v20 + 10);
          if (v29)
          {
            *(_QWORD *)(v29 + 8) = 3;
            *((_QWORD *)v20 + 10) = 0;
          }
          if ((v20[72] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v20 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v20 + 16));
          v31 = (WTF *)*((_QWORD *)v20 + 1);
          if ((v31 & 1) == 0 && v31)
          {
            v32 = *(WTF **)v31;
            if (*(_QWORD *)v31)
            {
              *(_QWORD *)v31 = 0;
              *((_DWORD *)v31 + 2) = 0;
              WTF::fastFree(v32, v30);
            }
            WTF::fastFree(v31, v30);
          }
          this = WTF::fastFree((WTF *)v20, v30);
          LODWORD(v5) = v38;
          if (!v12)
            return this;
        }
        else if (!v12)
        {
          return this;
        }
        goto LABEL_34;
      }
LABEL_12:
      *(_WORD *)(this + 204) = 279;
      this = (uint64_t)WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)this, a2);
      v8 = *(_QWORD *)(v3 + 24);
      if (v8)
      {
        this = *(_QWORD *)(v8 + 8);
        if (this)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 48))(this, 23);
      }
      return this;
    }
    LODWORD(v5) = v6 - *(_DWORD *)(this + 196);
  }
LABEL_34:
  if ((int)v5 >= 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 152) + 16);
    if (v21)
    {
      v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v22)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
          goto LABEL_71;
LABEL_38:
        v21 = (v21 & 0x3FFFFFFFFLL) + v22;
      }
    }
    while (1)
    {
      v23 = *(unsigned int *)(v3 + 196);
      if (!*((_DWORD *)a2 + 5))
        break;
      v24 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
      v25 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v25 != -1)
      {
        v41 = &v40;
        v26 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v41, v24 + 8);
        goto LABEL_42;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_71:
      if (!*MEMORY[0x1E0CC10F0])
        goto LABEL_38;
    }
    v26 = 0;
LABEL_42:
    this = (uint64_t)memcpy((void *)(v21 + v23), v26, v5);
    *(_DWORD *)(v3 + 196) += v5;
    *(_BYTE *)(v3 + 160) = 0;
    v27 = *(_QWORD *)(v3 + 24);
    if (v27)
    {
      this = *(_QWORD *)(v27 + 8);
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::FileReaderLoader::didFinishLoading(WebCore::FileReaderLoader *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  _QWORD *v4;
  BOOL v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;

  if (*((_BYTE *)this + 192))
  {
    v3 = *((_DWORD *)this + 49);
    if (*((_DWORD *)this + 50) > v3)
    {
      JSC::ArrayBuffer::slice(*((JSC::ArrayBuffer **)this + 19), 0.0, (double)v3);
      v4 = (_QWORD *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v12;
      if (v4)
      {
        v5 = *(_DWORD *)v4 == 2;
        *(_DWORD *)v4 -= 2;
        if (v5)
        {
          v8 = v4[10];
          if (v8)
          {
            *(_QWORD *)(v8 + 8) = 3;
            v4[10] = 0;
          }
          if ((v4[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
          v10 = (WTF *)v4[1];
          if ((v10 & 1) == 0 && v10)
          {
            v11 = *(WTF **)v10;
            if (*(_QWORD *)v10)
            {
              *(_QWORD *)v10 = 0;
              *((_DWORD *)v10 + 2) = 0;
              WTF::fastFree(v11, v9);
            }
            WTF::fastFree(v10, v9);
          }
          WTF::fastFree((WTF *)v4, v9);
        }
      }
      *((_DWORD *)this + 50) = *((_DWORD *)this + 49);
    }
  }
  result = WebCore::FileReaderLoader::cleanup(this, a2);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    result = *(WTF::StringImpl **)(v7 + 8);
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::FileReaderLoader::didFail(WTF::StringImpl *result, int a2, WebCore::ResourceError *this)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v4 = (uint64_t)result;
  if (!*((_BYTE *)result + 205) || *((_BYTE *)result + 204) != 16)
  {
    WebCore::ResourceError::platformLazyInit(this);
    v6 = *((_DWORD *)this + 14) == 1;
    if (*((_DWORD *)this + 14) == 1)
      v7 = 5;
    else
      v7 = 23;
    if (v6)
      v8 = 261;
    else
      v8 = 279;
    *(_WORD *)(v4 + 204) = v8;
    result = WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v4, v5);
    v9 = *(_QWORD *)(v4 + 24);
    if (v9)
    {
      result = *(WTF::StringImpl **)(v9 + 8);
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 48))(result, v7);
    }
  }
  return result;
}

JSC::ArrayBuffer *WebCore::FileReaderLoader::arrayBufferResult@<X0>(WebCore::FileReaderLoader *this@<X0>, JSC::ArrayBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  JSC::ArrayBuffer *result;
  uint64_t v6;
  uint64_t v7;

  result = (JSC::ArrayBuffer *)*((_QWORD *)this + 19);
  if (result && !*((_BYTE *)this + 205))
  {
    if (*((_DWORD *)this + 49) == *((_DWORD *)this + 50))
    {
      *(_DWORD *)result += 2;
      *a3 = result;
    }
    else
    {
      JSC::ArrayBuffer::create(result, a2);
      v6 = v7;
      v7 = 0;
      *a3 = v6;
      return (JSC::ArrayBuffer *)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v7);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::FileReaderLoader::stringResult@<X0>(WTF::StringImpl *this@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _UNKNOWN **v4;
  WTF::StringImpl *v5;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  const char *v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  const WTF::String *v23;
  PAL *v24;
  __int128 v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WebCore::HTMLMetaCharsetParser *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int16 v48;
  WTF::StringImpl *v49;
  char *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _QWORD v54[2];
  WTF::StringImpl *v55[2];

  v5 = this;
  v7 = *((_QWORD *)this + 19);
  if (!v7 || *((_BYTE *)this + 205) || *((_BYTE *)this + 160))
    goto LABEL_70;
  v8 = *((_DWORD *)this + 5);
  if (v8 == 4)
  {
    if (*((_DWORD *)this + 49) != *((_DWORD *)this + 50))
      goto LABEL_70;
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    if (v15 && *((_DWORD *)v15 + 1))
    {
      *(_DWORD *)v15 += 2;
      v52 = v15;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = *((_QWORD *)v5 + 19);
      if (!v7)
      {
        v16 = 0;
        goto LABEL_32;
      }
    }
    v16 = *(WTF::StringImpl **)(v7 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v17)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v16 = (WTF::StringImpl *)(((unint64_t)v16 & 0x3FFFFFFFFLL) + v17);
      }
    }
    if (*(_BYTE *)(v7 + 64) && (v44 = *(_QWORD *)(v7 + 32)) != 0)
      v18 = *(_QWORD *)(v44 + 32);
    else
      v18 = *(_QWORD *)(v7 + 48);
    v7 = *((unsigned int *)v5 + 49);
    if (v18 < v7)
      goto LABEL_87;
LABEL_32:
    v49 = v16;
    v50 = (char *)v7;
    v51 = 0;
    v55[0] = (WTF::StringImpl *)"data:";
    v55[1] = (WTF::StringImpl *)6;
    v54[0] = ";base64,";
    v54[1] = 9;
    this = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::Base64Specification>((uint64_t)v55, (uint64_t *)&v52, (uint64_t)v54, (uint64_t)&v49, &v53);
    v20 = v53;
    if (!v53)
    {
      __break(0xC471u);
      return this;
    }
    v53 = 0;
    v21 = (WTF::StringImpl *)*((_QWORD *)v5 + 21);
    *((_QWORD *)v5 + 21) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        v36 = v53;
        v53 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v19);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v21 -= 2;
        v53 = 0;
      }
    }
    this = v52;
    v52 = 0;
    if (!this)
      goto LABEL_70;
    goto LABEL_37;
  }
  if (v8 == 3)
  {
    v12 = *((_DWORD *)this + 49);
    if (v12)
    {
      if (!*((_QWORD *)this + 23))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v55[0] = v49;
        v4 = &off_1E31F4A18;
        if (*((_QWORD *)v5 + 6))
        {
          v14 = (uint64_t *)((char *)v5 + 32);
        }
        else
        {
          v14 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
          {
            PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
            *((_QWORD *)&xmmword_1ECE86C80 + 1) = v47;
            v49 = (WTF::StringImpl *)xmmword_1ECE86C80;
            v50 = v47;
            if (v47 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
            {
              if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v49))
              {
                v48 = 165;
              }
              else
              {
                v48 = 92;
              }
            }
            else
            {
              v48 = 92;
            }
            word_1ECE86C90 = v48;
          }
        }
        v3 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)v3 = 1;
        v24 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)v55, v23);
        *(_DWORD *)(v3 + 4) = (_DWORD)v24;
        if ((_DWORD)v24 == 2)
          goto LABEL_88;
        if (!v14[2])
          v14 = PAL::Latin1Encoding(v24);
        goto LABEL_43;
      }
      goto LABEL_50;
    }
    goto LABEL_70;
  }
  if (v8 != 1)
    goto LABEL_70;
  a2 = *(char **)(v7 + 16);
  if (a2)
  {
    v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v9)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        a2 = (char *)(((unint64_t)a2 & 0x3FFFFFFFFLL) + v9);
    }
  }
  if (*(_BYTE *)(v7 + 64) && (v43 = *(_QWORD *)(v7 + 32)) != 0)
    v10 = *(_QWORD *)(v43 + 32);
  else
    v10 = *(_QWORD *)(v7 + 48);
  if (v10 < *((unsigned int *)this + 49))
  {
    do
    {
LABEL_87:
      while (1)
      {
        __break(1u);
LABEL_88:
        v14 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
        {
          PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)v4;
          *((_QWORD *)&xmmword_1ECE86C80 + 1) = a2;
          v49 = (WTF::StringImpl *)xmmword_1ECE86C80;
          v50 = a2;
          if (a2 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
          {
            if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v49))
            {
              v42 = 165;
            }
            else
            {
              v42 = 92;
            }
          }
          else
          {
            v42 = 92;
          }
          word_1ECE86C90 = v42;
        }
LABEL_43:
        *(_QWORD *)(v3 + 8) = v4;
        v25 = *(_OWORD *)(v14 + 1);
        *(_WORD *)(v3 + 32) = *((_WORD *)v14 + 12);
        *(_OWORD *)(v3 + 16) = v25;
        *(_QWORD *)(v3 + 40) = 0;
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
        *(_QWORD *)(v3 + 72) = 0;
        *(_QWORD *)(v3 + 80) = 0;
        *(_QWORD *)(v3 + 64) = 0;
        *(_QWORD *)(v3 + 87) = 0;
        v26 = *((_QWORD *)v5 + 23);
        *((_QWORD *)v5 + 23) = v3;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
          {
            v37 = *(WTF **)(v26 + 72);
            if (v37)
            {
              *(_QWORD *)(v26 + 72) = 0;
              *(_DWORD *)(v26 + 80) = 0;
              WTF::fastFree(v37, a2);
            }
            v38 = *(WebCore::HTMLMetaCharsetParser **)(v26 + 48);
            *(_QWORD *)(v26 + 48) = 0;
            if (v38)
            {
              WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v38, (WTF::StringImpl *)a2);
              WTF::fastFree(v39, v40);
            }
            v41 = *(_QWORD *)(v26 + 40);
            *(_QWORD *)(v26 + 40) = 0;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
            WTF::fastFree((WTF *)v26, a2);
          }
          else
          {
            --*(_DWORD *)v26;
          }
        }
        v27 = v55[0];
        v55[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        v12 = *((_DWORD *)v5 + 49);
LABEL_50:
        if (v12 != *((_DWORD *)v5 + 50))
          break;
        v28 = *((_QWORD *)v5 + 19);
        a2 = *(char **)(v28 + 16);
        if (a2)
        {
          v29 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v29)
          {
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              a2 = (char *)(((unint64_t)a2 & 0x3FFFFFFFFLL) + v29);
          }
        }
        if (*(_BYTE *)(v28 + 64) && (v45 = *(_QWORD *)(v28 + 32)) != 0)
          v30 = *(_QWORD *)(v45 + 32);
        else
          v30 = *(_QWORD *)(v28 + 48);
        if (v30 >= v12)
        {
          WebCore::TextResourceDecoder::decodeAndFlush(*((WebCore::TextResourceDecoder **)v5 + 23), a2, v12, &v49);
          goto LABEL_67;
        }
      }
      v31 = *((_QWORD *)v5 + 19);
      a2 = *(char **)(v31 + 16);
      if (a2)
      {
        v32 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v32)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
            a2 = (char *)(((unint64_t)a2 & 0x3FFFFFFFFLL) + v32);
        }
      }
      if (*(_BYTE *)(v31 + 64) && (v46 = *(_QWORD *)(v31 + 32)) != 0)
        v33 = *(_QWORD *)(v46 + 32);
      else
        v33 = *(_QWORD *)(v31 + 48);
    }
    while (v33 < v12);
    WebCore::TextResourceDecoder::decode(*((_QWORD *)v5 + 23), a2, v12, &v49);
  }
  else
  {
    WTF::String::String();
  }
LABEL_67:
  v34 = v49;
  v49 = 0;
  this = (WTF::StringImpl *)*((_QWORD *)v5 + 21);
  *((_QWORD *)v5 + 21) = v34;
  if (!this)
    goto LABEL_70;
  v22 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
    goto LABEL_69;
  WTF::StringImpl::destroy(this, v11);
  this = v49;
  v49 = 0;
  if (!this)
    goto LABEL_70;
LABEL_37:
  v22 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
  {
LABEL_69:
    *(_DWORD *)this = v22;
    goto LABEL_70;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v19);
LABEL_70:
  v35 = (_DWORD *)*((_QWORD *)v5 + 21);
  if (v35)
    *v35 += 2;
  *a3 = v35;
  return this;
}

void WebCore::FileReaderSync::readAsArrayBuffer(WebCore::ScriptExecutionContext *a1@<X1>, WebCore::Blob *a2@<X2>, uint64_t a3@<X8>)
{
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[9];
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v16[0] = &off_1E33AEE88;
  memset(&v16[1], 0, 24);
  v16[4] = &off_1E31F4A18;
  v16[5] = 0;
  v16[6] = 0;
  v16[8] = 0;
  v17[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v17);
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  v23 = 0;
  v24 = 0;
  v22 = v7;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v8)
    *(_DWORD *)v8 += 2;
  v13 = v8;
  v14 = *(_OWORD *)((char *)a2 + 88);
  v15 = *(_OWORD *)((char *)a2 + 104);
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v16, a1, (const WTF::URL *)&v13);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v27 > 0xFFu)
  {
    *(_BYTE *)a3 = v27;
    *(_QWORD *)(a3 + 8) = 0;
    v12 = 1;
  }
  else
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      if ((_DWORD)v26 == HIDWORD(v26))
      {
        **((_DWORD **)&v20 + 1) += 2;
      }
      else
      {
        JSC::ArrayBuffer::create(*((JSC::ArrayBuffer **)&v20 + 1), v9);
        v11 = v13;
        v13 = 0;
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v13);
      }
    }
    v12 = 0;
    *(_QWORD *)a3 = v11;
  }
  *(_DWORD *)(a3 + 16) = v12;
  WebCore::FileReaderLoader::~FileReaderLoader((WebCore::FileReaderLoader *)v16, v9);
}

void WebCore::FileReaderSync::readAsBinaryString(WebCore::ScriptExecutionContext *a1@<X1>, WebCore::Blob *a2@<X2>, uint64_t a3@<X8>)
{
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[9];
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v15[0] = &off_1E33AEE88;
  v15[1] = 0;
  v15[2] = 0x100000000;
  v15[3] = 0;
  v15[4] = &off_1E31F4A18;
  v15[5] = 0;
  v15[6] = 0;
  v15[8] = 0;
  v16[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v16);
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  v22 = 0;
  v23 = 0;
  v21 = v7;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v8)
    *(_DWORD *)v8 += 2;
  v12 = v8;
  v13 = *(_OWORD *)((char *)a2 + 88);
  v14 = *(_OWORD *)((char *)a2 + 104);
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v15, a1, (const WTF::URL *)&v12);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v26 > 0xFFu)
  {
    *(_BYTE *)a3 = v26;
    *(_QWORD *)(a3 + 8) = 0;
    v11 = 1;
  }
  else
  {
    WebCore::FileReaderLoader::stringResult((WTF::StringImpl *)v15, (char *)v9, (_QWORD *)a3);
    v11 = 0;
  }
  *(_DWORD *)(a3 + 16) = v11;
  WebCore::FileReaderLoader::~FileReaderLoader((WebCore::FileReaderLoader *)v15, v9);
}

void WebCore::FileReaderSync::readAsText(WebCore::ScriptExecutionContext *a1@<X1>, WebCore::Blob *a2@<X2>, const WTF::String *a3@<X3>, uint64_t a4@<X8>)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[5];
  WTF::StringImpl *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  _QWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v23[0] = &off_1E33AEE88;
  v23[1] = 0;
  v23[2] = 0x300000000;
  v23[3] = 0;
  v23[4] = &off_1E31F4A18;
  v24 = 0;
  v25 = 0;
  v27 = 0;
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v9 += 2;
  v34 = 0;
  v35 = 0;
  v33 = v9;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v11 = *(unsigned int *)(v10 + 4);
    if ((_DWORD)v11)
    {
      v12 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName(*(_QWORD *)(v10 + 8), (const char *)(v11 | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32)));
      v14 = v13;
      v20 = v12;
      *(_QWORD *)&v21 = v13;
      if (v13 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v20))
        {
          v15 = 165;
        }
        else
        {
          v15 = 92;
        }
      }
      else
      {
        v15 = 92;
      }
      v24 = v12;
      v25 = v14;
      v26 = v15;
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v16)
    *(_DWORD *)v16 += 2;
  v20 = v16;
  v21 = *(_OWORD *)((char *)a2 + 88);
  v22 = *(_OWORD *)((char *)a2 + 104);
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v23, a1, (const WTF::URL *)&v20);
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v38 > 0xFFu)
  {
    *(_BYTE *)a4 = v38;
    *(_QWORD *)(a4 + 8) = 0;
    v19 = 1;
  }
  else
  {
    WebCore::FileReaderLoader::stringResult((WTF::StringImpl *)v23, (char *)v17, (_QWORD *)a4);
    v19 = 0;
  }
  *(_DWORD *)(a4 + 16) = v19;
  WebCore::FileReaderLoader::~FileReaderLoader((WebCore::FileReaderLoader *)v23, v17);
}

void WebCore::FileReaderSync::readAsDataURL(WebCore::ScriptExecutionContext *a1@<X1>, WebCore::Blob *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[8];
  WTF::StringImpl *v19;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v18[0] = &off_1E33AEE88;
  v18[1] = 0;
  v18[2] = 0x400000000;
  v18[3] = 0;
  v18[4] = &off_1E31F4A18;
  v18[5] = 0;
  v18[6] = 0;
  v19 = 0;
  v20[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v20);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v8 += 2;
  v26 = 0;
  v27 = 0;
  v25 = v8;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  if (v9)
    *(_DWORD *)v9 += 2;
  v10 = v19;
  v19 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v11)
    *(_DWORD *)v11 += 2;
  v15 = v11;
  v16 = *(_OWORD *)((char *)a2 + 88);
  v17 = *(_OWORD *)((char *)a2 + 104);
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v18, a1, (const WTF::URL *)&v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v30 > 0xFFu)
  {
    *(_BYTE *)a3 = v30;
    *(_QWORD *)(a3 + 8) = 0;
    v14 = 1;
  }
  else
  {
    WebCore::FileReaderLoader::stringResult((WTF::StringImpl *)v18, (char *)v12, (_QWORD *)a3);
    v14 = 0;
  }
  *(_DWORD *)(a3 + 16) = v14;
  WebCore::FileReaderLoader::~FileReaderLoader((WebCore::FileReaderLoader *)v18, v12);
}

uint64_t WebCore::NetworkSendQueue::NetworkSendQueue(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E33A18C0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)a1, a2);
  *(_QWORD *)a1 = &off_1E33AEEE0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 64) = v11;
  return a1;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E33A18C0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)a1, a2);
  *(_QWORD *)a1 = &off_1E33AEEE0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 64) = v11;
  return a1;
}

void WebCore::NetworkSendQueue::~NetworkSendQueue(WebCore::NetworkSendQueue *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  *(_QWORD *)this = &off_1E33AEEE0;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  if (v6 <= v7)
  {
    if (v6 == v7)
      goto LABEL_26;
    v15 = &v8[4 * v6];
    v16 = 16 * v7 - 16 * v6;
    do
    {
      v17 = v15[2];
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v17])(&v18, v15);
      v15[2] = -1;
      v15 += 4;
      v16 -= 16;
    }
    while (v16);
  }
  else
  {
    if (v7)
    {
      v9 = 16 * v7;
      do
      {
        v10 = v8[2];
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v19, v8);
        v8[2] = -1;
        v8 += 4;
        v9 -= 16;
      }
      while (v9);
      v8 = (unsigned int *)*((_QWORD *)this + 4);
      v6 = *((_QWORD *)this + 2);
    }
    v11 = *((unsigned int *)this + 10);
    if (v6 != v11)
    {
      v12 = &v8[4 * v6];
      v13 = 16 * v11 - 16 * v6;
      do
      {
        v14 = v12[2];
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v14])(&v20, v12);
        v12[2] = -1;
        v12 += 4;
        v13 -= 16;
      }
      while (v13);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 4);
LABEL_26:
  if (v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((WTF *)v8, a2);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WebCore::NetworkSendQueue::~NetworkSendQueue(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::NetworkSendQueue::enqueue(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = a1 + 16;
  if (v6 == v5)
    return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2);
  if (v6)
  {
    if (v5 + 1 != v6)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if (v5)
  {
    if (v5 != v7 - 1)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!(_DWORD)v7)
  {
LABEL_11:
    result = WTF::Deque<std::variant<WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,WTF::UniqueRef<WebCore::BlobLoader>>,0ul>::expandCapacity(result);
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_12;
  }
  v5 = 0;
LABEL_12:
  v8 = *(_QWORD *)(a1 + 32) + 16 * v5;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = v9;
  *(_DWORD *)(v8 + 8) = 0;
  if (v5 == *(unsigned int *)(a1 + 40) - 1)
    v10 = 0;
  else
    v10 = v5 + 1;
  *(_QWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t *WebCore::NetworkSendQueue::enqueue(WebCore::NetworkSendQueue *this, const JSC::ArrayBuffer *a2, unsigned int a3, unsigned int a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = (char *)this + 16;
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v11)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v6 = (v6 & 0x3FFFFFFFFLL) + v11;
      }
    }
    if (*((_BYTE *)a2 + 64) && (v25 = *((_QWORD *)a2 + 4)) != 0)
      v12 = *(_QWORD *)(v25 + 32);
    else
      v12 = *((_QWORD *)a2 + 6);
    if (v12 < a3)
      goto LABEL_32;
    v13 = (WTF *)a4;
    if (v12 - a3 < a4)
      goto LABEL_32;
    v14 = (WTF *)(v6 + a3);
    v15 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v15 + 24;
    *(_QWORD *)(v15 + 16) = 1;
    *(_BYTE *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v15, v14, v13);
    v26 = v15;
    v16 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v16, &v26);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v26, v17);
    v20 = *((_QWORD *)this + 2);
    v19 = *((_QWORD *)this + 3);
    if (v20)
    {
      if (v19 + 1 != v20)
        goto LABEL_28;
    }
    else
    {
      v21 = *((unsigned int *)this + 10);
      if (v19)
      {
        if (v19 != v21 - 1)
          goto LABEL_28;
      }
      else if ((_DWORD)v21)
      {
        v19 = 0;
LABEL_28:
        v22 = *((_QWORD *)this + 4) + 16 * v19;
        v26 = 0;
        *(_QWORD *)v22 = v16;
        *(_DWORD *)(v22 + 8) = 1;
        if (v19 == *((unsigned int *)this + 10) - 1)
          v23 = 0;
        else
          v23 = v19 + 1;
        *((_QWORD *)this + 3) = v23;
        return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v26, v18);
      }
    }
    WTF::Deque<std::variant<WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,WTF::UniqueRef<WebCore::BlobLoader>>,0ul>::expandCapacity((uint64_t)v5);
    v19 = *((_QWORD *)this + 3);
    goto LABEL_28;
  }
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v7)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v6 = (v6 & 0x3FFFFFFFFLL) + v7;
    }
  }
  if (*((_BYTE *)a2 + 64))
    goto LABEL_33;
LABEL_7:
  for (i = *((_QWORD *)a2 + 6); ; i = *(_QWORD *)(v24 + 32))
  {
    if (i >= a3)
    {
      v9 = a3;
      a3 = a4;
      if (i - v9 >= a4)
        break;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    v24 = *((_QWORD *)a2 + 4);
    if (!v24)
      goto LABEL_7;
  }
  return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), v6 + v9);
}

uint64_t *WebCore::NetworkSendQueue::enqueue(uint64_t *this, WebCore::Blob *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;

  v2 = this[1];
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v5 = (uint64_t)this;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((_QWORD *)a2 + 7))
      goto LABEL_5;
LABEL_9:
    JSC::ArrayBuffer::create(0);
    WebCore::NetworkSendQueue::enqueue((WebCore::NetworkSendQueue *)v5, v16, 0, 0);
    return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v16);
  }
  v11 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::Blob *)((char *)a2 + 80), a2);
  v12 = v11 & ~(v11 >> 63);
  *((_QWORD *)a2 + 7) = v12;
  *((_BYTE *)a2 + 64) = 1;
  if (!v12)
    goto LABEL_9;
LABEL_5:
  v6 = (WebCore::ScriptExecutionContext *)(v3 - 96);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E33AEF88;
  v8[1] = v5;
  *v7 = off_1E3356C10;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v8;
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(_QWORD *)(v5 + 24);
  if (v9)
  {
    if (v10 + 1 != v9)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = *(unsigned int *)(v5 + 40);
  if (v10)
  {
    if (v10 != v13 - 1)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (!(_DWORD)v13)
  {
LABEL_16:
    WTF::Deque<std::variant<WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,WTF::UniqueRef<WebCore::BlobLoader>>,0ul>::expandCapacity(v5 + 16);
    v10 = *(_QWORD *)(v5 + 24);
    goto LABEL_17;
  }
  v10 = 0;
LABEL_17:
  v14 = *(_QWORD *)(v5 + 32) + 16 * v10;
  *(_QWORD *)v14 = v7;
  *(_DWORD *)(v14 + 8) = 2;
  if (v10 == *(unsigned int *)(v5 + 40) - 1)
    v15 = 0;
  else
    v15 = v10 + 1;
  *(_QWORD *)(v5 + 24) = v15;
  return (uint64_t *)WebCore::BlobLoader::start((uint64_t)v7, (uint64_t)a2, v6, 0);
}

WTF::StringImpl *WebCore::BlobLoader::start(uint64_t a1, uint64_t a2, WebCore::ScriptExecutionContext *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;

  v8 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v8 = &off_1E33AEE88;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 20) = a4;
  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      goto LABEL_24;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a1;
    v11 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    if (!v11)
      goto LABEL_24;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
LABEL_24:
      do
        v14 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v14 + 1, (unsigned int *)v9));
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E31F4A18;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(v8 + 72));
  *(_BYTE *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v15 += 2;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 168) = v15;
  *(_BYTE *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 196) = 0;
  *(_WORD *)(v8 + 204) = 0;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
    v8 = *(_QWORD *)(a1 + 16);
  }
  v17 = *(WTF::StringImpl **)(a2 + 80);
  if (v17)
    *(_DWORD *)v17 += 2;
  v21 = v17;
  v18 = *(_OWORD *)(a2 + 104);
  v22 = *(_OWORD *)(a2 + 88);
  v23 = v18;
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v8, a3, (const WTF::URL *)&v21);
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::NetworkSendQueue::clear(uint64_t this, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v3 = *(_QWORD *)(this + 16);
  v2 = *(_QWORD *)(this + 24);
  v4 = *(WTF **)(this + 32);
  v5 = *(unsigned int *)(this + 40);
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  if (v3 <= v2)
  {
    if (v3 != v2)
    {
      v12 = (char *)v4 + 16 * v3;
      v13 = 16 * v2 - 16 * v3;
      do
      {
        v14 = *((unsigned int *)v12 + 2);
        if ((_DWORD)v14 != -1)
          this = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v14])(&v15, v12);
        *((_DWORD *)v12 + 2) = -1;
        v12 += 16;
        v13 -= 16;
      }
      while (v13);
    }
  }
  else
  {
    if (v2)
    {
      v6 = 16 * v2;
      v7 = v4;
      do
      {
        v8 = *((unsigned int *)v7 + 2);
        if ((_DWORD)v8 != -1)
          this = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v8])(&v16, v7);
        *((_DWORD *)v7 + 2) = -1;
        v7 = (WTF *)((char *)v7 + 16);
        v6 -= 16;
      }
      while (v6);
    }
    if (v3 != v5)
    {
      v9 = (char *)v4 + 16 * v3;
      v10 = 16 * v5 - 16 * v3;
      do
      {
        v11 = *((unsigned int *)v9 + 2);
        if ((_DWORD)v11 != -1)
          this = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v11])(&v17, v9);
        *((_DWORD *)v9 + 2) = -1;
        v9 += 16;
        v10 -= 16;
      }
      while (v10);
    }
  }
  if (v4)
    return WTF::fastFree(v4, a2);
  return this;
}

WTF::StringImpl *WebCore::NetworkSendQueue::processMessages(WTF::StringImpl *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ThreadableBlobRegistry *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  const WTF::String *v12;
  const WTF::String *v13;
  char v14;
  _QWORD v15[4];
  _QWORD *v16;

  v1 = *((_QWORD *)this + 2);
  if (v1 != *((_QWORD *)this + 3))
  {
    v2 = this;
    while (1)
    {
      v14 = 0;
      v3 = *((_QWORD *)v2 + 4) + 16 * v1;
      v15[0] = v2;
      v15[1] = v2;
      v15[2] = v2;
      v15[3] = &v14;
      v4 = *(unsigned int *)(v3 + 8);
      if ((_DWORD)v4 == -1)
        break;
      v16 = v15;
      this = (WTF::StringImpl *)((uint64_t (*)(_QWORD **))off_1E33AEFA0[v4])(&v16);
      if (!v14)
      {
        v6 = *((_QWORD *)v2 + 2);
        v5 = *((_QWORD *)v2 + 3);
        if (v6 == v5)
        {
          __break(0xC471u);
          JUMPOUT(0x195B76A74);
        }
        v7 = *((_QWORD *)v2 + 4) + 16 * v6;
        v8 = *(unsigned int *)(v7 + 8);
        if ((_DWORD)v8 != -1)
        {
          this = (WTF::StringImpl *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v8])(v15, *((_QWORD *)v2 + 4) + 16 * v6);
          v6 = *((_QWORD *)v2 + 2);
          v5 = *((_QWORD *)v2 + 3);
        }
        *(_DWORD *)(v7 + 8) = -1;
        v1 = v6 == *((unsigned int *)v2 + 10) - 1 ? 0 : v6 + 1;
        *((_QWORD *)v2 + 2) = v1;
        if (v1 != v5)
          continue;
      }
      return this;
    }
    v9 = (WebCore::ThreadableBlobRegistry *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL(v9, v10, v11, v12, v13);
  }
  return this;
}

WTF::StringImpl *WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL(WebCore::ThreadableBlobRegistry *this, WTF::StringImpl **a2, WTF::StringImpl **a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  void (***v10)(_QWORD, WebCore::ThreadableBlobRegistry *, WTF::StringImpl **, WTF::StringImpl **, const WTF::String *);
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  if (*a3)
    v8 = *a3;
  else
    v8 = *a2;
  if (v8)
    *(_DWORD *)v8 += 2;
  v31 = v8;
  if (WTF::isMainThread(this))
  {
    v9 = WebCore::s_platformStrategies;
    v10 = *(void (****)(_QWORD, WebCore::ThreadableBlobRegistry *, WTF::StringImpl **, WTF::StringImpl **, const WTF::String *))(WebCore::s_platformStrategies + 40);
    if (!v10)
    {
      v10 = (void (***)(_QWORD, WebCore::ThreadableBlobRegistry *, WTF::StringImpl **, WTF::StringImpl **, const WTF::String *))(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v9 + 40) = v10;
    }
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)v11 = off_1E341CF60;
    if (v8)
      *(_DWORD *)v8 += 2;
    *(_QWORD *)(v11 + 16) = v8;
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0x7FF8000000000000;
    v22 = (WTF::StringImpl *)v11;
    (**v10)(v10, this, &v22, a2, a4);
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    WTF::URL::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v14 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v14 = &off_1E33AEFC8;
    v15 = v22;
    v22 = 0;
    *(_QWORD *)(v14 + 8) = v15;
    LODWORD(v15) = v23;
    *(_DWORD *)(v14 + 16) = v23;
    *(_OWORD *)(v14 + 20) = v24;
    *(_QWORD *)(v14 + 36) = v25;
    *(_DWORD *)(v14 + 44) = v26;
    v23 = v15 & 0xFFFFFFFE;
    *(_QWORD *)(v14 + 48) = v27;
    v16 = v28;
    v27 = 0;
    v28 = 0;
    *(_QWORD *)(v14 + 56) = v16;
    v17 = v29;
    v29 = 0;
    v30 = v14;
    *(_QWORD *)(v14 + 64) = v17;
    WTF::callOnMainThread();
    v18 = v30;
    v30 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v29;
    v29 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v12);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = v31;
  }
  v31 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v12);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15[8];
  uint64_t v16;

  if (WTF::isMainThread(a1))
  {
    v6 = WebCore::s_platformStrategies;
    v7 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v7)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v6 + 40) = v7;
    }
    return (*(uint64_t (**)(uint64_t, WTF *, uint64_t, uint64_t))(*(_QWORD *)v7 + 8))(v7, a1, a2, a3);
  }
  else
  {
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 48 * v9;
      do
      {
        WebCore::BlobPart::detachFromCurrentThread(v10);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
    WTF::URL::isolatedCopy();
    v15[5] = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v15[6] = v12;
    WTF::String::isolatedCopy();
    WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0,void>(&v16, v15);
    WTF::callOnMainThread();
    v14 = v16;
    v16 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0::~$_0((uint64_t)v15, v13);
  }
}

uint64_t WebCore::BlobPart::detachFromCurrentThread(uint64_t this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;

  if (*(_DWORD *)(this + 40) != 1)
    return this;
  v1 = this;
  this = WTF::URL::isolatedCopy();
  v3 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v3 == -1)
  {
LABEL_9:
    *(_QWORD *)v1 = v5;
    *(_OWORD *)(v1 + 8) = v6;
    *(_OWORD *)(v1 + 24) = v7;
    *(_DWORD *)(v1 + 40) = 1;
    return this;
  }
  if ((_DWORD)v3 != 1)
  {
    this = ((uint64_t (*)(char *, uint64_t))off_1E33AEF18[v3])(&v8, v1);
    goto LABEL_9;
  }
  v4 = *(WTF::StringImpl **)v1;
  *(_QWORD *)v1 = v5;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      this = 0;
    }
    else
    {
      this = 0;
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    this = 0;
  }
  *(_OWORD *)(v1 + 8) = v6;
  *(_OWORD *)(v1 + 24) = v7;
  return this;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x48);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E33AEFF0;
  *(_QWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v4 + 16) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(v4 + 16) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(v4 + 16) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(v4 + 16) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 16) = a2[1] & 0xFFFFFFC0 | v5 & 0x3F;
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(v4 + 36) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(v4 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(v4 + 60) = v6;
  v7 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(v4 + 64) = v7;
  *a1 = v4;
  return a1;
}

uint64_t WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v10;

  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 52);
  v5 = *(unsigned int **)(a1 + 40);
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    do
    {
      v7 = v5[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AEF18[v7])(&v10, v5);
      v5[10] = -1;
      v5 += 12;
      v6 -= 48;
    }
    while (v6);
    v5 = *(unsigned int **)(a1 + 40);
  }
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

WTF *WebCore::ThreadableBlobRegistry::registerBlobURL(unsigned int *a1, unint64_t *a2, WTF::URL *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *result;
  WebCore::SecurityOrigin *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29[10];
  _QWORD v30[11];
  _BYTE v31[40];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (WTF::isMainThread((WTF *)a1))
  {
    if (a1)
    {
      do
        v10 = __ldaxr(a1);
      while (__stlxr(v10 + 1, a1));
    }
    v29[0] = (WTF *)a1;
    WebCore::addToOriginMapIfNecessary(a3, (WTF::StringImpl *)v29);
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v24 = (WTF::StringImpl *)*((_QWORD *)v12 + 6);
        *((_QWORD *)v12 + 6) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v11);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = (WTF::StringImpl *)*((_QWORD *)v12 + 5);
        *((_QWORD *)v12 + 5) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v11);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = *((unsigned int *)v12 + 8);
        if ((_DWORD)v26 != -1)
          ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v26])(&v28, (char *)v12 + 8);
        *((_DWORD *)v12 + 8) = -1;
        WTF::fastFree(v12, v11);
      }
    }
    v15 = WebCore::s_platformStrategies;
    v16 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v16)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v15 + 40) = v16;
    }
    return (WTF *)(*(uint64_t (**)(uint64_t, WTF::URL *, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v16 + 16))(v16, a3, a4, a2, a5);
  }
  else
  {
    v28 = 0;
    if (a1)
    {
      v18 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
      v29[0] = WebCore::SecurityOrigin::SecurityOrigin(v18, (const WebCore::SecurityOrigin *)a1);
      WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=<WebCore::SecurityOrigin>((uint64_t *)&v28, (WTF::StringImpl *)v29);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v29, v19);
    }
    WTF::URL::isolatedCopy();
    WTF::URL::isolatedCopy();
    WTF::crossThreadCopy<WebCore::PolicyContainer>((uint64_t)v30, a2);
    v20 = v28;
    v28 = 0;
    v30[10] = v20;
    WTF::crossThreadCopy<std::optional<WebCore::SecurityOriginData> const&>(v31, a5);
    WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(&v27, (uint64_t *)v29);
    WTF::callOnMainThread();
    v22 = v27;
    v27 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0((uint64_t)v29, v21);
    result = v28;
    v28 = 0;
    if (result)
      return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v23);
  }
  return result;
}

WTF::URL *WebCore::addToOriginMapIfNecessary(WTF::URL *result, WTF::StringImpl *a2)
{
  WTF::URL *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _QWORD v13[3];
  WTF::StringImpl *v14;
  int v15;

  if (!*(_QWORD *)a2)
    return result;
  v3 = result;
  result = (WTF::URL *)WTF::URL::pathStart(result);
  v5 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  if (v7 <= result)
    return result;
  v8 = *((_DWORD *)v3 + 7) + ~(_DWORD)result;
  if ((int)v7 - (int)result <= v8)
  {
    if (!(_DWORD)result)
    {
      v9 = v7;
      goto LABEL_9;
    }
    v8 = v7 - (_DWORD)result;
  }
  v9 = v8;
  v10 = v7 - (unint64_t)result;
  if ((v7 & 0x100000000) != 0)
  {
    if (v10 >= v9)
    {
      v6 += result;
      v9 |= 0x100000000uLL;
      goto LABEL_9;
    }
LABEL_35:
    __break(1u);
    return (WTF::URL *)WTF::StringImpl::destroy(result, v4);
  }
  if (v10 < v9)
    goto LABEL_35;
  v6 += 2 * result;
LABEL_9:
  if ((char *)v6 == "null" || v9 != 4)
  {
    if ((char *)v6 != "null" || v9 != 4)
      return result;
  }
  else
  {
    if ((v9 & 0x100000000) != 0)
    {
      if (*(_BYTE *)v6 != 110 || *(_WORD *)(v6 + 1) != 27765)
        return result;
      v11 = *(unsigned __int16 *)(v6 + 2);
      v12 = 27756;
    }
    else
    {
      if (*(_WORD *)v6 != 110)
        return result;
      v12 = 7077996;
      if (*(_DWORD *)(v6 + 2) != 7078005)
        return result;
      v11 = *(_DWORD *)(v6 + 4);
    }
    if (v11 != v12)
      return result;
  }
  WTF::URL::stringWithoutFragmentIdentifier(v3);
  if ((_MergedGlobals_179 & 1) == 0)
  {
    qword_1ECE83368 = 0;
    _MergedGlobals_179 = 1;
  }
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)v13, &v14, a2);
  if ((byte_1ECE83361 & 1) == 0)
  {
    qword_1ECE83370 = 0;
    byte_1ECE83361 = 1;
  }
  v15 = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&qword_1ECE83370, &v14, (const WTF::StringImpl *)&v15, (uint64_t)v13);
  ++*(_DWORD *)(v13[0] + 8);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::URL *)WTF::StringImpl::destroy(result, v4);
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=<WebCore::SecurityOrigin>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(WTF::StringImpl **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v10])(&v11, v4 + 8);
      *(_DWORD *)(v4 + 32) = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::crossThreadCopy<WebCore::PolicyContainer>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    do
    {
      WTF::String::isolatedCopy();
      v8 = *(_BYTE *)(v4 + 8);
      v9 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = v13;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      *(_BYTE *)(v4 + 8) = v8;
      v4 += 16;
    }
    while (v4 < v6);
    v4 = *a2;
    LODWORD(v5) = *((_DWORD *)a2 + 3);
  }
  v10 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  v11 = *((_DWORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v11;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  WTF::String::isolatedCopy();
  result = WTF::String::isolatedCopy();
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return result;
}

_BYTE *WTF::crossThreadCopy<std::optional<WebCore::SecurityOriginData> const&>(_BYTE *result, uint64_t a2)
{
  _BYTE *v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  _BYTE v6[24];
  unsigned int v7;
  uint64_t v8;

  v2 = result;
  v8 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 32))
  {
    result = WebCore::SecurityOriginData::isolatedCopy(a2, (uint64_t)v6);
    *v2 = 0;
    *((_DWORD *)v2 + 6) = -1;
    v3 = v7;
    if (v7 == -1)
    {
      v2[32] = 1;
    }
    else
    {
      result = (_BYTE *)((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E33AEF28[v7])(&v5, v2, v6);
      *((_DWORD *)v2 + 6) = v3;
      v4 = v7;
      v2[32] = 1;
      if ((_DWORD)v4 != -1)
        return (_BYTE *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v4])(&v5, v6);
    }
  }
  else
  {
    *result = 0;
    result[32] = 0;
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v4 = WTF::fastMalloc((WTF *)0xD8);
  v5 = v4;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E33AF018;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v4 + 16) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 16) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(v4 + 36) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(v4 + 48) = v7;
  LODWORD(v6) = *(_DWORD *)(v4 + 56) & 0xFFFFFFFE | a2[6] & 1;
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 12) >> 1) & 1));
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 12) >> 2) & 1));
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 12) >> 3) & 7));
  *(_DWORD *)(v4 + 56) = v6;
  *(_DWORD *)(v4 + 56) = a2[6] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(v4 + 60) = *(_OWORD *)((char *)a2 + 52);
  *(_QWORD *)(v4 + 76) = *(uint64_t *)((char *)a2 + 68);
  *(_DWORD *)(v4 + 84) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 12) &= ~1u;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v8 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(v4 + 88) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(v4 + 96) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(v4 + 100) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 24);
  *(_BYTE *)(v4 + 108) = *((_BYTE *)a2 + 100);
  *(_DWORD *)(v4 + 104) = v8;
  *(_WORD *)(v4 + 112) = *((_WORD *)a2 + 52);
  v9 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(v4 + 120) = v9;
  v10 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(v4 + 128) = v10;
  *(_WORD *)(v4 + 136) = *((_WORD *)a2 + 64);
  v11 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(v4 + 144) = v11;
  v12 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(v4 + 152) = v12;
  *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 152);
  v13 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(v4 + 168) = v13;
  *(_BYTE *)(v4 + 176) = 0;
  *(_BYTE *)(v4 + 208) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    *(_DWORD *)(v4 + 200) = -1;
    v14 = *((unsigned int *)a2 + 48);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E33AEF28[v14])(&v16, v4 + 176, a2 + 21);
      *(_DWORD *)(v5 + 200) = v14;
    }
    *(_BYTE *)(v5 + 208) = 1;
  }
  *a1 = v5;
  return a1;
}

uint64_t WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v14;
  char v15;

  if (*(_BYTE *)(a1 + 200))
  {
    v3 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v14, a1 + 168);
    *(_DWORD *)(a1 + 192) = -1;
  }
  v4 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(WTF::StringImpl **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(WTF::StringImpl **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v13])(&v15, v4 + 8);
      *(_DWORD *)(v4 + 32) = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(a1 + 80), a2);
  v8 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::ThreadableBlobRegistry::registerInternalBlobURLOptionallyFileBacked(WebCore::ThreadableBlobRegistry *this, const WTF::URL *a2, const WTF::URL *a3, const WTF::String *a4, const WTF::String *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;

  if (WTF::isMainThread(this))
  {
    v9 = WebCore::s_platformStrategies;
    v10 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v10)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v9 + 40) = v10;
    }
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)v11 = off_1E341CF60;
    v12 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v12 += 2;
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0x7FF8000000000000;
    v23 = (WTF::StringImpl *)v11;
    (*(void (**)(uint64_t, WebCore::ThreadableBlobRegistry *, const WTF::URL *, WTF::StringImpl **, const WTF::String *))(*(_QWORD *)v10 + 24))(v10, this, a2, &v23, a4);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    WTF::URL::isolatedCopy();
    WTF::URL::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v14 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v14 = &off_1E33AF040;
    v15 = v23;
    v23 = 0;
    *(_QWORD *)(v14 + 8) = v15;
    LODWORD(v15) = v24;
    *(_DWORD *)(v14 + 16) = v24;
    *(_OWORD *)(v14 + 20) = v25;
    *(_QWORD *)(v14 + 36) = v26;
    *(_DWORD *)(v14 + 44) = v27;
    v24 = v15 & 0xFFFFFFFE;
    v16 = v28;
    v28 = 0;
    *(_QWORD *)(v14 + 48) = v16;
    LODWORD(v16) = v29;
    *(_DWORD *)(v14 + 56) = v29;
    *(_OWORD *)(v14 + 60) = v30;
    *(_QWORD *)(v14 + 76) = v31;
    *(_DWORD *)(v14 + 84) = v32;
    v29 = v16 & 0xFFFFFFFE;
    *(_QWORD *)(v14 + 88) = v33;
    v17 = v34;
    v33 = 0;
    v34 = 0;
    *(_QWORD *)(v14 + 96) = v17;
    v35 = v14;
    WTF::callOnMainThread();
    v19 = v35;
    v35 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v34;
    v34 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v28;
    v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v18);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ThreadableBlobRegistry::registerInternalBlobURLForSlice(WebCore::ThreadableBlobRegistry *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  if (WTF::isMainThread(this))
  {
    v11 = WebCore::s_platformStrategies;
    v12 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v12)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v11 + 40) = v12;
    }
    return (*(uint64_t (**)(uint64_t, WebCore::ThreadableBlobRegistry *, const WTF::URL *, const WTF::URL *, uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, this, a2, a3, a4, a5);
  }
  else
  {
    WTF::URL::isolatedCopy();
    WTF::URL::isolatedCopy();
    *(_QWORD *)&v25 = a3;
    *((_QWORD *)&v25 + 1) = a4;
    WTF::String::isolatedCopy();
    v14 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v14 = &off_1E33AF068;
    *(_QWORD *)(v14 + 8) = v15;
    *(_DWORD *)(v14 + 16) = v16;
    *(_OWORD *)(v14 + 20) = v17;
    *(_QWORD *)(v14 + 36) = v18;
    *(_DWORD *)(v14 + 44) = v19;
    *(_QWORD *)(v14 + 48) = v20;
    *(_DWORD *)(v14 + 56) = v21;
    *(_OWORD *)(v14 + 60) = v22;
    *(_QWORD *)(v14 + 76) = v23;
    *(_DWORD *)(v14 + 84) = v24;
    *(_OWORD *)(v14 + 88) = v25;
    *(_QWORD *)(v14 + 104) = v26;
    v27 = v14;
    WTF::callOnMainThread();
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return 0;
  }
}

uint64_t WebCore::ThreadableBlobRegistry::blobType@<X0>(WebCore::ThreadableBlobRegistry *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (WTF::isMainThread(this))
  {
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 40) = v6;
    }
    return (*(uint64_t (**)(uint64_t, WebCore::ThreadableBlobRegistry *))(*(_QWORD *)v6 + 64))(v6, this);
  }
  else
  {
    *a2 = 0;
    WTF::URL::isolatedCopy();
    v8 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v8 = &off_1E33AF090;
    *(_QWORD *)(v8 + 8) = v9;
    *(_DWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 20) = v11;
    *(_QWORD *)(v8 + 36) = v12;
    *(_DWORD *)(v8 + 44) = v13;
    *(_QWORD *)(v8 + 48) = a2;
    v14 = v8;
    WTF::callOnMainThreadAndWait();
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return 0;
  }
}

uint64_t WebCore::ThreadableBlobRegistry::blobSize(WebCore::ThreadableBlobRegistry *this, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (WTF::isMainThread(this))
  {
    v3 = WebCore::s_platformStrategies;
    v4 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v4)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
      *(_QWORD *)(v3 + 40) = v4;
    }
    return (*(uint64_t (**)(uint64_t, WebCore::ThreadableBlobRegistry *))(*(_QWORD *)v4 + 72))(v4, this);
  }
  else
  {
    v13 = 0;
    WTF::URL::isolatedCopy();
    v6 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v6 = &off_1E33AF0B8;
    *(_QWORD *)(v6 + 8) = v7;
    *(_DWORD *)(v6 + 16) = v8;
    *(_OWORD *)(v6 + 20) = v9;
    *(_QWORD *)(v6 + 36) = v10;
    *(_DWORD *)(v6 + 44) = v11;
    *(_QWORD *)(v6 + 48) = &v13;
    v12 = v6;
    WTF::callOnMainThreadAndWait();
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return v13;
  }
}

WTF::StringImpl *WebCore::ThreadableBlobRegistry::unregisterBlobURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[24];
  int v18;
  char v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WTF::URL::isolatedCopy();
  if (*(_BYTE *)(a2 + 32))
  {
    WebCore::SecurityOriginData::isolatedCopy(a2, (uint64_t)v20);
    v17[0] = 0;
    v18 = -1;
    v10 = v21;
    if (v21 == -1)
    {
      v19 = 1;
    }
    else
    {
      ((void (*)(char *, _BYTE *, _QWORD *))off_1E33AEF28[v21])(&v11, v17, v20);
      v18 = v10;
      v19 = 1;
      if (v21 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v21])(&v11, v20);
    }
  }
  else
  {
    v17[0] = 0;
    v19 = 0;
  }
  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = v3;
  *(_QWORD *)v3 = &off_1E33AF0E0;
  v5 = v12;
  v12 = 0;
  *(_QWORD *)(v3 + 8) = v5;
  LODWORD(v5) = v13;
  *(_DWORD *)(v3 + 16) = v13;
  *(_OWORD *)(v3 + 20) = v14;
  *(_QWORD *)(v3 + 36) = v15;
  *(_DWORD *)(v3 + 44) = v16;
  v13 = v5 & 0xFFFFFFFE;
  *(_BYTE *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 80) = 0;
  if (v19)
  {
    *(_DWORD *)(v3 + 72) = -1;
    v6 = v18;
    if (v18 != -1)
    {
      ((void (*)(_QWORD *, uint64_t, _BYTE *))off_1E33AEF28[v18])(v20, v3 + 48, v17);
      *(_DWORD *)(v4 + 72) = v6;
    }
    *(_BYTE *)(v4 + 80) = 1;
  }
  v20[0] = v4;
  WTF::ensureOnMainThread();
  v8 = v20[0];
  v20[0] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v19)
  {
    if (v18 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v18])(&v11, v17);
    v18 = -1;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ThreadableBlobRegistry::registerBlobURLHandle(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[5];
  _BYTE v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WTF::URL::isolatedCopy();
  WTF::crossThreadCopy<std::optional<WebCore::SecurityOriginData> const&>(v8, a2);
  WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(&v6, v7);
  WTF::ensureOnMainThread();
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0((uint64_t)v7, v3);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E33AF108;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v4 + 16) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 16) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(v4 + 36) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_DWORD *)(v4 + 72) = -1;
    v7 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E33AEF28[v7])(&v9, v4 + 48, a2 + 5);
      *(_DWORD *)(v5 + 72) = v7;
    }
    *(_BYTE *)(v5 + 80) = 1;
  }
  *a1 = v5;
  return a1;
}

uint64_t WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, a1 + 40);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[5];
  _BYTE v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WTF::URL::isolatedCopy();
  WTF::crossThreadCopy<std::optional<WebCore::SecurityOriginData> const&>(v8, a2);
  WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(&v6, v7);
  WTF::ensureOnMainThread();
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0((uint64_t)v7, v3);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E33AF130;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v4 + 16) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 16) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(v4 + 36) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_DWORD *)(v4 + 72) = -1;
    v7 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E33AEF28[v7])(&v9, v4 + 48, a2 + 5);
      *(_DWORD *)(v5 + 72) = v7;
    }
    *(_BYTE *)(v5 + 80) = 1;
  }
  *a1 = v5;
  return a1;
}

WTF::StringImpl *WebCore::ThreadableBlobRegistry::getCachedOrigin@<X0>(WebCore::ThreadableBlobRegistry *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  char isMainThread;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = 0;
  isMainThread = WTF::isMainThread(this);
  WTF::URL::isolatedCopy();
  LOBYTE(v33) = isMainThread;
  *((_QWORD *)&v33 + 1) = &v35;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v6 = &off_1E33AF158;
  v7 = v28;
  v28 = 0;
  *(_QWORD *)(v6 + 8) = v7;
  LODWORD(v7) = v29;
  *(_DWORD *)(v6 + 16) = v29;
  *(_OWORD *)(v6 + 20) = v30;
  *(_QWORD *)(v6 + 36) = v31;
  *(_DWORD *)(v6 + 44) = v32;
  v29 = v7 & 0xFFFFFFFE;
  *(_OWORD *)(v6 + 48) = v33;
  v34 = v6;
  WTF::callOnMainThreadAndWait();
  v9 = v34;
  v34 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  v11 = v35;
  if (v35)
    goto LABEL_49;
  result = (WTF::StringImpl *)WTF::URL::pathStart(this);
  v13 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v13 + 8);
    v14 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v14 = 0x100000000;
  }
  if (v14 <= result)
    goto LABEL_21;
  v15 = *((_DWORD *)this + 7) + ~(_DWORD)result;
  if ((int)v14 - (int)result <= v15)
  {
    if (!(_DWORD)result)
    {
      v16 = v14;
      goto LABEL_14;
    }
    v15 = v14 - (_DWORD)result;
  }
  v16 = v15;
  v17 = v14 - (unint64_t)result;
  if ((v14 & 0x100000000) == 0)
  {
    if (v17 >= v16)
    {
      v11 += 2 * result;
      goto LABEL_14;
    }
    goto LABEL_48;
  }
  if (v17 < v16)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    *a2 = (WTF::StringImpl *)v11;
    return result;
  }
  v11 += result;
  v16 |= 0x100000000uLL;
LABEL_14:
  if ((char *)v11 == "null" || v16 != 4)
  {
    if ((char *)v11 != "null" || v16 != 4)
      goto LABEL_21;
    goto LABEL_28;
  }
  if ((v16 & 0x100000000) != 0)
  {
    if (*(_BYTE *)v11 != 110 || *(_WORD *)(v11 + 1) != 27765)
      goto LABEL_21;
    v18 = *(unsigned __int16 *)(v11 + 2);
    v19 = 27756;
  }
  else
  {
    if (*(_WORD *)v11 != 110)
      goto LABEL_21;
    v19 = 7077996;
    if (*(_DWORD *)(v11 + 2) != 7078005)
      goto LABEL_21;
    v18 = *(_DWORD *)(v11 + 4);
  }
  if (v18 == v19)
  {
LABEL_28:
    WebCore::SecurityOrigin::createOpaque((uint64_t *)&v28);
    v23 = v28;
    v28 = 0;
    *a2 = v23;
    result = (WTF::StringImpl *)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v28, v24);
    goto LABEL_22;
  }
LABEL_21:
  *a2 = 0;
LABEL_22:
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v25 = *(WTF::StringImpl **)(v20 + 48);
      *(_QWORD *)(v20 + 48) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v12);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(WTF::StringImpl **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v12);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *(unsigned int *)(v20 + 32);
      if ((_DWORD)v27 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v27])(&v28, v20 + 8);
      *(_DWORD *)(v20 + 32) = -1;
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v20, v12);
    }
  }
  return result;
}

uint64_t WebCore::URLKeepingBlobAlive::unregisterBlobURLHandleIfNecessary(WebCore::URLKeepingBlobAlive *this)
{
  uint64_t result;
  char v3;
  _BYTE v4[24];
  int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = WTF::URL::protocolIs();
  if ((_DWORD)result)
  {
    WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)this + 10, (uint64_t)v4);
    result = WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle((uint64_t)this, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v5])(&v3, v4);
    }
  }
  return result;
}

uint64_t WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33AEF38[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)a1);
  *(_BYTE *)a2 = 0;
  if ((result & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 24) = -1;
    v5 = a1[6];
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_5[v5])(&v7, a2, a1);
      *(_DWORD *)(a2 + 24) = v5;
    }
    v6 = 1;
  }
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

WTF::StringImpl *WebCore::URLKeepingBlobAlive::isolatedCopy@<X0>(WebCore::URLKeepingBlobAlive *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char isNull;
  char v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  unsigned int v16;
  char v17;
  _QWORD v18[3];
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WTF::URL::isolatedCopy();
  if (WebCore::SecurityOriginData::isNull((WebCore::URLKeepingBlobAlive *)((char *)this + 40)))
  {
    v13 = 0u;
    v14 = 0u;
  }
  else
  {
    v4 = *((unsigned int *)this + 16);
    if ((_DWORD)v4 == -1)
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(v11);
    }
    v18[0] = &v13;
    ((void (*)(_QWORD *__return_ptr, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v4])(v15, v18, (char *)this + 40);
    LOBYTE(v18[0]) = 0;
    v19 = -1;
    v5 = v16;
    if (v16 != -1)
    {
      ((void (*)(__int128 *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v16])(&v13, v18, v15);
      v19 = v5;
      if (v16 == -1)
      {
        LOBYTE(v13) = 0;
        DWORD2(v14) = -1;
      }
      else
      {
        ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v16])(&v13, v15);
        v5 = v19;
        LOBYTE(v13) = 0;
        DWORD2(v14) = -1;
        if (v19 == -1)
          goto LABEL_12;
      }
      ((void (*)(_QWORD *, __int128 *, _QWORD *))off_1E33AEF28[v5])(v15, &v13, v18);
      DWORD2(v14) = v5;
      if (v19 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v19])(v15, v18);
      goto LABEL_12;
    }
    LOBYTE(v13) = 0;
    DWORD2(v14) = -1;
  }
LABEL_12:
  isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)&v13);
  v7 = 0;
  LOBYTE(v15[0]) = 0;
  if ((isNull & 1) == 0)
  {
    v16 = -1;
    v8 = DWORD2(v14);
    if (DWORD2(v14) != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, __int128 *))off_1E33AEF28[DWORD2(v14)])(v18, v15, &v13);
      v16 = v8;
    }
    v7 = 1;
  }
  v17 = v7;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(a2, (uint64_t)&v12, (uint64_t)v15);
  if (v17)
  {
    if (v16 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v16])(v18, v15);
    v16 = -1;
  }
  if (DWORD2(v14) != -1)
    ((void (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v14)])(v18, &v13);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  _QWORD *v13;
  WTF *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;

  v6 = qword_1ECE83368;
  if (qword_1ECE83368
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u, 0), (v6 = qword_1ECE83368) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v9 = v8 >> 8;
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (_QWORD *)(v6 + 16 * (v9 & v7));
    v14 = (WTF *)*v13;
    if (*v13 != -1)
      break;
    v10 = (_QWORD *)(v6 + 16 * v12);
LABEL_13:
    v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(qword_1ECE83368 - 16);
      v13 = v10;
    }
    v16 = *a2;
    if (*a2)
      *(_DWORD *)v16 += 2;
    *v13 = v16;
    result = (uint64_t)WTF::GenericHashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::assignToEmpty<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(v13 + 1, a3);
    if (qword_1ECE83368)
      v17 = *(_DWORD *)(qword_1ECE83368 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(qword_1ECE83368 - 12) = v17;
    v19 = qword_1ECE83368;
    if (qword_1ECE83368)
      v20 = *(_DWORD *)(qword_1ECE83368 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(qword_1ECE83368 - 16) + v20);
    v22 = *(unsigned int *)(qword_1ECE83368 - 4);
    if (v22 > 0x400)
    {
      if (v22 <= 2 * v21)
        goto LABEL_29;
    }
    else if (3 * v22 <= 4 * v21)
    {
      if (!(_DWORD)v22)
      {
        v23 = 8;
LABEL_34:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v23, (WTF::StringImpl **)v13);
        v13 = (_QWORD *)result;
        v19 = qword_1ECE83368;
        if (qword_1ECE83368)
          v22 = *(unsigned int *)(qword_1ECE83368 - 4);
        else
          v22 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v23 = (_DWORD)v22 << (6 * *(_DWORD *)(qword_1ECE83368 - 12) >= (2 * v22));
      goto LABEL_34;
    }
LABEL_38:
    v25 = v19 + 16 * v22;
    v24 = 1;
    goto LABEL_39;
  }
  result = WTF::equal(v14, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  if (qword_1ECE83368)
    v18 = *(unsigned int *)(qword_1ECE83368 - 4);
  else
    v18 = 0;
  v24 = 0;
  v25 = qword_1ECE83368 + 16 * v18;
LABEL_39:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **result;

  v4 = qword_1ECE83368;
  if (qword_1ECE83368)
  {
    v5 = *(_DWORD *)(qword_1ECE83368 - 4);
    v6 = *(_DWORD *)(qword_1ECE83368 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE83368 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE83368 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v14 = qword_1ECE83368;
          if (qword_1ECE83368)
            v15 = *(_DWORD *)(qword_1ECE83368 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v13 + 4);
          if (v16 < 0x100)
            v17 = WTF::StringImpl::hashSlowCase(v13);
          else
            v17 = v16 >> 8;
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = (WTF::StringImpl **)(v14 + 16 * v19);
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::~KeyValuePair((uint64_t)v20, v8);
          v21 = *v12;
          *v12 = 0;
          *v20 = v21;
          v22 = v4 + 16 * v9;
          v23 = *(WTF::StringImpl **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          v20[1] = v23;
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::~KeyValuePair(v22, v24);
          if (v12 == a2)
            v10 = v20;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::~KeyValuePair(v4 + 16 * v9, v8);
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v10])(&v11, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t *WTF::GenericHashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::assignToEmpty<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v3 = *result;
  *result = v2;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v8])(&v9, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      return (uint64_t *)WTF::fastFree((WTF *)v3, a2);
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 16 * (v11 & v9));
    result = *(WTF **)v15;
    if (!*(_QWORD *)v15)
    {
      if (v12)
      {
        result = 0;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v12;
      }
      v17 = *a2;
      if (*a2)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)v15 = v17;
      *((_DWORD *)v15 + 2) = *(_DWORD *)a3;
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_20;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_20:
        v24 = v20 + 16 * v23;
        v25 = 1;
        goto LABEL_21;
      }
      result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
      v15 = result;
      v20 = *a1;
      if (*a1)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_20;
    }
    if (result != (WTF *)-1)
      break;
    v12 = (WTF *)(v8 + 16 * v14);
LABEL_9:
    v11 = i + v14;
  }
  result = (WTF *)WTF::equal(result, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_9;
  v26 = *a1;
  if (*a1)
    v27 = *(unsigned int *)(v26 - 4);
  else
    v27 = 0;
  v25 = 0;
  v24 = v26 + 16 * v27;
LABEL_21:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::Base64Specification>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;

  v7 = *(int8x16_t **)result;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_26;
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = *(int8x16_t **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_5;
  }
  v13 = v12 - 1;
  if ((unint64_t)(v12 - 1) >> 31)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x195B7975CLL);
  }
LABEL_5:
  v14 = *(_DWORD *)(a4 + 8);
  if ((v14 + 1115575925) >= 0x427E5676)
  {
    if ((*(_BYTE *)(a4 + 16) & 2) != 0)
      v15 = ((4 * v14) | 2u) / 3;
    else
      v15 = (2 * ((2863311531u * (unint64_t)(v14 + 2)) >> 32)) & 0xFFFFFFFC;
  }
  else
  {
    v15 = 0;
  }
  if (!v10)
  {
    v16 = 0;
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_22:
    *a5 = 0;
    return result;
  }
  v16 = *(_DWORD *)(v10 + 4);
  if (v15 < 0)
    goto LABEL_22;
LABEL_12:
  v17 = v13 + v15;
  if (__OFADD__(v13, v15))
    goto LABEL_22;
  if (v16 < 0)
    goto LABEL_22;
  v18 = __OFADD__(v16, v17);
  v19 = v16 + v17;
  if (v18)
    goto LABEL_22;
  result = v9 + v19;
  if (__OFADD__(v9, v19))
    goto LABEL_22;
  v20 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Base64Specification,void>>(result, v20, v7, v9, v10, v11, v13, a5);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Base64Specification,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  _QWORD *i;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v28;

  v13 = result;
  i = a8;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v28;
        if (v28)
        {
          v16 = (_BYTE *)(v28 + 20);
          *(_DWORD *)v28 = 2;
          *(_DWORD *)(v28 + 4) = v13;
          *(_QWORD *)(v28 + 8) = v28 + 20;
          *(_DWORD *)(v28 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v16 = a3->i8[0];
            else
              memcpy((void *)(v28 + 20), a3, a4);
          }
          v17 = &v16[a4];
          if (a5)
          {
            v18 = *(_BYTE **)(a5 + 8);
            v19 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              i = a8;
              if ((_DWORD)v19)
              {
                if ((_DWORD)v19 == 1)
                  *v17 = *v18;
                else
                  memcpy(v17, v18, v19);
              }
            }
            else
            {
              v21 = (unsigned __int128 *)&v17[v19];
              if (v19 < 0x10)
              {
                v22 = (unsigned __int128 *)v17;
              }
              else
              {
                v22 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
                v23 = (unsigned __int128 *)v17;
                do
                {
                  v24 = (unsigned __int128)vld2q_s8(v18);
                  v18 += 32;
                  *v23++ = v24;
                }
                while (v23 != v22);
              }
              for (i = a8; v22 != v21; v22 = (unsigned __int128 *)((char *)v22 + 1))
              {
                v25 = *v18;
                v18 += 2;
                *(_BYTE *)v22 = v25;
              }
            }
            v20 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v20 = 0;
            i = a8;
          }
          if (a7)
          {
            if (a7 == 1)
              v17[v20] = a6->i8[0];
            else
              memcpy(&v17[v20], a6, a7);
          }
          result = WTF::base64Encode();
        }
        goto LABEL_22;
      }
LABEL_28:
      v15 = 0;
      goto LABEL_22;
    }
LABEL_27:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_22;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v28;
  if (v28)
  {
    *(_DWORD *)v28 = 2;
    *(_DWORD *)(v28 + 4) = v13;
    *(_QWORD *)(v28 + 8) = v28 + 20;
    *(_DWORD *)(v28 + 16) = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Base64Specification,void>>((char *)(v28 + 20), a3, a4, a5, a6, a7);
  }
LABEL_22:
  *i = v15;
  return result;
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Base64Specification,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  char *v9;
  char *v10;
  __int128 v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  v9 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v10 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v11 = 0uLL;
    do
    {
      v45.val[0] = *a2;
      v12 = a2[1];
      v48.val[0] = a2[2];
      v13 = a2[3];
      a2 += 4;
      v14 = v13;
      v48.val[1] = 0uLL;
      v51.val[0] = v12;
      v45.val[1] = 0uLL;
      v15 = a1;
      vst2q_s8(v15, v45);
      v15 += 32;
      v51.val[1] = 0uLL;
      vst2q_s8(v15, v51);
      v16 = a1 + 64;
      vst2q_s8(v16, v48);
      v17 = a1 + 96;
      vst2q_s8(v17, *(int8x16x2_t *)(&v11 - 1));
      a1 += 128;
    }
    while (a1 != v10);
    a1 = v10;
  }
  while (a1 != v9)
  {
    v18 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v18;
    a1 += 2;
  }
  if (a4)
  {
    v19 = *(int8x16_t **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v21 = &v9[2 * v20];
      if (v20 >= 0x40)
      {
        v22 = &v9[2 * (v20 & 0xFFFFFFC0)];
        v24 = 0uLL;
        v25 = v9;
        do
        {
          v46.val[0] = *v19;
          v26 = v19[1];
          v49.val[0] = v19[2];
          v27 = v19[3];
          v19 += 4;
          v28 = v27;
          v49.val[1] = 0uLL;
          v52.val[0] = v26;
          v46.val[1] = 0uLL;
          v29 = v25;
          vst2q_s8(v29, v46);
          v29 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v29, v52);
          v30 = v25 + 64;
          vst2q_s8(v30, v49);
          v31 = v25 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
          v25 += 128;
        }
        while (v25 != v22);
      }
      else
      {
        v22 = v9;
      }
      while (v22 != v21)
      {
        v32 = v19->u8[0];
        v19 = (int8x16_t *)((char *)v19 + 1);
        *(_WORD *)v22 = v32;
        v22 += 2;
      }
    }
    else if ((_DWORD)v20 == 1)
    {
      *(_WORD *)v9 = v19->i16[0];
    }
    else if ((_DWORD)v20)
    {
      memcpy(v9, v19, 2 * v20);
    }
    v23 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v23 = 0;
  }
  v33 = &v9[2 * v23];
  v34 = &v33[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v35 = &v33[2 * (a6 & 0xFFFFFFC0)];
    v36 = 0uLL;
    do
    {
      v47.val[0] = *a5;
      v37 = a5[1];
      v50.val[0] = a5[2];
      v38 = a5[3];
      a5 += 4;
      v39 = v38;
      v50.val[1] = 0uLL;
      v53.val[0] = v37;
      v47.val[1] = 0uLL;
      v40 = v33;
      vst2q_s8(v40, v47);
      v40 += 32;
      v53.val[1] = 0uLL;
      vst2q_s8(v40, v53);
      v41 = v33 + 64;
      vst2q_s8(v41, v50);
      v42 = v33 + 96;
      vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
      v33 += 128;
    }
    while (v33 != v35);
    v33 = v35;
  }
  while (v33 != v34)
  {
    v43 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v33 = v43;
    v33 += 2;
  }
  return WTF::base64Encode();
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && *(_QWORD *)(v2 + 24))
    {
      *(_WORD *)(v3 + 204) = 272;
      v4 = *(_QWORD *)(v3 + 144);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
      }
      v6 = *(_QWORD *)(v2 + 24);
      if (v6)
      {
        *(_QWORD *)(v2 + 24) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    v7 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
    WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    WTF::fastFree((WTF *)v2, v9);
  }
}

uint64_t WTF::Deque<std::variant<WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,WTF::UniqueRef<WebCore::BlobLoader>>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    v7 = result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v23 = result + 16 * v8;
        v24 = (char *)v4 + 16 * v8;
        v25 = 16 * v9 - 16 * v8;
        do
        {
          *(_BYTE *)v23 = 0;
          *(_DWORD *)(v23 + 8) = -1;
          v26 = *((unsigned int *)v24 + 2);
          if ((_DWORD)v26 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, char *))off_1E33AEF60[v26])(&v29, v23, v24);
            *(_DWORD *)(v23 + 8) = v26;
            v27 = *((unsigned int *)v24 + 2);
            if ((_DWORD)v27 != -1)
              result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v27])(&v30, v24);
          }
          *((_DWORD *)v24 + 2) = -1;
          v23 += 16;
          v24 += 16;
          v25 -= 16;
        }
        while (v25);
      }
    }
    else
    {
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 8) = -1;
          v12 = *((unsigned int *)v11 + 2);
          if ((_DWORD)v12 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E33AEF60[v12])(&v31, v7, v11);
            *(_DWORD *)(v7 + 8) = v12;
            v13 = *((unsigned int *)v11 + 2);
            if ((_DWORD)v13 != -1)
              result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v13])(&v32, v11);
          }
          *((_DWORD *)v11 + 2) = -1;
          v7 += 16;
          v11 = (WTF *)((char *)v11 + 16);
          v10 -= 16;
        }
        while (v10);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD *)(v3 + 16);
      }
      v28 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v14 = 0;
        v15 = v7 + 16 * v28;
        v16 = 16 * v1;
        v17 = (char *)v4 + 16 * v8;
        v18 = v16 - 16 * v8;
        do
        {
          v19 = v15 + v14;
          v20 = &v17[v14];
          *(_BYTE *)v19 = 0;
          *(_DWORD *)(v19 + 8) = -1;
          v21 = *(unsigned int *)&v17[v14 + 8];
          if ((_DWORD)v21 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, char *))off_1E33AEF60[v21])(&v33, v15 + v14, &v17[v14]);
            *(_DWORD *)(v19 + 8) = v21;
            v22 = *((unsigned int *)v20 + 2);
            if ((_DWORD)v22 != -1)
              result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_3RefIN7WebCore22FragmentedSharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS6_9UniqueRefINS9_10BlobLoaderEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v22])(&v34, &v17[v14]);
          }
          *((_DWORD *)v20 + 2) = -1;
          v14 += 16;
        }
        while (v18 != v14);
      }
      *(_QWORD *)v3 = v28;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SH_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SH_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7CStringENS8_3RefIN7WebCore22FragmentedSharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_9UniqueRefINSB_10BlobLoaderEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SH_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::NetworkSendQueue::enqueue(WebCore::Blob &)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1)
{
  return WebCore::NetworkSendQueue::processMessages(*(WTF::StringImpl **)(a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::NetworkSendQueue::processMessages(void)::$_0,WebCore::NetworkSendQueue::processMessages(void)::$_1,WebCore::NetworkSendQueue::processMessages(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<WebCore::BlobLoader>> &>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 48) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::NetworkSendQueue::processMessages(void)::$_0,WebCore::NetworkSendQueue::processMessages(void)::$_1,WebCore::NetworkSendQueue::processMessages(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<WebCore::BlobLoader>> &>(uint64_t a1, uint64_t *a2)
{
  return WebCore::FragmentedSharedBuffer::forEachSegment(*a2, (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 56));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::NetworkSendQueue::processMessages(void)::$_0,WebCore::NetworkSendQueue::processMessages(void)::$_1,WebCore::NetworkSendQueue::processMessages(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<WebCore::BlobLoader>> &>(uint64_t result, JSC::ArrayBuffer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v5)
    goto LABEL_34;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)a2 + 24)
    || ((v6 = HIBYTE(*(unsigned __int16 *)(v5 + 204))) != 0
      ? (v7 = *(_WORD *)(v5 + 204) == 16)
      : (v7 = 0),
        v7))
  {
    **(_BYTE **)(v3 + 24) = 1;
    return result;
  }
  v4 = *(_QWORD *)(v3 + 16);
  v2 = *(_QWORD *)(v5 + 152);
  if (!v2)
  {
    if (!v6)
      goto LABEL_34;
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 64) + 16))(*(_QWORD *)(v4 + 64), *(_WORD *)(v5 + 204));
    **(_BYTE **)(v3 + 24) = result ^ 1;
    return result;
  }
  if (v6)
    goto LABEL_14;
  if (*(_DWORD *)(v5 + 196) != *(_DWORD *)(v5 + 200))
  {
    JSC::ArrayBuffer::create((JSC::ArrayBuffer *)v2, a2);
    v2 = v16;
    v16 = 0;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v16);
    if (v2)
      goto LABEL_16;
LABEL_34:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_35;
  }
  *(_DWORD *)v2 += 2;
LABEL_16:
  v3 = v2 + 16;
  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v9)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v8 = (v8 & 0x3FFFFFFFFLL) + v9;
    }
  }
  if (!*(_BYTE *)(v2 + 64))
    goto LABEL_21;
LABEL_35:
  v15 = *(_QWORD *)(v2 + 32);
  if (!v15)
  {
LABEL_21:
    v10 = *(_QWORD *)(v2 + 48);
    goto LABEL_22;
  }
  v10 = *(_QWORD *)(v15 + 32);
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 56) + 16))(*(_QWORD *)(v4 + 56), v8, v10);
  v7 = *(_DWORD *)v2 == 2;
  *(_DWORD *)v2 -= 2;
  if (v7)
  {
    v11 = *(_QWORD *)(v2 + 80);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      *(_QWORD *)(v2 + 80) = 0;
    }
    if ((*(_BYTE *)(v2 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v3);
    v13 = *(WTF **)(v2 + 8);
    if ((v13 & 1) == 0 && v13)
    {
      v14 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *((_DWORD *)v13 + 2) = 0;
        WTF::fastFree(v14, v12);
      }
      WTF::fastFree(v13, v12);
    }
    return WTF::fastFree((WTF *)v2, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL(WTF::URL const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E33AEFC8;
  v3 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL(WTF::URL const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E33AEFC8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalFileBlobURL(WTF::URL const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD, uint64_t, _DWORD **, uint64_t, uint64_t);
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v2 = a1 + 8;
  v3 = WebCore::s_platformStrategies;
  v4 = *(void (****)(_QWORD, uint64_t, _DWORD **, uint64_t, uint64_t))(WebCore::s_platformStrategies + 40);
  if (!v4)
  {
    v4 = (void (***)(_QWORD, uint64_t, _DWORD **, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 40) = v4;
  }
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E341CF60;
  v6 = *(_DWORD **)(a1 + 48);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0x7FF8000000000000;
  v8 = (_DWORD *)v5;
  (**v4)(v4, v2, &v8, a1 + 56, a1 + 64);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v10;

  *(_QWORD *)a1 = &off_1E33AEFF0;
  v3 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 60);
  v5 = *(unsigned int **)(a1 + 48);
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    do
    {
      v7 = v5[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AEF18[v7])(&v10, v5);
      v5[10] = -1;
      v5 += 12;
      v6 -= 48;
    }
    while (v6);
    v5 = *(unsigned int **)(a1 + 48);
  }
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v8 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v10;

  *(_QWORD *)this = &off_1E33AEFF0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 15);
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    do
    {
      v7 = v5[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33AEF18[v7])(&v10, v5);
      v5[10] = -1;
      v5 += 12;
      v6 -= 48;
    }
    while (v6);
    v5 = (unsigned int *)*((_QWORD *)this + 6);
  }
  if (v5)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURL(WTF::URL const&,WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebCore::s_platformStrategies;
  v3 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v2 + 40) = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 8))(v3, a1 + 8, a1 + 48, a1 + 64);
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(WTF::StringImpl **)(this + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(unsigned int *)(v2 + 32);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v7])(&v8, v2 + 8);
    *(_DWORD *)(v2 + 32) = -1;
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33AF018;
  WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33AF018;
  WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURL(WebCore::SecurityOrigin *,WebCore::PolicyContainer &&,WTF::URL const&,WTF::URL const,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 8;
  WebCore::addToOriginMapIfNecessary((WTF::URL *)(a1 + 8), (WTF::StringImpl *)(a1 + 168));
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 40) = v4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v2, a1 + 48, a1 + 88, a1 + 176);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLOptionallyFileBacked(WTF::URL const&,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E33AF040;
  v3 = (WTF::StringImpl *)a1[12];
  a1[12] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLOptionallyFileBacked(WTF::URL const&,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E33AF040;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLOptionallyFileBacked(WTF::URL const&,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v2 = a1 + 8;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 40) = v4;
  }
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E341CF60;
  v6 = *(_DWORD **)(a1 + 88);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0x7FF8000000000000;
  v8 = (_DWORD *)v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v4 + 24))(v4, v2, a1 + 48, &v8, a1 + 96);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLForSlice(WTF::URL const&,WTF::URL const&,long long,long long,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E33AF068;
  v3 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLForSlice(WTF::URL const&,WTF::URL const&,long long,long long,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E33AF068;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerInternalBlobURLForSlice(WTF::URL const&,WTF::URL const&,long long,long long,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebCore::s_platformStrategies;
  v3 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v2 + 40) = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1 + 8, a1 + 48, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a1 + 104);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobType(WTF::URL const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E33AF090;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobType(WTF::URL const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AF090;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobType(WTF::URL const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = a1 + 8;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 40) = v4;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v11, v4, v2);
  WTF::String::isolatedCopy();
  v6 = *(WTF::StringImpl ***)(a1 + 48);
  v7 = v12;
  v12 = 0;
  v8 = *v6;
  *v6 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobSize(WTF::URL const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E33AF0B8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobSize(WTF::URL const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AF0B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::blobSize(WTF::URL const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = WebCore::s_platformStrategies;
  v3 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v2 + 40) = v3;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(v3, a1 + 8);
  **(_QWORD **)(a1 + 48) = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURL(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)a1 = &off_1E33AF0E0;
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 72) = -1;
  }
  v4 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURL(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)this = &off_1E33AF0E0;
  if (*((_BYTE *)this + 80))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, (char *)this + 48);
    *((_DWORD *)this + 18) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURL(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::call(uint64_t a1, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  WebCore::unregisterBlobURLOriginIfNecessaryOnMainThread((WebCore *)(a1 + 8), a2);
  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 40) = v5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v3, a1 + 48);
}

WTF::StringImpl *WebCore::unregisterBlobURLOriginIfNecessaryOnMainThread(WebCore *this, const WTF::URL *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  result = (WTF::StringImpl *)WTF::URL::pathStart(this);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  if (v7 <= result)
    return result;
  v8 = *((_DWORD *)this + 7) + ~(_DWORD)result;
  if ((int)v7 - (int)result <= v8)
  {
    if (!(_DWORD)result)
    {
      v9 = v7;
      goto LABEL_8;
    }
    v8 = v7 - (_DWORD)result;
  }
  v9 = v8;
  v10 = v7 - (unint64_t)result;
  if ((v7 & 0x100000000) != 0)
  {
    if (v10 >= v9)
    {
      v6 += result;
      v9 |= 0x100000000uLL;
      goto LABEL_8;
    }
LABEL_36:
    __break(1u);
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  if (v10 < v9)
    goto LABEL_36;
  v6 += 2 * result;
LABEL_8:
  if ((char *)v6 == "null" || v9 != 4)
  {
    if ((char *)v6 != "null" || v9 != 4)
      return result;
  }
  else
  {
    if ((v9 & 0x100000000) != 0)
    {
      if (*(_BYTE *)v6 != 110 || *(_WORD *)(v6 + 1) != 27765)
        return result;
      v11 = *(unsigned __int16 *)(v6 + 2);
      v12 = 27756;
    }
    else
    {
      if (*(_WORD *)v6 != 110)
        return result;
      v12 = 7077996;
      if (*(_DWORD *)(v6 + 2) != 7078005)
        return result;
      v11 = *(_DWORD *)(v6 + 4);
    }
    if (v11 != v12)
      return result;
  }
  WTF::URL::stringWithoutFragmentIdentifier(this);
  if ((byte_1ECE83361 & 1) == 0)
  {
    qword_1ECE83370 = 0;
    byte_1ECE83361 = 1;
  }
  if (WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove(&qword_1ECE83370, &v15, v13))
  {
    if ((_MergedGlobals_179 & 1) == 0)
    {
      qword_1ECE83368 = 0;
      _MergedGlobals_179 = 1;
    }
    WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::remove((uint64_t)&v15, v4, v14);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::remove(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  const WTF::StringImpl **v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = qword_1ECE83368;
  if (qword_1ECE83368)
  {
    v4 = (const WTF::StringImpl **)result;
    v5 = *(_DWORD *)(qword_1ECE83368 - 8);
    v6 = *(WTF::StringImpl **)result;
    v7 = *((_DWORD *)v6 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(v6);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v5;
      result = *(_QWORD *)(v3 + 16 * v10);
      if (result != -1)
      {
        if (!result)
        {
          v11 = qword_1ECE83368;
          if (!qword_1ECE83368)
            return result;
          v12 = *(unsigned int *)(qword_1ECE83368 - 4);
          v13 = qword_1ECE83368 + 16 * v12;
          goto LABEL_14;
        }
        result = WTF::equal((WTF *)result, *v4, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = v3 + 16 * v10;
    v11 = qword_1ECE83368;
    if (!qword_1ECE83368)
      goto LABEL_15;
    v12 = *(unsigned int *)(qword_1ECE83368 - 4);
LABEL_14:
    v11 += 16 * v12;
    if (v11 == v13)
      return result;
LABEL_15:
    if (v11 != v13)
    {
      v14 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = -1;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (result)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)result);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)result));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)result);
          v21 = *(WTF::StringImpl **)(result + 48);
          *(_QWORD *)(result + 48) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              v25 = result;
              WTF::StringImpl::destroy(v21, a2);
              result = v25;
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
          v22 = *(WTF::StringImpl **)(result + 40);
          *(_QWORD *)(result + 40) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              v26 = result;
              WTF::StringImpl::destroy(v22, a2);
              result = v26;
            }
            else
            {
              *(_DWORD *)v22 -= 2;
            }
          }
          v23 = *(unsigned int *)(result + 32);
          if ((_DWORD)v23 != -1)
          {
            v24 = result;
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v23])(&v27, result + 8);
            result = v24;
          }
          *(_DWORD *)(result + 32) = -1;
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      v17 = qword_1ECE83368;
      ++*(_DWORD *)(qword_1ECE83368 - 16);
      if (v17)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      if (qword_1ECE83368)
      {
        v19 = *(_DWORD *)(qword_1ECE83368 - 4);
        if (6 * *(_DWORD *)(qword_1ECE83368 - 12) < v19 && v19 >= 9)
          return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v19 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)a1 = &off_1E33AF108;
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 72) = -1;
  }
  v4 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)this = &off_1E33AF108;
  if (*((_BYTE *)this + 80))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, (char *)this + 48);
    *((_DWORD *)this + 18) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::registerBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::call(uint64_t a1)
{
  WTF::URL *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  WTF::StringImpl *v18;
  int v19;

  v2 = (WTF::URL *)(a1 + 8);
  v3 = WTF::URL::pathStart((WTF::URL *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  if (v6 <= v3)
    goto LABEL_26;
  v7 = *(_DWORD *)(a1 + 36) + ~v3;
  if (v6 - v3 <= v7)
  {
    if (!v3)
    {
      v8 = v6;
      goto LABEL_12;
    }
    v7 = v6 - v3;
  }
  v8 = v7;
  v9 = v6 - (unint64_t)v3;
  if ((v6 & 0x100000000) != 0)
  {
    if (v9 >= v8)
    {
      v5 += v3;
      v8 |= 0x100000000uLL;
LABEL_12:
      if ((char *)v5 == "null" || v8 != 4)
      {
        if ((char *)v5 != "null" || v8 != 4)
          goto LABEL_26;
      }
      else
      {
        if ((v8 & 0x100000000) != 0)
        {
          if (*(_BYTE *)v5 != 110 || *(_WORD *)(v5 + 1) != 27765)
            goto LABEL_26;
          v10 = *(unsigned __int16 *)(v5 + 2);
          v11 = 27756;
        }
        else
        {
          if (*(_WORD *)v5 != 110)
            goto LABEL_26;
          v11 = 7077996;
          if (*(_DWORD *)(v5 + 2) != 7078005)
            goto LABEL_26;
          v10 = *(_DWORD *)(v5 + 4);
        }
        if (v10 != v11)
          goto LABEL_26;
      }
      if ((byte_1ECE83361 & 1) != 0)
        goto LABEL_23;
      goto LABEL_36;
    }
  }
  else if (v9 >= v8)
  {
    v5 += 2 * v3;
    goto LABEL_12;
  }
  __break(1u);
LABEL_36:
  qword_1ECE83370 = 0;
  byte_1ECE83361 = 1;
LABEL_23:
  WTF::URL::stringWithoutFragmentIdentifier(v2);
  v19 = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&qword_1ECE83370, &v18, (const WTF::StringImpl *)&v19, (uint64_t)v17);
  ++*(_DWORD *)(v17[0] + 8);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_26:
  v14 = WebCore::s_platformStrategies;
  v15 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v15)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v14 + 40) = v15;
  }
  return (*(uint64_t (**)(uint64_t, WTF::URL *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v2, a1 + 48);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)a1 = &off_1E33AF130;
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 72) = -1;
  }
  v4 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)this = &off_1E33AF130;
  if (*((_BYTE *)this + 80))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(&v6, (char *)this + 48);
    *((_DWORD *)this + 18) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(WTF::URL const&,std::optional<WebCore::SecurityOriginData> const&)::$_0,void>::call(uint64_t a1, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  WebCore::unregisterBlobURLOriginIfNecessaryOnMainThread((WebCore *)(a1 + 8), a2);
  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 40) = v5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, v3, a1 + 48);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::getCachedOrigin(WTF::URL const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E33AF158;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::getCachedOrigin(WTF::URL const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33AF158;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableBlobRegistry::getCachedOrigin(WTF::URL const&)::$_0,void>::call(uint64_t a1)
{
  WTF::URL *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::SecurityOrigin *v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = (WTF::URL *)(a1 + 8);
  if ((_MergedGlobals_179 & 1) == 0)
  {
    qword_1ECE83368 = 0;
    _MergedGlobals_179 = 1;
  }
  result = WTF::URL::viewWithoutFragmentIdentifier(v2);
  v5 = qword_1ECE83368;
  if (!qword_1ECE83368)
    return result;
  v6 = (unsigned __int8 *)result;
  v7 = v4;
  v8 = -1640531527;
  if ((v4 & 0xFF00000000) != 0)
  {
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v9 = 0;
      do
      {
        v10 = ((v8 + *(unsigned __int8 *)(result + v9)) << 16) ^ (*(unsigned __int8 *)(result + v9 + 1) << 11) ^ (v8 + *(unsigned __int8 *)(result + v9));
        v8 = v10 + (v10 >> 11);
        v11 = v9 + 3;
        v9 += 2;
      }
      while (v11 < v4);
    }
    if ((v4 & 1) == 0)
      goto LABEL_10;
    v30 = *(unsigned __int8 *)(v4 + result - 1);
LABEL_34:
    v8 = ((v8 + v30) ^ ((v8 + v30) << 11)) + (((v8 + v30) ^ ((v8 + v30) << 11)) >> 17);
    goto LABEL_10;
  }
  if ((v4 & 0xFFFFFFFE) != 0)
  {
    v31 = 0;
    do
    {
      v32 = ((v8 + *(unsigned __int16 *)(result + 2 * v31)) << 16) ^ (*(unsigned __int16 *)(result + 2 * v31 + 2) << 11) ^ (v8 + *(unsigned __int16 *)(result + 2 * v31));
      v8 = v32 + (v32 >> 11);
      v33 = v31 + 3;
      v31 += 2;
    }
    while (v33 < v4);
  }
  if ((v4 & 1) != 0)
  {
    v30 = *(unsigned __int16 *)(result + 2 * v4 - 2);
    goto LABEL_34;
  }
LABEL_10:
  v12 = 0;
  v13 = *(_DWORD *)(qword_1ECE83368 - 8);
  v14 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = (v15 ^ (v15 << 10)) & 0xFFFFFF;
  if (!v16)
    v16 = 0x800000;
  while (1)
  {
    v17 = v16 & v13;
    v18 = *(_QWORD *)(v5 + 16 * v17);
    if (v18 != -1)
    {
      if (!v18)
        return result;
      result = WTF::operator==(*(unsigned __int8 **)(v18 + 8), *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32), v6, v7);
      if ((result & 1) != 0)
        break;
    }
    v16 = ++v12 + v17;
  }
  v20 = *(unsigned int **)(v5 + 16 * v17 + 8);
  if (v20)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    else
    {
      v22 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
      result = (uint64_t)WebCore::SecurityOrigin::SecurityOrigin(v22, (const WebCore::SecurityOrigin *)v20);
      v20 = (unsigned int *)result;
    }
    v23 = *(unsigned int ***)(a1 + 56);
    v24 = *v23;
    *v23 = v20;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        v27 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
        *((_QWORD *)v24 + 6) = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v19);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
        *((_QWORD *)v24 + 5) = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v19);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v24[8];
        if ((_DWORD)v29 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v29])(&v34, v24 + 2);
        v24[8] = -1;
        return WTF::fastFree((WTF *)v24, v19);
      }
    }
  }
  return result;
}

uint64_t WebCore::BackForwardCache::canCache(WebCore::BackForwardCache *this, WebCore::Page *a2)
{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  WebCore *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t canCacheFrame;
  WTF::StringImpl *v17;
  BOOL v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::SecurityOrigin *v25;
  WebCore::SecurityOrigin *v26;
  WTF::StringImpl *v27;
  int isSameOriginAs;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;

  if ((_DWORD)this
    && ((v3 = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton(this), v4 = atomic_load(v3 + 4), v4 != 2)
      ? (v5 = v3[7] == 0)
      : (v5 = 0),
        v5))
  {
    if (*((_BYTE *)a2 + 1022))
    {
      __break(0xC471u);
      JUMPOUT(0x195B7C060);
    }
    if ((*(_QWORD *)(*((_QWORD *)a2 + 14) + 672) & 0x800000000000) == 0
      || (v12 = (uint64_t *)*((_QWORD *)a2 + 32)) == 0)
    {
      v12 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v3);
    }
    v11 = 0;
    ++*((_DWORD *)v12 + 2);
    v13 = *((_QWORD *)a2 + 20);
    if (v13 && !*(_BYTE *)(v13 + 144))
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      canCacheFrame = WebCore::canCacheFrame((_QWORD *)v13, (void (***)(_QWORD, _QWORD, _QWORD, _QWORD))v12, 1);
      if (*(_QWORD *)(*((_QWORD *)a2 + 14) + 696) & 0x2000000000 | ~*(_DWORD *)(*((_QWORD *)a2 + 14) + 704) & 0x20)
        v18 = 0;
      else
        v18 = *((_BYTE *)a2 + 1092) == 0;
      if (v18)
      {
        v11 = canCacheFrame;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))*v12)(v12, &v46, &v45, 0);
        v19 = v46;
        v46 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v17);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v45;
        v45 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v17);
          else
            *(_DWORD *)v20 -= 2;
        }
        v11 = 0;
      }
      switch(*(_BYTE *)(*(_QWORD *)(v13 + 280) + 81))
      {
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))*v12)(v12, &v46, &v45, 0);
          v21 = v46;
          v46 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v17);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v45;
          v45 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v17);
            else
              *(_DWORD *)v22 -= 2;
          }
          v11 = 0;
          break;
        default:
          break;
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v13 + 280) + 96);
      if (v23)
      {
        ++*(_DWORD *)(v23 + 24);
        if ((*(_BYTE *)(v23 + 2584) & 1) != 0)
        {
          v24 = *(_QWORD *)(v13 + 296);
          if (v24)
          {
            *(_DWORD *)(v24 + 24) += 2;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v24 + 192), v17);
            v26 = v25;
            WebCore::ResourceResponse::platformLazyInit(v23 + 1272, 1);
            WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v23 + 1272), (uint64_t *)&v46);
            v27 = v46;
            isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v26, v46);
            v46 = 0;
            do
            {
              v30 = __ldaxr((unsigned int *)v27);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, (unsigned int *)v27));
            if (!v31)
            {
              v41 = isSameOriginAs;
              atomic_store(1u, (unsigned int *)v27);
              v42 = (WTF::StringImpl *)*((_QWORD *)v27 + 6);
              *((_QWORD *)v27 + 6) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v29);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)v27 + 5);
              *((_QWORD *)v27 + 5) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v29);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = *((unsigned int *)v27 + 8);
              if ((_DWORD)v44 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33AF198[v44])(&v45, (char *)v27 + 8);
              *((_DWORD *)v27 + 8) = -1;
              WTF::fastFree(v27, v29);
              isSameOriginAs = v41;
            }
            v11 = v11 & ~isSameOriginAs;
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
        }
        if (*(_DWORD *)(v23 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        else
          --*(_DWORD *)(v23 + 24);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD))(*v12 + 8))(v12, &v46, &v45, v11 ^ 1, 0);
      v33 = v45;
      v45 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v46;
      v46 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v32);
        else
          *(_DWORD *)v34 -= 2;
      }
      do
      {
        v35 = __ldaxr(v14);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v14));
      if (!v36)
      {
        atomic_store(1u, v14);
        v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v39 = off_1E31FE290;
        *((_QWORD *)v39 + 1) = v14;
        v46 = v39;
        WTF::ensureOnMainThread();
        v40 = v46;
        v46 = 0;
        if (v40)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
      }
    }
    v37 = *((_DWORD *)v12 + 2);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x195B7C0C4);
    }
    *((_DWORD *)v12 + 2) = v37 - 1;
  }
  else
  {
    v6 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    if ((*(_QWORD *)(*((_QWORD *)a2 + 14) + 672) & 0x800000000000) == 0
      || (v7 = (uint64_t *)*((_QWORD *)a2 + 32)) == 0)
    {
      v7 = WebCore::emptyDiagnosticLoggingClient(v6);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))*v7)(v7, &v46, &v45, 0);
    v9 = v46;
    v46 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v45;
    v45 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    return 0;
  }
  return v11;
}

uint64_t *WebCore::BackForwardCache::pruneToSizeNow(uint64_t a1, int a2, int a3)
{
  int v4;
  uint64_t *result;

  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = a2;
  result = WebCore::BackForwardCache::prune((uint64_t *)a1, a3);
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

uint64_t WebCore::BackForwardCache::frameCount(WebCore::BackForwardCache *this)
{
  uint64_t v1;
  _QWORD *i;

  if (*(_QWORD *)this)
    v1 = *(unsigned int *)(*(_QWORD *)this - 12);
  else
    v1 = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 1); i; i = (_QWORD *)i[2])
    v1 = v1
       + WebCore::CachedFrame::descendantFrameCount(*(WebCore::CachedFrame **)(*(_QWORD *)(*i + 200)
                                                                                           + 24));
  return v1;
}

uint64_t WebCore::CachedFrame::descendantFrameCount(WebCore::CachedFrame *this)
{
  uint64_t v1;
  WebCore::CachedFrame **v2;
  uint64_t v3;
  WebCore::CachedFrame *v4;

  v1 = *((unsigned int *)this + 25);
  if (!(_DWORD)v1)
    return 0;
  v2 = (WebCore::CachedFrame **)*((_QWORD *)this + 11);
  v3 = 8 * v1;
  do
  {
    v4 = *v2++;
    v1 += WebCore::CachedFrame::descendantFrameCount(v4);
    v3 -= 8;
  }
  while (v3);
  return v1;
}

uint64_t WebCore::BackForwardCache::markPagesForContentsSizeChanged(uint64_t this, WebCore::Page *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD **)(this + 8);
  if (v2)
  {
    while (1)
    {
      v4 = *(_QWORD *)(*v2 + 200);
      ++*(_DWORD *)v4;
      v5 = *((_QWORD *)a2 + 20);
      v6 = *(unsigned __int8 *)(v5 + 144);
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 16) + 720))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16));
      if (!v6 && v5 == this)
        *(_BYTE *)(v4 + 34) = 1;
      if (!*(_DWORD *)v4)
        break;
      --*(_DWORD *)v4;
      v2 = (_QWORD *)v2[2];
      if (!v2)
        return this;
    }
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::BackForwardCache::trySuspendPage(uint64_t result, uint64_t a2, WebCore::Page *a3, char a4)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v10;
  unsigned int v11;
  WebCore::FrameLoader *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::LocalFrame *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::FrameLoader *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  double v56;
  WebCore::Frame *v57;
  WebCore::CachedFrame *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  char v76;
  _QWORD *v77;

  v4 = (_QWORD *)result;
  v5 = *((_QWORD *)a3 + 20);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v10 = (unsigned int *)(v5 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(WebCore::FrameLoader **)(v5 + 280);
  ++*(_DWORD *)v12;
  WebCore::FrameLoader::stopForBackForwardCache(v12);
  if (!*(_DWORD *)v12)
  {
    __break(0xC471u);
    JUMPOUT(0x195B7C7D0);
  }
  --*(_DWORD *)v12;
  if ((a4 & 1) == 0)
  {
    result = WebCore::BackForwardCache::canCache((WebCore::BackForwardCache *)*(unsigned int *)(a2 + 24), a3);
    if ((result & 1) == 0)
      goto LABEL_81;
  }
  v76 = 1;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = off_1E33AF180;
  v13[1] = &v76;
  v75 = v13;
  v14 = *((_QWORD *)a3 + 20);
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  WebCore::Page::forEachDocumentFromMainFrame(v14, &v75);
  do
  {
    v17 = __ldaxr(v15);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v15));
  if (!v18)
  {
    atomic_store(1u, v15);
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v69 = off_1E31FE290;
    v69[1] = v15;
    v77 = v69;
    WTF::ensureOnMainThread();
    v70 = v77;
    v77 = 0;
    if (v70)
      (*(void (**)(_QWORD *))(*v70 + 8))(v70);
  }
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v20 = *((_QWORD *)a3 + 9);
  v21 = *(_DWORD *)v20 + 1;
  *(_DWORD *)v20 = v21;
  v22 = *(_QWORD *)(v20 + 16);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      if (!*(_BYTE *)(v23 + 144))
      {
        WebCore::FocusController::setFocusedFrame(v20, (WebCore::Frame *)v5, 1);
        v21 = *(_DWORD *)v20;
      }
    }
  }
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x195B7C878);
  }
  *(_DWORD *)v20 = v21 - 1;
  WebCore::firePageHideEventRecursively(v5, v19);
  v24 = *(_QWORD *)(v5 + 80);
  if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
  {
    i = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8);
    v27 = *(_QWORD *)(v25 + 96);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        do
        {
          i = v28;
          v29 = *(_QWORD *)(v28 + 96);
          if (!v29)
            break;
          v28 = *(_QWORD *)(v29 + 8);
        }
        while (v28);
        goto LABEL_36;
      }
    }
  }
  else
  {
    v30 = *(_QWORD *)(v5 + 56);
    if (v30)
    {
      i = *(_QWORD *)(v30 + 8);
      if (i)
        goto LABEL_36;
    }
    i = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
    v31 = *(_QWORD *)(v5 + 96);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        do
        {
          i = v32;
          v33 = *(_QWORD *)(v32 + 96);
          if (!v33)
            break;
          v32 = *(_QWORD *)(v33 + 8);
        }
        while (v32);
        do
        {
LABEL_36:
          if (!*(_BYTE *)(i + 144))
          {
            v34 = *(_QWORD *)(i + 296);
            if (v34)
            {
              v35 = *(_DWORD *)(v34 + 24) + 2;
              *(_DWORD *)(v34 + 24) = v35;
              if (*(_QWORD *)(v34 + 1944) && !*(_BYTE *)(v34 + 3405))
              {
                WebCore::Document::destroyRenderTree((WebCore::Document *)v34);
                v35 = *(_DWORD *)(v34 + 24);
              }
              v36 = v35 - 2;
              if (v36)
              {
                *(_DWORD *)(v34 + 24) = v36;
              }
              else if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v34);
              }
            }
          }
          v37 = *(_QWORD *)(i + 80);
          if (v37 && (v38 = *(_QWORD *)(v37 + 8)) != 0)
          {
            for (i = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8); ; i = v38)
            {
              v39 = *(_QWORD *)(v38 + 96);
              if (!v39)
                break;
              v38 = *(_QWORD *)(v39 + 8);
              if (!v38)
                break;
            }
          }
          else
          {
            v40 = *(_QWORD *)(i + 56);
            if (!v40)
              goto LABEL_55;
            i = *(_QWORD *)(v40 + 8);
          }
        }
        while (i);
        goto LABEL_55;
      }
    }
  }
  if (i)
    goto LABEL_36;
LABEL_55:
  v41 = *(WebCore::FrameLoader **)(v5 + 280);
  ++*(_DWORD *)v41;
  WebCore::FrameLoader::stopForBackForwardCache(v41);
  if (!*(_DWORD *)v41)
  {
    __break(0xC471u);
    JUMPOUT(0x195B7C898);
  }
  --*(_DWORD *)v41;
  if ((a4 & 1) != 0
    || (WebCore::BackForwardCache::canCache((WebCore::BackForwardCache *)*(unsigned int *)(a2 + 24), a3) & 1) != 0)
  {
    v76 = 2;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E33AF180;
    v42[1] = &v76;
    v75 = v42;
    v43 = *((_QWORD *)a3 + 20);
    v44 = (unsigned int *)(v43 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    WebCore::Page::forEachDocumentFromMainFrame(v43, &v75);
    do
    {
      v46 = __ldaxr(v44);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v44));
    if (!v47)
    {
      atomic_store(1u, v44);
      v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v71 = off_1E31FE290;
      v71[1] = v44;
      v77 = v71;
      WTF::ensureOnMainThread();
      v72 = v77;
      v77 = 0;
      if (v72)
        (*(void (**)(_QWORD *))(*v72 + 8))(v72);
    }
    (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    ++WebCore::ScriptDisallowedScope::s_count;
    v48 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    v49 = v48;
    *v48 = 0;
    if (!*((_QWORD *)a3 + 2))
    {
      v51 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = a3;
      v48 = (unsigned int *)*((_QWORD *)a3 + 2);
      *((_QWORD *)a3 + 2) = v51;
      if (v48)
      {
        do
        {
          v52 = __ldaxr(v48);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v48));
        if (!v53)
        {
          atomic_store(1u, v48);
          v48 = (unsigned int *)WTF::fastFree((WTF *)v48, v50);
        }
      }
    }
    v54 = (unsigned int *)*((_QWORD *)a3 + 2);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    *((_QWORD *)v49 + 1) = v54;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v48);
    *((double *)v49 + 2) = *(double *)(*((_QWORD *)a3 + 14) + 312) + v56;
    v57 = (WebCore::Frame *)*((_QWORD *)a3 + 20);
    v58 = (WebCore::CachedFrame *)WTF::fastMalloc((WTF *)0x68);
    result = (uint64_t)WebCore::CachedFrame::CachedFrame(v58, v57);
    *((_QWORD *)v49 + 3) = result;
    *((_WORD *)v49 + 16) = 0;
    *((_BYTE *)v49 + 34) = 0;
    v59 = *((_QWORD *)a3 + 20);
    if (!v59 || *(_BYTE *)(v59 + 144))
    {
      *((_QWORD *)v49 + 5) = 0;
      *((_QWORD *)v49 + 6) = 0;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v59 + 280) + 16) + 1160))(*(_QWORD *)(*(_QWORD *)(v59 + 280) + 16));
    }
    *v4 = v49;
    --WebCore::ScriptDisallowedScope::s_count;
    goto LABEL_82;
  }
  v76 = 0;
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v60 = off_1E33AF180;
  v60[1] = &v76;
  v75 = v60;
  v61 = *((_QWORD *)a3 + 20);
  v62 = (unsigned int *)(v61 + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 + 1, v62));
  WebCore::Page::forEachDocumentFromMainFrame(v61, &v75);
  do
  {
    v64 = __ldaxr(v62);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v62));
  if (!v65)
  {
    atomic_store(1u, v62);
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v73 = off_1E31FE290;
    v73[1] = v62;
    v77 = v73;
    WTF::ensureOnMainThread();
    v74 = v77;
    v77 = 0;
    if (v74)
      (*(void (**)(_QWORD *))(*v74 + 8))(v74);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v60 + 8))(v60);
LABEL_81:
  *v4 = 0;
  do
  {
LABEL_82:
    v66 = __ldaxr(v10);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v10));
  if (!v67)
  {
    atomic_store(1u, v10);
    v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v68 = off_1E31FE290;
    v68[1] = v10;
    v77 = v68;
    WTF::ensureOnMainThread();
    result = (uint64_t)v77;
    v77 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::firePageHideEventRecursively(uint64_t this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::LocalFrame *v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(this + 296);
  if (v2)
  {
    v3 = this;
    *(_DWORD *)(v2 + 24) += 2;
    v4 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
    v5 = v4;
    if (v4)
    {
      do
        v6 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v6 + 1, (unsigned int *)v4));
      v7 = *(_QWORD *)(v4 + 8);
      if (v7)
        ++*(_DWORD *)(v7 + 3340);
    }
    this = (uint64_t)WebCore::FrameLoader::stopLoading(*(WebCore::FrameLoader **)(v3 + 280), 2);
    for (i = *(_QWORD *)(v3 + 88); i; i = *(_QWORD *)(i + 72))
    {
      v10 = *(unsigned __int8 *)(i + 144);
      if (*(_BYTE *)(i + 144))
        v11 = 0;
      else
        v11 = i;
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      if (!v10)
        this = WebCore::firePageHideEventRecursively((WebCore *)i, v8);
      if (v11)
      {
        v14 = (unsigned int *)(v11 + 8);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = off_1E31FE290;
          v17[1] = v14;
          v23 = (uint64_t)v17;
          WTF::ensureOnMainThread();
          this = v23;
          if (v23)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
      }
    }
    if (v5)
    {
      v18 = *(_QWORD *)(v5 + 8);
      if (v18)
        --*(_DWORD *)(v18 + 3340);
      do
      {
        v19 = __ldaxr((unsigned int *)v5);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v5));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v5);
        v21 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v21)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v21));
        v22 = *(WTF **)(v5 + 16);
        if (v22)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          WTF::fastFree(v22, v8);
        }
        this = WTF::fastFree((WTF *)v5, v8);
      }
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

unint64_t *WebCore::BackForwardCache::addIfCacheable(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2, WebCore::Page *a3)
{
  _BOOL8 v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  WebCore::HistoryItem ***v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  WebCore::HistoryItem ***v17;
  WebCore::HistoryItem **v18;
  WebCore::HistoryItem **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  WebCore::HistoryItem ***v27;
  WebCore::HistoryItem ***v28;
  NSObject *v29;
  WTF *v30;
  unint64_t *result;
  int v32;
  char *v33;
  int v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF *v42;
  char v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v3 = 0;
  v49 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return (unint64_t *)v3;
  if (*((_QWORD *)a2 + 25))
    return (unint64_t *)v3;
  WebCore::BackForwardCache::trySuspendPage((uint64_t)&v41, (uint64_t)this, a3, 0);
  v3 = v41 != 0;
  if (!v41)
    return (unint64_t *)v3;
  ++WebCore::ScriptDisallowedScope::s_count;
  v6 = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v41;
  if (v6)
  {
    WebCore::CachedPage::~CachedPage((WebCore::CachedPage *)v6);
    if (*(_DWORD *)v6)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v6, v7);
    }
  }
  if ((v6 != 0) != (*((_QWORD *)a2 + 25) != 0))
    (*(void (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)a2 + 59) + 16))(*((_QWORD *)a2 + 59), a2);
  *((_DWORD *)a2 + 52) = 0;
  ++*(_DWORD *)a2;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)this, 8u, 0), (v8 = *(_QWORD *)this) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v9;
    v17 = (WebCore::HistoryItem ***)(v8 + 8 * v16);
    v18 = *v17;
    if (*v17 == (WebCore::HistoryItem **)-1)
    {
      v10 = (WebCore::HistoryItem ***)(v8 + 8 * v16);
      goto LABEL_18;
    }
    if (!v18)
      break;
    if (*v18 == a2)
    {
      if (*(_DWORD *)a2 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(a2);
        WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)a2;
      }
      goto LABEL_38;
    }
LABEL_18:
    v14 = i + v16;
  }
  if (v10)
  {
    *v10 = 0;
    --*(_DWORD *)(*(_QWORD *)this - 16);
    v17 = v10;
  }
  v19 = (WebCore::HistoryItem **)WTF::fastMalloc((WTF *)0x18);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = a2;
  *v17 = v19;
  v20 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_28:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_33;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    if ((_DWORD)v25)
      goto LABEL_28;
    v26 = 8;
LABEL_33:
    v19 = (WebCore::HistoryItem **)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)this, v26, v17);
  }
  v27 = (WebCore::HistoryItem ***)*((_QWORD *)this + 2);
  v19[1] = (WebCore::HistoryItem *)v27;
  v19[2] = 0;
  if (v27)
    v28 = v27 + 2;
  else
    v28 = (WebCore::HistoryItem ***)((char *)this + 8);
  *v28 = v19;
  *((_QWORD *)this + 2) = v19;
LABEL_38:
  --WebCore::ScriptDisallowedScope::s_count;
  WebCore::BackForwardCache::prune((uint64_t *)this, 3);
  v29 = qword_1ECE7BEB0;
  if (!os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT))
    return (unint64_t *)v3;
  v30 = (WTF *)*((_QWORD *)a2 + 44);
  *(_QWORD *)buf = *((_QWORD *)a2 + 45);
  v43 = 45;
  v42 = v30;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)buf, &v43, (unint64_t *)&v42, &v40);
  if (v40)
  {
    WTF::String::utf8();
    v32 = 0;
    if (v42)
      v33 = (char *)v42 + 16;
    else
      v33 = 0;
    if (*(_QWORD *)this)
      v32 = *(_DWORD *)(*(_QWORD *)this - 12);
    v34 = *((_DWORD *)this + 6);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v33;
    v45 = 1024;
    v46 = v32;
    v47 = 1024;
    v48 = v34;
    _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "BackForwardCache::addIfCacheable item: %s, size: %u / %u", buf, 0x18u);
    v36 = v42;
    v42 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, v35);
      else
        --*(_DWORD *)v36;
    }
    v37 = v40;
    v40 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
      else
        *(_DWORD *)v37 -= 2;
    }
    return (unint64_t *)v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::HistoryItem::setCachedPage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CachedPage *v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 200);
  v4 = *a2;
  *a2 = 0;
  v5 = *(WebCore::CachedPage **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v4;
  if (v5)
  {
    WebCore::CachedPage::~CachedPage(v5);
    if (*(_DWORD *)v6)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v6, v7);
    }
  }
  if ((v3 != 0) != (*(_QWORD *)(a1 + 200) != 0))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 16))(*(_QWORD *)(a1 + 472), a1);
}

unint64_t *WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::toString(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t *result;
  unint64_t v5;
  char v6;
  unint64_t v7;

  v7 = a3;
  v6 = 45;
  v5 = a2;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(&v7, &v6, &v5, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

WebCore::CachedPage **std::unique_ptr<WebCore::CachedPage>::~unique_ptr[abi:sn180100](WebCore::CachedPage **a1)
{
  WebCore::CachedPage *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::CachedPage::~CachedPage(v2);
    if (*(_DWORD *)v3)
    {
      *(_QWORD *)(v3 + 48) = 0;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v3, v4);
    }
  }
  return a1;
}

uint64_t WebCore::BackForwardCache::suspendPage@<X0>(WebCore::BackForwardCache *this@<X0>, WebCore::Page *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint8_t v8[16];

  v6 = qword_1ECE7BEB0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "BackForwardCache::suspendPage()", v8, 2u);
  }
  return WebCore::BackForwardCache::trySuspendPage(a3, (uint64_t)this, a2, 1);
}

void WebCore::BackForwardCache::take(WebCore::BackForwardCache *this@<X0>, WebCore::HistoryItem *a2@<X1>, WebCore::Page *a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::BackForwardCache *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  WTF *v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  char *v22;
  int v23;
  void *v24;
  WTF::StringImpl *v25;
  double v26;
  WebCore *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  void *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  char v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a2 + 25))
  {
    v16 = *((_DWORD *)a2 + 52);
    if (!v16)
    {
LABEL_59:
      *a4 = 0;
      return;
    }
    if (v16 == 1 || v16 == 3 || v16 == 2)
    {
      this = (WebCore::BackForwardCache *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (!a3)
      {
LABEL_56:
        v36 = v38;
        v38 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, a2);
          else
            *(_DWORD *)v36 -= 2;
        }
        goto LABEL_59;
      }
    }
    else
    {
      v33 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v33 += 2;
      v38 = v33;
      if (!a3)
        goto LABEL_56;
    }
    if ((*(_QWORD *)(*((_QWORD *)a3 + 14) + 672) & 0x800000000000) == 0
      || (v34 = (uint64_t *)*((_QWORD *)a3 + 32)) == 0)
    {
      v34 = WebCore::emptyDiagnosticLoggingClient(this);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v34)(v34, buf, &v38, 0);
    v35 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, a2);
      else
        *(_DWORD *)v35 -= 2;
    }
    goto LABEL_56;
  }
  v7 = this;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = *(WTF **)(v8 + 8 * v13);
      if (v15 != (WTF *)-1)
      {
        if (!v15)
          goto LABEL_16;
        if (*(WebCore::HistoryItem **)v15 == a2)
          break;
      }
      v13 = (v13 + i) & v9;
    }
    if (v13 == *(_DWORD *)(v8 - 4))
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
LABEL_16:
  WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove((uint64_t *)this, this, v15);
  v17 = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = 0;
  (*(void (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)a2 + 59) + 16))(*((_QWORD *)a2 + 59), a2);
  v18 = qword_1ECE7BEB0;
  v19 = os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v19)
  {
    v20 = (WTF::StringImpl *)*((_QWORD *)a2 + 44);
    *(_QWORD *)buf = *((_QWORD *)a2 + 45);
    v39 = 45;
    v38 = v20;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)buf, &v39, (unint64_t *)&v38, &v37);
    if (!v37)
    {
      __break(0xC471u);
      return;
    }
    WTF::String::utf8();
    v21 = 0;
    if (v38)
      v22 = (char *)v38 + 16;
    else
      v22 = 0;
    if (*(_QWORD *)v7)
      v21 = *(_DWORD *)(*(_QWORD *)v7 - 12);
    v23 = *((_DWORD *)v7 + 6);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v22;
    v41 = 1024;
    v42 = v21;
    v43 = 1024;
    v44 = v23;
    _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "BackForwardCache::take item: %s, size: %u / %u", buf, 0x18u);
    v25 = v38;
    v38 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, v24);
      else
        --*(_DWORD *)v25;
    }
    v19 = (uint64_t)v37;
    v37 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        v19 = WTF::StringImpl::destroy((WTF::StringImpl *)v19, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
  if (v26 <= *(double *)(v17 + 16))
  {
    if (!a3 || !*((_BYTE *)a3 + 1092))
    {
      *a4 = v17;
      return;
    }
    v27 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_35;
  }
  v27 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3)
  {
LABEL_35:
    if ((*(_QWORD *)(*((_QWORD *)a3 + 14) + 672) & 0x800000000000) == 0
      || (v29 = (uint64_t *)*((_QWORD *)a3 + 32)) == 0)
    {
      v29 = WebCore::emptyDiagnosticLoggingClient(v27);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v29)(v29, buf, &v38, 0);
    v30 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v31 = v38;
  v38 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
  }
  *a4 = 0;
  WebCore::CachedPage::~CachedPage((WebCore::CachedPage *)v17);
  if (*(_DWORD *)v17)
  {
    *(_QWORD *)(v17 + 48) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)v17 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v17, v32);
  }
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  WTF *v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(WTF **)(v2 + 8 * v7);
      if (v9 != (WTF *)-1)
      {
        if (!v9)
          return WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove(a1, a1, v9);
        if (*(_QWORD *)v9 == a2)
          break;
      }
      v7 = (v7 + i) & v3;
    }
    if (v7 == *(_DWORD *)(v2 - 4))
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  return WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove(a1, a1, v9);
}

_QWORD *WebCore::BackForwardCache::removeAllItemsForPage(_QWORD *this, WebCore::Page *a2)
{
  WTF *v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  WTF *v9;
  int v10;
  char *v11;
  int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  char v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (WTF *)this[1];
  if (v2)
  {
    v4 = (uint64_t)this;
    do
    {
      v5 = (WTF *)*((_QWORD *)v2 + 2);
      v6 = *(_QWORD *)v2;
      if (*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 200) + 8) + 8) == a2)
      {
        v7 = qword_1ECE7BEB0;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        v9 = *(WTF **)(v6 + 352);
        *(_QWORD *)buf = *(_QWORD *)(v6 + 360);
        v20 = 45;
        v19 = v9;
        this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)buf, &v20, (unint64_t *)&v19, &v18);
        if (!v18)
        {
          __break(0xC471u);
          return this;
        }
        WTF::String::utf8();
        v10 = 0;
        if (v19)
          v11 = (char *)v19 + 16;
        else
          v11 = 0;
        if (*(_QWORD *)v4)
          v10 = *(_DWORD *)(*(_QWORD *)v4 - 12);
        v12 = *(_DWORD *)(v4 + 24);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v11;
        v22 = 1024;
        v23 = v10 - 1;
        v24 = 1024;
        v25 = v12;
        _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "BackForwardCache::removeAllItemsForPage removing item: %s, size: %u / %u", buf, 0x18u);
        v13 = v19;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, v8);
          else
            --*(_DWORD *)v13;
        }
        v14 = v18;
        v18 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v14 -= 2;
        }
        v6 = *(_QWORD *)v2;
        if (*(_QWORD *)v2)
LABEL_18:
          ++*(_DWORD *)v6;
        v15 = *(_QWORD *)(v6 + 200);
        *(_QWORD *)(v6 + 200) = 0;
        if (v15)
        {
          WebCore::CachedPage::~CachedPage((WebCore::CachedPage *)v15, (WTF::StringImpl *)v8);
          if (*(_DWORD *)v15)
          {
            *(_QWORD *)(v15 + 48) = 0;
            *(_OWORD *)(v15 + 16) = 0u;
            *(_OWORD *)(v15 + 32) = 0u;
            *(_OWORD *)v15 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v15, v8);
          }
        }
        if ((v15 != 0) != (*(_QWORD *)(v6 + 200) != 0))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 472) + 16))(*(_QWORD *)(v6 + 472), v6);
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v6, (WTF::StringImpl *)v8);
          WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v6;
        }
        this = WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove((uint64_t *)v4, (void *)v4, v2);
      }
      v2 = v5;
    }
    while (v5);
  }
  return this;
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove(uint64_t *result, void *a2, WTF *this)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  WebCore::HistoryItem *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;

  if (this)
  {
    v4 = result;
    v5 = *result;
    if (*result)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_13;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v23 = 6 * *(_DWORD *)(v16 - 12);
          v24 = *(_DWORD *)(v16 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(result, v24 >> 1, 0);
        }
      }
    }
LABEL_13:
    v17 = *((_QWORD *)this + 1);
    v18 = *((_QWORD *)this + 2);
    if (v17)
    {
      *(_QWORD *)(v17 + 16) = v18;
      v18 = *((_QWORD *)this + 2);
    }
    else
    {
      v4[1] = v18;
    }
    if (v18)
      v19 = (_QWORD *)(v18 + 8);
    else
      v19 = v4 + 2;
    *v19 = v17;
    v20 = *(WebCore::HistoryItem **)this;
    *(_QWORD *)this = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v20);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    return (uint64_t *)WTF::fastFree(this, a2);
  }
  return result;
}

uint64_t WebCore::BackForwardCache::get(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2, WebCore::Page *a3)
{
  uint64_t v5;
  WebCore::BackForwardCache *v6;
  double v7;
  WebCore *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v5 = *((_QWORD *)a2 + 25);
  if (v5)
  {
    v6 = this;
    ++*(_DWORD *)v5;
    WTF::MonotonicTime::now(this);
    if (v7 <= *(double *)(v5 + 16))
    {
      result = v5;
      if (!a3 || (result = v5, !*((_BYTE *)a3 + 1092)))
      {
LABEL_17:
        if (!*(_DWORD *)v5)
        {
          __break(0xC471u);
          JUMPOUT(0x195B7DB54);
        }
        --*(_DWORD *)v5;
        return result;
      }
      v8 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      v8 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (!a3)
      {
LABEL_13:
        v13 = v19;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
        WebCore::BackForwardCache::remove((uint64_t)v6, a2);
        result = 0;
        goto LABEL_17;
      }
    }
    if ((*(_QWORD *)(*((_QWORD *)a3 + 14) + 672) & 0x800000000000) == 0
      || (v11 = (uint64_t *)*((_QWORD *)a3 + 32)) == 0)
    {
      v11 = WebCore::emptyDiagnosticLoggingClient(v8);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))*v11)(v11, &v20, &v19, 0);
    v12 = v20;
    v20 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    goto LABEL_13;
  }
  v14 = *((_DWORD *)a2 + 52);
  if (v14)
  {
    if (v14 == 1 || v14 == 3 || v14 == 2)
    {
      this = (WebCore::BackForwardCache *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v15 += 2;
      v19 = v15;
    }
    if (a3)
    {
      if ((*(_QWORD *)(*((_QWORD *)a3 + 14) + 672) & 0x800000000000) == 0
        || (v16 = (uint64_t *)*((_QWORD *)a3 + 32)) == 0)
      {
        v16 = WebCore::emptyDiagnosticLoggingClient(this);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))*v16)(v16, &v20, &v19, 0);
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = v19;
    v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  return 0;
}

uint64_t WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::takeFirst(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::HistoryItem **v17;
  WebCore::HistoryItem *v18;
  WebCore::HistoryItem *v19;
  WebCore::HistoryItem **v20;
  WebCore::HistoryItem *v21;
  WTF *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 - 8);
  v5 = **(_QWORD **)(a2 + 8);
  v6 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v4 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(uint64_t **)(v3 + 8 * v9);
    if (v12 == (uint64_t *)-1)
      goto LABEL_5;
    if (!v12)
      break;
    if (*v12 == v5)
      goto LABEL_7;
LABEL_5:
    v9 = (v11 + i) & v4;
  }
  v11 = *(unsigned int *)(v3 - 4);
  v12 = *(uint64_t **)(v3 + 8 * v11);
  v5 = *v12;
LABEL_7:
  v13 = (_QWORD *)(v3 + 8 * v11);
  *v12 = 0;
  *a1 = v5;
  if (!*(_QWORD *)a2 || (_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)a2 - 4)) != v13)
  {
    *v13 = -1;
    ++*(_DWORD *)(*(_QWORD *)a2 - 16);
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a2 ? *(_DWORD *)(v14 - 12) - 1 : -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v25 = 6 * *(_DWORD *)(v16 - 12);
      v26 = *(_DWORD *)(v16 - 4);
      if (v25 < v26 && v26 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)a2, v26 >> 1, 0);
    }
  }
  v17 = *(WebCore::HistoryItem ***)(a2 + 8);
  v18 = v17[1];
  v19 = v17[2];
  if (v18)
  {
    *((_QWORD *)v18 + 2) = v19;
    v19 = v17[2];
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v19;
  }
  if (v19)
    v20 = (WebCore::HistoryItem **)((char *)v19 + 8);
  else
    v20 = (WebCore::HistoryItem **)(a2 + 16);
  *v20 = v18;
  v21 = *v17;
  *v17 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v21);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  return WTF::fastFree((WTF *)v17, (void *)a2);
}

uint64_t WebCore::BackForwardCache::clearEntriesForOrigins(uint64_t result, uint64_t *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  int i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  NSObject *v23;
  void *v24;
  WTF::StringImpl *v25;
  int v26;
  char *v27;
  int v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42[5];
  WTF *v43;
  char v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = *(WTF **)(result + 8);
  if (!v2)
    return result;
  v3 = result;
  do
  {
    v4 = v2;
    v2 = (WTF *)*((_QWORD *)v2 + 2);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    MEMORY[0x19AEA52F8](v42, buf, v5 + 16, 0);
    v7 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v42, (uint64_t *)&v43);
    result = (uint64_t)v42[0];
    v42[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    v9 = v43;
    v10 = *a2;
    if (!*a2)
      goto LABEL_57;
    v11 = *(_DWORD *)(v10 - 8);
    result = WTF::computeHash<WebCore::SecurityOrigin>((uint64_t)v43);
    for (i = 0; ; result = (i + v13))
    {
      v13 = result & v11;
      v14 = *(_QWORD *)(v10 + 8 * (result & v11));
      if (v14 == -1)
        goto LABEL_33;
      if (!v14)
        goto LABEL_57;
      if ((WTF *)v14 == v9)
        break;
      v15 = *(unsigned int *)(v14 + 32);
      v16 = *((_DWORD *)v9 + 8);
      v18 = v16 == (_DWORD)v15 && v16 != -1;
      if ((_DWORD)v15 == -1 || !v18)
      {
        v20 = v16 == -1;
        if ((_DWORD)v15 == -1)
          v21 = v20;
        else
          v21 = v18;
        if (v21)
          break;
      }
      else
      {
        *(_QWORD *)buf = v42;
        v22 = ((uint64_t (*)(_BYTE *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v15])(buf, v14 + 8, (char *)v9 + 8);
        if ((v22 & 1) != 0)
          break;
      }
LABEL_33:
      ++i;
    }
    if (*(_BYTE *)(v14 + 63) && *(unsigned __int8 *)(v14 + 59) | *((unsigned __int8 *)v9 + 59))
      goto LABEL_33;
    v23 = qword_1ECE7BEB0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_47;
    v25 = *(WTF::StringImpl **)(*(_QWORD *)v4 + 352);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v4 + 360);
    v44 = 45;
    v42[0] = v25;
    result = (uint64_t)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)buf, &v44, (unint64_t *)v42, &v41);
    if (!v41)
    {
      __break(0xC471u);
      return result;
    }
    WTF::String::utf8();
    v26 = 0;
    if (v42[0])
      v27 = (char *)v42[0] + 16;
    else
      v27 = 0;
    if (*(_QWORD *)v3)
      v26 = *(_DWORD *)(*(_QWORD *)v3 - 12);
    v28 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v27;
    v46 = 1024;
    v47 = v26 - 1;
    v48 = 1024;
    v49 = v28;
    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "BackForwardCache::clearEntriesForOrigins removing item: %s, size: %u / %u", buf, 0x18u);
    v29 = v42[0];
    v42[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, v24);
      else
        --*(_DWORD *)v29;
    }
    v30 = v41;
    v41 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v30 -= 2;
    }
LABEL_47:
    v31 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      ++*(_DWORD *)v31;
    v32 = *(_QWORD *)(v31 + 200);
    *(_QWORD *)(v31 + 200) = 0;
    if (v32)
    {
      WebCore::CachedPage::~CachedPage((WebCore::CachedPage *)v32, (WTF::StringImpl *)v24);
      if (*(_DWORD *)v32)
      {
        *(_QWORD *)(v32 + 48) = 0;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)v32 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v32, v24);
      }
    }
    if ((v32 != 0) != (*(_QWORD *)(v31 + 200) != 0))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v31 + 472) + 16))(*(_QWORD *)(v31 + 472), v31);
    if (*(_DWORD *)v31 == 1)
    {
      WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v31, (WTF::StringImpl *)v24);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*(_DWORD *)v31;
    }
    result = (uint64_t)WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove((uint64_t *)v3, (void *)v3, v4);
LABEL_57:
    v43 = 0;
    if (v9)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)v9);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v9));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)v9);
        v37 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
        *((_QWORD *)v9 + 6) = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v8);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 5) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v8);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = *((unsigned int *)v9 + 8);
        if ((_DWORD)v39 != -1)
          ((void (*)(_BYTE *, char *))off_1E33AF198[v39])(buf, (char *)v9 + 8);
        *((_DWORD *)v9 + 8) = -1;
        result = WTF::fastFree(v9, v8);
      }
    }
  }
  while (v2);
  return result;
}

WTF::StringImpl *WebCore::HistoryItem::url@<X0>(WebCore::HistoryItem *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[5];

  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  MEMORY[0x19AEA52F8](a2, v6, (char *)this + 16, 0);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int **WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>(unsigned int **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  if (!*(_QWORD *)(a2 + 16))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v6 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  v9 = *(unsigned int **)(a2 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *a1 = v9;
  return a1;
}

uint64_t WebCore::BackForwardController::BackForwardController(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  *(_DWORD *)a1 = 0;
  if (!*(_QWORD *)(a2 + 16))
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v8 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = *(unsigned int **)(a2 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 8) = v11;
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v13;
  return a1;
}

uint64_t WebCore::BackForwardController::backItem(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v1 + 32))(v1, 0xFFFFFFFFLL);
  if (v1[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  --v1[2];
  return result;
}

uint64_t WebCore::BackForwardController::itemAtIndex(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 32))(v1);
  if (v1[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  --v1[2];
  return result;
}

uint64_t WebCore::BackForwardController::currentItem(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v1 + 32))(v1, 0);
  if (v1[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  --v1[2];
  return result;
}

uint64_t WebCore::BackForwardController::forwardItem(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v1 + 32))(v1, 1);
  if (v1[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  --v1[2];
  return result;
}

uint64_t WebCore::BackForwardController::canGoBackOrForward(WebCore::BackForwardController *this, int a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;

  if (!a2)
    return 1;
  if (a2 < 1)
  {
    v6 = -a2;
    v7 = (_DWORD *)*((_QWORD *)this + 2);
    ++v7[2];
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 40))(v7);
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
    if (v8 < v6)
      return 0;
  }
  else
  {
    v3 = (_DWORD *)*((_QWORD *)this + 2);
    ++v3[2];
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 48))(v3);
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
    if (v4 < a2)
      return 0;
  }
  return 1;
}

uint64_t WebCore::BackForwardController::forwardCount(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 48))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::BackForwardController::backCount(WebCore::BackForwardController *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 40))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::BackForwardController::goBack(WebCore::BackForwardController *this)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::HistoryItem *v11;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  WebCore::HistoryItem *v19;
  _QWORD *v20;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  ++v2[2];
  (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v2 + 32))(&v19, v2, 0xFFFFFFFFLL);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  if (!v19)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v3;
  v4 = *(unsigned int **)(v3 + 160);
  if (v4)
    v5 = *((_BYTE *)v4 + 144) == 0;
  else
    v5 = 0;
  v6 = v5;
  if (v5)
  {
    v7 = v4 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    WebCore::Page::goToItem(v3, (uint64_t)v4, v19, 1, 0);
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, v7);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v7;
      v20 = v17;
      WTF::ensureOnMainThread();
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v11, (WTF::StringImpl *)v4);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  return v6;
}

uint64_t WebCore::BackForwardController::goForward(WebCore::BackForwardController *this)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::HistoryItem *v11;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  WebCore::HistoryItem *v19;
  _QWORD *v20;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  ++v2[2];
  (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v2 + 32))(&v19, v2, 1);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  if (!v19)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v3;
  v4 = *(unsigned int **)(v3 + 160);
  if (v4)
    v5 = *((_BYTE *)v4 + 144) == 0;
  else
    v5 = 0;
  v6 = v5;
  if (v5)
  {
    v7 = v4 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    WebCore::Page::goToItem(v3, (uint64_t)v4, v19, 2, 0);
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, v7);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v7;
      v20 = v17;
      WTF::ensureOnMainThread();
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v11, (WTF::StringImpl *)v4);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  return v6;
}

uint64_t WebCore::BackForwardController::setCurrentItem(WebCore::BackForwardController *this, WebCore::HistoryItem *a2)
{
  _DWORD *v2;
  uint64_t result;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  ++v2[2];
  result = (*(uint64_t (**)(_DWORD *, WebCore::HistoryItem *))(*(_QWORD *)v2 + 24))(v2, a2);
  if (v2[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[2];
  return result;
}

uint64_t WebCore::BackForwardController::allItems@<X0>(WebCore::BackForwardController *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  int v5;
  uint64_t i;
  _DWORD *v7;
  uint64_t result;
  int v9;
  _DWORD *v10;
  WebCore::HistoryItem *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::HistoryItem *v16;
  WebCore::HistoryItem *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WebCore::HistoryItem *v23;
  WebCore::HistoryItem *v24;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  ++v4[2];
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 40))(v4);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  for (i = -v5; ; i = (i + 1))
  {
    v7 = (_DWORD *)*((_QWORD *)this + 2);
    ++v7[2];
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 48))(v7);
    v9 = result;
    if (v7[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
    if ((int)i > v9)
      break;
    v10 = (_DWORD *)*((_QWORD *)this + 2);
    ++v10[2];
    (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v10 + 32))(&v24, v10, i);
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    v11 = v24;
    if (v24)
    {
      v23 = v24;
      v24 = 0;
      v12 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
      {
        v13 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v23);
        v12 = *(unsigned int *)(a2 + 12);
        v14 = *(_QWORD *)a2;
        v15 = *v13;
        *v13 = 0;
        *(_QWORD *)(v14 + 8 * v12) = v15;
      }
      else
      {
        v22 = *(_QWORD *)a2;
        v23 = 0;
        *(_QWORD *)(v22 + 8 * v12) = v11;
      }
      *(_DWORD *)(a2 + 12) = v12 + 1;
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v16);
          WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      v17 = v24;
      v24 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v17);
          WTF::fastFree(v18, v19);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
  }
  return result;
}

void WebCore::CachedFrameBase::~CachedFrameBase(WebCore::CachedFrameBase *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::CachedFrameBase *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF::RunLoop **v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;

  v3 = *((unsigned int *)this + 25);
  v4 = (WTF *)*((_QWORD *)this + 11);
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v6 = *(WebCore::CachedFrameBase **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        WebCore::CachedFrameBase::~CachedFrameBase(v6);
        WTF::fastFree(v7, v8);
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 11);
  }
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (WTF::RunLoop **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    WebCore::ScriptCachedFrameData::~ScriptCachedFrameData(v10, (WTF::StringImpl *)a2);
    WTF::fastFree(v11, v12);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (v15[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 24))(v15);
    else
      --v15[6];
  }
  v16 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
}

_QWORD *WebCore::CachedFrameBase::restore(WebCore::CachedFrameBase *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::Document *v16;
  WebCore::SVGDocumentExtensions *v17;
  void *v18;
  uint64_t v19;
  int v20;
  WebCore::CachedFrame **v21;
  uint64_t v22;
  WebCore::CachedFrame **v23;
  int v24;
  uint64_t v25;
  WebCore::CachedFrame **v26;
  WebCore::CachedFrame **v27;
  uint64_t v28;
  WebCore::CachedFrame **v29;
  WebCore::CachedFrameBase *v30;
  WTF *v31;
  void *v32;
  WebCore::CachedFrame **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int **v36;
  unsigned int **v37;
  int v38;
  _QWORD *result;
  _DWORD *v41;
  uint64_t v42;
  WebCore::Page *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  WTF *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  _DWORD *v55;
  WebCore::Node *v56;
  char v57;
  _QWORD *v58;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2)
    ++v2[2];
  if (!*((_BYTE *)this + 80))
    goto LABEL_18;
  if (*((_BYTE *)v2 + 25))
    goto LABEL_18;
  *((_BYTE *)v2 + 25) = 1;
  if (!*((_BYTE *)v2 + 24))
    goto LABEL_18;
  v3 = *((_QWORD *)v2 + 18);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 8 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_QWORD *)*((_QWORD *)v2 + 18);
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        v6 = (_QWORD *)*((_QWORD *)v2 + 18);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v6 = (_QWORD *)(v3 + 8 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 8 * v4);
  if (v3)
  {
LABEL_13:
    v8 = (_QWORD *)(v3 + 8 * *(unsigned int *)(v3 - 4));
    goto LABEL_17;
  }
  v8 = 0;
LABEL_17:
  while (v6 != v8)
  {
    v52 = v6 + 1;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 64))(*v6, 1);
    v6 = v5;
    if (v52 != v5)
    {
      v6 = v52;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
LABEL_18:
  v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 720))(v2);
  v10 = (_QWORD *)v9;
  v11 = (unsigned int *)(v9 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(unsigned __int8 *)(v9 + 144);
  if (!*(_BYTE *)(v9 + 144))
  {
    do
      v14 = __ldaxr(v11);
    while (__stlxr(v14 + 1, v11));
  }
  v15 = *(_QWORD *)this;
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v58, v15, 1);
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::NavigationDisabler::s_globalNavigationDisableCount;
  if (!v13)
    WebCore::ScriptCachedFrameData::restore(*((WebCore::ScriptCachedFrameData **)this + 8), (WebCore::LocalFrame *)v10);
  v17 = *(WebCore::SVGDocumentExtensions **)(v15 + 1808);
  if (v17)
  {
    ++*(_DWORD *)v17;
    WebCore::SVGDocumentExtensions::unpauseAnimations(v17, v16);
    if (!*(_DWORD *)v17)
    {
      __break(0xC471u);
      JUMPOUT(0x195B7F32CLL);
    }
    --*(_DWORD *)v17;
  }
  WebCore::Document::resume((WTF::MonotonicTime *)v15, 2);
  if (!v13)
  {
    v19 = v10[38];
    ++*(_DWORD *)(v19 + 8);
    WebCore::ScriptController::updatePlatformScriptObjects(v19);
    v20 = *(_DWORD *)(v19 + 8);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x195B7F3E4);
    }
    *(_DWORD *)(v19 + 8) = v20 - 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v10[35] + 16) + 840))(*(_QWORD *)(v10[35] + 16));
  }
  v56 = (WebCore::Node *)v15;
  v21 = (WebCore::CachedFrame **)*((_QWORD *)this + 11);
  v22 = *((unsigned int *)this + 25);
  v23 = &v21[v22];
  if ((_DWORD)v22)
  {
    v54 = v13;
    v55 = v2;
    v24 = 0;
    v25 = *((_QWORD *)this + 11);
    v26 = &v21[v22];
    v27 = v26;
    do
    {
      v28 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)*v21 + 2) + 720))(*((_QWORD *)*v21 + 2)) + 24);
      if (!v28 || !*(_QWORD *)(v28 + 8))
      {
        WebCore::CachedFrame::destroy(*v21);
        v29 = v21;
        if (v27 != (WebCore::CachedFrame **)(*((_QWORD *)this + 11) + 8 * *((unsigned int *)this + 25)))
        {
          if (v21 == v26)
          {
            v29 = v27;
          }
          else
          {
            memmove(v27, v26, v25 - (_QWORD)v26);
            v29 = (WebCore::CachedFrame **)((char *)v27 + v25 - (_QWORD)v26);
          }
        }
        v30 = *v21;
        *v21 = 0;
        v26 = v21 + 1;
        if (v30)
        {
          WebCore::CachedFrameBase::~CachedFrameBase(v30, v18);
          WTF::fastFree(v31, v32);
        }
        ++v24;
        v27 = v29;
      }
      ++v21;
      v25 += 8;
    }
    while (v21 < v23);
    v21 = (WebCore::CachedFrame **)*((_QWORD *)this + 11);
    LODWORD(v22) = *((_DWORD *)this + 25);
    v23 = v27;
    v2 = v55;
    v13 = v54;
  }
  else
  {
    v24 = 0;
    v26 = &v21[v22];
  }
  v33 = &v21[v22];
  if (v26 != v33)
  {
    memmove(v23, v26, (char *)v33 - (char *)v26);
    LODWORD(v22) = *((_DWORD *)this + 25);
    v21 = (WebCore::CachedFrame **)*((_QWORD *)this + 11);
  }
  v34 = (v22 - v24);
  *((_DWORD *)this + 25) = v34;
  if ((_DWORD)v34)
  {
    v35 = 8 * v34;
    if (v13)
    {
      do
      {
        v36 = (unsigned int **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*v21 + 2) + 720))(*((_QWORD *)*v21 + 2));
        WebCore::FrameTree::appendChild((WebCore::FrameTree *)(v10 + 6), v36);
        WebCore::CachedFrame::open(*v21);
        if (*(_QWORD *)this)
        {
          __break(0xC471u);
          JUMPOUT(0x195B7F2ECLL);
        }
        ++v21;
        v35 -= 8;
      }
      while (v35);
    }
    else
    {
      do
      {
        v37 = (unsigned int **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*v21 + 2) + 720))(*((_QWORD *)*v21 + 2));
        WebCore::FrameTree::appendChild((WebCore::FrameTree *)(v10 + 6), v37);
        WebCore::CachedFrame::open(*v21);
        if (*(_QWORD *)this != v10[37])
        {
          __break(0xC471u);
          JUMPOUT(0x195B7F30CLL);
        }
        ++v21;
        v35 -= 8;
      }
      while (v35);
    }
  }
  --WebCore::NavigationDisabler::s_globalNavigationDisableCount;
  v38 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v57, v18);
    v38 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v38 - 1;
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v58, v18);
  result = v56;
  if (*((_DWORD *)v56 + 6) == 2)
  {
    if ((*((_WORD *)v56 + 15) & 0x400) == 0)
      result = (_QWORD *)WebCore::Node::removedLastRef(v56);
  }
  else
  {
    *((_DWORD *)v56 + 6) -= 2;
  }
  if (*((_BYTE *)this + 80))
  {
    if (v13)
      goto LABEL_76;
    (*(void (**)(_QWORD))(**(_QWORD **)(v10[35] + 16) + 824))(*(_QWORD *)(v10[35] + 16));
    v41 = *(_DWORD **)(*(_QWORD *)this + 696);
    if (v41)
    {
      ++v41[6];
      if (v41[58])
      {
        v42 = v10[3];
        if (v42)
        {
          v43 = *(WebCore::Page **)(v42 + 8);
          if (v43)
          {
            ++*(_DWORD *)v43;
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(*((_QWORD *)v43 + 6) + 16) + 640))(*(_QWORD *)(*((_QWORD *)v43 + 6) + 16), v10, 1);
            if (*(_DWORD *)v43 == 1)
            {
              WebCore::Page::~Page(v43);
              WTF::fastFree(v49, v50);
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
        }
      }
      if (v41[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 72))(v41);
      else
        --v41[6];
    }
  }
  else if (v13)
  {
    goto LABEL_76;
  }
  v44 = v10[36];
  if (v44)
  {
    ++*(_DWORD *)(v44 + 8);
    result = WebCore::LocalFrameView::updateScrollableAreaSet((_QWORD *)v44);
    if (*(_DWORD *)(v44 + 8) == 1)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    else
      --*(_DWORD *)(v44 + 8);
  }
  else
  {
    result = WebCore::LocalFrameView::updateScrollableAreaSet(0);
  }
  do
  {
    v45 = __ldaxr(v11);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v11));
  if (!v46)
  {
    atomic_store(1u, v11);
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v53 = off_1E31FE290;
    v53[1] = v11;
    v58 = v53;
    WTF::ensureOnMainThread();
    result = v58;
    v58 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  do
  {
LABEL_76:
    v47 = __ldaxr(v11);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, v11));
  if (!v48)
  {
    atomic_store(1u, v11);
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v51 = off_1E31FE290;
    v51[1] = v11;
    v58 = v51;
    WTF::ensureOnMainThread();
    result = v58;
    v58 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (v2[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[2];
  return result;
}

uint64_t WebCore::CachedFrame::open(uint64_t this)
{
  _DWORD *v1;
  WebCore::CachedFrameBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FrameLoader *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_DWORD **)(this + 16);
  if (v1)
  {
    v2 = (WebCore::CachedFrameBase *)this;
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 704))(*(_QWORD *)(this + 16));
    if ((this & 1) == 0)
    {
      ++v1[2];
      v3 = *((_QWORD *)v1 + 41);
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(WebCore::FrameLoader **)(v3 + 280);
      ++*(_DWORD *)v6;
      this = (uint64_t)WebCore::FrameLoader::open(v6, v2);
      if (!*(_DWORD *)v6)
      {
        __break(0xC471u);
        JUMPOUT(0x195B7F53CLL);
      }
      --*(_DWORD *)v6;
      do
      {
        v7 = __ldaxr(v4);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v4));
      if (!v8)
      {
        atomic_store(1u, v4);
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = off_1E31FE290;
        v9[1] = v4;
        v10 = (uint64_t)v9;
        WTF::ensureOnMainThread();
        this = v10;
        if (v10)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      if (v1[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      else
        --v1[2];
    }
  }
  return this;
}

WebCore::CachedFrame *WebCore::CachedFrame::CachedFrame(WebCore::CachedFrame *this, WebCore::Frame *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::RunLoop ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::CachedFrame *v22;
  WebCore::CachedFrameBase *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::CachedFrameBase *v29;
  WTF *v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WebCore::CachedFrameBase *v38;
  WebCore::CachedFrameBase *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  WebCore::ScriptCachedFrameData *v47;
  WebCore::ScriptCachedFrameData *v48;
  WTF::RunLoop **v49;
  WTF *v50;
  void *v51;
  WebCore::LocalDOMWindow *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WebCore::Document *v56;
  WTF *v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  unint64_t v61;
  char *v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  _DWORD *v74;
  uint64_t v75;
  WebCore::Page *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  char *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  WebCore::CachedFrameBase *v95;
  WebCore::CachedFrameBase *v96;
  WTF *v97;
  void *v98;
  WebCore::CachedFrameBase *v99;
  WebCore::CachedFrameBase *v100;
  int v101;
  WebCore::CachedFrameBase *v102[3];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)a2 + 56))(a2);
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = 0;
  v5 = (WTF::StringImpl **)((char *)this + 24);
  WTF::URL::invalidate((WebCore::CachedFrame *)((char *)this + 24));
  v7 = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v8 = (WTF::RunLoop ***)((char *)this + 64);
  v9 = *((_QWORD *)a2 + 7);
  if (v9)
    v7 = *(_QWORD *)(v9 + 8);
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 80) = v7 == 0;
  *((_QWORD *)this + 12) = 0;
  if (!*((_BYTE *)a2 + 144))
  {
    v10 = *((_QWORD *)a2 + 37);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    v11 = *(_QWORD *)this;
    *(_QWORD *)this = v10;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 35) + 88);
    if (v12)
      ++*(_DWORD *)(v12 + 24);
    v13 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v12;
    if (v13)
    {
      if (v13[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
      else
        --v13[6];
    }
    v14 = *((_QWORD *)a2 + 37);
    v15 = *(WTF::StringImpl **)(v14 + 736);
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = *v5;
    *v5 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(_OWORD *)(v14 + 760);
    *((_OWORD *)this + 2) = *(_OWORD *)(v14 + 744);
    *((_OWORD *)this + 3) = v17;
  }
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    *(_DWORD *)(v18 + 24) += 2;
  v19 = (unsigned int *)*((_QWORD *)a2 + 11);
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    do
    {
      v22 = (WebCore::CachedFrame *)WTF::fastMalloc((WTF *)0x68);
      v23 = (WebCore::CachedFrameBase *)WebCore::CachedFrame::CachedFrame(v22, (WebCore::Frame *)v19);
      v102[0] = v23;
      v24 = *((unsigned int *)this + 25);
      if ((_DWORD)v24 == *((_DWORD *)this + 24))
      {
        v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 11, v24 + 1, (unint64_t)v102);
        v24 = *((unsigned int *)this + 25);
        v26 = *((_QWORD *)this + 11);
        v27 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v26 + 8 * v24) = v27;
      }
      else
      {
        v28 = *((_QWORD *)this + 11);
        v102[0] = 0;
        *(_QWORD *)(v28 + 8 * v24) = v23;
      }
      *((_DWORD *)this + 25) = v24 + 1;
      v29 = v102[0];
      v102[0] = 0;
      if (v29)
      {
        WebCore::CachedFrameBase::~CachedFrameBase(v29, v6);
        WTF::fastFree(v30, v31);
      }
      v32 = (unsigned int *)*((_QWORD *)v19 + 9);
      if (v32)
      {
        v33 = v32 + 2;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 + 1, v33));
      }
      v35 = v19 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        v38 = (WebCore::CachedFrameBase *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v38 = off_1E31FE290;
        *((_QWORD *)v38 + 1) = v35;
        v102[0] = v38;
        WTF::ensureOnMainThread();
        v39 = v102[0];
        v102[0] = 0;
        if (v39)
          (*(void (**)(WebCore::CachedFrameBase *))(*(_QWORD *)v39 + 8))(v39);
      }
      v19 = v32;
    }
    while (v32);
  }
  if (v18)
  {
    v40 = *(_QWORD *)(v18 + 696);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x195B7FDF4);
    }
    v41 = *(_QWORD *)(v40 + 72);
    if (!v41)
      goto LABEL_167;
    v42 = *(_QWORD *)(v41 + 8);
    if (!v42)
      goto LABEL_167;
    if (*(_BYTE *)(v42 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195B7FE14);
    }
    v43 = *(_QWORD *)(v42 + 240);
    if (!v43 || !*(_QWORD *)(v43 + 8))
    {
LABEL_167:
      __break(0xC471u);
      JUMPOUT(0x195B7FD9CLL);
    }
    WebCore::Document::suspend((WTF *)v18, 2);
  }
  v44 = *((unsigned __int8 *)a2 + 144);
  if (*((_BYTE *)a2 + 144))
  {
    v48 = 0;
  }
  else
  {
    v45 = (unsigned int *)((char *)a2 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
    v47 = (WebCore::ScriptCachedFrameData *)WTF::fastMalloc((WTF *)8);
    v48 = WebCore::ScriptCachedFrameData::ScriptCachedFrameData(v47, a2);
  }
  v49 = *v8;
  *v8 = (WTF::RunLoop **)v48;
  if (v49)
  {
    WebCore::ScriptCachedFrameData::~ScriptCachedFrameData(v49, v6);
    WTF::fastFree(v50, v51);
  }
  if (v18)
  {
    v52 = *(WebCore::LocalDOMWindow **)(v18 + 696);
    if (v52)
    {
      ++*((_DWORD *)v52 + 6);
      WebCore::LocalDOMWindow::suspendForBackForwardCache(v52);
      if (*((_DWORD *)v52 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v52 + 72))(v52);
      else
        --*((_DWORD *)v52 + 6);
    }
    else
    {
      WebCore::LocalDOMWindow::suspendForBackForwardCache(0);
    }
  }
  v53 = *((_QWORD *)this + 2);
  if (v53 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v53 + 704))(*((_QWORD *)this + 2)) & 1) == 0)
  {
    v54 = *(_DWORD *)(v53 + 8);
    *(_DWORD *)(v53 + 8) = v54 + 1;
    *(_BYTE *)(v53 + 1368) = 0;
    *(_DWORD *)(v53 + 1375) = 256;
    *(_DWORD *)(v53 + 1156) = 0;
    *(_QWORD *)(v53 + 1160) = 0;
    if (!v54)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      if (v44)
        goto LABEL_77;
      goto LABEL_65;
    }
    *(_DWORD *)(v53 + 8) = v54;
  }
  if (v44)
    goto LABEL_77;
LABEL_65:
  v55 = *((_QWORD *)a2 + 35);
  ++*(_DWORD *)v55;
  if (*(WebCore::Frame **)(*((_QWORD *)a2 + 16) + 8) != a2)
    WebCore::Frame::detachFromAllOpenedFrames(a2, v6);
  (*(void (**)(_QWORD, WebCore::CachedFrame *))(**(_QWORD **)(v55 + 16) + 808))(*(_QWORD *)(v55 + 16), this);
  v57 = (WTF *)*((_QWORD *)a2 + 36);
  if (v57)
    ++*((_DWORD *)v57 + 2);
  v58 = *((_QWORD *)a2 + 37);
  if (v58)
  {
    *(_DWORD *)(v58 + 24) += 2;
    WebCore::LocalFrame::clearTimers(v57, (WebCore::DocumentTimelinesController **)v58, v56);
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v58);
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
  else
  {
    WebCore::LocalFrame::clearTimers(v57, 0, v56);
  }
  if (v57)
  {
    if (*((_DWORD *)v57 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v57 + 8))(v57);
    else
      --*((_DWORD *)v57 + 2);
  }
  if (!*(_DWORD *)v55)
  {
    __break(0xC471u);
    JUMPOUT(0x195B7FE94);
  }
  --*(_DWORD *)v55;
LABEL_77:
  v59 = (char *)*((_QWORD *)a2 + 11);
  if (!v59)
  {
    v62 = 0;
    v73 = 1;
    if (!v44)
      goto LABEL_103;
LABEL_112:
    if (!v18)
      goto LABEL_123;
    goto LABEL_113;
  }
  v101 = v44;
  v60 = 0;
  LODWORD(v61) = 0;
  v62 = 0;
  v63 = 1;
  do
  {
    v64 = v63;
    v65 = v60;
    if (v60 == (_DWORD)v61)
    {
      v66 = v60 + 1;
      v67 = v65 + (v65 >> 2);
      if (v67 >= 0x10)
        v68 = v67 + 1;
      else
        v68 = 16;
      if (v68 <= v66)
        v61 = v65 + 1;
      else
        v61 = v68;
      if (v61 >> 29)
        goto LABEL_177;
      v69 = (char *)WTF::fastMalloc((WTF *)(8 * v61));
      memcpy(v69, v62, 8 * v65);
      if (v62)
      {
        if (v69 == v62)
        {
          v69 = 0;
          LODWORD(v61) = 0;
        }
        WTF::fastFree((WTF *)v62, v6);
      }
      v62 = v69;
    }
    v70 = (unsigned int *)(v59 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
    *(_QWORD *)&v62[8 * v65] = v59;
    v60 = v65 + 1;
    v59 = (char *)*((_QWORD *)v59 + 9);
    v63 = v64 + 1;
  }
  while (v59);
  v59 = &v62[8 * v60];
  if ((_DWORD)v65 == -1)
  {
    v73 = 1;
  }
  else
  {
    v72 = 0;
    do
    {
      WebCore::FrameTree::removeChild((WebCore::Frame *)((char *)a2 + 48), *(WebCore::Frame **)&v62[v72]);
      v72 += 8;
    }
    while (8 * v64 != v72);
    v73 = 0;
  }
  v44 = v101;
  if (v101)
    goto LABEL_112;
LABEL_103:
  if (!*((_BYTE *)this + 80))
    goto LABEL_112;
  v74 = *(_DWORD **)(v18 + 696);
  if (v74)
  {
    ++v74[6];
    if (v74[58])
    {
      v75 = *((_QWORD *)a2 + 3);
      if (v75)
      {
        v76 = *(WebCore::Page **)(v75 + 8);
        if (v76)
        {
          ++*(_DWORD *)v76;
          (*(void (**)(_QWORD, WebCore::Frame *, _QWORD))(**(_QWORD **)(*((_QWORD *)v76 + 6) + 16) + 640))(*(_QWORD *)(*((_QWORD *)v76 + 6) + 16), a2, 0);
          if (*(_DWORD *)v76 == 1)
          {
            WebCore::Page::~Page(v76);
            WTF::fastFree(v97, v98);
          }
          else
          {
            --*(_DWORD *)v76;
          }
        }
      }
    }
    if (v74[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 72))(v74);
    else
      --v74[6];
  }
LABEL_113:
  if (*(_QWORD *)this != v18)
  {
    __break(0xC471u);
    JUMPOUT(0x195B7FDC4);
  }
  v77 = *(_QWORD *)(v18 + 528);
  if (v77)
  {
    v78 = *(_QWORD *)(v77 + 8);
    if (v78)
    {
      WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v78 + 248, (_QWORD *)(v18 + 512));
      v77 = *(_QWORD *)(v18 + 528);
      *(_QWORD *)(v18 + 528) = 0;
      if (!v77)
        goto LABEL_123;
    }
    else
    {
      *(_QWORD *)(v18 + 528) = 0;
    }
    do
    {
      v79 = __ldaxr((unsigned int *)v77);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, (unsigned int *)v77));
    if (!v80)
    {
      atomic_store(1u, (unsigned int *)v77);
      WTF::fastFree((WTF *)v77, v6);
    }
    v81 = *(_QWORD *)(v18 + 528);
    if (v81)
    {
      v82 = *(_QWORD *)(v81 + 8);
      if (v82)
        WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v82 + 248, (_QWORD *)(v18 + 512), (uint64_t)v102);
    }
  }
  else
  {
    *(_QWORD *)(v18 + 528) = 0;
  }
LABEL_123:
  v83 = *((_QWORD *)this + 1);
  if (v83)
  {
    if (*(_BYTE *)(v83 + 3548)
      || (v84 = *(_QWORD *)(v83 + 88)) != 0 && *(_DWORD *)(v84 - 12)
      || (v85 = *(_QWORD *)(v83 + 104)) != 0 && *(_DWORD *)(v85 - 12))
    {
LABEL_177:
      __break(0xC471u);
      JUMPOUT(0x195B7FBA0);
    }
  }
  if ((v73 & 1) == 0)
  {
    v90 = v62;
    do
    {
      v91 = *(_QWORD *)v90;
      *(_QWORD *)v90 = 0;
      if (v91)
      {
        v92 = (unsigned int *)(v91 + 8);
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v92);
          v95 = (WebCore::CachedFrameBase *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v95 = off_1E31FE290;
          *((_QWORD *)v95 + 1) = v92;
          v102[0] = v95;
          WTF::ensureOnMainThread();
          v96 = v102[0];
          v102[0] = 0;
          if (v96)
            (*(void (**)(WebCore::CachedFrameBase *))(*(_QWORD *)v96 + 8))(v96);
        }
      }
      v90 += 8;
    }
    while (v90 != v59);
  }
  if (v62)
    WTF::fastFree((WTF *)v62, v6);
  if (!v44)
  {
    v86 = (unsigned int *)((char *)a2 + 8);
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      v99 = (WebCore::CachedFrameBase *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v99 = off_1E31FE290;
      *((_QWORD *)v99 + 1) = v86;
      v102[0] = v99;
      WTF::ensureOnMainThread();
      v100 = v102[0];
      v102[0] = 0;
      if (v100)
        (*(void (**)(WebCore::CachedFrameBase *))(*(_QWORD *)v100 + 8))(v100);
    }
  }
  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::CachedFrame::clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;

  if (*(_QWORD *)this)
  {
    v1 = this;
    v2 = *(_DWORD *)(this + 100);
    v3 = (v2 - 1);
    if (v2 - 1 < 0)
    {
LABEL_6:
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v1);
      v5 = *(_DWORD **)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      v15 = 0;
      WTF::URL::invalidate((WTF::URL *)&v15);
      v7 = v15;
      v15 = 0;
      v8 = *(WTF::StringImpl **)(v1 + 24);
      *(_QWORD *)(v1 + 24) = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v6);
          v9 = v15;
        }
        else
        {
          v9 = 0;
          *(_DWORD *)v8 -= 2;
        }
      }
      else
      {
        v9 = 0;
      }
      v10 = v16;
      v11 = v17;
      LODWORD(v16) = v16 & 0xFFFFFFFE;
      *(_OWORD *)(v1 + 32) = v10;
      *(_OWORD *)(v1 + 48) = v11;
      v15 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      v12 = *(_QWORD *)(v1 + 72);
      *(_QWORD *)(v1 + 72) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      this = *(_QWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 64) = 0;
      if (this)
      {
        WebCore::ScriptCachedFrameData::~ScriptCachedFrameData((WTF::RunLoop **)this, v6);
        return WTF::fastFree(v13, v14);
      }
    }
    else
    {
      while (v3 < *(unsigned int *)(v1 + 100))
      {
        this = WebCore::CachedFrame::clear(*(WebCore::CachedFrame **)(*(_QWORD *)(v1 + 88) + 8 * v3));
        if ((uint64_t)v3-- <= 0)
          goto LABEL_6;
      }
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t *WebCore::CachedFrame::destroy(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v13;
  WTF *v14;
  WebCore::Document *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  WebCore::FrameLoader *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *this;
  if (*this)
  {
    v2 = (uint64_t)this;
    *(_DWORD *)(v1 + 24) += 2;
    v3 = *(_QWORD *)(v1 + 696);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 24);
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = off_1E33FF7B0;
      v29 = (uint64_t)v4;
      WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 96), &v29);
      v5 = v29;
      v29 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (*(_DWORD *)(v3 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      else
        --*(_DWORD *)(v3 + 24);
    }
    else
    {
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E33FF7B0;
      v29 = (uint64_t)v24;
      WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)0x60, &v29);
      v25 = v29;
      v29 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 720))(*(_QWORD *)(v2 + 16));
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!*(_BYTE *)(v2 + 80))
    {
      v19 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 720))(*(_QWORD *)(v2 + 16)) + 24);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 8))
        {
          if (!*(_BYTE *)(v7 + 144))
          {
            do
              v20 = __ldaxr(v8);
            while (__stlxr(v20 + 1, v8));
            v21 = *(WebCore::FrameLoader **)(v7 + 280);
            ++*(_DWORD *)v21;
            WebCore::FrameLoader::detachViewsAndDocumentLoader(v21);
            if (!*(_DWORD *)v21)
              goto LABEL_46;
            --*(_DWORD *)v21;
            do
            {
              v22 = __ldaxr(v8);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v8));
            if (!v23)
            {
              atomic_store(1u, v8);
              v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v27 = off_1E31FE290;
              v27[1] = v8;
              v29 = (uint64_t)v27;
              WTF::ensureOnMainThread();
              v28 = v29;
              v29 = 0;
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
          }
          WebCore::Frame::detachFromPage((WebCore::Frame *)v7);
        }
      }
    }
    v10 = *(_DWORD *)(v2 + 100);
    v11 = (v10 - 1);
    if (v10 - 1 >= 0)
    {
      while (v11 < *(unsigned int *)(v2 + 100))
      {
        WebCore::CachedFrame::destroy(*(WebCore::CachedFrame **)(*(_QWORD *)(v2 + 88) + 8 * v11));
        if ((uint64_t)v11-- <= 0)
          goto LABEL_14;
      }
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x195B802ECLL);
    }
LABEL_14:
    v13 = *(_QWORD *)(v2 + 72);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v14 = *(WTF **)(v2 + 16);
    if (v14 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 704))(*(_QWORD *)(v2 + 16)) & 1) == 0)
    {
      ++*((_DWORD *)v14 + 2);
      WebCore::LocalFrame::clearTimers(v14, (WebCore::DocumentTimelinesController **)v1, v15);
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
      else
        --*((_DWORD *)v14 + 2);
    }
    WebCore::Document::removeAllEventListeners((WebCore::Document *)v1, v6);
    WebCore::Document::setBackForwardCacheState(v1, 0);
    WebCore::Document::willBeRemovedFromFrame((WebCore::Document *)v1, v16);
    this = (uint64_t *)WebCore::CachedFrame::clear(v2);
    do
    {
      v17 = __ldaxr(v8);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v8));
    if (!v18)
    {
      atomic_store(1u, v8);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v8;
      v29 = (uint64_t)v26;
      WTF::ensureOnMainThread();
      this = (uint64_t *)v29;
      v29 = 0;
      if (this)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::CachedFrame::setCachedFramePlatformData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CachedFrame::cachedFramePlatformData(WebCore::CachedFrame *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::CachedFrame::usedLegacyTLS(WebCore::CachedFrame ***this)
{
  uint64_t result;
  uint64_t v2;
  WebCore::CachedFrame **v3;
  uint64_t v4;
  WebCore::CachedFrame *v5;
  uint64_t v6;

  if (*this && *((_BYTE *)*this + 278))
    return 1;
  v2 = *((unsigned int *)this + 25);
  if (!(_DWORD)v2)
    return 0;
  v3 = this[11];
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = WebCore::CachedFrame::usedLegacyTLS(v5);
    if ((result & 1) != 0)
      break;
    v6 = v4;
    v4 -= 8;
  }
  while (v6);
  return result;
}

uint64_t WebCore::CachedFrame::hasInsecureContent(WebCore::Document **this, const WTF::URL *a2)
{
  WebCore::Document *v3;
  uint64_t result;
  uint64_t v5;
  WebCore::CachedFrame **v6;
  uint64_t v7;
  WebCore::CachedFrame *v8;
  uint64_t v9;

  v3 = *this;
  if (*this && (!WebCore::Document::isSecureContext(*this, a2) || *((_BYTE *)v3 + 273)))
    return 1;
  v5 = *((unsigned int *)this + 25);
  if (!(_DWORD)v5)
    return 0;
  v6 = (WebCore::CachedFrame **)this[11];
  v7 = 8 * v5 - 8;
  do
  {
    v8 = *v6++;
    result = WebCore::CachedFrame::hasInsecureContent(v8);
    if ((result & 1) != 0)
      break;
    v9 = v7;
    v7 -= 8;
  }
  while (v9);
  return result;
}

uint64_t WebCore::CachedFrame::wasPrivateRelayed(WebCore::CachedFrame *this)
{
  int v1;
  uint64_t v2;
  WebCore::CachedFrame **v3;
  uint64_t v4;
  WebCore::CachedFrame *v5;

  if (*(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 279))
  {
    LOBYTE(v1) = 1;
  }
  else
  {
    v2 = *((unsigned int *)this + 25);
    if ((_DWORD)v2)
    {
      v1 = 0;
      v3 = (WebCore::CachedFrame **)*((_QWORD *)this + 11);
      v4 = 8 * v2;
      do
      {
        v5 = *v3++;
        v1 |= WebCore::CachedFrame::wasPrivateRelayed(v5);
        v4 -= 8;
      }
      while (v4);
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return v1 & 1;
}

void WebCore::CachedPage::~CachedPage(WebCore::CachedPage *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  WebCore::CachedFrameBase *v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
    WebCore::CachedFrame::destroy(v3);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v13 = 8 * v4;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WebCore::CachedFrameBase *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    WebCore::CachedFrameBase::~CachedFrameBase(v6, a2);
    WTF::fastFree(v7, v8);
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

uint64_t WebCore::CachedPage::restore(WebCore::CachedPage *this, WebCore::Page *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  void *v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::BackForwardController *v37;
  _DWORD *v38;
  WebCore::HistoryItem *v39;
  _DWORD *v40;
  WTF *v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  void *v47;
  unsigned int v48;
  WebCore::Navigation *v49;
  void *v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  WTF *v74;
  unsigned int v75;
  WTF *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  WebCore::CachedFrameBase *v97;
  WTF *v98;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  WTF *v110;
  void *v111;
  WTF *v112;
  void *v113;
  WTF *v114;
  void *v115;
  bmalloc::api *v116;
  void *v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  WTF *v123;
  WTF *v124;
  unsigned int *v125;
  WebCore::Node *v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  _QWORD *v130;

  v4 = (unsigned int *)*((_QWORD *)a2 + 20);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  v8 = v4;
  if (*((_BYTE *)v4 + 144))
  {
    do
      v109 = __ldaxr(v5);
    while (__stlxr(v109 - 1, v5));
    if (v109 == 1)
    {
      atomic_store(1u, v5);
      v123 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = off_1E31FE290;
      *((_QWORD *)v123 + 1) = v5;
      v128 = v123;
      WTF::ensureOnMainThread();
      v124 = v128;
      v128 = 0;
      if (v124)
        (*(void (**)(WTF *))(*(_QWORD *)v124 + 8))(v124);
    }
    v8 = 0;
  }
  if (!*((_QWORD *)a2 + 2))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a2;
    v11 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v10;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v14 = *((_QWORD *)a2 + 2);
  do
    v15 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v15 + 1, (unsigned int *)v14));
  *(_BYTE *)(*(_QWORD *)(v14 + 8) + 1022) = 1;
  result = WebCore::CachedFrame::open(*((_QWORD *)this + 3));
  v18 = (int *)*((_QWORD *)a2 + 9);
  v19 = *v18;
  v20 = *v18 + 1;
  *v18 = v20;
  v21 = *((_QWORD *)v18 + 2);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0 || *(_BYTE *)(v22 + 144))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 1) + 8) + 160);
    if (*(_BYTE *)(v22 + 144))
    {
      if (v20)
      {
        *v18 = v19;
        goto LABEL_144;
      }
LABEL_186:
      __break(0xC471u);
      JUMPOUT(0x195B8104CLL);
    }
  }
  v23 = (unsigned int *)(v22 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  if (!*v18)
    goto LABEL_186;
  --*v18;
  v25 = *(_QWORD *)(v22 + 296);
  if (v25)
    *(_DWORD *)(v25 + 24) += 2;
  v126 = (WebCore::Node *)v25;
  v26 = *(WebCore::Node **)(v25 + 1248);
  if (v26)
  {
    *((_DWORD *)v26 + 6) += 2;
    if (v8)
      ++*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 37) + 3064) + 272);
    v27 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
    v28 = v27;
    if (v27)
    {
      ++*(_DWORD *)(v27 + 8);
      v29 = *(_BYTE *)(v27 + 315);
      *(_BYTE *)(v27 + 315) = 1;
      (*(void (**)(WebCore::Node *, _QWORD, _QWORD))(*(_QWORD *)v26 + 680))(v26, 0, 0);
      *(_BYTE *)(v28 + 315) = v29;
      if (v8)
      {
LABEL_26:
        v30 = *(_QWORD *)(*((_QWORD *)v8 + 37) + 3064);
        v31 = *(_DWORD *)(v30 + 28);
        --*(_DWORD *)(v30 + 272);
        *(_DWORD *)(v30 + 28) = v31 + 1;
        if (v31 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x195B81010);
        }
        *(_DWORD *)(v30 + 28) = v31;
      }
    }
    else
    {
      (*(void (**)(WebCore::Node *, _QWORD, _QWORD))(*(_QWORD *)v26 + 680))(v26, 0, 0);
      if (v8)
        goto LABEL_26;
    }
    if (v28)
    {
      if (*(_DWORD *)(v28 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      else
        --*(_DWORD *)(v28 + 8);
    }
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v26);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
  if (v8 && *((_BYTE *)this + 33))
    WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)v8);
  WebCore::Page::setNeedsRecalcStyleInAllFrames(a2);
  if (*((_BYTE *)this + 32))
    WebCore::Page::captionPreferencesChanged(a2);
  if (*((_BYTE *)this + 34))
  {
    v33 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
    if (v33)
    {
      v34 = (_DWORD *)v33;
      v36 = v33 + 64;
      v35 = *(_QWORD *)(v33 + 64);
      ++*(_DWORD *)(v33 + 8);
      (*(void (**)(uint64_t))(v35 + 264))(v33 + 64);
      if (*(_DWORD *)(v36 - 56) == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
      else
        v34[2] = *(_DWORD *)(v36 - 56) - 1;
    }
  }
  if ((*(_QWORD *)(*((_QWORD *)a2 + 14) + 688) & 0x4000) != 0 && *((_QWORD *)v126 + 87))
  {
    v37 = (WebCore::BackForwardController *)*((_QWORD *)a2 + 17);
    v38 = (_DWORD *)*((_QWORD *)v37 + 2);
    ++v38[2];
    (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v38 + 32))(&v128, v38, 0);
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
    v39 = v128;
    v128 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v39);
        WTF::fastFree(v110, v111);
      }
      else
      {
        --*(_DWORD *)v39;
      }
      v40 = (_DWORD *)*((_QWORD *)v37 + 2);
      ++v40[2];
      (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v40 + 32))(&v128, v40, 0);
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
      v41 = v128;
      v42 = (*(_DWORD *)v128)++;
      v128 = 0;
      v43 = v4;
      if (v42)
      {
        *(_DWORD *)v41 = v42;
      }
      else
      {
        WebCore::HistoryItem::~HistoryItem(v41);
        WTF::fastFree(v112, v113);
      }
      WebCore::BackForwardController::allItems(v37, (uint64_t)&v128);
      v44 = *((_QWORD *)v126 + 87);
      v45 = *(_QWORD *)(v44 + 216);
      if (!v45)
      {
        v45 = bmalloc::api::isoAllocate();
        *(_DWORD *)(v45 + 24) = 1;
        *(_QWORD *)(v45 + 8) = 0;
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)v45 = &unk_1E33A4FC0;
        v46 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v44);
        if (v46)
        {
          do
            v48 = __ldaxr(v46);
          while (__stlxr(v48 + 1, v46));
        }
        *(_QWORD *)(v45 + 32) = v46;
        *(_QWORD *)v45 = off_1E33FFF20;
        *(_BYTE *)(v45 + 40) = 0;
        *(_BYTE *)(v45 + 48) = 0;
        *(_OWORD *)(v45 + 56) = 0u;
        *(_OWORD *)(v45 + 72) = 0u;
        *(_OWORD *)(v45 + 82) = 0u;
        *(_QWORD *)(v45 + 112) = 0;
        *(_QWORD *)(v45 + 120) = 0;
        *(_QWORD *)(v45 + 104) = 0;
        v49 = *(WebCore::Navigation **)(v44 + 216);
        *(_QWORD *)(v44 + 216) = v45;
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 1)
          {
            WebCore::Navigation::~Navigation(v49, v47);
            bmalloc::api::isoDeallocate(v116, v117);
            v45 = *(_QWORD *)(v44 + 216);
          }
          else
          {
            --*((_DWORD *)v49 + 6);
          }
        }
      }
      WebCore::Navigation::updateForReactivation((WebCore::Navigation *)v45, (uint64_t)&v128, (uint64_t)v41);
      WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v50);
      if (*(_DWORD *)v41 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v41);
        WTF::fastFree(v114, v115);
      }
      else
      {
        --*(_DWORD *)v41;
      }
      v4 = v43;
    }
  }
  v125 = v4;
  v51 = (_QWORD *)*((_QWORD *)a2 + 20);
  v52 = (unsigned int *)(v51 + 1);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  v128 = 0;
  v129 = 0;
  v54 = v51[9];
  if (v54)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v54 + 48) + 8);
    do
    {
      v56 = v55;
      v55 = *(_QWORD *)(v55 + 88);
    }
    while (v55);
  }
  else
  {
    v57 = v51[7];
    if (!v57 || (v56 = *(_QWORD *)(v57 + 8)) == 0)
    {
      v58 = *(_QWORD *)(v51[6] + 8);
      do
      {
        v56 = v58;
        v58 = *(_QWORD *)(v58 + 88);
      }
      while (v58);
    }
  }
  do
  {
    if (!*(_BYTE *)(v56 + 144))
    {
      v59 = (unsigned int *)(v56 + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 + 1, v59));
      v127 = v56;
      LODWORD(v61) = HIDWORD(v129);
      if (HIDWORD(v129) == (_DWORD)v129)
      {
        v62 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v128, HIDWORD(v129) + 1, (unint64_t)&v127);
        v61 = HIDWORD(v129);
        v63 = v128;
        v64 = *(_QWORD *)v62;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v63 + v61) = v64;
      }
      else
      {
        v127 = 0;
        *((_QWORD *)v128 + HIDWORD(v129)) = v56;
      }
      HIDWORD(v129) = v61 + 1;
      v65 = v127;
      v127 = 0;
      if (v65)
      {
        v66 = (unsigned int *)(v65 + 8);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, v66);
          v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v72 = off_1E31FE290;
          v72[1] = v66;
          v130 = v72;
          WTF::ensureOnMainThread();
          v73 = v130;
          v130 = 0;
          if (v73)
            (*(void (**)(_QWORD *))(*v73 + 8))(v73);
        }
      }
    }
    v69 = *(_QWORD *)(v56 + 72);
    if (v69)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(v69 + 48) + 8);
      do
      {
        v56 = v70;
        v70 = *(_QWORD *)(v70 + 88);
      }
      while (v70);
    }
    else
    {
      v71 = *(_QWORD *)(v56 + 56);
      if (!v71)
        break;
      v56 = *(_QWORD *)(v71 + 8);
    }
  }
  while (v56);
  v74 = v128;
  v75 = HIDWORD(v129);
  if (HIDWORD(v129))
  {
    if (!v51)
      goto LABEL_117;
    v76 = (WTF *)((char *)v128 + 8 * HIDWORD(v129));
    do
    {
      v77 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v74 + 48) + 8);
      v78 = v77[3];
      if (v78)
        v78 = *(_QWORD *)(v78 + 8);
      v79 = v51[3];
      if (v79)
        v79 = *(_QWORD *)(v79 + 8);
      if (v78 == v79)
      {
        if (v77 == v51)
        {
LABEL_101:
          v80 = *(_QWORD *)(*(_QWORD *)v74 + 296);
          if (v80)
          {
            *(_DWORD *)(v80 + 24) += 2;
            WebCore::Document::setVisibilityHiddenDueToDismissal((_BYTE *)v80, 0);
            WebCore::Document::dispatchPageshowEvent((WebCore::EventTarget *)v80, 1);
            if (*(_DWORD *)(v80 + 24) == 2)
            {
              if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v80);
            }
            else
            {
              *(_DWORD *)(v80 + 24) -= 2;
            }
          }
        }
        else
        {
          while (1)
          {
            v81 = v77[7];
            if (!v81)
              break;
            v77 = *(_QWORD **)(v81 + 8);
            if (v77 == v51 || v77 == 0)
            {
              if (v77)
                goto LABEL_101;
              break;
            }
          }
        }
      }
      v74 = (WTF *)((char *)v74 + 8);
    }
    while (v74 != v76);
    v74 = v128;
    v75 = HIDWORD(v129);
    if (HIDWORD(v129))
    {
LABEL_117:
      v83 = (WTF *)((char *)v74 + 8 * v75);
      do
      {
        v84 = *(_QWORD *)v74;
        *(_QWORD *)v74 = 0;
        if (v84)
        {
          v85 = (unsigned int *)(v84 + 8);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v85);
            v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v88 = off_1E31FE290;
            v88[1] = v85;
            v130 = v88;
            WTF::ensureOnMainThread();
            v89 = v130;
            v130 = 0;
            if (v89)
              (*(void (**)(_QWORD *))(*v89 + 8))(v89);
          }
        }
        v74 = (WTF *)((char *)v74 + 8);
      }
      while (v74 != v83);
      v74 = v128;
    }
  }
  if (v74)
  {
    v128 = 0;
    LODWORD(v129) = 0;
    WTF::fastFree(v74, v32);
  }
  if (v51)
  {
    do
    {
      v90 = __ldaxr(v52);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v52));
    if (!v91)
    {
      atomic_store(1u, v52);
      v118 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = off_1E31FE290;
      *((_QWORD *)v118 + 1) = v52;
      v128 = v118;
      WTF::ensureOnMainThread();
      v119 = v128;
      v128 = 0;
      if (v119)
        (*(void (**)(WTF *))(*(_QWORD *)v119 + 8))(v119);
    }
  }
  v92 = *((_QWORD *)this + 5);
  v4 = v125;
  if (v8)
  {
    v93 = *((unsigned int *)this + 13);
    if ((_DWORD)v93)
    {
      v94 = 8 * v93;
      do
      {
        v95 = *((_QWORD *)v8 + 35);
        ++*(_DWORD *)v95;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v95 + 16) + 1152))(*(_QWORD *)(v95 + 16), v92);
        if (!*(_DWORD *)v95)
        {
          __break(0xC471u);
          JUMPOUT(0x195B80EA8);
        }
        --*(_DWORD *)v95;
        v92 += 8;
        v94 -= 8;
      }
      while (v94);
    }
  }
  WebCore::CachedFrame::clear(*((_QWORD *)this + 3));
  v97 = (WebCore::CachedFrameBase *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v97)
  {
    WebCore::CachedFrameBase::~CachedFrameBase(v97, v96);
    WTF::fastFree(v98, v99);
  }
  *((_WORD *)this + 16) = 0;
  *((_BYTE *)this + 34) = 0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 10, 0);
  result = (uint64_t)v126;
  if (v126)
  {
    if (*((_DWORD *)v126 + 6) == 2)
    {
      if ((*((_WORD *)v126 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v126);
    }
    else
    {
      *((_DWORD *)v126 + 6) -= 2;
    }
  }
  do
  {
    v100 = __ldaxr(v23);
    v101 = v100 - 1;
  }
  while (__stlxr(v101, v23));
  if (!v101)
  {
    atomic_store(1u, v23);
    v120 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v120 = off_1E31FE290;
    *((_QWORD *)v120 + 1) = v23;
    v128 = v120;
    WTF::ensureOnMainThread();
    result = (uint64_t)v128;
    v128 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
LABEL_144:
  *(_BYTE *)(*(_QWORD *)(v14 + 8) + 1022) = 0;
  do
  {
    v102 = __ldaxr((unsigned int *)v14);
    v103 = v102 - 1;
  }
  while (__stlxr(v103, (unsigned int *)v14));
  if (v103)
  {
    if (!v8)
      goto LABEL_151;
  }
  else
  {
    atomic_store(1u, (unsigned int *)v14);
    result = WTF::fastFree((WTF *)v14, v17);
    if (!v8)
      goto LABEL_151;
  }
  v104 = v8 + 2;
  do
  {
    v105 = __ldaxr(v104);
    v106 = v105 - 1;
  }
  while (__stlxr(v106, v104));
  if (!v106)
  {
    atomic_store(1u, v104);
    v121 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v121 = off_1E31FE290;
    *((_QWORD *)v121 + 1) = v104;
    v128 = v121;
    WTF::ensureOnMainThread();
    result = (uint64_t)v128;
    v128 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
LABEL_151:
  if (v4)
  {
    do
    {
      v107 = __ldaxr(v5);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v5));
    if (!v108)
    {
      atomic_store(1u, v5);
      v122 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = off_1E31FE290;
      *((_QWORD *)v122 + 1) = v5;
      v128 = v122;
      WTF::ensureOnMainThread();
      result = (uint64_t)v128;
      v128 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::HistoryItem::generateSequenceNumber(WebCore::HistoryItem *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  double v4;

  v1 = &qword_1ECE83000;
  if (_MergedGlobals_180 == 1)
  {
    v2 = qword_1ECE83388;
  }
  else
  {
    WTF::WallTime::now(this);
    v1 = &qword_1ECE83000;
    v2 = (uint64_t)(v4 * 1000.0 * 1000.0);
    _MergedGlobals_180 = 1;
  }
  result = v2 + 1;
  v1[113] = v2 + 1;
  return result;
}

uint64_t WebCore::HistoryItem::HistoryItem(uint64_t IdentifierInternal, uint64_t a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, uint64_t a6)
{
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  char **v28;
  char *v29;

  v7 = IdentifierInternal;
  *(_DWORD *)IdentifierInternal = 1;
  *(_QWORD *)(IdentifierInternal + 8) = 0;
  v8 = *a3;
  if (*a3)
    *v8 += 2;
  *(_QWORD *)(IdentifierInternal + 16) = v8;
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *(_BYTE *)(IdentifierInternal + 64) = 0;
  *(_QWORD *)(IdentifierInternal + 32) = 0;
  *(_QWORD *)(IdentifierInternal + 40) = 0;
  *(_QWORD *)(IdentifierInternal + 24) = v9;
  *(_BYTE *)(IdentifierInternal + 48) = 0;
  v10 = *a4;
  if (*a4)
    *v10 += 2;
  *(_QWORD *)(IdentifierInternal + 72) = v10;
  v11 = *a5;
  if (*a5)
    *v11 += 2;
  *(_QWORD *)(IdentifierInternal + 80) = v11;
  *(_QWORD *)(IdentifierInternal + 88) = 0;
  *(_DWORD *)(IdentifierInternal + 96) = 0;
  *(_QWORD *)(IdentifierInternal + 104) = 0;
  *(_QWORD *)(IdentifierInternal + 112) = 0;
  *(_BYTE *)(IdentifierInternal + 120) = 0;
  *(_QWORD *)(IdentifierInternal + 128) = 0;
  *(_QWORD *)(IdentifierInternal + 136) = 0;
  *(_DWORD *)(IdentifierInternal + 144) = 0;
  *(_BYTE *)(IdentifierInternal + 148) = 1;
  v12 = (unint64_t)&qword_1ECE83000;
  v13 = &qword_1ECE83000;
  if (_MergedGlobals_180 != 1)
    goto LABEL_19;
  v14 = qword_1ECE83388;
  while (1)
  {
    *(_OWORD *)(v7 + 168) = 0u;
    v13[113] = v14 + 2;
    *(_QWORD *)(v7 + 152) = v14 + 1;
    *(_QWORD *)(v7 + 160) = v14 + 2;
    *(_BYTE *)(v7 + 284) = 0;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_BYTE *)(v7 + 280) = 0;
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(v7 + 288) = _Q0;
    *(_OWORD *)(v7 + 304) = _Q0;
    *(_OWORD *)(v7 + 320) = _Q0;
    *(_WORD *)(v7 + 336) = 0;
    *(_QWORD *)(v7 + 344) = 0;
    if (*(_BYTE *)(a6 + 16))
      break;
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    v13 = (uint64_t *)IdentifierInternal;
    v20 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v20 != -1)
    {
      v29 = &v27;
      v28 = &v29;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    v12 = WebCore::Process::globalIdentifier;
    if ((WebCore::Process::globalIdentifier & 1) != 0)
    {
      v21 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v7 + 352) = v13;
      *(_QWORD *)(v7 + 360) = v21;
      goto LABEL_16;
    }
    __break(1u);
LABEL_19:
    v26 = a6;
    v24 = v12;
    IdentifierInternal = WTF::WallTime::now((WTF::WallTime *)IdentifierInternal);
    a6 = v26;
    v14 = (uint64_t)(v25 * 1000.0 * 1000.0);
    *(_BYTE *)(v24 + 896) = 1;
  }
  *(_OWORD *)(v7 + 352) = *(_OWORD *)a6;
LABEL_16:
  *(_QWORD *)(v7 + 368) = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)IdentifierInternal);
  *(_QWORD *)(v7 + 376) = v22;
  *(_BYTE *)(v7 + 384) = 0;
  *(_BYTE *)(v7 + 464) = 0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(v7 + 472) = a2;
  return v7;
}

void WebCore::HistoryItem::~HistoryItem(WebCore::HistoryItem *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  const void *v4;
  WebCore::CachedPage *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::FormData *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::HistoryItem *v27;
  bmalloc::api *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;

  v3 = (_DWORD *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  if (*((_BYTE *)this + 464))
    WebCore::PolicyContainer::~PolicyContainer((WebCore::HistoryItem *)((char *)this + 384), a2);
  v4 = (const void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WebCore::CachedPage *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    WebCore::CachedPage::~CachedPage(v5, a2);
    if (*(_DWORD *)v6)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WebCore::FormData *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::FormData::~FormData(v8, a2);
      bmalloc::api::isoDeallocate(v28, v29);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v9, a2);
      WTF::fastFree(v38, v39);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v12, a2);
      WTF::fastFree(v40, v41);
    }
  }
  v15 = *((unsigned int *)this + 35);
  v16 = (WTF *)*((_QWORD *)this + 16);
  if ((_DWORD)v15)
  {
    v26 = 8 * v15;
    do
    {
      v27 = *(WebCore::HistoryItem **)v16;
      *(_QWORD *)v16 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v27);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      v16 = (WTF *)((char *)v16 + 8);
      v26 -= 8;
    }
    while (v26);
    v16 = (WTF *)*((_QWORD *)this + 16);
  }
  if (v16)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((unsigned int *)this + 29);
  if ((_DWORD)v17)
  {
    v32 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    v33 = 8 * v17;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  v18 = (WTF *)*((_QWORD *)this + 13);
  if (v18)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *((_QWORD *)this + 1);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 0;
    v35 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

WebCore::HistoryItem *WebCore::HistoryItem::HistoryItem(WebCore::HistoryItem *this, const WebCore::HistoryItem *a2)
{
  WebCore::HistoryItem *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WebCore::HistoryItem *v12;
  unint64_t v13;
  const WebCore::HistoryItem *v14;
  WebCore::HistoryItem *v15;
  uint64_t v16;
  WebCore::HistoryItem *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::HistoryItem *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v31;
  uint64_t v32;
  char v34;

  v3 = this;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 2) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 3) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 4) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 5) = v7;
  v8 = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 3) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 9) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 10);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 10) = v10;
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  v11 = *((unsigned int *)a2 + 35);
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
      goto LABEL_31;
    this = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v3 + 34) = v11;
    *((_QWORD *)v3 + 16) = this;
    if (*((_DWORD *)a2 + 35))
    {
      v12 = this;
      v13 = 0;
      do
      {
        v14 = *(const WebCore::HistoryItem **)(*((_QWORD *)a2 + 16) + 8 * v13);
        v15 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x1E0);
        this = (WebCore::HistoryItem *)WebCore::HistoryItem::HistoryItem(v15, v14);
        *((_QWORD *)v12 + v13) = this;
        *((_DWORD *)v3 + 35) = ++v13;
      }
      while (v13 < *((unsigned int *)a2 + 35));
    }
  }
  *((_DWORD *)v3 + 36) = *((unsigned __int16 *)a2 + 72);
  *((_BYTE *)v3 + 148) = 1;
  *(_OWORD *)((char *)v3 + 152) = *(_OWORD *)((char *)a2 + 152);
  *((_QWORD *)v3 + 21) = 0;
  *((_QWORD *)v3 + 22) = 0;
  v16 = *((_QWORD *)a2 + 23);
  if (v16)
  {
    this = (WebCore::HistoryItem *)bmalloc::api::isoAllocate();
    v17 = this;
    *(_DWORD *)this = 1;
    v18 = *(unsigned int *)(v16 + 20);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 5) = v18;
    if (!(_DWORD)v18)
    {
LABEL_26:
      *((_QWORD *)v17 + 3) = *(_QWORD *)(v16 + 24);
      *((_BYTE *)v17 + 32) = 0;
      *((_BYTE *)v17 + 64) = 0;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_BYTE *)v17 + 56) = 0;
      goto LABEL_28;
    }
    if (v18 < 0x5555556)
    {
      v19 = 48 * v18;
      this = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)(48 * v18));
      *((_DWORD *)v17 + 4) = (v19 & 0xFFFFFFF0) / 0x30;
      *((_QWORD *)v17 + 1) = this;
      v20 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v20)
      {
        v21 = this;
        v22 = *(_QWORD *)(v16 + 8);
        v23 = 48 * v20;
        do
        {
          *(_BYTE *)v21 = 0;
          *((_DWORD *)v21 + 10) = -1;
          v24 = *(unsigned int *)(v22 + 40);
          if ((_DWORD)v24 != -1)
          {
            this = (WebCore::HistoryItem *)((uint64_t (*)(char *, WebCore::HistoryItem *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v24])(&v34, v21, v22);
            *((_DWORD *)v21 + 10) = v24;
          }
          v21 = (WebCore::HistoryItem *)((char *)v21 + 48);
          v22 += 48;
          v23 -= 48;
        }
        while (v23);
      }
      goto LABEL_26;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x195B81940);
  }
  v17 = 0;
LABEL_28:
  *((_QWORD *)v3 + 23) = v17;
  v25 = (_DWORD *)*((_QWORD *)a2 + 24);
  if (v25)
    *v25 += 2;
  *((_QWORD *)v3 + 24) = v25;
  *(_OWORD *)((char *)v3 + 200) = 0u;
  *(_OWORD *)((char *)v3 + 216) = 0u;
  *(_OWORD *)((char *)v3 + 232) = 0u;
  *(_OWORD *)((char *)v3 + 244) = 0u;
  *(_OWORD *)((char *)v3 + 260) = *(_OWORD *)((char *)a2 + 260);
  *((_DWORD *)v3 + 69) = *((_DWORD *)a2 + 69);
  *((_BYTE *)v3 + 280) = *((_BYTE *)a2 + 280);
  *((_BYTE *)v3 + 284) = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *((_OWORD *)v3 + 18) = _Q0;
  *((_OWORD *)v3 + 19) = _Q0;
  *((_OWORD *)v3 + 20) = _Q0;
  *((_WORD *)v3 + 168) = 0;
  *((_QWORD *)v3 + 43) = 0;
  *((_OWORD *)v3 + 22) = *((_OWORD *)a2 + 22);
  *((_QWORD *)v3 + 46) = WTF::UUID::generateWeakRandomUUIDVersion4(this);
  *((_QWORD *)v3 + 47) = v31;
  *((_BYTE *)v3 + 384) = 0;
  *((_BYTE *)v3 + 464) = 0;
  v32 = *((_QWORD *)a2 + 59);
  ++*(_DWORD *)(v32 + 8);
  *((_QWORD *)v3 + 59) = v32;
  return v3;
}

WebCore::HistoryItem *WebCore::HistoryItem::copy@<X0>(WebCore::HistoryItem *this@<X0>, WebCore::HistoryItem **a2@<X8>)
{
  WebCore::HistoryItem *v4;
  WebCore::HistoryItem *result;

  v4 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x1E0);
  result = WebCore::HistoryItem::HistoryItem(v4, this);
  *a2 = result;
  return result;
}

unsigned int *WebCore::HistoryItem::reset(WebCore::HistoryItem *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  void *v12;
  WebCore::FormData *v13;
  WTF::StringImpl *v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::AtomString::operator=((WTF::StringImpl **)this + 5, MEMORY[0x1E0CBF2F8]);
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      v8 = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_WORD *)this + 72) = 0;
  *((_QWORD *)this + 19) = WebCore::HistoryItem::generateSequenceNumber(v8);
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v10, v9);
  v11 = (unsigned int *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v11)
    v11 = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v11, v9);
  *((_QWORD *)this + 20) = WebCore::HistoryItem::generateSequenceNumber((WebCore::HistoryItem *)v11);
  v13 = (WebCore::FormData *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
    WTF::RefCounted<WebCore::FormData>::deref(v13, v12);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 32, 0);
}

uint64_t WebCore::HistoryItem::alternateTitle(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 80;
}

BOOL WebCore::HistoryItem::hasCachedPageExpired(WebCore::HistoryItem *this)
{
  uint64_t v1;
  double v2;

  v1 = *((_QWORD *)this + 25);
  if (!v1)
    return 0;
  WTF::MonotonicTime::now(this);
  return v2 > *(double *)(v1 + 16);
}

WTF::StringImpl *WebCore::HistoryItem::originalURL@<X0>(WebCore::HistoryItem *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[5];

  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  MEMORY[0x19AEA52F8](a2, v6, (char *)this + 24, 0);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HistoryItem::setAlternateTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

unsigned int *WebCore::HistoryItem::clearDocumentState(unsigned int *this, void *a2)
{
  WTF **v2;
  WTF *v3;
  WTF **v4;
  unsigned int *v5;

  if (this[28])
  {
    v2 = (WTF **)(this + 26);
    if (this[29])
    {
      v4 = (WTF **)(this + 26);
      v5 = this;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(this + 26, 0);
      v2 = v4;
      this = v5;
    }
    v3 = *v2;
    if (v3)
    {
      *((_QWORD *)this + 13) = 0;
      this[28] = 0;
      return (unsigned int *)WTF::fastFree(v3, a2);
    }
  }
  return this;
}

uint64_t WebCore::HistoryItem::setOriginalURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setReferrer(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setTarget(WebCore::HistoryItem *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setScrollPosition(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 88) = *a2;
  return result;
}

uint64_t WebCore::HistoryItem::clearScrollPosition(uint64_t this)
{
  *(_QWORD *)(this + 88) = 0;
  return this;
}

uint64_t WebCore::HistoryItem::setShouldRestoreScrollPosition(WebCore::HistoryItem *this, char a2)
{
  *((_BYTE *)this + 148) = a2;
  return (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), this);
}

uint64_t WebCore::HistoryItem::setPageScaleFactor(uint64_t this, float a2)
{
  *(float *)(this + 96) = a2;
  return this;
}

unsigned int *WebCore::HistoryItem::setDocumentState(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 104), a2);
}

uint64_t WebCore::HistoryItem::setShouldOpenExternalURLsPolicy(uint64_t result, char a2)
{
  *(_BYTE *)(result + 120) = a2;
  return result;
}

uint64_t WebCore::HistoryItem::isTargetItem(WebCore::HistoryItem *this)
{
  return *((unsigned __int8 *)this + 145);
}

uint64_t WebCore::HistoryItem::setIsTargetItem(uint64_t this, char a2)
{
  *(_BYTE *)(this + 145) = a2;
  return this;
}

uint64_t WebCore::HistoryItem::setStateObject(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  v3 = *a2;
  *a2 = 0;
  v4 = *(unsigned int **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 16))(*(_QWORD *)(a1 + 472), a1);
}

unsigned int **WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

unsigned int **WebCore::HistoryItem::setNavigationAPIStateObject(uint64_t a1, unsigned int **a2)
{
  return WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=((unsigned int **)(a1 + 176), a2);
}

uint64_t *WebCore::HistoryItem::addChildItem(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 128);
  v5 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 136))
  {
    result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 140);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 140) = v5 + 1;
  return result;
}

uint64_t WebCore::HistoryItem::setChildItem(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 140);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 128);
    v4 = *(_QWORD *)a2;
    v5 = *(unsigned int *)(result + 140);
    while (*(_QWORD *)(*v3 + 40) != *(_QWORD *)(*(_QWORD *)a2 + 40))
    {
      ++v3;
      if (!--v5)
        goto LABEL_9;
    }
    *(_BYTE *)(v4 + 145) = *(_BYTE *)(*v3 + 145);
    *(_QWORD *)a2 = 0;
    result = *v3;
    *v3 = v4;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)result);
        return WTF::fastFree(v6, v7);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  else
  {
LABEL_9:
    if ((_DWORD)v2 == *(_DWORD *)(result + 136))
    {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(result + 128, a2);
    }
    else
    {
      v8 = *(_QWORD *)(result + 128);
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v8 + 8 * v2) = v9;
      *(_DWORD *)(result + 140) = v2 + 1;
    }
  }
  return result;
}

uint64_t WebCore::HistoryItem::childItemWithTarget(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 140);
  if (!(_DWORD)v2)
    return 0;
  for (i = *(uint64_t **)(a1 + 128); ; ++i)
  {
    result = *i;
    if (*(_QWORD *)(*i + 40) == *a2)
      break;
    if (!--v2)
      return 0;
  }
  return result;
}

uint64_t WebCore::HistoryItem::childItemWithFrameID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 140);
  if (!(_DWORD)v3)
    return 0;
  for (i = *(uint64_t **)(a1 + 128); ; ++i)
  {
    result = *i;
    if (*(_BYTE *)(*i + 64))
    {
      if (*(_QWORD *)(result + 48) == a2 && *(_QWORD *)(result + 56) == a3)
        break;
    }
    if (!--v3)
      return 0;
  }
  return result;
}

uint64_t WebCore::HistoryItem::shouldDoSameDocumentNavigationTo(WebCore::HistoryItem *this, WebCore::HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  char v27;
  unsigned int v28;
  _QWORD v29[13];

  if (this == a2)
    return 0;
  v29[11] = v2;
  v29[12] = v3;
  if (*((_QWORD *)this + 21) | *((_QWORD *)a2 + 21))
    return *((_QWORD *)this + 20) == *((_QWORD *)a2 + 20);
  v29[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v29);
  MEMORY[0x19AEA52F8](&v26, v29, (char *)this + 16, 0);
  v7 = (WTF::StringImpl *)v29[0];
  v29[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if ((v27 & 1) != 0 && v26 && *((_DWORD *)v26 + 1) > v28)
  {
    v8 = 0;
    goto LABEL_18;
  }
  v29[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v29);
  MEMORY[0x19AEA52F8](&v23, v29, (char *)a2 + 16, 0);
  v11 = (WTF::StringImpl *)v29[0];
  v29[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v23;
  if ((v24 & 1) == 0)
  {
    v17 = 0;
LABEL_32:
    v23 = 0;
    if (!v12)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (!v23)
  {
    v17 = 0;
    goto LABEL_37;
  }
  if (*((_DWORD *)v23 + 1) > v25)
  {
    v8 = 1;
LABEL_18:
    v29[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v29);
    MEMORY[0x19AEA52F8](&v22, v29, (char *)this + 16, 0);
    v14 = (WTF::StringImpl *)v29[0];
    v29[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v29[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v29);
    MEMORY[0x19AEA52F8](&v21, v29, (char *)a2 + 16, 0);
    v16 = (WTF::StringImpl *)v29[0];
    v29[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = WTF::equalIgnoringFragmentIdentifier();
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v10);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v10);
        if (!v8)
          goto LABEL_37;
        goto LABEL_31;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (!v8)
      goto LABEL_37;
LABEL_31:
    v12 = v23;
    goto LABEL_32;
  }
  v17 = 0;
  v23 = 0;
LABEL_35:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v10);
  else
    *(_DWORD *)v12 -= 2;
LABEL_37:
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v10);
      if (v17)
        return *((_QWORD *)this + 20) == *((_QWORD *)a2 + 20);
      return WebCore::HistoryItem::hasSameDocumentTree(this, a2);
    }
    *(_DWORD *)v20 -= 2;
  }
  if (v17)
    return *((_QWORD *)this + 20) == *((_QWORD *)a2 + 20);
  return WebCore::HistoryItem::hasSameDocumentTree(this, a2);
}

uint64_t WebCore::HistoryItem::hasSameDocumentTree(WebCore::HistoryItem *this, WebCore::HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::HistoryItem **v5;
  WebCore::HistoryItem *v6;
  uint64_t v7;
  WebCore::HistoryItem **i;
  uint64_t result;
  BOOL v10;

  if (*((_QWORD *)this + 20) != *((_QWORD *)a2 + 20))
    return 0;
  v2 = *((unsigned int *)this + 35);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 35))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v3 = 0;
  v4 = *((_QWORD *)this + 16);
  v5 = (WebCore::HistoryItem **)*((_QWORD *)a2 + 16);
  do
  {
    v6 = *(WebCore::HistoryItem **)(v4 + 8 * v3);
    v7 = v2;
    for (i = v5; *((_QWORD *)*i + 20) != *((_QWORD *)v6 + 20); ++i)
    {
      if (!--v7)
        return 0;
    }
    result = WebCore::HistoryItem::hasSameDocumentTree(v6, *i);
    ++v3;
    if ((_DWORD)result)
      v10 = v3 == v2;
    else
      v10 = 1;
  }
  while (!v10);
  return result;
}

uint64_t WebCore::HistoryItem::formContentType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 192);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

WebCore::FormData *WebCore::HistoryItem::setFormData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::FormData *result;

  v3 = *a2;
  *a2 = 0;
  result = *(WebCore::FormData **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v3;
  if (result)
    return WTF::RefCounted<WebCore::FormData>::deref(result, a2);
  return result;
}

WTF::StringImpl *WebCore::HistoryItem::setFormContentType(WebCore::HistoryItem *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HistoryItem::isCurrentDocument(WebCore::HistoryItem *this, WebCore::Document *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[5];

  v10[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v10);
  MEMORY[0x19AEA52F8](&v9, v10, (char *)this + 16, 0);
  v4 = v10[0];
  v10[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v6 = WTF::equalIgnoringFragmentIdentifier();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::canCacheFrame(_QWORD *a1, void (***a2)(_QWORD, _QWORD, _QWORD, _QWORD), int a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WebCore::Quirks *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t (*v23)();
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  const WebCore::HTTPHeaderMap *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[25];

  v6 = a1[35];
  ++*(_DWORD *)v6;
  if (*(_QWORD **)(a1[16] + 8) == a1)
  {
    if ((*(_DWORD *)(v6 + 64) - 1) < 2)
    {
LABEL_10:
      LOBYTE(v10) = 0;
      goto LABEL_134;
    }
  }
  else if (!*(_BYTE *)(v6 + 80))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, &v73, v76, 0);
    v8 = v73;
    v73 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    goto LABEL_10;
  }
  v11 = a1[37];
  if (!v11)
    goto LABEL_10;
  *(_DWORD *)(v11 + 24) += 2;
  if (*(_BYTE *)(v11 + 3433) || (v12 = *(_QWORD *)(v11 + 528)) == 0 || !*(_QWORD *)(v12 + 8))
  {
LABEL_13:
    LOBYTE(v10) = 0;
    goto LABEL_132;
  }
  v13 = *(_QWORD *)(v6 + 88);
  if (!v13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, &v73, v76, 0);
    v70 = v73;
    v73 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v69);
      else
        *(_DWORD *)v70 -= 2;
    }
    v71 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v69);
      else
        *(_DWORD *)v71 -= 2;
    }
    goto LABEL_13;
  }
  ++*(_DWORD *)(v13 + 24);
  if ((*(_BYTE *)(v13 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v13 + 872));
    *(_BYTE *)(v13 + 1056) |= 1u;
  }
  v14 = *(WTF::StringImpl **)(v13 + 872);
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = *(_QWORD *)(v6 + 96);
  if (v15)
  {
    v16 = (WTF::StringImpl **)(v15 + 872);
    if ((*(_BYTE *)(v15 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v15 + 872));
      v16 = (WTF::StringImpl **)(v15 + 872);
      *(_BYTE *)(v15 + 1056) |= 1u;
    }
    v17 = *v16;
    if (v17)
      *(_DWORD *)v17 += 2;
    v73 = v17;
    v18 = *(_OWORD *)(v15 + 896);
    v74 = *(_OWORD *)(v15 + 880);
    v75 = v18;
  }
  else
  {
    v73 = 0;
    WTF::URL::invalidate((WTF::URL *)&v73);
  }
  v10 = 1;
  if (*(_QWORD **)(a1[16] + 8) == a1)
  {
    v19 = *(WebCore::Quirks **)(v11 + 688);
    if (!v19)
      v19 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v11);
    if (WebCore::Quirks::shouldBypassBackForwardCache(v19))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (**a2)(a2, v76, &v72, 0);
      v21 = *(WTF::StringImpl **)v76;
      *(_QWORD *)v76 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v72;
      v72 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v20);
        else
          *(_DWORD *)v22 -= 2;
      }
      v10 = 0;
    }
  }
  if (*(_QWORD *)(v13 + 360))
    v23 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    v24 = *(_QWORD *)(v13 + 368);
    if (v24)
    {
      if (*(_DWORD *)(v24 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (**a2)(a2, v76, &v72, 0);
        v66 = *(WTF::StringImpl **)v76;
        *(_QWORD *)v76 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v65);
          else
            *(_DWORD *)v66 -= 2;
        }
        v67 = v72;
        v72 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, v65);
          else
            *(_DWORD *)v67 -= 2;
        }
        v10 = 0;
      }
    }
  }
  if (*(_QWORD **)(a1[16] + 8) == a1 && WTF::URL::protocolIs())
  {
    if ((*(_WORD *)(v13 + 1504) & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit(v13 + 1272, 1);
      WebCore::parseCacheControlDirectives((unsigned int *)(v13 + 1352), v68, (int64x2_t *)v76);
      *(_OWORD *)(v13 + 1472) = *(_OWORD *)v76;
      *(_OWORD *)(v13 + 1481) = *(_OWORD *)&v76[9];
      *(_WORD *)(v13 + 1504) |= 1u;
    }
    if ((*(_BYTE *)(v13 + 1496) & 2) != 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (**a2)(a2, v76, &v72, 0);
      v26 = *(WTF::StringImpl **)v76;
      *(_QWORD *)v76 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v72;
      v72 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v25);
        else
          *(_DWORD *)v27 -= 2;
      }
      v10 = 0;
    }
  }
  v28 = *(_QWORD **)(a1[16] + 8);
  if (v28 != a1)
  {
LABEL_57:
    if (v28 != a1)
      goto LABEL_69;
    goto LABEL_60;
  }
  if (!*(_QWORD *)(a1[23] + 16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v63 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v62);
      else
        *(_DWORD *)v63 -= 2;
    }
    v64 = v72;
    v72 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v62);
      else
        *(_DWORD *)v64 -= 2;
    }
    v10 = 0;
    v28 = *(_QWORD **)(a1[16] + 8);
    goto LABEL_57;
  }
LABEL_60:
  v29 = a1[36];
  if (v29 && !*(_BYTE *)(v29 + 1375))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v31 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v72;
    v72 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    v10 = 0;
  }
LABEL_69:
  if (*(_BYTE *)(v6 + 152))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v34 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v72;
    v72 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v33);
      else
        *(_DWORD *)v35 -= 2;
    }
    v10 = 0;
  }
  if (*(_BYTE *)(v13 + 3548)
    || (v36 = *(_QWORD *)(v13 + 88)) != 0 && *(_DWORD *)(v36 - 12)
    || (v61 = *(_QWORD *)(v13 + 104)) != 0 && *(_DWORD *)(v61 - 12))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v38 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v72;
    v72 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v37);
      else
        *(_DWORD *)v39 -= 2;
    }
    v10 = 0;
  }
  if (*(_BYTE *)(v13 + 3538))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v41 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v40);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v72;
    v72 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v40);
      else
        *(_DWORD *)v42 -= 2;
    }
    v10 = 0;
  }
  v43 = *(_QWORD *)(v13 + 2872);
  if (*(_QWORD *)(v43 + 40) || (v47 = *(_QWORD *)(v43 + 48)) != 0 && *(_QWORD *)(v47 + 8))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v45 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v72;
    v72 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v44);
      else
        *(_DWORD *)v46 -= 2;
    }
    v10 = 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 848))(*(_QWORD *)(v6 + 16)) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (**a2)(a2, v76, &v72, 0);
    v49 = *(WTF::StringImpl **)v76;
    *(_QWORD *)v76 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v72;
    v72 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v48);
      else
        *(_DWORD *)v50 -= 2;
    }
    v10 = 0;
  }
  v51 = a1[11];
  if (v51)
  {
    v52 = (a3 + 1);
    do
    {
      if (!*(_BYTE *)(v51 + 144))
      {
        v53 = (unsigned int *)(v51 + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 + 1, v53));
        v10 &= WebCore::canCacheFrame(v51, a2, v52);
        do
        {
          v55 = __ldaxr(v53);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v53));
        if (!v56)
        {
          atomic_store(1u, v53);
          v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v57 = off_1E31FE290;
          v57[1] = v53;
          *(_QWORD *)v76 = v57;
          WTF::ensureOnMainThread();
          v58 = *(_QWORD *)v76;
          *(_QWORD *)v76 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        }
      }
      v51 = *(_QWORD *)(v51 + 72);
    }
    while (v51);
  }
  v59 = v73;
  v73 = 0;
  if (!v59)
  {
LABEL_127:
    if (v14)
      goto LABEL_128;
    goto LABEL_130;
  }
  if (*(_DWORD *)v59 != 2)
  {
    *(_DWORD *)v59 -= 2;
    goto LABEL_127;
  }
  WTF::StringImpl::destroy(v59, v48);
  if (v14)
  {
LABEL_128:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v48);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_130:
  if (*(_DWORD *)(v13 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  else
    --*(_DWORD *)(v13 + 24);
LABEL_132:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_134:
  if (!*(_DWORD *)v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195B82F9CLL);
  }
  --*(_DWORD *)v6;
  return v10 & 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::setBackForwardCacheState(WebCore::Page &,WebCore::Document::BackForwardCacheState)::$_0,void,WebCore::Document&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::Document::setBackForwardCacheState(a2, (WTF::StringImpl *)**(unsigned __int8 **)(a1 + 8));
}

WebCore::HistoryItem *WTF::RefCounted<WebCore::HistoryItem>::deref(WebCore::HistoryItem *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::HistoryItem::~HistoryItem(result, a2);
    return (WebCore::HistoryItem *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::BackForwardCache::BackForwardCache(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  WTF *result;
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  char v4;
  WTF **v5;
  WTF *v6;

  {
    WebCore::BackForwardCache::singleton(void)::globalBackForwardCache = 0;
    qword_1ECE90580 = 0;
    dword_1ECE90590 = 0;
    qword_1ECE90588 = 0;
    v3 = atomic_load(&WebCore::BackForwardCache::BackForwardCache(void)::onceFlag);
    if (v3 != -1)
    {
      v6 = (WTF *)&v4;
      v5 = &v6;
      std::__call_once(&WebCore::BackForwardCache::BackForwardCache(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BackForwardCache::BackForwardCache(void)::$_0 &&>>);
    }
  }
  result = (WTF *)WTFLogAlways();
  v1 = (_QWORD *)qword_1ECE90580;
  if (qword_1ECE90580)
  {
    do
    {
      if (**(_QWORD **)(*(_QWORD *)(*v1 + 200) + 24))
      {
        WTF::String::utf8();
        WTFLogAlways();
        result = v6;
        v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF *)WTF::fastFree(result, v2);
          else
            --*(_DWORD *)result;
        }
      }
      else
      {
        result = (WTF *)WTFLogAlways();
      }
      v1 = (_QWORD *)v1[2];
    }
    while (v1);
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::SecurityOrigin>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  unsigned __int16 v14;
  char v15;
  unsigned int *v16;
  unsigned int **v17;

  v14 = 0;
  v15 = 0;
  v1 = *(unsigned int *)(a1 + 32);
  v16 = &v13;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v13 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, v12);
  }
  else
  {
    v17 = &v16;
    ((void (*)(unsigned int ***, uint64_t))off_1E33AF1D0[v1])(&v17, a1 + 8);
    v5 = v13;
    if (v15)
    {
      v10 = (v13 + v14) ^ ((v13 + v14) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>::destruct(*(WebCore::HistoryItem **)a1, (WebCore::HistoryItem **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

{
  uint64_t v3;
  WTF *v4;
  WebCore::HistoryItem **v6;
  uint64_t v7;
  WebCore::HistoryItem *v8;
  WTF *v9;
  void *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::HistoryItem ***)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v8);
          WTF::fastFree(v9, v10);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebCore::HistoryItem *WTF::VectorDestructor<true,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>::destruct(WebCore::HistoryItem *result, WebCore::HistoryItem **a2)
{
  WebCore::HistoryItem **v3;
  WTF *v4;
  void *v5;

  if (result != (WebCore::HistoryItem *)a2)
  {
    v3 = (WebCore::HistoryItem **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::HistoryItem::~HistoryItem(result);
          result = (WebCore::HistoryItem *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (WTF::StringImpl *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4 && (_DWORD)v5)
      {
        v6 = result;
        v7 = 8 * v5;
        result = (unsigned int *)v4;
        v8 = (unsigned int *)v4;
        do
        {
          v9 = *(_QWORD *)result;
          *(_QWORD *)v8 = 0;
          v8 += 2;
          *(_QWORD *)v6 = v9;
          v6 += 2;
          WebCore::ContentType::~ContentType((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
          result = v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  WTF *v5;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>::destruct((WebCore::HistoryItem *)(*(_QWORD *)result + 8 * a2), (WebCore::HistoryItem **)(*(_QWORD *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)memcpy(result, v5, 8 * v4);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AttachmentAssociatedElement::setAttachmentElement(uint64_t a1, WebCore::StyledElement **a2)
{
  uint64_t v4;
  void *v5;
  WebCore::Element *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v10 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v10)
    goto LABEL_2;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  v12 = *(_QWORD *)(v10 + 80);
  if (v12)
  {
    while (1)
    {
      v13 = *(_WORD *)(v12 + 28);
      if ((v13 & 0x10) != 0
        && (v13 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        break;
      }
      v12 = *(_QWORD *)(v12 + 56);
      if (!v12)
        goto LABEL_13;
    }
    *(_DWORD *)(v12 + 24) += 2;
    v11 = *(_DWORD *)(v10 + 24) - 2;
    if (*(_DWORD *)(v10 + 24) == 2)
      goto LABEL_27;
  }
  else
  {
LABEL_13:
    if (!v11)
    {
LABEL_27:
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
      goto LABEL_15;
    }
  }
  *(_DWORD *)(v10 + 24) = v11;
LABEL_15:
  if (v12)
  {
    v14 = *(_QWORD *)(v12 + 32);
    if (v14)
    {
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v14, (WebCore::Node *)v12, &v21);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        v16 = *(_WORD *)(v14 + 30);
        if ((v16 & 0x400) == 0)
        {
          v17 = *(_WORD *)(v14 + 28);
          if ((v17 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v14, v5);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 16))(*(_QWORD *)(v14 + 160));
              v16 = *(_WORD *)(v14 + 30);
            }
            *(_WORD *)(v14 + 30) = v16 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
          }
        }
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
    }
    if ((_BYTE)v23)
    {
      v15 = v22;
      v22 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v5);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
LABEL_2:
  WebCore::StyledElement::setInlineStyleProperty(*a2, (WTF::StringImpl *)7, 6u, 1);
  v6 = (WebCore::Element *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = WebCore::Element::ensureUserAgentShadowRoot(v6);
  result = (WTF::StringImpl *)WebCore::ContainerNode::appendChild(v7, *a2, (uint64_t)&v18);
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::AttachmentAssociatedElement::attachmentElement@<X0>(WebCore::AttachmentAssociatedElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  __int16 v6;

  result = (*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)this + 24))(this);
  if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (result = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    v4 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v4 + 2;
    v5 = *(_QWORD *)(result + 80);
    if (v5)
    {
      while (1)
      {
        v6 = *(_WORD *)(v5 + 28);
        if ((v6 & 0x10) != 0
          && (v6 & 0x110) != 0x110
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
        {
          break;
        }
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_12;
      }
      *(_DWORD *)(v5 + 24) += 2;
      v4 = *(_DWORD *)(result + 24) - 2;
    }
LABEL_12:
    *a2 = v5;
    if (v4)
    {
      *(_DWORD *)(result + 24) = v4;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

char *WebCore::AttachmentAssociatedElement::attachmentIdentifier(WebCore::AttachmentAssociatedElement *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;

  v2 = (char *)this + 8;
  v1 = *((_QWORD *)this + 1);
  if (v1 && *(_DWORD *)(v1 + 4))
    return v2;
  v3 = (*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)this + 24))(this);
  if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return (char *)MEMORY[0x1E0CBF2F8];
  v6 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v6)
    return (char *)MEMORY[0x1E0CBF2F8];
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *(_QWORD *)(v6 + 80);
  if (v8)
  {
    while (1)
    {
      v9 = *(_WORD *)(v8 + 28);
      if ((v9 & 0x10) != 0
        && (v9 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        break;
      }
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
        goto LABEL_13;
    }
    *(_DWORD *)(v8 + 24) += 2;
    v7 = *(_DWORD *)(v6 + 24) - 2;
    if (*(_DWORD *)(v6 + 24) == 2)
      goto LABEL_19;
LABEL_14:
    *(_DWORD *)(v6 + 24) = v7;
    goto LABEL_15;
  }
LABEL_13:
  if (v7)
    goto LABEL_14;
LABEL_19:
  if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
LABEL_15:
  if (!v8)
    return (char *)MEMORY[0x1E0CBF2F8];
  v2 = (char *)(v8 + 128);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::AttachmentAssociatedElement::cloneAttachmentAssociatedElementWithoutAttributesAndChildren(WebCore::AttachmentAssociatedElement *this, WebCore::AttachmentAssociatedElement *a2, WebCore::Document *a3)
{
  uint64_t result;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  WebCore::Node *v9;
  __int16 v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;

  result = (*(uint64_t (**)(WebCore::AttachmentAssociatedElement *))(*(_QWORD *)this + 24))(this);
  if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  result = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!result)
    return result;
  v6 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v6 + 2;
  v7 = *(_QWORD *)(result + 80);
  if (v7)
  {
    while (1)
    {
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 0x10) != 0
        && (v8 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        break;
      }
      v7 = *(_QWORD *)(v7 + 56);
      if (!v7)
        goto LABEL_9;
    }
    *(_DWORD *)(v7 + 24) += 2;
    v6 = *(_DWORD *)(result + 24) - 2;
    if (*(_DWORD *)(result + 24) == 2)
      goto LABEL_24;
  }
  else
  {
LABEL_9:
    if (!v6)
    {
LABEL_24:
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
      goto LABEL_11;
    }
  }
  *(_DWORD *)(result + 24) = v6;
LABEL_11:
  if (v7)
  {
    WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)v7, &v14);
    v9 = v14;
    v10 = *((_WORD *)v14 + 14);
    if ((v10 & 0x10) != 0
      && (v10 & 0x110) != 0x110
      && *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      *((_DWORD *)v14 + 6) += 2;
      v13 = v9;
      (*(void (**)(WebCore::AttachmentAssociatedElement *, WebCore::Node **))(*(_QWORD *)a2 + 40))(a2, &v13);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      result = (uint64_t)v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::autocapitalizeTypeForAttributeValue(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v1 = *a1;
  if (!*a1)
    return 0;
  result = 0;
  switch(*(_DWORD *)(v1 + 4))
  {
    case 0:
      return result;
    case 3:
      v3 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) != 0x4F || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x46)
          return 3;
        v4 = *(unsigned __int8 *)(v3 + 2);
      }
      else
      {
        if ((*(_WORD *)v3 & 0xFFDF) != 0x4F || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x46)
          return 3;
        v4 = *(unsigned __int16 *)(v3 + 4);
      }
      if ((v4 & 0xFFFFFFDF) == 0x46)
        return 1;
      return 3;
    case 4:
      v5 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) != 0x4E || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4E)
          return 3;
        v6 = *(unsigned __int8 *)(v5 + 3);
      }
      else
      {
        if ((*(_WORD *)v5 & 0xFFDF) != 0x4E
          || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4E)
        {
          return 3;
        }
        v6 = *(unsigned __int16 *)(v5 + 6);
      }
      if ((v6 & 0xFFFFFFDF) != 0x45)
        return 3;
      return 1;
    case 5:
      v7 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v7 & 0xDF) != 0x57
          || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x44)
        {
          return 3;
        }
        v8 = *(unsigned __int8 *)(v7 + 4);
      }
      else
      {
        if ((*(_WORD *)v7 & 0xFFDF) != 0x57
          || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x44)
        {
          return 3;
        }
        v8 = *(unsigned __int16 *)(v7 + 8);
      }
      if ((v8 & 0xFFFFFFDF) != 0x53)
        return 3;
      return 2;
    case 0xA:
      v9 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) != 0x43
          || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x48
          || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x52
          || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x41
          || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x43
          || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v9 + 8) & 0xDF) != 0x52)
        {
          return 3;
        }
        v10 = *(unsigned __int8 *)(v9 + 9);
      }
      else
      {
        if ((*(_WORD *)v9 & 0xFFDF) != 0x43
          || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x48
          || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x41
          || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x52
          || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x41
          || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x43
          || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v9 + 16) & 0xFFDF) != 0x52)
        {
          return 3;
        }
        v10 = *(unsigned __int16 *)(v9 + 18);
      }
      if ((v10 & 0xFFFFFFDF) != 0x53)
        return 3;
      return 4;
    default:
      return 3;
  }
}

uint64_t WebCore::toAutofillFieldName(WebCore *this, const WTF::AtomString *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  __int16 v5;

  v5 = 0;
  v2 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::AutofillFieldNameMapping> [59]>::tryGet<WTF::AtomString>((unsigned __int8 ***)&WebCore::fieldNameMap, (uint64_t *)this);
  v3 = (unsigned __int8 **)&v5;
  if (v2)
    v3 = v2;
  return *(unsigned __int8 *)v3;
}

uint64_t WebCore::nonAutofillCredentialTypeString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v3;
  return result;
}

_QWORD *WebCore::AutofillData::createFromHTMLFormControlElement@<X0>(_QWORD *this@<X0>, const WebCore::HTMLFormControlElement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomString *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  const WTF::AtomString *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WebCore::HTMLFormElement *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  char v41;
  uint64_t v42;
  WTF *v43;
  char *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  char v67;
  int v68;
  _DWORD *v69;
  int v70;
  _DWORD *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WebCore::HTMLFormElement *v84;
  uint64_t *v85;
  char *v86;
  WTF *v87;
  WTF::StringImpl *v88;

  v4 = this[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (WTF::AtomString *)(v6 + 8);
  while (1)
  {
    v9 = *((_QWORD *)v8 - 1);
    if (v9 == WebCore::HTMLNames::autocompleteAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
    {
      break;
    }
    v8 = (WTF::AtomString *)((char *)v8 + 16);
    if (!--v7)
    {
      v8 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*(_QWORD *)v8)
  {
    if (!*(_DWORD *)(*(_QWORD *)v8 + 4))
    {
      v87 = 0;
      goto LABEL_16;
    }
    v16 = this;
    WTF::AtomString::convertToASCIILowercase(v8);
    WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v88, v17, &v87);
    v18 = v88;
    v88 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    this = v16;
    if (!v87)
    {
LABEL_16:
      if (*(_QWORD *)(this[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
        && *(_DWORD *)(this[30] + 12) == 128)
      {
LABEL_18:
        v10 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
LABEL_21:
        if (v10)
          *v10 += 2;
        *(_QWORD *)a3 = v10;
        v12 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v12 += 2;
        goto LABEL_25;
      }
      v11 = this[15];
      if (!v11)
      {
LABEL_20:
        v10 = (_DWORD *)WebCore::onAtomData;
        goto LABEL_21;
      }
LABEL_59:
      v25 = *(WebCore::HTMLFormElement **)(v11 + 8);
      if (v25)
      {
        v26 = WebCore::HTMLFormElement::autocomplete(v25);
        v10 = (_DWORD *)*v26;
        if (*v26 == WebCore::offAtomData)
          goto LABEL_21;
      }
      goto LABEL_20;
    }
    v19 = *((_DWORD *)v87 + 3);
    if (!v19)
      goto LABEL_344;
    v20 = (v19 - 1);
    v21 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::AutofillFieldNameMapping> [59]>::tryGet<WTF::AtomString>((unsigned __int8 ***)&WebCore::fieldNameMap, (uint64_t *)v87 + v20 + 2);
    if (!v21
      || ((v22 = *((unsigned __int8 *)v21 + 1), !v87) ? (v23 = 0) : (v23 = *((_DWORD *)v87 + 3)),
          v22 > 4 ? (v24 = 0) : (v24 = dword_1969F0F08[*((char *)v21 + 1)]),
          v23 > v24))
    {
      if (*(_QWORD *)(v16[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
        && *(_DWORD *)(v16[30] + 12) == 128)
      {
        goto LABEL_18;
      }
      v11 = v16[15];
      if (!v11)
        goto LABEL_20;
      goto LABEL_59;
    }
    if (*((_DWORD *)v87 + 3) <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x195B84C30);
    }
    if (*(_QWORD *)(v16[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
      && v22 <= 1
      && *(_DWORD *)(v16[30] + 12) == 128)
    {
      goto LABEL_18;
    }
    if (v22 == 1)
    {
      v12 = (_DWORD *)WebCore::onAtomData;
      if (!WebCore::onAtomData)
        goto LABEL_70;
      goto LABEL_69;
    }
    if (!*((_BYTE *)v21 + 1))
    {
      v12 = (_DWORD *)WebCore::offAtomData;
      if (!WebCore::offAtomData)
      {
LABEL_70:
        *(_QWORD *)a3 = v12;
LABEL_25:
        *(_QWORD *)(a3 + 8) = v12;
        *(_BYTE *)(a3 + 16) = 0;
        goto LABEL_26;
      }
LABEL_69:
      *v12 += 4;
      goto LABEL_70;
    }
    v86 = (char *)v87 + 16;
    v27 = *((_QWORD *)v87 + v20 + 2);
    if (v27)
      *(_DWORD *)v27 += 2;
    if (v22 == 4)
    {
      if (MEMORY[0x19AEA53F4](v27, "webauthn", 8))
      {
        if (v19 == 1)
        {
          v71 = *(_DWORD **)&v86[8 * v20];
          if (v71)
            *v71 += 2;
          *(_QWORD *)a3 = v71;
          if (v27)
            *(_DWORD *)v27 += 2;
          *(_QWORD *)(a3 + 8) = v27;
          v41 = 1;
          goto LABEL_224;
        }
        v28 = (v19 - 2);
        if (*((_DWORD *)v87 + 3) <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x195B84E0CLL);
        }
        v29 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::AutofillFieldNameMapping> [59]>::tryGet<WTF::AtomString>((unsigned __int8 ***)&WebCore::fieldNameMap, (uint64_t *)v87 + v28 + 2);
        if (!v29)
          goto LABEL_168;
        v22 = *((unsigned __int8 *)v29 + 1);
        if ((v22 - 4) <= 0xFDu)
          goto LABEL_168;
        if (v22 == 2)
          v30 = 2;
        else
          v30 = -1;
        if (v22 == 3)
          v30 = 3;
        if (v28 > v30)
          goto LABEL_168;
        if (*((_DWORD *)v87 + 3) <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x195B84F1CLL);
        }
        v31 = (WTF::StringImpl *)*((_QWORD *)v87 + v28 + 2);
        if (v31)
          *(_DWORD *)v31 += 2;
        if (v27)
          *(_DWORD *)v27 += 2;
        if (v31)
        {
          v32 = *((_DWORD *)v31 + 1);
          if (v27)
            goto LABEL_95;
        }
        else
        {
          v32 = 0;
          if (v27)
          {
LABEL_95:
            v33 = *(_DWORD *)(v27 + 4);
            if (v33 < 0)
              goto LABEL_341;
            goto LABEL_96;
          }
        }
        v33 = 0;
LABEL_96:
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        v36 = v34;
        if ((v32 & 0x80000000) == 0 && (v36 & 1) == 0)
        {
          v37 = (v32 + v35);
          if (!__OFADD__(v32, v35))
          {
            if (v31)
            {
              v38 = *((_DWORD *)v31 + 4);
              v39 = (v38 >> 2) & 1;
              if (v27 && (v38 & 4) != 0)
                goto LABEL_105;
            }
            else
            {
              if (v27)
              {
LABEL_105:
                v39 = (*(unsigned __int8 *)(v27 + 16) >> 2) & 1;
                goto LABEL_106;
              }
              v39 = 1;
            }
LABEL_106:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v37, v39, (uint64_t)v31, 32, v27, &v88);
            v40 = v88;
            if (v88)
            {
              v88 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                  v82 = v88;
                  v88 = 0;
                  if (v82)
                  {
                    if (*(_DWORD *)v82 == 2)
                      WTF::StringImpl::destroy(v82, a2);
                    else
                      *(_DWORD *)v82 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v27 -= 2;
                  v88 = 0;
                }
                if (*(_DWORD *)v27 == 2)
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                  if (v31)
                  {
LABEL_113:
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, a2);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
LABEL_115:
                  v41 = 1;
                  v27 = (uint64_t)v40;
                  goto LABEL_119;
                }
                *(_DWORD *)v27 -= 2;
              }
              if (v31)
                goto LABEL_113;
              goto LABEL_115;
            }
LABEL_342:
            __break(0xC471u);
            JUMPOUT(0x195B85038);
          }
        }
LABEL_341:
        v88 = 0;
        goto LABEL_342;
      }
      v41 = 0;
      v22 = 4;
    }
    else
    {
      v41 = 0;
    }
    LODWORD(v28) = v19 - 1;
LABEL_119:
    if (!(_DWORD)v28)
    {
      v59 = *(_DWORD **)&v86[8 * v20];
      if (v59)
        *v59 += 2;
      *(_QWORD *)a3 = v59;
      if (v27)
        *(_DWORD *)v27 += 2;
      *(_QWORD *)(a3 + 8) = v27;
      goto LABEL_224;
    }
    v42 = (v28 - 1);
    v43 = v87;
    if (*((_DWORD *)v87 + 3) <= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x195B84D80);
    }
    if (v22 != 3)
      goto LABEL_165;
    if ((_MergedGlobals_181 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE83398 = (uint64_t)v88;
      _MergedGlobals_181 = 1;
    }
    if ((byte_1ECE83391 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE833A0 = (uint64_t)v88;
      byte_1ECE83391 = 1;
    }
    if ((byte_1ECE83392 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE833A8 = (uint64_t)v88;
      byte_1ECE83392 = 1;
    }
    if ((byte_1ECE83393 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE833B0 = (uint64_t)v88;
      byte_1ECE83393 = 1;
    }
    v44 = (char *)v43 + 16;
    if (byte_1ECE83394 == 1)
    {
      v45 = (WTF::StringImpl *)qword_1ECE833B8;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v45 = v88;
      qword_1ECE833B8 = (uint64_t)v88;
      byte_1ECE83394 = 1;
    }
    v46 = *(WTF::StringImpl **)&v44[8 * v42];
    if (v46 != (WTF::StringImpl *)qword_1ECE83398
      && v46 != (WTF::StringImpl *)qword_1ECE833A0
      && v46 != (WTF::StringImpl *)qword_1ECE833A8
      && v46 != (WTF::StringImpl *)qword_1ECE833B0
      && v46 != v45)
    {
      goto LABEL_165;
    }
    if (v46)
      *(_DWORD *)v46 += 2;
    if (v27)
      *(_DWORD *)v27 += 2;
    if (v46)
    {
      v47 = *((_DWORD *)v46 + 1);
      if (v27)
        goto LABEL_143;
    }
    else
    {
      v47 = 0;
      if (v27)
      {
LABEL_143:
        v48 = *(_DWORD *)(v27 + 4);
        if (v48 < 0)
          goto LABEL_337;
        goto LABEL_144;
      }
    }
    v48 = 0;
LABEL_144:
    v34 = __OFADD__(v48, 1);
    v49 = v48 + 1;
    v50 = v34;
    if ((v47 & 0x80000000) == 0 && (v50 & 1) == 0)
    {
      v51 = (v47 + v49);
      if (!__OFADD__(v47, v49))
      {
        if (v46)
        {
          v52 = *((_DWORD *)v46 + 4);
          v53 = (v52 >> 2) & 1;
          if (v27 && (v52 & 4) != 0)
            goto LABEL_153;
        }
        else
        {
          if (v27)
          {
LABEL_153:
            v53 = (*(unsigned __int8 *)(v27 + 16) >> 2) & 1;
            goto LABEL_154;
          }
          v53 = 1;
        }
LABEL_154:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v51, v53, (uint64_t)v46, 32, v27, &v88);
        v54 = v88;
        if (v88)
        {
          v88 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
              v76 = v88;
              v88 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, a2);
                else
                  *(_DWORD *)v76 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v27 -= 2;
              v88 = 0;
            }
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
              if (v46)
              {
LABEL_161:
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, a2);
                else
                  *(_DWORD *)v46 -= 2;
              }
LABEL_163:
              if ((_DWORD)v28 == 1)
                goto LABEL_216;
              LODWORD(v42) = v28 - 2;
              v27 = (uint64_t)v54;
LABEL_165:
              if (*((_DWORD *)v87 + 3) <= v42)
              {
                __break(0xC471u);
                JUMPOUT(0x195B84DC4);
              }
              v55 = *((_QWORD *)v87 + v42 + 2);
              if (!v55)
              {
LABEL_167:
                if (!(_DWORD)v42)
                {
                  if (!*((_DWORD *)v87 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195B84DECLL);
                  }
                  v60 = *((_QWORD *)v87 + 2);
                  if (v60)
                  {
                    v61 = *(_DWORD *)(v60 + 4);
                    if (v61 >= 8)
                    {
                      v62 = *(_DWORD *)(v60 + 16);
                      v63 = *(_QWORD *)(v60 + 8);
                      if ((v62 & 4) != 0)
                      {
                        if ((*(_BYTE *)v63 & 0xDF) == 0x53
                          && (*(_BYTE *)(v63 + 1) & 0xDF) == 0x45
                          && (*(_BYTE *)(v63 + 2) & 0xDF) == 0x43
                          && (*(_BYTE *)(v63 + 3) & 0xDF) == 0x54
                          && (*(_BYTE *)(v63 + 4) & 0xDF) == 0x49
                          && (*(_BYTE *)(v63 + 5) & 0xDF) == 0x4F
                          && (*(_BYTE *)(v63 + 6) & 0xDF) == 0x4E)
                        {
                          v64 = *(unsigned __int8 *)(v63 + 7);
                          goto LABEL_195;
                        }
                      }
                      else if ((*(_WORD *)v63 & 0xFFDF) == 0x53
                             && (*(_WORD *)(v63 + 2) & 0xFFDF) == 0x45
                             && (*(_WORD *)(v63 + 4) & 0xFFDF) == 0x43
                             && (*(_WORD *)(v63 + 6) & 0xFFDF) == 0x54
                             && (*(_WORD *)(v63 + 8) & 0xFFDF) == 0x49
                             && (*(_WORD *)(v63 + 10) & 0xFFDF) == 0x4F
                             && (*(_WORD *)(v63 + 12) & 0xFFDF) == 0x4E)
                      {
                        v64 = *(unsigned __int16 *)(v63 + 14);
LABEL_195:
                        if ((v64 & 0xFFFFFFDF) == 0xD)
                        {
                          *(_DWORD *)v60 += 2;
                          if (v27)
                          {
                            v65 = *(_DWORD *)(v27 + 4);
                            *(_DWORD *)v27 += 2;
                            if (v65 < 0)
                              goto LABEL_339;
                            v61 = *(_DWORD *)(v60 + 4);
                          }
                          else
                          {
                            v65 = 0;
                          }
                          v34 = __OFADD__(v65, 1);
                          v66 = v65 + 1;
                          v67 = v34;
                          if ((v61 & 0x80000000) == 0 && (v67 & 1) == 0 && !__OFADD__(v61, v66))
                          {
                            v68 = (v62 >> 2) & 1;
                            if (v27 && (v62 & 4) != 0)
                              v68 = (*(unsigned __int8 *)(v27 + 16) >> 2) & 1;
                            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v61 + v66, v68, v60, 32, v27, &v88);
                            v54 = v88;
                            if (v88)
                            {
                              v88 = 0;
                              if (v27)
                              {
                                if (*(_DWORD *)v27 == 2)
                                {
                                  WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                                  v81 = v88;
                                  v88 = 0;
                                  if (v81)
                                  {
                                    if (*(_DWORD *)v81 == 2)
                                      WTF::StringImpl::destroy(v81, a2);
                                    else
                                      *(_DWORD *)v81 -= 2;
                                  }
                                }
                                else
                                {
                                  *(_DWORD *)v27 -= 2;
                                  v88 = 0;
                                }
                                if (*(_DWORD *)v27 == 2)
                                  WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                                else
                                  *(_DWORD *)v27 -= 2;
                              }
                              if (*(_DWORD *)v60 == 2)
                                WTF::StringImpl::destroy((WTF::StringImpl *)v60, a2);
                              else
                                *(_DWORD *)v60 -= 2;
                              goto LABEL_216;
                            }
LABEL_340:
                            __break(0xC471u);
                            JUMPOUT(0x195B8502CLL);
                          }
LABEL_339:
                          v88 = 0;
                          goto LABEL_340;
                        }
                      }
                    }
                  }
                }
LABEL_168:
                if (*(_QWORD *)(v16[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
                  && *(_DWORD *)(v16[30] + 12) == 128)
                {
                  v56 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
                }
                else
                {
                  v57 = v16[15];
                  if (!v57
                    || (v84 = *(WebCore::HTMLFormElement **)(v57 + 8)) == 0
                    || (v85 = WebCore::HTMLFormElement::autocomplete(v84),
                        v56 = (_DWORD *)*v85,
                        *v85 != WebCore::offAtomData))
                  {
                    v56 = (_DWORD *)WebCore::onAtomData;
                  }
                }
                if (v56)
                  *v56 += 2;
                *(_QWORD *)a3 = v56;
                v58 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *v58 += 2;
                v41 = 0;
                *(_QWORD *)(a3 + 8) = v58;
LABEL_224:
                *(_BYTE *)(a3 + 16) = v41;
                if (!v27)
                  goto LABEL_26;
                v70 = *(_DWORD *)v27 - 2;
                v54 = (WTF::StringImpl *)v27;
LABEL_226:
                if (v70)
                  *(_DWORD *)v54 = v70;
                else
                  WTF::StringImpl::destroy(v54, a2);
LABEL_26:
                this = v87;
                v87 = 0;
                if (this)
                {
                  if (*((_DWORD *)this + 2) == 1)
                    return (_QWORD *)WebCore::SpaceSplitStringData::destroy((WTF *)this, a2);
                  else
                    --*((_DWORD *)this + 2);
                }
                return this;
              }
              v72 = *(_DWORD *)(v55 + 4);
              if (v72 == 8)
              {
                v73 = *(_DWORD *)(v55 + 16);
                v77 = *(_QWORD *)(v55 + 8);
                if ((v73 & 4) != 0)
                {
                  if ((*(_BYTE *)v77 & 0xDF) != 0x53
                    || (*(_BYTE *)(v77 + 1) & 0xDF) != 0x48
                    || (*(_BYTE *)(v77 + 2) & 0xDF) != 0x49
                    || (*(_BYTE *)(v77 + 3) & 0xDF) != 0x50
                    || (*(_BYTE *)(v77 + 4) & 0xDF) != 0x50
                    || (*(_BYTE *)(v77 + 5) & 0xDF) != 0x49
                    || (*(_BYTE *)(v77 + 6) & 0xDF) != 0x4E)
                  {
                    goto LABEL_167;
                  }
                  v75 = *(unsigned __int8 *)(v77 + 7);
                }
                else
                {
                  if ((*(_WORD *)v77 & 0xFFDF) != 0x53
                    || (*(_WORD *)(v77 + 2) & 0xFFDF) != 0x48
                    || (*(_WORD *)(v77 + 4) & 0xFFDF) != 0x49
                    || (*(_WORD *)(v77 + 6) & 0xFFDF) != 0x50
                    || (*(_WORD *)(v77 + 8) & 0xFFDF) != 0x50
                    || (*(_WORD *)(v77 + 10) & 0xFFDF) != 0x49
                    || (*(_WORD *)(v77 + 12) & 0xFFDF) != 0x4E)
                  {
                    goto LABEL_167;
                  }
                  v75 = *(unsigned __int16 *)(v77 + 14);
                }
              }
              else
              {
                if (v72 != 7)
                  goto LABEL_167;
                v73 = *(_DWORD *)(v55 + 16);
                v74 = *(_QWORD *)(v55 + 8);
                if ((v73 & 4) != 0)
                {
                  if ((*(_BYTE *)v74 & 0xDF) != 0x42
                    || (*(_BYTE *)(v74 + 1) & 0xDF) != 0x49
                    || (*(_BYTE *)(v74 + 2) & 0xDF) != 0x4C
                    || (*(_BYTE *)(v74 + 3) & 0xDF) != 0x4C
                    || (*(_BYTE *)(v74 + 4) & 0xDF) != 0x49
                    || (*(_BYTE *)(v74 + 5) & 0xDF) != 0x4E)
                  {
                    goto LABEL_167;
                  }
                  v75 = *(unsigned __int8 *)(v74 + 6);
                }
                else
                {
                  if ((*(_WORD *)v74 & 0xFFDF) != 0x42
                    || (*(_WORD *)(v74 + 2) & 0xFFDF) != 0x49
                    || (*(_WORD *)(v74 + 4) & 0xFFDF) != 0x4C
                    || (*(_WORD *)(v74 + 6) & 0xFFDF) != 0x4C
                    || (*(_WORD *)(v74 + 8) & 0xFFDF) != 0x49
                    || (*(_WORD *)(v74 + 10) & 0xFFDF) != 0x4E)
                  {
                    goto LABEL_167;
                  }
                  v75 = *(unsigned __int16 *)(v74 + 12);
                }
              }
              if ((v75 & 0xFFFFFFDF) != 0x47)
                goto LABEL_167;
              *(_DWORD *)v55 += 2;
              if (v27)
              {
                v78 = *(_DWORD *)(v27 + 4);
                *(_DWORD *)v27 += 2;
                if (v78 < 0)
                  goto LABEL_343;
              }
              else
              {
                v78 = 0;
              }
              v34 = __OFADD__(v78, 1);
              v79 = v78 + 1;
              if (!v34 && !__OFADD__(v72, v79))
              {
                v80 = (v73 >> 2) & 1;
                if (v27 && (v73 & 4) != 0)
                  v80 = (*(unsigned __int8 *)(v27 + 16) >> 2) & 1;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((v72 + v79), v80, v55, 32, v27, &v88);
                v54 = v88;
                if (v88)
                {
                  v88 = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                    {
                      WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                      v83 = v88;
                      v88 = 0;
                      if (v83)
                      {
                        if (*(_DWORD *)v83 == 2)
                          WTF::StringImpl::destroy(v83, a2);
                        else
                          *(_DWORD *)v83 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v27 -= 2;
                      v88 = 0;
                    }
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v27, a2);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                  if (*(_DWORD *)v55 == 2)
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v55, a2);
                    if ((_DWORD)v42)
                      goto LABEL_271;
                  }
                  else
                  {
                    *(_DWORD *)v55 -= 2;
                    if ((_DWORD)v42)
                    {
LABEL_271:
                      LODWORD(v42) = v42 - 1;
                      v27 = (uint64_t)v54;
                      goto LABEL_167;
                    }
                  }
LABEL_216:
                  v69 = *(_DWORD **)&v86[8 * v20];
                  if (v69)
                    *v69 += 2;
                  v70 = *(_DWORD *)v54;
                  *(_DWORD *)v54 += 2;
                  *(_QWORD *)a3 = v69;
                  *(_QWORD *)(a3 + 8) = v54;
                  *(_BYTE *)(a3 + 16) = v41;
                  goto LABEL_226;
                }
LABEL_344:
                __break(0xC471u);
                JUMPOUT(0x195B84BB4);
              }
LABEL_343:
              v88 = 0;
              goto LABEL_344;
            }
            *(_DWORD *)v27 -= 2;
          }
          if (v46)
            goto LABEL_161;
          goto LABEL_163;
        }
LABEL_338:
        __break(0xC471u);
        JUMPOUT(0x195B85020);
      }
    }
LABEL_337:
    v88 = 0;
    goto LABEL_338;
  }
  if (*(_QWORD *)(this[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    && *(_DWORD *)(this[30] + 12) == 128)
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  }
  else
  {
    v14 = this[15];
    if (!v14
      || (this = *(_QWORD **)(v14 + 8)) == 0
      || (this = WebCore::HTMLFormElement::autocomplete((WebCore::HTMLFormElement *)this),
          v13 = (_DWORD *)*this,
          *this != WebCore::offAtomData))
    {
      v13 = (_DWORD *)WebCore::onAtomData;
    }
  }
  if (v13)
    *v13 += 2;
  *(_QWORD *)a3 = v13;
  v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v15 += 2;
  *(_QWORD *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 16) = 0;
  return this;
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::AutofillFieldNameMapping> [59]>::tryGet<WTF::AtomString>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  unsigned __int8 *v5;
  BOOL v6;
  unsigned __int8 **v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  unint64_t v29;
  char *v30;
  int v31;
  int v32;
  unsigned __int16 *v33;
  unsigned __int16 v34;
  int v35;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    v8 = 0;
    v4 = 0;
    v7 = *a1;
    goto LABEL_31;
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = *(unsigned __int16 **)(v2 + 8);
  v5 = (unsigned __int8 *)*(unsigned int *)(v2 + 4);
  v6 = *(_DWORD *)(v2 + 4) == 0;
  v7 = *a1;
  v8 = (v3 & 4) == 0;
  if ((v3 & 4) != 0)
  {
    if ((_DWORD)v5)
    {
      v9 = 0;
      v10 = 59;
      do
      {
        v11 = v10 >> 1;
        v12 = v9 + (v10 >> 1);
        v13 = v7[3 * v12];
        v14 = v5;
        v15 = (unsigned __int8 *)v4;
        while (1)
        {
          v16 = (char)*v13;
          if (!*v13)
            break;
          v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15);
          if (v17 != v16)
          {
            if (v16 >= v17)
              goto LABEL_12;
            break;
          }
          ++v13;
          ++v15;
          if (!--v14)
            goto LABEL_12;
        }
        v9 = v12 + 1;
        v11 = v10 + ~v11;
LABEL_12:
        v10 = v11;
      }
      while (v11);
      goto LABEL_13;
    }
    v5 = 0;
    v8 = 0;
LABEL_31:
    v6 = 1;
    goto LABEL_15;
  }
  if (!(_DWORD)v5)
  {
    v5 = 0;
    v6 = 1;
    v8 = 1;
    goto LABEL_15;
  }
  v9 = 0;
  v20 = 59;
  do
  {
    v21 = v20 >> 1;
    v22 = v9 + (v20 >> 1);
    v23 = v7[3 * v22];
    v24 = 2 * (_QWORD)v5;
    v25 = v4;
    while (1)
    {
      v26 = (char)*v23;
      if (!*v23)
        break;
      v27 = *v25 | (32 * (*v25 - 65 < 0x1A));
      if (v27 != v26)
      {
        if (v26 >= v27)
          goto LABEL_28;
        break;
      }
      ++v23;
      ++v25;
      v24 -= 2;
      if (!v24)
        goto LABEL_28;
    }
    v9 = v22 + 1;
    v21 = v20 + ~v21;
LABEL_28:
    v20 = v21;
  }
  while (v21);
LABEL_13:
  if (v9 == 59)
    return 0;
  v7 += 3 * v9;
LABEL_15:
  v18 = v7[1];
  if (v18)
    --v18;
  if (v18 != v5)
    return 0;
  v28 = *v7;
  if (v8)
  {
    if (!v6)
    {
      if ((*v4 | 0x20) == (unsigned __int16)(char)*v28)
      {
        v29 = 0;
        v33 = v4 + 1;
        while (v5 - 1 != (unsigned __int8 *)v29)
        {
          v34 = (char)v28[v29 + 1];
          v35 = v33[v29++] | 0x20;
          if (v35 != v34)
          {
LABEL_39:
            if (v29 < (unint64_t)v5)
              return 0;
            return v7 + 2;
          }
        }
        return v7 + 2;
      }
      return 0;
    }
  }
  else if (!v6)
  {
    if ((*(unsigned __int8 *)v4 | 0x20) == *v28)
    {
      v29 = 0;
      v30 = (char *)v4 + 1;
      while (v5 - 1 != (unsigned __int8 *)v29)
      {
        v31 = v28[v29 + 1];
        v32 = v30[v29++] | 0x20;
        if (v32 != v31)
          goto LABEL_39;
      }
      return v7 + 2;
    }
    return 0;
  }
  return v7 + 2;
}

uint64_t WebCore::BaseButtonInputType::shouldSaveAndRestoreFormControlState(WebCore::BaseButtonInputType *this)
{
  return 0;
}

uint64_t WebCore::BaseButtonInputType::appendFormData()
{
  return 0;
}

uint64_t WebCore::BaseButtonInputType::createInputRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = (_QWORD *)bmalloc::api::isoAllocate();
  v8 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v7, 2, v6, a2, 204, 0);
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_QWORD *)v8 = off_1E3423D88;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_QWORD *)(v8 + 248) = v8 + 256;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 232) = v8;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 272) = v8 + 256;
  *(_WORD *)(v8 + 280) = 1;
  *(_BYTE *)(v8 + 288) = 0;
  *(_BYTE *)(v8 + 296) = 0;
  *(_BYTE *)(v8 + 304) = 0;
  *(_BYTE *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 392) = 2;
  *(_QWORD *)(v8 + 400) = 0;
  result = WebCore::RenderObject::setChildrenInline(v8, 0);
  *v7 = off_1E3420CD0;
  v7[51] = 0;
  v7[52] = 0;
  *a3 = v7;
  return result;
}

uint64_t WebCore::BaseButtonInputType::storesValueSeparateFromAttribute(WebCore::BaseButtonInputType *this)
{
  return 0;
}

WTF::StringImpl *WebCore::BaseButtonInputType::setValue(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = *(WTF::StringImpl **)(v2 + 8);
  else
    v3 = 0;
  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    if ((*((_BYTE *)v4 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v4 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v4, a2);
      v4 = v13;
    }
  }
  v13 = v4;
  v5 = *((_QWORD *)v3 + 13);
  if (!v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_18:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_18;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_18;
  }
LABEL_19:
  WebCore::Element::setAttributeInternal(v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::BaseButtonInputType::dirAutoUsesValue(WebCore::BaseButtonInputType *this)
{
  return 1;
}

_QWORD *WebCore::BaseCheckableInputType::saveFormControlState@<X0>(WebCore::BaseCheckableInputType *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  _QWORD *result;
  WTF::StringImpl *v6;
  int v7;

  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 230) & 1) != 0)
    v3 = &WebCore::onAtomData;
  else
    v3 = &WebCore::offAtomData;
  v4 = (WTF::StringImpl *)*v3;
  if (*v3)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v4)
  {
    v7 = *(_DWORD *)v4;
    *(_DWORD *)v4 += 2;
    *result = v4;
    *(_DWORD *)(a2 + 12) = 1;
    if (v7)
      *(_DWORD *)v4 = v7;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v4, v6);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

unsigned __int8 *WebCore::BaseCheckableInputType::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    result = *(unsigned __int8 **)(v2 + 8);
  else
    result = 0;
  if (*(_DWORD *)(a2 + 12))
    return WebCore::HTMLInputElement::setChecked(result, **(_QWORD **)a2 == WebCore::onAtomData);
  __break(0xC471u);
  return result;
}

uint64_t WebCore::BaseCheckableInputType::appendFormData(WebCore::BaseCheckableInputType *this, WebCore::DOMFormData *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  _QWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if ((*(_WORD *)(v4 + 230) & 1) == 0)
      return 0;
  }
  else
  {
    if ((MEMORY[0xE6] & 1) == 0)
      return 0;
    v4 = 0;
  }
  v7 = *(_QWORD *)(v4 + 208);
  v6 = (WTF::StringImpl **)(v4 + 208);
  if (v7)
    v8 = v6;
  else
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (v3)
    v9 = *(_QWORD **)(v3 + 8);
  else
    v9 = 0;
  v10 = (_DWORD *)v9[30];
  if (v10[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v10, &v20);
    goto LABEL_30;
  }
  v11 = (WTF::StringImpl *)v9[27];
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v20 = v11;
    goto LABEL_30;
  }
  v12 = v9[13];
  if (!v12)
    goto LABEL_24;
  v13 = *(_DWORD *)(v12 + 4);
  if ((v13 & 1) == 0)
  {
    v14 = v12 + 32;
    LODWORD(v15) = v13 >> 5;
    if ((_DWORD)v15)
      goto LABEL_16;
LABEL_24:
    v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v12 + 40);
  LODWORD(v15) = *(_DWORD *)(v12 + 52);
  if (!(_DWORD)v15)
    goto LABEL_24;
LABEL_16:
  v15 = v15;
  v16 = (_QWORD *)(v14 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_25:
  if (*v16)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 296))(&v20);
    if (v20)
      goto LABEL_30;
    v20 = 0;
    v10 = (_DWORD *)v9[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v20);
LABEL_30:
  WebCore::DOMFormData::append(a2, v8, &v20);
  v19 = v20;
  v20 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  return 1;
}

uint64_t WebCore::BaseCheckableInputType::handleKeydownEvent(WebCore::BaseCheckableInputType *this, WebCore::KeyboardEvent *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if (v3)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    WebCore::Element::setActive(v5, (void *)1, 0);
  }
  return v3 ^ 1u;
}

uint64_t WebCore::BaseCheckableInputType::handleKeypressEvent(WebCore::BaseCheckableInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;

  result = WebCore::KeyboardEvent::charCode(a2);
  if ((_DWORD)result == 32)
    *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

uint64_t WebCore::BaseCheckableInputType::canSetStringValue(WebCore::BaseCheckableInputType *this)
{
  return 0;
}

uint64_t WebCore::BaseCheckableInputType::accessKeyAction(WebCore::BaseCheckableInputType *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v8;
  int v9;
  char v10;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
  }
  else
  {
    v5 = 0;
  }
  v8 = 1;
  v9 = 0;
  v10 = 0;
  WebCore::Element::focus((unsigned int *)v5, &v8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WebCore::simulateClick(*(WebCore **)(*((_QWORD *)this + 3) + 8), 0, a2, 1, 1);
}

WTF::StringImpl *WebCore::BaseCheckableInputType::setValue(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = *(WTF::StringImpl **)(v2 + 8);
  else
    v3 = 0;
  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    if ((*((_BYTE *)v4 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v4 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v4, a2);
      v4 = v13;
    }
  }
  v13 = v4;
  v5 = *((_QWORD *)v3 + 13);
  if (!v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_18:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_18;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_18;
  }
LABEL_19:
  WebCore::Element::setAttributeInternal(v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::BaseCheckableInputType::fireInputAndChangeEvents(_DWORD *this)
{
  _DWORD *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 22) & 8) != 0)
  {
    v1 = this;
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 672))(this);
    if ((_DWORD)this)
    {
      ++v1[2];
      v3 = *(_QWORD *)(*((_QWORD *)v1 + 3) + 8);
      v4 = *(WTF::StringImpl **)(v3 + 200);
      *(_QWORD *)(v3 + 200) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = *((_QWORD *)v1 + 3);
      if (v5)
        v6 = *(WebCore::Node **)(v5 + 8);
      else
        v6 = 0;
      this = WebCore::Node::dispatchInputEvent(v6);
      v7 = *((_QWORD *)v1 + 3);
      if (v7)
      {
        this = *(_DWORD **)(v7 + 8);
        if (this)
          this = WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)this);
      }
      if (v1[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      else
        --v1[2];
    }
  }
  return this;
}

uint64_t WebCore::BaseClickableWithKeyInputType::handleKeydownEvent(WebCore::BaseClickableWithKeyInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if (v4)
    WebCore::Element::setActive(v3, (void *)1, 0);
  return v4 ^ 1u;
}

uint64_t WebCore::BaseClickableWithKeyInputType::handleKeypressEvent(WebCore::BaseClickableWithKeyInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t result;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(WebCore **)(v3 + 8);
  else
    v4 = 0;
  result = WebCore::KeyboardEvent::charCode(a2);
  if ((_DWORD)result != 32)
  {
    if ((_DWORD)result != 13)
      return result;
    result = WebCore::simulateClick(v4, (uint64_t)a2, 0, 1, 1);
  }
  *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

uint64_t WebCore::BaseClickableWithKeyInputType::handleKeyupEvent(WebCore::BaseClickableWithKeyInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;

  result = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if ((_DWORD)result)
    return WebCore::InputType::dispatchSimulatedClickIfActive(this, a2);
  return result;
}

uint64_t WebCore::BaseClickableWithKeyInputType::accessKeyAction(WebCore::BaseClickableWithKeyInputType *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v8;
  int v9;
  char v10;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
  }
  else
  {
    v5 = 0;
  }
  v8 = 1;
  v9 = 0;
  v10 = 0;
  WebCore::Element::focus((unsigned int *)v5, &v8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WebCore::simulateClick(*(WebCore **)(*((_QWORD *)this + 3) + 8), 0, a2, 1, 1);
}

uint64_t WebCore::BaseDateAndTimeInputType::DateTimeFormatValidator::visitField(uint64_t result, int a2)
{
  char v2;

  if (a2 <= 99)
  {
    if (a2 > 96)
    {
      if (a2 != 97)
        return result;
      v2 = 0x80;
    }
    else if ((a2 - 76) >= 2)
    {
      if (a2 == 72)
      {
LABEL_21:
        v2 = -112;
      }
      else
      {
        if (a2 != 75)
          return result;
LABEL_15:
        v2 = 16;
      }
    }
    else
    {
      v2 = 2;
    }
    goto LABEL_16;
  }
  if (a2 > 114)
  {
    switch(a2)
    {
      case 'y':
        v2 = 1;
        break;
      case 's':
        v2 = 64;
        break;
      case 'w':
        v2 = 4;
        break;
      default:
        return result;
    }
LABEL_16:
    *(_BYTE *)(result + 8) |= v2;
    return result;
  }
  switch(a2)
  {
    case 'd':
      v2 = 8;
      goto LABEL_16;
    case 'h':
      goto LABEL_15;
    case 'k':
      goto LABEL_21;
    case 'm':
      v2 = 32;
      goto LABEL_16;
    default:
      return result;
  }
  return result;
}

void WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(WebCore::BaseDateAndTimeInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E33AFBD0;
  *((_QWORD *)this + 4) = &unk_1E33AFFE8;
  *((_QWORD *)this + 5) = &unk_1E33B0018;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v13)
      {
        v16 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
        v10 = v16;
      }
      v14 = *(WTF **)(v10 + 16);
      if (v14)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v15 = v10;
        WTF::fastFree(v14, a2);
        v10 = v15;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

double WebCore::BaseDateAndTimeInputType::valueAsDate(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  WTF::StringImpl *v17;
  double v18;
  WTF::StringImpl *v20;
  __int16 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD **)(v2 + 8);
  else
    v3 = 0;
  v4 = (_DWORD *)v3[30];
  if (v4[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v23);
    goto LABEL_22;
  }
  v5 = (WTF::StringImpl *)v3[27];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v23 = v5;
    goto LABEL_22;
  }
  v6 = v3[13];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_8:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_8;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v10)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v23);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v23);
  if (!v23)
  {
    v23 = 0;
    v4 = (_DWORD *)v3[30];
    goto LABEL_18;
  }
LABEL_22:
  v20 = 0;
  v21 = 0;
  v22 = 2;
  (*(void (**)(uint64_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v24, this, &v23, &v20);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((v25 & 0xFFFFFFFD) != 0)
  {
    LOBYTE(v23) = 0;
    WebCore::Decimal::toString((WTF::StringImpl *)&v24, &v20);
    WTF::String::toDouble((WTF::String *)&v20, (BOOL *)&v23);
    v16 = v15;
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = NAN;
    if ((_BYTE)v23)
      v18 = v16;
  }
  else
  {
    v18 = NAN;
  }
  return v18 / 1000.0;
}

double WebCore::BaseDateAndTimeInputType::valueAsDouble(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  __int16 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD **)(v2 + 8);
  else
    v3 = 0;
  v4 = (_DWORD *)v3[30];
  if (v4[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v22);
    goto LABEL_22;
  }
  v5 = (WTF::StringImpl *)v3[27];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v22 = v5;
    goto LABEL_22;
  }
  v6 = v3[13];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_8:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_8;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v10)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v22);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v22);
  if (!v22)
  {
    v22 = 0;
    v4 = (_DWORD *)v3[30];
    goto LABEL_18;
  }
LABEL_22:
  v19 = 0;
  v20 = 0;
  v21 = 2;
  (*(void (**)(uint64_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v23, this, &v22, &v19);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((v24 & 0xFFFFFFFD) == 0)
    return NAN;
  LOBYTE(v22) = 0;
  WebCore::Decimal::toString((WTF::StringImpl *)&v23, &v19);
  WTF::String::toDouble((WTF::String *)&v19, (BOOL *)&v22);
  v16 = v15;
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (!(_BYTE)v22)
    return NAN;
  return v16;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::setValueAsDate@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  v4 = a1[3];
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, double))(*a1 + 968))(&v9, a3 * 1000.0);
  WebCore::HTMLInputElement::setValue(v5, (uint64_t)&v9, 0, 0, (uint64_t)v10);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::accessibilityValueAsDate(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int16 v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  __int16 v49;
  BOOL v50;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD **)(v2 + 8);
  else
    v3 = 0;
  v4 = (_DWORD *)v3[30];
  if (v4[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v35);
    goto LABEL_22;
  }
  v5 = (WTF::StringImpl *)v3[27];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v35 = v5;
    goto LABEL_22;
  }
  v6 = v3[13];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_8:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_8;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v10)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v35);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v35);
  if (!v35)
  {
    v35 = 0;
    v4 = (_DWORD *)v3[30];
    goto LABEL_18;
  }
LABEL_22:
  v32 = 0;
  v33 = 0;
  v34 = 2;
  (*(void (**)(uint64_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v36, this, &v35, &v32);
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v38 & 0xFFFFFFFD) == 0)
    goto LABEL_79;
  LOBYTE(v35) = 0;
  WebCore::Decimal::toString((WTF::StringImpl *)&v36, &v32);
  WTF::String::toDouble((WTF::String *)&v32, (BOOL *)&v35);
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (!(_BYTE)v35)
  {
LABEL_79:
    v14 = *((_QWORD *)this + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 208);
      if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
      {
        LOBYTE(v36) = 0;
        BYTE4(v36) = 0;
        v37 = 0;
        LOBYTE(v38) = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v17 = *(unsigned int *)(v14 + 140);
        if ((_DWORD)v17)
        {
          v18 = *(uint64_t **)(v14 + 128);
          v19 = 8 * v17;
          do
          {
            v20 = *v18++;
            (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v20 + 1256))(v20, &v36, 0);
            v19 -= 8;
          }
          while (v19);
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v16 + 32))(&v35, v16, &v36);
        result = v35;
        if (!v35)
          goto LABEL_43;
      }
      else
      {
        result = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)result += 2;
        v35 = result;
        if (!result)
          goto LABEL_43;
      }
      if (*((_DWORD *)result + 1))
      {
LABEL_60:
        v32 = 0;
        v33 = 0;
        v34 = 2;
        (*(void (**)(uint64_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v36, this, &v35, &v32);
        if ((v38 & 0xFFFFFFFD) != 0)
        {
          v50 = 0;
          WebCore::Decimal::toString((WTF::StringImpl *)&v36, &v32);
          WTF::String::toDouble((WTF::String *)&v32, &v50);
          v31 = v32;
          v32 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        result = v35;
        v35 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
LABEL_43:
      v21 = *((_QWORD *)this + 8);
      v22 = *(_QWORD *)(v21 + 208);
      if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
      {
        LOBYTE(v36) = 0;
        BYTE4(v36) = 0;
        v37 = 0;
        LOBYTE(v38) = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v24 = *(unsigned int *)(v21 + 140);
        if ((_DWORD)v24)
        {
          v25 = *(uint64_t **)(v21 + 128);
          v26 = 8 * v24;
          do
          {
            v27 = *v25++;
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v27 + 1256))(v27, &v36, 1);
            v26 -= 8;
          }
          while (v26);
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v23 + 32))(&v32, v23, &v36);
        v28 = v32;
        result = v35;
      }
      else
      {
        v28 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v28 += 2;
      }
      v32 = 0;
      v35 = v28;
      if (!result)
      {
LABEL_56:
        if (!v28)
          return result;
        if (!*((_DWORD *)v28 + 1))
        {
          v35 = 0;
          if (*(_DWORD *)v28 == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v12);
          *(_DWORD *)v28 -= 2;
          return result;
        }
        goto LABEL_60;
      }
      v29 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        WTF::StringImpl::destroy(result, v12);
        result = v32;
        v32 = 0;
        if (!result)
          goto LABEL_55;
        v29 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          goto LABEL_55;
        }
      }
      *(_DWORD *)result = v29;
LABEL_55:
      v28 = v35;
      goto LABEL_56;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::setValueAsDecimal@<X0>(WebCore::Decimal *this@<X1>, WebCore::BaseDateAndTimeInputType *a2@<X0>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __n128 v10;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  _BYTE v17[8];
  WTF::StringImpl *v18;
  char v19;
  int8x16_t v20[2];
  char v21;

  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  if ((*((_DWORD *)this + 3) & 0xFFFFFFFD) == 0)
    goto LABEL_11;
  LOBYTE(v16) = 0;
  WebCore::Decimal::toString(this, (WTF::StringImpl **)v20);
  WTF::String::toDouble((WTF::String *)v20, (BOOL *)&v16);
  v11 = v10.n128_f64[0];
  v12 = (WTF::StringImpl *)v20[0].i64[0];
  v20[0].i64[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v10.n128_u64[0] = 0x7FF8000000000000;
  if ((_BYTE)v16)
    v10.n128_f64[0] = v11;
  (*(void (**)(int8x16_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, __n128))(*(_QWORD *)a2 + 944))(v20, a2, v10);
  if (v21)
    WebCore::BaseDateAndTimeInputType::serializeWithComponents(a2, v20, (uint64_t *)&v16);
  else
LABEL_11:
    v16 = 0;
  WebCore::HTMLInputElement::setValue(v8, (uint64_t)&v16, a3, 0, (uint64_t)v17);
  if (v19)
  {
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

uint64_t *WebCore::BaseDateAndTimeInputType::serialize@<X0>(uint64_t *this@<X0>, const WebCore::Decimal *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::BaseDateAndTimeInputType *v4;
  WTF::StringImpl *v5;
  __n128 v6;
  double v7;
  WTF::StringImpl *v8;
  int8x16_t v9[2];
  char v10;
  BOOL v11;

  if ((*((_DWORD *)a2 + 3) & 0xFFFFFFFD) != 0)
  {
    v4 = (WebCore::BaseDateAndTimeInputType *)this;
    v11 = 0;
    WebCore::Decimal::toString(a2, (WTF::StringImpl **)v9);
    WTF::String::toDouble((WTF::String *)v9, &v11);
    v7 = v6.n128_f64[0];
    v8 = (WTF::StringImpl *)v9[0].i64[0];
    v9[0].i64[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v6.n128_u64[0] = 0x7FF8000000000000;
    if (v11)
      v6.n128_f64[0] = v7;
    this = (*(_QWORD *(**)(int8x16_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, __n128))(*(_QWORD *)v4 + 944))(v9, v4, v6);
    if (v10)
      return WebCore::BaseDateAndTimeInputType::serializeWithComponents(v4, v9, a3);
  }
  *a3 = 0;
  return this;
}

BOOL WebCore::BaseDateAndTimeInputType::typeMismatchFor(WebCore::BaseDateAndTimeInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[4];
  char v6;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v4 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v4)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, WebCore::BaseDateAndTimeInputType *, _QWORD, unint64_t))(*(_QWORD *)this + 936))(v5, this, *(_QWORD *)(v2 + 8), v4 | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32));
  return v6 == 0;
}

BOOL WebCore::BaseDateAndTimeInputType::typeMismatch(WebCore::BaseDateAndTimeInputType *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD v17[4];
  char v18;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD **)(v3 + 8);
  else
    v4 = 0;
  v5 = (_DWORD *)v4[30];
  if (v5[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v5, &v16);
  }
  else
  {
    v6 = (WTF::StringImpl *)v4[27];
    if (v6)
    {
      *(_DWORD *)v6 += 2;
      v16 = v6;
      goto LABEL_21;
    }
    v7 = v4[13];
    if (v7
      && ((v8 = *(_DWORD *)(v7 + 4), (v8 & 1) != 0)
        ? (v9 = *(_QWORD *)(v7 + 40), LODWORD(v10) = *(_DWORD *)(v7 + 52))
        : (v9 = v7 + 32, LODWORD(v10) = v8 >> 5),
          (_DWORD)v10))
    {
      v10 = v10;
      v11 = (_QWORD *)(v9 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v10)
        {
          v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (*v11)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 296))(&v16);
      v6 = v16;
      if (v16)
        goto LABEL_21;
      v16 = 0;
      v5 = (_DWORD *)v4[30];
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 64))(&v16);
  }
  v6 = v16;
  if (!v16)
    return 0;
LABEL_21:
  v15 = *((unsigned int *)v6 + 1);
  if ((_DWORD)v15)
  {
    (*(void (**)(_QWORD *__return_ptr, WebCore::BaseDateAndTimeInputType *, _QWORD, unint64_t))(*(_QWORD *)this + 936))(v17, this, *((_QWORD *)v6 + 1), v15 | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32));
    v13 = v18 == 0;
    v6 = v16;
    v16 = 0;
    if (!v6)
      return v13;
  }
  else
  {
    v13 = 0;
    v16 = 0;
  }
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, a2);
  else
    *(_DWORD *)v6 -= 2;
  return v13;
}

uint64_t WebCore::BaseDateAndTimeInputType::hasBadInput(WebCore::BaseDateAndTimeInputType *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD **)(v3 + 8);
  else
    v4 = 0;
  v5 = (_DWORD *)v4[30];
  if (v5[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v5, &v21);
LABEL_16:
    v6 = v21;
    if (!v21)
      goto LABEL_17;
    goto LABEL_29;
  }
  v6 = (WTF::StringImpl *)v4[27];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v21 = v6;
  }
  else
  {
    v7 = v4[13];
    if (v7
      && ((v8 = *(_DWORD *)(v7 + 4), (v8 & 1) != 0)
        ? (v9 = *(_QWORD *)(v7 + 40), LODWORD(v10) = *(_DWORD *)(v7 + 52))
        : (v9 = v7 + 32, LODWORD(v10) = v8 >> 5),
          (_DWORD)v10))
    {
      v10 = v10;
      v11 = (_QWORD *)(v9 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v10)
        {
          v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (!*v11)
      goto LABEL_15;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 296))(&v21);
    v6 = v21;
    if (!v21)
    {
      v21 = 0;
      v5 = (_DWORD *)v4[30];
LABEL_15:
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 64))(&v21);
      goto LABEL_16;
    }
  }
LABEL_29:
  if (*((_DWORD *)v6 + 1))
  {
    v18 = 0;
    v21 = 0;
LABEL_24:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
    return v18;
  }
LABEL_17:
  v13 = *((_QWORD *)this + 8);
  if (v13 && (v14 = *(unsigned int *)(v13 + 140), (_DWORD)v14))
  {
    v15 = *(uint64_t **)(v13 + 128);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1248))(v17);
      if ((v18 & 1) != 0)
        break;
      v19 = v16;
      v16 -= 8;
    }
    while (v19);
    v6 = v21;
  }
  else
  {
    v18 = 0;
  }
  v21 = 0;
  if (v6)
    goto LABEL_24;
  return v18;
}

uint64_t WebCore::BaseDateAndTimeInputType::defaultValueForStepUp@<X0>(WebCore::BaseDateAndTimeInputType *this@<X0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  uint64_t result;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  WTF::WallTime::now(this);
  v4 = v3 * 1000.0;
  result = WTF::calculateLocalTimeOffset();
  v6 = v4 + (double)(int)((double)SHIDWORD(result) / 60000.0) * 60000.0;
  if (COERCE__INT64(fabs(v6)) > 0x7FEFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
    if (fabs(v6) == INFINITY)
    {
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 16) = v6 < 0.0;
    }
    else
    {
      *(_QWORD *)(a2 + 12) = 2;
    }
  }
  else
  {
    v7 = (const char *)WTF::numberToString();
    v8 = (uint64_t)v7;
    v9 = 0x100000000;
    if (v7)
      v9 = strlen(v7) | 0x100000000;
    return WebCore::Decimal::fromString(v8, v9, a2);
  }
  return result;
}

double WebCore::BaseDateAndTimeInputType::parseToNumber@<D0>(WebCore::BaseDateAndTimeInputType *this@<X0>, const WebCore::Decimal *a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v6;
  double v7;
  _QWORD v9[4];
  char v10;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 936))(v9);
  if (v10)
  {
    v7 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v9);
    *(double *)&v6 = WebCore::Decimal::fromDouble(v7, a3);
  }
  else
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a2 + 2);
  }
  return *(double *)&v6;
}

uint64_t *WebCore::BaseDateAndTimeInputType::serializeWithComponents@<X0>(WebCore::BaseDateAndTimeInputType *this@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  _BYTE v11[12];
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v15 = 3;
  v13 = 0;
  v14 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 200))(v5, &v13))
  {
    v10 = 1;
    v8 = 60000;
    v9 = 0;
    WebCore::Decimal::remainder((WebCore::Decimal *)&v13, (const WebCore::Decimal *)&v8, (uint64_t)v11);
    v6 = 0;
    if (v12 != 3)
    {
      v10 = 1;
      v8 = 1000;
      v9 = 0;
      WebCore::Decimal::remainder((WebCore::Decimal *)&v13, (const WebCore::Decimal *)&v8, (uint64_t)v11);
      if (v12 == 3)
        v6 = 1;
      else
        v6 = 2;
    }
  }
  else
  {
    v6 = 0;
  }
  return WebCore::DateComponents::toString(a2, v6, a3);
}

uint64_t *WebCore::BaseDateAndTimeInputType::serializeWithMilliseconds@<X0>(uint64_t *this@<X0>, double a2@<D0>, uint64_t *a3@<X8>)
{
  WebCore::BaseDateAndTimeInputType *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  double v9;
  double v10;
  WTF::StringImpl *v11;
  _BYTE v12[12];
  int v13;
  BOOL v14;
  int8x16_t v15[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = (WebCore::BaseDateAndTimeInputType *)this;
    v5 = (const char *)WTF::numberToString();
    v6 = (uint64_t)v5;
    v7 = 0x100000000;
    if (v5)
      v7 = strlen(v5) | 0x100000000;
    this = (uint64_t *)WebCore::Decimal::fromString(v6, v7, (uint64_t)v12);
    if ((v13 & 0xFFFFFFFD) != 0)
    {
      v14 = 0;
      WebCore::Decimal::toString((WTF::StringImpl *)v12, (WTF::StringImpl **)v15);
      WTF::String::toDouble((WTF::String *)v15, &v14);
      v10 = v9;
      v11 = (WTF::StringImpl *)v15[0].i64[0];
      v15[0].i64[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v8);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (!v14)
        v10 = NAN;
      this = (*(_QWORD *(**)(int8x16_t *__return_ptr, WebCore::BaseDateAndTimeInputType *, double))(*(_QWORD *)v4 + 944))(v15, v4, v10);
      if (v16)
        return WebCore::BaseDateAndTimeInputType::serializeWithComponents(v4, v15, a3);
    }
  }
  *a3 = 0;
  return this;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::localizeValue@<X0>(WebCore::BaseDateAndTimeInputType *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _QWORD v20[4];
  char v21;

  v6 = *a2;
  if (*a2)
  {
    v7 = *((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = (WTF::StringImpl *)(*(_QWORD *(**)(_QWORD *__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t, unint64_t))(*(_QWORD *)this + 936))(v20, this, v7, v8);
  if (v21)
  {
    v10 = *((_QWORD *)this + 3);
    if (v10)
      v10 = *(_QWORD *)(v10 + 8);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
    *(_DWORD *)(v11 + 24) += 2;
    if ((*(_BYTE *)(v10 + 30) & 8) != 0)
      goto LABEL_36;
    v18 = *(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      v12 = (WTF::StringImpl **)(v18 + 64);
      if (*(_QWORD *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 0x40))
        goto LABEL_10;
    }
    if ((*(_BYTE *)(v10 + 22) & 8) != 0)
    {
LABEL_36:
      if (*(_QWORD *)(v11 + 1720))
        v12 = (WTF::StringImpl **)(v11 + 1720);
      else
        v12 = (WTF::StringImpl **)(v11 + 1712);
    }
    else
    {
      v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
LABEL_10:
    result = WebCore::Document::getCachedLocale((WebCore::Document *)v11, v12);
    v14 = result;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    if (v21)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, _QWORD *, _QWORD))(*(_QWORD *)v14 + 96))(&v19, v14, v20, 0);
      result = v19;
      if (v19 && (v16 = v19, *((_DWORD *)v19 + 1)) || (v16 = *a2) != 0)
        *(_DWORD *)v16 += 2;
      *a3 = v16;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  v17 = *a2;
  if (*a2)
    *(_DWORD *)v17 += 2;
  *a3 = v17;
  return result;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::visibleValue@<X0>(WebCore::BaseDateAndTimeInputType *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(_QWORD **)(v4 + 8);
  else
    v5 = 0;
  v6 = (_DWORD *)v5[30];
  if (v6[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v6, &v16);
    goto LABEL_22;
  }
  v7 = (WTF::StringImpl *)v5[27];
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v16 = v7;
    goto LABEL_22;
  }
  v8 = v5[13];
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
      if ((_DWORD)v11)
      {
LABEL_8:
        v11 = v11;
        v12 = (_QWORD *)(v10 + 8);
        while (1)
        {
          v13 = *(v12 - 1);
          if (v13 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v12 += 2;
          if (!--v11)
          {
            v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v10 = v8 + 32;
      LODWORD(v11) = v9 >> 5;
      if ((_DWORD)v11)
        goto LABEL_8;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v12)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 64))(&v16);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 296))(&v16);
  if (!v16)
  {
    v16 = 0;
    v6 = (_DWORD *)v5[30];
    goto LABEL_18;
  }
LABEL_22:
  WebCore::BaseDateAndTimeInputType::localizeValue(this, &v16, a2);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::BaseDateAndTimeInputType::sanitizeValue@<X0>(_QWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  const WTF::String *v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v3 = a2;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(unsigned int *)(v5 + 4);
    if ((_DWORD)v7)
    {
      this = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _QWORD, unint64_t))(*this + 936))(v8, this, *(_QWORD *)(v5 + 8), v7 | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32));
      if (!v9)
        v3 = (const WTF::String *)MEMORY[0x1E0CBF738];
    }
  }
  v6 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v6 += 2;
  *a3 = v6;
  return this;
}

uint64_t WebCore::BaseDateAndTimeInputType::supportsReadOnly(WebCore::BaseDateAndTimeInputType *this)
{
  return 1;
}

uint64_t WebCore::BaseDateAndTimeInputType::shouldRespectListAttribute(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v1;
  WebCore::BaseDateAndTimeInputType *v3;

  {
    v3 = this;
    WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    this = v3;
    unk_1ECE88AD0 = 0u;
    unk_1ECE88AC0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
  }
  v1 = (*(uint64_t (**)(WebCore::BaseDateAndTimeInputType *))(*(_QWORD *)this + 16))(this);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 200))(&WebCore::RenderTheme::singleton(void)::theme, v1);
}

BOOL WebCore::BaseDateAndTimeInputType::valueMissing(WebCore::BaseDateAndTimeInputType *this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v2 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112)
    && (*(_BYTE *)(v2 + 160) & 0x20) != 0
    || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0)
  {
    return 0;
  }
  if (*(_QWORD *)a2)
    return *(_DWORD *)(*(_QWORD *)a2 + 4) == 0;
  return 1;
}

uint64_t WebCore::BaseDateAndTimeInputType::isKeyboardFocusable(WebCore::BaseDateAndTimeInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((*(unsigned int (**)(uint64_t, WebCore::KeyboardEvent *))(*(_QWORD *)(v4 + 112) + 288))(v4 + 112, a2)
    && (*(_BYTE *)(v4 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(WebCore::Element **)(v5 + 8);
  else
    v6 = 0;
  return WebCore::Element::isFocusable(v6);
}

uint64_t WebCore::BaseDateAndTimeInputType::isMouseFocusable(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return WebCore::Element::isFocusable(*(WebCore::Element **)(v1 + 8));
  else
    return WebCore::Element::isFocusable(0);
}

void WebCore::BaseDateAndTimeInputType::setValue(unsigned int *a1, WTF::StringImpl *a2, int a3, int a4)
{
  WebCore::InputType::setValue((uint64_t)a1, a2, a3, a4);
  if (a3)
    WebCore::BaseDateAndTimeInputType::updateInnerTextValue(a1);
}

unsigned int *WebCore::BaseDateAndTimeInputType::updateInnerTextValue(unsigned int *this)
{
  WebCore::BaseDateAndTimeInputType *v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  void *v5;
  WTF::StringImpl *CachedLocale;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __n128 v21;
  WTF::StringImpl *v22;
  double v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42[2];
  _BYTE v43[24];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  WTF::StringImpl *v47[4];
  char v48;
  _QWORD v49[4];
  char v50;
  unsigned int *v51;
  WTF::StringImpl *v52[2];
  char v53;
  _QWORD v54[3];
  BOOL v55;

  v1 = (WebCore::BaseDateAndTimeInputType *)this;
  if (!*((_BYTE *)this + 16))
  {
    v33 = this[3];
    if ((v33 & 0x15183) != 0)
    {
      if (v33 != 2)
        goto LABEL_2;
      v34 = *((_QWORD *)this + 3);
      if (!v34)
        goto LABEL_2;
      this = *(unsigned int **)(v34 + 8);
      if (!this || (this[58] & 0x2000) == 0)
        goto LABEL_2;
      v35 = (_DWORD *)((char *)v1 + 8);
      ++*((_DWORD *)v1 + 2);
    }
    else
    {
      v35 = this + 2;
      v36 = *((_QWORD *)this + 3);
      ++this[2];
      if (v36)
        this = *(unsigned int **)(v36 + 8);
      else
        this = 0;
    }
    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)this);
    *((_BYTE *)v1 + 16) = 1;
    this = (unsigned int *)(*(uint64_t (**)(WebCore::BaseDateAndTimeInputType *))(*(_QWORD *)v1 + 512))(v1);
    if (*((_DWORD *)v1 + 2) == 1)
      this = (unsigned int *)(*(uint64_t (**)(WebCore::BaseDateAndTimeInputType *))(*(_QWORD *)v1 + 8))(v1);
    else
      *v35 = *((_DWORD *)v1 + 2) - 1;
  }
LABEL_2:
  if (*((_QWORD *)v1 + 8))
  {
    v2 = *((_QWORD *)v1 + 3);
    if (v2)
      v2 = *(_QWORD *)(v2 + 8);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    if ((*(_BYTE *)(v2 + 30) & 8) == 0)
    {
      v32 = *(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL;
      if (v32)
      {
        v4 = (WTF::StringImpl **)(v32 + 64);
        if (*(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x40))
        {
LABEL_9:
          CachedLocale = WebCore::Document::getCachedLocale((WebCore::Document *)v3, v4);
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          v51 = 0;
          v52[0] = 0;
          v52[1] = CachedLocale;
          v53 = 0;
          v7 = *((_QWORD *)v1 + 3);
          if (v7)
            v8 = *(_QWORD **)(v7 + 8);
          else
            v8 = 0;
          v9 = (_DWORD *)v8[30];
          if (v9[3] == 64)
          {
            WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v9, v42);
          }
          else
          {
            v10 = (WTF::StringImpl *)v8[27];
            if (v10)
            {
              *(_DWORD *)v10 += 2;
              v42[0] = v10;
              goto LABEL_27;
            }
            v11 = v8[13];
            if (v11
              && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
                ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
                : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
                  (_DWORD)v14))
            {
              v14 = v14;
              v15 = (_QWORD *)(v13 + 8);
              while (1)
              {
                v16 = *(v15 - 1);
                if (v16 == WebCore::HTMLNames::valueAttr
                  || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                  && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                {
                  break;
                }
                v15 += 2;
                if (!--v14)
                {
                  v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            }
            if (*v15)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 296))(v42);
              v10 = v42[0];
              if (v42[0])
                goto LABEL_27;
              v42[0] = 0;
              v9 = (_DWORD *)v8[30];
            }
            (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 64))(v42);
          }
          v10 = v42[0];
          if (!v42[0])
          {
            v17 = 0;
            v18 = 0x100000000;
            goto LABEL_28;
          }
LABEL_27:
          v17 = *((_QWORD *)v10 + 1);
          v18 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
LABEL_28:
          (*(void (**)(_QWORD *__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t, unint64_t))(*(_QWORD *)v1 + 936))(v49, v1, v17, v18);
          v20 = v42[0];
          v42[0] = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v50)
          {
            (*(void (**)(WebCore::BaseDateAndTimeInputType *, unsigned int **, _QWORD *))(*(_QWORD *)v1 + 952))(v1, &v51, v49);
          }
          else
          {
            (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t))(*(_QWORD *)v1 + 208))(v42, v1, 1);
            v21.n128_u64[1] = *(_QWORD *)&v43[16];
            v45 = *(_OWORD *)&v43[8];
            v46 = v44;
            if ((*(_DWORD *)&v43[20] & 0xFFFFFFFD) != 0)
            {
              v55 = 0;
              WebCore::Decimal::toString((WTF::StringImpl *)&v45, v47);
              WTF::String::toDouble((WTF::String *)v47, &v55);
              v23 = v21.n128_f64[0];
              v24 = v47[0];
              v47[0] = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v22);
                else
                  *(_DWORD *)v24 -= 2;
              }
              v21.n128_u64[0] = 0x7FF8000000000000;
              if (v55)
                v21.n128_f64[0] = v23;
            }
            else if (*(_DWORD *)&v43[20])
            {
              v21.n128_u64[0] = 0x7FF8000000000000;
            }
            else
            {
              v21.n128_u64[0] = 0x7FF0000000000000;
              if ((_DWORD)v46 == 1)
                v21.n128_f64[0] = -INFINITY;
            }
            (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::BaseDateAndTimeInputType *, __n128))(*(_QWORD *)v1 + 944))(v47, v1, v21);
            if (v48)
            {
              (*(void (**)(WebCore::BaseDateAndTimeInputType *, unsigned int **, WTF::StringImpl **))(*(_QWORD *)v1 + 952))(v1, &v51, v47);
            }
            else
            {
              *(_OWORD *)v42 = 0u;
              memset(v43, 0, 17);
              (*(void (**)(WebCore::BaseDateAndTimeInputType *, unsigned int **, WTF::StringImpl **))(*(_QWORD *)v1 + 952))(v1, &v51, v42);
            }
          }
          v42[0] = (WTF::StringImpl *)&off_1E33AF1F8;
          LOBYTE(v42[1]) = 0;
          if ((WebCore::DateTimeFormat::parse((uint64_t *)&v51, (WTF::StringImpl *)v42) & 1) == 0
            || ((*(uint64_t (**)(WebCore::BaseDateAndTimeInputType *, _QWORD))(*(_QWORD *)v1 + 960))(v1, LOBYTE(v42[1])) & 1) == 0)
          {
            WTF::String::operator=((uint64_t *)&v51, v52);
          }
          v25 = *((_QWORD *)v1 + 8);
          if (v50)
          {
            WebCore::DateTimeEditElement::setValueAsDate(v25, (uint64_t)&v51, (uint64_t)v49);
          }
          else
          {
            WebCore::DateTimeEditElement::layout(v25, (uint64_t)&v51);
            v27 = *(unsigned int *)(v25 + 140);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)(v25 + 128);
              v29 = 8 * v27;
              do
              {
                v30 = *v28++;
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 1264))(v30, 0);
                v29 -= 8;
              }
              while (v29);
            }
          }
          v31 = v52[0];
          v52[0] = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
          this = v51;
          v51 = 0;
          if (this)
          {
            if (*this == 2)
              return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
            else
              *this -= 2;
          }
          return this;
        }
      }
      if ((*(_BYTE *)(v2 + 22) & 8) == 0)
      {
        v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        goto LABEL_9;
      }
    }
    if (*(_QWORD *)(v3 + 1720))
      v4 = (WTF::StringImpl **)(v3 + 1720);
    else
      v4 = (WTF::StringImpl **)(v3 + 1712);
    goto LABEL_9;
  }
  v37 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
                  + 80);
  if (v37 && (*(_WORD *)(v37 + 28) & 0x10) != 0)
  {
    *(_DWORD *)(v37 + 24) += 2;
    WebCore::BaseDateAndTimeInputType::visibleValue(v1, v42);
    v38 = v42[0];
    if (v42[0])
    {
      if (!*((_DWORD *)v42[0] + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v41);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    WebCore::HTMLElement::setInnerText((WebCore::ContainerNode *)v37, (WTF *)v42, v54);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v54, v39);
    this = (unsigned int *)v42[0];
    v42[0] = 0;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v40);
      else
        *this -= 2;
    }
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v37, v40);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  return this;
}

_QWORD *WebCore::BaseDateAndTimeInputType::handleDOMActivateEvent(_QWORD *this, WebCore::Event *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(this[3] + 8);
  if ((*(_BYTE *)(v2 + 160) & 0x18) == 0)
  {
    v3 = this;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, WebCore::Event *))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112, a2);
    if ((!(_DWORD)this || (*(_BYTE *)(v2 + 160) & 0x20) == 0)
      && (*(_QWORD *)(*(_QWORD *)(v3[3] + 8) + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v3[3] + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B87E88);
      }
      this = (_QWORD *)WTF::isMainThread((WTF *)this);
      if ((_DWORD)this)
      {
        {
          if (WebCore::currentToken(void)::token
            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1
            && !v3[7])
          {
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 360))(v3);
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
    }
  }
  return this;
}

void WebCore::BaseDateAndTimeInputType::showPicker(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[8];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 24);
          if (v4)
          {
            if (*(_QWORD *)(v4 + 8))
            {
              memset(v13, 0, 125);
              if (WebCore::BaseDateAndTimeInputType::setupDateTimeChooserParameters(this, (WTF::StringImpl **)v13))
              {
                v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
                if (v7)
                {
                  v8 = *(_QWORD *)(v7 + 8);
                  if (v8)
                  {
                    v9 = *(_QWORD *)(v8 + 24);
                    if (v9)
                    {
                      v10 = *(_QWORD *)(v9 + 8);
                      if (v10)
                      {
                        if (*(_QWORD *)(v10 + 48))
                        {
                          v11 = *((_QWORD *)this + 7);
                          *((_QWORD *)this + 7) = 0;
                          if (v11)
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
                            v12 = *((_QWORD *)this + 7);
                            if (v12)
                              (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 24))(v12, v13);
                          }
                        }
                      }
                    }
                  }
                }
              }
              WebCore::DateTimeChooserParameters::~DateTimeChooserParameters((WebCore::DateTimeChooserParameters *)v13, v6);
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::BaseDateAndTimeInputType::setupDateTimeChooserParameters(WebCore::BaseDateAndTimeInputType *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  char v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  double v34;
  double v35;
  WTF::StringImpl *v36;
  double v37;
  double v38;
  WTF::StringImpl *v39;
  WebCore::RenderObject *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ScrollView *v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  const WebCore::RenderStyle *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  __n128 v70;
  int v71;
  int v72;
  int v73;
  WTF::StringImpl *v74;
  BOOL v75;
  BOOL v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  const WTF::StringImpl *v83;
  int isValidValue;
  WTF::StringImpl *v85;
  unsigned int v86;
  _DWORD *v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  __int16 v106;
  BOOL v107;
  BOOL v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl **v112;
  WTF::StringImpl **v113;
  uint64_t *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  __int16 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  int v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8);
  v7 = *((_QWORD *)v6 + 66);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8 || !*(_QWORD *)(v8 + 288))
    return 0;
  v10 = *(WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 112) + 328))(v5 + 112);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = *a2;
  *a2 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)v5);
  a2[11] = v12;
  WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v5);
  a2[12] = v14;
  *((_BYTE *)a2 + 120) = *(_BYTE *)(v5 + 168) & 1;
  if ((*(_QWORD *)(*((_QWORD *)v6 + 85) + 680) & 0x200000000000) != 0)
  {
    if ((*(_WORD *)(v5 + 30) & 8) != 0)
      goto LABEL_23;
    if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v24 = *(WTF::StringImpl **)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
      if (v24)
        goto LABEL_26;
    }
    if ((*(_BYTE *)(v5 + 22) & 8) != 0)
    {
LABEL_23:
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
      v21 = (WTF::StringImpl **)(v20 + 1720);
      v22 = *(_QWORD *)(v20 + 1720);
      v23 = (WTF::StringImpl **)(v20 + 1712);
      if (v22)
        v23 = v21;
    }
    else
    {
      v23 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v24 = *v23;
    if (!*v23)
    {
      v27 = 1;
      goto LABEL_38;
    }
LABEL_26:
    v25 = *(_DWORD *)v24;
    v26 = *((_DWORD *)v24 + 1);
    *(_DWORD *)v24 += 2;
    v27 = 0;
    if (v26)
    {
      v28 = 0;
      *(_DWORD *)v24 = v25 + 4;
      v29 = v24;
      goto LABEL_41;
    }
LABEL_38:
    v28 = 1;
    WTF::defaultLanguage();
    v29 = v125;
    v125 = 0;
    if (v29)
    {
      v119 = v29;
      if ((*((_BYTE *)v29 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v30 = v119;
        v29 = (WTF::StringImpl *)v140;
        *(_QWORD *)&v140 = 0;
        v119 = 0;
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v13);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
LABEL_41:
    v31 = a2[3];
    a2[3] = v29;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v13);
        if (v28)
        {
LABEL_45:
          v32 = v125;
          v125 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v13);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
LABEL_48:
        if ((v27 & 1) != 0)
          goto LABEL_51;
        if (*(_DWORD *)v24 != 2)
        {
          *(_DWORD *)v24 -= 2;
          goto LABEL_51;
        }
        v18 = v24;
        goto LABEL_236;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v28)
      goto LABEL_45;
    goto LABEL_48;
  }
  WTF::defaultLanguage();
  v15 = v138;
  v138 = 0;
  if (v15)
  {
    v119 = v15;
    if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v16 = v119;
      v15 = (WTF::StringImpl *)v140;
      *(_QWORD *)&v140 = 0;
      v119 = 0;
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v17 = a2[3];
  a2[3] = v15;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v138;
  v138 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
      goto LABEL_51;
    }
LABEL_236:
    WTF::StringImpl::destroy(v18, v13);
  }
LABEL_51:
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::BaseDateAndTimeInputType *, _QWORD))(*(_QWORD *)this + 208))(&v119, this, 0);
  if (!v124)
  {
    a2[13] = (WTF::StringImpl *)0x3FF0000000000000;
    v38 = 0.0;
    goto LABEL_64;
  }
  v140 = v120;
  v141 = v121;
  if ((HIDWORD(v120) & 0xFFFFFFFD) == 0)
  {
    if (!HIDWORD(v120))
    {
      if ((_DWORD)v141 == 1)
        v35 = -INFINITY;
      else
        v35 = INFINITY;
      goto LABEL_57;
    }
LABEL_248:
    v35 = NAN;
    goto LABEL_57;
  }
  LOBYTE(v136) = 0;
  WebCore::Decimal::toString((WTF::StringImpl *)&v140, &v138);
  WTF::String::toDouble((WTF::String *)&v138, (BOOL *)&v136);
  v35 = v34;
  v36 = v138;
  v138 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v33);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (!(_BYTE)v136)
    goto LABEL_248;
LABEL_57:
  *((double *)a2 + 13) = v35;
  v140 = v122;
  v141 = v123;
  if ((HIDWORD(v122) & 0xFFFFFFFD) != 0)
  {
    LOBYTE(v136) = 0;
    WebCore::Decimal::toString((WTF::StringImpl *)&v140, &v138);
    WTF::String::toDouble((WTF::String *)&v138, (BOOL *)&v136);
    v38 = v37;
    v39 = v138;
    v138 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v33);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (!(_BYTE)v136)
      goto LABEL_250;
  }
  else
  {
    if (HIDWORD(v122))
    {
LABEL_250:
      v38 = NAN;
      goto LABEL_64;
    }
    if ((_DWORD)v141 == 1)
      v38 = -INFINITY;
    else
      v38 = INFINITY;
  }
LABEL_64:
  *((double *)a2 + 14) = v38;
  v40 = (WebCore::RenderObject *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL);
  if (v40)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B88CF0);
    }
    v41 = *((_QWORD *)v6 + 66);
    if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
      v43 = *(WebCore::ScrollView **)(v42 + 288);
    else
      v43 = 0;
    *(_QWORD *)&v140 = WebCore::RenderObject::absoluteBoundingBoxRect(v40, 1, 0);
    *((_QWORD *)&v140 + 1) = v44;
    a2[1] = (WTF::StringImpl *)WebCore::ScrollView::contentsToRootView(v43, (const WebCore::IntRect *)&v140);
    a2[2] = v33;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
  }
  v45 = *(_DWORD **)(v5 + 240);
  if (v45[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v45, &v140);
    goto LABEL_90;
  }
  v46 = *(_DWORD **)(v5 + 216);
  if (v46)
  {
    *v46 += 2;
    *(_QWORD *)&v140 = v46;
    goto LABEL_90;
  }
  v47 = *(_QWORD *)(v5 + 104);
  if (v47)
  {
    v48 = *(_DWORD *)(v47 + 4);
    if ((v48 & 1) != 0)
    {
      v49 = *(_QWORD *)(v47 + 40);
      LODWORD(v50) = *(_DWORD *)(v47 + 52);
      if ((_DWORD)v50)
      {
LABEL_75:
        v50 = v50;
        v51 = (_QWORD *)(v49 + 8);
        while (1)
        {
          v52 = *(v51 - 1);
          if (v52 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v52 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v52 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_84;
          }
          v51 += 2;
          if (!--v50)
          {
            v51 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_84;
          }
        }
      }
    }
    else
    {
      v49 = v47 + 32;
      LODWORD(v50) = v48 >> 5;
      if ((_DWORD)v50)
        goto LABEL_75;
    }
  }
  v51 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_84:
  if (!*v51)
  {
LABEL_85:
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v45 + 64))(&v140);
    goto LABEL_90;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v45 + 296))(&v140);
  if (!(_QWORD)v140)
  {
    *(_QWORD *)&v140 = 0;
    v45 = *(_DWORD **)(v5 + 240);
    goto LABEL_85;
  }
LABEL_90:
  v53 = (WTF::StringImpl *)v140;
  *(_QWORD *)&v140 = 0;
  v54 = a2[4];
  a2[4] = v53;
  if (v54)
  {
    v55 = *(_DWORD *)v54 - 2;
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::destroy(v54, v33);
      v54 = (WTF::StringImpl *)v140;
      *(_QWORD *)&v140 = 0;
      if (!v54)
        goto LABEL_93;
      v55 = *(_DWORD *)v54 - 2;
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, v117);
        goto LABEL_93;
      }
    }
    *(_DWORD *)v54 = v55;
  }
LABEL_93:
  LOBYTE(v140) = 0;
  LOBYTE(v141) = 0;
  v57 = (const WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 264))(v5, &v140);
  if ((_BYTE)v141)
  {
    v58 = (WTF::StringImpl *)*((_QWORD *)&v140 + 1);
    *((_QWORD *)&v140 + 1) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v56);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  *((_BYTE *)a2 + 121) = (*((_DWORD *)v57 + 10) & 0x4000000) != 0;
  *((_BYTE *)a2 + 122) = WebCore::Document::useDarkAppearance(v6, v57);
  v59 = *(_DWORD **)(v5 + 240);
  if (v59[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v59, &v138);
    goto LABEL_113;
  }
  v60 = *(WTF::StringImpl **)(v5 + 216);
  if (v60)
  {
    *(_DWORD *)v60 += 2;
    v138 = v60;
    goto LABEL_118;
  }
  v61 = *(_QWORD *)(v5 + 104);
  if (v61)
  {
    v62 = *(_DWORD *)(v61 + 4);
    if ((v62 & 1) != 0)
    {
      v63 = *(_QWORD *)(v61 + 40);
      LODWORD(v64) = *(_DWORD *)(v61 + 52);
      if ((_DWORD)v64)
      {
LABEL_102:
        v64 = v64;
        v65 = (_QWORD *)(v63 + 8);
        while (1)
        {
          v66 = *(v65 - 1);
          if (v66 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v66 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v66 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_111;
          }
          v65 += 2;
          if (!--v64)
          {
            v65 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_111;
          }
        }
      }
    }
    else
    {
      v63 = v61 + 32;
      LODWORD(v64) = v62 >> 5;
      if ((_DWORD)v64)
        goto LABEL_102;
    }
  }
  v65 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_111:
  if (*v65)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v59 + 296))(&v138);
    v60 = v138;
    if (v138)
      goto LABEL_118;
    v138 = 0;
    v59 = *(_DWORD **)(v5 + 240);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v59 + 64))(&v138);
LABEL_113:
  v60 = v138;
  if (!v138)
  {
    v67 = 0;
    v68 = 0x100000000;
    goto LABEL_119;
  }
LABEL_118:
  v67 = *((_QWORD *)v60 + 1);
  v68 = *((unsigned int *)v60 + 1) | ((unint64_t)((*((_DWORD *)v60 + 4) >> 2) & 1) << 32);
LABEL_119:
  (*(void (**)(__int128 *__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t, unint64_t))(*(_QWORD *)this + 936))(&v140, this, v67, v68);
  v71 = BYTE12(v142);
  v72 = v140;
  v73 = DWORD1(v140);
  v74 = v138;
  v138 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v69);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (v71 && v73)
  {
    v75 = 1;
  }
  else
  {
    v75 = 1;
    (*(void (**)(__int128 *__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t))(*(_QWORD *)this
                                                                                                 + 208))(&v140, this, 1);
    v136 = v142;
    v137 = v143;
    v135 = 1;
    v133 = (WTF::StringImpl *)60000;
    v134 = 0;
    v70.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v136, (const WebCore::Decimal *)&v133, (uint64_t)&v138);
    if (v139 == 3)
    {
      v129 = v144;
      v130 = v145;
      v128 = 1;
      v126 = 60000;
      v127 = 0;
      v70.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v129, (const WebCore::Decimal *)&v126, (uint64_t)&v131);
      v75 = v132 != 3;
    }
  }
  *((_BYTE *)a2 + 123) = v75;
  if (v71 && v72)
  {
    v76 = 1;
  }
  else
  {
    v76 = 1;
    (*(void (**)(__int128 *__return_ptr, WebCore::BaseDateAndTimeInputType *, uint64_t, __n128))(*(_QWORD *)this + 208))(&v140, this, 1, v70);
    v136 = v142;
    v137 = v143;
    v135 = 1;
    v133 = (WTF::StringImpl *)1000;
    v134 = 0;
    WebCore::Decimal::remainder((WebCore::Decimal *)&v136, (const WebCore::Decimal *)&v133, (uint64_t)&v138);
    if (v139 == 3)
    {
      v129 = v144;
      v130 = v145;
      v128 = 1;
      v126 = 1000;
      v127 = 0;
      WebCore::Decimal::remainder((WebCore::Decimal *)&v129, (const WebCore::Decimal *)&v126, (uint64_t)&v131);
      v76 = v132 != 3;
    }
  }
  *((_BYTE *)a2 + 124) = v76;
  WebCore::HTMLInputElement::dataList(v5, &v138);
  v78 = v138;
  if (!v138)
    return 1;
  *(_QWORD *)&v136 = v138;
  v79 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v136, v77);
  if (v79)
  {
    v81 = (WTF::StringImpl *)v79;
LABEL_133:
    WebCore::HTMLOptionElement::label(v81, v80);
    WebCore::HTMLOptionElement::value(v81, v82, &v133);
    isValidValue = WebCore::InputType::isValidValue(*(WebCore::InputType **)(v5 + 240), (const WTF::String *)&v133);
    v85 = v133;
    if (!isValidValue
      || (!v133 ? (v86 = 0) : (v86 = *((_DWORD *)v133 + 1)),
          (v87 = *(_DWORD **)(v5 + 240), (v88 = v87[3] & 0x2A8820) != 0)
       && (v89 = *(_DWORD *)(v5 + 176), v89 >= 1)
       && v86
       && v89 > v86))
    {
LABEL_171:
      v133 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v80);
        else
          *(_DWORD *)v85 -= 2;
      }
      v104 = (WTF::StringImpl *)v140;
      *(_QWORD *)&v140 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
          WTF::StringImpl::destroy(v104, v80);
        else
          *(_DWORD *)v104 -= 2;
      }
      while (1)
      {
        v105 = (WTF::StringImpl *)*((_QWORD *)v81 + 10);
        if (!v105)
          break;
LABEL_178:
        while (1)
        {
          v81 = v105;
          v106 = *((_WORD *)v105 + 14);
          if ((v106 & 0x10) != 0
            && *(_QWORD *)(*((_QWORD *)v81 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            break;
          }
          if ((v106 & 4) != 0)
          {
            v105 = (WTF::StringImpl *)*((_QWORD *)v81 + 10);
            if (v105)
              continue;
          }
          if (v81 == v78)
            goto LABEL_222;
          while (1)
          {
            v105 = (WTF::StringImpl *)*((_QWORD *)v81 + 7);
            if (v105)
              break;
            v81 = (WTF::StringImpl *)*((_QWORD *)v81 + 4);
            if (v81)
              v107 = v81 == v78;
            else
              v107 = 1;
            if (v107)
              goto LABEL_222;
          }
        }
        if (!*((_BYTE *)v81 + 112))
        {
          v109 = *((_QWORD *)v81 + 4);
          if (!v109
            || (*(_WORD *)(v109 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v109 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
            || !*(_BYTE *)(v109 + 112))
          {
            WebCore::HTMLOptionElement::value(v81, v80, &v140);
            v110 = (WTF::StringImpl *)v140;
            if ((_QWORD)v140)
            {
              v111 = *(_DWORD *)(v140 + 4);
              *(_QWORD *)&v140 = 0;
              if (*(_DWORD *)v110 == 2)
              {
                v118 = v111;
                WTF::StringImpl::destroy(v110, v80);
                if (v118)
                  goto LABEL_133;
              }
              else
              {
                *(_DWORD *)v110 -= 2;
                if (v111)
                  goto LABEL_133;
              }
            }
          }
        }
      }
      if (v81 != v78)
      {
        do
        {
          v105 = (WTF::StringImpl *)*((_QWORD *)v81 + 7);
          if (v105)
            goto LABEL_178;
          v81 = (WTF::StringImpl *)*((_QWORD *)v81 + 4);
          if (v81)
            v108 = v81 == v78;
          else
            v108 = 1;
        }
        while (!v108);
      }
      goto LABEL_222;
    }
    if (v133)
    {
      v90 = *((_DWORD *)v133 + 1);
      if (!v88)
        goto LABEL_146;
    }
    else
    {
      v90 = 0;
      if (!v88)
        goto LABEL_146;
    }
    v91 = *(_DWORD *)(v5 + 172);
    if (v91 >= 0x80000)
      v91 = 0x80000;
    if (v91 < v90)
      goto LABEL_171;
LABEL_146:
    if (v133)
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(*(_QWORD *)v87 + 296))(&v131, *(_QWORD *)(v5 + 240), &v133);
    else
      v131 = 0;
    v92 = *((unsigned int *)a2 + 13);
    if ((_DWORD)v92 == *((_DWORD *)a2 + 12))
    {
      v112 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 5), v92 + 1, (unint64_t)&v131);
      v92 = *((unsigned int *)a2 + 13);
      v93 = a2[5];
      v94 = *v112;
      *v112 = 0;
    }
    else
    {
      v93 = a2[5];
      v94 = v131;
      v131 = 0;
    }
    *((_QWORD *)v93 + v92) = v94;
    *((_DWORD *)a2 + 13) = v92 + 1;
    v95 = v131;
    v131 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v80);
      else
        *(_DWORD *)v95 -= 2;
    }
    if (v133)
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v5 + 240)
                                                                                         + 264))(&v131, *(_QWORD *)(v5 + 240), &v133);
    else
      v131 = 0;
    v96 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v96 == *((_DWORD *)a2 + 16))
    {
      v113 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 7), v96 + 1, (unint64_t)&v131);
      v96 = *((unsigned int *)a2 + 17);
      v97 = a2[7];
      v98 = *v113;
      *v113 = 0;
    }
    else
    {
      v97 = a2[7];
      v98 = v131;
      v131 = 0;
    }
    *((_QWORD *)v97 + v96) = v98;
    *((_DWORD *)a2 + 17) = v96 + 1;
    v99 = v131;
    v131 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v80);
      else
        *(_DWORD *)v99 -= 2;
    }
    if ((WTF::equal(v133, (const WTF::StringImpl *)v140, v83) & 1) != 0)
    {
      v100 = 0;
    }
    else
    {
      v100 = (WTF::StringImpl *)v140;
      if ((_QWORD)v140)
        *(_DWORD *)v140 += 2;
    }
    v131 = v100;
    v101 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v101 == *((_DWORD *)a2 + 20))
    {
      v114 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 9), v101 + 1, (unint64_t)&v131);
      v101 = *((unsigned int *)a2 + 21);
      v115 = a2[9];
      v116 = *v114;
      *v114 = 0;
      *((_QWORD *)v115 + v101) = v116;
    }
    else
    {
      v102 = a2[9];
      v131 = 0;
      *((_QWORD *)v102 + v101) = v100;
    }
    *((_DWORD *)a2 + 21) = v101 + 1;
    v103 = v131;
    v131 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, v80);
      else
        *(_DWORD *)v103 -= 2;
    }
    v85 = v133;
    goto LABEL_171;
  }
LABEL_222:
  if (v138)
  {
    if (*((_DWORD *)v138 + 6) == 2)
    {
      if ((*((_WORD *)v138 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v138, v80);
    }
    else
    {
      *((_DWORD *)v138 + 6) -= 2;
    }
  }
  return 1;
}

unsigned int *WebCore::BaseDateAndTimeInputType::createShadowSubtree(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const WebCore::Style::RuleSet *v6;
  WTF::String *v7;
  WebCore::Node *v8;
  uint64_t v9;
  void *v10;
  unsigned int *result;
  void *v12;
  const WebCore::Style::RuleSet *v13;
  WTF::String *v14;
  WTF::StringImpl *v15;
  WebCore::UserAgentParts *v16;
  WebCore::Node *v17;
  WTF::StringImpl **v18;
  WebCore::Node *v19[3];
  WebCore::Node *v20;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  else
    v4 = 0;
  *(_DWORD *)(v4 + 24) += 2;
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 704) & 0x800000000000) != 0)
  {
    WebCore::DateTimeEditElement::create(v3, (uint64_t)this + 40, (uint64_t *)&v20);
    v8 = v20;
    *((_DWORD *)v20 + 6) += 2;
    v9 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v8;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    WebCore::ContainerNode::parserAppendChild(v4, v8, v6, v7);
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v10);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  else
  {
    WebCore::HTMLDivElement::create((WebCore::HTMLDivElement *)v3, &v20);
    WebCore::ContainerNode::parserAppendChild(v4, v20, v13, v14);
    memset(v19, 0, sizeof(v19));
    v16 = (WebCore::UserAgentParts *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v19, v15);
    v17 = v20;
    v18 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitDateAndTimeValue(v16);
    WebCore::Element::setUserAgentPart(v17, v18);
    WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v20);
  }
  result = WebCore::BaseDateAndTimeInputType::updateInnerTextValue((unsigned int *)this);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v12);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v3, v12);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v12);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::BaseDateAndTimeInputType::removeShadowSubtree(WebCore::BaseDateAndTimeInputType *this, void *a2)
{
  unsigned int *result;
  uint64_t v4;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v4 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      WebCore::ContainerNode::removeChildren(v4);
      *((_BYTE *)this + 16) = 0;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::BaseDateAndTimeInputType::hasCustomFocusLogic(WebCore::BaseDateAndTimeInputType *this)
{
  return *((_QWORD *)this + 8) == 0;
}

unsigned int *WebCore::BaseDateAndTimeInputType::attributeChanged(unsigned int *this, const WebCore::QualifiedName *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v2 > 0x353)
  {
    if (v2 == 852)
    {
      if (!*((_QWORD *)this + 8))
        return this;
    }
    else
    {
      if (v2 != 899)
        return this;
      v4 = *((_QWORD *)this + 3);
      if (!v4)
        return this;
      v5 = *(_QWORD *)(v4 + 8);
      if (!v5 || *(_QWORD *)(v5 + 216))
        return this;
    }
    return WebCore::BaseDateAndTimeInputType::updateInnerTextValue(this);
  }
  if (v2 == 578 || v2 == 585)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      this = *(unsigned int **)(v3 + 8);
      if (this)
        return (unsigned int *)WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)this);
    }
  }
  return this;
}

_QWORD *WebCore::BaseDateAndTimeInputType::elementDidBlur(_QWORD *this)
{
  if (!this[8])
  {
    this = (_QWORD *)this[7];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
  }
  return this;
}

uint64_t WebCore::BaseDateAndTimeInputType::detach(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

BOOL WebCore::BaseDateAndTimeInputType::isPresentingAttachedView(WebCore::BaseDateAndTimeInputType *this)
{
  return *((_QWORD *)this + 7) != 0;
}

uint64_t WebCore::BaseDateAndTimeInputType::handleKeydownEvent(WebCore::BaseDateAndTimeInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if (v4)
    WebCore::Element::setActive(v3, (void *)1, 0);
  return v4 ^ 1u;
}

uint64_t WebCore::BaseDateAndTimeInputType::handleKeypressEvent(WebCore::BaseDateAndTimeInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  uint64_t v5;
  WebCore *v6;

  result = WebCore::KeyboardEvent::charCode(a2);
  if ((_DWORD)result != 13)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
      v6 = *(WebCore **)(v5 + 8);
    else
      v6 = 0;
    result = WebCore::KeyboardEvent::charCode(a2);
    if ((_DWORD)result != 32)
    {
      if ((_DWORD)result != 13)
        return result;
      result = WebCore::simulateClick(v6, (uint64_t)a2, 0, 1, 1);
    }
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
  return result;
}

uint64_t WebCore::BaseDateAndTimeInputType::handleKeyupEvent(WebCore::BaseDateAndTimeInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;

  result = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if ((_DWORD)result)
    return WebCore::InputType::dispatchSimulatedClickIfActive(this, a2);
  return result;
}

uint64_t WebCore::BaseDateAndTimeInputType::handleFocusEvent(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  WebCore::Element *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v3 = *(_QWORD *)(result + 64);
  if (v3)
  {
    if (a3 == 2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_DWORD **)(v7 + 72);
              ++*v8;
              result = WebCore::FocusController::advanceFocusInDocumentOrder((uint64_t)v8, (void *)2, 0, 0);
              if (*v8)
              {
                --*v8;
                return result;
              }
LABEL_20:
              __break(0xC471u);
              JUMPOUT(0x195B89310);
            }
          }
        }
      }
    }
    else if (*(_DWORD *)(v3 + 140))
    {
      v9 = 0;
      while (1)
      {
        v10 = *(WebCore::Element **)(*(_QWORD *)(v3 + 128) + 8 * v9);
        v11 = *((_QWORD *)v10 + 14);
        if (!v11
          || (v12 = *(_QWORD *)(v11 + 8)) == 0
          || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12), (result & 1) == 0))
        {
          result = WebCore::Element::isFocusable(v10);
          if ((_DWORD)result)
            break;
        }
        if (++v9 >= *(unsigned int *)(v3 + 140))
          return result;
      }
      if (v9 >= *(unsigned int *)(v3 + 140))
        goto LABEL_20;
      v13 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8 * v9);
      v15 = 0;
      v14 = 0;
      return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v13 + 656))(v13, &v14);
    }
  }
  return result;
}

uint64_t WebCore::BaseDateAndTimeInputType::accessKeyAction(WebCore::BaseDateAndTimeInputType *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v8;
  int v9;
  char v10;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
  }
  else
  {
    v5 = 0;
  }
  v8 = 1;
  v9 = 0;
  v10 = 0;
  WebCore::Element::focus((unsigned int *)v5, &v8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WebCore::simulateClick(*(WebCore **)(*((_QWORD *)this + 3) + 8), 0, a2, 1, 1);
}

unsigned __int8 *WebCore::BaseDateAndTimeInputType::didBlurFromControl(WebCore::BaseDateAndTimeInputType *this, void *a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = (unsigned __int8 *)*((_QWORD *)this + 7);
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 + 2;
      if ((*(_BYTE *)(v5 + 168) & 4) != 0)
      {
        result = WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v5);
        v6 = *(_DWORD *)(v5 + 24) - 2;
      }
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        return (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebCore::BaseDateAndTimeInputType::didBlurFromControl(WebCore::BaseDateAndTimeInputType *this, void *a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
  v4 = *((_QWORD *)this - 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 + 2;
      if ((*(_BYTE *)(v5 + 168) & 4) != 0)
      {
        result = WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v5);
        v6 = *(_DWORD *)(v5 + 24) - 2;
      }
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        return (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::didChangeValueFromControl(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[29];
  WTF::StringImpl *v41;
  WTF *v42;

  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 208);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    LOBYTE(v34[0]) = 0;
    BYTE4(v34[0]) = 0;
    LOBYTE(v34[1]) = 0;
    BYTE4(v34[1]) = 0;
    LOBYTE(v35) = 0;
    BYTE4(v35) = 0;
    BYTE8(v35) = 0;
    BYTE12(v35) = 0;
    LOBYTE(v36) = 0;
    BYTE4(v36) = 0;
    BYTE8(v36) = 0;
    BYTE12(v36) = 0;
    LOBYTE(v37) = 0;
    BYTE4(v37) = 0;
    WORD4(v37) = 0;
    v5 = *(unsigned int *)(v2 + 140);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v2 + 128);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v8 + 1256))(v8, v34, 0);
        v7 -= 8;
      }
      while (v7);
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 32))(&v41, v4, v34);
  }
  else
  {
    v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v9 += 2;
    v41 = v9;
  }
  (*(void (**)(WTF **__return_ptr, WebCore::BaseDateAndTimeInputType *, WTF::StringImpl **))(*(_QWORD *)this + 296))(&v42, this, &v41);
  v12 = v41;
  v41 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
    v14 = *(_QWORD **)(v13 + 8);
  else
    v14 = 0;
  v15 = (_DWORD *)v14[30];
  if (v15[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v15, v34);
    goto LABEL_34;
  }
  v16 = (WTF::StringImpl *)v14[27];
  if (v16)
  {
    *(_DWORD *)v16 += 2;
    v34[0] = v16;
    goto LABEL_34;
  }
  v17 = v14[13];
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 4);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v17 + 40);
      LODWORD(v20) = *(_DWORD *)(v17 + 52);
      if ((_DWORD)v20)
      {
LABEL_20:
        v20 = v20;
        v21 = (_QWORD *)(v19 + 8);
        while (1)
        {
          v22 = *(v21 - 1);
          if (v22 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_29;
          }
          v21 += 2;
          if (!--v20)
          {
            v21 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      v19 = v17 + 32;
      LODWORD(v20) = v18 >> 5;
      if ((_DWORD)v20)
        goto LABEL_20;
    }
  }
  v21 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_29:
  if (!*v21)
  {
LABEL_30:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v15 + 64))(v34);
    goto LABEL_34;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v15 + 296))(v34);
  if (!v34[0])
  {
    v34[0] = 0;
    v15 = (_DWORD *)v14[30];
    goto LABEL_30;
  }
LABEL_34:
  v24 = WTF::equalIgnoringNullity(v42, v34[0], v11);
  v25 = v34[0];
  v34[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::InputType::setValue((uint64_t)this, (WTF::StringImpl *)&v42, v24 ^ 1, 0);
  if ((v24 & 1) == 0)
  {
    v27 = *((_QWORD *)this + 3);
    if (v27)
      v28 = *(_QWORD *)(v27 + 8);
    else
      v28 = 0;
    *(_DWORD *)(v28 + 24) += 2;
    if ((*(_QWORD *)(v28 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v29 = *(_QWORD *)((*(_QWORD *)(v28 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v29)
        *(_DWORD *)(v29 + 24) += 2;
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_BYTE *)(v29 + 192);
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v26);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
    if ((v30 & 0x10) != 0)
    {
      *(_BYTE *)(v28 + 168) |= 4u;
      WebCore::Node::dispatchInputEvent((WebCore::Node *)v28);
    }
    else
    {
      WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v28);
    }
    v39 = 0u;
    memset(v40, 0, sizeof(v40));
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)v34 = 0u;
    if (WebCore::BaseDateAndTimeInputType::setupDateTimeChooserParameters(this, v34))
    {
      v32 = *((_QWORD *)this + 7);
      if (v32)
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v32 + 24))(v32, v34);
    }
    WebCore::DateTimeChooserParameters::~DateTimeChooserParameters((WebCore::DateTimeChooserParameters *)v34, v31);
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v26);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::BaseDateAndTimeInputType::didChangeValueFromControl(WebCore::BaseDateAndTimeInputType *this)
{
  return WebCore::BaseDateAndTimeInputType::didChangeValueFromControl((WebCore::BaseDateAndTimeInputType *)((char *)this - 40));
}

BOOL WebCore::BaseDateAndTimeInputType::isEditControlOwnerDisabled(WebCore::BaseDateAndTimeInputType *this)
{
  return (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160) & 0x18) != 0;
}

BOOL `non-virtual thunk to'WebCore::BaseDateAndTimeInputType::isEditControlOwnerDisabled(WebCore::BaseDateAndTimeInputType *this)
{
  return (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this - 2) + 8) + 160) & 0x18) != 0;
}

uint64_t WebCore::BaseDateAndTimeInputType::isEditControlOwnerReadOnly(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112);
  if ((_DWORD)result)
    return (*(unsigned __int8 *)(v2 + 160) >> 5) & 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::BaseDateAndTimeInputType::isEditControlOwnerReadOnly(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this - 2);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112);
  if ((_DWORD)result)
    return (*(unsigned __int8 *)(v2 + 160) >> 5) & 1;
  return result;
}

uint64_t WebCore::BaseDateAndTimeInputType::localeIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_WORD *)(v2 + 30) & 8) != 0)
    goto LABEL_4;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v7 = *(_DWORD **)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
    if (v7)
      goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 22) & 8) != 0)
  {
LABEL_4:
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    v4 = (_DWORD **)(v3 + 1720);
    v5 = *(_QWORD *)(v3 + 1720);
    v6 = (_DWORD **)(v3 + 1712);
    if (v5)
      v6 = v4;
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (*v6)
LABEL_7:
    *v7 += 2;
  *a2 = v7;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::BaseDateAndTimeInputType::localeIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(this - 16);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_WORD *)(v2 + 30) & 8) != 0)
    goto LABEL_4;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v7 = *(_DWORD **)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
    if (v7)
      goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 22) & 8) != 0)
  {
LABEL_4:
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    v4 = (_DWORD **)(v3 + 1720);
    v5 = *(_QWORD *)(v3 + 1720);
    v6 = (_DWORD **)(v3 + 1712);
    if (v5)
      v6 = v4;
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (*v6)
LABEL_7:
    *v7 += 2;
  *a2 = v7;
  return this;
}

WTF::StringImpl *WebCore::BaseDateAndTimeInputType::didChooseValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _BYTE v9[8];
  WTF::StringImpl *v10;
  char v11;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((a3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::HTMLInputElement::setValue(v4, (uint64_t)&v8, (const WTF::StringImpl *)2, 0, (uint64_t)v9);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::BaseDateAndTimeInputType::didChooseValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::BaseDateAndTimeInputType::didChooseValue(a1 - 32, a2, a3);
}

uint64_t WebCore::BaseDateAndTimeInputType::didEndChooser(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::BaseDateAndTimeInputType::didEndChooser(WebCore::BaseDateAndTimeInputType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::BaseTextInputType::patternMismatch(WebCore::BaseTextInputType *this, const WTF::String *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  _BOOL8 v10;
  int isValid;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::HTMLInputElement *v19;
  WTF::StringImpl *v20;
  _QWORD v21[3];
  _BYTE v22[8];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
      : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
        (_DWORD)v7))
  {
    v7 = v7;
    v8 = (WTF::StringImpl **)(v6 + 8);
    while (1)
    {
      v9 = (uint64_t)*(v8 - 1);
      if (v9 == WebCore::HTMLNames::patternAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::patternAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::patternAttr + 32))
      {
        break;
      }
      v8 += 2;
      if (!--v7)
      {
        v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if (!*v8)
    return 0;
  if (!*(_QWORD *)a2)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  JSC::Yarr::RegularExpression::RegularExpression();
  isValid = JSC::Yarr::RegularExpression::isValid((JSC::Yarr::RegularExpression *)v21);
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v21);
  if (!isValid)
    return 0;
  v13 = *v8;
  if (*v8)
    *(_DWORD *)v13 += 2;
  v23 = v13;
  WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((int8x16_t *)"^(?:", 5, (uint64_t *)&v23, (int8x16_t *)")$", 3, &v24);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  JSC::Yarr::RegularExpression::RegularExpression();
  v21[2] = v22;
  if (*((_DWORD *)this + 3) == 32
    && ((v18 = *((_QWORD *)this + 3)) == 0 ? (v19 = 0) : (v19 = *(WebCore::HTMLInputElement **)(v18 + 8)),
        WebCore::HTMLInputElement::multiple(v19)))
  {
    WTF::String::split();
    v10 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<WebCore::BaseTextInputType::patternMismatch(WTF::String const&)::$_0>((uint64_t)v21) != -1;
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  else
  {
    v10 = WebCore::BaseTextInputType::patternMismatch(WTF::String const&)const::$_0::operator()<WTF::String const>((uint64_t)v22, *(_QWORD *)a2);
  }
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v22);
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v10;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<WebCore::BaseTextInputType::patternMismatch(WTF::String const&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_DWORD *)(a1 + 12))
    return -1;
  v2 = 0;
  while (1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v2);
    v4 = v3 ? *(unsigned int *)(v3 + 4) : 0;
    if (JSC::Yarr::RegularExpression::match() || v4 != 0)
      break;
    if (++v2 >= (unint64_t)*(unsigned int *)(a1 + 12))
      return -1;
  }
  return v2;
}

BOOL WebCore::BaseTextInputType::patternMismatch(WTF::String const&)const::$_0::operator()<WTF::String const>(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;

  if (a2)
    v2 = *(_DWORD *)(a2 + 4);
  else
    v2 = 0;
  if (JSC::Yarr::RegularExpression::match())
    v3 = 0;
  else
    v3 = v2 == 0;
  return !v3;
}

uint64_t WebCore::InputType::typeMismatchFor(WebCore::InputType *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::InputType::valueMissing(WebCore::InputType *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::InputType::hasBadInput(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::patternMismatch(WebCore::InputType *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::InputType::typeMismatch(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::containerElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::innerBlockElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::innerSpinButtonElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::autoFillButtonElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::resultsButtonElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::cancelButtonElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::sliderThumbElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::sliderTrackElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::dataListButtonElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::isFocusingWithDataListDropdown(WebCore::InputType *this)
{
  return 0;
}

void WebCore::BaseDateAndTimeInputType::DateTimeFormatValidator::~DateTimeFormatValidator(WebCore::BaseDateAndTimeInputType::DateTimeFormatValidator *this)
{
  JUMPOUT(0x19AEA7644);
}

void WebCore::DateTimeChooserParameters::~DateTimeChooserParameters(WebCore::DateTimeChooserParameters *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v3 = *((unsigned int *)this + 21);
  if ((_DWORD)v3)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    v13 = 8 * v3;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 17);
  if ((_DWORD)v5)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v16 = 8 * v5;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v6 = (WTF *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 13);
  if ((_DWORD)v7)
  {
    v18 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v19 = 8 * v7;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebCore::ButtonInputType::formControlType(WebCore::ButtonInputType *this)
{
  return WebCore::HTMLNames::buttonTag + 24;
}

uint64_t *WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(unsigned int **)(v3 + 8 * i);
        if (v7 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              v11 = i;
              v12 = v3;
              v10 = v5;
              WTF::fastFree((WTF *)v7, a2);
              v5 = v10;
              i = v11;
              v3 = v12;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::GraphicsContextStateSaver>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_BYTE *)v3 + 8))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v3 + 104))(*(_QWORD *)v3, 1);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::CanvasBase::buffer(WebCore::CanvasBase *this)
{
  WebCore::CanvasBase *v2;

  if (!*((_BYTE *)this + 73))
  {
    v2 = this;
    (*(void (**)(void))(*(_QWORD *)this + 160))();
    this = v2;
  }
  return *((_QWORD *)this + 2);
}

void WebCore::CanvasBase::makeRenderingResultsAvailable(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  unint64_t v16;
  int v17;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (!v6)
  {
    if (!*(_BYTE *)(a1 + 73))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      goto LABEL_19;
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_14:
      ++*(_QWORD *)(v10 + 8);
      v12 = __ldxr((unsigned __int8 *)v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_19:
      *a3 = v9;
      return;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_14;
  }
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 104))(v6, 0);
  if (*(_QWORD *)(a1 + 64) != 0x7FFFFFFFFFFFFFFFLL && a2 != 0)
  {
    v13 = *a3;
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24);
    v15 = v7;
    v16 = *(_QWORD *)(a1 + 64);
    v17 = v14(v15) ^ 1;
    WebCore::CanvasNoiseInjection::postProcessDirtyCanvasBuffer((__int128 *)(a1 + 48), v13, v16, v17);
  }
}

void WebCore::CanvasNoiseInjection::postProcessDirtyCanvasBuffer(__int128 *a1, uint64_t a2, unint64_t a3, int a4)
{
  _BOOL4 v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  const void *v13;
  WebCore::CanvasNoiseInjection *v14;
  WebCore::PixelBuffer *v15;
  CFTypeRef v16;
  uint64_t v17;
  _QWORD v18[2];
  WebCore::PixelBuffer *v19;
  __int16 v20;
  CFTypeRef cf;
  __int128 v22;

  if (*((int *)a1 + 2) < 1)
  {
    v7 = 0;
    if (!a2)
      return;
  }
  else
  {
    v7 = *((_DWORD *)a1 + 3) > 0;
    if (!a2)
      return;
  }
  if (v7 | a4)
  {
    if ((a4 & 1) != 0)
    {
      v9 = *(float *)(a2 + 16);
      v8 = *(float *)(a2 + 20);
      if (v9 > -2147500000.0)
        v10 = (int)v9;
      else
        v10 = 0x80000000;
      if (v9 < 2147500000.0)
        v11 = v10;
      else
        v11 = 0x7FFFFFFF;
      DWORD2(v22) = v11;
      if (v8 >= 2147500000.0)
      {
        v12 = 0x7FFFFFFF;
      }
      else if (v8 > -2147500000.0)
      {
        v12 = (int)v8;
      }
      else
      {
        v12 = 0x80000000;
      }
      HIDWORD(v22) = v12;
      *(_QWORD *)&v22 = 0;
    }
    else
    {
      v22 = *a1;
    }
    v20 = 1;
    v13 = *(const void **)(a2 + 32);
    cf = v13;
    if (v13)
      CFRetain(v13);
    v18[0] = off_1E340D360;
    (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, __int16 *, __int128 *, _QWORD *))(*(_QWORD *)a2 + 88))(&v19, a2, &v20, &v22, v18);
    if (v19)
    {
      v14 = (WebCore::CanvasNoiseInjection *)(*(uint64_t (**)(WebCore::PixelBuffer *))(*(_QWORD *)v19 + 16))(v19);
      if ((_DWORD)v14 && WebCore::CanvasNoiseInjection::postProcessPixelBufferResults(v14, v19, a3))
      {
        v18[0] = 0;
        v18[1] = *((_QWORD *)&v22 + 1);
        v17 = v22;
        (*(void (**)(uint64_t, WebCore::PixelBuffer *, _QWORD *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 96))(a2, v19, v18, &v17, 0);
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v15 + 8))(v15);
        else
          --*((_DWORD *)v15 + 2);
      }
    }
    v16 = cf;
    cf = 0;
    if (v16)
      CFRelease(v16);
  }
}

uint64_t WebCore::CanvasBase::setMaxCanvasAreaForTesting(uint64_t result, char a2)
{
  qword_1ECE833C8 = result;
  _MergedGlobals_182 = a2;
  return result;
}

WebCore::InspectorCanvas *WebCore::CanvasBase::addObserver(WebCore::CanvasBase *this, WebCore::CanvasObserver *a2)
{
  WebCore::InspectorCanvas *result;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WebCore::InspectorCanvas *v11[3];

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 80, a2, (uint64_t)v11);
  result = (WebCore::InspectorCanvas *)(*(uint64_t (**)(WebCore::CanvasObserver *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      result = (WebCore::InspectorCanvas *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this + 144))(this);
      if (result)
      {
        result = (WebCore::InspectorCanvas *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v6);
        if (result)
        {
          v7 = *((_QWORD *)result + 13);
          if (v7)
          {
            result = (WebCore::InspectorCanvas *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this
                                                                                                  + 88))(this);
            if (result)
            {
              result = (WebCore::InspectorCanvas *)WebCore::InspectorCanvasAgent::findInspectorCanvas(v7, result, v11);
              if (v11[0])
              {
                Inspector::CanvasFrontendDispatcher::clientNodesChanged(*(Inspector::CanvasFrontendDispatcher **)(v7 + 56), (WebCore::InspectorCanvas *)((char *)v11[0] + 8));
                result = v11[0];
                v11[0] = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 1)
                  {
                    WebCore::InspectorCanvas::~InspectorCanvas(result, v8);
                    return (WebCore::InspectorCanvas *)WTF::fastFree(v9, v10);
                  }
                  else
                  {
                    --*(_DWORD *)result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WebCore::InspectorInstrumentation *WebCore::CanvasBase::removeObserver(WebCore::CanvasBase *this, WebCore::CanvasObserver *a2)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WebCore::InspectorCanvas *v11;

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)this + 80, a2);
  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasObserver *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this + 144))(this);
      if (result)
      {
        result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v6);
        if (result)
        {
          v7 = *((_QWORD *)result + 13);
          if (v7)
          {
            result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this + 88))(this);
            if (result)
            {
              result = (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::findInspectorCanvas(v7, result, &v11);
              if (v11)
              {
                Inspector::CanvasFrontendDispatcher::clientNodesChanged(*(Inspector::CanvasFrontendDispatcher **)(v7 + 56), (WebCore::InspectorCanvas *)((char *)v11 + 8));
                result = v11;
                v11 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 1)
                  {
                    WebCore::InspectorCanvas::~InspectorCanvas(result, v8);
                    return (WebCore::InspectorInstrumentation *)WTF::fastFree(v9, v10);
                  }
                  else
                  {
                    --*(_DWORD *)result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WebCore::CanvasBase::didDraw(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  WebCore::CanvasRenderingContext *v7;
  int32x2_t v8;
  uint64_t v9;
  unint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int32x2_t v43;
  int32x2_t v44;
  float v45[4];
  unint64_t v46;
  unint64_t v47;
  int32x2_t *v48;
  int32x2_t v49;
  uint64_t v50;
  int32x2_t v51;
  uint64_t v52;

  v6 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 88))(a1);
  if (v6)
  {
    v7 = (WebCore::CanvasRenderingContext *)v6;
    if (!*(_BYTE *)(v6 + 24))
    {
      v42 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 144))(a1);
      if (v42)
      {
        if (!*(_BYTE *)(v42 + 274))
          WebCore::Document::addCanvasNeedingPreparationForDisplayOrFlush((WebCore::Document *)(v42 - 192), v7);
      }
    }
  }
  v8 = a1[1];
  v46 = 0;
  v47 = (unint64_t)v8;
  v9 = HIDWORD(*(_QWORD *)&v8);
  if (!*(_BYTE *)(a2 + 16))
  {
    v10 = 0;
    goto LABEL_5;
  }
  v19 = *(float *)(a2 + 4);
  v20 = floorf(*(float *)a2);
  v21 = v20 >= 2147500000.0 || v20 <= -2147500000.0;
  if (!v21 || (v22 = 2147500000.0, v20 < 2147500000.0) && (v22 = -2147500000.0, v20 > -2147500000.0))
    v22 = (float)(int)v20;
  v23 = floorf(v19);
  v24 = v23 >= 2147500000.0 || v23 <= -2147500000.0;
  if (!v24 || (v25 = 2147500000.0, v23 < 2147500000.0) && (v25 = -2147500000.0, v23 > -2147500000.0))
    v25 = (float)(int)v23;
  v26 = v19 + *(float *)(a2 + 12);
  v27 = ceilf(*(float *)a2 + *(float *)(a2 + 8));
  v28 = v27 >= 2147500000.0 || v27 <= -2147500000.0;
  if (!v28 || (v29 = 2147500000.0, v27 < 2147500000.0) && (v29 = -2147500000.0, v27 > -2147500000.0))
    v29 = (float)(int)v27;
  v30 = ceilf(v26);
  v31 = v30 >= 2147500000.0 || v30 <= -2147500000.0;
  if (!v31 || (v32 = 2147500000.0, v30 < 2147500000.0) && (v32 = -2147500000.0, v30 > -2147500000.0))
    v32 = (float)(int)v30;
  if (v22 < 2147500000.0 && v22 > -2147500000.0)
    goto LABEL_45;
  if (v22 >= 2147500000.0)
  {
    v33 = 0x7FFFFFFF;
  }
  else
  {
    if (v22 > -2147500000.0)
    {
LABEL_45:
      v33 = (int)v22;
      goto LABEL_46;
    }
    v33 = 0x80000000;
  }
LABEL_46:
  if (v25 < 2147500000.0 && v25 > -2147500000.0)
    goto LABEL_48;
  if (v25 >= 2147500000.0)
  {
    v34 = 0x7FFFFFFF;
    goto LABEL_49;
  }
  if (v25 > -2147500000.0)
LABEL_48:
    v34 = (int)v25;
  else
    v34 = 0x80000000;
LABEL_49:
  v35 = v29 - v22;
  v36 = v32 - v25;
  if (v35 < 2147500000.0 && v35 > -2147500000.0)
    goto LABEL_51;
  if (v35 >= 2147500000.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else
  {
    if (v35 > -2147500000.0)
    {
LABEL_51:
      v37 = (int)v35;
      goto LABEL_52;
    }
    v37 = 0x80000000;
  }
LABEL_52:
  if (v36 < 2147500000.0 && v36 > -2147500000.0)
    goto LABEL_54;
  if (v36 >= 2147500000.0)
  {
    v38 = 0x7FFFFFFF;
    goto LABEL_55;
  }
  if (v36 > -2147500000.0)
LABEL_54:
    v38 = (int)v36;
  else
    v38 = 0x80000000;
LABEL_55:
  v39 = v33 & ~(v33 >> 31);
  v40 = v37 + v33;
  if (v40 < v8.i32[0])
    v8.i32[0] = v40;
  if (v38 + v34 < (int)v9)
    LODWORD(v9) = v38 + v34;
  if (v39 >= v8.i32[0] || (v41 = v34 & ~(v34 >> 31), v41 >= (int)v9))
  {
    v39 = 0;
    v41 = 0;
    v8.i32[0] = 0;
    LODWORD(v9) = 0;
  }
  v46 = __PAIR64__(v41, v39);
  v8.i32[0] -= v39;
  LODWORD(v9) = v9 - v41;
  v47 = __PAIR64__(v9, v8.u32[0]);
  v10 = __PAIR64__(v41, v39);
LABEL_5:
  v45[0] = (float)(int)v10;
  v45[1] = (float)SHIDWORD(v10);
  v45[2] = (float)v8.i32[0];
  v45[3] = (float)(int)v9;
  v11 = a1[10];
  if (v11)
  {
    v17 = *(unsigned int *)(*(_QWORD *)&v11 - 4);
    v13 = *(_QWORD *)&v11 + 8 * v17;
    if (*(_DWORD *)(*(_QWORD *)&v11 - 12))
    {
      v12 = a1[10];
      if ((_DWORD)v17)
      {
        v18 = 8 * v17;
        v12 = a1[10];
        while ((unint64_t)(**(_QWORD **)&v12 + 1) <= 1)
        {
          *(_QWORD *)&v12 += 8;
          v18 -= 8;
          if (!v18)
          {
            v12 = (int32x2_t)v13;
            break;
          }
        }
      }
    }
    else
    {
      v12 = (int32x2_t)(*(_QWORD *)&v11 + 8 * v17);
      v13 = (uint64_t)v12;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v48 = a1 + 10;
  v49 = v12;
  v50 = v13;
  if (v11)
  {
    v15 = *(unsigned int *)(*(_QWORD *)&v11 - 4);
    v14 = (int32x2_t)(*(_QWORD *)&v11 + 8 * v15);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v51 = v14;
  v52 = *(_QWORD *)&v11 + 8 * v15;
  if (*(_QWORD *)&v12 != *(_QWORD *)&v14)
  {
    if (!*(_QWORD *)(**(_QWORD **)&v12 + 8))
    {
      v43 = v12;
      do
      {
        v44 = (int32x2_t)(*(_QWORD *)&v43 + 8);
        v43 = (int32x2_t)v13;
        if (*(_QWORD *)&v44 != v13)
        {
          v43 = v44;
          while ((unint64_t)(**(_QWORD **)&v43 + 1) <= 1)
          {
            *(_QWORD *)&v43 += 8;
            if (*(_QWORD *)&v43 == v13)
            {
              v43 = (int32x2_t)v13;
              break;
            }
          }
        }
        v12 = v14;
        if (*(_QWORD *)&v43 == *(_QWORD *)&v14)
          break;
        v12 = v43;
      }
      while (!*(_QWORD *)(**(_QWORD **)&v43 + 8));
    }
    v49 = v12;
  }
  if (v11)
    v16 = *(_QWORD *)&v11 + 8 * *(unsigned int *)(*(_QWORD *)&v11 - 4);
  else
    v16 = 0;
  while (*(_QWORD *)&v12 != v16)
  {
    (*(void (**)(_QWORD, int32x2_t *, float *))(**(_QWORD **)(**(_QWORD **)&v12 + 8) + 24))(*(_QWORD *)(**(_QWORD **)&v12 + 8), a1, v45);
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v48);
    v12 = v49;
  }
  if (*(_QWORD *)&a1[8] != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      WebCore::IntRect::unite(a1 + 6, (int32x2_t *)&v46);
    }
    else if (!*(_BYTE *)(a2 + 16))
    {
      a1[6] = 0;
      a1[7] = 0;
    }
  }
}

_QWORD *WebCore::CanvasBase::notifyObserversCanvasResized(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = this;
  v2 = this[10];
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = v2 + 8 * v4;
    goto LABEL_3;
  }
  v3 = this[10];
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v3 = this[10];
    while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
    {
      v3 += 8;
      v9 -= 8;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  v12 = this + 10;
  v13 = v3;
  v14 = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = v2 + 8 * v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v15 = v6;
  v16 = v2 + 8 * v7;
  if (v3 != v6)
  {
    if (!*(_QWORD *)(*(_QWORD *)v3 + 8))
    {
      v10 = v3;
      do
      {
        v11 = v10 + 8;
        v10 = v5;
        if (v11 != v5)
        {
          v10 = v11;
          while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
          {
            v10 += 8;
            if (v10 == v5)
            {
              v10 = v5;
              break;
            }
          }
        }
        v3 = v6;
        if (v10 == v6)
          break;
        v3 = v10;
      }
      while (!*(_QWORD *)(*(_QWORD *)v10 + 8));
    }
    v13 = v3;
  }
  if (v2)
    v8 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v8 = 0;
  while (v3 != v8)
  {
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 32))(*(_QWORD *)(*(_QWORD *)v3 + 8), v1);
    this = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
    v3 = v13;
  }
  return this;
}

_QWORD *std::exchange[abi:sn180100]<WTF::WeakHashSet<WebCore::CanvasObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::CanvasObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = result;
  v5 = *result;
  v6 = result[1];
  *result = 0;
  *a3 = v5;
  a3[1] = v6;
  v7 = *a2;
  *a2 = 0;
  v8 = *result;
  *result = v7;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(unsigned int **)(v8 + 8 * i);
        if (v11 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              v15 = i;
              v16 = v8;
              v14 = v9;
              WTF::fastFree((WTF *)v11, a2);
              v9 = v14;
              i = v15;
              v8 = v16;
            }
          }
        }
      }
    }
    result = (_QWORD *)WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v4[1] = a2[1];
  return result;
}

uint64_t WebCore::CanvasBase::notifyObserversCanvasDisplayBufferPrepared(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 96);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 96);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 96);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8), v1);
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 104);
  }
  return this;
}

uint64_t WebCore::CanvasBase::cssCanvasClients@<X0>(WebCore::CanvasBase *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  void *v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t i;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  _QWORD *v56;

  v2 = a2;
  *a2 = 0;
  v3 = (uint64_t *)((char *)this + 80);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 10, &v54);
  result = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, &v52);
  v5 = v55;
  if (v55 != v53)
  {
    v51 = v2;
    while (1)
    {
      v6 = *(_QWORD *)(*v5 + 8);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
        break;
LABEL_63:
      v49 = v55;
      do
        v55 = ++v49;
      while (v49 != v56 && (unint64_t)(*v49 + 1) <= 1);
      result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v54);
      ++*((_DWORD *)v54 + 2);
      v5 = v55;
      if (v55 == v53)
        return result;
    }
    v7 = *(_QWORD *)(v6 - 24);
    if (v7)
    {
      v8 = *(unsigned int *)(v7 - 4);
      v9 = v7 + 16 * v8;
      if (*(_DWORD *)(v7 - 12))
      {
        if (!(_DWORD)v8)
        {
          v12 = 0;
          v11 = *(_QWORD *)(v6 - 24);
          goto LABEL_12;
        }
        v10 = 16 * v8;
        v11 = *(_QWORD *)(v6 - 24);
        do
        {
          if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
            goto LABEL_11;
          v11 += 16;
          v10 -= 16;
        }
        while (v10);
        v11 = v9;
LABEL_11:
        v12 = *(unsigned int *)(v7 - 4);
LABEL_12:
        v13 = v7 + 16 * v12;
LABEL_13:
        if (v13 != v11)
        {
          do
          {
            if (*(_QWORD *)(*(_QWORD *)v11 + 8))
              goto LABEL_14;
            v50 = v11 + 16;
            v11 = v9;
            if (v50 != v9)
            {
              v11 = v50;
              do
              {
                if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
                  goto LABEL_74;
                v11 += 16;
              }
              while (v11 != v9);
              v11 = v9;
            }
LABEL_74:
            ;
          }
          while (v11 != v13);
          v11 = v13;
        }
LABEL_14:
        if (v7)
          v14 = v7 + 16 * *(unsigned int *)(v7 - 4);
        else
          v14 = 0;
        while (1)
        {
          if (v11 == v14)
            goto LABEL_63;
          v15 = *(_QWORD *)(*(_QWORD *)v11 + 8);
          if ((*(_BYTE *)(v15 + 45) & 1) == 0)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
            if (v16)
            {
              if ((*(_WORD *)(v16 + 28) & 8) == 0)
              {
                result = 105;
                __break(0xC471u);
                return result;
              }
              v17 = (_OWORD *)*v2;
              if (!*v2)
              {
                v18 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
                *v18 = xmmword_1968A5190;
                v17 = v18 + 1;
                *v2 = v18 + 1;
              }
              v19 = *((_DWORD *)v17 - 2);
              v20 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
              v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              v23 = v19 & ((v22 >> 31) ^ v22);
              v24 = (_QWORD *)v17 + v23;
              v25 = *v24;
              if (!*v24)
              {
LABEL_30:
                *v24 = v16;
                v28 = *((_DWORD *)v17 - 4);
                v29 = *((_DWORD *)v17 - 3);
LABEL_31:
                v30 = v29 + 1;
                *((_DWORD *)v17 - 3) = v29 + 1;
                v31 = (v29 + 1 + v28);
                v32 = *((unsigned int *)v17 - 1);
                if (v32 > 0x400)
                {
                  if (v32 > 2 * v31)
                    goto LABEL_44;
LABEL_34:
                  v33 = (_DWORD)v32 << (6 * v30 >= (2 * v32));
                }
                else
                {
                  if (3 * v32 > 4 * v31)
                    goto LABEL_44;
                  if ((_DWORD)v32)
                    goto LABEL_34;
                  v33 = 8;
                }
                v34 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v33 + 16));
                v36 = v34 + 4;
                *v51 = v34 + 4;
                v37 = v33 - 1;
                v34[2] = v33 - 1;
                v34[3] = v33;
                *v34 = 0;
                v34[1] = v30;
                if ((_DWORD)v32)
                {
                  for (i = 0; i != v32; ++i)
                  {
                    v39 = *((_QWORD *)v17 + i);
                    if ((unint64_t)(v39 + 1) >= 2)
                    {
                      v40 = (~(v39 << 32) + v39) ^ ((unint64_t)(~(v39 << 32) + v39) >> 22);
                      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
                      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
                      v43 = v37 & ((v42 >> 31) ^ v42);
                      v44 = 1;
                      do
                      {
                        v45 = v43;
                        v46 = *(_QWORD *)&v36[2 * v43];
                        v43 = (v43 + v44++) & v37;
                      }
                      while (v46);
                      *(_QWORD *)&v36[2 * v45] = v39;
                    }
                  }
                }
                WTF::fastFree((WTF *)(v17 - 1), v35);
                v2 = v51;
                goto LABEL_44;
              }
              v26 = 0;
              v27 = 1;
              while (v25 != v16)
              {
                if (v25 == -1)
                  v26 = v24;
                v23 = (v23 + v27) & v19;
                v24 = (_QWORD *)v17 + v23;
                v25 = *v24;
                ++v27;
                if (!*v24)
                {
                  if (!v26)
                    goto LABEL_30;
                  *v26 = 0;
                  v28 = *((_DWORD *)v17 - 4) - 1;
                  *((_DWORD *)v17 - 4) = v28;
                  *v26 = v16;
                  v29 = *((_DWORD *)v17 - 3);
                  goto LABEL_31;
                }
              }
            }
          }
LABEL_44:
          v47 = v9;
          if (v11 + 16 != v9)
          {
            v47 = v11 + 16;
            while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
            {
              v47 += 16;
              if (v47 == v9)
              {
                v47 = v9;
                break;
              }
            }
          }
          v11 = v13;
          if (v47 != v13)
          {
            v11 = v47;
            if (!*(_QWORD *)(*(_QWORD *)v47 + 8))
            {
              while (1)
              {
                v48 = v11 + 16;
                v11 = v9;
                if (v48 != v9)
                {
                  v11 = v48;
                  while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
                  {
                    v11 += 16;
                    if (v11 == v9)
                    {
                      v11 = v9;
                      break;
                    }
                  }
                }
                if (v11 == v13)
                  break;
                if (*(_QWORD *)(*(_QWORD *)v11 + 8))
                  goto LABEL_51;
              }
              v11 = v13;
            }
          }
LABEL_51:
          ++*(_DWORD *)(v6 - 16);
        }
      }
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v11 = v9;
    v9 = v7 + 16 * v8;
    if (!v7)
    {
      v13 = 0;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  return result;
}

_DWORD *WebCore::CanvasBase::setSize(_DWORD *this, const WebCore::IntSize *a2)
{
  WebCore::ScriptExecutionContext *v4;
  WebCore::CanvasRenderingContext *v5;

  if (*(_DWORD *)a2 != this[2] || *((_DWORD *)a2 + 1) != this[3])
  {
    *((_QWORD *)this + 1) = *(_QWORD *)a2;
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 88))(this);
    if (this)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v5 = (WebCore::CanvasRenderingContext *)this;
        this = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
        if (this)
        {
          this = (_DWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v4);
          if (this)
            return (_DWORD *)WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl((uint64_t)this, v5);
        }
      }
    }
  }
  return this;
}

WebCore::CanvasRenderingContext *WebCore::InspectorInstrumentation::didChangeCanvasSize(WebCore::CanvasRenderingContext *this, WebCore::CanvasRenderingContext *a2)
{
  WebCore::CanvasRenderingContext *v3;
  WebCore::ScriptExecutionContext *v4;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v3 = this;
    this = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(_QWORD *, WebCore::CanvasRenderingContext *))(**((_QWORD **)this + 4) + 144))(*((_QWORD **)this + 4), a2);
    if (this)
    {
      this = (WebCore::CanvasRenderingContext *)WebCore::InspectorInstrumentation::instrumentingAgents(this, v4);
      if (this)
        return (WebCore::CanvasRenderingContext *)WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl((uint64_t)this, v3);
    }
  }
  return this;
}

void WebCore::CanvasBase::allocateImageBuffer(int32x2_t *this@<X0>, uint64_t *a2@<X8>)
{
  int32x2_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  CFTypeRef v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  CFTypeRef *p_cf;
  CFTypeRef cf;

  v3 = vabs_s32(this[1]);
  v4 = v3.u32[1] * (unint64_t)v3.u32[0];
  if (!v4)
  {
    *a2 = 0;
    return;
  }
  if (_MergedGlobals_182)
  {
    v17 = qword_1ECE833C8;
    if (v4 <= qword_1ECE833C8)
    {
LABEL_4:
      v6 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 88))(this);
      v7 = v6;
      if (v6)
      {
        (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v6 + 200))(&cf, v6);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v7);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 208))(v7) & 1) != 0)
        {
          v12 = 0;
LABEL_13:
          LOBYTE(v12) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 216))(v7, v12);
LABEL_14:
          p_cf = (CFTypeRef *)vcvt_f32_s32(this[1]);
          v13 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 144))(this);
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13);
          v15.n128_u32[0] = 1.0;
          WebCore::ImageBuffer::create((float *)&p_cf, 1, &cf, v9, v12, v14, a2, v15);
          v16 = cf;
          cf = 0;
          if (v16)
            CFRelease(v16);
          return;
        }
      }
      else
      {
        v8 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v8 != -1)
        {
          cf = &v21;
          p_cf = &cf;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
        if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        v9 = 1;
      }
      v10 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 144))(this);
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10) + 432) & 0x2000000000000) != 0)
      {
        v11 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 144))(this);
        v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11) + 256) <= v4;
      }
      else
      {
        v12 = 0;
      }
      if (!v7)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    if (v4 <= 0x4000000)
      goto LABEL_4;
    v17 = 0x4000000;
  }
  WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&cf, v17);
  v18 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 144))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 1, &cf, 0);
  *a2 = 0;
  v20 = (WTF::StringImpl *)cf;
  cf = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
}

char *WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(_QWORD *a1, unint64_t a2)
{
  char *result;
  const char *v4;
  int v5;
  unint64_t v6;
  const char *v7;
  int v8;

  v6 = a2;
  v7 = "Canvas area exceeds the maximum limit (width * height > ";
  v8 = 56;
  v4 = ").";
  v5 = 2;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v7, &v6, (uint64_t)&v4, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::CanvasNoiseInjection::postProcessPixelBufferResults(WebCore::CanvasNoiseInjection *this, WebCore::PixelBuffer *a2, unint64_t a3)
{
  WebCore::PixelBuffer *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  char v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  char v64;
  char v65;
  int v66;
  int v67;
  char v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  char v75;
  int v76;
  int v77;
  int v78;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89[3];

  if (!a3)
  {
    v5 = 1;
    return v5 & 1;
  }
  v3 = a2;
  v4 = *((_QWORD *)a2 + 6);
  if (!v4)
  {
    v5 = 0;
    return v5 & 1;
  }
  v5 = 0;
  v6 = 0;
  v7 = (a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a3 - 1640531527) << 16) ^ ((unsigned __int16)a3
                                                                                          - 1640531527);
  v8 = (a3 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(a3) + (v7 >> 11)) << 16) ^ (v7 + WORD2(a3) + (v7 >> 11));
  v9 = *((_QWORD *)a2 + 5);
  v10 = v8 + (v8 >> 11);
  v11 = v9 + 1;
  *(_QWORD *)&v12 = 0xFF000000FFLL;
  *((_QWORD *)&v12 + 1) = 0xFF000000FFLL;
  result = 0x800000;
  v80 = v10;
  while (v4 > v6 + 1 && v4 > v6 + 2 && v4 > v6 + 3)
  {
    v14 = v11 + v6;
    v15 = v11 + v6;
    if (*(unsigned __int8 *)(v11 + v6 - 1) | *(unsigned __int8 *)(v11 + v6))
      v16 = 0;
    else
      v16 = *(_BYTE *)(v15 + 1) == 0;
    if (*(_BYTE *)(v15 + 2))
    {
      v84 = 0uLL;
      v83 = xmmword_1969F0F30;
      v17 = *((_DWORD *)v3 + 8);
      v18 = *((_DWORD *)v3 + 9);
      v89[0] = v9;
      v89[1] = v4;
      v19 = v6 >> 2 < v17;
      v20 = (v18 - 1) * v17;
      v21 = (v6 >> 2) % v17;
      v22 = v17 - 1;
      v23 = v6 >> 2 > v20;
      v24 = v6 >> 2 > v20 || v6 >> 2 < v17;
      if (v21 != v22)
      {
        v19 = 0;
        v23 = 0;
      }
      v87 = 0uLL;
      v88 = v12;
      v86 = xmmword_1969F0F30;
      if (v21)
        v25 = 0;
      else
        v25 = v24;
      if (v25 || v19 || v23)
      {
        v81 = v87;
        v82 = v88;
      }
      else
      {
        v26 = v6 - 4;
        v27 = v6 + 4;
        if (v24)
        {
          WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(&v81, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v26, v27);
          result = 0x800000;
          *(_QWORD *)&v12 = 0xFF000000FFLL;
          *((_QWORD *)&v12 + 1) = 0xFF000000FFLL;
        }
        else
        {
          v28 = v9;
          v29 = v6 - 4 * v17;
          v30 = v6 + 4 * v17;
          if (v21)
            v31 = v21 == v22;
          else
            v31 = 1;
          if (v31)
          {
            WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(&v81, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v6 - 4 * v17, v30);
          }
          else
          {
            WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(v85, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v26, v27);
            WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(v85, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v29, v30);
            v3 = a2;
            WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(v85, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v29 - 4, v30 + 4);
            WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(v85, v89, v4, v89, (uint64_t)&v87, (int *)&v86, v6, v29 + 4, v30 - 4);
            v81 = v87;
            v82 = v88;
          }
          v9 = v28;
          v10 = v80;
          *(_QWORD *)&v12 = 0xFF000000FFLL;
          *((_QWORD *)&v12 + 1) = 0xFF000000FFLL;
          result = 0x800000;
        }
      }
      if (((_QWORD)v81 != (_QWORD)v82 || *((_QWORD *)&v81 + 1) != *((_QWORD *)&v82 + 1))
        && ((_QWORD)v81 != (_QWORD)v84 || *((_QWORD *)&v81 + 1) != *((_QWORD *)&v84 + 1))
        && ((_QWORD)v82 != (_QWORD)v83 || *((_QWORD *)&v82 + 1) != *((_QWORD *)&v83 + 1)))
      {
        v35 = *(unsigned __int8 *)(v14 - 1);
        if ((int)v81 <= (int)v82)
        {
          if ((_DWORD)v81 != v35 && (_DWORD)v82 != v35)
          {
            if ((int)v81 <= v35 && (int)v82 >= v35)
            {
              v36 = v81;
              goto LABEL_57;
            }
            if ((int)v81 >= v35 && (int)v82 >= v35)
            {
              v36 = *(unsigned __int8 *)(v14 - 1);
LABEL_47:
              v35 = v81;
              goto LABEL_65;
            }
            if ((int)v81 <= v35 && (int)v82 <= v35)
            {
              v36 = v82;
              goto LABEL_65;
            }
          }
        }
        else
        {
          if ((int)v81 < v35)
          {
            v36 = v82;
            goto LABEL_47;
          }
          if ((int)v81 > v35 && (int)v82 > v35)
          {
            v36 = *(unsigned __int8 *)(v14 - 1);
LABEL_57:
            v35 = v82;
LABEL_65:
            v38 = *(unsigned __int8 *)(v11 + v6);
            v39 = *(unsigned __int8 *)(v15 + 1);
            v40 = *(unsigned __int8 *)(v15 + 2);
            if (SDWORD1(v81) <= SDWORD1(v82))
            {
              if (DWORD1(v81) != v38 && DWORD1(v82) != v38)
              {
                if (SDWORD1(v81) <= v38 && SDWORD1(v82) >= v38)
                {
                  v41 = DWORD1(v81);
                  goto LABEL_77;
                }
                if (SDWORD1(v81) >= v38 && SDWORD1(v82) >= v38)
                {
                  v41 = *(unsigned __int8 *)(v11 + v6);
LABEL_68:
                  v38 = DWORD1(v81);
                  goto LABEL_85;
                }
                if (SDWORD1(v81) <= v38 && SDWORD1(v82) <= v38)
                {
                  v41 = DWORD1(v82);
                  goto LABEL_85;
                }
              }
            }
            else
            {
              if (SDWORD1(v81) < v38)
              {
                v41 = DWORD1(v82);
                goto LABEL_68;
              }
              if (SDWORD1(v81) > v38 && SDWORD1(v82) > v38)
              {
                v41 = *(unsigned __int8 *)(v11 + v6);
LABEL_77:
                v38 = DWORD1(v82);
LABEL_85:
                if (SDWORD2(v81) <= SDWORD2(v82))
                {
                  if (DWORD2(v81) != v39 && DWORD2(v82) != v39)
                  {
                    if (SDWORD2(v81) <= v39 && SDWORD2(v82) >= v39)
                    {
                      v42 = DWORD2(v81);
                      goto LABEL_97;
                    }
                    if (SDWORD2(v81) >= v39 && SDWORD2(v82) >= v39)
                    {
                      v42 = *(unsigned __int8 *)(v15 + 1);
LABEL_88:
                      v39 = DWORD2(v81);
                      goto LABEL_105;
                    }
                    if (SDWORD2(v81) <= v39 && SDWORD2(v82) <= v39)
                    {
                      v42 = DWORD2(v82);
                      goto LABEL_105;
                    }
                  }
                }
                else
                {
                  if (SDWORD2(v81) < v39)
                  {
                    v42 = DWORD2(v82);
                    goto LABEL_88;
                  }
                  if (SDWORD2(v81) > v39 && SDWORD2(v82) > v39)
                  {
                    v42 = *(unsigned __int8 *)(v15 + 1);
LABEL_97:
                    v39 = DWORD2(v82);
LABEL_105:
                    if (SHIDWORD(v81) <= SHIDWORD(v82))
                    {
                      if (HIDWORD(v81) != v40 && HIDWORD(v82) != v40)
                      {
                        if (SHIDWORD(v81) <= v40 && SHIDWORD(v82) >= v40)
                        {
                          v43 = HIDWORD(v81);
                          goto LABEL_117;
                        }
                        if (SHIDWORD(v81) >= v40 && SHIDWORD(v82) >= v40)
                        {
                          v43 = *(unsigned __int8 *)(v15 + 2);
LABEL_108:
                          v40 = HIDWORD(v81);
                          goto LABEL_125;
                        }
                        if (SHIDWORD(v81) <= v40 && SHIDWORD(v82) <= v40)
                        {
                          v43 = HIDWORD(v82);
                          goto LABEL_125;
                        }
                      }
                    }
                    else
                    {
                      if (SHIDWORD(v81) < v40)
                      {
                        v43 = HIDWORD(v82);
                        goto LABEL_108;
                      }
                      if (SHIDWORD(v81) > v40 && SHIDWORD(v82) > v40)
                      {
                        v43 = *(unsigned __int8 *)(v15 + 2);
LABEL_117:
                        v40 = HIDWORD(v82);
LABEL_125:
                        *(_QWORD *)&v81 = __PAIR64__(v41, v36);
                        *(_QWORD *)&v82 = __PAIR64__(v38, v35);
                        *((_QWORD *)&v81 + 1) = __PAIR64__(v43, v42);
                        v37 = 1;
                        *((_QWORD *)&v82 + 1) = __PAIR64__(v40, v39);
LABEL_126:
                        v83 = v82;
                        v84 = v81;
                        v44 = *(unsigned __int8 *)(v14 - 1);
                        v45 = *(unsigned __int8 *)(v11 + v6);
                        v46 = ((v10 + v44) ^ ((v10 + v44) << 16)) + v45 + (((v10 + v44) ^ ((v10 + v44) << 16)) >> 11);
                        v47 = *(unsigned __int8 *)(v15 + 1);
                        v48 = (v46 ^ (v46 << 16)) + v47 + ((v46 ^ (v46 << 16)) >> 11);
                        v49 = v48 ^ (v48 << 16);
                        v50 = *(unsigned __int8 *)(v15 + 2);
                        v51 = (v49 + v50 + (v49 >> 11)) ^ ((v49 + v50 + (v49 >> 11)) << 16);
                        v52 = (v51 + (v51 >> 11)) ^ (8 * (v51 + (v51 >> 11)));
                        v53 = (v52 + (v52 >> 5)) ^ (4 * (v52 + (v52 >> 5)));
                        v54 = (v53 + (v53 >> 15)) ^ ((v53 + (v53 >> 15)) << 10);
                        if (!v54)
                          v54 = 0x800000;
                        v55 = ((unint64_t)((2 * v37 * (unint64_t)v54 * (unsigned __int128)0x800000009uLL) >> 64) >> 3)
                            - v37;
                        if (v16)
                        {
                          v56 = HIDWORD(v84);
                          v57 = HIDWORD(v83);
                          if (SHIDWORD(v83) < v50)
                            v57 = 255;
                          if (SHIDWORD(v84) > v50)
                            v56 = 0;
                          if (v55 + v50 >= v56)
                            v58 = v55;
                          else
                            v58 = v56 - v50;
                          if (v55 + v50 > v57)
                            v58 = v57 - v50;
                        }
                        else
                        {
                          v59 = v83;
                          v60 = DWORD1(v83);
                          if ((int)v83 < v44)
                            v59 = 255;
                          v61 = v84;
                          v62 = DWORD1(v84);
                          if ((int)v84 > v44)
                            v61 = 0;
                          v63 = v55 + v44 < v61;
                          v64 = v61 - v44;
                          if (!v63)
                            v64 = v55;
                          v63 = v55 + v44 <= v59;
                          v65 = v59 - v44;
                          if (v63)
                            v65 = v64;
                          *(_BYTE *)(v14 - 1) = v44 + v65;
                          if (v60 >= v45)
                            v66 = v60;
                          else
                            v66 = 255;
                          if (v62 <= v45)
                            v67 = v62;
                          else
                            v67 = 0;
                          if (v55 + v45 >= v67)
                            v68 = v55;
                          else
                            v68 = v67 - v45;
                          if (v55 + v45 <= v66)
                            v69 = v68;
                          else
                            v69 = v66 - v45;
                          *(_BYTE *)(v11 + v6) = v45 + v69;
                          v70 = DWORD2(v83);
                          v71 = HIDWORD(v83);
                          if (SDWORD2(v83) < v47)
                            v70 = 255;
                          v72 = DWORD2(v84);
                          v73 = HIDWORD(v84);
                          if (SDWORD2(v84) > v47)
                            v72 = 0;
                          if (v55 + v47 >= v72)
                            v74 = v55;
                          else
                            v74 = v72 - v47;
                          if (v55 + v47 <= v70)
                            v75 = v74;
                          else
                            v75 = v70 - v47;
                          *(_BYTE *)(v15 + 1) = v47 + v75;
                          if (v71 >= v50)
                            v76 = v71;
                          else
                            v76 = 255;
                          if (v73 <= v50)
                            v77 = v73;
                          else
                            v77 = 0;
                          v78 = v55 + v50;
                          if (v55 + v50 < v77)
                            LOBYTE(v55) = v77 - v50;
                          if (v78 <= v76)
                            v58 = v55;
                          else
                            v58 = v76 - v50;
                        }
                        *(_BYTE *)(v15 + 2) = v50 + v58;
                        v5 = 1;
                        goto LABEL_182;
                      }
                    }
                    v43 = *(unsigned __int8 *)(v15 + 2);
                    goto LABEL_125;
                  }
                }
                v42 = *(unsigned __int8 *)(v15 + 1);
                goto LABEL_105;
              }
            }
            v41 = *(unsigned __int8 *)(v11 + v6);
            goto LABEL_85;
          }
        }
        v36 = *(unsigned __int8 *)(v14 - 1);
        goto LABEL_65;
      }
      v37 = 3;
      goto LABEL_126;
    }
LABEL_182:
    v6 += 4;
    if (v6 >= v4)
      return v5 & 1;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::CanvasBase::resetGraphicsContextState(uint64_t this)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *(_BYTE **)(this + 32);
  if (v1)
  {
    v2 = this;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v1 + 104))(*(_QWORD *)v1, 1);
    v1[8] = 0;
    v3 = *(_BYTE **)(v2 + 32);
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v3 + 96))(*(_QWORD *)v3, 1);
    v3[8] = 1;
  }
  return this;
}

BOOL WebCore::CheckboxInputType::valueMissing(WebCore::CheckboxInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8), (*(_BYTE *)(v3 + 168) & 1) != 0))
    return (*(_WORD *)(v3 + 230) & 1) == 0;
  else
    return 0;
}

void WebCore::CheckboxInputType::valueMissingText(WebCore::CheckboxInputType *this@<X0>, uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)this + 3) == 2
    && (v2 = *((_QWORD *)this + 3)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (*(_WORD *)(v3 + 232) & 0x2000) != 0)
  {
    WebCore::validationMessageValueMissingForSwitchText(a1);
  }
  else
  {
    WebCore::validationMessageValueMissingForCheckboxText(a1);
  }
}

unsigned int *WebCore::CheckboxInputType::createShadowSubtree(WebCore::CheckboxInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::Style::RuleSet *v14;
  WTF::String *v15;
  unsigned int *result;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = bmalloc::api::isoAllocate();
  v5 = v4;
  *(_OWORD *)(v4 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v4 + 24) = 0x101C00000002;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v3 + 96;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  ++*(_DWORD *)(v3 + 3324);
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v6 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v4 + 96) = v6;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)v4 = off_1E33B9CC0;
    goto LABEL_6;
  WTF::AtomStringImpl::add();
  WebCore::UserAgentParts::track(void)::track = v30;
  v18 = *(_QWORD *)(v5 + 104);
  if (!v18)
    goto LABEL_6;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) != 0)
  {
    v20 = *(uint64_t **)(v18 + 40);
    v21 = *(_DWORD *)(v18 + 52);
  }
  else
  {
    v20 = (uint64_t *)(v18 + 32);
    v21 = v19 >> 5;
  }
  if (v21)
  {
    v26 = 0;
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      v27 = *v20;
      if (*v20 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v26;
      v20 += 2;
      if (v21 == v26)
        goto LABEL_7;
    }
    v7 = v26;
  }
  else
  {
LABEL_6:
    v7 = 0xFFFFFFFFLL;
  }
LABEL_7:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::track(void)::track, 0);
  WebCore::ContainerNode::parserAppendChild(v2, (WebCore::Node *)v5, v8, v9);
  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x101C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v3 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(v3 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v12 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33B9CC0;
    goto LABEL_10;
  WTF::AtomStringImpl::add();
  WebCore::UserAgentParts::thumb(void)::thumb = v30;
  v22 = *(_QWORD *)(v11 + 104);
  if (!v22)
    goto LABEL_10;
  v23 = *(_DWORD *)(v22 + 4);
  if ((v23 & 1) != 0)
  {
    v24 = *(uint64_t **)(v22 + 40);
    v25 = *(_DWORD *)(v22 + 52);
  }
  else
  {
    v24 = (uint64_t *)(v22 + 32);
    v25 = v23 >> 5;
  }
  if (v25)
  {
    v28 = 0;
    v13 = 0xFFFFFFFFLL;
    while (1)
    {
      v29 = *v24;
      if (*v24 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v28;
      v24 += 2;
      if (v25 == v28)
        goto LABEL_11;
    }
    v13 = v28;
  }
  else
  {
LABEL_10:
    v13 = 0xFFFFFFFFLL;
  }
LABEL_11:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v11, v13, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::thumb(void)::thumb, 0);
  result = (unsigned int *)WebCore::ContainerNode::parserAppendChild(v2, (WebCore::Node *)v11, v14, v15);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v11, v17);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5, v17);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v3, v17);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v17);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::CheckboxInputType::handleKeyupEvent(WebCore::CheckboxInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;

  result = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if ((_DWORD)result)
    return WebCore::InputType::dispatchSimulatedClickIfActive(this, a2);
  return result;
}

uint64_t WebCore::CheckboxInputType::handleMouseDownEvent(uint64_t this, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if ((*((_BYTE *)a2 + 21) & 2) != 0 && *(_DWORD *)(this + 12) == 2)
  {
    v2 = *(_QWORD *)(this + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if ((*(_WORD *)(v3 + 232) & 0x2000) != 0)
        {
          v4 = *(_DWORD *)(v3 + 24);
          *(_DWORD *)(v3 + 24) = v4 + 2;
          if ((*(_BYTE *)(v3 + 160) & 0x18) == 0 && (*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              this = 105;
              __break(0xC471u);
              return this;
            }
            this = WebCore::CheckboxInputType::startSwitchPointerTracking(this, a2[18]);
            v4 = *(_DWORD *)(v3 + 24) - 2;
          }
          if (v4)
          {
            *(_DWORD *)(v3 + 24) = v4;
          }
          else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          {
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CheckboxInputType::startSwitchPointerTracking(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = result;
      v6 = (unsigned int *)(v3 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *(_QWORD *)(v3 + 640);
      v9 = *(_QWORD *)(result + 24);
      if (v9)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
      }
      v10 = *(_QWORD *)(v8 + 200);
      *(_QWORD *)(v8 + 200) = v9;
      if (v10)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      *(_BYTE *)(v8 + 194) = 0;
      *(_BYTE *)(v8 + 190) = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      *(_BYTE *)(v5 + 41) = *(_BYTE *)(v11 + 230) & 1;
      result = WebCore::switchPointerTrackingLogicalLeftPosition(*(_QWORD *)(v11 + 64), (uint64_t)a2);
      *(_DWORD *)(v5 + 32) = result;
      *(_BYTE *)(v5 + 36) = 1;
      do
      {
        v12 = __ldaxr(v6);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v6));
      if (!v13)
      {
        atomic_store(1u, v6);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E31FE290;
        v14[1] = v6;
        v15 = v14;
        WTF::ensureOnMainThread();
        result = (uint64_t)v15;
        if (v15)
          return (*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
      }
    }
  }
  return result;
}

unsigned int *WebCore::CheckboxInputType::handleMouseMoveEvent(unsigned int *this, WebCore::MouseEvent *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;

  if (!*((_BYTE *)this + 36))
    return this;
  v2 = this;
  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_36;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
LABEL_36:
    v5 = 1;
    goto LABEL_5;
  }
  v5 = 0;
  *(_DWORD *)(v4 + 24) += 2;
LABEL_5:
  if ((*((_BYTE *)a2 + 21) & 2) != 0
    && v3
    && this[3] == 2
    && (v6 = *(_QWORD *)(v3 + 8)) != 0
    && (*(_WORD *)(v6 + 232) & 0x2000) != 0
    && (*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B8C844);
    }
    this = (unsigned int *)WebCore::CheckboxInputType::updateIsSwitchVisuallyOnFromAbsoluteLocation((uint64_t)this, *((_QWORD *)a2 + 18));
    if ((v5 & 1) == 0)
    {
LABEL_25:
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 40) + 8) + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = *(_QWORD *)(v8 + 640);
        this = *(unsigned int **)(v11 + 200);
        *(_QWORD *)(v11 + 200) = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        *(_BYTE *)(v11 + 194) = 0;
        *(_BYTE *)(v11 + 190) = 0;
        do
        {
          v12 = __ldaxr(v9);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v9));
        if (!v13)
        {
          atomic_store(1u, v9);
          v14 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v14 = off_1E31FE290;
          *((_QWORD *)v14 + 1) = v9;
          v15 = v14;
          WTF::ensureOnMainThread();
          this = v15;
          if (v15)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
    }
    *((_BYTE *)v2 + 40) = 0;
    *((_BYTE *)v2 + 32) = 0;
    *((_BYTE *)v2 + 36) = 0;
    if ((v5 & 1) == 0)
      goto LABEL_25;
  }
  return this;
}

unsigned int *WebCore::CheckboxInputType::stopSwitchPointerTracking(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  WebCore::Node *v9;

  if (*((_BYTE *)this + 36))
  {
    v7 = this;
    v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = (unsigned int *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        v8 = (unsigned int *)(v2 + 8);
        v5 = *(_QWORD *)(v2 + 640);
        v9 = 0;
        WebCore::EventHandler::setCapturingMouseEventsElement(v5, (uint64_t *)&v9);
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v6);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
      }
    }
    *((_BYTE *)v7 + 40) = 0;
    *((_BYTE *)v7 + 32) = 0;
    *((_BYTE *)v7 + 36) = 0;
  }
  return this;
}

uint64_t WebCore::CheckboxInputType::updateIsSwitchVisuallyOnFromAbsoluteLocation(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  float v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unint64_t v11;
  WebCore::RenderObject *v12;
  uint64_t result;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  float v21;
  int v22;
  const char *v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;

  v3 = WebCore::switchPointerTrackingLogicalLeftPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64), a2);
  v4 = *(unsigned __int8 *)(a1 + 41);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v24[0] = 0;
  v26 = 0;
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 264))(v5, v24);
  if (v26)
  {
    v9 = v25;
    v25 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  LODWORD(v10) = v4 != 0;
  v11 = (*(_BYTE *)(v7 + 43) & 4) == 0;
  v12 = (WebCore::RenderObject *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL);
  if (v12
    && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v14 = (unint64_t)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/wtf/TypeCasts.h";
    __break(0xC471u);
    goto LABEL_29;
  }
  v4 = v10 ^ v11;
  result = WebCore::RenderObject::absoluteBoundingBoxRect(v12, 1, 0);
  if ((v14 & 0x80000000) == 0)
    v15 = v14;
  else
    v15 = v14 + 1;
  LODWORD(v7) = v15 >> 1;
  if (*(_BYTE *)(a1 + 40))
  {
    if (((v4 ^ (v3 >= (int)v7)) & 1) == 0)
      goto LABEL_26;
    return result;
  }
  v10 = HIDWORD(v14);
  v8 = (float)(int)v14;
  v11 = (unint64_t)&WebCore::MathMLNames::rspaceAttr;
    goto LABEL_30;
  while (1)
  {
    LODWORD(v10) = v14 - v10;
    v8 = v8 * 0.4;
    v11 = *(unsigned __int8 *)(a1 + 36);
    if (!v4)
      break;
    if (*(_BYTE *)(a1 + 36))
    {
      v16 = *(_DWORD *)(a1 + 32);
      if (v16 <= (int)v10)
        v17 = v7;
      else
        v17 = (int)(float)(v8 + (float)v16);
      if (v3 < v17)
        return result;
      goto LABEL_26;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    v22 = v10;
    v23 = (const char *)v14;
    v21 = v8;
    v20 = v11;
    result = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    LODWORD(v10) = v22;
    v14 = (unint64_t)v23;
    v8 = v21;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = &off_1E335BC30;
    *(_BYTE *)(v20 + 2784) = 1;
  }
  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_29;
  v18 = *(_DWORD *)(a1 + 32);
  if (v18 >= (int)v10)
    v19 = v7;
  else
    v19 = (int)(float)((float)v18 - v8);
  if (v3 >= v19)
    return result;
LABEL_26:
  *(_BYTE *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 41) ^= 1u;
  return WebCore::CheckboxInputType::performSwitchVisuallyOnAnimation(a1, 1);
}

WTF *WebCore::CheckboxInputType::subsequentTouchEventTouch(WebCore::CheckboxInputType *this, const WebCore::TouchEvent *a2)
{
  BOOL v2;
  WTF *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;

  if (*((_BYTE *)this + 84))
    v2 = a2 == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v5 = (*(_DWORD *)a2)++;
  v6 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 20);
    v9 = v6 - 1;
    while (1)
    {
      while (1)
      {
        if (v7 < v6)
        {
          v3 = *(WTF **)(*((_QWORD *)a2 + 1) + 8 * v7);
          if (v3)
            break;
        }
        if (MEMORY[0x18] == v8 || v9 == v7++)
          goto LABEL_19;
      }
      ++*(_DWORD *)v3;
      v10 = *((_DWORD *)v3 + 6);
      WTF::RefCounted<WebCore::Touch>::deref(v3, a2);
      if (v10 == v8)
        goto LABEL_20;
      if (v9 == v7)
        break;
      ++v7;
      v6 = *((unsigned int *)a2 + 5);
    }
LABEL_19:
    v3 = 0;
LABEL_20:
    v5 = *(_DWORD *)a2 - 1;
    if (*(_DWORD *)a2 != 1)
      goto LABEL_21;
  }
  else
  {
    v3 = 0;
    if (v5)
    {
LABEL_21:
      *(_DWORD *)a2 = v5;
      return v3;
    }
  }
  v13 = *((unsigned int *)a2 + 5);
  v14 = (WTF *)*((_QWORD *)a2 + 1);
  if ((_DWORD)v13)
  {
    v15 = 8 * v13;
    do
    {
      v16 = *(WTF **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
        WTF::RefCounted<WebCore::Touch>::deref(v16, a2);
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
    v14 = (WTF *)*((_QWORD *)a2 + 1);
  }
  if (v14)
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::fastFree(a2, a2);
  return v3;
}

unsigned int *WebCore::CheckboxInputType::handleTouchEvent(unsigned int *this, WebCore::TouchEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  double v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  double v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  WTF **v32;
  uint64_t v33;
  WTF *v34;
  WTF **v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::TimerBase *v46;
  int v47;
  unsigned int *v48;
  unsigned int *v49;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_94;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
LABEL_94:
    v6 = 1;
    goto LABEL_4;
  }
  v6 = 0;
  *(_DWORD *)(v5 + 24) += 2;
LABEL_4:
  if ((*((_BYTE *)a2 + 21) & 2) != 0
    && (v4 ? (v7 = this[3] == 2) : (v7 = 0),
        v7
     && (v8 = *(_QWORD *)(v4 + 8)) != 0
     && (*(_WORD *)(v8 + 232) & 0x2000) != 0
     && (*(_BYTE *)(v5 + 160) & 0x18) == 0
     && (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0))
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B8D028);
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 736);
    if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    {
      this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
      v11 = (uint64_t)this;
    }
    v12 = *(_QWORD **)(v11 + 40);
    if (!v12)
    {
      this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
      v12 = *(_QWORD **)(v11 + 40);
    }
    v13 = *((_QWORD *)a2 + 3);
    if (v13 == v12[263])
    {
      v16 = *((_QWORD *)a2 + 22);
      if (!v16)
        goto LABEL_14;
      v17 = (*(_DWORD *)v16)++;
      v18 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v18 == 1)
      {
        v19 = **(WTF ***)(v16 + 8);
        if (v19)
          ++*(_DWORD *)v19;
        *(_DWORD *)(v3 + 80) = *((_DWORD *)v19 + 6);
        *(_BYTE *)(v3 + 84) = 1;
        v20 = *(_QWORD *)(v3 + 72);
        if (!v20)
        {
          ++*(_DWORD *)(v3 + 8);
          ++*(_DWORD *)v19;
          v20 = WTF::fastMalloc((WTF *)0x38);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v21 = &off_1E33B08A8;
          v21[1] = v3;
          v21[2] = v19;
          *(_QWORD *)v20 = off_1E3407128;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          v22 = *(unsigned int **)(StatusReg + 736);
          if (!v22)
            v22 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
          *(_QWORD *)v20 = off_1E31F7378;
          *(_QWORD *)(v20 + 40) = v22;
          *(_QWORD *)(v20 + 48) = v21;
          this = *(unsigned int **)(v3 + 72);
          *(_QWORD *)(v3 + 72) = v20;
          if (this)
          {
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
            v20 = *(_QWORD *)(v3 + 72);
          }
        }
        *(_QWORD *)(v20 + 24) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        WebCore::TimerBase::setNextFireTime(v20, v24 + 0.2);
        *((_DWORD *)a2 + 5) |= 0x80u;
        this = (unsigned int *)WTF::RefCounted<WebCore::Touch>::deref(v19, v25);
        if (*(_DWORD *)v16 != 1)
        {
          --*(_DWORD *)v16;
          goto LABEL_14;
        }
        v31 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v31)
        {
          v32 = *(WTF ***)(v16 + 8);
          v33 = 8 * v31;
          do
          {
            v34 = *v32;
            *v32 = 0;
            if (v34)
              WTF::RefCounted<WebCore::Touch>::deref(v34, a2);
            ++v32;
            v33 -= 8;
          }
          while (v33);
        }
      }
      else
      {
        if (v17)
        {
          *(_DWORD *)v16 = v17;
          goto LABEL_14;
        }
        if ((_DWORD)v18)
        {
          v35 = *(WTF ***)(v16 + 8);
          v36 = 8 * v18;
          do
          {
            v37 = *v35;
            *v35 = 0;
            if (v37)
              WTF::RefCounted<WebCore::Touch>::deref(v37, a2);
            ++v35;
            v36 -= 8;
          }
          while (v36);
        }
      }
      v38 = *(WTF **)(v16 + 8);
      if (v38)
      {
        *(_QWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 16) = 0;
        WTF::fastFree(v38, a2);
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v16, a2);
    }
    else if (v13 == v12[262])
    {
      if (*(_BYTE *)(v3 + 36))
      {
        this = (unsigned int *)WebCore::CheckboxInputType::subsequentTouchEventTouch((WebCore::CheckboxInputType *)v3, *((const WebCore::TouchEvent **)a2 + 22));
        if (this)
        {
          v26 = this;
          ++*this;
          v27 = *((double *)this + 6) * 64.0;
          if (v27 >= 2147483650.0)
          {
            v28 = 0x7FFFFFFFLL;
          }
          else if (v27 <= -2147483650.0)
          {
            v28 = 0x80000000;
          }
          else
          {
            v28 = (int)v27;
          }
          v29 = *((double *)this + 7) * 64.0;
          if (v29 >= 2147483650.0)
          {
            v30 = 0x7FFFFFFF00000000;
          }
          else if (v29 <= -2147483650.0)
          {
            v30 = 0x8000000000000000;
          }
          else
          {
            v30 = (unint64_t)(int)v29 << 32;
          }
          WebCore::CheckboxInputType::updateIsSwitchVisuallyOnFromAbsoluteLocation(v3, v30 | v28);
          *((_DWORD *)a2 + 5) |= 0x80u;
          v14 = (WTF *)v26;
          goto LABEL_54;
        }
      }
    }
    else if (v13 == v12[260] || v13 == v12[259])
    {
      v14 = WebCore::CheckboxInputType::subsequentTouchEventTouch((WebCore::CheckboxInputType *)v3, *((const WebCore::TouchEvent **)a2 + 22));
      if (v14)
      {
        ++*(_DWORD *)v14;
LABEL_54:
        this = (unsigned int *)WTF::RefCounted<WebCore::Touch>::deref(v14, v15);
        goto LABEL_14;
      }
      *(_BYTE *)(v3 + 80) = 0;
      *(_BYTE *)(v3 + 84) = 0;
      v46 = *(WebCore::TimerBase **)(v3 + 72);
      if (v46 && (*((_QWORD *)v46 + 4) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase(v46);
      v47 = *(unsigned __int8 *)(v3 + 42);
      *(_BYTE *)(v3 + 42) = 0;
      if (v47)
        WebCore::CheckboxInputType::performSwitchAnimation(v3, 1);
      this = (unsigned int *)WebCore::simulateClick((WebCore *)v5, (uint64_t)a2, 0, 1, 1);
    }
  }
  else if (*((_BYTE *)this + 36))
  {
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40) + 8) + 528);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
      {
        v41 = (unsigned int *)(v40 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
        v43 = *(_QWORD *)(v40 + 640);
        this = *(unsigned int **)(v43 + 200);
        *(_QWORD *)(v43 + 200) = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        *(_BYTE *)(v43 + 194) = 0;
        *(_BYTE *)(v43 + 190) = 0;
        do
        {
          v44 = __ldaxr(v41);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v41));
        if (!v45)
        {
          atomic_store(1u, v41);
          v48 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v48 = off_1E31FE290;
          *((_QWORD *)v48 + 1) = v41;
          v49 = v48;
          WTF::ensureOnMainThread();
          this = v49;
          if (v49)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 32) = 0;
    *(_BYTE *)(v3 + 36) = 0;
  }
LABEL_14:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::CheckboxInputType::performSwitchAnimation(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  double updated;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  void (**v10)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v11;
  WTF::MonotonicTime *v12;
  double v13;
  double v14;
  WTF::MonotonicTime *v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  WTF::MonotonicTime *v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unint64_t StatusReg;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195B8D3B8);
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
      updated = 0.0;
      if (v5)
      {
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(WebCore::Page **)(v8 + 8);
            if (v9)
            {
              ++*(_DWORD *)v9;
              updated = WebCore::Page::preferredRenderingUpdateInterval(v9);
              if (*(_DWORD *)v9 == 1)
              {
                WebCore::Page::~Page((uint64_t)v9);
                WTF::fastFree(v32, v33);
              }
              else
              {
                --*(_DWORD *)v9;
              }
            }
          }
        }
      }
      {
        v10 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
      }
      else
      {
        v34 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v34 + 40) = 0u;
        *(_OWORD *)(v34 + 24) = 0u;
        v10 = &off_1E335BC30;
        *(_QWORD *)v34 = &off_1E335BC30;
      }
      v11 = 63;
      if (a2)
        v11 = 64;
      v13 = ((double (*)(uint64_t *))v10[v11])(&WebCore::RenderTheme::singleton(void)::theme);
      v14 = v13;
      if (!*(_QWORD *)(a1 + 64))
      {
        if (v13 <= 0.0 || updated <= 0.0)
          return;
        v27 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v27 = off_1E3407128;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        v29 = *(unsigned int **)(StatusReg + 736);
        if (!v29)
          v29 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
        *(_QWORD *)(v27 + 40) = v29;
        *(_QWORD *)v27 = off_1E31F7378;
        v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v31 = off_1E33B08D0;
        v31[1] = WebCore::CheckboxInputType::switchAnimationTimerFired;
        v31[2] = 0;
        v31[3] = a1;
        *(_QWORD *)(v27 + 48) = v31;
        v12 = *(WTF::MonotonicTime **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v27;
        if (v12)
          v12 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v12 + 8))(v12);
      }
      v15 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(v12);
      if (a2)
        v17 = 56;
      else
        v17 = 48;
      v18 = *(double *)(a1 + v17);
      v19 = v16 - v18;
      v20 = v19 >= v14 || v18 == 0.0;
      v21 = v14 - v19;
      if (v20)
        v22 = 0.0;
      else
        v22 = v21;
      v23 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(v15);
      *(double *)(a1 + v17) = v24 - v22;
      v25 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(v25 + 24) = 0;
      WTF::MonotonicTime::now(v23);
      WebCore::TimerBase::setNextFireTime(v25, updated + v26);
    }
  }
}

unsigned int *WebCore::CheckboxInputType::willDispatchClick(WebCore::CheckboxInputType *this, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int16 v7;
  int v8;
  unsigned int *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  WebCore::Node *v19;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = 0;
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_4:
  a2[1] = *(_BYTE *)(v5 + 230) & 1;
  v7 = *(_WORD *)(v5 + 230);
  a2[2] = (v7 & 8) != 0;
  if ((v7 & 8) != 0)
    WebCore::HTMLInputElement::setIndeterminate((unsigned __int8 *)v5, 0);
  if (*((_BYTE *)this + 36))
  {
    v8 = a2[1];
    if (*((_BYTE *)this + 40) && *((unsigned __int8 *)this + 41) == v8)
    {
      result = WebCore::CheckboxInputType::stopSwitchPointerTracking((unsigned int *)this);
      goto LABEL_13;
    }
  }
  else
  {
    v8 = a2[1];
  }
  result = (unsigned int *)WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v5, v8 == 0);
  if (*((_DWORD *)this + 3) == 2)
  {
    v11 = *((_QWORD *)this + 3);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        if ((*(_WORD *)(v12 + 232) & 0x2000) != 0
          && a2[3]
          && (!*((_BYTE *)this + 36)
           || !*((_BYTE *)this + 40)
           || *((unsigned __int8 *)this + 41) != (a2[1] ^ 1)))
        {
          result = (unsigned int *)WebCore::CheckboxInputType::performSwitchVisuallyOnAnimation((uint64_t)this, 0);
        }
      }
    }
  }
  if (*((_BYTE *)this + 36))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v17 = *(_QWORD *)(v14 + 640);
        v19 = 0;
        WebCore::EventHandler::setCapturingMouseEventsElement(v17, (uint64_t *)&v19);
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v18);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
      }
    }
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 36) = 0;
  }
LABEL_13:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CheckboxInputType::performSwitchVisuallyOnAnimation(uint64_t a1, uint64_t a2)
{
  void (**v4)(WebCore::RenderThemeIOS *__hidden);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;

  WebCore::CheckboxInputType::performSwitchAnimation(a1, 0);
  {
    v4 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v12 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    v4 = &off_1E335BC30;
    *(_QWORD *)v12 = &off_1E335BC30;
  }
  result = ((uint64_t (*)(uint64_t *, uint64_t))v4[65])(&WebCore::RenderTheme::singleton(void)::theme, a2);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            ++*(_DWORD *)v9;
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1520))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::Page::~Page(v9);
              return WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
        }
      }
    }
  }
  return result;
}

void *WebCore::CheckboxInputType::didDispatchClick(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v9;

  if ((*(_BYTE *)(a2 + 20) & 0xC0) == 0)
  {
    result = WebCore::BaseCheckableInputType::fireInputAndChangeEvents((_DWORD *)a1);
    goto LABEL_3;
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = 0;
      *(_DWORD *)(v6 + 24) += 2;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
LABEL_7:
  WebCore::HTMLInputElement::setIndeterminate((unsigned __int8 *)v6, (void *)*(unsigned __int8 *)(a3 + 2));
  result = WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v6, *(unsigned __int8 *)(a3 + 1));
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 20) |= 0x80u;
  return result;
}

uint64_t WebCore::switchPointerTrackingLogicalLeftPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  void *v4;
  float v5;
  float v6;
  WTF *v7;
  WTF *v8;
  float v9;
  char v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;

  v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2 && (*(_BYTE *)(v2 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B8D8C4);
  }
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v11 = 2;
  switch((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      LOBYTE(v3) = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      LOBYTE(v3) = 0;
LABEL_5:
      v11 = v3;
LABEL_6:
      if (v2 && (*(_BYTE *)(v2 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B8D8E4);
      }
      v12 = (float)(int)a2 * 0.015625;
      v13 = (float)SHIDWORD(a2) * 0.015625;
      v17 = 0;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v21 = 0;
      v22 = 1;
      v23 = 0x100000000;
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)v2 + 584))(v2, 2, &v12);
      WebCore::TransformState::flatten((WebCore::TransformState *)&v12, 0);
      v5 = v12;
      v6 = v13;
      v7 = v19;
      v19 = 0;
      if (v7)
        WTF::fastFree(v7, v4);
      v8 = v18;
      v18 = 0;
      if (v8)
        WTF::fastFree(v8, v4);
      if ((v11 & 6) == 2)
        v9 = v6;
      else
        v9 = v5;
      return (int)v9;
  }
}

BOOL WebCore::CheckboxInputType::matchesIndeterminatePseudoClass(WebCore::CheckboxInputType *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 230) & 8) == 0)
    return 0;
  if (*((_DWORD *)this + 3) == 2)
    return (*(_WORD *)(v1 + 232) & 0x2000) == 0;
  return 1;
}

unsigned int *WebCore::CheckboxInputType::disabledStateChanged(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (this[3] == 2)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if ((*(_WORD *)(v3 + 232) & 0x2000) != 0)
        {
          v4 = *(_DWORD *)(v3 + 24);
          *(_DWORD *)(v3 + 24) = v4 + 2;
          if ((*(_BYTE *)(v3 + 160) & 0x18) != 0)
          {
            *((_QWORD *)this + 6) = 0;
            *((_QWORD *)this + 7) = 0;
            this = WebCore::CheckboxInputType::stopSwitchPointerTracking(this);
            v4 = *(_DWORD *)(v3 + 24) - 2;
          }
          if (v4)
          {
            *(_DWORD *)(v3 + 24) = v4;
          }
          else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          {
            return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::CheckboxInputType::switchAnimationTimerFired(WebCore::CheckboxInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  WTF::MonotonicTime *v8;
  double updated;
  double v10;
  double v11;
  double v12;
  void (**v13)(WebCore::RenderThemeIOS *__hidden);
  double v14;
  double v15;
  double v16;
  void (**v17)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[20];
  __int128 v27;
  char v28;

  if (*((_DWORD *)this + 3) == 2)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if ((*(_WORD *)(v3 + 232) & 0x2000) != 0 && (*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195B8DBF0);
          }
          v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 8);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 24);
              if (v6)
              {
                v7 = *(WebCore::Page **)(v6 + 8);
                if (v7)
                {
                  ++*(_DWORD *)v7;
                  updated = WebCore::Page::preferredRenderingUpdateInterval(v7);
                  if (*(_DWORD *)v7 == 1)
                  {
                    WebCore::Page::~Page((uint64_t)v7);
                    v8 = (WTF::MonotonicTime *)WTF::fastFree(v23, v24);
                  }
                  else
                  {
                    --*(_DWORD *)v7;
                  }
                  if (updated > 0.0)
                  {
                    WTF::MonotonicTime::now(v8);
                    v11 = v10;
                    v12 = *((double *)this + 6);
                    {
                      v13 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                    }
                    else
                    {
                      v25 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      *(_OWORD *)(v25 + 40) = 0u;
                      *(_OWORD *)(v25 + 24) = 0u;
                      v13 = &off_1E335BC30;
                      *(_QWORD *)v25 = &off_1E335BC30;
                    }
                    v14 = v11 - v12;
                    v15 = ((double (*)(uint64_t *))v13[63])(&WebCore::RenderTheme::singleton(void)::theme);
                    v16 = *((double *)this + 7);
                    {
                      v17 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                    }
                    else
                    {
                      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      unk_1ECE88AD0 = 0u;
                      unk_1ECE88AC0 = 0u;
                      v17 = &off_1E335BC30;
                      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                    }
                    v18 = (WTF::MonotonicTime *)((uint64_t (*)(uint64_t *))v17[64])(&WebCore::RenderTheme::singleton(void)::theme);
                    if (v14 < v15 || v11 - v16 < v19)
                    {
                      v20 = *((_QWORD *)this + 8);
                      *(_QWORD *)(v20 + 24) = 0;
                      WTF::MonotonicTime::now(v18);
                      WebCore::TimerBase::setNextFireTime(v20, updated + v21);
                    }
                    else
                    {
                      *((_QWORD *)this + 6) = 0;
                      *((_QWORD *)this + 7) = 0;
                    }
                    v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
                    if (v22
                      && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL)
                                   + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195B8DC10);
                    }
                    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                               + 1944)
                                                                                   + 24)
                                                                       + 8)
                                                           + 40)
                                               + 8)
                                   + 3382))
                    {
                      LOBYTE(v27) = 0;
                      v28 = 0;
                      v26[0] = 0;
                      v26[16] = 0;
                      WebCore::RenderObject::issueRepaint(v22, &v27, 0, 0, (uint64_t)v26);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::ColorInputType::~ColorInputType(WebCore::ColorInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v4 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v4 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void `non-virtual thunk to'WebCore::ColorInputType::~ColorInputType(WebCore::ColorInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 4) = off_1E33D5AC0;
  v5 = *((_QWORD *)this - 1);
  *((_QWORD *)this - 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 4) = off_1E33D5AC0;
  v5 = (WebCore::ColorInputType *)((char *)this - 32);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v12 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
        v6 = v12;
      }
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v11 = v6;
        WTF::fastFree(v10, a2);
        v6 = v11;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::fastFree(v5, a2);
}

uint64_t WebCore::ColorInputType::isMouseFocusable(WebCore::ColorInputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return WebCore::Element::isFocusable(*(WebCore::Element **)(v1 + 8));
  else
    return WebCore::Element::isFocusable(0);
}

uint64_t WebCore::ColorInputType::isKeyboardFocusable(WebCore::ColorInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    return WebCore::Element::isFocusable(*(WebCore::Element **)(v2 + 8));
  else
    return WebCore::Element::isFocusable(0);
}

BOOL WebCore::ColorInputType::isPresentingAttachedView(WebCore::ColorInputType *this)
{
  return *((_QWORD *)this + 5) != 0;
}

WTF::StringImpl **WebCore::ColorInputType::formControlType(WebCore::ColorInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "color";
    v2[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::color(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::color(void)::name;
}

uint64_t WebCore::ColorInputType::supportsRequired(WebCore::ColorInputType *this)
{
  return 0;
}

uint64_t WebCore::ColorInputType::fallbackValue(WebCore::ColorInputType *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::ColorInputType::sanitizeValue(WebCore::ColorInputType *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  if (WebCore::isValidSimpleColor(v4, v5))
    return WTF::String::convertToASCIILowercase(a2);
  else
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

BOOL WebCore::isValidSimpleColor(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v20;
  unsigned int v21;

  if ((_DWORD)a2 != 7)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)a1 == 35)
    {
      v11 = *(unsigned __int8 *)(a1 + 1);
      v12 = v11 - 48;
      v13 = (v11 | 0x20) - 97;
      if (v12 < 0xA || v13 <= 5)
      {
        v15 = *(unsigned __int8 *)(a1 + 2);
        if ((v15 - 48) < 0xA || (v15 | 0x20u) - 97 <= 5)
        {
          v16 = *(unsigned __int8 *)(a1 + 3);
          if ((v16 - 48) < 0xA || (v16 | 0x20u) - 97 <= 5)
          {
            v17 = *(unsigned __int8 *)(a1 + 4);
            if ((v17 - 48) < 0xA || (v17 | 0x20u) - 97 <= 5)
            {
              v18 = *(unsigned __int8 *)(a1 + 5);
              if ((v18 - 48) < 0xA || (v18 | 0x20u) - 97 <= 5)
              {
                v10 = *(unsigned __int8 *)(a1 + 6);
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (*(_WORD *)a1 != 35)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 2);
  v3 = v2 - 48;
  v4 = (v2 | 0x20) - 97;
  if (v3 >= 0xA && v4 > 5)
    return 0;
  v6 = *(unsigned __int16 *)(a1 + 4);
  if ((v6 - 48) >= 0xA && (v6 | 0x20u) - 97 > 5)
    return 0;
  v7 = *(unsigned __int16 *)(a1 + 6);
  if ((v7 - 48) >= 0xA && (v7 | 0x20u) - 97 > 5)
    return 0;
  v8 = *(unsigned __int16 *)(a1 + 8);
  if ((v8 - 48) >= 0xA && (v8 | 0x20u) - 97 > 5)
    return 0;
  v9 = *(unsigned __int16 *)(a1 + 10);
  if ((v9 - 48) >= 0xA && (v9 | 0x20u) - 97 > 5)
    return 0;
  v10 = *(unsigned __int16 *)(a1 + 12);
LABEL_32:
  v20 = v10 - 48;
  v21 = (v10 | 0x20) - 97;
  return v20 < 0xA || v21 < 6;
}

WTF::StringImpl *WebCore::ColorInputType::valueAsColor@<X0>(WebCore::ColorInputType *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD **)(v3 + 8);
  else
    v4 = 0;
  v5 = (_DWORD *)v4[30];
  if (v5[3] == 64)
    goto LABEL_32;
  v6 = (WTF::StringImpl *)v4[27];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v18 = v6;
    goto LABEL_24;
  }
  v7 = v4[13];
  if (!v7)
    goto LABEL_16;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) == 0)
  {
    v9 = v7 + 32;
    LODWORD(v10) = v8 >> 5;
    if ((_DWORD)v10)
      goto LABEL_8;
LABEL_16:
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v7 + 40);
  LODWORD(v10) = *(_DWORD *)(v7 + 52);
  if (!(_DWORD)v10)
    goto LABEL_16;
LABEL_8:
  v10 = v10;
  v11 = (_QWORD *)(v9 + 8);
  while (1)
  {
    v12 = *(v11 - 1);
    if (v12 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v11 += 2;
    if (!--v10)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  if (*v11)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 296))(&v18);
    v6 = v18;
    if (v18)
      goto LABEL_24;
    v18 = 0;
    v5 = (_DWORD *)v4[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 64))(&v18);
  while (1)
  {
    v6 = v18;
    if (v18)
    {
LABEL_24:
      v13 = *((_QWORD *)v6 + 1);
      v14 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v15 = WebCore::parseSimpleColorValue(v13, v14);
    if (BYTE4(v15))
      break;
    v5 = (_DWORD *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_32:
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v5, &v18);
  }
  *a2 = bswap32(v15) | 0x1104000000000000;
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::parseSimpleColorValue(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  unsigned int v20;
  int v21;

  result = WebCore::isValidSimpleColor(a1, a2);
  if (!(_DWORD)result)
  {
    v8 = 0;
    v9 = 0;
    return v9 | (unint64_t)(v8 << 32);
  }
  v5 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (a2 <= 2)
      goto LABEL_37;
    v6 = *(unsigned __int8 *)(a1 + 1);
    v7 = *(unsigned __int8 *)(a1 + 2);
  }
  else
  {
    if (a2 <= 2)
      goto LABEL_37;
    v6 = *(unsigned __int16 *)(a1 + 2);
    v7 = *(unsigned __int16 *)(a1 + 4);
  }
  if (v6 >= 0x41)
    v10 = 9;
  else
    v10 = 0;
  if (v7 >= 0x41)
    v11 = (v7 + 9) & 0xF;
  else
    v11 = v7 - 48;
  if (v5)
  {
    if (a2 <= 4)
      goto LABEL_37;
    v12 = *(unsigned __int8 *)(a1 + 3);
    v13 = *(unsigned __int8 *)(a1 + 4);
  }
  else
  {
    if (a2 <= 4)
      goto LABEL_37;
    v12 = *(unsigned __int16 *)(a1 + 6);
    v13 = *(unsigned __int16 *)(a1 + 8);
  }
  if (v12 >= 0x41)
    v14 = 9;
  else
    v14 = 0;
  if (v13 >= 0x41)
    v15 = (v13 + 9) & 0xF;
  else
    v15 = v13 - 48;
  if (v5)
  {
    if (a2 > 6)
    {
      v16 = *(unsigned __int8 *)(a1 + 5);
      v17 = *(unsigned __int8 *)(a1 + 6);
      goto LABEL_30;
    }
  }
  else if (a2 > 6)
  {
    v16 = *(unsigned __int16 *)(a1 + 10);
    v17 = *(unsigned __int16 *)(a1 + 12);
LABEL_30:
    v18 = v11 | (16 * (v10 + v6));
    if (v16 >= 0x41)
      v19 = 9;
    else
      v19 = 0;
    v20 = v19 + v16;
    v21 = v17 - 48;
    if (v17 >= 0x41)
      v21 = ((_BYTE)v17 + 9) & 0xF;
    v9 = (v20 << 20) | (v21 << 16) | ((v15 | (16 * (v14 + v12))) << 8) | v18 | 0xFF000000;
    v8 = 1;
    return v9 | (unint64_t)(v8 << 32);
  }
LABEL_37:
  __break(1u);
  return result;
}

unsigned int *WebCore::ColorInputType::createShadowSubtree(WebCore::ColorInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::Style::RuleSet *v7;
  WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::Style::RuleSet *v12;
  WTF::String *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *result;
  void *v28;
  uint64_t v29;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = bmalloc::api::isoAllocate();
  v4 = v3;
  *(_OWORD *)(v3 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v3 + 24) = 0x101C00000002;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = v2 + 96;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  ++*(_DWORD *)(v2 + 3324);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  v5 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v3 + 96) = v5;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)v3 = off_1E33B9CC0;
  v6 = bmalloc::api::isoAllocate();
  v9 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(v2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v10 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  v11 = 0;
  *(_QWORD *)(v6 + 96) = v10;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33B9CC0;
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v11 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::ContainerNode::parserAppendChild(v11, (WebCore::Node *)v4, v7, v8);
  WebCore::ContainerNode::parserAppendChild(v4, (WebCore::Node *)v9, v12, v13);
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitColorSwatchWrapper(void)::webkitColorSwatchWrapper = v29;
  }
  v14 = *(_QWORD *)(v4 + 104);
  if (!v14)
    goto LABEL_21;
  v15 = *(_DWORD *)(v14 + 4);
  if ((v15 & 1) != 0)
  {
    v16 = *(uint64_t **)(v14 + 40);
    v17 = *(_DWORD *)(v14 + 52);
    if (!v17)
    {
LABEL_21:
      v18 = 0xFFFFFFFFLL;
      goto LABEL_22;
    }
  }
  else
  {
    v16 = (uint64_t *)(v14 + 32);
    v17 = v15 >> 5;
    if (!v17)
      goto LABEL_21;
  }
  v18 = 0;
  while (1)
  {
    v19 = *v16;
    if (*v16 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v18;
    v16 += 2;
    if (v17 == v18)
      goto LABEL_21;
  }
LABEL_22:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v4, v18, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitColorSwatchWrapper(void)::webkitColorSwatchWrapper, 0);
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitColorSwatch(void)::webkitColorSwatch = v29;
  }
  v20 = *(_QWORD *)(v9 + 104);
  if (!v20)
    goto LABEL_36;
  v21 = *(_DWORD *)(v20 + 4);
  if ((v21 & 1) != 0)
  {
    v22 = *(uint64_t **)(v20 + 40);
    v23 = *(_DWORD *)(v20 + 52);
    if (!v23)
    {
LABEL_36:
      v24 = 0xFFFFFFFFLL;
      goto LABEL_37;
    }
  }
  else
  {
    v22 = (uint64_t *)(v20 + 32);
    v23 = v21 >> 5;
    if (!v23)
      goto LABEL_36;
  }
  v24 = 0;
  while (1)
  {
    v25 = *v22;
    if (*v22 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v24;
    v22 += 2;
    if (v23 == v24)
      goto LABEL_36;
  }
LABEL_37:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v9, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitColorSwatch(void)::webkitColorSwatch, 0);
  result = WebCore::ColorInputType::updateColorSwatch((unsigned int *)this, v26);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v11, v28);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v9, v28);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v28);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v28);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::ColorInputType::updateColorSwatch(unsigned int *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v2)
    {
      v3 = this;
      *(_DWORD *)(v2 + 24) += 2;
      this = *(unsigned int **)(v2 + 80);
      if (this)
      {
        while (1)
        {
          if ((this[7] & 0x10) != 0)
          {
            v4 = *(_QWORD *)(WebCore::HTMLNames::divTag + 24);
            if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == v4)
              break;
          }
          this = (unsigned int *)*((_QWORD *)this + 7);
          if (!this)
            goto LABEL_8;
        }
        v6 = this[6];
        this[6] = v6 + 2;
        for (i = *((_QWORD *)this + 10); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == v4)
            break;
        }
        if (v6)
        {
          this[6] = v6;
        }
        else if ((*((_WORD *)this + 15) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
      }
      else
      {
LABEL_8:
        i = 0;
      }
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      if (i)
      {
        *(_DWORD *)(i + 24) += 2;
        v7 = *((_QWORD *)v3 + 3);
        if (v7)
          v8 = *(_QWORD **)(v7 + 8);
        else
          v8 = 0;
        v9 = (_DWORD *)v8[30];
        if (v9[3] == 64)
        {
          WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v9, &v18);
          goto LABEL_39;
        }
        v10 = (WTF::StringImpl *)v8[27];
        if (v10)
        {
          *(_DWORD *)v10 += 2;
          v18 = v10;
          goto LABEL_39;
        }
        v11 = v8[13];
        if (v11)
        {
          v12 = *(_DWORD *)(v11 + 4);
          if ((v12 & 1) != 0)
          {
            v13 = *(_QWORD *)(v11 + 40);
            LODWORD(v14) = *(_DWORD *)(v11 + 52);
            if ((_DWORD)v14)
            {
LABEL_25:
              v14 = v14;
              v15 = (_QWORD *)(v13 + 8);
              while (1)
              {
                v16 = *(v15 - 1);
                if (v16 == WebCore::HTMLNames::valueAttr
                  || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                  && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                {
                  break;
                }
                v15 += 2;
                if (!--v14)
                {
                  v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
LABEL_34:
              if (*v15)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 296))(&v18);
                if (v18)
                  goto LABEL_39;
                v18 = 0;
                v9 = (_DWORD *)v8[30];
              }
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 64))(&v18);
LABEL_39:
              WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)i, (WTF::StringImpl *)0x3D, (uint64_t)&v18, 0, 0);
              this = (unsigned int *)v18;
              v18 = 0;
              if (this)
              {
                if (*this == 2)
                  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
                else
                  *this -= 2;
              }
              if (*(_DWORD *)(i + 24) == 2)
              {
                if ((*(_WORD *)(i + 30) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)i, v17);
              }
              else
              {
                *(_DWORD *)(i + 24) -= 2;
              }
              return this;
            }
          }
          else
          {
            v13 = v11 + 32;
            LODWORD(v14) = v12 >> 5;
            if ((_DWORD)v14)
              goto LABEL_25;
          }
        }
        v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        goto LABEL_34;
      }
    }
  }
  return this;
}

void WebCore::ColorInputType::setValue(uint64_t a1, WTF::StringImpl *a2, int a3, int a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  WebCore::InputType::setValue(a1, a2, a3, a4);
  if (a3)
  {
    WebCore::ColorInputType::updateColorSwatch((unsigned int *)a1, v6);
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      WebCore::ColorInputType::valueAsColor((WebCore::ColorInputType *)a1, &v12);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v12);
      if ((v12 & 0x8000000000000) != 0)
      {
        v9 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v8);
        }
      }
    }
  }
}

void WebCore::ColorInputType::attributeChanged(WebCore::ColorInputType *this, const WebCore::QualifiedName *a2)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WebCore::AXObjectCache *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::valueAttr)
  {
    WebCore::ColorInputType::updateColorSwatch((unsigned int *)this, a2);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v3 = *(WebCore::Node **)(*((_QWORD *)this + 3) + 8);
      v4 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
      if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
      {
        while (1)
        {
          v12 = *(_QWORD *)(v4 + 528);
          if (!v12)
            break;
          v13 = *(_QWORD *)(v12 + 8);
          if (!v13)
            break;
          v14 = *(_QWORD *)(v13 + 120);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v4 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
        }
      }
      else
      {
        v5 = *(_QWORD *)(v4 + 528);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
            if (v7 && *(_BYTE *)(v7 + 144) == 0)
            {
              v9 = *(_QWORD *)(v7 + 296);
              if (v9)
                v4 = v9;
            }
          }
        }
      }
      v10 = *(WebCore::AXObjectCache **)(v4 + 1488);
      if (v10)
      {
        ++*((_DWORD *)v10 + 2);
        WebCore::AXObjectCache::postNotification(v10, v3, 57, 0);
        v11 = *((_DWORD *)v10 + 2);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195B8EDA8);
        }
        *((_DWORD *)v10 + 2) = v11 - 1;
      }
    }
  }
}

_QWORD *WebCore::ColorInputType::handleDOMActivateEvent(_QWORD *this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = this[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v3 + 160) & 0x18) == 0)
    {
      v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195B8EE3CLL);
        }
        v6 = this;
        this = (_QWORD *)WTF::isMainThread((WTF *)this);
        if ((_DWORD)this)
        {
          {
            if (WebCore::currentToken(void)::token
              && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
              && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
            {
              this = WebCore::ColorInputType::showPicker(v6);
              *((_DWORD *)a2 + 5) |= 0x80u;
            }
          }
          else
          {
            WebCore::currentToken(void)::token = 0;
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::ColorInputType::showPicker(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*(_QWORD *)(v4 + 48))
          {
            v5 = this;
            v6 = this[5];
            if (v6)
            {
              WebCore::ColorInputType::valueAsColor((WebCore::ColorInputType *)this, &v11);
              this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v11);
              if ((v11 & 0x8000000000000) == 0)
                return this;
              this = (_QWORD *)(v11 & 0xFFFFFFFFFFFFLL);
              do
              {
                v8 = __ldaxr((unsigned int *)this);
                v9 = --v8 == 0;
              }
              while (__stlxr(v8, (unsigned int *)this));
              goto LABEL_17;
            }
            WebCore::ColorInputType::valueAsColor((WebCore::ColorInputType *)this, &v11);
            this = (_QWORD *)v5[5];
            v5[5] = 0;
            if (this)
              this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
            if ((v11 & 0x8000000000000) != 0)
            {
              this = (_QWORD *)(v11 & 0xFFFFFFFFFFFFLL);
              do
              {
                v10 = __ldaxr((unsigned int *)this);
                v9 = --v10 == 0;
              }
              while (__stlxr(v10, (unsigned int *)this));
LABEL_17:
              if (v9)
              {
                atomic_store(1u, (unsigned int *)this);
                return (_QWORD *)WTF::fastFree((WTF *)this, v7);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ColorInputType::allowsShowPickerAcrossFrames(WebCore::ColorInputType *this)
{
  return 1;
}

uint64_t WebCore::ColorInputType::detach(WebCore::ColorInputType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::ColorInputType::elementDidBlur(WebCore::ColorInputType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::ColorInputType::shouldRespectListAttribute(WebCore::ColorInputType *this)
{
  return 1;
}

BOOL WebCore::ColorInputType::typeMismatchFor(WebCore::ColorInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  return !WebCore::isValidSimpleColor(v3, v4);
}

uint64_t WebCore::ColorInputType::shouldResetOnDocumentActivation(WebCore::ColorInputType *this)
{
  return 1;
}

void WebCore::ColorInputType::didChooseColor(WebCore::ColorInputType *this, const WebCore::Color *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  int v5;
  uint64_t v6;
  WebCore::HTMLInputElement *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WebCore::Node *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  WebCore::AXObjectCache *v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160) & 0x18) == 0)
  {
    v3 = (WTF::StringImpl *)(bswap32(WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)a2, (uint64_t)&v38) | 0xFF000000) | 0x1104000000000000);
    WebCore::ColorInputType::valueAsColor(this, (uint64_t *)&v38);
    if (((unint64_t)v38 & 0x8000000000000) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFLL);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v4);
      }
    }
    else if (v3 == v38)
    {
      return;
    }
    {
      v5 = qword_1EE2F5808;
    }
    else
    {
      v5 = 0;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      qword_1EE2F5808 = 0;
    }
    LODWORD(qword_1EE2F5808) = v5 + 1;
    v6 = *((_QWORD *)this + 3);
    if (v6)
      v7 = *(WebCore::HTMLInputElement **)(v6 + 8);
    else
      v7 = 0;
    v37 = v3;
    WebCore::serializationForHTML((WebCore *)&v37, &v38);
    WebCore::HTMLInputElement::setValueFromRenderer(v7, (const WTF::String *)&v38);
    v9 = v38;
    v38 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (((unint64_t)v37 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)((unint64_t)v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v8);
      }
    }
    WebCore::ColorInputType::updateColorSwatch((unsigned int *)this, v8);
    v10 = *((_QWORD *)this + 3);
    if (v10)
      v11 = *(WTF ***)(v10 + 8);
    else
      v11 = 0;
    v12 = (uint64_t)WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent(v11);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v13 = *(WebCore::Node **)(*((_QWORD *)this + 3) + 8);
      v19 = *(_QWORD *)(*((_QWORD *)v13 + 5) + 8);
      if (*(_BYTE *)(v19 + 3362) || *(_BYTE *)(v19 + 3405))
      {
        while (1)
        {
          v33 = *(_QWORD *)(v19 + 528);
          if (!v33)
            break;
          v34 = *(_QWORD *)(v33 + 8);
          if (!v34)
            break;
          v35 = *(_QWORD *)(v34 + 120);
          if (!v35)
            break;
          v36 = *(_QWORD *)(v35 + 8);
          if (!v36)
            break;
          v19 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8);
        }
      }
      else
      {
        v20 = *(_QWORD *)(v19 + 528);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v21 + 128) + 8);
            if (v22 && *(_BYTE *)(v22 + 144) == 0)
            {
              v24 = *(_QWORD *)(v22 + 296);
              if (v24)
                v19 = v24;
            }
          }
        }
      }
      v25 = *(WebCore::AXObjectCache **)(v19 + 1488);
      if (v25)
      {
        ++*((_DWORD *)v25 + 2);
        WebCore::AXObjectCache::postNotification(v25, v13, 57, 0);
        v26 = *((_DWORD *)v25 + 2);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x195B8F300);
        }
        *((_DWORD *)v25 + 2) = v26 - 1;
      }
    }
    {
      unk_1EE2F5800 = 0;
      qword_1EE2F5808 = 0xFFFFFFFFLL;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      return;
    }
    LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
    if (!(_DWORD)qword_1EE2F5808)
    {
      v14 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
      v15 = dword_1EE2F5804;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      if (!(_DWORD)v15)
      {
        if (!v14)
          return;
LABEL_24:
        WTF::fastFree(v14, v13);
        return;
      }
      v16 = 0;
      v17 = 16 * v15;
      v18 = (_DWORD *)((char *)v14 + 16 * v15);
      do
      {
        v12 = WebCore::ScopedEventQueue::dispatchEvent(v12, (WTF *)((char *)v14 + v16));
        v16 += 16;
      }
      while (v17 != v16);
      WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v14, v18);
      if (v14)
        goto LABEL_24;
    }
  }
}

void `non-virtual thunk to'WebCore::ColorInputType::didChooseColor(WebCore::ColorInputType *this, const WebCore::Color *a2)
{
  WebCore::ColorInputType::didChooseColor((WebCore::ColorInputType *)((char *)this - 32), a2);
}

uint64_t WebCore::ColorInputType::didEndChooser(WebCore::ColorInputType *this)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944)
                                                                        + 24)
                                                            + 8)
                                                + 40)
                                    + 8)
                        + 3382))
    {
      LOBYTE(v5) = 0;
      v6 = 0;
      v4[0] = 0;
      v4[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v5, 0, 0, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ColorInputType::didEndChooser(WebCore::ColorInputType *this)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 1) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 1) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 1) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944)
                                                                        + 24)
                                                            + 8)
                                                + 40)
                                    + 8)
                        + 3382))
    {
      LOBYTE(v5) = 0;
      v6 = 0;
      v4[0] = 0;
      v4[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v5, 0, 0, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t WebCore::ColorInputType::elementRectRelativeToRootView(WebCore::ColorInputType *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  result = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
      if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
        v5 = *(WebCore::ScrollView **)(v4 + 288);
      else
        v5 = 0;
      v7[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)result, 1, 0);
      v7[1] = v6;
      return WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v7);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ColorInputType::elementRectRelativeToRootView(WebCore::ColorInputType *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(*((_QWORD *)this - 1) + 8);
  result = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
      if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
        v5 = *(WebCore::ScrollView **)(v4 + 288);
      else
        v5 = 0;
      v7[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)result, 1, 0);
      v7[1] = v6;
      return WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v7);
    }
  }
  return result;
}

unsigned int *WebCore::ColorInputType::suggestedColors@<X0>(WebCore::ColorInputType *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  WTF::StringImpl *v6;
  WebCore::Node *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::Node *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _QWORD *v25;
  WTF *v26;
  WebCore::Node *v27;
  __int16 v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WTF::StringImpl *v36;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  result = (unsigned int *)WebCore::HTMLInputElement::dataList(v4, &v35);
  v7 = v35;
  if (!v35)
    return result;
  v34 = v35;
  v8 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v34, v6);
  if (!v8)
    goto LABEL_66;
  v10 = (WebCore::Node *)v8;
  v11 = &WebCore::HTMLNames::optgroupTag;
LABEL_6:
  WebCore::HTMLOptionElement::value(v10, v9, &v36);
  v12 = (unint64_t)v36;
  if (v36)
  {
    v13 = *((_QWORD *)v36 + 1);
    v12 = *((unsigned int *)v36 + 1);
    v14 = ((unint64_t)*((unsigned int *)v36 + 4) >> 2) & 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = WebCore::parseSimpleColorValue(v13, v12 | (v14 << 32));
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *result -= 2;
  }
  if (!BYTE4(v15))
  {
LABEL_31:
    while (1)
    {
      v27 = (WebCore::Node *)*((_QWORD *)v10 + 10);
      if (!v27)
        break;
LABEL_32:
      while (1)
      {
        v10 = v27;
        v28 = *((_WORD *)v27 + 14);
        if ((v28 & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v10 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          break;
        }
        if ((v28 & 4) != 0)
        {
          v27 = (WebCore::Node *)*((_QWORD *)v10 + 10);
          if (v27)
            continue;
        }
        if (v10 == v7)
          goto LABEL_66;
        while (1)
        {
          v27 = (WebCore::Node *)*((_QWORD *)v10 + 7);
          if (v27)
            break;
          v10 = (WebCore::Node *)*((_QWORD *)v10 + 4);
          if (v10)
            v29 = v10 == v7;
          else
            v29 = 1;
          if (v29)
            goto LABEL_66;
        }
      }
      if (!*((_BYTE *)v10 + 112))
      {
        v31 = *((_QWORD *)v10 + 4);
        if (!v31
          || (*(_WORD *)(v31 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v31 + 96) + 24) != *(_QWORD *)(*v11 + 24)
          || !*(_BYTE *)(v31 + 112))
        {
          WebCore::HTMLOptionElement::value(v10, v9, &v36);
          v32 = v36;
          if (v36)
          {
            v33 = *((_DWORD *)v36 + 1);
            v36 = 0;
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v9);
              if (v33)
                goto LABEL_6;
            }
            else
            {
              *(_DWORD *)v32 -= 2;
              if (v33)
                goto LABEL_6;
            }
          }
        }
      }
    }
    if (v10 != v7)
    {
      do
      {
        v27 = (WebCore::Node *)*((_QWORD *)v10 + 7);
        if (v27)
          goto LABEL_32;
        v10 = (WebCore::Node *)*((_QWORD *)v10 + 4);
        if (v10)
          v30 = v10 == v7;
        else
          v30 = 1;
      }
      while (!v30);
    }
LABEL_66:
    result = (unsigned int *)v35;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v35, v9);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    return result;
  }
  v16 = *(unsigned int *)(a2 + 12);
  v17 = *(WTF **)a2;
  if ((_DWORD)v16 != *(_DWORD *)(a2 + 8))
  {
LABEL_30:
    *((_QWORD *)v17 + v16) = bswap32(v15) | 0x1104000000000000;
    *(_DWORD *)(a2 + 12) = v16 + 1;
    goto LABEL_31;
  }
  v18 = v16 + (v16 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v16 + 1)
    v20 = v16 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = v11;
    v22 = WTF::fastMalloc((WTF *)(8 * v20));
    v23 = (WTF *)v22;
    *(_DWORD *)(a2 + 8) = v20;
    *(_QWORD *)a2 = v22;
    if ((_DWORD)v16)
    {
      v24 = 8 * v16;
      v25 = (_QWORD *)v22;
      v26 = v17;
      do
      {
        *v25 = 0;
        if (*(_QWORD *)v26)
        {
          *v25 = *(_QWORD *)v26;
          *(_QWORD *)v26 = 0;
        }
        ++v25;
        v26 = (WTF *)((char *)v26 + 8);
        v24 -= 8;
      }
      while (v24);
    }
    if (v17)
    {
      if ((WTF *)v22 == v17)
      {
        v23 = 0;
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree(v17, v9);
    }
    v17 = v23;
    v11 = v21;
    goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::ColorInputType::suggestedColors@<X0>(WebCore::ColorInputType *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::ColorInputType::suggestedColors((WebCore::ColorInputType *)((char *)this - 32), a2);
}

void WebCore::CustomPaintCanvas::~CustomPaintCanvas(WebCore::CustomPaintCanvas *this)
{
  void *v2;
  WebCore::CanvasRenderingContext2DBase *v3;
  WebCore::DisplayList::DrawingContext *v4;
  WTF *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WebCore::CanvasRenderingContext2DBase *v30;
  WebCore::DisplayList::DrawingContext *v31;
  WTF *v32;
  void *v33;
  bmalloc::api *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  WebCore::CanvasBase::notifyObserversCanvasDestroyed(this);
  v3 = (WebCore::CanvasRenderingContext2DBase *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    v4 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)v3 + 102);
    *((_QWORD *)v3 + 102) = 0;
    if (v4)
    {
      WebCore::DisplayList::DrawingContext::~DrawingContext(v4);
      WTF::fastFree(v5, v6);
    }
    WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(v3, v2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
  v39 = 0;
  WebCore::CanvasBase::setImageBuffer(this, &v39, &v40);
  v10 = v40;
  v40 = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_10:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v37 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v37 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          goto LABEL_22;
LABEL_18:
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          WTF::fastFree((WTF *)v11, v9);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_22:
  v18 = v39;
  v39 = 0;
  if (!v18)
    goto LABEL_39;
  v19 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_27:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v38 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v38 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      goto LABEL_39;
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_34;
  if (v22)
    goto LABEL_39;
LABEL_35:
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (!v24)
    WTF::fastFree((WTF *)v19, v9);
LABEL_39:
  v26 = (WTF::StringImpl **)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v26)
  {
    v27 = v26[5];
    v26[5] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = *v26;
    *v26 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v28 -= 2;
    }
    WTF::fastFree((WTF *)v26, v9);
  }
  v29 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
  }
  v30 = (WebCore::CanvasRenderingContext2DBase *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v30)
  {
    v31 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)v30 + 102);
    *((_QWORD *)v30 + 102) = 0;
    if (v31)
    {
      WebCore::DisplayList::DrawingContext::~DrawingContext(v31);
      WTF::fastFree(v32, v33);
    }
    WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(v30, v9);
    bmalloc::api::isoDeallocate(v34, v35);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::CustomPaintCanvas *)((char *)this + 120), v9);
  WebCore::CanvasBase::~CanvasBase(this, v36);
}

{
  WTF *v1;
  void *v2;

  WebCore::CustomPaintCanvas::~CustomPaintCanvas(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::CustomPaintCanvas::~CustomPaintCanvas(WebCore::CustomPaintCanvas *this)
{
  WebCore::CustomPaintCanvas::~CustomPaintCanvas((WebCore::CustomPaintCanvas *)((char *)this - 120));
}

{
  WTF *v1;
  void *v2;

  WebCore::CustomPaintCanvas::~CustomPaintCanvas((WebCore::CustomPaintCanvas *)((char *)this - 120));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::CanvasBase::width(WebCore::CanvasBase *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t WebCore::CanvasBase::height(WebCore::CanvasBase *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t WebCore::CustomPaintCanvas::copiedImage(WebCore::CustomPaintCanvas *this)
{
  int v1;
  int v3;
  _DWORD *v4;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  WebCore::GraphicsContext *v8;
  char *v9;
  uint64_t v11;
  int v12;
  char v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char **v46;
  char *v47;
  uint64_t v48;

  v1 = *((_DWORD *)this + 2);
  if (!v1)
    return 0;
  v3 = *((_DWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v1 = *((_DWORD *)this + 2);
      v3 = *((_DWORD *)this + 3);
    }
    else
    {
      --v4[2];
    }
  }
  *(float *)&v44 = (float)v1;
  *((float *)&v44 + 1) = (float)v3;
  v5 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v5 != -1)
  {
    v47 = &v45;
    v46 = &v47;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v46, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v47 = 0;
  v48 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v44, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v46, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v48 + 4));
  v6 = v46;
  if (!v46)
    return *((_QWORD *)this + 18);
  v7 = *((_QWORD *)this + 17);
  if (!v7
    || (v8 = (WebCore::GraphicsContext *)(*((uint64_t (**)(char **))*v46 + 2))(v46),
        WebCore::PaintRenderingContext2D::replayDisplayList(v7, v8),
        (v6 = v46) != 0))
  {
    v9 = v6[1];
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_17:
    ++*((_QWORD *)v9 + 1);
    v12 = __ldxr((unsigned __int8 *)v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_22:
    (*((void (**)(uint64_t *__return_ptr, char **))*v6 + 17))(&v44, v6);
    v13 = 0;
    goto LABEL_23;
  }
  v44 = 0;
  v13 = 1;
LABEL_23:
  WebCore::BitmapImage::create(&v44, (uint64_t *)&v47);
  v15 = (uint64_t)v47;
  v47 = 0;
  v16 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v15;
  if (v16)
  {
    if (v16[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      v47 = 0;
    }
    else
    {
      --v16[2];
    }
  }
  v17 = v44;
  v44 = 0;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_31:
    v20 = *(_QWORD *)(v18 + 8);
    v21 = v20 - 1;
    *(_QWORD *)(v18 + 8) = v20 - 1;
    if (v20 == 1)
    {
      v41 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      v23 = v41 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    v24 = __ldxr((unsigned __int8 *)v18);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
        if (v21)
          goto LABEL_43;
LABEL_39:
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        if (!v23)
          WTF::fastFree((WTF *)v18, v14);
        goto LABEL_43;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      goto LABEL_43;
    goto LABEL_39;
  }
LABEL_43:
  if ((v13 & 1) != 0)
    goto LABEL_60;
  v25 = v6[1];
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_48:
  v27 = *((_QWORD *)v25 + 1);
  v28 = v27 - 1;
  *((_QWORD *)v25 + 1) = v27 - 1;
  if (v27 == 1)
  {
    v42 = *((_QWORD *)v25 + 2);
    v29 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v25 + 3) = 0;
    v30 = v42 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 != 1)
  {
    __clrex();
LABEL_55:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
    if (v28)
      goto LABEL_60;
    goto LABEL_56;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
    goto LABEL_55;
  if (v28)
    goto LABEL_60;
LABEL_56:
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v30)
    WTF::fastFree((WTF *)v25, v14);
LABEL_60:
  v32 = (uint64_t)v46;
  v11 = *((_QWORD *)this + 18);
  v46 = 0;
  if (!v32)
    return v11;
  v33 = *(_QWORD *)(v32 + 8);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_65;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_65:
  v35 = *(_QWORD *)(v33 + 8);
  v36 = v35 - 1;
  *(_QWORD *)(v33 + 8) = v35 - 1;
  if (v35 == 1)
  {
    v43 = *(_QWORD *)(v33 + 16);
    v37 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 24) = 0;
    v38 = v43 != 0;
  }
  else
  {
    v37 = 0;
    v38 = 1;
  }
  v39 = __ldxr((unsigned __int8 *)v33);
  if (v39 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v33))
    {
      if (v36)
        return v11;
      goto LABEL_73;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v33);
  if (v36)
    return v11;
LABEL_73:
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (!v38)
    WTF::fastFree((WTF *)v33, v14);
  return v11;
}

_DWORD *WebCore::CustomPaintCanvas::clearCopiedImage(WebCore::CustomPaintCanvas *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::CustomPaintCanvas::cssParserContext(WebCore::CustomPaintCanvas *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int128 v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char **v16;
  char *v17;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x40);
    v12 = 0;
    WTF::URL::invalidate((WTF::URL *)&v12);
    v4 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)v1 = v4;
    v5 = v13;
    *(_OWORD *)(v1 + 24) = v14;
    *(_OWORD *)(v1 + 8) = v5;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 46) = 0;
    *(_DWORD *)(v1 + 54) &= 0xC0000000;
    v6 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v6 != -1)
    {
      v17 = &v15;
      v16 = &v17;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v7 = v12;
    v12 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v1;
    if (v8)
    {
      v9 = v8[5];
      v8[5] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v3);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::fastFree((WTF *)v8, v3);
      return *((_QWORD *)this + 19);
    }
  }
  return v1;
}

uint64_t WebCore::CustomPaintImage::CustomPaintImage(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  WTF *v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E33B0700;
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    goto LABEL_36;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a2;
  v12 = *(unsigned int **)a2;
  *(_QWORD *)a2 = v10;
  if (!v12)
    goto LABEL_36;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
LABEL_36:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
  }
  v16 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 92) = v16;
  if ((_DWORD)v16)
  {
    if (v16 >> 29)
      goto LABEL_32;
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
    *(_DWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 80) = v27;
    v28 = *(unsigned int *)(a2 + 44);
    if ((_DWORD)v28)
    {
      v29 = *(_DWORD ***)(a2 + 32);
      v30 = 8 * v28;
      do
      {
        v31 = *v29;
        if (*v29)
          *v31 += 2;
        *v27++ = v31;
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  v17 = *(_QWORD *)(a4 + 8);
  if (v17)
    goto LABEL_10;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a4;
  v21 = *(WTF **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v17;
  if (!v21)
    goto LABEL_10;
  if (*(_DWORD *)v21 != 1)
  {
    --*(_DWORD *)v21;
LABEL_10:
    ++*(_DWORD *)v17;
    goto LABEL_11;
  }
  WTF::fastFree(v21, v20);
  v17 = *(_QWORD *)(a4 + 8);
  if (v17)
    goto LABEL_10;
LABEL_11:
  v18 = *(unsigned int *)(a5 + 12);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 116) = v18;
  if (!(_DWORD)v18)
    goto LABEL_12;
  if (v18 >> 29)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x195B90340);
  }
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
  *(_DWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 104) = v22;
  v23 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v23)
  {
    v24 = *(_DWORD ***)a5;
    v25 = 8 * v23;
    do
    {
      v26 = *v24;
      if (*v24)
        *v26 += 2;
      *v22++ = v26;
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
LABEL_12:
  *(_QWORD *)(a1 + 64) = *a3;
  return a1;
}

uint64_t WebCore::GeneratedImage::setContainerSize(uint64_t this, const WebCore::FloatSize *a2)
{
  *(_QWORD *)(this + 64) = *(_QWORD *)a2;
  return this;
}

void WebCore::CustomPaintImage::~CustomPaintImage(WebCore::CustomPaintImage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v3 = *((unsigned int *)this + 29);
  if ((_DWORD)v3)
  {
    v14 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    v15 = 8 * v3;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v4 = (WTF *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((unsigned int *)this + 23);
  if ((_DWORD)v6)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    v12 = 8 * v6;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  WebCore::Image::~Image(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CustomPaintImage::~CustomPaintImage(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CustomPaintImage::doCustomPaint(WebCore::CustomPaintImage *this, WebCore::GraphicsContext *a2, float32x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  JSC::JSCell *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  WebCore::CanvasRenderingContext2DBase *v27;
  WebCore::DisplayList::DrawingContext *v28;
  WTF *v29;
  void *v30;
  bmalloc::api *v31;
  void *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const WTF::AtomString *v37;
  const WTF::AtomString *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::Node *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  _DWORD *v52;
  unsigned int v53;
  int i;
  unsigned int v55;
  _QWORD *v56;
  _DWORD *v57;
  WebCore::Node **v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  WebCore::Node **v65;
  uint64_t v66;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t Object;
  _QWORD *v73;
  uint64_t v74;
  JSC::JSGlobalObject *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  int v81;
  float v82;
  unint64_t v83;
  WebCore::GraphicsContext *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  _DWORD *v98;
  int v99;
  WTF *v100;
  void *v101;
  uint64_t v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t *v104;
  float64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[8];
  uint64_t v109;
  WebCore::Node *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  char v113;
  char v114;
  WebCore::Node **v115;
  float v116;
  float v117;
  float v118[2];
  _QWORD v119[2];

  v3 = *((_QWORD *)this + 12);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 45) & 1) != 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  if (!v5)
    return 0;
  if ((*(_WORD *)(v5 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195B90DFCLL);
  }
  v7 = *((_QWORD *)this + 9);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0;
  v9 = *(JSC::JSCell **)(v8 + 16);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_DWORD *)(v10 + 16);
  *(_DWORD *)(v10 + 16) = v11 + 1;
  v107 = v10;
  v12 = *(_QWORD *)(v10 + 8);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0)
  {
    v66 = 0;
    v69 = (_DWORD *)v10;
    goto LABEL_151;
  }
  v16 = (WebCore::ScriptExecutionContext *)(v13 - 96);
  v17 = *(unsigned __int8 *)(v13 + 178);
  v106 = v13;
  if (*(_BYTE *)(v13 + 178))
  {
    if (v17 == 1 || v17 == 2)
      ++*(_DWORD *)(v13 + 216);
  }
  else
  {
    *(_DWORD *)(v13 - 264) += 2;
  }
  v18 = a3->f32[0];
  v19 = a3->f32[1];
  v20 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(v20 + 112) = 1;
  v21 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v16 + 216))(v16);
  *(_QWORD *)v20 = off_1E33B0568;
  *(_QWORD *)(v20 + 8) = v18 | (v19 << 32);
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  v22 = 0x7FFFFFFFFFFFFFFFLL;
  if (v23)
    v22 = v21;
  *(_QWORD *)(v20 + 64) = v22;
  *(_WORD *)(v20 + 72) = 1;
  *(_OWORD *)(v20 + 80) = 0uLL;
  *(_OWORD *)(v20 + 96) = 0uLL;
  *(_QWORD *)(v20 + 120) = &off_1E33A18C0;
  *(_QWORD *)(v20 + 128) = 0;
  v103 = v16;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v20 + 120), v16);
  *(_QWORD *)v20 = off_1E33B0620;
  *(_QWORD *)(v20 + 120) = &unk_1E33B06D8;
  *(_QWORD *)(v20 + 136) = 0;
  *(_QWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 152) = 0;
  v24 = bmalloc::api::isoAllocate();
  LOWORD(v110) = 0;
  BYTE2(v110) = 0;
  BYTE4(v110) = 0;
  LOBYTE(v111) = 0;
  v25 = (_QWORD *)WebCore::CanvasRenderingContext2DBase::CanvasRenderingContext2DBase(v24, v20, (uint64_t *)&v110, 0);
  *v25 = off_1E33DD4F8;
  v25[5] = &unk_1E33DD630;
  v25[102] = 0;
  v27 = *(WebCore::CanvasRenderingContext2DBase **)(v20 + 136);
  v104 = (uint64_t *)(v20 + 136);
  *(_QWORD *)(v20 + 136) = v25;
  if (!v27)
    goto LABEL_19;
  v28 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)v27 + 102);
  *((_QWORD *)v27 + 102) = 0;
  if (v28)
  {
    WebCore::DisplayList::DrawingContext::~DrawingContext(v28);
    WTF::fastFree(v29, v30);
  }
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(v27, v26);
  bmalloc::api::isoDeallocate(v31, v32);
  v24 = *v104;
  if (*v104)
LABEL_19:
    (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 32) + 16))(*(_QWORD *)(v24 + 32));
  v109 = 0;
  v34 = *((_QWORD *)this + 12);
  if (v34)
    v34 = *(_QWORD *)(v34 + 8);
  if ((*(_BYTE *)(v34 + 45) & 1) == 0)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B90E48);
      }
      v36 = *((unsigned int *)this + 23);
      if ((_DWORD)v36)
      {
        v37 = (const WTF::AtomString *)*((_QWORD *)this + 10);
        v38 = (const WTF::AtomString *)((char *)v37 + 8 * v36);
        while (1)
        {
          *(_DWORD *)(v35 + 24) += 2;
          v110 = (WebCore::Node *)v35;
          LOBYTE(v111) = 0;
          v113 = 0;
          v114 = 0;
          v39 = *(_DWORD **)v37;
          if (!*(_QWORD *)v37)
            break;
          v40 = *((_QWORD *)v39 + 1);
          v41 = v39[1];
          v42 = v39[4];
          if (v41 < 3)
            goto LABEL_36;
          if ((v42 & 4) != 0)
          {
            if (*(_BYTE *)v40 != 45)
              goto LABEL_36;
            v43 = *(unsigned __int8 *)(v40 + 1);
          }
          else
          {
            if (*(_WORD *)v40 != 45)
              goto LABEL_36;
            v43 = *(unsigned __int16 *)(v40 + 2);
          }
          if (v43 != 45)
          {
LABEL_36:
            v45 = v41 | ((unint64_t)((v42 >> 2) & 1) << 32);
            goto LABEL_37;
          }
          WebCore::ComputedStyleExtractor::customPropertyValue((WebCore::ComputedStyleExtractor *)&v110, v37, v33, &v115);
LABEL_40:
          if (v113)
          {
            v47 = v112;
            v112 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v44);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          v48 = v110;
          v110 = 0;
          if (v48)
          {
            if (*((_DWORD *)v48 + 6) == 2)
            {
              if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v48, v44);
            }
            else
            {
              *((_DWORD *)v48 + 6) -= 2;
            }
          }
          v49 = v109;
          if (v109
            || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v109, 8u), (v49 = v109) != 0))
          {
            v50 = *(_DWORD *)(v49 - 8);
          }
          else
          {
            v50 = 0;
          }
          v51 = 0;
          v52 = *(_DWORD **)v37;
          v53 = *(_DWORD *)(*(_QWORD *)v37 + 16) >> 8;
          for (i = 1; ; ++i)
          {
            v55 = v53 & v50;
            v56 = (_QWORD *)(v49 + 16 * v55);
            v57 = (_DWORD *)*v56;
            if (*v56 == -1)
            {
              v51 = (_QWORD *)(v49 + 16 * v55);
              goto LABEL_56;
            }
            if (!v57)
              break;
            if (v57 == v52)
              goto LABEL_76;
LABEL_56:
            v53 = i + v55;
          }
          if (v51)
          {
            *v51 = 0;
            v51[1] = 0;
            --*(_DWORD *)(v49 - 16);
            v52 = *(_DWORD **)v37;
            v56 = v51;
          }
          if (v52)
            *v52 += 2;
          *v56 = v52;
          v58 = v115;
          v115 = 0;
          v59 = (_DWORD *)v56[1];
          v56[1] = v58;
          if (v59)
          {
            if (*v59 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v44);
            else
              *v59 -= 2;
          }
          v60 = v109;
          if (v109)
            v61 = *(_DWORD *)(v109 - 12) + 1;
          else
            v61 = 1;
          *(_DWORD *)(v109 - 12) = v61;
          v62 = (*(_DWORD *)(v60 - 16) + v61);
          v63 = *(unsigned int *)(v60 - 4);
          if (v63 > 0x400)
          {
            if (v63 <= 2 * v62)
            {
LABEL_72:
              v64 = (_DWORD)v63 << (6 * v61 >= (2 * v63));
              goto LABEL_75;
            }
          }
          else if (3 * v63 <= 4 * v62)
          {
            if ((_DWORD)v63)
              goto LABEL_72;
            v64 = 8;
LABEL_75:
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v109, v64);
          }
LABEL_76:
          v65 = v115;
          v115 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v44);
            else
              *(_DWORD *)v65 -= 2;
          }
          v37 = (const WTF::AtomString *)((char *)v37 + 8);
          if (v37 == v38)
          {
            v68 = v109;
            goto LABEL_91;
          }
        }
        v40 = 0;
        v45 = 0x100000000;
LABEL_37:
        v46 = WebCore::cssPropertyID(v40, (const char *)v45);
        if ((_DWORD)v46)
          WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v110, v46, 0, 0, &v115);
        else
          v115 = 0;
        goto LABEL_40;
      }
    }
  }
  v68 = 0;
LABEL_91:
  v105 = vcvtq_f64_f32(*a3);
  v70 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v70 = 1;
  *(float64x2_t *)(v70 + 8) = v105;
  v71 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v71 + 8) = 1;
  *(_QWORD *)v71 = off_1E339F208;
  v109 = 0;
  *(_QWORD *)(v71 + 16) = v68;
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0)
    Object = 0;
  else
    Object = JSC::JSCell::getObject(v9);
  v73 = (_QWORD *)(Object - 16);
  if ((Object & 8) == 0)
    v73 = (_QWORD *)(Object & 0xFFFFFFFFFFFFC000 | 8);
  v74 = *v73;
  MEMORY[0x19AEA3294](v108, *v73);
  v75 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)JSC::JSCell::getObject(v9) & 0xFFFFFFFE) + 0x28);
  v76 = (void *)JSC::construct();
  v77 = *(_QWORD *)(v74 + 16);
  if (!v77)
  {
    v69 = (_DWORD *)v107;
    if (WebCore::JSCSSPaintCallback::handleEvent(v107, v76, v24, (_DWORD *)v70, (WTF *)v71, (uint64_t)this + 104))
    {
      v66 = 0;
      goto LABEL_123;
    }
    if (!*(_DWORD *)(v20 + 8) || !*(_DWORD *)(v20 + 12))
      goto LABEL_122;
    v78 = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 512))(a2);
    v80 = (float)v79;
    v82 = (float)v81;
    v118[0] = (float)v79;
    v118[1] = (float)v81;
    v83 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v83 != -1)
    {
      v110 = (WebCore::Node *)v119;
      v115 = &v110;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(_QWORD *__return_ptr, WebCore::GraphicsContext *, float *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 336))(v119, a2, v118, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
    if (!v119[0])
      goto LABEL_122;
    v84 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v119[0] + 16))(v119[0]);
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v84 + 648))(v84, (float)-(int)v78, (float)(int)((unint64_t)-(uint64_t)(v78 & 0xFFFFFFFF00000000) >> 32));
    if (*v104)
      WebCore::PaintRenderingContext2D::replayDisplayList(*v104, v84);
    *(float *)&v115 = (float)(int)v78;
    *((float *)&v115 + 1) = (float)SHIDWORD(v78);
    v116 = v80;
    v117 = v82;
    v110 = 0;
    v111 = *(_QWORD *)(v119[0] + 16);
    (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 384))(a2);
    v86 = v119[0];
    v119[0] = 0;
    v69 = (_DWORD *)v107;
    if (!v86)
      goto LABEL_122;
    v87 = *(_QWORD *)(v86 + 8);
    if (__ldaxr((unsigned __int8 *)v87))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v87))
    {
      goto LABEL_110;
    }
    MEMORY[0x19AEA534C](v87);
LABEL_110:
    v89 = *(_QWORD *)(v87 + 8);
    v90 = v89 - 1;
    *(_QWORD *)(v87 + 8) = v89 - 1;
    if (v89 == 1)
    {
      v102 = *(_QWORD *)(v87 + 16);
      v91 = *(_QWORD *)(v87 + 24);
      *(_QWORD *)(v87 + 24) = 0;
      v92 = v102 != 0;
    }
    else
    {
      v91 = 0;
      v92 = 1;
    }
    v93 = __ldxr((unsigned __int8 *)v87);
    if (v93 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v87))
      {
LABEL_117:
        if (!v90)
        {
          if (v91)
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
          if (!v92)
            WTF::fastFree((WTF *)v87, v85);
        }
LABEL_122:
        v66 = 3;
        goto LABEL_123;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v87);
    goto LABEL_117;
  }
  WebCore::reportException(v75, v77, 0, 0, 0);
  v66 = 0;
  v69 = (_DWORD *)v107;
LABEL_123:
  MEMORY[0x19AEA32A0](v108);
  if (*(_DWORD *)(v71 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  else
    --*(_DWORD *)(v71 + 8);
  if (*(_DWORD *)v70 == 1)
    WTF::fastFree((WTF *)v70, a2);
  else
    --*(_DWORD *)v70;
  v94 = v109;
  if (v109)
  {
    v95 = *(unsigned int *)(v109 - 4);
    if ((_DWORD)v95)
    {
      v96 = v109;
      do
      {
        v97 = *(WTF::StringImpl **)v96;
        if (*(_QWORD *)v96 != -1)
        {
          v98 = *(_DWORD **)(v96 + 8);
          *(_QWORD *)(v96 + 8) = 0;
          if (v98)
          {
            if (*v98 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v98, a2);
              v97 = *(WTF::StringImpl **)v96;
            }
            else
            {
              *v98 -= 2;
            }
          }
          *(_QWORD *)v96 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
              WTF::StringImpl::destroy(v97, a2);
            else
              *(_DWORD *)v97 -= 2;
          }
        }
        v96 += 16;
        --v95;
      }
      while (v95);
    }
    WTF::fastFree((WTF *)(v94 - 16), a2);
  }
  if (v24)
    (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 32) + 24))(*(_QWORD *)(v24 + 32));
  if (*(_DWORD *)(v20 + 112) == 1)
  {
    WebCore::CustomPaintCanvas::~CustomPaintCanvas((WebCore::CustomPaintCanvas *)v20);
    WTF::fastFree(v100, v101);
  }
  else
  {
    --*(_DWORD *)(v20 + 112);
  }
  v99 = *(unsigned __int8 *)(v106 + 178);
  if (*(_BYTE *)(v106 + 178))
  {
    if (v99 == 1)
    {
      if (*(_DWORD *)(v106 + 216) == 1)
        (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v103 + 40))(v103);
      else
        --*(_DWORD *)(v106 + 216);
      v69 = (_DWORD *)v107;
    }
    else
    {
      v69 = (_DWORD *)v107;
      if (v99 == 2)
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v106 + 216));
    }
  }
  else if (*(_DWORD *)(v106 - 264) == 2)
  {
    if ((*(_WORD *)(v106 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v106 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v106 - 264) -= 2;
  }
  if (v69)
  {
    v11 = v69[4] - 1;
LABEL_151:
    if (v11)
      v69[4] = v11;
    else
      (*(void (**)(_DWORD *, WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)v69 + 16))(v69, a2, a3);
  }
  return v66;
}

uint64_t WebCore::CustomPaintImage::draw(float32x2_t *a1, WebCore::GraphicsContext *a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18;
  float32x2_t v20;

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*((unsigned __int8 *)a2 + 194) != v10 || *((unsigned __int8 *)a2 + 195) != v11)
  {
    *((_WORD *)a2 + 97) = v10 | ((_WORD)v11 << 8);
    *((_DWORD *)a2 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 88))(a2, (uint64_t)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 456))(a2, a3);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    v20.f32[0] = v13 / v15;
    v20.f32[1] = v14 / v16;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a2 + 632))(a2, &v20);
  }
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  v20 = a1[8];
  v18 = WebCore::CustomPaintImage::doCustomPaint((WebCore::CustomPaintImage *)a1, a2, &v20);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return v18;
}

uint64_t WebCore::CustomPaintImage::drawPattern(float32x2_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  double v15;
  float64x2_t v16;
  __int128 v17;
  float64x2_t v18;
  unint64_t v19;
  uint64_t result;
  WebCore::GraphicsContext *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  __int128 v35;
  long double v36[6];
  float32x4_t v37;
  float32x2_t v38;
  char v39;
  char **v40;
  char *v41;

  v38 = a1[8];
  v37 = *a4;
  (*(void (**)(long double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 672))(v36, a2, 0);
  v32 = hypot(v36[0], v36[1]);
  v15 = hypot(v36[2], v36[3]);
  v16 = *(float64x2_t *)(a5 + 16);
  v33 = *(float64x2_t *)a5;
  v34 = v16;
  v17 = *(_OWORD *)(a5 + 32);
  v33 = vmulq_n_f64(v33, 1.0 / fabs(v32));
  v34 = vmulq_n_f64(v16, 1.0 / fabs(v15));
  v35 = v17;
  v18.f64[0] = v32;
  v18.f64[1] = v15;
  v37 = vmulq_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v18)), v37);
  v19 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v19 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  (*(void (**)(char **__return_ptr, uint64_t, float32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 336))(&v41, a2, &v38, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
  result = (uint64_t)v41;
  if (v41)
  {
    v21 = (WebCore::GraphicsContext *)(*(uint64_t (**)(char *))(*(_QWORD *)v41 + 16))(v41);
    WebCore::CustomPaintImage::doCustomPaint((WebCore::CustomPaintImage *)a1, v21, &v38);
    if (*(_BYTE *)(a2 + 346))
      (*(void (**)(char *))(*(_QWORD *)v41 + 72))(v41);
    (*(void (**)(uint64_t, char *, uint64_t, float32x4_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 416))(a2, v41, a3, &v37, &v33, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
    if (*(_BYTE *)(a2 + 346))
    {
      *(_BYTE *)(a2 + 346) = 0;
      *(_DWORD *)(a2 + 184) |= 0x8000u;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
    v23 = v41;
    v41 = 0;
    if (v23)
    {
      v24 = *((_QWORD *)v23 + 1);
      if (__ldaxr((unsigned __int8 *)v24))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v24))
      {
        goto LABEL_13;
      }
      result = MEMORY[0x19AEA534C](v24);
LABEL_13:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v31 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v31 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
        {
          if (v27)
            return result;
LABEL_21:
          if (v28)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          if (!v29)
            return WTF::fastFree((WTF *)v24, v22);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v24);
      if (v27)
        return result;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t *WebCore::DOMFormData::create@<X0>(WebCore::DOMFormData *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::HTMLFormElement *a3@<X2>, uint64_t a4@<X8>)
{
  const char *v9;
  uint64_t v10;
  uint64_t *result;
  WebCore::HTMLFormElement *v12;
  WebCore::ScriptExecutionContext *v13;
  WebCore::Node *v14;
  _DWORD *v15;
  const char *v16;
  __int16 v17;
  WebCore::Node *v18;
  _DWORD *v19;
  const char *v20[2];

  v10 = WTF::fastMalloc((WTF *)0x48);
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v16;
    v20[0] = (const char *)xmmword_1ECE86C80;
    v20[1] = v16;
    if (v16 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v20))
      {
        v17 = 165;
      }
      else
      {
        v17 = 92;
      }
    }
    else
    {
      v17 = 92;
    }
    word_1ECE86C90 = v17;
  }
  *(_DWORD *)(v10 + 16) = 1;
  *(_QWORD *)v10 = &off_1E33A18C0;
  *(_QWORD *)(v10 + 8) = 0;
  result = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v10, this);
  *(_QWORD *)v10 = &off_1E33B0880;
  *(_QWORD *)(v10 + 24) = &off_1E31F4A18;
  *(_OWORD *)(v10 + 32) = xmmword_1ECE86C80;
  *(_WORD *)(v10 + 48) = word_1ECE86C90;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  v20[0] = (const char *)v10;
  if (!a2)
  {
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (a3)
  {
    if ((*(unsigned int (**)(WebCore::HTMLFormElement *))(*(_QWORD *)a3 + 848))(a3))
      v12 = a3;
    else
      v12 = 0;
    if (!v12
      || (*((_DWORD *)v12 + 6) += 2,
          ((*(uint64_t (**)(WebCore::HTMLFormElement *))(*(_QWORD *)v12 + 1288))(v12) & 1) == 0))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a4 = 33;
      *(_DWORD *)(a4 + 16) = 1;
      a3 = v12;
      if (!v12)
        goto LABEL_29;
      goto LABEL_27;
    }
    v13 = (WebCore::ScriptExecutionContext *)*((_QWORD *)v12 + 15);
    if (v13)
      v13 = (WebCore::ScriptExecutionContext *)*((_QWORD *)v13 + 1);
    if (v13 != a2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a4 = 5;
      *(_DWORD *)(a4 + 16) = 1;
      goto LABEL_27;
    }
    *((_DWORD *)a3 + 6) += 2;
  }
  v18 = a3;
  WebCore::HTMLFormElement::constructEntryList((unsigned int *)a2, &v18, v20, 0, (uint64_t *)&v19);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (v19)
  {
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 16) = 0;
    if (!a3)
      goto LABEL_29;
LABEL_27:
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a3);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
    goto LABEL_29;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a4 = 8;
  *(_DWORD *)(a4 + 16) = 1;
  v15 = v19;
  v19 = 0;
  if (!v15)
  {
LABEL_26:
    if (!a3)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (v15[4] != 1)
  {
    --v15[4];
    goto LABEL_26;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
  if (a3)
    goto LABEL_27;
LABEL_29:
  result = (uint64_t *)v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unsigned int *v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;

  if (a2 == a1)
    return a1;
  v4 = a1[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = 24 * v4 - 24 * v5;
    v7 = *(_QWORD *)a1 + 24 * v5 + 8;
    do
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v35, v7);
      *(_DWORD *)(v7 + 8) = -1;
      v9 = *(WTF::StringImpl **)(v7 - 8);
      *(_QWORD *)(v7 - 8) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 24;
      v6 -= 24;
    }
    while (v6);
    a1[3] = v5;
LABEL_28:
    LODWORD(v4) = v5;
    goto LABEL_29;
  }
  v10 = a1[2];
  if (v5 > v10)
  {
    if (v10)
    {
      if ((_DWORD)v4)
      {
        v11 = 24 * v4;
        v12 = *(_QWORD *)a1 + 8;
        do
        {
          v13 = *(unsigned int *)(v12 + 8);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v13])(&v36, v12);
          *(_DWORD *)(v12 + 8) = -1;
          v14 = *(WTF::StringImpl **)(v12 - 8);
          *(_QWORD *)(v12 - 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v14 -= 2;
          }
          v12 += 24;
          v11 -= 24;
        }
        while (v11);
        a1[3] = 0;
      }
      v15 = *(WTF **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)a1 = 0;
        a1[2] = 0;
        WTF::fastFree(v15, a2);
      }
    }
    WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
    LODWORD(v5) = a1[3];
    goto LABEL_28;
  }
  LODWORD(v5) = a1[3];
LABEL_29:
  v16 = *(_QWORD *)a2;
  v17 = *(WTF **)a1;
  if (!(_DWORD)v4)
    goto LABEL_44;
  v18 = v16 + 24 * v5;
  v19 = (char *)v17 + 8;
  v20 = v16 + 8;
  do
  {
    v22 = v20 - 8;
    v21 = *(_DWORD **)(v20 - 8);
    if (v21)
      *v21 += 2;
    v23 = (WTF::StringImpl *)*((_QWORD *)v19 - 1);
    *((_QWORD *)v19 - 1) = v21;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *((unsigned int *)v19 + 2);
    v25 = *(unsigned int *)(v20 + 8);
    if ((_DWORD)v24 == -1)
    {
      if ((_DWORD)v25 == -1)
        goto LABEL_41;
    }
    else if ((_DWORD)v25 == -1)
    {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v24])(&v38, v19);
      *((_DWORD *)v19 + 2) = -1;
      goto LABEL_41;
    }
    v37 = v19;
    ((void (*)(char **, char *, uint64_t))off_1E33B0928[v25])(&v37, v19, v20);
LABEL_41:
    v19 += 24;
    v20 += 24;
  }
  while (v22 + 24 != v18);
  v16 = *(_QWORD *)a2;
  LODWORD(v4) = a1[3];
  v17 = *(WTF **)a1;
LABEL_44:
  v26 = a2[3];
  if ((_DWORD)v4 != v26)
  {
    v34 = a2;
    v27 = v16 + 24 * v26;
    v28 = 24 * v4;
    do
    {
      v29 = v16 + v28;
      v30 = *(_DWORD **)(v16 + v28);
      if (v30)
        *v30 += 2;
      v31 = (char *)v17 + v28;
      *(_QWORD *)v31 = v30;
      *((_BYTE *)v17 + v28 + 8) = 0;
      *((_DWORD *)v31 + 4) = -1;
      v32 = *(unsigned int *)(v29 + 16);
      if ((_DWORD)v32 != -1)
      {
        ((void (*)(char *, char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v32])(&v39, (char *)v17 + v28 + 8, v16 + v28 + 8);
        *((_DWORD *)v31 + 4) = v32;
      }
      v17 = (WTF *)((char *)v17 + 24);
      v16 += 24;
    }
    while (v29 + 24 != v27);
    LODWORD(v4) = v34[3];
  }
  a1[3] = v4;
  return a1;
}

WTF::StringImpl *WebCore::DOMFormData::append(WebCore::DOMFormData *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v28 = v5;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  v6 = *a3;
  if (*a3)
    *(_DWORD *)v6 += 2;
  v26 = v6;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  v8 = v26;
  v24 = v27;
  v25 = 1;
  v26 = 0;
  v27 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v28;
  v28 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)((char *)this + 56);
  v11 = *((unsigned int *)this + 17);
  if ((_DWORD)v11 == *((_DWORD *)this + 16))
  {
    v12 = WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v23);
    v13 = *((_QWORD *)this + 7) + 24 * *((unsigned int *)this + 17);
    v14 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v13 + 8) = 0;
    v15 = (WTF::StringImpl *)(v13 + 8);
    *(_QWORD *)v13 = v14;
    *(_DWORD *)(v13 + 16) = -1;
    v16 = (_DWORD *)(v13 + 16);
    v17 = *(unsigned int *)(v12 + 16);
    if ((_DWORD)v17 == -1)
      goto LABEL_17;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v17])(&v28, v15, v12 + 8);
  }
  else
  {
    v18 = *(_QWORD *)v10;
    v19 = *(_QWORD *)v10 + 24 * v11;
    v20 = v23;
    v23 = 0;
    *(_QWORD *)(v18 + 24 * v11) = v20;
    *(_BYTE *)(v19 + 8) = 0;
    v15 = (WTF::StringImpl *)(v19 + 8);
    *(_DWORD *)(v19 + 16) = -1;
    v16 = (_DWORD *)(v19 + 16);
    LODWORD(v17) = v25;
    if (v25 == -1)
    {
      ++*((_DWORD *)this + 17);
      goto LABEL_20;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v25])(&v28, v15, &v24);
  }
  *v16 = v17;
LABEL_17:
  v21 = v25;
  ++*((_DWORD *)this + 17);
  if ((_DWORD)v21 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v21])(&v28, &v24);
LABEL_20:
  v25 = -1;
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMFormData::append(WebCore::DOMFormData *this, const WTF::String **a2, WebCore::Blob *a3, const WTF::String *a4)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;

  v5 = (unsigned int *)((char *)this + 56);
  WebCore::createFileEntry((WebCore *)&v18, *a2, a3, a4);
  v6 = *((unsigned int *)this + 17);
  if ((_DWORD)v6 == *((_DWORD *)this + 16))
  {
    v7 = WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v18);
    v8 = *((_QWORD *)this + 7) + 24 * *((unsigned int *)this + 17);
    v9 = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v8 + 8) = 0;
    v10 = (WTF::StringImpl *)(v8 + 8);
    *(_QWORD *)v8 = v9;
    *(_DWORD *)(v8 + 16) = -1;
    v11 = (_DWORD *)(v8 + 16);
    v12 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v12 == -1)
      goto LABEL_7;
    v13 = (uint64_t *)(v7 + 8);
  }
  else
  {
    v14 = *(_QWORD *)v5;
    v15 = *(_QWORD *)v5 + 24 * v6;
    v16 = v18;
    v18 = 0;
    *(_QWORD *)(v14 + 24 * v6) = v16;
    *(_BYTE *)(v15 + 8) = 0;
    v10 = (WTF::StringImpl *)(v15 + 8);
    *(_DWORD *)(v15 + 16) = -1;
    v11 = (_DWORD *)(v15 + 16);
    v12 = v20;
    if (v20 == -1)
      goto LABEL_7;
    v13 = &v19;
  }
  ((void (*)(char *, WTF::StringImpl *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v12])(&v21, v10, v13);
  *v11 = v12;
LABEL_7:
  ++*((_DWORD *)this + 17);
  if (v20 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v20])(&v21, &v19);
  v20 = -1;
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::createFileEntry(WebCore *this, const WTF::String *a2, WebCore::Blob *a3, const WTF::String *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ScriptExecutionContext *v11;
  WebCore::File *v12;
  WebCore::File *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  uint64_t v16;
  WebCore::ScriptExecutionContext *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;

  if (a2)
    *(_DWORD *)a2 += 2;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  if (a2)
  {
    if (*(_DWORD *)a2 == 2)
      WTF::StringImpl::destroy(a2, v7);
    else
      *(_DWORD *)a2 -= 2;
  }
  if ((*(unsigned int (**)(WebCore::Blob *))(*(_QWORD *)a3 + 24))(a3))
  {
    ++*((_DWORD *)a3 + 4);
    if (*(_QWORD *)a4)
    {
      if (v23)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)this = v23;
      v9 = *((_QWORD *)a3 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          v11 = (WebCore::ScriptExecutionContext *)(v10 - 96);
        else
          v11 = 0;
      }
      else
      {
        v11 = 0;
      }
      v12 = (WebCore::File *)bmalloc::api::isoAllocate();
      v13 = WebCore::File::File(v12, v11, a3, a4);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v13 + 3);
      *((_QWORD *)this + 1) = v12;
      *((_DWORD *)this + 4) = 0;
      if (*((_DWORD *)a3 + 4) == 1)
        (*(void (**)(WebCore::Blob *))(*(_QWORD *)a3 + 8))(a3);
      else
        --*((_DWORD *)a3 + 4);
    }
    else
    {
      if (v23)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)this = v23;
      *((_QWORD *)this + 1) = a3;
      *((_DWORD *)this + 4) = 0;
    }
  }
  else
  {
    if (v23)
      *(_DWORD *)v23 += 2;
    *(_QWORD *)this = v23;
    v15 = *((_QWORD *)a3 + 4);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v17 = (WebCore::ScriptExecutionContext *)(v16 - 96);
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    v18 = *(WTF::StringImpl **)a4;
    if (v18)
    {
      *(_DWORD *)v18 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = 0;
    }
    v19 = bmalloc::api::isoAllocate();
    v21 = (_QWORD *)WebCore::Blob::Blob(v19, v20, v17, (uint64_t)a3);
    *v21 = off_1E33AE6D8;
    v21[3] = &unk_1E33AE718;
    v22 = v21 + 3;
    *(_QWORD *)(v19 + 128) = 0;
    *(_QWORD *)(v19 + 136) = 0;
    if (v18)
      *(_DWORD *)v18 += 2;
    *(_QWORD *)(v19 + 144) = v18;
    *(_BYTE *)(v19 + 152) = 0;
    *(_BYTE *)(v19 + 160) = 0;
    *(_BYTE *)(v19 + 168) = 0;
    *(_BYTE *)(v19 + 176) = 0;
    *(_WORD *)(v19 + 184) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded(v22);
    *((_QWORD *)this + 1) = v19;
    *((_DWORD *)this + 4) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  result = v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v8);
    else
      *(_DWORD *)v23 -= 2;
  }
  return result;
}

WTF *WebCore::DOMFormData::remove(WTF *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  v5 = *((_DWORD *)this + 17);
  v6 = v4 + 24 * v5;
  if (v5)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 7);
    v10 = (WTF::StringImpl *)(v4 + 24 * v5);
    v11 = (unint64_t)v10;
    do
    {
      this = (WTF *)WTF::equal(*(WTF **)v4, *a2, a3);
      if ((_DWORD)this)
      {
        v13 = v4;
        if (v11 != *((_QWORD *)v3 + 7) + 24 * *((unsigned int *)v3 + 17))
        {
          if ((WTF::StringImpl *)v4 == v10)
          {
            v13 = v11;
          }
          else
          {
            WTF::VectorMover<false,WebCore::DOMFormData::Item>::moveOverlapping(v10, (WTF::StringImpl *)v4, v11);
            v13 = v11 + v9 - (_QWORD)v10;
          }
        }
        v14 = *(unsigned int *)(v4 + 16);
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v16, v4 + 8);
        *(_DWORD *)(v4 + 16) = -1;
        this = *(WTF **)v4;
        *(_QWORD *)v4 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF *)WTF::StringImpl::destroy(this, v12);
          else
            *(_DWORD *)this -= 2;
        }
        v10 = (WTF::StringImpl *)(v4 + 24);
        ++v8;
        v11 = v13;
      }
      else
      {
        v13 = v11;
      }
      v4 += 24;
      v9 += 24;
    }
    while (v4 < v6);
    v4 = *((_QWORD *)v3 + 7);
    v5 = *((_DWORD *)v3 + 17);
    v6 = v13;
  }
  else
  {
    v8 = 0;
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  }
  v15 = (WTF::StringImpl *)(v4 + 24 * v5);
  if (v10 != v15)
  {
    this = WTF::VectorMover<false,WebCore::DOMFormData::Item>::moveOverlapping(v10, v15, v6);
    v5 = *((_DWORD *)v3 + 17);
  }
  *((_DWORD *)v3 + 17) = v5 - v8;
  return this;
}

uint64_t WebCore::DOMFormData::getAll@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = *(unsigned int *)(this + 68);
  if ((_DWORD)v5)
  {
    v7 = 24 * v5;
    for (i = *(_QWORD *)(this + 56) + 8; ; i += 24)
    {
      this = WTF::equal(*(WTF **)(i - 8), *a2, a3);
      if ((_DWORD)this)
        break;
LABEL_11:
      v7 -= 24;
      if (!v7)
        return this;
    }
    v9 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a4 + 8))
    {
      this = WTF::Vector<std::variant<WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v9 + 1, i);
      v10 = *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 12);
      *(_BYTE *)v10 = 0;
      *(_DWORD *)(v10 + 8) = -1;
      v11 = *(unsigned int *)(this + 8);
      if ((_DWORD)v11 != -1)
      {
        this = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v11])(&v13, v10, this);
LABEL_9:
        *(_DWORD *)(v10 + 8) = v11;
      }
    }
    else
    {
      v10 = *(_QWORD *)a4 + 16 * v9;
      *(_BYTE *)v10 = 0;
      *(_DWORD *)(v10 + 8) = -1;
      v11 = *(unsigned int *)(i + 8);
      if ((_DWORD)v11 != -1)
      {
        this = ((uint64_t (*)(char *, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v11])(&v12, v10, i);
        goto LABEL_9;
      }
    }
    ++*(_DWORD *)(a4 + 12);
    goto LABEL_11;
  }
  return this;
}

uint64_t WebCore::DOMFormData::set(uint64_t result, WTF **a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v4 = result;
  v5 = (unsigned int *)(result + 56);
  LODWORD(v6) = *(_DWORD *)(result + 68);
  if (!(_DWORD)v6)
  {
LABEL_6:
    v12 = v6;
    if ((_DWORD)v6 == *(_DWORD *)(v4 + 64))
    {
      result = WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)a3);
      v13 = *(_QWORD *)(v4 + 56) + 24 * *(unsigned int *)(v4 + 68);
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_BYTE *)(v13 + 8) = 0;
      v15 = v13 + 8;
      *(_QWORD *)v13 = v14;
      *(_DWORD *)(v13 + 16) = -1;
      v16 = (_DWORD *)(v13 + 16);
      v17 = *(unsigned int *)(result + 16);
      if ((_DWORD)v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v17])(&v51, v15, result + 8);
        *v16 = v17;
      }
    }
    else
    {
      v18 = *(_QWORD *)v5;
      v19 = *(_QWORD *)v5 + 24 * v12;
      v20 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v18 + 24 * v12) = v20;
      *(_BYTE *)(v19 + 8) = 0;
      v21 = v19 + 8;
      *(_DWORD *)(v19 + 16) = -1;
      v22 = (_DWORD *)(v19 + 16);
      v23 = a3[4];
      if ((_DWORD)v23 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v23])(&v50, v21, a3 + 2);
        *v22 = v23;
      }
    }
    v24 = *(_DWORD *)(v4 + 68) + 1;
LABEL_42:
    *(_DWORD *)(v4 + 68) = v24;
    return result;
  }
  v8 = 24;
  v9 = 1;
  while (1)
  {
    result = WTF::equal(*a2, *(const WTF::StringImpl **)(*(_QWORD *)v5 + v8 - 24), (const WTF::StringImpl *)a3);
    if ((result & 1) != 0)
      break;
    v6 = *(unsigned int *)(v4 + 68);
    v8 += 24;
    if (v9++ >= v6)
      goto LABEL_6;
  }
  if (v9 - 1 < *(unsigned int *)(v4 + 68))
  {
    v25 = *(_QWORD *)v5 + v8;
    v26 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    result = *(_QWORD *)(v25 - 24);
    *(_QWORD *)(v25 - 24) = v26;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    v27 = *(unsigned int *)(v25 - 8);
    v28 = a3[4];
    if ((_DWORD)v27 == -1)
    {
      if ((_DWORD)v28 == -1)
        goto LABEL_21;
    }
    else if ((_DWORD)v28 == -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v27])(&v48, v25 - 16);
      *(_DWORD *)(v25 - 8) = -1;
LABEL_21:
      v29 = *(_QWORD *)(v4 + 56);
      v30 = *(unsigned int *)(v4 + 68);
      v31 = v29 + 24 * v30;
      if (v9 >= v30)
      {
        v43 = 0;
        v35 = (WTF::StringImpl *)(v29 + 24 * v30);
      }
      else
      {
        v45 = v4;
        v32 = 0;
        v46 = 0;
        v33 = v29 + v8;
        v34 = *(_QWORD *)(v4 + 56);
        v35 = (WTF::StringImpl *)(v29 + 24 * v30);
        v36 = (unint64_t)v35;
        do
        {
          v37 = v31;
          v38 = v29;
          v39 = v29 + v32;
          result = WTF::equal(*(WTF **)(v29 + v32 + v8), *a2, (const WTF::StringImpl *)a3);
          if ((_DWORD)result)
          {
            v40 = (WTF::StringImpl *)(v33 + v32);
            if (v36 == *(_QWORD *)(v45 + 56) + 24 * *(unsigned int *)(v45 + 68))
            {
              v36 = v33 + v32;
            }
            else if (v40 != v35)
            {
              WTF::VectorMover<false,WebCore::DOMFormData::Item>::moveOverlapping(v35, v40, v36);
              v36 += v8 + v34 - (_QWORD)v35;
            }
            v41 = v33 + v32;
            v42 = *(unsigned int *)(v33 + v32 + 16);
            if ((_DWORD)v42 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v42])(&v49, v41 + 8);
            *(_DWORD *)(v41 + 16) = -1;
            result = *(_QWORD *)(v39 + v8);
            *(_QWORD *)(v39 + v8) = 0;
            v31 = v37;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v40);
              else
                *(_DWORD *)result -= 2;
            }
            v35 = (WTF::StringImpl *)(v41 + 24);
            ++v46;
          }
          else
          {
            v31 = v37;
          }
          v32 += 24;
          v34 += 24;
          v29 = v38;
        }
        while (v32 + v33 < v31);
        v4 = v45;
        v29 = *(_QWORD *)(v45 + 56);
        LODWORD(v30) = *(_DWORD *)(v45 + 68);
        v31 = v36;
        v43 = v46;
      }
      v44 = (WTF::StringImpl *)(v29 + 24 * v30);
      if (v35 != v44)
      {
        result = (uint64_t)WTF::VectorMover<false,WebCore::DOMFormData::Item>::moveOverlapping(v35, v44, v31);
        LODWORD(v30) = *(_DWORD *)(v4 + 68);
      }
      v24 = v30 - v43;
      goto LABEL_42;
    }
    v47 = v25 - 16;
    result = ((uint64_t (*)(uint64_t *))off_1E33B0908[v28])(&v47);
    goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::DOMFormData::Iterator::next@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12[8];
  unsigned int v13;
  char v14;

  v4 = *this;
  v3 = this[1];
  if (v3 >= *(unsigned int *)(*this + 68))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    this[1] = v3 + 1;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 24 * v3);
    v8 = (WTF::StringImpl *)*v5;
    v6 = v5 + 1;
    v7 = v8;
    if (v8)
      *(_DWORD *)v7 += 2;
    v11 = v7;
    v12[0] = 0;
    v13 = -1;
    v9 = *((unsigned int *)v6 + 2);
    if ((_DWORD)v9 == -1)
    {
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = -1;
      *(_BYTE *)(a2 + 24) = 1;
    }
    else
    {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v14, v12);
      v13 = v9;
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 16) = -1;
      ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v9])(&v14, a2 + 8, v12);
      *(_DWORD *)(a2 + 16) = v9;
      v10 = v13;
      *(_BYTE *)(a2 + 24) = 1;
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v10])(&v14, v12);
    }
    return 0;
  }
  return this;
}

void WebCore::ButtonInputType::~ButtonInputType(WebCore::ButtonInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CanvasBase::isHTMLCanvasElement(WebCore::CanvasBase *this)
{
  return 0;
}

uint64_t WebCore::CanvasBase::isOffscreenCanvas(WebCore::CanvasBase *this)
{
  return 0;
}

uint64_t WebCore::CanvasBase::isCustomPaintCanvas(WebCore::CanvasBase *this)
{
  return 0;
}

uint64_t WebCore::CanvasBase::securityOrigin(WebCore::CanvasBase *this)
{
  return 0;
}

uint64_t WebCore::CustomPaintCanvas::refCanvasBase(uint64_t this)
{
  ++*(_DWORD *)(this + 112);
  return this;
}

WebCore::CustomPaintCanvas *WebCore::CustomPaintCanvas::derefCanvasBase(WebCore::CustomPaintCanvas *this)
{
  WTF *v1;
  void *v2;

  if (*((_DWORD *)this + 28) == 1)
  {
    WebCore::CustomPaintCanvas::~CustomPaintCanvas(this);
    return (WebCore::CustomPaintCanvas *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 28);
  }
  return this;
}

uint64_t WebCore::CustomPaintCanvas::isCustomPaintCanvas(WebCore::CustomPaintCanvas *this)
{
  return 1;
}

uint64_t WebCore::CustomPaintCanvas::renderingContext(WebCore::CustomPaintCanvas *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t WebCore::CustomPaintCanvas::canvasBaseScriptExecutionContext(WebCore::CustomPaintCanvas *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::GeneratedImage::isGeneratedImage(WebCore::GeneratedImage *this)
{
  return 1;
}

uint64_t WebCore::Image::isCrossfadeGeneratedImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::isNamedImageGeneratedImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::isGradientImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::isSVGResourceImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::CustomPaintImage::isCustomPaintImage(WebCore::CustomPaintImage *this)
{
  return 1;
}

uint64_t WebCore::Image::frameCount(WebCore::Image *this)
{
  return 1;
}

uint64_t WebCore::GeneratedImage::currentFrameKnownToBeOpaque(WebCore::GeneratedImage *this)
{
  return 0;
}

uint64_t WebCore::Image::isAnimated(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::renderingTaintsOrigin(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::GeneratedImage::usesContainerSize(WebCore::GeneratedImage *this)
{
  return 1;
}

uint64_t WebCore::Image::sourceSize(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, a2);
}

uint64_t WebCore::Image::hasDensityCorrectedSize(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::hotSpot(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::orientation(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::dataChanged(WebCore::Image *this)
{
  return 1;
}

void WebCore::Image::uti(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::Image::filenameExtension(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::Image::accessibilityDescription(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::Image::isAnimating(WebCore::Image *this)
{
  return 0;
}

void WebCore::Image::nativeImage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::Image::nativeImageAtIndex(WebCore::Image *this)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return (*(uint64_t (**)(WebCore::Image *, uint64_t *))(*(_QWORD *)this + 288))(this, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
}

uint64_t WebCore::Image::currentNativeImage(WebCore::Image *this)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return (*(uint64_t (**)(WebCore::Image *, uint64_t *))(*(_QWORD *)this + 288))(this, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
}

uint64_t WebCore::Image::currentPreTransformedNativeImage(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

uint64_t WebCore::Image::shouldDrawFromCachedSubimage()
{
  return 0;
}

uint64_t WebCore::Image::mustDrawFromCachedSubimage()
{
  return 0;
}

void WebCore::DOMFormData::~DOMFormData(WebCore::DOMFormData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  char v9;

  *(_QWORD *)this = &off_1E33B0880;
  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *((_QWORD *)this + 7) + 8;
    do
    {
      v6 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v9, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v9;
  void *v10;
  char v11;

  *(_QWORD *)this = &off_1E33B0880;
  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *((_QWORD *)this + 7) + 8;
    do
    {
      v6 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v11, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v9, v10);
}

_OWORD *WebCore::boundingNeighbors(int,std::span<unsigned char,18446744073709551615ul>,WebCore::IntSize const&)::$_0::operator()<std::span<unsigned char,18446744073709551615ul>,std::pair<std::array<int,4ul>,std::array<int,4ul>>,std::array<int,4ul>,int,int,int>(_OWORD *result, uint64_t *a2, int a3, uint64_t *a4, uint64_t a5, int *a6, int a7, int a8, int a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;

  if (a3 <= a8)
    goto LABEL_124;
  if (a3 <= a7)
    goto LABEL_124;
  v9 = a8;
  v10 = a8 + 3;
  if ((int)v10 >= a3)
    goto LABEL_124;
  v11 = a7;
  v12 = a7 + 3;
  if ((int)v12 >= a3)
    goto LABEL_124;
  if (a3 <= a9)
    goto LABEL_124;
  v13 = a9 + 3;
  if ((int)v13 >= a3)
    goto LABEL_124;
  v14 = a2[1];
  if (v14 > a8 && v14 > a7)
  {
    v15 = *a2;
    v16 = *(unsigned __int8 *)(*a2 + a7);
    v17 = *(unsigned __int8 *)(*a2 + a8) - v16;
    if (v17 < 0)
      v17 = v16 - *(unsigned __int8 *)(*a2 + a8);
    if (v17 > 8)
      goto LABEL_27;
    if (v14 <= a8 + 1 || v14 <= a7 + 1)
      goto LABEL_125;
    v18 = *(unsigned __int8 *)(v15 + a8 + 1) - *(unsigned __int8 *)(v15 + a7 + 1);
    if (v18 < 0)
      v18 = *(unsigned __int8 *)(v15 + a7 + 1) - *(unsigned __int8 *)(v15 + a8 + 1);
    if (v18 > 8)
      goto LABEL_27;
    if (v14 <= a8 + 2 || v14 <= a7 + 2)
      goto LABEL_125;
    v19 = *(unsigned __int8 *)(v15 + a8 + 2) - *(unsigned __int8 *)(v15 + a7 + 2);
    if (v19 < 0)
      v19 = *(unsigned __int8 *)(v15 + a7 + 2) - *(unsigned __int8 *)(v15 + a8 + 2);
    if (v19 > 8)
    {
LABEL_27:
      v21 = 0;
    }
    else
    {
      if (v14 <= v10 || v14 <= v12)
        goto LABEL_125;
      v20 = *(unsigned __int8 *)(v15 + v10) - *(unsigned __int8 *)(v15 + v12);
      if (v20 < 0)
        v20 = *(unsigned __int8 *)(v15 + v12) - *(unsigned __int8 *)(v15 + v10);
      v21 = v20 < 9;
    }
    if (v14 > a9)
    {
      v22 = *(unsigned __int8 *)(v15 + a9) - v16;
      if (v22 < 0)
        v22 = -v22;
      if (v22 > 8)
        goto LABEL_47;
      if (v14 <= a9 + 1 || v14 <= a7 + 1)
        goto LABEL_125;
      v23 = *(unsigned __int8 *)(v15 + a9 + 1) - *(unsigned __int8 *)(v15 + a7 + 1);
      if (v23 < 0)
        v23 = *(unsigned __int8 *)(v15 + a7 + 1) - *(unsigned __int8 *)(v15 + a9 + 1);
      if (v23 > 8)
        goto LABEL_47;
      if (v14 <= a9 + 2 || v14 <= a7 + 2)
        goto LABEL_125;
      v24 = *(unsigned __int8 *)(v15 + a9 + 2) - *(unsigned __int8 *)(v15 + a7 + 2);
      if (v24 < 0)
        v24 = *(unsigned __int8 *)(v15 + a7 + 2) - *(unsigned __int8 *)(v15 + a9 + 2);
      if (v24 > 8)
      {
LABEL_47:
        v26 = 0;
      }
      else
      {
        if (v14 <= v13 || v14 <= v12)
          goto LABEL_125;
        v25 = *(unsigned __int8 *)(v15 + v13) - *(unsigned __int8 *)(v15 + v12);
        if (v25 < 0)
          v25 = *(unsigned __int8 *)(v15 + v12) - *(unsigned __int8 *)(v15 + v13);
        v26 = v25 < 9;
      }
      if (!v21 && !v26)
      {
LABEL_124:
        v63 = *(_OWORD *)(a5 + 16);
        *result = *(_OWORD *)a5;
        result[1] = v63;
        return result;
      }
      v27 = a4[1];
      if (v27 > a8 && v27 > a9)
      {
        v28 = *a4;
        v29 = *(unsigned __int8 *)(*a4 + a8);
        v68 = *(unsigned __int8 *)(*a4 + a9);
        v30 = v29 - v68 >= 0 ? v29 - v68 : v68 - v29;
        if (v27 > a8 + 1 && v27 > a9 + 1)
        {
          v31 = *(unsigned __int8 *)(v28 + a8 + 1);
          v67 = *(unsigned __int8 *)(v28 + a9 + 1);
          v32 = v31 - v67 >= 0 ? v31 - v67 : v67 - v31;
          if (v27 > a8 + 2 && v27 > a9 + 2)
          {
            v33 = *(unsigned __int8 *)(v28 + a8 + 2);
            v34 = *(unsigned __int8 *)(v28 + a9 + 2);
            v35 = v33 - v34 >= 0 ? v33 - v34 : v34 - v33;
            if (v27 > v10 && v27 > v13)
            {
              v36 = *(unsigned __int8 *)(v28 + v10);
              v37 = *(unsigned __int8 *)(v28 + v13);
              v38 = v36 - v37 >= 0 ? v36 - v37 : v37 - v36;
              if (v27 > v11)
              {
                v64 = a8 + 2;
                v39 = *(unsigned __int8 *)(v28 + v11);
                v66 = *(unsigned __int8 *)(*a4 + a8);
                v40 = v29 - v39 >= 0 ? v29 - v39 : v39 - v29;
                v41 = v11 + 1;
                if (v27 > v11 + 1)
                {
                  v42 = *(unsigned __int8 *)(v28 + v41);
                  v65 = v31;
                  v43 = v31 - v42 >= 0 ? v31 - v42 : v42 - v31;
                  v44 = v11 + 2;
                  if (v27 > v11 + 2 && v27 > v12)
                  {
                    v45 = *(unsigned __int8 *)(v28 + v44);
                    v46 = *(unsigned __int8 *)(v28 + v12);
                    if (v33 - v45 >= 0)
                      v47 = v33 - v45;
                    else
                      v47 = v45 - v33;
                    if (v36 - v46 >= 0)
                      v48 = v36 - v46;
                    else
                      v48 = v46 - v36;
                    v49 = v39 - v68;
                    if (v49 >= 0)
                      v50 = v49;
                    else
                      v50 = -v49;
                    v51 = v42 - v67;
                    if (v42 - v67 < 0)
                      v51 = v67 - v42;
                    if (v45 - v34 >= 0)
                      v52 = v45 - v34;
                    else
                      v52 = v34 - v45;
                    if (v46 - v37 >= 0)
                      v53 = v46 - v37;
                    else
                      v53 = v37 - v46;
                    if (v30 > 1
                      || v32 > 1
                      || v35 > 1
                      || v38 > 1
                      || v40 > 1
                      || v43 > 1
                      || v47 > 1
                      || v48 > 1
                      || v50 > 1
                      || v51 > 1
                      || v52 > 1
                      || v53 > 1)
                    {
                      if (v30 >= *a6 || v32 >= a6[1] || v35 >= a6[2] || v38 >= a6[3])
                        goto LABEL_124;
                      *a6 = v30;
                      a6[1] = v32;
                      a6[2] = v35;
                      a6[3] = v38;
                      if (v66 != v68 || v65 != v67 || v33 != v34 || v36 != v37)
                      {
                        v55 = *(unsigned __int8 *)(*a4 + v9);
                        v56 = *(unsigned __int8 *)(*a4 + v9 + 1);
                        v57 = *(unsigned __int8 *)(*a4 + v64);
                        v58 = *(unsigned __int8 *)(*a4 + v10);
                        v59 = *(unsigned __int8 *)(*a4 + a9);
                        v60 = *(unsigned __int8 *)(*a4 + a9 + 1);
                        v61 = *(unsigned __int8 *)(*a4 + a9 + 2);
                        v62 = *(unsigned __int8 *)(*a4 + v13);
                        goto LABEL_114;
                      }
                    }
                    else
                    {
                      *(_QWORD *)a6 = 0;
                      *((_QWORD *)a6 + 1) = 0;
                    }
                    v54 = a4[1];
                    if (v54 > v11 && v54 > v41 && v54 > v44 && v54 > v12)
                    {
                      v55 = *(unsigned __int8 *)(*a4 + v11);
                      v56 = *(unsigned __int8 *)(*a4 + v41);
                      v57 = *(unsigned __int8 *)(*a4 + v44);
                      v58 = *(unsigned __int8 *)(*a4 + v12);
                      v59 = v55;
                      v60 = v56;
                      v61 = v57;
                      v62 = v58;
LABEL_114:
                      *(_DWORD *)a5 = v55;
                      *(_DWORD *)(a5 + 4) = v56;
                      *(_DWORD *)(a5 + 8) = v57;
                      *(_DWORD *)(a5 + 12) = v58;
                      *(_DWORD *)(a5 + 16) = v59;
                      *(_DWORD *)(a5 + 20) = v60;
                      *(_DWORD *)(a5 + 24) = v61;
                      *(_DWORD *)(a5 + 28) = v62;
                      goto LABEL_124;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_125:
  __break(1u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CheckboxInputType::handleTouchEvent(WebCore::TouchEvent &)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;
  _DWORD *v4;

  *a1 = &off_1E33B08A8;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebCore::Touch>::deref(v3, a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CheckboxInputType::handleTouchEvent(WebCore::TouchEvent &)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33B08A8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::Touch>::deref(v3, a2);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CheckboxInputType::handleTouchEvent(WebCore::TouchEvent &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 12) == 2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 232) & 0x2000) != 0)
        {
          v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
          if (v5)
          {
            if ((*(_BYTE *)(v5 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195B932ACLL);
            }
            v6 = *(_QWORD *)(a1 + 16);
            v7 = *(double *)(v6 + 56);
            v8 = *(double *)(v6 + 48) * 64.0;
            if (v8 >= 2147483650.0)
            {
              v9 = 0x7FFFFFFFLL;
            }
            else if (v8 <= -2147483650.0)
            {
              v9 = 0x80000000;
            }
            else
            {
              v9 = (int)v8;
            }
            v10 = v7 * 64.0;
            if (v10 >= 2147483650.0)
            {
              v11 = 0x7FFFFFFF00000000;
            }
            else if (v10 <= -2147483650.0)
            {
              v11 = 0x8000000000000000;
            }
            else
            {
              v11 = (unint64_t)(int)v10 << 32;
            }
            WebCore::CheckboxInputType::startSwitchPointerTracking(v2, (void *)(v11 | v9));
            v12 = *(_QWORD *)(a1 + 8);
            *(_BYTE *)(v12 + 42) = 1;
            WebCore::CheckboxInputType::performSwitchAnimation(v12, 1);
          }
        }
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CheckboxInputType::*&)(void),WebCore::CheckboxInputType*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_34;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(_DWORD **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (*v13 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v8);
          v11 = *v10;
        }
        else
        {
          *v13 -= 2;
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_34;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_36:
        WTF::StringImpl::destroy(v11, v8);
        goto LABEL_34;
      }
      *(_DWORD *)v11 -= 2;
LABEL_34:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = 0;
    v17 = *((_DWORD *)v11 + 4) >> 8;
    do
    {
      v18 = v17 & v15;
      v17 = ++v16 + v18;
    }
    while (*(_QWORD *)(v14 + 16 * v18));
    v19 = v14 + 16 * v18;
    v20 = *(_DWORD **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v20)
    {
      if (*v20 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
        v21 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v8);
          else
            *(_DWORD *)v21 -= 2;
        }
        goto LABEL_27;
      }
      *v20 -= 2;
    }
    *(_QWORD *)v19 = 0;
LABEL_27:
    v22 = *v10;
    *v10 = 0;
    *(_QWORD *)v19 = v22;
    v23 = v4 + 16 * v9;
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v24;
    v25 = *(_DWORD **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v8);
      else
        *v25 -= 2;
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_34;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_36;
    *(_DWORD *)v11 -= 2;
    goto LABEL_34;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int *WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  char v17;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      v15 = v2;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 24 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          v11 = (char *)v3 + v8;
          v12 = *(_QWORD *)((char *)v3 + v8);
          *(_QWORD *)((char *)v3 + v8) = 0;
          *(_QWORD *)v10 = v12;
          LOBYTE(v7[v8 / 4 + 2]) = 0;
          v6 = (WTF::StringImpl *)&v7[v8 / 4 + 2];
          v10[4] = -1;
          v13 = *(unsigned int *)((char *)v3 + v8 + 16);
          if ((_DWORD)v13 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v13])(&v16, v6, v11 + 8);
            v10[4] = v13;
            v14 = *((unsigned int *)v11 + 4);
            if ((_DWORD)v14 != -1)
              ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v17, v11 + 8);
          }
          *((_DWORD *)v11 + 4) = -1;
          result = *(unsigned int **)((char *)v3 + v8);
          *(_QWORD *)((char *)v3 + v8) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v8 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v15 == v3)
        {
          *(_QWORD *)v15 = 0;
          v15[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSY_EEEDcSQ_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = (_DWORD *)*a3;
      if (*a3)
        ++v6[4];
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (result[4] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[4];
      }
      return result;
    }
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
  }
  v7 = (_DWORD *)*a3;
  if (*a3)
    ++v7[4];
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSY_EEEDcSQ_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

unint64_t WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DOMFormData::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::DOMFormData::Item>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v13 = 0;
      v14 = a3 + a2 - result;
      do
      {
        v15 = (char *)a2 + v13;
        v16 = v14 + v13;
        v17 = *(_QWORD *)((char *)a2 + v13 - 24);
        *(_QWORD *)((char *)a2 + v13 - 24) = 0;
        *(_QWORD *)(v16 - 24) = v17;
        *(_BYTE *)(v14 + v13 - 16) = 0;
        v18 = (WTF::StringImpl *)(v14 + v13 - 16);
        *(_DWORD *)(v16 - 8) = -1;
        v19 = *(unsigned int *)((char *)a2 + v13 - 8);
        if ((_DWORD)v19 != -1)
        {
          ((void (*)(char *, WTF::StringImpl *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v19])(&v23, v18, v15 - 16);
          *(_DWORD *)(v16 - 8) = v19;
          v20 = *((unsigned int *)v15 - 2);
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v20])(&v24, v15 - 16);
        }
        *((_DWORD *)v15 - 2) = -1;
        result = (WTF::StringImpl *)*((_QWORD *)v15 - 3);
        *((_QWORD *)v15 - 3) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          else
            *(_DWORD *)result -= 2;
        }
        v13 -= 24;
      }
      while ((WTF::StringImpl *)((char *)a2 + v13) != v5);
    }
  }
  else if (result != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      v9 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)((char *)v5 + v6) = 0;
      *(_QWORD *)v7 = v9;
      *(_BYTE *)(a3 + v6 + 8) = 0;
      v10 = (WTF::StringImpl *)(a3 + v6 + 8);
      *(_DWORD *)(v7 + 16) = -1;
      v11 = *(unsigned int *)((char *)v5 + v6 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v11])(&v21, v10, v8 + 8);
        *(_DWORD *)(v7 + 16) = v11;
        v12 = *((unsigned int *)v8 + 4);
        if ((_DWORD)v12 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v12])(&v22, v8 + 8);
      }
      *((_DWORD *)v8 + 4) = -1;
      result = *(WTF::StringImpl **)((char *)v5 + v6);
      *(_QWORD *)((char *)v5 + v6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 24;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

unint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 16 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 8) = -1;
          v10 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 8) = v10;
            v11 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4FileENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 2) = -1;
          v7 += 16;
          v9 = (WTF *)((char *)v9 + 16);
          v8 -= 16;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::tokenContainsHTMLSpace(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  int v7;
  char v8;

  v2 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      while (1)
      {
        v3 = *(unsigned __int8 *)a1;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        v4 = v3 - 9;
        if ((v3 - 9) < 0x18 && ((0x80001Bu >> v4) & 1) != 0)
          break;
        if (!--v2)
          return 0;
      }
      return 1;
    }
  }
  else if ((_DWORD)a2)
  {
    while (1)
    {
      v7 = *a1++;
      v8 = v7 - 9;
      if ((v7 - 9) < 0x18 && ((0x80001Bu >> v8) & 1) != 0)
        break;
      v5 = 0;
      if (!--v2)
        return v5;
    }
    return 1;
  }
  return 0;
}

BOOL WebCore::DOMTokenList::contains(WebCore::Element **this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element **v6;
  uint64_t v7;
  _BOOL8 result;
  WebCore::Element *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = WebCore::DOMTokenList::tokens(this, a5, (uint64_t)a2, a3, a4);
  v7 = *((unsigned int *)v6 + 3);
  if (!(_DWORD)v7)
    return 0;
  v9 = *v6;
  v10 = *(_QWORD *)a2;
  v11 = v7 - 1;
  do
  {
    v12 = *(_QWORD *)v9;
    v9 = (WebCore::Element *)((char *)v9 + 8);
    result = v12 == v10;
  }
  while (v12 != v10 && v11-- != 0);
  return result;
}

WebCore::Element **WebCore::DOMTokenList::tokens(WebCore::Element **this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  const WTF::AtomString *Attribute;

  if (*((_BYTE *)this + 17))
  {
    Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*this, this[1], a4, a5, a2);
    WebCore::DOMTokenList::updateTokensFromAttributeValue((uint64_t)this, Attribute);
  }
  return this + 3;
}

WTF *WebCore::DOMTokenList::addInternal@<X0>(WTF *result@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, WTF::String *a4@<X3>, _QWORD *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  const WTF::AtomString *Attribute;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  char v38;
  _QWORD *v39;
  WTF *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;

  v7 = a2;
  v8 = (uint64_t)result;
  v45 = (WTF *)&v47;
  a6.n128_u64[0] = 1;
  v46 = 1;
  if (a3 >= 2)
  {
    if (a3 >> 29)
    {
      __break(0xC471u);
      goto LABEL_82;
    }
    result = (WTF *)WTF::fastMalloc((WTF *)(8 * a3));
    LODWORD(v46) = a3;
    v45 = result;
  }
  if (*(_BYTE *)(v8 + 17))
  {
    Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*(WebCore::Element **)v8, *(const WebCore::QualifiedName **)(v8 + 8), a3, a4, a6);
    result = (WTF *)WebCore::DOMTokenList::updateTokensFromAttributeValue(v8, Attribute);
  }
  if (!a3)
  {
LABEL_20:
    v20 = HIDWORD(v46);
    if (!HIDWORD(v46))
    {
LABEL_28:
      result = (WTF *)WebCore::DOMTokenList::updateAssociatedAttributeFromTokens((WebCore::DOMTokenList *)v8, a6, (uint64_t)a2, a3, a4);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      goto LABEL_29;
    }
    v21 = v45;
    v22 = *(unsigned int *)(v8 + 32);
    v23 = *(unsigned int *)(v8 + 36);
    v24 = v23 + HIDWORD(v46);
    if (v24 > v22)
    {
      v33 = v22 + (v22 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v24)
        v35 = v23 + HIDWORD(v46);
      else
        v35 = v34;
      v36 = *(void **)(v8 + 24);
      if (v35 < 2)
      {
        v37 = (void *)(v8 + 40);
        *(_QWORD *)(v8 + 24) = v8 + 40;
        *(_DWORD *)(v8 + 32) = 1;
      }
      else
      {
        if (v35 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195B94218);
        }
        v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
        *(_DWORD *)(v8 + 32) = v35;
        *(_QWORD *)(v8 + 24) = v37;
      }
      memcpy(v37, v36, 8 * v23);
      if ((void *)(v8 + 40) != v36 && v36)
      {
        if (*(void **)(v8 + 24) == v36)
        {
          *(_QWORD *)(v8 + 24) = 0;
          *(_DWORD *)(v8 + 32) = 0;
        }
        WTF::fastFree((WTF *)v36, a2);
      }
    }
    v25 = *(unsigned int *)(v8 + 36);
    if (v24 >= v25)
    {
      v26 = (_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v25);
      v27 = 8 * v20;
      do
      {
        v28 = *(_DWORD **)v21;
        if (*(_QWORD *)v21)
          *v28 += 2;
        *v26++ = v28;
        v21 = (WTF *)((char *)v21 + 8);
        v27 -= 8;
      }
      while (v27);
      *(_DWORD *)(v8 + 36) = v24;
      goto LABEL_28;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x195B94210);
  }
  v10 = &v7[a3];
  while (1)
  {
    v11 = *v7;
    if (!*v7 || (v12 = *(unsigned int *)(v11 + 4), !(_DWORD)v12))
    {
      v38 = 9;
      goto LABEL_77;
    }
    v13 = *(unsigned __int16 **)(v11 + 8);
    if ((*(_DWORD *)(v11 + 16) & 4) != 0)
      break;
    do
    {
      v42 = *v13++;
      v43 = (1 << v42) & 0x100003600;
      if (v42 <= 0x20 && v43 != 0)
        goto LABEL_76;
      --v12;
    }
    while (v12);
LABEL_15:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v17 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v17)
    {
      v39 = *(_QWORD **)(v8 + 24);
      while (*v39 != v11)
      {
        ++v39;
        if (!--v17)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v18 = HIDWORD(v46);
      if (HIDWORD(v46))
      {
        v40 = v45;
        v41 = HIDWORD(v46);
        while (*(_QWORD *)v40 != v11)
        {
          v40 = (WTF *)((char *)v40 + 8);
          if (!--v41)
            goto LABEL_17;
        }
      }
      else
      {
LABEL_17:
        if (HIDWORD(v46) == (_DWORD)v46)
        {
          result = (WTF *)WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString const&>((uint64_t)&v45, (unint64_t)v7);
        }
        else
        {
          v19 = v45;
          *(_DWORD *)v11 += 2;
          *((_QWORD *)v19 + v18) = v11;
          HIDWORD(v46) = v18 + 1;
        }
      }
    }
    if (++v7 == v10)
      goto LABEL_20;
  }
  while (1)
  {
    v14 = *(unsigned __int8 *)v13;
    v13 = (unsigned __int16 *)((char *)v13 + 1);
    v15 = (1 << v14) & 0x100003600;
    if (v14 <= 0x20 && v15 != 0)
      break;
    if (!--v12)
      goto LABEL_15;
  }
LABEL_76:
  v38 = 3;
LABEL_77:
  *(_BYTE *)a5 = v38;
  a5[1] = 0;
  *((_BYTE *)a5 + 16) = 1;
LABEL_29:
  v29 = v45;
  if (HIDWORD(v46))
  {
    v30 = 8 * HIDWORD(v46);
    do
    {
      result = *(WTF **)v29;
      *(_QWORD *)v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
    v29 = v45;
  }
  if (&v47 != (uint64_t *)v29 && v29 != 0)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    return (WTF *)WTF::fastFree(v29, a2);
  }
  return result;
}

uint64_t WebCore::DOMTokenList::removeInternal@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  WTF::StringImpl **v7;
  uint64_t v8;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::AtomString *Attribute;
  char v25;
  WTF::StringImpl **v26;
  unsigned int v27;
  uint64_t v28;

  v7 = (WTF::StringImpl **)a2;
  v8 = result;
  v10 = (_QWORD *)((char *)a2 + 8 * a3);
  if (a3)
  {
    v11 = a2;
LABEL_7:
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 && (v13 = *(unsigned int *)(v12 + 4), (_DWORD)v13))
    {
      v14 = *(unsigned __int16 **)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        while (1)
        {
          v15 = *(unsigned __int8 *)v14;
          v14 = (unsigned __int16 *)((char *)v14 + 1);
          v16 = (1 << v15) & 0x100003600;
          if (v15 <= 0x20 && v16 != 0)
            break;
          if (!--v13)
            goto LABEL_16;
        }
      }
      else
      {
        while (1)
        {
          v27 = *v14++;
          v28 = (1 << v27) & 0x100003600;
          if (v27 <= 0x20 && v28 != 0)
            break;
          if (!--v13)
          {
LABEL_16:
            v11 = (WTF::StringImpl *)((char *)v11 + 8);
            if (v11 == (WTF::StringImpl *)v10)
              goto LABEL_2;
            goto LABEL_7;
          }
        }
      }
      v25 = 3;
    }
    else
    {
      v25 = 9;
    }
    *(_BYTE *)a5 = v25;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
  }
  else
  {
LABEL_2:
    if (*(_BYTE *)(result + 17))
    {
      Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*(WebCore::Element **)result, *(const WebCore::QualifiedName **)(result + 8), a3, a4, a6);
      WebCore::DOMTokenList::updateTokensFromAttributeValue(v8, Attribute);
    }
    if (a3)
    {
      v18 = *(_DWORD *)(v8 + 36);
      if (v18)
      {
        do
        {
          if (v18)
          {
            v19 = v18;
            v20 = *(WTF::StringImpl ***)(v8 + 24);
            v21 = *v7;
            if (*v20 == *v7)
            {
              v22 = 0;
LABEL_29:
              v26 = &v20[v22];
              *v26 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                {
                  WTF::StringImpl::destroy(v21, a2);
                  v19 = *(unsigned int *)(v8 + 36);
                }
                else
                {
                  *(_DWORD *)v21 -= 2;
                }
              }
              memmove(v26, v26 + 1, *(_QWORD *)(v8 + 24) + 8 * v19 - (_QWORD)(v26 + 1));
              v18 = *(_DWORD *)(v8 + 36) - 1;
              *(_DWORD *)(v8 + 36) = v18;
            }
            else
            {
              v22 = 0;
              while (v18 - 1 != v22)
              {
                v23 = v20[++v22];
                if (v23 == v21)
                  goto LABEL_29;
              }
            }
          }
          ++v7;
        }
        while (v7 != v10);
      }
    }
    result = WebCore::DOMTokenList::updateAssociatedAttributeFromTokens((WebCore::DOMTokenList *)v8, a6, (uint64_t)a2, a3, a4);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::DOMTokenList::toggle@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  WTF::StringImpl **v10;
  WebCore::DOMTokenList *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  WebCore::Element *v18;
  WTF::StringImpl *v19;
  int v20;
  const WTF::AtomString *Attribute;
  char v22;
  WebCore::Element *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  __n128 v28;
  unsigned int v29;
  uint64_t v30;

  v7 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v8 = *(unsigned int *)(v7 + 4), !(_DWORD)v8))
  {
    v22 = 9;
LABEL_38:
    *(_BYTE *)a5 = v22;
    *(_QWORD *)(a5 + 8) = 0;
    v20 = 1;
    goto LABEL_39;
  }
  v9 = BYTE1(a3);
  v10 = (WTF::StringImpl **)a2;
  v11 = (WebCore::DOMTokenList *)result;
  v12 = *(unsigned __int16 **)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    while (1)
    {
      v13 = *(unsigned __int8 *)v12;
      v12 = (unsigned __int16 *)((char *)v12 + 1);
      v14 = (1 << v13) & 0x100003600;
      if (v13 <= 0x20 && v14 != 0)
        break;
      if (!--v8)
        goto LABEL_10;
    }
LABEL_37:
    v22 = 3;
    goto LABEL_38;
  }
  do
  {
    v29 = *v12++;
    v30 = (1 << v29) & 0x100003600;
    if (v29 <= 0x20 && v30 != 0)
      goto LABEL_37;
    --v8;
  }
  while (v8);
LABEL_10:
  v16 = a3;
  if (*(_BYTE *)(result + 17))
  {
    Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*(WebCore::Element **)result, *(const WebCore::QualifiedName **)(result + 8), a3, a4, a6);
    WebCore::DOMTokenList::updateTokensFromAttributeValue((uint64_t)v11, Attribute);
  }
  result = (uint64_t)v11 + 24;
  v17 = *((unsigned int *)v11 + 9);
  if ((_DWORD)v17)
  {
    v23 = *(WebCore::Element **)result;
    a2 = *v10;
    v24 = *((unsigned int *)v11 + 9);
    while (*(WTF::StringImpl **)v23 != a2)
    {
      v23 = (WebCore::Element *)((char *)v23 + 8);
      if (!--v24)
        goto LABEL_13;
    }
    if (v9 && v16)
      goto LABEL_20;
    WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WTF::AtomString>((WTF::StringImpl ***)result, a2);
    result = WebCore::DOMTokenList::updateAssociatedAttributeFromTokens(v11, v28, v25, v26, v27);
  }
  else
  {
LABEL_13:
    if (!v9 || v16)
    {
      if ((_DWORD)v17 == *((_DWORD *)v11 + 8))
      {
        WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString const&>(result, (unint64_t)v10);
      }
      else
      {
        v18 = *(WebCore::Element **)result;
        v19 = *v10;
        if (*v10)
          *(_DWORD *)v19 += 2;
        *((_QWORD *)v18 + v17) = v19;
        *((_DWORD *)v11 + 9) = v17 + 1;
      }
      result = WebCore::DOMTokenList::updateAssociatedAttributeFromTokens(v11, a6, (uint64_t)a2, a3, a4);
LABEL_20:
      v20 = 0;
      *(_BYTE *)a5 = 1;
      goto LABEL_39;
    }
  }
  v20 = 0;
  *(_BYTE *)a5 = 0;
LABEL_39:
  *(_DWORD *)(a5 + 16) = v20;
  return result;
}

WebCore::Element **WebCore::DOMTokenList::tokens(WebCore::Element **this)
{
  const WTF::AtomString *Attribute;

  if (*((_BYTE *)this + 17))
  {
    Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*this, this[1]);
    WebCore::DOMTokenList::updateTokensFromAttributeValue((uint64_t)this, Attribute);
  }
  return this + 3;
}

WTF::StringImpl ***WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WTF::AtomString>(WTF::StringImpl ***result, WTF::StringImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;

  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t)result;
    v4 = *result;
    if (**result == this)
    {
      v5 = 0;
LABEL_9:
      v7 = &v4[v5];
      *v7 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          WTF::StringImpl::destroy(this, this);
          v2 = *(unsigned int *)(v3 + 12);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      result = (WTF::StringImpl ***)memmove(v7, v7 + 1, *(_QWORD *)v3 + 8 * v2 - (_QWORD)(v7 + 1));
      --*(_DWORD *)(v3 + 12);
    }
    else
    {
      v5 = 0;
      while (v2 - 1 != v5)
      {
        v6 = v4[++v5];
        if (v6 == this)
          goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t WebCore::DOMTokenList::updateAssociatedAttributeFromTokens(WebCore::DOMTokenList *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  const WTF::AtomString *Attribute;
  uint64_t v18;
  char v19;
  __n128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;
  _QWORD v36[3];

  v6 = *((_DWORD *)this + 9);
  if (!v6)
  {
    result = WebCore::Element::hasAttribute(*(WebCore::Element **)this, *((const WebCore::QualifiedName **)this + 1), a4, a5, a2);
    if (!(_DWORD)result)
      return result;
    v6 = *((_DWORD *)this + 9);
    if (!v6)
    {
      WebCore::Element::setAttribute(*(WebCore::Element **)this, *((const WebCore::QualifiedName **)this + 1), MEMORY[0x1E0CBF3B8], 0, v36, a2);
      return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v36, v8);
    }
  }
  if (v6 == 1)
  {
    v9 = *((_BYTE *)this + 16);
    *((_BYTE *)this + 16) = 1;
    result = (uint64_t)WebCore::Element::setAttribute(*(WebCore::Element **)this, *((const WebCore::QualifiedName **)this + 1), *((WTF::StringImpl ***)this + 3), 0, &v33, a2);
    if (v35)
    {
      result = (uint64_t)v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    *((_BYTE *)this + 16) = v9;
    return result;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  if (!*((_BYTE *)this + 17))
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v12 = &v11[v6];
    goto LABEL_14;
  }
  Attribute = (const WTF::AtomString *)WebCore::Element::getAttribute(*(WebCore::Element **)this, *((const WebCore::QualifiedName **)this + 1), a4, a5, a2);
  WebCore::DOMTokenList::updateTokensFromAttributeValue((uint64_t)this, Attribute);
  v18 = *((unsigned int *)this + 9);
  if ((_DWORD)v18)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v12 = &v11[v18];
    do
    {
LABEL_14:
      v13 = v31;
      if (v31)
      {
        LOBYTE(v28) = 32;
        if (v30 && (v31 < *((_DWORD *)v30 + 1) ? (v14 = v29 == 0) : (v14 = 0), v14))
        {
          v15 = *((_DWORD *)v30 + 4);
          v16 = *((_QWORD *)v30 + 1);
          ++v31;
          if ((v15 & 4) != 0)
            *(_BYTE *)(v16 + v13) = 32;
          else
            *(_WORD *)(v16 + 2 * v13) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      WTF::StringBuilder::append(&v29, v11++);
    }
    while (v11 != v12);
  }
  WTF::StringBuilder::toAtomString((WTF::AtomString *)&v29, (WTF::AtomString *)&v28);
  v19 = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = 1;
  WebCore::Element::setAttribute(*(WebCore::Element **)this, *((const WebCore::QualifiedName **)this + 1), &v28, 0, &v25, v20);
  if (v27)
  {
    v22 = v26;
    v26 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  *((_BYTE *)this + 16) = v19;
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = (uint64_t)v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DOMTokenList::replace@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, unsigned __int16 ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  unsigned __int16 **v10;
  uint64_t v11;
  WebCore::Element **v13;
  uint64_t v14;
  WTF::String *v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WebCore::Element *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 **v23;
  uint64_t v24;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2
    || (v8 = *(unsigned int *)(v5 + 4), !(_DWORD)v8)
    || (v10 = *a3) == 0
    || (v11 = *((unsigned int *)v10 + 1), !(_DWORD)v11))
  {
    v6 = 9;
LABEL_3:
    *(_BYTE *)a4 = v6;
    *(_QWORD *)(a4 + 8) = 0;
    v7 = 1;
LABEL_4:
    *(_DWORD *)(a4 + 16) = v7;
    return this;
  }
  v13 = (WebCore::Element **)this;
  this = WebCore::tokenContainsHTMLSpace(*(unsigned __int16 **)(v5 + 8), v8 | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32));
  if ((this & 1) != 0
    || (this = WebCore::tokenContainsHTMLSpace(v10[1], v11 | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32)), (_DWORD)this))
  {
    v6 = 3;
    goto LABEL_3;
  }
  this = (uint64_t)WebCore::DOMTokenList::tokens(v13);
  v17 = *(unsigned int *)(this + 12);
  if (!(_DWORD)v17)
  {
LABEL_12:
    v7 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_4;
  }
  v18 = this;
  v19 = 0;
  v20 = *(WebCore::Element **)this;
  this = *(_QWORD *)a2;
  while (*((_QWORD *)v20 + v19) != this)
  {
    if (v17 == ++v19)
      goto LABEL_12;
  }
  v21 = v18;
  v22 = 0;
  v23 = *a3;
  do
  {
    if (*((unsigned __int16 ***)v20 + v22) == v23)
    {
      if (v19 != v22)
      {
        if (v22 <= v19)
        {
          v24 = v21;
        }
        else
        {
          if (v23)
            *(_DWORD *)v23 += 2;
          *((_QWORD *)v20 + v19) = v23;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)this -= 2;
          }
          v24 = v21;
          v19 = v22;
        }
        WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v24, (WTF::StringImpl *)v19);
      }
      goto LABEL_26;
    }
    ++v22;
  }
  while (v17 != v22);
  if (v19 < v17)
  {
    if (v23)
      *(_DWORD *)v23 += 2;
    *((_QWORD *)v20 + v19) = v23;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)this -= 2;
    }
LABEL_26:
    this = WebCore::DOMTokenList::updateAssociatedAttributeFromTokens((WebCore::DOMTokenList *)v13, v16, v19, v14, v15);
    v7 = 0;
    *(_BYTE *)a4 = 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::DOMTokenList::supports@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  int v8;

  v6 = a1[6];
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8), a2, a3);
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 8) = 0;
    v8 = 1;
    result = 33;
  }
  *(_BYTE *)a4 = result;
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t WebCore::DOMTokenList::value(WebCore::Element **this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  return WebCore::Element::getAttribute(*this, this[1], a4, a5, a2);
}

WTF::StringImpl *WebCore::DOMTokenList::setValue(WebCore::Element **this, WTF::StringImpl **a2, __n128 a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)WebCore::Element::setAttribute(*this, this[1], a2, 0, &v5, a3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DOMTokenList::updateTokensFromAttributeValue(uint64_t this, const WTF::AtomString *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  WTF *v38;
  WTF *v39;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49[2];
  WTF::StringImpl **v50;

  v4 = this;
  v5 = (uint64_t *)(this + 24);
  v6 = *(uint64_t **)(this + 24);
  v7 = *(unsigned int *)(this + 36);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    do
    {
      this = *v6;
      *v6 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  *(_DWORD *)(v4 + 36) = 0;
  v50 = 0;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    LODWORD(v10) = 0;
    while (1)
    {
      v11 = *(unsigned int *)(v9 + 4);
      if (v10 < v11)
      {
        v10 = v10;
        v30 = *(_QWORD *)(v9 + 8);
        while (1)
        {
          v31 = (*(_DWORD *)(v9 + 16) & 4) != 0 ? *(unsigned __int8 *)(v30 + v10) : *(unsigned __int16 *)(v30 + 2 * v10);
          v18 = v31 > 0x20;
          v32 = (1 << v31) & 0x100003600;
          if (v18 || v32 == 0)
            break;
          if (v11 == ++v10)
            goto LABEL_70;
        }
      }
      v12 = v11 - v10;
      if (v11 <= v10)
        goto LABEL_70;
      LODWORD(v13) = v10 + 1;
      v14 = v10;
      if ((int)v10 + 1 >= v11)
      {
        v15 = v10;
      }
      else
      {
        v13 = v10 + 1;
        v15 = v11 - 1;
        do
        {
          if (v13 < v11)
          {
            v16 = *(_QWORD *)(v9 + 8);
            v17 = (*(_BYTE *)(v9 + 16) & 4) != 0
                ? *(unsigned __int8 *)(v16 + v13)
                : *(unsigned __int16 *)(v16 + 2 * v13);
            v18 = v17 > 0x20;
            v19 = (1 << v17) & 0x100003600;
            if (!v18 && v19 != 0)
            {
              v15 = v13 - 1;
              goto LABEL_26;
            }
          }
          ++v13;
        }
        while (v13 < v11);
        LODWORD(v13) = *(_DWORD *)(v9 + 4);
      }
LABEL_26:
      if (!(_DWORD)v10 && (_DWORD)v13 == (_DWORD)v11)
        break;
      v21 = *(unsigned int *)(v9 + 16);
      v22 = *(_QWORD *)(v9 + 8);
      v23 = v2 & 0xFFFFFF0000000000 | (((v21 >> 2) & 1) << 32);
      v2 = v23 | v11;
      v24 = v13 - v10;
      if ((_DWORD)v10 || (v25 = v23 | v11, v12 > v24))
      {
        if (v12 >= v24)
          v25 = v24;
        else
          v25 = v12;
        v26 = v11 - v10;
        if (((v21 >> 2) & 1) != 0)
        {
          if (v26 < v25)
            goto LABEL_68;
          v22 += v14;
          v25 |= 0x100000000uLL;
        }
        else
        {
          if (v26 < v25)
          {
LABEL_68:
            __break(1u);
LABEL_69:
            this = (uint64_t)WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString const&>((uint64_t)v5, (unint64_t)a2);
            goto LABEL_70;
          }
          v22 += 2 * v14;
        }
      }
      v49[0] = v22;
      v49[1] = v25;
      if (!v50
        || (this = WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t)v50, v49)) == 0)
      {
        if ((v25 & 0xFF00000000) != 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v27 = v47;
        v48 = v47;
        v28 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v28 == *(_DWORD *)(v4 + 32))
        {
          WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString&>((uint64_t)v5, (unint64_t)&v48);
        }
        else
        {
          v29 = *v5;
          if (v47)
            *(_DWORD *)v47 += 2;
          *(_QWORD *)(v29 + 8 * v28) = v27;
          *(_DWORD *)(v4 + 36) = v28 + 1;
        }
        WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add((uint64_t *)&v50, (WTF::StringImpl *)&v48, (uint64_t)&v47);
        this = (uint64_t)v48;
        v48 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
      }
      LODWORD(v10) = v15 + 2;
      v9 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_70;
    }
    v34 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v34 != *(_DWORD *)(v4 + 32))
    {
      v35 = v34 + 1;
      v36 = *(_QWORD *)(v4 + 24);
      *(_DWORD *)v9 += 2;
      *(_QWORD *)(v36 + 8 * v34) = v9;
      *(_DWORD *)(v4 + 36) = v34 + 1;
      goto LABEL_71;
    }
    goto LABEL_69;
  }
LABEL_70:
  v35 = *(_DWORD *)(v4 + 36);
LABEL_71:
  v37 = *(_DWORD *)(v4 + 32);
  if (v37 > v35)
  {
    v38 = (WTF *)*v5;
    v39 = (WTF *)*v5;
    if (v35)
    {
      v45 = v35;
      if (v37 >= v35)
        v46 = v35;
      else
        v46 = *(_DWORD *)(v4 + 32);
      if (v46 >= 2)
      {
        *(_DWORD *)(v4 + 32) = v35;
        this = WTF::fastRealloc(v38, (void *)(8 * v35));
        *(_QWORD *)(v4 + 24) = this;
        goto LABEL_80;
      }
      WTF::VectorBuffer<WTF::AtomString,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)v5, v35);
      this = *v5;
      v39 = v38;
      if ((WTF *)*v5 != v38)
      {
        this = (uint64_t)memcpy((void *)this, v38, 8 * v45);
        v39 = (WTF *)*v5;
      }
    }
    if ((WTF *)(v4 + 40) != v38 && v38 != 0)
    {
      if (v39 == v38)
      {
        *(_QWORD *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 32) = 0;
      }
      this = WTF::fastFree(v38, a2);
      v39 = (WTF *)*v5;
    }
    if (!v39)
    {
      *(_QWORD *)(v4 + 24) = v4 + 40;
      *(_DWORD *)(v4 + 32) = 1;
    }
  }
LABEL_80:
  *(_BYTE *)(v4 + 17) = 0;
  v41 = (uint64_t)v50;
  if (v50)
  {
    v42 = *((unsigned int *)v50 - 1);
    if ((_DWORD)v42)
    {
      v43 = v50;
      do
      {
        v44 = *v43;
        if (*v43 != (WTF::StringImpl *)-1)
        {
          *v43 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, a2);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        ++v43;
        --v42;
      }
      while (v42);
    }
    return WTF::fastFree((WTF *)(v41 - 16), a2);
  }
  return this;
}

WTF::StringImpl *WebCore::DOMURL::create@<X0>(WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  MEMORY[0x19AEA52F8](&v16, a2, this, 0);
  if ((v17 & 1) != 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)v6 = off_1E33B2120;
    v8 = v16;
    v16 = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v8;
    v9 = v17;
    *(_OWORD *)(v6 + 32) = v17;
    *(_OWORD *)(v6 + 48) = v18;
    LODWORD(v17) = v9 & 0xFFFFFFFE;
    *(_QWORD *)(v6 + 64) = 0;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    v11 = *this;
    if (*this)
      *(_DWORD *)v11 += 2;
    v14 = v11;
    WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(34, (uint64_t *)&v14, (int8x16_t *)"\" cannot be parsed as a URL.", 29, &v15);
    v12 = v14;
    v13 = v15;
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 16) = 1;
    v14 = 0;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMURL::create@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;

  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v22 = v7;
  MEMORY[0x19AEA52D4](&v20, &v22, 0);
  v9 = v22;
  v22 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *a2;
  if (*a2 && (v21 & 1) == 0)
  {
    v13 = *this;
    if (*this)
      *(_DWORD *)v13 += 2;
    v18 = v13;
    *(_DWORD *)v10 += 2;
    v17 = v10;
    WTF::makeString<char,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((void *)0x22, (uint64_t *)&v18, (int8x16_t *)"\" cannot be parsed as a URL against \"", 38, (uint64_t *)&v17, (int8x16_t *)"\".", 3, &v19);
    v14 = v19;
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 16) = 1;
    v19 = 0;
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    WebCore::DOMURL::create(this, (const WTF::String *)&v20, a3);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WTF::makeString<char,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int8x16_t *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = (__int16)result;
  v12 = *a2;
  v13 = *a5;
  if (a4)
  {
    v14 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195B953ECLL);
    }
  }
  else
  {
    v14 = 0;
  }
  if (a7)
  {
    v15 = a7 - 1;
    if ((unint64_t)(a7 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x195B953C0);
    }
  }
  else
  {
    v15 = 0;
  }
  if (v12)
  {
    v16 = *(_DWORD *)(v12 + 4);
    if (v13)
      goto LABEL_7;
LABEL_30:
    v17 = 0;
    goto LABEL_8;
  }
  v16 = 0;
  if (!v13)
    goto LABEL_30;
LABEL_7:
  v17 = *(_DWORD *)(v13 + 4);
  if (v17 < 0)
  {
LABEL_32:
    *a8 = 0;
    __break(0xC471u);
    goto LABEL_37;
  }
LABEL_8:
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (v18)
    goto LABEL_32;
  v18 = __OFADD__(v14, v19);
  v20 = v14 + v19;
  v21 = v18;
  if (v16 < 0)
    goto LABEL_32;
  if (v21)
    goto LABEL_32;
  v18 = __OFADD__(v16, v20);
  v22 = v16 + v20;
  if (v18)
    goto LABEL_32;
  v23 = (v22 + 1);
  if (__OFADD__(v22, 1))
    goto LABEL_32;
  if ((!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0) && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
  {
    if (v22 != -1)
    {
      if ((v23 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
        v24 = v25;
        if (v25)
        {
          *(_DWORD *)v25 = 2;
          *(_DWORD *)(v25 + 4) = v23;
          *(_BYTE *)(v25 + 20) = v10;
          *(_QWORD *)(v25 + 8) = v25 + 20;
          *(_DWORD *)(v25 + 16) = 4;
          result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v25 + 21), v12, a3, v14, v13, a6, v15);
          goto LABEL_28;
        }
      }
      goto LABEL_32;
    }
LABEL_31:
    v24 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_28;
  }
  if (v22 == -1)
    goto LABEL_31;
  if (v23 > 0x7FFFFFEF)
    goto LABEL_32;
  WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
  v24 = v25;
  if (!v25)
    goto LABEL_32;
  *(_DWORD *)v25 = 2;
  *(_DWORD *)(v25 + 4) = v23;
  *(_WORD *)(v25 + 20) = v10;
  *(_QWORD *)(v25 + 8) = v25 + 20;
  *(_DWORD *)(v25 + 16) = 0;
  result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_WORD *)(v25 + 22), v12, a3, v14, v13, a6, v15);
LABEL_28:
  *a8 = v24;
  return result;
}

uint64_t WebCore::DOMURL::parse@<X0>(WebCore::DOMURL *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;

  WebCore::parseInternal((WebCore *)&v8, this, a2);
  if ((v9 & 1) != 0)
  {
    result = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E33B2120;
    v7 = v8;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v7;
    *(_OWORD *)(result + 32) = v9;
    *(_OWORD *)(result + 48) = v10;
    *(_QWORD *)(result + 64) = 0;
    *a3 = result;
  }
  else
  {
    result = (uint64_t)v8;
    *a3 = 0;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::parseInternal(WebCore *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;

  v6 = *a3;
  if (*a3)
    *(_DWORD *)v6 += 2;
  v13 = v6;
  MEMORY[0x19AEA52D4](&v11, &v13, 0);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (!*a3 || (v12 & 1) != 0)
  {
    MEMORY[0x19AEA52F8](this, &v11, a2, 0);
  }
  else
  {
    *(_QWORD *)this = 0;
    WTF::URL::invalidate(this);
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMURL::setHref@<X0>(WebCore::DOMURL *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  WebCore::URLSearchParams *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v17 = v5;
  MEMORY[0x19AEA52D4](&v14, &v17, 0);
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if ((v15 & 1) != 0)
  {
    v8 = v14;
    v14 = 0;
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v15;
    LODWORD(v15) = v15 & 0xFFFFFFFE;
    v11 = v16;
    *((_OWORD *)this + 2) = v10;
    *((_OWORD *)this + 3) = v11;
    v12 = (WebCore::URLSearchParams *)*((_QWORD *)this + 8);
    if (v12)
      WebCore::URLSearchParams::updateFromAssociatedURL(v12);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *(_BYTE *)a3 = 33;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMURL::createPublicURL@<X0>(WebCore::ActiveDOMObject **this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::BlobURL *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WebCore::ActiveDOMObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  void *v17;
  WebCore::ActiveDOMObject *v18;
  WebCore::ActiveDOMObject *v19;
  WTF::StringImpl *v20[5];
  WebCore::ActiveDOMObject *v21;

  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)this, a2);
  WebCore::BlobURL::createPublicURL(v7, (uint64_t)v20);
  result = v20[0];
  if (!v20[0])
  {
LABEL_2:
    *a3 = 0;
    return result;
  }
  if (*((_DWORD *)v20[0] + 1))
  {
    v10 = this[20];
    if (!v10)
    {
      WebCore::PublicURLManager::create((WebCore::PublicURLManager *)this, &v21);
      v18 = v21;
      v21 = 0;
      v19 = this[20];
      this[20] = v18;
      if (v19)
        WebCore::PublicURLManager::deref(v19, v17);
      result = (WTF::StringImpl *)WTF::Ref<WebCore::PublicURLManager,WTF::RawPtrTraits<WebCore::PublicURLManager>,WTF::DefaultRefDerefTraits<WebCore::PublicURLManager>>::~Ref(&v21, v17);
      v10 = this[20];
    }
    if (!*((_BYTE *)v10 + 28))
    {
      v11 = *((_QWORD *)v10 + 1);
      if (v11)
      {
        if (*(_QWORD *)(v11 + 8))
        {
          v12 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 16))(a2);
          v13 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 8);
          if (v13)
            v14 = v13 - 96;
          else
            v14 = 0;
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **, WebCore::ScriptExecutionContext *))(*(_QWORD *)v12 + 16))(v12, v14, v20, a2);
        }
      }
    }
    v15 = v20[0];
    if (!v20[0])
      goto LABEL_2;
    v16 = *(_DWORD *)v20[0];
    *(_DWORD *)v20[0] += 2;
    result = v15;
  }
  else
  {
    v15 = 0;
    v16 = *(_DWORD *)v20[0] - 2;
  }
  *a3 = v15;
  v20[0] = 0;
  if (!v16)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  *(_DWORD *)result = v16;
  return result;
}

WTF::StringImpl *WebCore::DOMURL::revokeObjectURL(WebCore::DOMURL *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WebCore::ResourceRequest *v9;
  char v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::SecurityOrigin *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;
  WTF::StringImpl *v21;
  WebCore::PublicURLManager *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  void *v26;
  WebCore::ActiveDOMObject *v27;
  WebCore::ActiveDOMObject *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[7];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  char v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  WTF::StringImpl *v49;
  char v50;
  WebCore::ActiveDOMObject **v51;
  WebCore::ActiveDOMObject *v52;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v30 = v4;
  MEMORY[0x19AEA52D4](&v46, &v30, 0);
  v6 = v30;
  v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v46;
  if (v46)
    *(_DWORD *)v46 += 2;
  v30 = v7;
  v31 = v47;
  v32 = v48;
  v33[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v33);
  v33[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33[6] = v52;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0x10000;
  v10 = v38 & 0x80 | 4;
  v38 = v10;
  v39 = 0;
  v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v12 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *(_DWORD *)v12 += 2;
    v10 = v38;
  }
  v40 = v12;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v44 & 0xE0 | 5;
  v38 = v10 | 2;
  v45 = 0;
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v29 = v13;
    goto LABEL_13;
  }
  if (*((_BYTE *)this + 272) != 1)
  {
    if (v12)
      *(_DWORD *)v12 += 2;
    v29 = v12;
    if (v12)
      goto LABEL_13;
LABEL_48:
    v18 = *v11;
    if (*v11)
    {
      v19 = *(_DWORD *)v18 + 2;
      *(_DWORD *)v18 = v19;
      goto LABEL_19;
    }
    goto LABEL_52;
  }
  v14 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::DOMURL *))(*(_QWORD *)this + 256))(this);
  WebCore::SecurityOrigin::domainForCachePartition(v14, &v29);
  if (!v29)
    goto LABEL_48;
LABEL_13:
  v15 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v15 != -1)
  {
    v52 = (WebCore::ActiveDOMObject *)&v50;
    v51 = &v52;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  if (v29)
  {
    v16 = *((_QWORD *)v29 + 1);
    v17 = *((unsigned int *)v29 + 1) | ((unint64_t)((*((_DWORD *)v29 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v16, v17, (uint64_t *)&v49);
  v18 = v49;
  if (v49)
    goto LABEL_18;
  v18 = *v11;
  if (*v11)
  {
    *(_DWORD *)v18 += 2;
LABEL_18:
    v19 = *(_DWORD *)v18;
LABEL_19:
    v20 = 0;
    *(_DWORD *)v18 = v19 + 2;
    goto LABEL_20;
  }
LABEL_52:
  v20 = 1;
LABEL_20:
  v21 = v40;
  v40 = v18;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v8);
      if ((v20 & 1) != 0)
        goto LABEL_26;
      goto LABEL_24;
    }
    *(_DWORD *)v21 -= 2;
  }
  if ((v20 & 1) != 0)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v8);
  else
    *(_DWORD *)v18 -= 2;
LABEL_26:
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v8);
    else
      *(_DWORD *)v29 -= 2;
  }
  WebCore::MemoryCache::removeRequestFromSessionCaches(this, (WebCore::ScriptExecutionContext *)&v30, v9);
  v22 = (WebCore::PublicURLManager *)*((_QWORD *)this + 20);
  if (!v22)
  {
    WebCore::PublicURLManager::create(this, &v52);
    v27 = v52;
    v52 = 0;
    v28 = (WebCore::ActiveDOMObject *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v27;
    if (v28)
      WebCore::PublicURLManager::deref(v28, v26);
    WTF::Ref<WebCore::PublicURLManager,WTF::RawPtrTraits<WebCore::PublicURLManager>,WTF::DefaultRefDerefTraits<WebCore::PublicURLManager>>::~Ref(&v52, v26);
    v22 = (WebCore::PublicURLManager *)*((_QWORD *)this + 20);
  }
  WebCore::PublicURLManager::revoke(v22, (const WTF::URL *)&v46);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v30, v23);
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_1E33D5AC0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a3;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v14 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v14)
        {
          v17 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
          v11 = v17;
        }
        v15 = *(WTF **)(v11 + 16);
        if (v15)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v16 = v11;
          WTF::fastFree(v15, v9);
          v11 = v16;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v5 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)a1 = off_1E33AFBD0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &unk_1E33AFFE8;
  *(_QWORD *)(a1 + 40) = &unk_1E33B0018;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

WTF::StringImpl **WebCore::DateInputType::formControlType(WebCore::DateInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "date";
    v2[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::date(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::date(void)::name;
}

uint64_t WebCore::DateInputType::dateType(WebCore::DateInputType *this)
{
  return 1;
}

void WebCore::DateInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v50[12] = 3;
  *(_QWORD *)v50 = 0;
  *(_WORD *)&v50[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v50, (uint64_t)&v48);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v6
    && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
      ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
      : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
        (_DWORD)v9))
  {
    v9 = v9;
    v10 = (uint64_t *)(v8 + 8);
    while (1)
    {
      v11 = *(v10 - 1);
      if (v11 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v9)
      {
        v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v12 = (const char *)WTF::numberToString();
  v13 = (uint64_t)v12;
  v14 = 0x100000000;
  if (v12)
    v14 = strlen(v12) | 0x100000000;
  WebCore::Decimal::fromString(v13, v14, (uint64_t)&v44);
  v15 = *v10;
  if (*v10)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v16, v17);
  if (v51)
  {
    v40 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v40, (uint64_t)&v46);
  }
  else
  {
    v46 = v44;
    v47 = v45;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v18
    && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
      ? (v20 = *(_QWORD *)(v18 + 40), LODWORD(v21) = *(_DWORD *)(v18 + 52))
      : (v20 = v18 + 32, LODWORD(v21) = v19 >> 5),
        (_DWORD)v21))
  {
    v21 = v21;
    v22 = (uint64_t *)(v20 + 8);
    while (1)
    {
      v23 = *(v22 - 1);
      if (v23 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v22 += 2;
      if (!--v21)
      {
        v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v24 = (const char *)WTF::numberToString();
  v25 = (uint64_t)v24;
  v26 = 0x100000000;
  if (v24)
    v26 = strlen(v24) | 0x100000000;
  WebCore::Decimal::fromString(v25, v26, (uint64_t)&v42);
  v27 = *v22;
  if (*v22)
  {
    v28 = *(_QWORD *)(v27 + 8);
    v29 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v28 = 0;
    v29 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v28, v29);
  if (v51)
  {
    v41 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v41, (uint64_t)&v44);
  }
  else
  {
    v44 = v42;
    v45 = v43;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v30
    && ((v31 = *(_DWORD *)(v30 + 4), (v31 & 1) != 0)
      ? (v32 = *(_QWORD *)(v30 + 40), LODWORD(v33) = *(_DWORD *)(v30 + 52))
      : (v32 = v30 + 32, LODWORD(v33) = v31 >> 5),
        (_DWORD)v33))
  {
    v33 = v33;
    v34 = (uint64_t *)(v32 + 8);
    while (1)
    {
      v35 = *(v34 - 1);
      if (v35 == WebCore::HTMLNames::stepAttr
        || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
        && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
      {
        break;
      }
      v34 += 2;
      if (!--v33)
      {
        v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v36 = *v34;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = *(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v37 = 0;
    v38 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::dateStepDescription, v37, v38, (uint64_t)v50);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  *(_OWORD *)(a3 + 24) = v46;
  *(_QWORD *)(a3 + 40) = v47;
  v39 = *(_DWORD *)&v50[12] & 0xFFFFFFFD;
  if ((*(_DWORD *)&v50[12] & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v50;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v50[16];
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v48) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v48;
    *(_QWORD *)(a3 + 88) = v49;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::dateStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v39 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

void WebCore::DateInputType::parseToDateComponents(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (!(_DWORD)a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 36) = 0;
    return;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseDate<unsigned char>((uint64_t)&v6, (uint64_t)&v9))
      goto LABEL_9;
  }
  else
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseDate<char16_t>((uint64_t)&v6, (uint64_t)&v9))
    {
LABEL_9:
      v5 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_10;
    }
  }
  if (v10)
    goto LABEL_9;
  v4 = v7;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 32) = v8;
  v5 = 1;
LABEL_10:
  *(_BYTE *)(a3 + 36) = v5;
}

uint64_t WebCore::DateInputType::setMillisecondToDateComponents@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  uint64_t result;
  BOOL v5;
  BOOL v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  LOBYTE(v11) = 0;
  v9 = 0u;
  v10 = 0u;
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (result = WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal((WebCore::DateComponents *)&v9, round(a1)), SDWORD2(v10) >= 1)&& (DWORD2(v10) >= 0x43530 ? (v5 = SDWORD1(v10) < 8) : (v5 = 1), !v5 ? (v6 = (int)v10 < 14) : (v6 = 1), v6))
  {
    v7 = 1;
    LOBYTE(v11) = 1;
    v8 = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 32) = v11;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 36) = v7;
  return result;
}

BOOL WebCore::DateInputType::isValidFormat(uint64_t a1, int a2)
{
  return (~a2 & 0xBLL) == 0;
}

_QWORD *WebCore::DateInputType::formatDateTimeFieldsState@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  BOOL v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;

  if (!*((_BYTE *)a1 + 20) || (*((_BYTE *)a1 + 12) ? (v3 = *((_BYTE *)a1 + 4) == 0) : (v3 = 1), v3))
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a2 = v4;
  }
  else
  {
    v5 = *a1;
    v6 = a1[2];
    v7 = a1[4];
    v13 = 0x400000030;
    v14 = v5;
    v11 = 0x200000030;
    v12 = v6;
    v9 = 0x200000030;
    v10 = v7;
    v19 = &v13;
    v20 = v5;
    v17 = &v11;
    v18 = v6;
    v15 = &v9;
    v16 = v7;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(a2, (uint64_t)&v19, 45, (uint64_t)&v17, 45, (uint64_t)&v15);
    if (!*a2)
      __break(0xC471u);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::DateInputType::formatDateTimeFieldsState@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  BOOL v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;

  if (!*((_BYTE *)a1 + 20) || (*((_BYTE *)a1 + 12) ? (v3 = *((_BYTE *)a1 + 4) == 0) : (v3 = 1), v3))
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a2 = v4;
  }
  else
  {
    v5 = *a1;
    v6 = a1[2];
    v7 = a1[4];
    v13 = 0x400000030;
    v14 = v5;
    v11 = 0x200000030;
    v12 = v6;
    v9 = 0x200000030;
    v10 = v7;
    v19 = &v13;
    v20 = v5;
    v17 = &v11;
    v18 = v6;
    v15 = &v9;
    v16 = v7;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(a2, (uint64_t)&v19, 45, (uint64_t)&v17, 45, (uint64_t)&v15);
    if (!*a2)
      __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::DateInputType::setupLayoutParameters(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  (***(void (****)(WTF::StringImpl **__return_ptr))(a2 + 16))(&v10);
  v4 = v10;
  v10 = 0;
  v5 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2)
    {
LABEL_3:
      *(_DWORD *)v5 = v6;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v5, v3);
    v5 = v10;
    v10 = 0;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 != 2)
        goto LABEL_3;
      WTF::StringImpl::destroy(v5, v9);
    }
  }
LABEL_4:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::DateTimeLocalInputType::formControlType(WebCore::DateTimeLocalInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "datetime-local";
    v2[1] = 15;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::datetimelocal(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::datetimelocal(void)::name;
}

uint64_t WebCore::DateTimeLocalInputType::dateType(WebCore::DateTimeLocalInputType *this)
{
  return 2;
}

double WebCore::DateTimeLocalInputType::valueAsDate(WebCore::DateTimeLocalInputType *this)
{
  return NAN;
}

void WebCore::DateTimeLocalInputType::setValueAsDate(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void WebCore::DateTimeLocalInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v50[12] = 3;
  *(_QWORD *)v50 = 0;
  *(_WORD *)&v50[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v50, (uint64_t)&v48);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v6
    && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
      ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
      : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
        (_DWORD)v9))
  {
    v9 = v9;
    v10 = (uint64_t *)(v8 + 8);
    while (1)
    {
      v11 = *(v10 - 1);
      if (v11 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v9)
      {
        v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v12 = (const char *)WTF::numberToString();
  v13 = (uint64_t)v12;
  v14 = 0x100000000;
  if (v12)
    v14 = strlen(v12) | 0x100000000;
  WebCore::Decimal::fromString(v13, v14, (uint64_t)&v44);
  v15 = *v10;
  if (*v10)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v16, v17);
  if (v51)
  {
    v40 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v40, (uint64_t)&v46);
  }
  else
  {
    v46 = v44;
    v47 = v45;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v18
    && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
      ? (v20 = *(_QWORD *)(v18 + 40), LODWORD(v21) = *(_DWORD *)(v18 + 52))
      : (v20 = v18 + 32, LODWORD(v21) = v19 >> 5),
        (_DWORD)v21))
  {
    v21 = v21;
    v22 = (uint64_t *)(v20 + 8);
    while (1)
    {
      v23 = *(v22 - 1);
      if (v23 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v22 += 2;
      if (!--v21)
      {
        v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v24 = (const char *)WTF::numberToString();
  v25 = (uint64_t)v24;
  v26 = 0x100000000;
  if (v24)
    v26 = strlen(v24) | 0x100000000;
  WebCore::Decimal::fromString(v25, v26, (uint64_t)&v42);
  v27 = *v22;
  if (*v22)
  {
    v28 = *(_QWORD *)(v27 + 8);
    v29 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v28 = 0;
    v29 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v28, v29);
  if (v51)
  {
    v41 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v41, (uint64_t)&v44);
  }
  else
  {
    v44 = v42;
    v45 = v43;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v30
    && ((v31 = *(_DWORD *)(v30 + 4), (v31 & 1) != 0)
      ? (v32 = *(_QWORD *)(v30 + 40), LODWORD(v33) = *(_DWORD *)(v30 + 52))
      : (v32 = v30 + 32, LODWORD(v33) = v31 >> 5),
        (_DWORD)v33))
  {
    v33 = v33;
    v34 = (uint64_t *)(v32 + 8);
    while (1)
    {
      v35 = *(v34 - 1);
      if (v35 == WebCore::HTMLNames::stepAttr
        || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
        && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
      {
        break;
      }
      v34 += 2;
      if (!--v33)
      {
        v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v36 = *v34;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = *(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v37 = 0;
    v38 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::dateTimeLocalStepDescription, v37, v38, (uint64_t)v50);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  *(_OWORD *)(a3 + 24) = v46;
  *(_QWORD *)(a3 + 40) = v47;
  v39 = *(_DWORD *)&v50[12] & 0xFFFFFFFD;
  if ((*(_DWORD *)&v50[12] & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v50;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v50[16];
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v48) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v48;
    *(_QWORD *)(a3 + 88) = v49;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::dateTimeLocalStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v39 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

unsigned __int8 *WebCore::DateTimeLocalInputType::parseToDateComponents@<X0>(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::DateComponents::fromParsingDateTimeLocal(a1, a2, a3);
}

BOOL WebCore::DateTimeLocalInputType::isValidFormat(uint64_t a1, int a2)
{
  return (~a2 & 0xBBLL) == 0;
}

uint64_t *WebCore::DateTimeLocalInputType::sanitizeValue@<X0>(const WTF::String *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  int8x16_t v7[2];
  char v8;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if (!(_DWORD)v5)
      goto LABEL_7;
    result = (uint64_t *)WebCore::DateComponents::fromParsingDateTimeLocal(*(unsigned __int8 **)(v4 + 8), v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32), (uint64_t)v7);
    if (v8)
      return WebCore::DateComponents::toString(v7, 0, a2);
    v4 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
LABEL_7:
      *(_DWORD *)v4 += 2;
  }
  *a2 = v4;
  return result;
}

void WebCore::DateTimeLocalInputType::formatDateTimeFieldsState(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  _OWORD *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  _WORD *v43;
  int8x16_t *v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  int8x16_t *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  size_t v66;
  _BYTE *v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  char *v73;
  char *v74;
  _BYTE *v75;
  _BYTE *v76;
  size_t v77;
  _BYTE *v78;
  _BYTE *v79;
  size_t v80;
  int v81;
  _BYTE *v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  __int128 v88;
  char *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  char *v97;
  __int128 v98;
  char *v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int16 v106;
  _WORD *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  char *v113;
  int8x16_t v114;
  __int128 v115;
  __int128 v116;
  char *v117;
  char *v118;
  char *v119;
  __int16 v120;
  int v121;
  char *v122;
  unsigned int v123;
  _WORD *v124;
  unint64_t v125;
  _WORD *v126;
  uint64_t v127;
  uint64_t v128;
  _WORD *v129;
  WTF::StringImpl *v131;
  unsigned __int128 *v132;
  unsigned __int128 *v133;
  unsigned __int128 v134;
  char v135;
  unsigned __int128 *v136;
  unsigned __int128 *v137;
  unsigned __int128 v138;
  unsigned __int128 *v139;
  unsigned __int128 *v140;
  unsigned __int128 v141;
  char v142;
  char v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  uint64_t *v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  _BYTE v157[12];
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;

  *(_QWORD *)&v157[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 4)
    && *(_BYTE *)(a1 + 12)
    && *(_BYTE *)(a1 + 20)
    && *(_BYTE *)(a1 + 28)
    && *(_BYTE *)(a1 + 36)
    && *(_BYTE *)(a1 + 57))
  {
    v4 = *(_DWORD *)a1;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 16);
    v149 = (WTF::StringImpl *)0x400000030;
    v150 = v4;
    v147 = 0x200000030;
    v148 = v5;
    v145 = 0x200000030;
    v146 = v6;
    v155 = (uint64_t)&v149;
    v156 = v4;
    v153 = (uint64_t)&v147;
    v154 = v5;
    v151 = &v145;
    v152 = v6;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(&v144, (uint64_t)&v155, 45, (uint64_t)&v153, 45, (uint64_t)&v151);
    v7 = v144;
    if (v144)
    {
      if (*(_BYTE *)(a1 + 28) && *(_BYTE *)(a1 + 57))
      {
        v8 = *(_BYTE *)(a1 + 56) ? 12 : 0;
        if (*(_BYTE *)(a1 + 36))
        {
          v9 = 0;
          v10 = *(_DWORD *)(a1 + 32);
          v11 = v8 + *(_DWORD *)(a1 + 24) % 0xCu;
          v155 = 0x200000030;
          v156 = v11;
          v12 = v10;
          v153 = 0x200000030;
          v154 = v10;
          v13 = v11;
          do
          {
            ++v9;
            v14 = v13 > 9;
            v13 /= 0xAu;
          }
          while (v14);
          v15 = 0;
          do
          {
            ++v15;
            v14 = v12 > 9;
            v12 /= 0xAu;
          }
          while (v14);
          if (v9 <= 2)
            v9 = 2;
          if (v15 <= 2)
            v16 = 2;
          else
            v16 = v15;
          if (v16 < 0
            || ((v17 = __OFADD__(v16, 1), v18 = v16 + 1, !v17) ? (v19 = 0) : (v19 = 1),
                (v9 & 0x80000000) != 0 || (v19 & 1) != 0 || __OFADD__(v9, v18)))
          {
            v149 = 0;
          }
          else
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v9 + v18, 1, (unsigned __int8 *)&v155, v11, 58, (unsigned __int8 *)&v153, v10, &v149);
            v21 = v149;
            if (v149)
            {
              if (*(_BYTE *)(a1 + 52))
              {
                v22 = 0;
                *(_DWORD *)v7 += 2;
                *(_DWORD *)v21 += 2;
                v23 = *(unsigned __int8 *)(a1 + 44);
                v24 = *(_DWORD *)(a1 + 40);
                v25 = *(_DWORD *)(a1 + 48);
                v26 = v25;
                v155 = 0x200000030;
                if (v23)
                  v27 = v24;
                else
                  v27 = 0;
                v156 = v27;
                v153 = 0x300000030;
                v154 = v25;
                v28 = *((_DWORD *)v7 + 1);
                v29 = *((_DWORD *)v21 + 1);
                v30 = v27;
                do
                {
                  ++v22;
                  v14 = v30 > 9;
                  v30 /= 0xAu;
                }
                while (v14);
                v31 = 0;
                do
                {
                  ++v31;
                  v14 = v26 > 9;
                  v26 /= 0xAu;
                }
                while (v14);
                if (v22 <= 2)
                  v22 = 2;
                if (v31 <= 3)
                  v32 = 3;
                else
                  v32 = v31;
                if ((v32 & 0x80000000) == 0)
                {
                  v17 = __OFADD__(v32, 1);
                  v33 = v32 + 1;
                  v34 = v17;
                  if ((v22 & 0x80000000) == 0 && !v34)
                  {
                    v17 = __OFADD__(v22, v33);
                    v35 = v22 + v33;
                    if (!v17)
                    {
                      v17 = __OFADD__(v35, 1);
                      v36 = v35 + 1;
                      v37 = v17;
                      if ((v29 & 0x80000000) == 0 && !v37)
                      {
                        v17 = __OFADD__(v29, v36);
                        v38 = v29 + v36;
                        if (!v17)
                        {
                          v17 = __OFADD__(v38, 1);
                          v39 = v38 + 1;
                          v40 = v17;
                          if ((v28 & 0x80000000) == 0 && !v40)
                          {
                            v41 = (v28 + v39);
                            if (!__OFADD__(v28, v39))
                            {
                              if ((*((_BYTE *)v7 + 16) & 4) == 0 || (*((_BYTE *)v21 + 16) & 4) == 0)
                              {
                                if ((_DWORD)v41)
                                {
                                  if (v41 <= 0x7FFFFFEF)
                                  {
                                    WTF::tryFastCompactMalloc((WTF *)(2 * v41 + 20));
                                    v42 = v151;
                                    if (v151)
                                    {
                                      v43 = (_WORD *)v151 + 10;
                                      *(_DWORD *)v151 = 2;
                                      *((_DWORD *)v42 + 1) = v41;
                                      v42[1] = (uint64_t)v42 + 20;
                                      *((_DWORD *)v42 + 4) = 0;
                                      v44 = (int8x16_t *)*((_QWORD *)v7 + 1);
                                      v45 = *((unsigned int *)v7 + 1);
                                      if ((*((_BYTE *)v7 + 16) & 4) != 0)
                                      {
                                        v62 = (char *)&v43[v45];
                                        if (v45 >= 0x40)
                                        {
                                          v63 = (char *)&v43[v45 & 0xFFFFFFC0];
                                          v88 = 0uLL;
                                          v89 = (char *)v42 + 20;
                                          do
                                          {
                                            v158.val[0] = *v44;
                                            v90 = v44[1];
                                            v161.val[0] = v44[2];
                                            v91 = v44[3];
                                            v44 += 4;
                                            v92 = v91;
                                            v161.val[1] = 0uLL;
                                            v164.val[0] = v90;
                                            v158.val[1] = 0uLL;
                                            v93 = v89;
                                            vst2q_s8(v93, v158);
                                            v93 += 32;
                                            v164.val[1] = 0uLL;
                                            vst2q_s8(v93, v164);
                                            v94 = v89 + 64;
                                            vst2q_s8(v94, v161);
                                            v95 = v89 + 96;
                                            vst2q_s8(v95, *(int8x16x2_t *)(&v88 - 1));
                                            v89 += 128;
                                          }
                                          while (v89 != v63);
                                        }
                                        else
                                        {
                                          v63 = (char *)v42 + 20;
                                        }
                                        while (v63 != v62)
                                        {
                                          v96 = v44->u8[0];
                                          v44 = (int8x16_t *)((char *)v44 + 1);
                                          *(_WORD *)v63 = v96;
                                          v63 += 2;
                                        }
                                      }
                                      else if ((_DWORD)v45 == 1)
                                      {
                                        *v43 = v44->i16[0];
                                      }
                                      else if ((_DWORD)v45)
                                      {
                                        memcpy((char *)v42 + 20, v44, 2 * v45);
                                      }
                                      v97 = (char *)&v43[*((unsigned int *)v7 + 1)];
                                      *(_WORD *)v97 = 84;
                                      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v97 + 2, (uint64_t)v21, 58, (unsigned __int8 *)&v155, v27, 46, (unsigned __int8 *)&v153, v25);
                                      goto LABEL_159;
                                    }
                                  }
                                  goto LABEL_235;
                                }
LABEL_209:
                                v42 = (uint64_t *)MEMORY[0x1E0CBEF70];
                                *MEMORY[0x1E0CBEF70] += 2;
LABEL_159:
                                *a2 = v42;
LABEL_195:
                                if (*(_DWORD *)v21 == 2)
                                  WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v20);
                                else
                                  *(_DWORD *)v21 -= 2;
                                if (*(_DWORD *)v7 == 2)
                                  WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v20);
                                else
                                  *(_DWORD *)v7 -= 2;
                                v131 = v149;
                                v149 = 0;
                                if (v131)
                                {
                                  if (*(_DWORD *)v131 == 2)
                                    WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v20);
                                  else
                                    *(_DWORD *)v131 -= 2;
                                }
                                if (v144)
                                {
                                  if (*(_DWORD *)v144 == 2)
                                    WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v20);
                                  else
                                    *(_DWORD *)v144 -= 2;
                                }
                                return;
                              }
                              if (!(_DWORD)v41)
                                goto LABEL_209;
                              if ((v41 & 0x80000000) == 0)
                              {
                                WTF::tryFastCompactMalloc((WTF *)(v41 + 20));
                                v42 = v151;
                                if (v151)
                                {
                                  v64 = (char *)v151 + 20;
                                  *(_DWORD *)v151 = 2;
                                  *((_DWORD *)v42 + 1) = v41;
                                  v42[1] = (uint64_t)v42 + 20;
                                  *((_DWORD *)v42 + 4) = 4;
                                  v65 = (_BYTE *)*((_QWORD *)v7 + 1);
                                  v66 = *((unsigned int *)v7 + 1);
                                  if ((*((_BYTE *)v7 + 16) & 4) != 0)
                                  {
                                    if ((_DWORD)v66)
                                    {
                                      if ((_DWORD)v66 == 1)
                                        *v64 = *v65;
                                      else
                                        memcpy((char *)v42 + 20, v65, v66);
                                    }
                                  }
                                  else
                                  {
                                    if (v66 < 0x10)
                                    {
                                      v132 = (unsigned __int128 *)((char *)v42 + 20);
                                    }
                                    else
                                    {
                                      v132 = (unsigned __int128 *)&v64[v66 & 0xFFFFFFF0];
                                      v133 = (unsigned __int128 *)((char *)v42 + 20);
                                      do
                                      {
                                        v134 = (unsigned __int128)vld2q_s8(v65);
                                        v65 += 32;
                                        *v133++ = v134;
                                      }
                                      while (v133 != v132);
                                    }
                                    while (v132 != (unsigned __int128 *)&v64[v66])
                                    {
                                      v135 = *v65;
                                      v65 += 2;
                                      *(_BYTE *)v132 = v135;
                                      v132 = (unsigned __int128 *)((char *)v132 + 1);
                                    }
                                  }
                                  v67 = &v64[*((unsigned int *)v7 + 1)];
                                  *v67 = 84;
                                  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v67 + 1, (uint64_t)v21, 58, (uint64_t)&v155, v27, 46, (uint64_t)&v153, v25);
                                  goto LABEL_159;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_235:
                *a2 = 0;
                __break(0xC471u);
                goto LABEL_243;
              }
              if (*(_BYTE *)(a1 + 44))
              {
                v47 = 0;
                *(_DWORD *)v7 += 2;
                v48 = *((_DWORD *)v21 + 1);
                *(_DWORD *)v21 += 2;
                v49 = *(_DWORD *)(a1 + 40);
                v50 = *((_DWORD *)v7 + 1);
                v51 = v49;
                do
                {
                  ++v47;
                  v14 = v51 > 9;
                  v51 /= 0xAu;
                }
                while (v14);
                if (v47 <= 2)
                  v47 = 2;
                if ((v47 & 0x80000000) != 0)
                  goto LABEL_238;
                v17 = __OFADD__(v47, 1);
                v52 = v47 + 1;
                v53 = v17;
                if (v48 < 0)
                  goto LABEL_238;
                if (v53)
                  goto LABEL_238;
                v17 = __OFADD__(v48, v52);
                v54 = v48 + v52;
                if (v17)
                  goto LABEL_238;
                v17 = __OFADD__(v54, 1);
                v55 = v54 + 1;
                v56 = v17;
                if (v50 < 0)
                  goto LABEL_238;
                if (v56)
                  goto LABEL_238;
                v57 = (v50 + v55);
                if (__OFADD__(v50, v55))
                  goto LABEL_238;
                if ((*((_BYTE *)v7 + 16) & 4) != 0 && (*((_BYTE *)v21 + 16) & 4) != 0)
                {
                  if ((_DWORD)v57)
                  {
                    if ((v57 & 0x80000000) == 0)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(v57 + 20));
                      v58 = v155;
                      if (v155)
                      {
                        v75 = (_BYTE *)(v155 + 20);
                        *(_DWORD *)v155 = 2;
                        *(_DWORD *)(v58 + 4) = v57;
                        *(_QWORD *)(v58 + 8) = v58 + 20;
                        *(_DWORD *)(v58 + 16) = 4;
                        v76 = (_BYTE *)*((_QWORD *)v7 + 1);
                        v77 = *((unsigned int *)v7 + 1);
                        if ((*((_BYTE *)v7 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v77)
                          {
                            if ((_DWORD)v77 == 1)
                              *v75 = *v76;
                            else
                              memcpy((void *)(v58 + 20), v76, v77);
                          }
                        }
                        else
                        {
                          if (v77 < 0x10)
                          {
                            v136 = (unsigned __int128 *)(v58 + 20);
                          }
                          else
                          {
                            v136 = (unsigned __int128 *)&v75[v77 & 0xFFFFFFF0];
                            v137 = (unsigned __int128 *)(v58 + 20);
                            do
                            {
                              v138 = (unsigned __int128)vld2q_s8(v76);
                              v76 += 32;
                              *v137++ = v138;
                            }
                            while (v137 != v136);
                          }
                          while (v136 != (unsigned __int128 *)&v75[v77])
                          {
                            v142 = *v76;
                            v76 += 2;
                            *(_BYTE *)v136 = v142;
                            v136 = (unsigned __int128 *)((char *)v136 + 1);
                          }
                        }
                        v78 = &v75[*((unsigned int *)v7 + 1)];
                        *v78 = 84;
                        v79 = v78 + 1;
                        v20 = (_OWORD *)*((_QWORD *)v21 + 1);
                        v80 = *((unsigned int *)v21 + 1);
                        if ((*((_BYTE *)v21 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v80)
                          {
                            if ((_DWORD)v80 == 1)
                              *v79 = *(_BYTE *)v20;
                            else
                              memcpy(v79, v20, v80);
                          }
                        }
                        else
                        {
                          if (v80 < 0x10)
                          {
                            v139 = (unsigned __int128 *)v79;
                          }
                          else
                          {
                            v139 = (unsigned __int128 *)&v79[v80 & 0xFFFFFFF0];
                            v140 = (unsigned __int128 *)v79;
                            do
                            {
                              v141 = (unsigned __int128)vld2q_s8((const char *)v20);
                              v20 += 2;
                              *v140++ = v141;
                            }
                            while (v140 != v139);
                          }
                          while (v139 != (unsigned __int128 *)&v79[v80])
                          {
                            v143 = *(_BYTE *)v20;
                            v20 = (_OWORD *)((char *)v20 + 2);
                            *(_BYTE *)v139 = v143;
                            v139 = (unsigned __int128 *)((char *)v139 + 1);
                          }
                        }
                        v81 = 0;
                        v82 = &v79[*((unsigned int *)v21 + 1)];
                        *v82 = 58;
                        v83 = v49;
                        do
                        {
                          --v81;
                          v14 = v83 > 9;
                          v83 /= 0xAu;
                        }
                        while (v14);
                        v84 = v82 + 1;
                        if (-v81 != 1 && v81 != 0)
                        {
                          v85 = 0;
                        }
                        else
                        {
                          v85 = (v81 + 2);
                          if (v85 <= 1)
                            v86 = 1;
                          else
                            v86 = v85;
                          memset(v84, 48, v86);
                        }
                        v87 = 0;
                        do
                        {
                          v157[v87--] = (v49 % 0xA) | 0x30;
                          v14 = v49 > 9;
                          v49 /= 0xAu;
                        }
                        while (v14);
                        if (v87 + 14 <= 13)
                          memcpy(&v84[v85], &v157[v87 + 1], -v87);
                        goto LABEL_194;
                      }
                    }
                    goto LABEL_238;
                  }
                }
                else if ((_DWORD)v57)
                {
                  if (v57 <= 0x7FFFFFEF)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(2 * v57 + 20));
                    v58 = v155;
                    if (v155)
                    {
                      v59 = (_WORD *)(v155 + 20);
                      *(_DWORD *)v155 = 2;
                      *(_DWORD *)(v58 + 4) = v57;
                      *(_QWORD *)(v58 + 8) = v58 + 20;
                      *(_DWORD *)(v58 + 16) = 0;
                      v60 = (int8x16_t *)*((_QWORD *)v7 + 1);
                      v61 = *((unsigned int *)v7 + 1);
                      if ((*((_BYTE *)v7 + 16) & 4) != 0)
                      {
                        v73 = (char *)&v59[v61];
                        if (v61 >= 0x40)
                        {
                          v74 = (char *)&v59[v61 & 0xFFFFFFC0];
                          v98 = 0uLL;
                          v99 = (char *)(v58 + 20);
                          do
                          {
                            v159.val[0] = *v60;
                            v100 = v60[1];
                            v162.val[0] = v60[2];
                            v101 = v60[3];
                            v60 += 4;
                            v102 = v101;
                            v162.val[1] = 0uLL;
                            v165.val[0] = v100;
                            v159.val[1] = 0uLL;
                            v103 = v99;
                            vst2q_s8(v103, v159);
                            v103 += 32;
                            v165.val[1] = 0uLL;
                            vst2q_s8(v103, v165);
                            v104 = v99 + 64;
                            vst2q_s8(v104, v162);
                            v105 = v99 + 96;
                            vst2q_s8(v105, *(int8x16x2_t *)(&v98 - 1));
                            v99 += 128;
                          }
                          while (v99 != v74);
                        }
                        else
                        {
                          v74 = (char *)(v58 + 20);
                        }
                        while (v74 != v73)
                        {
                          v106 = v60->u8[0];
                          v60 = (int8x16_t *)((char *)v60 + 1);
                          *(_WORD *)v74 = v106;
                          v74 += 2;
                        }
                      }
                      else if ((_DWORD)v61 == 1)
                      {
                        *v59 = v60->i16[0];
                      }
                      else if ((_DWORD)v61)
                      {
                        memcpy((void *)(v58 + 20), v60, 2 * v61);
                      }
                      v107 = &v59[*((unsigned int *)v7 + 1)];
                      *v107 = 84;
                      v108 = (char *)(v107 + 1);
                      v20 = (_OWORD *)*((_QWORD *)v21 + 1);
                      v109 = *((unsigned int *)v21 + 1);
                      if ((*((_BYTE *)v21 + 16) & 4) != 0)
                      {
                        v110 = &v108[2 * v109];
                        if (v109 >= 0x40)
                        {
                          v111 = &v108[2 * (v109 & 0xFFFFFFC0)];
                          v112 = 0uLL;
                          v113 = v108;
                          do
                          {
                            v160.val[0] = (int8x16_t)*v20;
                            v114 = *((int8x16_t *)v20 + 1);
                            v163.val[0] = (int8x16_t)v20[2];
                            v115 = v20[3];
                            v20 += 4;
                            v116 = v115;
                            v163.val[1] = 0uLL;
                            v166.val[0] = v114;
                            v160.val[1] = 0uLL;
                            v117 = v113;
                            vst2q_s8(v117, v160);
                            v117 += 32;
                            v166.val[1] = 0uLL;
                            vst2q_s8(v117, v166);
                            v118 = v113 + 64;
                            vst2q_s8(v118, v163);
                            v119 = v113 + 96;
                            vst2q_s8(v119, *(int8x16x2_t *)(&v112 - 1));
                            v113 += 128;
                          }
                          while (v113 != v111);
                        }
                        else
                        {
                          v111 = v108;
                        }
                        while (v111 != v110)
                        {
                          v120 = *(unsigned __int8 *)v20;
                          v20 = (_OWORD *)((char *)v20 + 1);
                          *(_WORD *)v111 = v120;
                          v111 += 2;
                        }
                      }
                      else if ((_DWORD)v109 == 1)
                      {
                        *(_WORD *)v108 = *(_WORD *)v20;
                      }
                      else if ((_DWORD)v109)
                      {
                        memcpy(v108, v20, 2 * v109);
                      }
                      v121 = 0;
                      v122 = &v108[2 * *((unsigned int *)v21 + 1)];
                      *(_WORD *)v122 = 58;
                      v123 = v49;
                      do
                      {
                        --v121;
                        v14 = v123 > 9;
                        v123 /= 0xAu;
                      }
                      while (v14);
                      v124 = v122 + 2;
                      if (-v121 != 1 && v121 != 0)
                      {
                        v127 = 0;
                      }
                      else
                      {
                        v125 = (v121 + 2);
                        if (v125 <= 1)
                          v125 = 1;
                        v126 = v124;
                        do
                        {
                          *v126++ = 48;
                          --v125;
                        }
                        while (v125);
                        v127 = (v121 + 2);
                      }
                      v128 = 0;
                      do
                      {
                        v157[v128--] = (v49 % 0xA) | 0x30;
                        v14 = v49 > 9;
                        v49 /= 0xAu;
                      }
                      while (v14);
                      if (v128 + 14 <= 13)
                      {
                        v129 = &v124[v127];
                        do
                          *v129++ = v157[v128 + 1];
                        while (!__CFADD__(v128++, 1));
                      }
                      goto LABEL_194;
                    }
                  }
LABEL_238:
                  *a2 = 0;
                  __break(0xC471u);
                  JUMPOUT(0x195B976D0);
                }
                v58 = MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
LABEL_194:
                *a2 = v58;
                goto LABEL_195;
              }
              v68 = *((_DWORD *)v7 + 1);
              *(_DWORD *)v7 += 2;
              v69 = *((_DWORD *)v21 + 1);
              *(_DWORD *)v21 += 2;
              if ((v69 & 0x80000000) == 0)
              {
                v17 = __OFADD__(v69, 1);
                v70 = v69 + 1;
                v71 = v17;
                if ((v68 & 0x80000000) == 0 && !v71 && !__OFADD__(v68, v70))
                {
                  if ((*((_BYTE *)v7 + 16) & 4) != 0)
                    v72 = (*((unsigned __int8 *)v21 + 16) >> 2) & 1;
                  else
                    v72 = 0;
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v68 + v70), v72, (uint64_t)v7, 84, (uint64_t)v21, a2);
                  if (*a2)
                    goto LABEL_195;
                  goto LABEL_242;
                }
              }
LABEL_241:
              *a2 = 0;
LABEL_242:
              __break(0xC471u);
LABEL_243:
              JUMPOUT(0x195B976B8);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x195B976C4);
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
    __break(1u);
    goto LABEL_241;
  }
  v46 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v46 += 2;
  *a2 = v46;
}

WTF::StringImpl *WebCore::DateTimeLocalInputType::setupLayoutParameters(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 a4)
{
  BOOL v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[12];
  int v31;
  WTF::StringImpl *v32[3];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  if (*a3)
  {
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_21;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(v32, a1, 1);
  v28 = v33;
  v29 = v34;
  v27 = 1;
  v25 = 1000;
  v26 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v28, (const WebCore::Decimal *)&v25, (uint64_t)v30);
  if (v31 != 3)
  {
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_21;
  }
  v21 = v35;
  v22 = v36;
  v20 = 1;
  v18 = 1000;
  v19 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v21, (const WebCore::Decimal *)&v18, (uint64_t)v23);
  v7 = v24 == 3;
  *(_BYTE *)(a2 + 24) = v24 != 3;
  if (!v7)
    goto LABEL_21;
  if (a3[1])
    goto LABEL_21;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 208))(v32, a1, 1, a4);
  v28 = v33;
  v29 = v34;
  v27 = 1;
  v25 = 60000;
  v26 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v28, (const WebCore::Decimal *)&v25, (uint64_t)v30);
  if (v31 != 3
    || (v21 = v35,
        v22 = v36,
        v20 = 1,
        v18 = 60000,
        v19 = 0,
        a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v21, (const WebCore::Decimal *)&v18, (uint64_t)v23), v24 != 3))
  {
LABEL_21:
    (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(**(_QWORD **)(a2 + 16) + 40))(v32, a4);
    v16 = v32[0];
    v32[0] = 0;
    v10 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v16;
    if (!v10)
      goto LABEL_11;
    v17 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v15);
      v10 = v32[0];
      v32[0] = 0;
      if (!v10)
        goto LABEL_11;
      v17 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
LABEL_18:
        WTF::StringImpl::destroy(v10, v14);
        goto LABEL_11;
      }
    }
    *(_DWORD *)v10 = v17;
    goto LABEL_11;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, double))(**(_QWORD **)(a2 + 16) + 48))(v32, a4.n128_f64[0]);
  v9 = v32[0];
  v32[0] = 0;
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v9;
  if (!v10)
    goto LABEL_11;
  v11 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 != 2)
    goto LABEL_10;
  WTF::StringImpl::destroy(v10, v8);
  v10 = v32[0];
  v32[0] = 0;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_10:
      *(_DWORD *)v10 = v11;
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a2 + 8);
  *(WTF::StringImpl **)(a2 + 8) = v32[0];
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::DirectoryFileListCreator::start(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v4 = a2;
  v5 = result;
  v6 = *((_QWORD *)result + 1);
  v29 = result;
  do
    v7 = __ldaxr((unsigned int *)result);
  while (__stlxr(v7 + 1, (unsigned int *)result));
  v30 = result;
  if (a2)
    *(_DWORD *)(a2 + 24) += 2;
  v32 = 0;
  v33 = 0;
  v8 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v8)
  {
    if (v8 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v9 = 24 * v8;
    v10 = WTF::fastMalloc((WTF *)(24 * v8));
    v11 = (v9 & 0xFFFFFFF8) / 0x18;
    LODWORD(v33) = v11;
    v32 = v10;
    v12 = *((_DWORD *)a3 + 3);
    if (v12)
    {
      v13 = *a3;
      v14 = v13 + 24 * v12;
      do
      {
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        v15 = v13 + 16;
        WTF::String::isolatedCopy();
        v17 = HIDWORD(v33) + 1;
        v18 = v32;
        v19 = (WTF::StringImpl **)(v32 + 24 * HIDWORD(v33));
        v20 = v34;
        v34 = 0;
        *v19 = v20;
        v21 = v35;
        v35 = 0;
        v19[1] = v21;
        v22 = v36;
        v36 = 0;
        v19[2] = v22;
        HIDWORD(v33) = v17;
        v23 = v36;
        v36 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v16);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = v35;
        v35 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v16);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v34;
        v34 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v16);
          else
            *(_DWORD *)v25 -= 2;
        }
        v13 = v15 + 8;
      }
      while (v13 != v14);
      v5 = v30;
      v4 = a2;
      v11 = v33;
    }
    else
    {
      v18 = v10;
      v17 = 0;
    }
  }
  else
  {
    v17 = 0;
    v11 = 0;
    v18 = 0;
  }
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v26 = off_1E33B2220;
  *(_QWORD *)(v26 + 8) = v29;
  *(_QWORD *)(v26 + 16) = v5;
  *(_QWORD *)(v26 + 24) = v4;
  *(_QWORD *)(v26 + 32) = v18;
  v32 = 0;
  v33 = 0;
  *(_DWORD *)(v26 + 40) = v11;
  *(_DWORD *)(v26 + 44) = v17;
  v34 = (WTF::StringImpl *)v26;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 32))(v6, &v34);
  v28 = v34;
  v34 = 0;
  if (v28)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v32, v27);
  return 0;
}

uint64_t *WebCore::EmailInputType::formControlType(WebCore::EmailInputType *this)
{
  return &WebCore::emailAtomData;
}

uint64_t WebCore::EmailInputType::typeMismatchFor(WebCore::EmailInputType *this, const WTF::String *a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;

  if (!*(_QWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v4)
    goto LABEL_70;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(v4 + 40);
    LODWORD(v7) = *(_DWORD *)(v4 + 52);
    if (!(_DWORD)v7)
    {
LABEL_70:
      if ((byte_1ECE833D1 & 1) == 0)
      {
        JSC::Yarr::RegularExpression::RegularExpression();
        byte_1ECE833D1 = 1;
      }
      if (JSC::Yarr::RegularExpression::match())
        v34 = 0;
      else
        v34 = v3 == 0;
      return !v34;
    }
  }
  else
  {
    v6 = (uint64_t *)(v4 + 32);
    LODWORD(v7) = v5 >> 5;
    if (!(_DWORD)v7)
      goto LABEL_70;
  }
  v7 = v7;
  while (1)
  {
    v8 = *v6;
    if (*v6 == WebCore::HTMLNames::multipleAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v7)
      goto LABEL_70;
  }
  result = WTF::String::splitAllowingEmptyEntries();
  v10 = v39;
  if (!v40)
  {
    result = 0;
    if (!v39)
      return result;
LABEL_82:
    v35 = result;
    WTF::fastFree(v10, v9);
    return v35;
  }
  v11 = *(_QWORD *)v39;
  if (!*(_QWORD *)v39)
  {
    v9 = 0;
    v15 = 0;
    goto LABEL_58;
  }
  v12 = *(unsigned int *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(unsigned int *)(v11 + 4);
  v15 = v14;
  if (((v12 >> 2) & 1) == 0)
  {
    if ((_DWORD)v14)
    {
      v26 = 0;
      v9 = (unsigned __int16 *)v13;
      while (1)
      {
        v27 = *v9;
        v18 = v27 > 0x20;
        v28 = (1 << v27) & 0x100003600;
        if (v18 || v28 == 0)
          break;
        ++v26;
        ++v9;
        if (v14 == v26)
          goto LABEL_80;
      }
      if ((_DWORD)v14 != 1)
      {
        v30 = (v14 - 1);
        while (v30 < v14)
        {
          v31 = *(unsigned __int16 *)(v13 + 2 * v30);
          v18 = v31 > 0x20;
          v32 = (1 << v31) & 0x100003600;
          if (!v18 && v32 != 0)
          {
            if ((_DWORD)--v30)
              continue;
          }
          if ((_DWORD)v26 || (_DWORD)v30 != (_DWORD)v14 - 1)
            goto LABEL_68;
          goto LABEL_57;
        }
        goto LABEL_83;
      }
      if ((_DWORD)v26)
      {
        LODWORD(v30) = 0;
LABEL_68:
        v25 = (v30 - v26 + 1);
        v13 = v14 - v26;
        if (v14 - v26 < v25)
          goto LABEL_83;
        goto LABEL_59;
      }
    }
    goto LABEL_57;
  }
  if (!(_DWORD)v14)
    goto LABEL_57;
  v16 = 0;
  while (1)
  {
    v17 = *(unsigned __int8 *)(v13 + v16);
    v18 = v17 > 0x20;
    v19 = (1 << v17) & 0x100003600;
    if (v18 || v19 == 0)
      break;
    if (v14 == ++v16)
      goto LABEL_80;
  }
  if ((_DWORD)v14 != 1)
  {
    v21 = (v14 - 1);
    while (v21 < v14)
    {
      v22 = *(unsigned __int8 *)(v13 + v21);
      v18 = v22 > 0x20;
      v23 = (1 << v22) & 0x100003600;
      if (!v18 && v23 != 0)
      {
        if ((_DWORD)--v21)
          continue;
      }
      if (!(_DWORD)v16 && (_DWORD)v21 == (_DWORD)v14 - 1)
        goto LABEL_57;
      goto LABEL_37;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (!(_DWORD)v16)
  {
LABEL_57:
    v9 = (unsigned __int16 *)v13;
LABEL_58:
    LODWORD(v25) = v15;
    goto LABEL_59;
  }
  LODWORD(v21) = 0;
LABEL_37:
  if (v14 - v16 < (v21 - v16 + 1))
    goto LABEL_83;
  v9 = (unsigned __int16 *)(v13 + v16);
  LODWORD(v25) = v21 - v16 + 1;
LABEL_59:
  if ((_DWORD)v25)
  {
    if ((byte_1ECE833D1 & 1) == 0)
    {
      JSC::Yarr::RegularExpression::RegularExpression();
      byte_1ECE833D1 = 1;
    }
    JSC::Yarr::RegularExpression::match();
    result = 1;
  }
  else
  {
LABEL_80:
    result = 1;
  }
  v13 = v40;
  v10 = v39;
LABEL_84:
  v36 = 8 * v13;
  do
  {
    v37 = *(WTF::StringImpl **)v10;
    *(_QWORD *)v10 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        v38 = result;
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v9);
        result = v38;
      }
      else
      {
        *(_DWORD *)v37 -= 2;
      }
    }
    v10 = (WTF *)((char *)v10 + 8);
    v36 -= 8;
  }
  while (v36);
  v10 = v39;
  if (v39)
    goto LABEL_82;
  return result;
}

uint64_t WebCore::EmailInputType::typeMismatch(WebCore::EmailInputType *this)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD **)(v2 + 8);
  else
    v3 = 0;
  v4 = (_DWORD *)v3[30];
  if (v4[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v16);
    goto LABEL_22;
  }
  v5 = (WTF::StringImpl *)v3[27];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v16 = v5;
    goto LABEL_22;
  }
  v6 = v3[13];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_8:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_8;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v10)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v16);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v16);
  if (!v16)
  {
    v16 = 0;
    v4 = (_DWORD *)v3[30];
    goto LABEL_18;
  }
LABEL_22:
  v13 = WebCore::EmailInputType::typeMismatchFor(this, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v13;
}

void WebCore::EmailInputType::typeMismatchText(WebCore::EmailInputType *this@<X0>, uint64_t a1@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(uint64_t **)(v2 + 40);
      LODWORD(v5) = *(_DWORD *)(v2 + 52);
      if (!(_DWORD)v5)
        goto LABEL_12;
    }
    else
    {
      v4 = (uint64_t *)(v2 + 32);
      LODWORD(v5) = v3 >> 5;
      if (!(_DWORD)v5)
        goto LABEL_12;
    }
    v5 = v5;
    do
    {
      v6 = *v4;
      if (*v4 == WebCore::HTMLNames::multipleAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
      {
        break;
      }
      v4 += 2;
      --v5;
    }
    while (v5);
  }
LABEL_12:
  WebCore::validationMessageTypeMismatchForEmailText(a1);
}

uint64_t WebCore::EmailInputType::supportsSelectionAPI(WebCore::EmailInputType *this)
{
  return 0;
}

WebCore::EmailInputType *WebCore::EmailInputType::attributeChanged(WebCore::EmailInputType *this, const WebCore::QualifiedName *a2)
{
  WebCore::EmailInputType *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::HTMLTextFormControlElement *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != WebCore::HTMLNames::multipleAttr)
    goto LABEL_35;
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = *(_DWORD **)(v6 + 240);
  if (v7[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v7, &v27);
    goto LABEL_23;
  }
  v8 = *(WTF::StringImpl **)(v6 + 216);
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    v27 = v8;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(v6 + 104);
  if (!v9)
    goto LABEL_17;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_9;
LABEL_17:
    v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_17;
LABEL_9:
  v12 = v12;
  v13 = (_QWORD *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_18:
  if (*v13)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 296))(&v27);
    if (v27)
      goto LABEL_23;
    v27 = 0;
    v7 = *(_DWORD **)(v6 + 240);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 64))(&v27);
LABEL_23:
  WebCore::EmailInputType::sanitizeValue(v2, &v27, &v28);
  v16 = v28;
  if (v28)
    *(_DWORD *)v28 += 2;
  v17 = *(WTF::StringImpl **)(v6 + 216);
  *(_QWORD *)(v6 + 216) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_WORD *)(v6 + 232) &= ~0x100u;
  WebCore::ValidatedFormListedElement::updateValidity(v6 + 112);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  this = v27;
  v27 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WebCore::EmailInputType *)WTF::StringImpl::destroy(this, v18);
    else
      *(_DWORD *)this -= 2;
  }
  v3 = *(_QWORD *)a2;
LABEL_35:
  if (v3 == WebCore::HTMLNames::valueAttr || v3 == WebCore::HTMLNames::placeholderAttr)
  {
    v21 = *((_QWORD *)v2 + 3);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        if ((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
          && (*(_BYTE *)(v22 + 168) & 2) == 0)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::EmailInputType *))(*(_QWORD *)v2 + 272))(&v28, v2);
          WebCore::HTMLTextFormControlElement::setInnerTextValue((WebCore::HTMLTextFormControlElement *)v22, &v28);
          v24 = v28;
          v28 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *((_QWORD *)v2 + 3);
          if (v25)
            v26 = *(WebCore::HTMLTextFormControlElement **)(v25 + 8);
          else
            v26 = 0;
          return (WebCore::EmailInputType *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v26);
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::EmailInputType::sanitizeValue@<X0>(WebCore::EmailInputType *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v5;
  int v6;
  unint64_t v7;
  int v8;
  int16x8_t *v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  int16x8_t *v38;
  int v39;
  unint64_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int16x8_t *v52;
  int v53;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned int v58;
  size_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v71;
  WTF::StringImpl *v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v78;
  void *v80;
  int v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  char v87;
  WTF *v88;
  int v89;
  unsigned int v90;
  WTF::StringImpl *v91;

  v5 = *a2;
  if (!*a2)
  {
    v91 = 0;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)v5;
  v7 = *((unsigned int *)v5 + 1);
  *(_DWORD *)v5 += 2;
  v8 = *((_DWORD *)v5 + 4);
  v9 = (int16x8_t *)*((_QWORD *)v5 + 1);
  v91 = v5;
  if ((v8 & 4) != 0)
  {
    if (v7 < 0x10)
    {
      if (!(_DWORD)v7)
        goto LABEL_10;
      v37 = v7;
      v38 = v9;
      while (1)
      {
        v39 = v38->u8[0];
        if (v39 == 10 || v39 == 13)
          goto LABEL_112;
        v38 = (int16x8_t *)((char *)v38 + 1);
        if (!--v37)
          goto LABEL_10;
      }
    }
    v10 = 0;
    v11 = 0uLL;
    v12.i64[0] = 0xD0D0D0D0D0D0D0DLL;
    v12.i64[1] = 0xD0D0D0D0D0D0D0DLL;
    v13.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v13.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    do
    {
      v11 = vorrq_s8(v11, vorrq_s8(vceqq_s8((int8x16_t)v9[v10], v12), vceqq_s8((int8x16_t)v9[v10], v13)));
      v14 = v10 * 16 + 31;
      ++v10;
    }
    while (v14 < v7);
    if ((v7 & 0xFFFFFFF0) < v7)
    {
      v15.i64[0] = 0xD0D0D0D0D0D0D0DLL;
      v15.i64[1] = 0xD0D0D0D0D0D0D0DLL;
      v16.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v16.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      v11 = vorrq_s8(v11, vorrq_s8(vceqq_s8(*(int8x16_t *)((char *)&v9[-1] + v7), v15), vceqq_s8(*(int8x16_t *)((char *)&v9[-1] + v7), v16)));
    }
    v11.i8[0] = vmaxvq_u8((uint8x16_t)v11);
  }
  else
  {
    if (v7 < 8)
    {
      if (!(_DWORD)v7)
        goto LABEL_10;
      v51 = 2 * v7;
      v52 = v9;
      while (1)
      {
        v53 = v52->u16[0];
        if (v53 == 10 || v53 == 13)
          goto LABEL_112;
        v52 = (int16x8_t *)((char *)v52 + 2);
        v51 -= 2;
        if (!v51)
          goto LABEL_10;
      }
    }
    v11 = 0uLL;
    v41 = 7;
    v42.i64[0] = 0xD000D000D000DLL;
    v42.i64[1] = 0xD000D000D000DLL;
    v43.i64[0] = 0xA000A000A000ALL;
    v43.i64[1] = 0xA000A000A000ALL;
    v44 = v9;
    do
    {
      v45 = *v44++;
      v11 = vorrq_s8(v11, vorrq_s8((int8x16_t)vceqq_s16(v45, v42), (int8x16_t)vceqq_s16(v45, v43)));
      v41 += 8;
    }
    while (v41 < v7);
    if ((v7 & 0xFFFFFFF8) < v7)
    {
      v46.i64[0] = 0xD000D000D000DLL;
      v46.i64[1] = 0xD000D000D000DLL;
      v47.i64[0] = 0xA000A000A000ALL;
      v47.i64[1] = 0xA000A000A000ALL;
      v11 = vorrq_s8(v11, vorrq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v9 + 2 * v7 - 16), v46), (int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v9 + 2 * v7 - 16), v47)));
    }
    v11.i16[0] = vmaxvq_u16((uint16x8_t)v11);
  }
  if (!v11.i32[0])
    goto LABEL_10;
LABEL_112:
  if ((v8 & 4) == 0)
  {
    v55 = 0;
    v56 = 0;
    v57 = (unsigned __int16 *)v9 + v7;
    while (1)
    {
      v58 = v9->u16[v55];
      if (v58 <= 0xD && (v58 == 10 || v58 == 13))
        break;
      v56 -= 2;
      ++v55;
      if (-2 * v7 == v56)
        goto LABEL_128;
    }
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(2 * v7));
    v85 = result;
    if (v55 <= v7)
    {
      v65 = result;
      v66 = -2 * v7;
      if ((_DWORD)v55 == 1)
      {
        *(_WORD *)result = v9->i16[0];
      }
      else if ((_DWORD)v55)
      {
        memcpy(result, v9, -v56);
      }
      if (v66 != v56)
      {
        v67 = (unsigned __int16 *)((char *)v9 - v56);
        v68 = v55;
        while (1)
        {
          while (1)
          {
            v69 = *v67;
            if (v69 > 0xD)
              break;
            if (v69 != 13 && v69 != 10)
              break;
            if (++v67 == v57)
              goto LABEL_176;
          }
          if (v67 == v57)
            break;
          while (1)
          {
            v71 = *v67;
            if (v71 <= 0xD && (v71 == 10 || v71 == 13))
              break;
            ++v67;
            LODWORD(v55) = v68 + 1;
            *((_WORD *)v65 + v68++) = v71;
            if (v67 == v57)
              goto LABEL_177;
          }
          LODWORD(v55) = v68;
          if (v67 == v57)
            goto LABEL_177;
        }
LABEL_176:
        LODWORD(v55) = v68;
      }
LABEL_177:
      LODWORD(v84) = v55;
      WTF::StringImpl::adopt();
LABEL_182:
      WTF::fastFree(v85, v80);
      v5 = v91;
      v91 = v88;
      if (v5)
      {
        v64 = *(_DWORD *)v5;
        goto LABEL_184;
      }
      goto LABEL_10;
    }
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  v60 = 0;
  v61 = &v9->u8[v7];
  do
  {
    v62 = v9->u8[v60];
    if (v62 <= 0xD && (v62 == 10 || v62 == 13))
    {
      LODWORD(v84) = v7;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v7);
      v85 = result;
      if (v60 > v7)
        goto LABEL_188;
      v73 = result;
      if ((_DWORD)v60)
      {
        if ((_DWORD)v60 == 1)
          *(_BYTE *)result = v9->i8[0];
        else
          memcpy(result, v9, v60);
      }
      if (v7 == v60)
      {
LABEL_181:
        LODWORD(v84) = v60;
        WTF::StringImpl::adopt();
        goto LABEL_182;
      }
      v74 = &v9->u8[v60];
      v75 = v60;
      while (1)
      {
        while (1)
        {
          v76 = *v74;
          if (v76 <= 0xD && (v76 == 13 || v76 == 10))
            break;
LABEL_166:
          if (v74 == v61)
          {
            LODWORD(v60) = v75;
            goto LABEL_181;
          }
          while (1)
          {
            v78 = *v74;
            if (v78 <= 0xD && (v78 == 10 || v78 == 13))
              break;
            ++v74;
            LODWORD(v60) = v75 + 1;
            *((_BYTE *)v73 + v75++) = v78;
            if (v74 == v61)
              goto LABEL_181;
          }
          LODWORD(v60) = v75;
          if (v74 == v61)
            goto LABEL_181;
        }
        if (++v74 == v61)
        {
          v74 = &v9->u8[v7];
          goto LABEL_166;
        }
      }
    }
    ++v60;
  }
  while (v7 != v60);
LABEL_128:
  v64 = v6 + 4;
  *(_DWORD *)v5 = v64;
  v91 = v5;
LABEL_184:
  v81 = v64 - 2;
  if (v81)
    *(_DWORD *)v5 = v81;
  else
    WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
LABEL_10:
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v17)
  {
LABEL_59:
    WTF::String::trim();
LABEL_60:
    result = v91;
    v91 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v18 = *(_DWORD *)(v17 + 4);
  if ((v18 & 1) != 0)
  {
    v19 = *(uint64_t **)(v17 + 40);
    LODWORD(v20) = *(_DWORD *)(v17 + 52);
    if (!(_DWORD)v20)
      goto LABEL_59;
  }
  else
  {
    v19 = (uint64_t *)(v17 + 32);
    LODWORD(v20) = v18 >> 5;
    if (!(_DWORD)v20)
      goto LABEL_59;
  }
  v20 = v20;
  while (1)
  {
    v21 = *v19;
    if (*v19 == WebCore::HTMLNames::multipleAttr
      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
    {
      break;
    }
    v19 += 2;
    if (!--v20)
      goto LABEL_59;
  }
  WTF::String::splitAllowingEmptyEntries();
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  if (!v90)
  {
LABEL_65:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v84);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v84);
    v34 = v84;
    if (!v84)
    {
LABEL_67:
      *a3 = v34;
      v35 = v85;
      v85 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy(v35, v22);
          v34 = v84;
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v22);
        else
          *(_DWORD *)v34 -= 2;
      }
      if (v90)
      {
        v48 = v88;
        v49 = 8 * v90;
        do
        {
          v50 = *(WTF::StringImpl **)v48;
          *(_QWORD *)v48 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v22);
            else
              *(_DWORD *)v50 -= 2;
          }
          v48 = (WTF *)((char *)v48 + 8);
          v49 -= 8;
        }
        while (v49);
      }
      v36 = v88;
      if (v88)
      {
        v88 = 0;
        v89 = 0;
        WTF::fastFree(v36, v22);
      }
      goto LABEL_60;
    }
LABEL_66:
    *(_DWORD *)v34 += 2;
    goto LABEL_67;
  }
  WTF::String::trim();
  v23 = v82;
  if (v82)
    *(_DWORD *)v82 += 2;
  v24 = v84;
  v84 = v82;
  if (!v24)
  {
LABEL_27:
    if (!v82)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_27;
  }
  WTF::StringImpl::destroy(v24, v22);
  v23 = v82;
  if (v82)
LABEL_28:
    LODWORD(v23) = *((_DWORD *)v23 + 1);
LABEL_29:
  v86 = v23;
  result = v82;
  v83 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  if (v90 < 2)
  {
LABEL_64:
    v34 = v84;
    if (v84)
      goto LABEL_66;
    goto LABEL_65;
  }
  v26 = 1;
  v27 = 8;
  while (1)
  {
    LOBYTE(v83) = 44;
    if (v85 && ((v28 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v29 = v84 == 0) : (v29 = 0), v29))
    {
      v32 = *((_DWORD *)v85 + 4);
      v33 = *((_QWORD *)v85 + 1);
      ++v86;
      if ((v32 & 4) != 0)
        *(_BYTE *)(v33 + v28) = 44;
      else
        *(_WORD *)(v33 + 2 * v28) = 44;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    if (v26 >= v90)
      break;
    WTF::String::trim();
    v30 = v83;
    if (v86 || v85)
    {
      if ((*((_BYTE *)v83 + 16) & 4) != 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
    }
    else
    {
      *(_DWORD *)v83 += 2;
      v31 = v84;
      v84 = v83;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v22);
          v30 = v83;
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
      v86 = *((_DWORD *)v30 + 1);
    }
    result = v83;
    v83 = 0;
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
    ++v26;
    v27 += 8;
    if (v26 >= v90)
      goto LABEL_64;
  }
LABEL_189:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::enterKeyHintForAttributeValue(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  if ((a2 & 0xFF00000000) == 0)
  {
    if (a2 <= 8uLL)
    {
      v2 = 0;
      if ((_DWORD)a2)
      {
        v8 = 56;
        while (1)
        {
          v10 = *a1++;
          v9 = v10;
          if (v10 > 0x7F)
            goto LABEL_9;
          v2 |= (v9 | 0x20) << v8;
          v8 -= 8;
          if (8 * a2 + v8 == 56)
            goto LABEL_14;
        }
      }
      goto LABEL_14;
    }
LABEL_9:
    v2 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_15;
  }
  if (a2 > 8uLL)
    goto LABEL_9;
  v2 = 0;
  if ((_DWORD)a2)
  {
    v3 = 56;
    do
    {
      v5 = *(char *)a1;
      a1 = (unsigned __int16 *)((char *)a1 + 1);
      v4 = v5;
      if (v5 < 0)
        goto LABEL_9;
      v2 |= (v4 | 0x20) << v3;
      v3 -= 8;
    }
    while (8 * a2 + v3 != 56);
  }
LABEL_14:
  v7 = v2 & 0xFFFFFFFFFFFFFF00;
  v2 = v2;
  v6 = 1;
LABEL_15:
  v11 = v7 | v2;
  result = 0;
  if (!v6)
    return result;
  if (v11 <= 0x6E657873FFFFFFFFLL)
  {
    switch(v11)
    {
      case 0x646F6E6500000000:
        v13 = 0;
        break;
      case 0x656E746572000000:
        v13 = 1;
        break;
      case 0x676F000000000000:
        v13 = 2;
        break;
      default:
        return result;
    }
  }
  else if (v11 > 0x736561726367FFFFLL)
  {
    if (v11 == 0x7365617263680000)
    {
      v13 = 5;
    }
    else
    {
      if (v11 != 0x73656E6400000000)
        return result;
      v13 = 6;
    }
  }
  else if (v11 == 0x6E65787400000000)
  {
    v13 = 3;
  }
  else
  {
    if (v11 != 0x70726576696F7573)
      return result;
    v13 = 4;
  }
  return *((unsigned __int8 *)&WebCore::enterKeyHintForAttributeValue(WTF::StringView)::mappings + 16 * v13 + 8);
}

uint64_t WebCore::attributeValueForEnterKeyHint@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD **v2;
  _DWORD *v3;

  switch((int)result)
  {
    case 0:
      v2 = (_DWORD **)MEMORY[0x1E0CBF3B8];
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    case 6:
      v3 = (_DWORD *)WebCore::searchAtomData;
      if (!WebCore::searchAtomData)
        goto LABEL_6;
      goto LABEL_5;
    default:
      v2 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_4:
      v3 = *v2;
      if (v3)
LABEL_5:
        *v3 += 2;
LABEL_6:
      *a2 = v3;
      return result;
  }
}

uint64_t WTF::makeAtomString<WTF::String,char,WTF::String>@<X0>(WTF::StringImpl **a1@<X0>, char a2@<W1>, WTF::StringImpl **a3@<X2>, WTF::AtomString *a4@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;

  v5 = *a1;
  if (*a1)
    *(_DWORD *)v5 += 2;
  v6 = *a3;
  if (*a3)
  {
    *(_DWORD *)v6 += 2;
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)v5, a2, (uint64_t)v6, a4);
    if (*(_DWORD *)v6 == 2)
      result = WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)v5, a2, 0, a4);
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      result = WTF::StringImpl::destroy(v5, v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (!*(_QWORD *)a4)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::FTPDirectoryDocumentParser::parseAndAppendOneLine(WebCore::FTPDirectoryDocumentParser *this, const WTF::String *a2)
{
  char *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE *v17;
  _BYTE *v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  WebCore::HTMLTableRowElement *v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF *v158;
  WTF::StringImpl *result;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  _DWORD *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF *v167;
  char v168[4];
  int v169;
  _BYTE *v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  WTF::StringImpl *v174[2];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  char v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  char v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  char v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  char v191;
  int8x16_t *v192;
  WTF::StringImpl *v193;
  char v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  char v197;
  char __s[16];
  __int128 v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v168[0] = 0;
  v169 = 4;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  *(_OWORD *)v174 = 0u;
  v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  v178 = 0;
  WTF::String::latin1(a2);
  if (v167)
    v3 = (char *)v167 + 16;
  else
    v3 = 0;
  if (WebCore::parseOneFTPLine(v3, (WebCore::FTPDirectoryDocumentParser *)((char *)this + 3400), (uint64_t)v168)- 3 >= 2)
  {
    if (v169)
    {
      WTF::String::String();
      v5 = *(_QWORD *)__s;
    }
    else
    {
      v6 = v171;
      if ((v171 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195B9A9B4);
      }
      v7 = v171 + 1;
      if (__OFADD__(v171, 1))
        goto LABEL_442;
      v8 = v170;
      WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
      v5 = *(_QWORD *)__s;
      if (!*(_QWORD *)__s)
        goto LABEL_442;
      v9 = (_BYTE *)(*(_QWORD *)__s + 20);
      **(_DWORD **)__s = 2;
      *(_DWORD *)(v5 + 4) = v7;
      *(_QWORD *)(v5 + 8) = v5 + 20;
      *(_DWORD *)(v5 + 16) = 4;
      if ((_DWORD)v6)
      {
        if ((_DWORD)v6 == 1)
          *v9 = *v8;
        else
          memcpy((void *)(v5 + 20), v8, v6);
      }
      v9[v6] = 47;
      if ((MEMORY[0x19AEA53F4](v5, "./", 2) & 1) != 0)
        goto LABEL_349;
    }
    if (!v169)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v166 = *(WTF::StringImpl **)__s;
      goto LABEL_47;
    }
    if (v174[0])
    {
      v10 = *((_QWORD *)v174[0] + 1);
      v11 = *((unsigned int *)v174[0] + 1);
      if ((*((_BYTE *)v174[0] + 16) & 4) == 0)
      {
        v12 = WTF::parseInteger<unsigned long long,char16_t>(v10, v11, 0xAu, 1);
        goto LABEL_21;
      }
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v12 = WTF::parseInteger<unsigned long long,unsigned char>(v10, v11, 0xAu, 1);
LABEL_21:
    if (v13)
    {
      if (v12 > 0xF423F)
      {
        if (v12 > 0x3B9AC9FF)
        {
          WTF::numberToFixedWidthString();
          v23 = strlen(__s);
          v201 = v23;
          if ((v23 & 0x80000000) != 0
            || (v24 = v23 + 3, __OFADD__(v23, 3))
            || (WTF::tryFastCompactMalloc((WTF *)(v24 + 20)), (v16 = v195) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x195B9AB0CLL);
          }
          v25 = (char *)v195 + 20;
          *(_DWORD *)v195 = 2;
          *((_DWORD *)v16 + 1) = v24;
          *((_QWORD *)v16 + 1) = (char *)v16 + 20;
          *((_DWORD *)v16 + 4) = 4;
          if (v201)
          {
            if (v201 == 1)
              *v25 = __s[0];
            else
              memcpy((char *)v16 + 20, __s, v201);
          }
          v18 = &v25[v201];
          v18[2] = 66;
          v19 = 18208;
        }
        else
        {
          WTF::numberToFixedWidthString();
          v20 = strlen(__s);
          v201 = v20;
          if ((v20 & 0x80000000) != 0
            || (v21 = v20 + 3, __OFADD__(v20, 3))
            || (WTF::tryFastCompactMalloc((WTF *)(v21 + 20)), (v16 = v195) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x195B9AB04);
          }
          v22 = (char *)v195 + 20;
          *(_DWORD *)v195 = 2;
          *((_DWORD *)v16 + 1) = v21;
          *((_QWORD *)v16 + 1) = (char *)v16 + 20;
          *((_DWORD *)v16 + 4) = 4;
          if (v201)
          {
            if (v201 == 1)
              *v22 = __s[0];
            else
              memcpy((char *)v16 + 20, __s, v201);
          }
          v18 = &v22[v201];
          v18[2] = 66;
          v19 = 19744;
        }
      }
      else
      {
        WTF::numberToFixedWidthString();
        v14 = strlen(__s);
        v201 = v14;
        if ((v14 & 0x80000000) != 0
          || (v15 = v14 + 3, __OFADD__(v14, 3))
          || (WTF::tryFastCompactMalloc((WTF *)(v15 + 20)), (v16 = v195) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x195B9AAF4);
        }
        v17 = (char *)v195 + 20;
        *(_DWORD *)v195 = 2;
        *((_DWORD *)v16 + 1) = v15;
        *((_QWORD *)v16 + 1) = (char *)v16 + 20;
        *((_DWORD *)v16 + 4) = 4;
        if (v201)
        {
          if (v201 == 1)
            *v17 = __s[0];
          else
            memcpy((char *)v16 + 20, __s, v201);
        }
        v18 = &v17[v201];
        v18[2] = 66;
        v19 = 19232;
      }
      *(_WORD *)v18 = v19;
      v166 = v16;
    }
    else
    {
      WebCore::unknownFileSizeText((uint64_t)&v166);
    }
LABEL_47:
    if ((_DWORD)v175 || v174[1])
    {
      if ((int)v175 > 11)
      {
        v189 = 0x200000030;
        LODWORD(v190) = HIDWORD(v174[1]);
        if ((_DWORD)v175 == 12)
          v28 = 12;
        else
          v28 = v175 - 12;
        *(_QWORD *)__s = ", ";
        *(_DWORD *)&__s[8] = 2;
        v195 = (WTF::StringImpl *)&v189;
        LODWORD(v196) = HIDWORD(v174[1]);
        v192 = (int8x16_t *)" PM";
        LODWORD(v193) = 3;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v186, (uint64_t)__s, v28, 58, (uint64_t *)&v195, (uint64_t)&v192);
        v26 = v186;
        if (!v186)
        {
          __break(0xC471u);
          JUMPOUT(0x195B9AB14);
        }
      }
      else
      {
        v189 = 0x200000030;
        LODWORD(v190) = HIDWORD(v174[1]);
        if ((_DWORD)v175)
          v27 = v175;
        else
          v27 = 12;
        *(_QWORD *)__s = ", ";
        *(_DWORD *)&__s[8] = 2;
        v195 = (WTF::StringImpl *)&v189;
        LODWORD(v196) = HIDWORD(v174[1]);
        v192 = (int8x16_t *)" AM";
        LODWORD(v193) = 3;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v186, (uint64_t)__s, v27, 58, (uint64_t *)&v195, (uint64_t)&v192);
        v26 = v186;
        if (!v186)
        {
          __break(0xC471u);
          goto LABEL_455;
        }
      }
    }
    else
    {
      v26 = 0;
    }
    v200 = 0;
    *(_OWORD *)__s = 0u;
    v199 = 0u;
    WTF::GregorianDateTime::setToCurrentLocalTime((WTF::GregorianDateTime *)__s);
    v30 = DWORD2(v175);
    v29 = HIDWORD(v175);
    v31 = *(_DWORD *)__s;
    v164 = (_DWORD *)v5;
    if (HIDWORD(v175) == *(_DWORD *)__s)
    {
      if (DWORD2(v175) == *(_DWORD *)&__s[4])
      {
        v32 = *(_DWORD *)&__s[12];
        if (DWORD1(v175) == *(_DWORD *)&__s[12])
        {
          if (v26)
          {
            v33 = *((_DWORD *)v26 + 1);
            *(_DWORD *)v26 += 2;
            if ((v33 & 0x80000000) == 0 && !__OFADD__(v33, 5))
            {
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v33 + 5), (*((_DWORD *)v26 + 4) >> 2) & 1, (int8x16_t *)"Today", 5u, (uint64_t)v26, &v165);
              if (!v165)
                goto LABEL_451;
              goto LABEL_117;
            }
LABEL_450:
            v165 = 0;
LABEL_451:
            __break(0xC471u);
            JUMPOUT(0x195B9AB20);
          }
          WTF::tryFastCompactMalloc((WTF *)0x19);
          v163 = v195;
          if (!v195)
            goto LABEL_450;
          *(_QWORD *)v195 = 0x500000002;
          *((_QWORD *)v163 + 1) = (char *)v163 + 20;
          *((_QWORD *)v163 + 2) = 0x61646F5400000004;
          *((_BYTE *)v163 + 24) = 121;
          goto LABEL_440;
        }
        if (DWORD1(v175) == *(_DWORD *)&__s[12] - 1)
        {
          if (v26)
          {
            v38 = *((_DWORD *)v26 + 1);
            *(_DWORD *)v26 += 2;
            if ((v38 & 0x80000000) == 0 && !__OFADD__(v38, 9))
            {
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v38 + 9), (*((_DWORD *)v26 + 4) >> 2) & 1, (int8x16_t *)"Yesterday", 9u, (uint64_t)v26, &v165);
              if (!v165)
                goto LABEL_437;
LABEL_117:
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v34);
              else
                *(_DWORD *)v26 -= 2;
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v34);
              else
                *(_DWORD *)v26 -= 2;
              goto LABEL_121;
            }
LABEL_436:
            v165 = 0;
LABEL_437:
            __break(0xC471u);
            JUMPOUT(0x195B9AA7CLL);
          }
          WTF::tryFastCompactMalloc((WTF *)0x1D);
          v163 = v195;
          if (!v195)
            goto LABEL_436;
LABEL_439:
          *(_QWORD *)v163 = 0x900000002;
          *(_QWORD *)((char *)v163 + 20) = *(_QWORD *)"Yesterday";
          *((_QWORD *)v163 + 1) = (char *)v163 + 20;
          *((_DWORD *)v163 + 4) = 4;
          *((_BYTE *)v163 + 28) = 121;
LABEL_440:
          v165 = v163;
          goto LABEL_121;
        }
      }
      else
      {
        v32 = *(_DWORD *)&__s[12];
      }
      if (v32 == 1)
      {
        if (*(_DWORD *)&__s[4] == DWORD2(v175) + 1)
        {
          if (DWORD2(v175) > 0xB)
          {
LABEL_94:
            v32 = 1;
            goto LABEL_95;
          }
          v36 = DWORD1(v175);
          if (DWORD2(v175) == 2)
          {
            if ((BYTE12(v175) & 3) != 0
              || (HIDWORD(v37) = -1030792151 * HIDWORD(v175) + 85899344,
                  LODWORD(v37) = HIDWORD(v37),
                  (v37 >> 2) <= 0x28F5C28)
              && SHIDWORD(v175) % 400)
            {
              if (DWORD1(v175) != 28)
              {
LABEL_78:
                v30 = 2;
                goto LABEL_94;
              }
            }
            else if (DWORD1(v175) != 29)
            {
              goto LABEL_78;
            }
LABEL_89:
            if (v26)
            {
              v39 = *((_DWORD *)v26 + 1);
              *(_DWORD *)v26 += 2;
              if ((v39 & 0x80000000) == 0 && !__OFADD__(v39, 9))
              {
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v39 + 9), (*((_DWORD *)v26 + 4) >> 2) & 1, (int8x16_t *)"Yesterday", 9u, (uint64_t)v26, &v165);
                if (v165)
                  goto LABEL_117;
                goto LABEL_454;
              }
            }
            else
            {
              WTF::tryFastCompactMalloc((WTF *)0x1D);
              v163 = v195;
              if (v195)
                goto LABEL_439;
            }
            v165 = 0;
LABEL_454:
            __break(0xC471u);
LABEL_455:
            JUMPOUT(0x195B9949CLL);
          }
LABEL_88:
          if (WebCore::wasLastDayOfMonth(int,int,int)::lastDays[DWORD2(v175)] != v36)
            goto LABEL_94;
          goto LABEL_89;
        }
        v32 = 1;
        if (DWORD2(v175) == 11 && !*(_DWORD *)&__s[4])
        {
          v36 = DWORD1(v175);
          goto LABEL_88;
        }
      }
    }
    else
    {
      v32 = *(_DWORD *)&__s[12];
    }
LABEL_95:
    v40 = DWORD1(v175);
    if (HIDWORD(v175) != *(_DWORD *)__s - 1 || v30 != 12 || DWORD1(v175) != 31 || *(_DWORD *)&__s[4] != 1 || v32 != 1)
    {
      if (v30 >= 0xC)
        v42 = 12;
      else
        v42 = v30;
      v43 = (WTF::StringImpl *)(&WebCore::processFileDateString(tm const&)::months)[2 * v42];
      if ((HIDWORD(v175) & 0x80000000) != 0)
      {
        if (v26)
          *(_DWORD *)v26 += 2;
        v195 = v43;
        LODWORD(v196) = 3;
        v192 = (int8x16_t *)", ";
        LODWORD(v193) = 2;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)&v165, (int8x16_t **)&v195, 32, v40, &v192, v31, (uint64_t)v26);
        if (!v165)
        {
          __break(0xC471u);
          JUMPOUT(0x195B9AB28);
        }
      }
      else
      {
        if (v26)
          *(_DWORD *)v26 += 2;
        v195 = v43;
        LODWORD(v196) = 3;
        v192 = (int8x16_t *)", ";
        LODWORD(v193) = 2;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)&v165, (int8x16_t **)&v195, 32, v40, &v192, v29, (uint64_t)v26);
        if (!v165)
        {
          __break(0xC471u);
          JUMPOUT(0x195B997DCLL);
        }
      }
      if (!v26)
        goto LABEL_121;
      goto LABEL_117;
    }
    if (v26)
    {
      v41 = *((_DWORD *)v26 + 1);
      *(_DWORD *)v26 += 2;
      if ((v41 & 0x80000000) == 0 && !__OFADD__(v41, 9))
      {
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v41 + 9), (*((_DWORD *)v26 + 4) >> 2) & 1, (int8x16_t *)"Yesterday", 9u, (uint64_t)v26, &v165);
        if (v165)
          goto LABEL_117;
LABEL_444:
        __break(0xC471u);
        JUMPOUT(0x195B9AAECLL);
      }
    }
    else
    {
      WTF::tryFastCompactMalloc((WTF *)0x1D);
      v162 = v195;
      if (v195)
      {
        *(_QWORD *)v195 = 0x900000002;
        *(_QWORD *)((char *)v162 + 20) = *(_QWORD *)"Yesterday";
        *((_QWORD *)v162 + 1) = (char *)v162 + 20;
        *((_DWORD *)v162 + 4) = 4;
        *((_BYTE *)v162 + 28) = 121;
        v165 = v162;
LABEL_121:
        v44 = *((_QWORD *)this + 2);
        if (v44)
          v45 = *(_QWORD *)(v44 + 8);
        else
          v45 = 0;
        v46 = v169;
        *(_DWORD *)(v45 + 24) += 2;
        WebCore::HTMLTableElement::insertRow(*((unsigned int **)this + 418), (WebCore::HTMLTableElement *)0xFFFFFFFFLL, v35, (uint64_t)__s);
        if (!(_DWORD)v199)
        {
          v47 = *(WTF::StringImpl **)__s;
          WTF::AtomStringImpl::add();
          v195 = *(WTF::StringImpl **)__s;
          v48 = *((_QWORD *)v47 + 13);
          if (v48)
          {
            v49 = *(_DWORD *)(v48 + 4);
            if ((v49 & 1) == 0)
            {
              v50 = (uint64_t *)(v48 + 32);
              v51 = v49 >> 5;
              if (!v51)
                goto LABEL_136;
LABEL_129:
              v52 = 0;
              while (1)
              {
                v53 = *v50;
                if (*v50 == WebCore::HTMLNames::classAttr
                  || *(_QWORD *)(v53 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                  && *(_QWORD *)(v53 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                {
                  break;
                }
                ++v52;
                v50 += 2;
                if (v51 == v52)
                  goto LABEL_136;
              }
LABEL_137:
              WebCore::Element::setAttributeInternal(v47, v52, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v195, 0);
              v55 = v195;
              v195 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v54);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = bmalloc::api::isoAllocate();
              v57 = v56;
              *(_OWORD *)(v56 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v56 + 24) = 0x101C00000002;
              *(_QWORD *)(v56 + 32) = 0;
              *(_QWORD *)(v56 + 40) = v45 + 96;
              *(_OWORD *)(v56 + 48) = 0u;
              *(_OWORD *)(v56 + 64) = 0u;
              ++*(_DWORD *)(v45 + 3324);
              *(_QWORD *)(v56 + 80) = 0;
              *(_QWORD *)(v56 + 88) = 0;
              v58 = WebCore::HTMLNames::tdTag;
              if (WebCore::HTMLNames::tdTag)
                ++*(_DWORD *)WebCore::HTMLNames::tdTag;
              *(_QWORD *)(v56 + 96) = v58;
              *(_QWORD *)(v56 + 104) = 0;
              *(_QWORD *)v56 = off_1E33CDBC0;
              WTF::String::String();
              v59 = bmalloc::api::isoAllocate();
              v60 = v59;
              *(_OWORD *)(v59 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v59 + 24) = 0x300300000002;
              *(_QWORD *)(v59 + 32) = 0;
              *(_QWORD *)(v59 + 40) = v45 + 96;
              *(_OWORD *)(v59 + 48) = 0u;
              *(_OWORD *)(v59 + 64) = 0u;
              ++*(_DWORD *)(v45 + 3324);
              v61 = *(_DWORD **)__s;
              if (*(_QWORD *)__s || (v61 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
                *v61 += 2;
              *(_QWORD *)(v59 + 80) = v61;
              *(_QWORD *)v59 = off_1E33A8078;
              WebCore::ContainerNode::appendChild(v57, (WebCore::Node *)v59, (uint64_t)&v192);
              if (v194)
              {
                v63 = v193;
                v193 = 0;
                if (v63)
                {
                  if (*(_DWORD *)v63 == 2)
                    WTF::StringImpl::destroy(v63, v62);
                  else
                    *(_DWORD *)v63 -= 2;
                }
              }
              if (*(_DWORD *)(v60 + 24) == 2)
              {
                if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v60, v62);
              }
              else
              {
                *(_DWORD *)(v60 + 24) -= 2;
              }
              v64 = *(WTF::StringImpl **)__s;
              *(_QWORD *)__s = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                {
                  WTF::StringImpl::destroy(v64, v62);
                  if (v46)
                  {
LABEL_155:
                    WTF::AtomStringImpl::add();
                    v195 = *(WTF::StringImpl **)__s;
                    v65 = *(_QWORD *)(v57 + 104);
                    if (v65)
                    {
                      v66 = *(_DWORD *)(v65 + 4);
                      if ((v66 & 1) == 0)
                      {
                        v67 = (uint64_t *)(v65 + 32);
                        v68 = v66 >> 5;
                        if (!v68)
                          goto LABEL_183;
                        goto LABEL_160;
                      }
                      v67 = *(uint64_t **)(v65 + 40);
                      v68 = *(_DWORD *)(v65 + 52);
                      if (v68)
                      {
LABEL_160:
                        v69 = 0;
                        while (1)
                        {
                          v70 = *v67;
                          if (*v67 == WebCore::HTMLNames::classAttr
                            || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                            && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                          {
                            goto LABEL_184;
                          }
                          ++v69;
                          v67 += 2;
                          if (v68 == v69)
                            goto LABEL_183;
                        }
                      }
                    }
                    goto LABEL_183;
                  }
LABEL_171:
                  WTF::AtomStringImpl::add();
                  v195 = *(WTF::StringImpl **)__s;
                  v71 = *(_QWORD *)(v57 + 104);
                  if (v71)
                  {
                    v72 = *(_DWORD *)(v71 + 4);
                    if ((v72 & 1) != 0)
                    {
                      v73 = *(uint64_t **)(v71 + 40);
                      v74 = *(_DWORD *)(v71 + 52);
                      if (!v74)
                        goto LABEL_183;
                    }
                    else
                    {
                      v73 = (uint64_t *)(v71 + 32);
                      v74 = v72 >> 5;
                      if (!v74)
                        goto LABEL_183;
                    }
                    v69 = 0;
                    while (1)
                    {
                      v75 = *v73;
                      if (*v73 == WebCore::HTMLNames::classAttr
                        || *(_QWORD *)(v75 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                        && *(_QWORD *)(v75 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                      {
                        break;
                      }
                      ++v69;
                      v73 += 2;
                      if (v74 == v69)
                        goto LABEL_183;
                    }
LABEL_184:
                    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v57, v69, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v195, 0);
                    v77 = v195;
                    v195 = 0;
                    if (v77)
                    {
                      if (*(_DWORD *)v77 == 2)
                        WTF::StringImpl::destroy(v77, v76);
                      else
                        *(_DWORD *)v77 -= 2;
                    }
                    WebCore::ContainerNode::appendChild((uint64_t)v47, (WebCore::Node *)v57, (uint64_t)&v189);
                    if (v191)
                    {
                      v79 = v190;
                      v190 = 0;
                      if (v79)
                      {
                        if (*(_DWORD *)v79 == 2)
                          WTF::StringImpl::destroy(v79, v78);
                        else
                          *(_DWORD *)v79 -= 2;
                      }
                    }
                    v80 = *((_QWORD *)this + 2);
                    if (v80)
                      v81 = *(_QWORD *)(v80 + 8);
                    else
                      v81 = 0;
                    *(_DWORD *)(v81 + 24) += 2;
                    v82 = *(WTF::StringImpl **)(v81 + 848);
                    if (v82)
                    {
                      *(_DWORD *)v82 += 2;
                      v186 = 0;
                      if (WTF::StringImpl::endsWith())
                      {
                        v83 = *(_DWORD *)v82;
                        *(_DWORD *)v82 += 2;
                        if (v5)
                        {
                          *(_DWORD *)v5 += 2;
                          *(_DWORD *)v82 += 2;
                          *(_DWORD *)v5 += 2;
                          WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)__s, (uint64_t)v82, v5);
                          if (*(_DWORD *)v5 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v5, v84);
                          else
                            *(_DWORD *)v5 -= 2;
                        }
                        else
                        {
                          *(_DWORD *)v82 = v83 + 4;
                          WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)__s, (uint64_t)v82, 0);
                        }
                        if (*(_DWORD *)v82 == 2)
                          WTF::StringImpl::destroy(v82, v84);
                        else
                          *(_DWORD *)v82 -= 2;
                        v85 = *(WTF::StringImpl **)__s;
                        if (!*(_QWORD *)__s)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195B9AAFCLL);
                        }
                        *(_QWORD *)__s = 0;
                        v86 = v186;
                        v186 = v85;
                        if (v86)
                        {
                          if (*(_DWORD *)v86 == 2)
                          {
                            WTF::StringImpl::destroy(v86, v84);
                            v161 = *(WTF::StringImpl **)__s;
                            *(_QWORD *)__s = 0;
                            if (v161)
                            {
                              if (*(_DWORD *)v161 == 2)
                                WTF::StringImpl::destroy(v161, v84);
                              else
                                *(_DWORD *)v161 -= 2;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v86 -= 2;
                            *(_QWORD *)__s = 0;
                          }
                        }
                        if (v5)
                        {
                          if (*(_DWORD *)v5 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v5, v84);
                          else
                            *(_DWORD *)v5 -= 2;
                        }
                        v87 = v45 + 96;
                        v88 = v47;
                        if (*(_DWORD *)v82 == 2)
                          WTF::StringImpl::destroy(v82, v84);
                        else
                          *(_DWORD *)v82 -= 2;
                        goto LABEL_222;
                      }
                      *(_DWORD *)v82 += 2;
                    }
                    else
                    {
                      v186 = 0;
                    }
                    v183 = v82;
                    if (v5)
                      *(_DWORD *)v5 += 2;
                    v179 = (WTF::StringImpl *)v5;
                    WTF::makeAtomString<WTF::String,char,WTF::String>(&v183, 47, &v179, (WTF::AtomString *)__s);
                    v90 = *(WTF::StringImpl **)__s;
                    *(_QWORD *)__s = 0;
                    v91 = v186;
                    v186 = v90;
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 2)
                      {
                        WTF::StringImpl::destroy(v91, v89);
                        v160 = *(WTF::StringImpl **)__s;
                        *(_QWORD *)__s = 0;
                        if (v160)
                        {
                          if (*(_DWORD *)v160 == 2)
                            WTF::StringImpl::destroy(v160, v89);
                          else
                            *(_DWORD *)v160 -= 2;
                        }
                      }
                      else
                      {
                        *(_DWORD *)v91 -= 2;
                        *(_QWORD *)__s = 0;
                      }
                    }
                    v92 = v179;
                    v179 = 0;
                    if (v92)
                    {
                      if (*(_DWORD *)v92 == 2)
                        WTF::StringImpl::destroy(v92, v89);
                      else
                        *(_DWORD *)v92 -= 2;
                    }
                    v93 = v183;
                    v183 = 0;
                    if (v93)
                    {
                      if (*(_DWORD *)v93 == 2)
                        WTF::StringImpl::destroy(v93, v89);
                      else
                        *(_DWORD *)v93 -= 2;
                    }
                    v87 = v45 + 96;
                    v88 = v47;
LABEL_222:
                    v94 = bmalloc::api::isoAllocate();
                    v95 = v94;
                    *(_OWORD *)(v94 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v94 + 24) = 0x101C00000002;
                    *(_QWORD *)(v94 + 32) = 0;
                    v96 = v81 + 96;
                    *(_QWORD *)(v94 + 40) = v81 + 96;
                    *(_OWORD *)(v94 + 48) = 0u;
                    *(_OWORD *)(v94 + 64) = 0u;
                    ++*(_DWORD *)(v81 + 3324);
                    *(_QWORD *)(v94 + 80) = 0;
                    *(_QWORD *)(v94 + 88) = 0;
                    v97 = WebCore::HTMLNames::aTag;
                    if (WebCore::HTMLNames::aTag)
                      ++*(_DWORD *)WebCore::HTMLNames::aTag;
                    *(_QWORD *)(v94 + 96) = v97;
                    *(_QWORD *)(v94 + 104) = 0;
                    *(_QWORD *)v94 = off_1E33B3458;
                    *(_QWORD *)(v94 + 112) = &unk_1E33B3958;
                    *(_WORD *)(v94 + 120) = 0;
                    *(_BYTE *)(v94 + 122) = 0;
                    *(_DWORD *)(v94 + 124) = -1;
                    *(_QWORD *)(v94 + 128) = 0;
                    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v94, 0xFFFFFFFFLL, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v186, 0);
                    v98 = bmalloc::api::isoAllocate();
                    v99 = v98;
                    *(_OWORD *)(v98 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v98 + 24) = 0x300300000002;
                    *(_QWORD *)(v98 + 32) = 0;
                    *(_QWORD *)(v98 + 40) = v96;
                    *(_OWORD *)(v98 + 48) = 0u;
                    *(_OWORD *)(v98 + 64) = 0u;
                    ++*(_DWORD *)(v81 + 3324);
                    v100 = v164;
                    if (v164 || (v100 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
                      *v100 += 2;
                    *(_QWORD *)(v98 + 80) = v100;
                    *(_QWORD *)v98 = off_1E33A8078;
                    WebCore::ContainerNode::appendChild(v95, (WebCore::Node *)v98, (uint64_t)__s);
                    if ((_BYTE)v199)
                    {
                      v102 = *(WTF::StringImpl **)&__s[8];
                      *(_QWORD *)&__s[8] = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 2)
                          WTF::StringImpl::destroy(v102, v101);
                        else
                          *(_DWORD *)v102 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v99 + 24) == 2)
                    {
                      if ((*(_WORD *)(v99 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v99, v101);
                    }
                    else
                    {
                      *(_DWORD *)(v99 + 24) -= 2;
                    }
                    v103 = bmalloc::api::isoAllocate();
                    v104 = v103;
                    *(_OWORD *)(v103 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v103 + 24) = 0x101C00000002;
                    *(_QWORD *)(v103 + 32) = 0;
                    *(_QWORD *)(v103 + 40) = v96;
                    *(_OWORD *)(v103 + 48) = 0u;
                    *(_OWORD *)(v103 + 64) = 0u;
                    ++*(_DWORD *)(v81 + 3324);
                    *(_QWORD *)(v103 + 80) = 0;
                    *(_QWORD *)(v103 + 88) = 0;
                    v105 = WebCore::HTMLNames::tdTag;
                    if (WebCore::HTMLNames::tdTag)
                      ++*(_DWORD *)WebCore::HTMLNames::tdTag;
                    *(_QWORD *)(v103 + 96) = v105;
                    *(_QWORD *)(v103 + 104) = 0;
                    *(_QWORD *)v103 = off_1E33CDBC0;
                    WebCore::ContainerNode::appendChild(v103, (WebCore::Node *)v95, (uint64_t)&v195);
                    if (v197)
                    {
                      v107 = v196;
                      v196 = 0;
                      if (v107)
                      {
                        if (*(_DWORD *)v107 == 2)
                          WTF::StringImpl::destroy(v107, v106);
                        else
                          *(_DWORD *)v107 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v95 + 24) == 2)
                    {
                      if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v95, v106);
                    }
                    else
                    {
                      *(_DWORD *)(v95 + 24) -= 2;
                    }
                    v108 = v186;
                    v186 = 0;
                    v109 = (uint64_t)v88;
                    v110 = v87;
                    v5 = (uint64_t)v164;
                    if (v108)
                    {
                      if (*(_DWORD *)v108 == 2)
                      {
                        WTF::StringImpl::destroy(v108, v106);
                        if (!v82)
                          goto LABEL_247;
                        goto LABEL_245;
                      }
                      *(_DWORD *)v108 -= 2;
                    }
                    if (!v82)
                      goto LABEL_247;
LABEL_245:
                    if (*(_DWORD *)v82 == 2)
                      WTF::StringImpl::destroy(v82, v106);
                    else
                      *(_DWORD *)v82 -= 2;
LABEL_247:
                    if (*(_DWORD *)(v81 + 24) == 2)
                    {
                      if ((*(_WORD *)(v81 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v81, v106);
                    }
                    else
                    {
                      *(_DWORD *)(v81 + 24) -= 2;
                    }
                    WTF::AtomStringImpl::add();
                    v195 = *(WTF::StringImpl **)__s;
                    v111 = *(_QWORD *)(v104 + 104);
                    if (!v111)
                      goto LABEL_261;
                    v112 = *(_DWORD *)(v111 + 4);
                    if ((v112 & 1) != 0)
                    {
                      v113 = *(uint64_t **)(v111 + 40);
                      v114 = *(_DWORD *)(v111 + 52);
                      if (!v114)
                      {
LABEL_261:
                        v115 = 0xFFFFFFFFLL;
                        goto LABEL_262;
                      }
                    }
                    else
                    {
                      v113 = (uint64_t *)(v111 + 32);
                      v114 = v112 >> 5;
                      if (!v114)
                        goto LABEL_261;
                    }
                    v115 = 0;
                    while (1)
                    {
                      v116 = *v113;
                      if (*v113 == WebCore::HTMLNames::classAttr
                        || *(_QWORD *)(v116 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                        && *(_QWORD *)(v116 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                      {
                        break;
                      }
                      ++v115;
                      v113 += 2;
                      if (v114 == v115)
                        goto LABEL_261;
                    }
LABEL_262:
                    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v104, v115, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v195, 0);
                    v118 = v195;
                    v195 = 0;
                    if (v118)
                    {
                      if (*(_DWORD *)v118 == 2)
                        WTF::StringImpl::destroy(v118, v117);
                      else
                        *(_DWORD *)v118 -= 2;
                    }
                    WebCore::ContainerNode::appendChild(v109, (WebCore::Node *)v104, (uint64_t)__s);
                    if ((_BYTE)v199)
                    {
                      v120 = *(WTF::StringImpl **)&__s[8];
                      *(_QWORD *)&__s[8] = 0;
                      if (v120)
                      {
                        if (*(_DWORD *)v120 == 2)
                          WTF::StringImpl::destroy(v120, v119);
                        else
                          *(_DWORD *)v120 -= 2;
                      }
                    }
                    v121 = bmalloc::api::isoAllocate();
                    v122 = v121;
                    *(_OWORD *)(v121 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v121 + 24) = 0x101C00000002;
                    *(_QWORD *)(v121 + 32) = 0;
                    *(_QWORD *)(v121 + 40) = v110;
                    *(_OWORD *)(v121 + 48) = 0u;
                    *(_OWORD *)(v121 + 64) = 0u;
                    ++*(_DWORD *)(v45 + 3324);
                    *(_QWORD *)(v121 + 80) = 0;
                    *(_QWORD *)(v121 + 88) = 0;
                    v123 = WebCore::HTMLNames::tdTag;
                    if (WebCore::HTMLNames::tdTag)
                      ++*(_DWORD *)WebCore::HTMLNames::tdTag;
                    *(_QWORD *)(v121 + 96) = v123;
                    *(_QWORD *)(v121 + 104) = 0;
                    *(_QWORD *)v121 = off_1E33CDBC0;
                    v124 = bmalloc::api::isoAllocate();
                    v125 = v124;
                    *(_OWORD *)(v124 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v124 + 24) = 0x300300000002;
                    *(_QWORD *)(v124 + 32) = 0;
                    *(_QWORD *)(v124 + 40) = v110;
                    *(_OWORD *)(v124 + 48) = 0u;
                    *(_OWORD *)(v124 + 64) = 0u;
                    ++*(_DWORD *)(v45 + 3324);
                    v126 = v165;
                    if (v165 || (v126 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                      *(_DWORD *)v126 += 2;
                    *(_QWORD *)(v124 + 80) = v126;
                    *(_QWORD *)v124 = off_1E33A8078;
                    WebCore::ContainerNode::appendChild(v122, (WebCore::Node *)v124, (uint64_t)&v195);
                    if (v197)
                    {
                      v128 = v196;
                      v196 = 0;
                      if (v128)
                      {
                        if (*(_DWORD *)v128 == 2)
                          WTF::StringImpl::destroy(v128, v127);
                        else
                          *(_DWORD *)v128 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v125 + 24) == 2)
                    {
                      if ((*(_WORD *)(v125 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v125, v127);
                    }
                    else
                    {
                      *(_DWORD *)(v125 + 24) -= 2;
                    }
                    WTF::AtomStringImpl::add();
                    v183 = v186;
                    v129 = *(_QWORD *)(v122 + 104);
                    if (!v129)
                      goto LABEL_292;
                    v130 = *(_DWORD *)(v129 + 4);
                    if ((v130 & 1) != 0)
                    {
                      v131 = *(uint64_t **)(v129 + 40);
                      v132 = *(_DWORD *)(v129 + 52);
                      if (!v132)
                      {
LABEL_292:
                        v133 = 0xFFFFFFFFLL;
                        goto LABEL_293;
                      }
                    }
                    else
                    {
                      v131 = (uint64_t *)(v129 + 32);
                      v132 = v130 >> 5;
                      if (!v132)
                        goto LABEL_292;
                    }
                    v133 = 0;
                    while (1)
                    {
                      v134 = *v131;
                      if (*v131 == WebCore::HTMLNames::classAttr
                        || *(_QWORD *)(v134 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                        && *(_QWORD *)(v134 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                      {
                        break;
                      }
                      ++v133;
                      v131 += 2;
                      if (v132 == v133)
                        goto LABEL_292;
                    }
LABEL_293:
                    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v122, v133, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v183, 0);
                    v136 = v183;
                    v183 = 0;
                    if (v136)
                    {
                      if (*(_DWORD *)v136 == 2)
                        WTF::StringImpl::destroy(v136, v135);
                      else
                        *(_DWORD *)v136 -= 2;
                    }
                    WebCore::ContainerNode::appendChild(v109, (WebCore::Node *)v122, (uint64_t)&v186);
                    if (v188)
                    {
                      v138 = v187;
                      v187 = 0;
                      if (v138)
                      {
                        if (*(_DWORD *)v138 == 2)
                          WTF::StringImpl::destroy(v138, v137);
                        else
                          *(_DWORD *)v138 -= 2;
                      }
                    }
                    v139 = bmalloc::api::isoAllocate();
                    v140 = v139;
                    *(_OWORD *)(v139 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v139 + 24) = 0x101C00000002;
                    *(_QWORD *)(v139 + 32) = 0;
                    *(_QWORD *)(v139 + 40) = v110;
                    *(_OWORD *)(v139 + 48) = 0u;
                    *(_OWORD *)(v139 + 64) = 0u;
                    ++*(_DWORD *)(v45 + 3324);
                    *(_QWORD *)(v139 + 80) = 0;
                    *(_QWORD *)(v139 + 88) = 0;
                    v141 = WebCore::HTMLNames::tdTag;
                    if (WebCore::HTMLNames::tdTag)
                      ++*(_DWORD *)WebCore::HTMLNames::tdTag;
                    *(_QWORD *)(v139 + 96) = v141;
                    *(_QWORD *)(v139 + 104) = 0;
                    *(_QWORD *)v139 = off_1E33CDBC0;
                    v142 = bmalloc::api::isoAllocate();
                    v143 = v142;
                    *(_OWORD *)(v142 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v142 + 24) = 0x300300000002;
                    *(_QWORD *)(v142 + 32) = 0;
                    *(_QWORD *)(v142 + 40) = v110;
                    *(_OWORD *)(v142 + 48) = 0u;
                    *(_OWORD *)(v142 + 64) = 0u;
                    ++*(_DWORD *)(v45 + 3324);
                    v144 = v166;
                    if (v166 || (v144 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                      *(_DWORD *)v144 += 2;
                    *(_QWORD *)(v142 + 80) = v144;
                    *(_QWORD *)v142 = off_1E33A8078;
                    WebCore::ContainerNode::appendChild(v140, (WebCore::Node *)v142, (uint64_t)&v183);
                    if (v185)
                    {
                      v146 = v184;
                      v184 = 0;
                      if (v146)
                      {
                        if (*(_DWORD *)v146 == 2)
                          WTF::StringImpl::destroy(v146, v145);
                        else
                          *(_DWORD *)v146 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v143 + 24) == 2)
                    {
                      if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v143, v145);
                    }
                    else
                    {
                      *(_DWORD *)(v143 + 24) -= 2;
                    }
                    WTF::AtomStringImpl::add();
                    v182 = v179;
                    v147 = *(_QWORD *)(v140 + 104);
                    if (!v147)
                      goto LABEL_323;
                    v148 = *(_DWORD *)(v147 + 4);
                    if ((v148 & 1) != 0)
                    {
                      v149 = *(uint64_t **)(v147 + 40);
                      v150 = *(_DWORD *)(v147 + 52);
                      if (!v150)
                      {
LABEL_323:
                        v151 = 0xFFFFFFFFLL;
LABEL_324:
                        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v140, v151, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v182, 0);
                        v154 = v182;
                        v182 = 0;
                        if (v154)
                        {
                          if (*(_DWORD *)v154 == 2)
                            WTF::StringImpl::destroy(v154, v153);
                          else
                            *(_DWORD *)v154 -= 2;
                        }
                        WebCore::ContainerNode::appendChild(v109, (WebCore::Node *)v140, (uint64_t)&v179);
                        if (v181)
                        {
                          v155 = v180;
                          v180 = 0;
                          if (v155)
                          {
                            if (*(_DWORD *)v155 == 2)
                              WTF::StringImpl::destroy(v155, v4);
                            else
                              *(_DWORD *)v155 -= 2;
                          }
                        }
                        *(_BYTE *)(v45 + 3436) = 1;
                        if (*(_DWORD *)(v140 + 24) == 2)
                        {
                          if ((*(_WORD *)(v140 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v140, v4);
                        }
                        else
                        {
                          *(_DWORD *)(v140 + 24) -= 2;
                        }
                        if (*(_DWORD *)(v122 + 24) == 2)
                        {
                          if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v122, v4);
                        }
                        else
                        {
                          *(_DWORD *)(v122 + 24) -= 2;
                        }
                        if (*(_DWORD *)(v104 + 24) == 2)
                        {
                          if ((*(_WORD *)(v104 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v104, v4);
                        }
                        else
                        {
                          *(_DWORD *)(v104 + 24) -= 2;
                        }
                        if (*(_DWORD *)(v57 + 24) == 2)
                        {
                          if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v57, v4);
                        }
                        else
                        {
                          *(_DWORD *)(v57 + 24) -= 2;
                        }
                        if (v109)
                        {
                          if (*(_DWORD *)(v109 + 24) == 2)
                          {
                            if ((*(_WORD *)(v109 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v109, v4);
                          }
                          else
                          {
                            *(_DWORD *)(v109 + 24) -= 2;
                          }
                        }
                        if (*(_DWORD *)(v45 + 24) == 2)
                        {
                          if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v45, v4);
                        }
                        else
                        {
                          *(_DWORD *)(v45 + 24) -= 2;
                        }
                        v156 = v165;
                        v165 = 0;
                        if (v156)
                        {
                          if (*(_DWORD *)v156 == 2)
                            WTF::StringImpl::destroy(v156, v4);
                          else
                            *(_DWORD *)v156 -= 2;
                        }
                        v157 = v166;
                        v166 = 0;
                        if (v157)
                        {
                          if (*(_DWORD *)v157 == 2)
                          {
                            WTF::StringImpl::destroy(v157, v4);
                            if (!v164)
                              goto LABEL_351;
                            goto LABEL_349;
                          }
                          *(_DWORD *)v157 -= 2;
                        }
                        if (!v164)
                          goto LABEL_351;
LABEL_349:
                        if (*(_DWORD *)v5 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v5, v4);
                        else
                          *(_DWORD *)v5 -= 2;
                        goto LABEL_351;
                      }
                    }
                    else
                    {
                      v149 = (uint64_t *)(v147 + 32);
                      v150 = v148 >> 5;
                      if (!v150)
                        goto LABEL_323;
                    }
                    v151 = 0;
                    while (1)
                    {
                      v152 = *v149;
                      if (*v149 == WebCore::HTMLNames::classAttr
                        || *(_QWORD *)(v152 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                        && *(_QWORD *)(v152 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                      {
                        goto LABEL_324;
                      }
                      ++v151;
                      v149 += 2;
                      if (v150 == v151)
                        goto LABEL_323;
                    }
                  }
LABEL_183:
                  v69 = 0xFFFFFFFFLL;
                  goto LABEL_184;
                }
                *(_DWORD *)v64 -= 2;
              }
              if (v46)
                goto LABEL_155;
              goto LABEL_171;
            }
            v50 = *(uint64_t **)(v48 + 40);
            v51 = *(_DWORD *)(v48 + 52);
            if (v51)
              goto LABEL_129;
          }
LABEL_136:
          v52 = 0xFFFFFFFFLL;
          goto LABEL_137;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_442:
        __break(0xC471u);
        JUMPOUT(0x195B9AAE0);
      }
    }
    v165 = 0;
    goto LABEL_444;
  }
LABEL_351:
  v158 = v167;
  v167 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 1)
      WTF::fastFree(v158, v4);
    else
      --*(_DWORD *)v158;
  }
  result = v174[0];
  v174[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FTPDirectoryDocumentParser::append(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore::Node *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __n128 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unsigned int *v73;
  unsigned int v74;
  int v75;
  char v76;
  _WORD *v77;
  _WORD *v78;
  _WORD *v79;
  int v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t (*v88)(uint64_t);
  _QWORD *v89;
  uint64_t (*v90)(uint64_t, WTF::StringImpl *);
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF *v98;
  WTF::StringImpl *result;
  WTF::StringImpl **v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl **v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WebCore::FTPDirectoryDocumentParser *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  unsigned int *v112;
  __int16 v113;
  __int128 v114;
  WTF *v115[2];
  char v116;
  _QWORD v117[2];
  uint64_t (*v118)(WebCore::SegmentedString *__hidden);
  uint64_t v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  unsigned int *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  char v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  char v128;

  v2 = a2;
  if (*(_QWORD *)(a1 + 3344))
    goto LABEL_178;
  if (_MergedGlobals_183 == 1)
  {
    v4 = (WTF::StringImpl *)qword_1ECE833D8;
    if (qword_1ECE833D8)
      goto LABEL_4;
  }
  else
  {
    WebCore::SharedBuffer::createWithContentsOfFile((WTF::FileSystemImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 680) + 384), 0, 1, (uint64_t *)&v110);
    v4 = v110;
    qword_1ECE833D8 = (uint64_t)v110;
    _MergedGlobals_183 = 1;
    if (v110)
    {
LABEL_4:
      if (*((_DWORD *)v4 + 5))
      {
        v5 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
        v6 = *(unsigned int *)(v5 + 24);
        if ((_DWORD)v6 == -1)
        {
          v108 = (WebCore::FTPDirectoryDocumentParser *)std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WebCore::FTPDirectoryDocumentParser::finish(v108);
        }
        v110 = (WTF::StringImpl *)&v122;
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v110, v5 + 8);
      }
      WTF::String::String();
      v7 = v122;
      v122 = 0;
      v110 = (WTF::StringImpl *)v7;
      if (v7)
      {
        v8 = v7[1];
        LODWORD(v111) = v8;
        HIDWORD(v111) = v8;
        v112 = 0;
        v113 = 257;
        if (v8)
        {
          v9 = (v7[4] >> 2) & 1;
          LOBYTE(v113) = (v7[4] & 4) != 0;
          v7 = (unsigned int *)*((_QWORD *)v7 + 1);
          v112 = v7;
          goto LABEL_10;
        }
        v7 = 0;
      }
      else
      {
        v8 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 257;
      }
      v9 = 1;
LABEL_10:
      v116 = 0;
      v114 = 0u;
      *(_OWORD *)v115 = 0u;
      memset(v117, 0, 15);
      v118 = WebCore::SegmentedString::advanceEmpty;
      v119 = 0;
      v120 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
      v121 = 0;
      if (!v8)
        goto LABEL_14;
      if (v9)
      {
        LOWORD(v117[0]) = *(unsigned __int8 *)v7;
        if (v8 >= 2)
        {
          BYTE6(v117[1]) = 3;
          goto LABEL_14;
        }
      }
      else
      {
        LOWORD(v117[0]) = *(_WORD *)v7;
        if (v8 > 1)
        {
          BYTE6(v117[1]) = 0;
          v118 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
          v119 = 0;
          v120 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_93:
          v121 = 0;
LABEL_14:
          WebCore::HTMLDocumentParser::insert(a1, (uint64_t)&v110);
          v11 = v114;
          v12 = v115[0];
          if ((unint64_t)v114 > *((_QWORD *)&v114 + 1))
          {
            if (*((_QWORD *)&v114 + 1))
            {
              v42 = 32 * *((_QWORD *)&v114 + 1);
              do
              {
                v43 = *(WTF::StringImpl **)v12;
                *(_QWORD *)v12 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v10);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v12 = (WTF *)((char *)v12 + 32);
                v42 -= 32;
              }
              while (v42);
              v12 = v115[0];
              v11 = v114;
            }
            if (v11 != LODWORD(v115[1]))
            {
              v44 = (WTF::StringImpl **)((char *)v12 + 32 * v11);
              v45 = 32 * LODWORD(v115[1]) - 32 * v11;
              do
              {
                v46 = *v44;
                *v44 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, v10);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v44 += 4;
                v45 -= 32;
              }
              while (v45);
            }
          }
          else
          {
            if ((_QWORD)v114 == *((_QWORD *)&v114 + 1))
            {
              if (!v115[0])
                goto LABEL_18;
LABEL_112:
              v115[0] = 0;
              LODWORD(v115[1]) = 0;
              WTF::fastFree(v12, v10);
LABEL_18:
              v13 = v110;
              v110 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, v10);
                else
                  *(_DWORD *)v13 -= 2;
              }
              v14 = (WTF::StringImpl *)v122;
              v122 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v10);
                else
                  *(_DWORD *)v14 -= 2;
              }
              v15 = *(_QWORD *)(a1 + 16);
              if (v15)
                v16 = *(_QWORD *)(v15 + 8);
              else
                v16 = 0;
              *(_DWORD *)(v16 + 24) += 2;
              WebCore::TreeScope::getElementById(v16 + 96, 0x100000011, (uint64_t *)&v122);
              v17 = (uint64_t)v122;
              if (v122
                && (v122[7] & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)v122 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
              {
                v122[6] += 2;
                v18 = *(_QWORD *)(a1 + 3344);
                *(_QWORD *)(a1 + 3344) = v17;
                if (!v18)
                  goto LABEL_76;
                if (*(_DWORD *)(v18 + 24) != 2)
                {
                  *(_DWORD *)(v18 + 24) -= 2;
                  goto LABEL_76;
                }
                if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  goto LABEL_104;
                goto LABEL_76;
              }
              v19 = bmalloc::api::isoAllocate();
              v21 = v19;
              *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
              *(_DWORD *)(v19 + 28) = 4124;
              *(_QWORD *)(v19 + 32) = 0;
              *(_QWORD *)(v19 + 40) = v16 + 96;
              *(_OWORD *)(v19 + 48) = 0u;
              *(_OWORD *)(v19 + 64) = 0u;
              ++*(_DWORD *)(v16 + 3324);
              *(_QWORD *)(v19 + 80) = 0;
              *(_QWORD *)(v19 + 88) = 0;
              v22 = WebCore::HTMLNames::tableTag;
              if (WebCore::HTMLNames::tableTag)
                ++*(_DWORD *)WebCore::HTMLNames::tableTag;
              *(_QWORD *)(v19 + 96) = v22;
              *(_QWORD *)(v19 + 104) = 0;
              *(_QWORD *)v19 = off_1E33CE0B0;
              *(_WORD *)(v19 + 112) = 0;
              *(_DWORD *)(v19 + 116) = 0;
              *(_WORD *)(v19 + 120) = 1;
              *(_QWORD *)(v19 + 128) = 0;
              *(_DWORD *)(v19 + 24) = 4;
              v23 = *(_QWORD *)(a1 + 3344);
              *(_QWORD *)(a1 + 3344) = v21;
              if (v23)
              {
                if (*(_DWORD *)(v23 + 24) == 2)
                {
                  if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v23, v20);
                }
                else
                {
                  *(_DWORD *)(v23 + 24) -= 2;
                }
              }
              WTF::AtomStringImpl::add();
              v109 = v110;
              v24 = *(_QWORD *)(v21 + 104);
              if (!v24)
                goto LABEL_49;
              v25 = *(_DWORD *)(v24 + 4);
              if ((v25 & 1) != 0)
              {
                v26 = *(uint64_t **)(v24 + 40);
                v27 = *(_DWORD *)(v24 + 52);
                if (!v27)
                {
LABEL_49:
                  v28 = 0xFFFFFFFFLL;
                  goto LABEL_50;
                }
              }
              else
              {
                v26 = (uint64_t *)(v24 + 32);
                v27 = v25 >> 5;
                if (!v27)
                  goto LABEL_49;
              }
              v28 = 0;
              while (1)
              {
                v29 = *v26;
                if (*v26 == WebCore::HTMLNames::idAttr
                  || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                  && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                {
                  break;
                }
                ++v28;
                v26 += 2;
                if (v27 == v28)
                  goto LABEL_49;
              }
LABEL_50:
              WebCore::Element::setAttributeInternal((WTF::StringImpl *)v21, v28, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v109, 0);
              v31 = v109;
              v109 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v30);
                else
                  *(_DWORD *)v31 -= 2;
              }
              v32 = *(_QWORD *)(v16 + 1272);
              if (v32)
              {
                if ((*(_WORD *)(v32 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
                {
                  v33 = *(_QWORD *)(v32 + 80);
                  if (v33)
                  {
                    while ((*(_WORD *)(v33 + 28) & 0x10) == 0)
                    {
                      v33 = *(_QWORD *)(v33 + 56);
                      if (!v33)
                        goto LABEL_59;
                    }
                    v35 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
                    v36 = *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24);
                    if (v36 != v35)
                    {
LABEL_64:
                      if (v36 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
                      {
                        while (1)
                        {
                          v33 = *(_QWORD *)(v33 + 56);
                          if (!v33)
                            goto LABEL_59;
                          if ((*(_WORD *)(v33 + 28) & 0x10) != 0)
                          {
                            v36 = *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24);
                            if (v36 != v35)
                              goto LABEL_64;
                            break;
                          }
                        }
                      }
                    }
                    *(_DWORD *)(v33 + 24) += 2;
                    WebCore::ContainerNode::appendChild(v33, (WebCore::Node *)v21, (uint64_t)&v126);
                    if (v128)
                    {
                      v37 = v127;
                      v127 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, a2);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v33 + 24) == 2)
                    {
                      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v33, a2);
                    }
                    else
                    {
                      *(_DWORD *)(v33 + 24) -= 2;
                    }
LABEL_74:
                    if (*(_DWORD *)(v21 + 24) != 2)
                    {
                      *(_DWORD *)(v21 + 24) -= 2;
                      goto LABEL_76;
                    }
                    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                    {
                      v18 = v21;
LABEL_104:
                      WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
                    }
LABEL_76:
                    v38 = (WebCore::Node *)v122;
                    if (!v122)
                      goto LABEL_176;
                    if (v122[6] != 2)
                    {
                      v122[6] -= 2;
                      goto LABEL_176;
                    }
                    if ((*((_WORD *)v122 + 15) & 0x400) != 0)
                      goto LABEL_176;
LABEL_256:
                    WebCore::Node::removedLastRef(v38, a2);
                    goto LABEL_176;
                  }
                }
              }
LABEL_59:
              WebCore::ContainerNode::appendChild(v16, (WebCore::Node *)v21, (uint64_t)&v123);
              if (v125)
              {
                v34 = v124;
                v124 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, a2);
                  else
                    *(_DWORD *)v34 -= 2;
                }
              }
              goto LABEL_74;
            }
            v39 = (WTF::StringImpl **)((char *)v115[0] + 32 * v114);
            v40 = 32 * *((_QWORD *)&v114 + 1) - 32 * v114;
            do
            {
              v41 = *v39;
              *v39 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v10);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v39 += 4;
              v40 -= 32;
            }
            while (v40);
          }
          v12 = v115[0];
          if (!v115[0])
            goto LABEL_18;
          goto LABEL_112;
        }
      }
      BYTE6(v117[1]) = 0;
      v118 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      v119 = 0;
      v120 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      goto LABEL_93;
    }
  }
  v47 = *(_QWORD *)(a1 + 16);
  if (v47)
    v16 = *(_QWORD *)(v47 + 8);
  else
    v16 = 0;
  *(_DWORD *)(v16 + 24) += 2;
  v48 = bmalloc::api::isoAllocate();
  v49 = v48;
  *(_OWORD *)(v48 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v48 + 24) = 0x101C00000002;
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = v16 + 96;
  *(_OWORD *)(v48 + 48) = 0u;
  *(_OWORD *)(v48 + 64) = 0u;
  ++*(_DWORD *)(v16 + 3324);
  *(_QWORD *)(v48 + 80) = 0;
  *(_QWORD *)(v48 + 88) = 0;
  v50 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v48 + 96) = v50;
  *(_QWORD *)(v48 + 104) = 0;
  *(_QWORD *)v48 = off_1E33B5118;
  WebCore::ContainerNode::appendChild(v16, (WebCore::Node *)v48, (uint64_t)&v110);
  if ((_BYTE)v112)
  {
    v52 = v111;
    v111 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  v53 = bmalloc::api::isoAllocate();
  v55 = v53;
  *(_OWORD *)(v53 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v53 + 28) = 4124;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = v16 + 96;
  *(_OWORD *)(v53 + 48) = 0u;
  *(_OWORD *)(v53 + 64) = 0u;
  ++*(_DWORD *)(v16 + 3324);
  *(_QWORD *)(v53 + 80) = 0;
  *(_QWORD *)(v53 + 88) = 0;
  v56 = WebCore::HTMLNames::tableTag;
  if (WebCore::HTMLNames::tableTag)
    ++*(_DWORD *)WebCore::HTMLNames::tableTag;
  *(_QWORD *)(v53 + 96) = v56;
  *(_QWORD *)(v53 + 104) = 0;
  *(_QWORD *)v53 = off_1E33CE0B0;
  *(_WORD *)(v53 + 112) = 0;
  *(_DWORD *)(v53 + 116) = 0;
  *(_WORD *)(v53 + 120) = 1;
  *(_QWORD *)(v53 + 128) = 0;
  *(_DWORD *)(v53 + 24) = 4;
  v57 = *(_QWORD *)(a1 + 3344);
  *(_QWORD *)(a1 + 3344) = v55;
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v54);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  WTF::AtomStringImpl::add();
  v123 = v126;
  v58 = *(_QWORD *)(v55 + 104);
  if (!v58)
    goto LABEL_154;
  v59 = *(_DWORD *)(v58 + 4);
  if ((v59 & 1) != 0)
  {
    v60 = *(uint64_t **)(v58 + 40);
    v61 = *(_DWORD *)(v58 + 52);
    if (!v61)
    {
LABEL_154:
      v62 = 0xFFFFFFFFLL;
      goto LABEL_155;
    }
  }
  else
  {
    v60 = (uint64_t *)(v58 + 32);
    v61 = v59 >> 5;
    if (!v61)
      goto LABEL_154;
  }
  v62 = 0;
  while (1)
  {
    v63 = *v60;
    if (*v60 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v63 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v63 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v62;
    v60 += 2;
    if (v61 == v62)
      goto LABEL_154;
  }
LABEL_155:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v55, v62, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v123, 0);
  v65 = v123;
  v123 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  WTF::AtomStringImpl::add();
  WebCore::Element::setAttribute((WebCore::Element *)v55, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v123, 0, &v126, v66);
  if (v128)
  {
    v68 = v127;
    v127 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  v69 = v123;
  v123 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v67);
    else
      *(_DWORD *)v69 -= 2;
  }
  WebCore::ContainerNode::appendChild(v49, (WebCore::Node *)v55, (uint64_t)&v123);
  if (v125)
  {
    v71 = v124;
    v124 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v70);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::processViewport(v16, (uint64_t *)&v122, 4u);
  v72 = (WTF::StringImpl *)v122;
  v122 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
  if (*(_DWORD *)(v55 + 24) == 2)
  {
    if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v55, a2);
  }
  else
  {
    *(_DWORD *)(v55 + 24) -= 2;
  }
  if (*(_DWORD *)(v49 + 24) != 2)
  {
    *(_DWORD *)(v49 + 24) -= 2;
    goto LABEL_176;
  }
  if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
  {
    v38 = (WebCore::Node *)v49;
    goto LABEL_256;
  }
LABEL_176:
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
LABEL_178:
  *(_QWORD *)(a1 + 3368) = *(_QWORD *)(a1 + 3360);
  v73 = *(unsigned int **)v2;
  *(_QWORD *)v2 = 0;
  v110 = (WTF::StringImpl *)v73;
  if (v73)
  {
    v74 = v73[1];
    LODWORD(v111) = v74;
    HIDWORD(v111) = v74;
    v112 = 0;
    v113 = 257;
    if (v74)
    {
      v75 = (v73[4] >> 2) & 1;
      LOBYTE(v113) = (v73[4] & 4) != 0;
      v73 = (unsigned int *)*((_QWORD *)v73 + 1);
      v112 = v73;
      goto LABEL_181;
    }
    v73 = 0;
  }
  else
  {
    v74 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 257;
  }
  v75 = 1;
LABEL_181:
  v116 = 0;
  v114 = 0u;
  *(_OWORD *)v115 = 0u;
  memset(v117, 0, 15);
  v118 = WebCore::SegmentedString::advanceEmpty;
  v119 = 0;
  v120 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
  v121 = 0;
  if (!v74)
  {
    v82 = *(char **)(a1 + 3360);
    goto LABEL_263;
  }
  if (!v75)
  {
    LOWORD(v117[0]) = *(_WORD *)v73;
    if (v74 > 1)
    {
      v118 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      v120 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
      goto LABEL_185;
    }
LABEL_242:
    BYTE6(v117[1]) = 0;
    v118 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    v119 = 0;
    v120 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    v121 = 0;
    goto LABEL_185;
  }
  LOWORD(v117[0]) = *(unsigned __int8 *)v73;
  if (v74 < 2)
    goto LABEL_242;
  BYTE6(v117[1]) = 3;
LABEL_185:
  v76 = 0;
  do
  {
    if (LOWORD(v117[0]) == 10)
    {
      if (!*(_BYTE *)(a1 + 3352))
      {
        v78 = *(_WORD **)(a1 + 3368);
        *v78 = 10;
        *(_QWORD *)(a1 + 3368) = v78 + 1;
        goto LABEL_193;
      }
    }
    else
    {
      if (LOWORD(v117[0]) == 13)
      {
        v77 = *(_WORD **)(a1 + 3368);
        *v77 = 10;
        *(_QWORD *)(a1 + 3368) = v77 + 1;
        v76 = 1;
        *(_BYTE *)(a1 + 3352) = 1;
        goto LABEL_193;
      }
      v79 = *(_WORD **)(a1 + 3368);
      *v79 = v117[0];
      *(_QWORD *)(a1 + 3368) = v79 + 1;
    }
    *(_BYTE *)(a1 + 3352) = 0;
LABEL_193:
    if ((v117[1] & 0x2000000000000) != 0)
    {
      v80 = LOWORD(v117[0]);
      v112 = (unsigned int *)((char *)v112 + 1);
      LOWORD(v117[0]) = *(unsigned __int8 *)v112;
      HIDWORD(v111) = v74 - 1;
      if (v74 == 2 || v80 == 10)
      {
        if ((v117[1] & 0x1000000000000) != 0 && v80 == 10)
        {
          *(_DWORD *)((char *)v117 + 6) = *(_DWORD *)((char *)v117 + 2) - v74 + (_DWORD)v111 + 1;
          ++*(_DWORD *)((char *)&v117[1] + 2);
        }
        if (v74 == 2)
        {
          BYTE6(v117[1]) = 0;
          v118 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          v119 = 0;
          if (HIBYTE(v113))
            v90 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          else
            v90 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          v120 = (uint64_t (*)(uint64_t))v90;
          v121 = 0;
        }
      }
    }
    else
    {
      v88 = v120;
      v89 = (WTF::StringImpl **)((char *)&v110 + (v121 >> 1));
      if ((v121 & 1) != 0)
        v88 = *(uint64_t (**)(uint64_t))(*v89 + v120);
      v88((uint64_t)v89);
    }
    v81 = *(char **)(a1 + 3368);
    v82 = *(char **)(a1 + 3360);
    v83 = v81 - v82;
    v84 = *(int *)(a1 + 3356);
    if (v84 - 10 < (v81 - v82) >> 1)
    {
      v85 = 2 * v84;
      v86 = v84 + 10;
      if (v85 <= v86)
        v87 = v86;
      else
        v87 = v85;
      v82 = (char *)WTF::fastRealloc(*(WTF **)(a1 + 3360), (void *)(2 * v87));
      *(_QWORD *)(a1 + 3360) = v82;
      v81 = &v82[2 * (int)(v83 >> 1)];
      *(_QWORD *)(a1 + 3368) = v81;
      *(_DWORD *)(a1 + 3356) = v87;
    }
    v74 = HIDWORD(v111);
  }
  while (HIDWORD(v111));
  if ((v76 & 1) == 0)
  {
LABEL_263:
    *(_QWORD *)(a1 + 3368) = v82;
    goto LABEL_264;
  }
  if (v82 >= v81)
  {
    a2 = (WTF::StringImpl *)v82;
  }
  else
  {
    v91 = (WTF::StringImpl **)(a1 + 3376);
    a2 = (WTF::StringImpl *)v82;
    do
    {
      if (*(_WORD *)v82 == 10)
      {
        WTF::StringBuilder::append();
        v92 = *v91;
        if (*v91
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)(a1 + 3376)),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)(a1 + 3376)),
              (v92 = *v91) != 0))
        {
          *(_DWORD *)v92 += 2;
        }
        v126 = v92;
        WebCore::FTPDirectoryDocumentParser::parseAndAppendOneLine((WebCore::FTPDirectoryDocumentParser *)a1, (const WTF::String *)&v126);
        v94 = v126;
        v126 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v93);
          else
            *(_DWORD *)v94 -= 2;
        }
        v95 = *v91;
        *v91 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, v93);
          else
            *(_DWORD *)v95 -= 2;
        }
        v96 = *(WTF::StringImpl **)(a1 + 3384);
        *(_QWORD *)(a1 + 3384) = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 == 2)
            WTF::StringImpl::destroy(v96, v93);
          else
            *(_DWORD *)v96 -= 2;
        }
        *(_DWORD *)(a1 + 3392) = 0;
        a2 = (WTF::StringImpl *)(v82 + 2);
        v81 = *(char **)(a1 + 3368);
        v82 += 2;
      }
      else
      {
        v82 += 2;
      }
    }
    while (v82 < v81);
  }
  if (v82 - (char *)a2 >= 3)
    WTF::StringBuilder::append();
LABEL_264:
  v97 = v114;
  v98 = v115[0];
  if ((unint64_t)v114 > *((_QWORD *)&v114 + 1))
  {
    if (*((_QWORD *)&v114 + 1))
    {
      v103 = 32 * *((_QWORD *)&v114 + 1);
      do
      {
        v104 = *(WTF::StringImpl **)v98;
        *(_QWORD *)v98 = 0;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, a2);
          else
            *(_DWORD *)v104 -= 2;
        }
        v98 = (WTF *)((char *)v98 + 32);
        v103 -= 32;
      }
      while (v103);
      v98 = v115[0];
      v97 = v114;
    }
    if (v97 != LODWORD(v115[1]))
    {
      v105 = (WTF::StringImpl **)((char *)v98 + 32 * v97);
      v106 = 32 * LODWORD(v115[1]) - 32 * v97;
      do
      {
        v107 = *v105;
        *v105 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, a2);
          else
            *(_DWORD *)v107 -= 2;
        }
        v105 += 4;
        v106 -= 32;
      }
      while (v106);
    }
LABEL_281:
    v98 = v115[0];
    if (!v115[0])
      goto LABEL_268;
LABEL_282:
    v115[0] = 0;
    LODWORD(v115[1]) = 0;
    WTF::fastFree(v98, a2);
    goto LABEL_268;
  }
  if ((_QWORD)v114 != *((_QWORD *)&v114 + 1))
  {
    v100 = (WTF::StringImpl **)((char *)v115[0] + 32 * v114);
    v101 = 32 * *((_QWORD *)&v114 + 1) - 32 * v114;
    do
    {
      v102 = *v100;
      *v100 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, a2);
        else
          *(_DWORD *)v102 -= 2;
      }
      v100 += 4;
      v101 -= 32;
    }
    while (v101);
    goto LABEL_281;
  }
  if (v115[0])
    goto LABEL_282;
LABEL_268:
  result = v110;
  v110 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FTPDirectoryDocumentParser::finish(WebCore::FTPDirectoryDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*((_DWORD *)this + 848))
  {
    v3 = (WTF::StringImpl **)((char *)this + 3376);
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 422);
    if (v4
      || (WTF::StringBuilder::shrinkToFit((WebCore::FTPDirectoryDocumentParser *)((char *)this + 3376)),
          WTF::StringBuilder::reifyString((WebCore::FTPDirectoryDocumentParser *)((char *)this + 3376)),
          (v4 = *v3) != 0))
    {
      *(_DWORD *)v4 += 2;
    }
    v10 = v4;
    WebCore::FTPDirectoryDocumentParser::parseAndAppendOneLine(this, (const WTF::String *)&v10);
    v5 = v10;
    v10 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *v3;
    *v3 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 423);
    *((_QWORD *)this + 423) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *((_DWORD *)this + 848) = 0;
  }
  v8 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  WTF::fastFree(*((WTF **)this + 420), a2);
  WebCore::HTMLDocumentParser::finish(this, v9);
}

double WebCore::FTPDirectoryDocument::createParser@<D0>(WebCore::FTPDirectoryDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = WTF::fastMalloc((WTF *)0xDF0);
  v5 = WebCore::HTMLDocumentParser::HTMLDocumentParser(v4, (uint64_t)this, 5);
  *(_QWORD *)v5 = off_1E33B1970;
  *(_QWORD *)(v5 + 88) = &unk_1E33B1A98;
  *(_QWORD *)(v5 + 96) = &unk_1E33B1AE0;
  *(_QWORD *)(v5 + 3344) = 0;
  *(_BYTE *)(v5 + 3352) = 0;
  *(_DWORD *)(v5 + 3356) = 254;
  v6 = WTF::fastMalloc((WTF *)0x1FC);
  *(_QWORD *)(v4 + 3360) = v6;
  *(_QWORD *)(v4 + 3368) = v6;
  result = 0.0;
  *(_OWORD *)(v4 + 3376) = 0u;
  *(_DWORD *)(v4 + 3392) = 0;
  *(_BYTE *)(v4 + 3396) = 1;
  *(_DWORD *)(v4 + 3552) = 0;
  *(_QWORD *)(v4 + 3560) = 0;
  *(_OWORD *)(v4 + 3400) = 0u;
  *(_OWORD *)(v4 + 3416) = 0u;
  *(_OWORD *)(v4 + 3432) = 0u;
  *(_OWORD *)(v4 + 3448) = 0u;
  *(_WORD *)(v4 + 3464) = 0;
  *a2 = v4;
  return result;
}

__n128 WebCore::DOMURL::fullURL@<Q0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;
  __n128 v4;

  v2 = (_DWORD *)this[1].n128_u64[1];
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  result = this[2];
  v4 = this[3];
  *(__n128 *)(a2 + 8) = result;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

WTF::StringImpl *WebCore::DOMURL::setFullURL(WebCore::DOMURL *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  result = WebCore::DOMURL::setHref(this, a2, &v4);
  if (v6)
  {
    result = v5;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

void WebCore::DateInputType::~DateInputType(WebCore::DateInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::DateInputType::~DateInputType(WebCore::DateInputType *this, void *a2)
{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::DateTimeLocalInputType::~DateTimeLocalInputType(WebCore::DateTimeLocalInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::DateTimeLocalInputType::~DateTimeLocalInputType(WebCore::DateTimeLocalInputType *this, void *a2)
{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateTimeLocalInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateTimeLocalInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateTimeLocalInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::DateTimeLocalInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::EmailInputType::~EmailInputType(WebCore::EmailInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::EmailInputType::~EmailInputType(WebCore::EmailInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::EmailInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::FTPDirectoryDocumentParser::~FTPDirectoryDocumentParser(WebCore::FTPDirectoryDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::HTMLDocumentParser::~HTMLDocumentParser(this, a2);
}

uint64_t WebCore::HTMLDocumentParser::ptrCount(WebCore::HTMLDocumentParser *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t WebCore::HTMLDocumentParser::ptrCountWithoutThreadCheck(WebCore::HTMLDocumentParser *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t WebCore::HTMLDocumentParser::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 104);
  return this;
}

uint64_t WebCore::HTMLDocumentParser::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 104);
  if (v1)
  {
    *(_DWORD *)(this + 104) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::HTMLDocumentParser::inputStream(WebCore::HTMLDocumentParser *this)
{
  return (uint64_t)this + 120;
}

BOOL WebCore::HTMLDocumentParser::hasPreloadScanner(WebCore::HTMLDocumentParser *this)
{
  return *((_QWORD *)this + 411) != 0;
}

void `non-virtual thunk to'WebCore::FTPDirectoryDocumentParser::~FTPDirectoryDocumentParser(WebCore::FTPDirectoryDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::FTPDirectoryDocumentParser *)((char *)this - 88), a2);
}

{
  WebCore::FTPDirectoryDocumentParser::operator delete((WebCore::FTPDirectoryDocumentParser *)((char *)this - 88), a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::FTPDirectoryDocumentParser *)((char *)this - 96), a2);
}

{
  WebCore::FTPDirectoryDocumentParser::operator delete((WebCore::FTPDirectoryDocumentParser *)((char *)this - 96), a2);
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::inputStream(WebCore::HTMLDocumentParser *this)
{
  return (uint64_t)this + 32;
}

BOOL `non-virtual thunk to'WebCore::HTMLDocumentParser::hasPreloadScanner(WebCore::HTMLDocumentParser *this)
{
  return *((_QWORD *)this + 400) != 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::ptrCount(WebCore::HTMLDocumentParser *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::ptrCountWithoutThreadCheck(WebCore::HTMLDocumentParser *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebCore::FTPDirectoryDocument::~FTPDirectoryDocument(WebCore::FTPDirectoryDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::FTPDirectoryDocument::~FTPDirectoryDocument(WebCore::FTPDirectoryDocument *this, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FTPDirectoryDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WTF::VectorBuffer<WTF::AtomString,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void *WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  void *result;

  v3 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
  v4 = *v3;
  *v3 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = memmove(v3, v3 + 1, *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12) - (_QWORD)(v3 + 1));
  --*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_QWORD *result, uint64_t a2, unsigned int a3, char a4, uint64_t *a5, uint64_t a6)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  _BYTE *v32;
  size_t v33;
  unsigned int v34;
  char *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE *__src;
  _QWORD *v62;
  _QWORD v63[3];

  v7 = a3;
  v63[2] = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0)
  {
    v56 = -a3;
    v8 = 1;
    do
    {
      ++v8;
      v40 = v56 >= 0xA;
      v56 /= 0xAu;
    }
    while (v40);
  }
  else
  {
    v8 = 0;
    v9 = a3;
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v10);
  }
  v11 = *a5;
  v12 = *((_DWORD *)a5 + 2);
  if ((v12 & 0x80000000) != 0)
  {
    v57 = -v12;
    v13 = 1;
    do
    {
      ++v13;
      v40 = v57 >= 0xA;
      v57 /= 0xAu;
    }
    while (v40);
  }
  else
  {
    v13 = 0;
    do
    {
      ++v13;
      v10 = v12 > 9;
      v12 /= 0xAu;
    }
    while (v10);
  }
  if (*(_DWORD *)(v11 + 4) > v13)
    v13 = *(_DWORD *)(v11 + 4);
  v14 = *(_DWORD *)(a6 + 8);
  if (((v14 | v13) & 0x80000000) != 0)
    goto LABEL_63;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
    goto LABEL_63;
  v17 = 0;
  v18 = v16 + 1;
  v19 = __OFADD__(v16, 1);
  if ((v8 & 0x80000000) == 0 && !v19)
  {
    v17 = 0;
    v20 = *(_DWORD *)(a2 + 8);
    v15 = __OFADD__(v8, v18);
    v21 = v8 + v18;
    v22 = v15;
    if ((v20 & 0x80000000) == 0 && !v22)
    {
      v23 = (v20 + v21);
      if (!__OFADD__(v20, v21))
      {
        if (!(_DWORD)v23)
        {
          v17 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_60;
        }
        v62 = result;
        if ((v23 & 0x80000000) != 0)
        {
          v17 = 0;
        }
        else
        {
          v24 = *(_BYTE **)a2;
          v25 = *(unsigned int *)(a2 + 8);
          v26 = a5[1];
          __src = *(_BYTE **)a6;
          v27 = *(unsigned int *)(a6 + 8);
          WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
          v17 = v63[0];
          if (v63[0])
          {
            v28 = (_BYTE *)(v63[0] + 20);
            *(_DWORD *)v63[0] = 2;
            *(_DWORD *)(v17 + 4) = v23;
            *(_QWORD *)(v17 + 8) = v17 + 20;
            *(_DWORD *)(v17 + 16) = 4;
            if ((_DWORD)v25)
            {
              if ((_DWORD)v25 == 1)
                *v28 = *v24;
              else
                memcpy((void *)(v17 + 20), v24, v25);
            }
            v29 = &v28[v25];
            v30 = 0;
            if ((v7 & 0x80000000) != 0)
            {
              v52 = -v7;
              do
              {
                *((_BYTE *)&v63[1] + v30-- + 4) = (v52 % 0xA) | 0x30;
                v10 = v52 > 9;
                v52 /= 0xAu;
              }
              while (v10);
              v53 = v30 + 12;
              v32 = (char *)&v63[1] + v30 + 4;
              *v32 = 45;
              if (v30 + 14 > 14)
                goto LABEL_34;
              if (v53 <= 12)
                v53 = 12;
              v33 = v53 - v30 - 11;
            }
            else
            {
              v31 = v7;
              do
              {
                *((_BYTE *)&v63[1] + v30-- + 4) = (v31 % 0xA) | 0x30;
                v10 = v31 > 9;
                v31 /= 0xAu;
              }
              while (v10);
              if (v30 + 14 > 13)
                goto LABEL_34;
              v32 = (char *)&v63[1] + v30 + 5;
              v33 = -v30;
            }
            memcpy(v29, v32, v33);
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              v58 = -v7;
              v34 = 1;
              do
              {
                ++v34;
                v40 = v58 >= 0xA;
                v58 /= 0xAu;
              }
              while (v40);
            }
            else
            {
              v34 = 0;
              do
              {
                ++v34;
                v10 = v7 > 9;
                v7 /= 0xAu;
              }
              while (v10);
            }
            v35 = &v29[v34];
            *v35 = a4;
            v36 = v35 + 1;
            if ((v26 & 0x80000000) != 0)
            {
              v59 = -(int)v26;
              v37 = 1;
              do
              {
                ++v37;
                v40 = v59 >= 0xA;
                v59 /= 0xAu;
              }
              while (v40);
            }
            else
            {
              v37 = 0;
              v38 = v26;
              do
              {
                ++v37;
                v10 = v38 > 9;
                v38 /= 0xAu;
              }
              while (v10);
            }
            v39 = *(_DWORD *)(v11 + 4);
            v40 = v39 >= v37;
            v41 = v39 - v37;
            if ((_DWORD)v41 != 0 && v40)
            {
              v42 = v36;
              v43 = v41;
              do
              {
                *v42++ = *(_BYTE *)v11;
                --v43;
              }
              while (v43);
            }
            else
            {
              v41 = 0;
            }
            v44 = &v36[v41];
            v45 = 0;
            if ((v26 & 0x80000000) != 0)
            {
              v54 = -(int)v26;
              do
              {
                *((_BYTE *)&v63[1] + v45-- + 4) = (v54 % 0xA) | 0x30;
                v10 = v54 > 9;
                v54 /= 0xAu;
              }
              while (v10);
              v55 = v45 + 12;
              v47 = (char *)&v63[1] + v45 + 4;
              *v47 = 45;
              if (v45 + 14 <= 14)
              {
                if (v55 <= 12)
                  v55 = 12;
                v48 = v55 - v45 - 11;
                goto LABEL_49;
              }
            }
            else
            {
              v46 = v26;
              do
              {
                *((_BYTE *)&v63[1] + v45-- + 4) = (v46 % 0xA) | 0x30;
                v10 = v46 > 9;
                v46 /= 0xAu;
              }
              while (v10);
              if (v45 + 14 <= 13)
              {
                v47 = (char *)&v63[1] + v45 + 5;
                v48 = -v45;
LABEL_49:
                memcpy(v44, v47, v48);
              }
            }
            if ((v26 & 0x80000000) != 0)
            {
              v60 = -(int)v26;
              LODWORD(v49) = 1;
              do
              {
                LODWORD(v49) = v49 + 1;
                v40 = v60 >= 0xA;
                v60 /= 0xAu;
              }
              while (v40);
            }
            else
            {
              LODWORD(v49) = 0;
              do
              {
                LODWORD(v49) = v49 + 1;
                v10 = v26 > 9;
                LODWORD(v26) = v26 / 0xA;
              }
              while (v10);
            }
            v50 = *(_DWORD *)(v11 + 4);
            if (v50 <= v49)
              v49 = v49;
            else
              v49 = v50;
            if ((_DWORD)v27)
            {
              v51 = &v36[v49];
              if ((_DWORD)v27 == 1)
                *v51 = *__src;
              else
                memcpy(v51, __src, v27);
            }
          }
        }
        result = v62;
        goto LABEL_60;
      }
LABEL_63:
      v17 = 0;
    }
  }
LABEL_60:
  *result = v17;
  return result;
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *result, int8x16_t **a2, char a3, unsigned int a4, int8x16_t **a5, unsigned int a6, uint64_t a7)
{
  unsigned int v8;
  unsigned int v9;
  char *v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  int8x16_t *v30;
  size_t v31;
  int8x16_t *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  _WORD *v44;
  uint64_t v45;
  unsigned int v46;
  size_t v47;
  _WORD *v48;
  BOOL v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  size_t v54;
  unsigned int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int8x16_t *v61;
  size_t v62;
  unsigned int v63;
  uint64_t v64;
  _WORD *v65;
  unsigned int v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int16 v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  char *v92;
  char *v93;
  char *v94;
  __int16 v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  _BYTE *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  _BYTE *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  char *v108;
  char *v109;
  unsigned __int128 v110;
  char v111;
  char *v112;
  size_t v113;
  _QWORD v114[3];
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;

  v8 = a6;
  v9 = a4;
  v10 = result;
  v114[2] = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x80000000) != 0)
  {
    v96 = -a4;
    v11 = 1;
    do
    {
      ++v11;
      v49 = v96 >= 0xA;
      v96 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v11 = 0;
    v12 = a4;
    do
    {
      ++v11;
      v13 = v12 > 9;
      v12 /= 0xAu;
    }
    while (v13);
  }
  if ((a6 & 0x80000000) != 0)
  {
    v97 = -a6;
    v14 = 1;
    do
    {
      ++v14;
      v49 = v97 >= 0xA;
      v97 /= 0xAu;
    }
    while (v49);
  }
  else
  {
    v14 = 0;
    v15 = a6;
    do
    {
      ++v14;
      v13 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v13);
  }
  if (a7)
    v16 = *(_DWORD *)(a7 + 4);
  else
    v16 = 0;
  if ((v16 | v14) < 0)
    goto LABEL_119;
  v17 = 0;
  v18 = *((_DWORD *)a5 + 2);
  v19 = __OFADD__(v14, v16);
  v20 = v14 + v16;
  v21 = v19;
  if (v18 < 0 || (v21 & 1) != 0)
    goto LABEL_115;
  v17 = 0;
  v19 = __OFADD__(v18, v20);
  v22 = v18 + v20;
  v23 = v19;
  if (v11 < 0 || v23)
    goto LABEL_115;
  v19 = __OFADD__(v11, v22);
  v24 = v11 + v22;
  if (v19)
    goto LABEL_119;
  v17 = 0;
  v25 = *((_DWORD *)a2 + 2);
  v19 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  v27 = v19;
  if (v25 < 0 || (v27 & 1) != 0)
    goto LABEL_115;
  v28 = (v25 + v26);
  if (__OFADD__(v25, v26))
    goto LABEL_119;
  if (a7)
  {
    v30 = *a2;
    v31 = *((unsigned int *)a2 + 2);
    v32 = *a5;
    v113 = *((unsigned int *)a5 + 2);
    if ((*(_BYTE *)(a7 + 16) & 4) == 0)
    {
      if ((_DWORD)v28)
      {
        if (v28 <= 0x7FFFFFEF)
        {
          result = (char *)WTF::tryFastCompactMalloc((WTF *)(2 * v28 + 20));
          v17 = v114[0];
          if (v114[0])
          {
            v33 = (char *)(v114[0] + 20);
            *(_DWORD *)v114[0] = 2;
            *(_DWORD *)(v17 + 4) = v28;
            *(_QWORD *)(v17 + 8) = v17 + 20;
            *(_DWORD *)(v17 + 16) = 0;
            v34 = (char *)(v17 + 20 + 2 * v31);
            if ((v31 & 0xFFFFFFC0) != 0)
            {
              v35 = &v33[2 * (v31 & 0xFFFFFFC0)];
              v36 = 0uLL;
              do
              {
                v115.val[0] = *v30;
                v37 = v30[1];
                v118.val[0] = v30[2];
                v38 = v30[3];
                v30 += 4;
                v39 = v38;
                v118.val[1] = 0uLL;
                v121.val[0] = v37;
                v115.val[1] = 0uLL;
                v40 = v33;
                vst2q_s8(v40, v115);
                v40 += 32;
                v121.val[1] = 0uLL;
                vst2q_s8(v40, v121);
                v41 = v33 + 64;
                vst2q_s8(v41, v118);
                v42 = v33 + 96;
                vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
                v33 += 128;
              }
              while (v33 != v35);
              v33 = v35;
            }
            while (v33 != v34)
            {
              v43 = v30->u8[0];
              v30 = (int8x16_t *)((char *)v30 + 1);
              *(_WORD *)v33 = v43;
              v33 += 2;
            }
            *(_WORD *)v34 = a3;
            v44 = v34 + 2;
            if ((v9 & 0x80000000) != 0)
            {
              v63 = -v9;
              v64 = 12;
              v47 = v113;
              do
              {
                *((_BYTE *)v114 + v64--) = (v63 % 0xA) | 0x30;
                v13 = v63 > 9;
                v63 /= 0xAu;
              }
              while (v13);
              *((_BYTE *)v114 + v64) = 45;
              if (v64 + 2 <= 14)
              {
                v65 = v44;
                do
                {
                  *v65++ = *((unsigned __int8 *)v114 + v64);
                  v13 = v64++ < 12;
                }
                while (v13);
              }
            }
            else
            {
              v45 = 0;
              v46 = v9;
              v47 = v113;
              do
              {
                *((_BYTE *)&v114[1] + v45-- + 4) = (v46 % 0xA) | 0x30;
                v13 = v46 > 9;
                v46 /= 0xAu;
              }
              while (v13);
              if (v45 + 14 <= 13)
              {
                v48 = v44;
                do
                {
                  *v48++ = *((unsigned __int8 *)&v114[1] + v45 + 5);
                  v49 = __CFADD__(v45++, 1);
                }
                while (!v49);
              }
            }
            if ((v9 & 0x80000000) != 0)
            {
              v106 = -v9;
              v66 = 1;
              do
              {
                ++v66;
                v49 = v106 >= 0xA;
                v106 /= 0xAu;
              }
              while (v49);
            }
            else
            {
              v66 = 0;
              do
              {
                ++v66;
                v13 = v9 > 9;
                v9 /= 0xAu;
              }
              while (v13);
            }
            v67 = (char *)&v44[v66];
            v68 = &v67[2 * v47];
            if ((v47 & 0xFFFFFFC0) != 0)
            {
              v69 = &v67[2 * (v47 & 0xFFFFFFC0)];
              v70 = 0uLL;
              do
              {
                v116.val[0] = *v32;
                v71 = v32[1];
                v119.val[0] = v32[2];
                v72 = v32[3];
                v32 += 4;
                v73 = v72;
                v119.val[1] = 0uLL;
                v122.val[0] = v71;
                v116.val[1] = 0uLL;
                v74 = v67;
                vst2q_s8(v74, v116);
                v74 += 32;
                v122.val[1] = 0uLL;
                vst2q_s8(v74, v122);
                v75 = v67 + 64;
                vst2q_s8(v75, v119);
                v76 = v67 + 96;
                vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
                v67 += 128;
              }
              while (v67 != v69);
              v67 = v69;
            }
            while (v67 != v68)
            {
              v77 = v32->u8[0];
              v32 = (int8x16_t *)((char *)v32 + 1);
              *(_WORD *)v67 = v77;
              v67 += 2;
            }
            if ((v8 & 0x80000000) != 0)
            {
              v81 = -v8;
              v82 = 12;
              do
              {
                *((_BYTE *)v114 + v82--) = (v81 % 0xA) | 0x30;
                v13 = v81 > 9;
                v81 /= 0xAu;
              }
              while (v13);
              *((_BYTE *)v114 + v82) = 45;
              if (v82 + 2 <= 14)
              {
                v83 = v68;
                do
                {
                  *(_WORD *)v83 = *((unsigned __int8 *)v114 + v82);
                  v83 += 2;
                  v13 = v82++ < 12;
                }
                while (v13);
              }
            }
            else
            {
              v78 = 0;
              v79 = v8;
              do
              {
                *((_BYTE *)&v114[1] + v78-- + 4) = (v79 % 0xA) | 0x30;
                v13 = v79 > 9;
                v79 /= 0xAu;
              }
              while (v13);
              if (v78 + 14 <= 13)
              {
                v80 = v68;
                do
                {
                  *(_WORD *)v80 = *((unsigned __int8 *)&v114[1] + v78 + 5);
                  v80 += 2;
                  v49 = __CFADD__(v78++, 1);
                }
                while (!v49);
              }
            }
            if ((v8 & 0x80000000) != 0)
            {
              v107 = -v8;
              v84 = 1;
              do
              {
                ++v84;
                v49 = v107 >= 0xA;
                v107 /= 0xAu;
              }
              while (v49);
            }
            else
            {
              v84 = 0;
              do
              {
                ++v84;
                v13 = v8 > 9;
                v8 /= 0xAu;
              }
              while (v13);
            }
            result = &v68[2 * v84];
            v61 = *(int8x16_t **)(a7 + 8);
            v85 = *(unsigned int *)(a7 + 4);
            if ((*(_BYTE *)(a7 + 16) & 4) == 0)
            {
              if ((_DWORD)v85 == 1)
              {
                *(_WORD *)result = v61->i16[0];
                goto LABEL_115;
              }
              if (!(_DWORD)v85)
                goto LABEL_115;
              v62 = 2 * v85;
              goto LABEL_75;
            }
            v86 = &result[2 * v85];
            if (v85 >= 0x40)
            {
              v87 = &result[2 * (v85 & 0xFFFFFFC0)];
              v88 = 0uLL;
              do
              {
                v117.val[0] = *v61;
                v89 = v61[1];
                v120.val[0] = v61[2];
                v90 = v61[3];
                v61 += 4;
                v91 = v90;
                v120.val[1] = 0uLL;
                v123.val[0] = v89;
                v117.val[1] = 0uLL;
                v92 = result;
                vst2q_s8(v92, v117);
                v92 += 32;
                v123.val[1] = 0uLL;
                vst2q_s8(v92, v123);
                v93 = result + 64;
                vst2q_s8(v93, v120);
                v94 = result + 96;
                vst2q_s8(v94, *(int8x16x2_t *)(&v88 - 1));
                result += 128;
              }
              while (result != v87);
              result = v87;
            }
            while (result != v86)
            {
              v95 = v61->u8[0];
              v61 = (int8x16_t *)((char *)v61 + 1);
              *(_WORD *)result = v95;
              result += 2;
            }
          }
          goto LABEL_115;
        }
LABEL_119:
        v17 = 0;
        goto LABEL_115;
      }
LABEL_125:
      v17 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_115;
    }
    if (!(_DWORD)v28)
      goto LABEL_125;
    if ((v28 & 0x80000000) != 0)
      goto LABEL_119;
  }
  else
  {
    if (!(_DWORD)v28)
      goto LABEL_125;
    v30 = *a2;
    v31 = *((unsigned int *)a2 + 2);
    v32 = *a5;
    v113 = *((unsigned int *)a5 + 2);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_119;
  }
  v112 = result;
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
  v17 = v114[0];
  if (!v114[0])
  {
LABEL_164:
    v10 = v112;
    goto LABEL_115;
  }
  v50 = (_BYTE *)(v114[0] + 20);
  *(_DWORD *)v114[0] = 2;
  *(_DWORD *)(v17 + 4) = v28;
  *(_QWORD *)(v17 + 8) = v17 + 20;
  *(_DWORD *)(v17 + 16) = 4;
  if ((_DWORD)v31)
  {
    if ((_DWORD)v31 == 1)
      *v50 = v30->i8[0];
    else
      result = (char *)memcpy((void *)(v17 + 20), v30, v31);
  }
  v50[v31] = a3;
  v51 = &v50[v31 + 1];
  v52 = 0;
  if ((v9 & 0x80000000) != 0)
  {
    v98 = -v9;
    do
    {
      *((_BYTE *)&v114[1] + v52-- + 4) = (v98 % 0xA) | 0x30;
      v13 = v98 > 9;
      v98 /= 0xAu;
    }
    while (v13);
    v99 = v52 + 12;
    v100 = (char *)&v114[1] + v52 + 4;
    *v100 = 45;
    if (v52 + 14 <= 14)
    {
      if (v99 <= 12)
        v99 = 12;
      result = (char *)memcpy(&v50[v31 + 1], v100, v99 - v52 - 11);
    }
    v10 = v112;
    v54 = v113;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_58;
  }
  else
  {
    v53 = v9;
    v10 = v112;
    v54 = v113;
    do
    {
      *((_BYTE *)&v114[1] + v52-- + 4) = (v53 % 0xA) | 0x30;
      v13 = v53 > 9;
      v53 /= 0xAu;
    }
    while (v13);
    if (v52 + 14 <= 13)
      result = (char *)memcpy(v51, (char *)&v114[1] + v52 + 5, -v52);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_58:
      v55 = 0;
      do
      {
        ++v55;
        v13 = v9 > 9;
        v9 /= 0xAu;
      }
      while (v13);
      goto LABEL_60;
    }
  }
  v101 = -v9;
  v55 = 1;
  do
  {
    ++v55;
    v49 = v101 >= 0xA;
    v101 /= 0xAu;
  }
  while (v49);
LABEL_60:
  v56 = &v51[v55];
  if ((_DWORD)v54)
  {
    if ((_DWORD)v54 == 1)
      *v56 = v32->i8[0];
    else
      result = (char *)memcpy(&v51[v55], v32, v54);
  }
  v57 = &v56[v54];
  v58 = 0;
  if ((v8 & 0x80000000) != 0)
  {
    v102 = -v8;
    do
    {
      *((_BYTE *)&v114[1] + v58-- + 4) = (v102 % 0xA) | 0x30;
      v13 = v102 > 9;
      v102 /= 0xAu;
    }
    while (v13);
    v103 = v58 + 12;
    v104 = (char *)&v114[1] + v58 + 4;
    *v104 = 45;
    if (v58 + 14 <= 14)
    {
      if (v103 <= 12)
        v103 = 12;
      result = (char *)memcpy(v57, v104, v103 - v58 - 11);
    }
    v10 = v112;
    if ((v8 & 0x80000000) == 0)
      goto LABEL_69;
  }
  else
  {
    v59 = v8;
    do
    {
      *((_BYTE *)&v114[1] + v58-- + 4) = (v59 % 0xA) | 0x30;
      v13 = v59 > 9;
      v59 /= 0xAu;
    }
    while (v13);
    if (v58 + 14 <= 13)
      result = (char *)memcpy(v57, (char *)&v114[1] + v58 + 5, -v58);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_69:
      v60 = 0;
      do
      {
        ++v60;
        v13 = v8 > 9;
        v8 /= 0xAu;
      }
      while (v13);
      goto LABEL_71;
    }
  }
  v105 = -v8;
  v60 = 1;
  do
  {
    ++v60;
    v49 = v105 >= 0xA;
    v105 /= 0xAu;
  }
  while (v49);
LABEL_71:
  if (!a7)
    goto LABEL_115;
  result = &v57[v60];
  v61 = *(int8x16_t **)(a7 + 8);
  v62 = *(unsigned int *)(a7 + 4);
  if ((*(_BYTE *)(a7 + 16) & 4) == 0)
  {
    v108 = &result[v62];
    if (v62 >= 0x10)
    {
      v109 = &result[v62 & 0xFFFFFFF0];
      do
      {
        v110 = (unsigned __int128)vld2q_s8(v61->i8);
        v61 += 2;
        *(_OWORD *)result = v110;
        result += 16;
      }
      while (result != v109);
      result = v109;
    }
    while (result != v108)
    {
      v111 = v61->i8[0];
      v61 = (int8x16_t *)((char *)v61 + 2);
      *result++ = v111;
    }
    goto LABEL_164;
  }
  if ((_DWORD)v62)
  {
    if ((_DWORD)v62 == 1)
    {
      *result = v61->i8[0];
      goto LABEL_115;
    }
LABEL_75:
    result = (char *)memcpy(result, v61, v62);
  }
LABEL_115:
  *(_QWORD *)v10 = v17;
  return result;
}

void WebCore::FTPDirectoryDocumentParser::operator delete(WebCore::HTMLDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::HTMLDocumentParser::~HTMLDocumentParser(this, a2);
  if (*((_DWORD *)this + 26))
    bzero(this, 0xDF0uLL);
  else
    WTF::fastFree(this, v6);
}

_DWORD **WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>::hash<WTF::StringView>(*a2, a2[1]);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      result = *(_QWORD *)(v3 + 8 * v7);
      if (!result)
        break;
      if (result != -1
        && WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>::equal<WTF::AtomString,WTF::StringView>(result, (unsigned __int8 *)*a2, a2[1]))
      {
        return v3 + 8 * v7;
      }
      ++i;
    }
  }
  return result;
}

uint64_t WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>::hash<WTF::StringView>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v2 = -1640531527;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((a2 & 0xFFFFFFFE) != 0)
    {
      v3 = 0;
      do
      {
        v4 = (*(unsigned __int8 *)(a1 + v3 + 1) << 11) ^ ((v2 + *(unsigned __int8 *)(a1 + v3)) << 16) ^ (v2 + *(unsigned __int8 *)(a1 + v3));
        v2 = v4 + (v4 >> 11);
        v5 = v3 + 3;
        v3 += 2;
      }
      while (v5 < a2);
    }
    if ((a2 & 1) == 0)
      goto LABEL_6;
    v10 = *(unsigned __int8 *)(a2 + a1 - 1);
LABEL_10:
    v2 = ((v2 + v10) ^ ((v2 + v10) << 11)) + (((v2 + v10) ^ ((v2 + v10) << 11)) >> 17);
    goto LABEL_6;
  }
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    v11 = 0;
    do
    {
      v12 = (*(unsigned __int16 *)(a1 + 2 * v11 + 2) << 11) ^ ((v2 + *(unsigned __int16 *)(a1 + 2 * v11)) << 16) ^ (v2 + *(unsigned __int16 *)(a1 + 2 * v11));
      v2 = v12 + (v12 >> 11);
      v13 = v11 + 3;
      v11 += 2;
    }
    while (v13 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v10 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    goto LABEL_10;
  }
LABEL_6:
  v6 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
  v8 = (v7 ^ (v7 << 10)) & 0xFFFFFF;
  if (v8)
    return v8;
  else
    return 0x800000;
}

BOOL WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>::equal<WTF::AtomString,WTF::StringView>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;

  if (a1)
  {
    v5 = a1;
    v6 = *(_DWORD *)(a1 + 16);
    a1 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((v6 >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0x100000000;
  }
  return WTF::operator==((unsigned __int8 *)a1, v7, a2, a3);
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(WTF::StringImpl **)a2;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v13 = v11 & v8;
    v14 = (WTF::StringImpl **)(v6 + 8 * v13);
    v15 = *v14;
    if (!*v14)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *(WTF::StringImpl **)a2;
        v14 = v9;
      }
      *(_QWORD *)a2 = 0;
      result = (uint64_t *)*v14;
      *v14 = v10;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_23;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_23:
        v18 = v21 + 8 * v24;
        v17 = 1;
        goto LABEL_11;
      }
      result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(v4, v14);
      v14 = (WTF::StringImpl **)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_23;
    }
    if (v15 != (WTF::StringImpl *)-1)
      break;
    v9 = (WTF::StringImpl **)(v6 + 8 * v13);
LABEL_33:
    v11 = i + v13;
  }
  if (v15 != v10)
    goto LABEL_33;
  if ((v7 & 1) != 0)
    v16 = 0;
  else
    v16 = *(unsigned int *)(v6 - 4);
  v17 = 0;
  v18 = v6 + 8 * v16;
LABEL_11:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v4, a2);
}

WebCore::URLSearchParams *WTF::RefCounted<WebCore::URLSearchParams>::deref(WebCore::URLSearchParams *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::URLSearchParams::~URLSearchParams(result, a2);
    return (WebCore::URLSearchParams *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v8 = 0;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(a2 + 8);
  do
  {
    ++v8;
    v11 = v10 > 9;
    v10 /= 0xAu;
  }
  while (v11);
  v12 = 0;
  v13 = *(_QWORD *)a4;
  v14 = *(_DWORD *)(a4 + 8);
  do
  {
    ++v12;
    v11 = v14 > 9;
    v14 /= 0xAu;
  }
  while (v11);
  v15 = 0;
  v16 = *(_QWORD *)a6;
  v17 = *(_DWORD *)(a6 + 8);
  do
  {
    ++v15;
    v11 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v11);
  if (*(_DWORD *)(v9 + 4) > v8)
    v8 = *(_DWORD *)(v9 + 4);
  if (*(_DWORD *)(v13 + 4) > v12)
    v12 = *(_DWORD *)(v13 + 4);
  v18 = *(_DWORD *)(v16 + 4);
  if (v18 <= v15)
    v18 = v15;
  if ((v18 & 0x80000000) != 0)
    goto LABEL_32;
  v19 = 0;
  v20 = __OFADD__(v18, 1);
  v21 = v18 + 1;
  v22 = v20;
  if ((v12 & 0x80000000) != 0 || (v22 & 1) != 0)
    goto LABEL_31;
  v20 = __OFADD__(v12, v21);
  v23 = v12 + v21;
  if (v20)
    goto LABEL_32;
  v19 = 0;
  v20 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  v25 = v20;
  if ((v8 & 0x80000000) != 0 || (v25 & 1) != 0)
    goto LABEL_31;
  v26 = v8 + v24;
  if (__OFADD__(v8, v24))
  {
LABEL_32:
    v19 = 0;
    goto LABEL_31;
  }
  if ((_DWORD)v26)
  {
    v31 = result;
    if ((v26 & 0x80000000) != 0)
    {
      v19 = 0;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 8);
      v28 = *(_QWORD *)(a4 + 8);
      v29 = *(_QWORD *)(a6 + 8);
      WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
      v19 = v32;
      if (v32)
      {
        *(_DWORD *)v32 = 2;
        *(_DWORD *)(v32 + 4) = v26;
        *(_QWORD *)(v32 + 8) = v32 + 20;
        *(_DWORD *)(v32 + 16) = 4;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>((_BYTE *)(v32 + 20), v9, v27, a3, v13, v28, a5, v30, v16, v29);
      }
    }
    result = v31;
  }
  else
  {
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
LABEL_31:
  *result = v19;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(_BYTE *result, uint64_t a2, unsigned int a3, char a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  unsigned int v14;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE v56[13];
  uint64_t v57;

  v14 = a3;
  v16 = result;
  v17 = 0;
  v18 = a10;
  v57 = *MEMORY[0x1E0C80C00];
  v19 = a3;
  do
  {
    ++v17;
    v20 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v20);
  v21 = *(_DWORD *)(a2 + 4);
  v22 = v21 >= v17;
  v23 = v21 - v17;
  if ((_DWORD)v23 != 0 && v22)
  {
    if (v23 <= 1)
      v24 = 1;
    else
      v24 = v23;
    v25 = result;
    do
    {
      *v25++ = *(_BYTE *)a2;
      --v24;
    }
    while (v24);
  }
  else
  {
    v23 = 0;
  }
  v26 = 0;
  v27 = a3;
  do
  {
    v56[v26-- + 12] = (v27 % 0xA) | 0x30;
    v20 = v27 > 9;
    v27 /= 0xAu;
  }
  while (v20);
  if (v26 + 14 <= 13)
    result = memcpy(&result[v23], &v56[v26 + 13], -v26);
  LODWORD(v28) = 0;
  do
  {
    v28 = (v28 + 1);
    v20 = v14 > 9;
    v14 /= 0xAu;
  }
  while (v20);
  v29 = 0;
  v30 = *(unsigned int *)(a2 + 4);
  if (v30 <= v28)
    v31 = v28;
  else
    v31 = v30;
  v32 = &v16[v31];
  *v32 = a4;
  v33 = a6;
  do
  {
    ++v29;
    v20 = v33 > 9;
    v33 /= 0xAu;
  }
  while (v20);
  v34 = *(_DWORD *)(a5 + 4);
  v22 = v34 >= v29;
  v35 = v34 - v29;
  if ((_DWORD)v35 != 0 && v22)
  {
    if (v35 <= 1)
      v36 = 1;
    else
      v36 = v35;
    if (v30 <= v28)
      v37 = v28;
    else
      v37 = v30;
    v38 = &v16[v37 + 1];
    do
    {
      *v38++ = *(_BYTE *)a5;
      --v36;
    }
    while (v36);
  }
  else
  {
    v35 = 0;
  }
  v39 = 0;
  v40 = v32 + 1;
  v41 = a6;
  do
  {
    v56[v39-- + 12] = (v41 % 0xA) | 0x30;
    v20 = v41 > 9;
    v41 /= 0xAu;
  }
  while (v20);
  if (v39 + 14 <= 13)
    result = memcpy(&v40[v35], &v56[v39 + 13], -v39);
  LODWORD(v42) = 0;
  do
  {
    v42 = (v42 + 1);
    v20 = a6 > 9;
    a6 /= 0xAu;
  }
  while (v20);
  v43 = 0;
  v44 = *(unsigned int *)(a5 + 4);
  if (v44 <= v42)
    v45 = v42;
  else
    v45 = v44;
  v46 = &v40[v45];
  *v46 = a7;
  v47 = a10;
  do
  {
    ++v43;
    v20 = v47 > 9;
    v47 /= 0xAu;
  }
  while (v20);
  v48 = *(_DWORD *)(a9 + 4);
  v22 = v48 >= v43;
  v49 = v48 - v43;
  if ((_DWORD)v49 != 0 && v22)
  {
    if (v49 <= 1)
      v50 = 1;
    else
      v50 = v49;
    if (v30 <= v28)
      v51 = v28;
    else
      v51 = v30;
    v52 = &v16[v51];
    if (v44 > v42)
      v42 = v44;
    v53 = &v52[v42 + 2];
    do
    {
      *v53++ = *(_BYTE *)a9;
      --v50;
    }
    while (v50);
  }
  else
  {
    v49 = 0;
  }
  v54 = 0;
  v55 = v46 + 1;
  do
  {
    v56[v54-- + 12] = (v18 % 0xA) | 0x30;
    v20 = v18 > 9;
    v18 /= 0xAu;
  }
  while (v20);
  if (v54 + 14 <= 13)
    return memcpy(&v55[v49], &v56[v54 + 13], -v54);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned __int8 *a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, unsigned __int8 *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  _WORD *v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _WORD *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  _QWORD v63[3];

  v13 = result;
  v63[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v63[0];
        if (v63[0])
        {
          v16 = 0;
          v17 = v63[0] + 20;
          *(_DWORD *)v63[0] = 2;
          *(_DWORD *)(v15 + 4) = v13;
          *(_QWORD *)(v15 + 8) = v15 + 20;
          *(_DWORD *)(v15 + 16) = 4;
          v18 = a4;
          do
          {
            ++v16;
            v19 = v18 > 9;
            v18 /= 0xAu;
          }
          while (v19);
          v20 = *((_DWORD *)a3 + 1);
          v21 = v20 >= v16;
          v22 = v20 - v16;
          if ((_DWORD)v22 != 0 && v21)
          {
            if (v22 <= 1)
              v23 = 1;
            else
              v23 = v22;
            v24 = (_BYTE *)(v15 + 20);
            do
            {
              *v24++ = *a3;
              --v23;
            }
            while (v23);
          }
          else
          {
            v22 = 0;
          }
          v33 = 0;
          v34 = a4;
          do
          {
            *((_BYTE *)&v63[1] + v33-- + 4) = (v34 % 0xA) | 0x30;
            v19 = v34 > 9;
            v34 /= 0xAu;
          }
          while (v19);
          if (v33 + 14 <= 13)
            result = (uint64_t)memcpy((void *)(v17 + v22), (char *)&v63[1] + v33 + 5, -v33);
          LODWORD(v35) = 0;
          do
          {
            v35 = (v35 + 1);
            v19 = a4 > 9;
            a4 /= 0xAu;
          }
          while (v19);
          v36 = 0;
          v37 = *((unsigned int *)a3 + 1);
          if (v37 <= v35)
            v38 = v35;
          else
            v38 = v37;
          v39 = (_BYTE *)(v17 + v38);
          *v39 = a5;
          v40 = a7;
          do
          {
            ++v36;
            v19 = v40 > 9;
            v40 /= 0xAu;
          }
          while (v19);
          v41 = *((_DWORD *)a6 + 1);
          v21 = v41 >= v36;
          v42 = v41 - v36;
          if ((_DWORD)v42 != 0 && v21)
          {
            if (v42 <= 1)
              v43 = 1;
            else
              v43 = v42;
            if (v37 > v35)
              v35 = v37;
            v44 = (_BYTE *)(v15 + v35 + 21);
            do
            {
              *v44++ = *a6;
              --v43;
            }
            while (v43);
          }
          else
          {
            v42 = 0;
          }
          v45 = 0;
          v46 = v39 + 1;
          do
          {
            *((_BYTE *)&v63[1] + v45-- + 4) = (a7 % 0xA) | 0x30;
            v19 = a7 > 9;
            a7 /= 0xAu;
          }
          while (v19);
          if (v45 + 14 <= 13)
            result = (uint64_t)memcpy(&v46[v42], (char *)&v63[1] + v45 + 5, -v45);
        }
        goto LABEL_79;
      }
LABEL_81:
      v15 = 0;
      goto LABEL_79;
    }
LABEL_80:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_79;
  }
  if (!(_DWORD)result)
    goto LABEL_80;
  if (result > 0x7FFFFFEF)
    goto LABEL_81;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v63[0];
  if (v63[0])
  {
    v25 = 0;
    v26 = v63[0] + 20;
    *(_DWORD *)v63[0] = 2;
    *(_DWORD *)(v15 + 4) = v13;
    *(_QWORD *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 0;
    v27 = a4;
    do
    {
      ++v25;
      v19 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v19);
    v28 = *((unsigned int *)a3 + 1);
    if (v28 <= v25)
    {
      v32 = 0;
    }
    else
    {
      v29 = *a3;
      v30 = v28 - v25;
      if (v30 <= 1)
        v30 = 1;
      v31 = (_WORD *)(v15 + 20);
      do
      {
        *v31++ = v29;
        --v30;
      }
      while (v30);
      v32 = v28 - v25;
    }
    v47 = 0;
    v48 = a4;
    do
    {
      result = (uint64_t)v63 + v47;
      *((_BYTE *)&v63[1] + v47-- + 4) = (v48 % 0xA) | 0x30;
      v19 = v48 > 9;
      v48 /= 0xAu;
    }
    while (v19);
    if (v47 + 14 <= 13)
    {
      v49 = (_WORD *)(v26 + 2 * v32);
      do
      {
        *v49++ = *((unsigned __int8 *)&v63[1] + v47 + 5);
        v21 = __CFADD__(v47++, 1);
      }
      while (!v21);
    }
    LODWORD(v50) = 0;
    do
    {
      v50 = (v50 + 1);
      v19 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v19);
    v51 = 0;
    if (v28 <= v50)
      v52 = v50;
    else
      v52 = v28;
    v53 = (_WORD *)(v26 + 2 * v52);
    *v53 = a5;
    v54 = a7;
    do
    {
      ++v51;
      v19 = v54 > 9;
      v54 /= 0xAu;
    }
    while (v19);
    v55 = *((_DWORD *)a6 + 1);
    v21 = v55 >= v51;
    v56 = v55 - v51;
    if ((_DWORD)v56 != 0 && v21)
    {
      v57 = *a6;
      if (v56 <= 1)
        v58 = 1;
      else
        v58 = v56;
      if (v28 <= v50)
        v28 = v50;
      v59 = (_WORD *)(v15 + 2 * v28 + 22);
      do
      {
        *v59++ = v57;
        --v58;
      }
      while (v58);
    }
    else
    {
      v56 = 0;
    }
    v60 = 0;
    v61 = v53 + 1;
    do
    {
      *((_BYTE *)&v63[1] + v60-- + 4) = (a7 % 0xA) | 0x30;
      v19 = a7 > 9;
      a7 /= 0xAu;
    }
    while (v19);
    if (v60 + 14 <= 13)
    {
      v62 = &v61[v56];
      do
      {
        *v62++ = *((unsigned __int8 *)&v63[1] + v60 + 5);
        v21 = __CFADD__(v60++, 1);
      }
      while (!v21);
    }
  }
LABEL_79:
  *a8 = v15;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, unsigned int a8)
{
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned __int128 *v41;
  unsigned __int128 *v42;
  unsigned __int128 v43;
  char v44;
  _BYTE v45[13];
  uint64_t v46;

  v14 = a2;
  v15 = __dst;
  v46 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v16 = *(_BYTE **)(a2 + 8);
    v17 = *(unsigned int *)(v14 + 4);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          *__dst = *v16;
        else
          __dst = memcpy(__dst, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v41 = (unsigned __int128 *)__dst;
      }
      else
      {
        v41 = (unsigned __int128 *)&__dst[v17 & 0xFFFFFFF0];
        v42 = (unsigned __int128 *)__dst;
        do
        {
          v43 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v42++ = v43;
        }
        while (v42 != v41);
      }
      while (v41 != (unsigned __int128 *)&__dst[v17])
      {
        v44 = *v16;
        v16 += 2;
        *(_BYTE *)v41 = v44;
        v41 = (unsigned __int128 *)((char *)v41 + 1);
      }
    }
    v14 = *(unsigned int *)(v14 + 4);
  }
  v18 = 0;
  v15[v14] = a3;
  v19 = a5;
  do
  {
    ++v18;
    v20 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v20);
  v21 = (uint64_t)&v15[v14 + 1];
  v22 = *(_DWORD *)(a4 + 4);
  v23 = v22 >= v18;
  v24 = v22 - v18;
  if ((_DWORD)v24 != 0 && v23)
  {
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    v26 = &v15[v14 + 1];
    do
    {
      *v26++ = *(_BYTE *)a4;
      --v25;
    }
    while (v25);
  }
  else
  {
    v24 = 0;
  }
  v27 = 0;
  v28 = a5;
  do
  {
    v45[v27-- + 12] = (v28 % 0xA) | 0x30;
    v20 = v28 > 9;
    v28 /= 0xAu;
  }
  while (v20);
  if (v27 + 14 <= 13)
    __dst = memcpy((void *)(v21 + v24), &v45[v27 + 13], -v27);
  LODWORD(v29) = 0;
  do
  {
    v29 = (v29 + 1);
    v20 = a5 > 9;
    a5 /= 0xAu;
  }
  while (v20);
  v30 = 0;
  v31 = *(unsigned int *)(a4 + 4);
  if (v31 <= v29)
    v32 = v29;
  else
    v32 = v31;
  v33 = (_BYTE *)(v21 + v32);
  *v33 = a6;
  v34 = a8;
  do
  {
    ++v30;
    v20 = v34 > 9;
    v34 /= 0xAu;
  }
  while (v20);
  v35 = *(_DWORD *)(a7 + 4);
  v23 = v35 >= v30;
  v36 = v35 - v30;
  if ((_DWORD)v36 != 0 && v23)
  {
    if (v36 <= 1)
      v37 = 1;
    else
      v37 = v36;
    if (v31 > v29)
      v29 = v31;
    v38 = &v15[v14 + 2 + v29];
    do
    {
      *v38++ = *(_BYTE *)a7;
      --v37;
    }
    while (v37);
  }
  else
  {
    v36 = 0;
  }
  v39 = 0;
  v40 = v33 + 1;
  do
  {
    v45[v39-- + 12] = (a8 % 0xA) | 0x30;
    v20 = a8 > 9;
    a8 /= 0xAu;
  }
  while (v20);
  if (v39 + 14 <= 13)
    return memcpy(&v40[v36], &v45[v39 + 13], -v39);
  return __dst;
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(char *__dst, uint64_t a2, char a3, unsigned __int8 *a4, unsigned int a5, char a6, unsigned __int8 *a7, unsigned int a8)
{
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  BOOL v33;
  _WORD *v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t result;
  _WORD *v43;
  BOOL v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  _WORD *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _WORD *v57;
  _BYTE v58[13];
  uint64_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;

  v59 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = &__dst[2 * v17];
      if (v17 >= 0x40)
      {
        v19 = &__dst[2 * (v17 & 0xFFFFFFC0)];
        v21 = 0uLL;
        v22 = __dst;
        do
        {
          v60.val[0] = *v16;
          v23 = v16[1];
          v61.val[0] = v16[2];
          v24 = v16[3];
          v16 += 4;
          v25 = v24;
          v61.val[1] = 0uLL;
          v62.val[0] = v23;
          v60.val[1] = 0uLL;
          v26 = v22;
          vst2q_s8(v26, v60);
          v26 += 32;
          v62.val[1] = 0uLL;
          vst2q_s8(v26, v62);
          v27 = v22 + 64;
          vst2q_s8(v27, v61);
          v28 = v22 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
          v22 += 128;
        }
        while (v22 != v19);
      }
      else
      {
        v19 = __dst;
      }
      while (v19 != v18)
      {
        v29 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v29;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *(_WORD *)__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      memcpy(__dst, v16, 2 * v17);
    }
    v20 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v20 = 0;
  }
  v30 = 0;
  v31 = &__dst[2 * v20];
  *(_WORD *)v31 = a3;
  v32 = a5;
  do
  {
    ++v30;
    v33 = v32 > 9;
    v32 /= 0xAu;
  }
  while (v33);
  v34 = v31 + 2;
  v35 = *((unsigned int *)a4 + 1);
  if (v35 <= v30)
  {
    v39 = 0;
  }
  else
  {
    v36 = *a4;
    v37 = v35 - v30;
    if (v37 <= 1)
      v37 = 1;
    v38 = v34;
    do
    {
      *v38++ = v36;
      --v37;
    }
    while (v37);
    v39 = v35 - v30;
  }
  v40 = 0;
  v41 = a5;
  do
  {
    result = (v41 % 0xA) | 0x30;
    v58[v40-- + 12] = (v41 % 0xA) | 0x30;
    v33 = v41 > 9;
    v41 /= 0xAu;
  }
  while (v33);
  if (v40 + 14 <= 13)
  {
    v43 = &v34[v39];
    do
    {
      *v43++ = *((unsigned __int8 *)&v59 + v40);
      v44 = __CFADD__(v40++, 1);
    }
    while (!v44);
  }
  LODWORD(v45) = 0;
  do
  {
    v45 = (v45 + 1);
    v33 = a5 > 9;
    a5 /= 0xAu;
  }
  while (v33);
  v46 = 0;
  if (v35 <= v45)
    v47 = v45;
  else
    v47 = v35;
  v48 = &v34[v47];
  *v48 = a6;
  v49 = a8;
  do
  {
    ++v46;
    v33 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v33);
  v50 = *((_DWORD *)a7 + 1);
  v44 = v50 >= v46;
  v51 = v50 - v46;
  if ((_DWORD)v51 != 0 && v44)
  {
    v52 = *a7;
    if (v51 <= 1)
      v53 = 1;
    else
      v53 = v51;
    v54 = &__dst[2 * v20];
    if (v35 <= v45)
      v35 = v45;
    v55 = &v54[2 * v35 + 4];
    do
    {
      *(_WORD *)v55 = v52;
      v55 += 2;
      --v53;
    }
    while (v53);
  }
  else
  {
    v51 = 0;
  }
  v56 = 0;
  do
  {
    v58[v56-- + 12] = (a8 % 0xA) | 0x30;
    v33 = a8 > 9;
    a8 /= 0xAu;
  }
  while (v33);
  if (v56 + 14 <= 13)
  {
    v57 = &v48[v51 + 1];
    do
    {
      *v57++ = *((unsigned __int8 *)&v59 + v56);
      v44 = __CFADD__(v56++, 1);
    }
    while (!v44);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DirectoryFileListCreator::start(WebCore::Document *,WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E33B2220;
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 32), a2);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E33B2220;
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 32), a2);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DirectoryFileListCreator::start(WebCore::Document *,WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(unsigned int *result, const WTF::String *a2)
{
  unsigned int *v2;
  WTF::StringImpl *v3;
  WTF::FileSystemImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  v2 = result;
  v3 = (WTF::StringImpl *)*((_QWORD *)result + 1);
  v4 = (WTF::FileSystemImpl *)*((_QWORD *)result + 4);
  v5 = result[11];
  v54 = 0;
  v55 = 0;
  if ((_DWORD)v5)
  {
    v6 = 24 * v5;
    do
    {
      v7 = WTF::FileSystemImpl::fileType(v4, a2);
      if ((v7 & 0xFF00000000) != 0 && v7 == 1)
      {
        WTF::FileSystemImpl::pathFileName(v4, a2);
        WebCore::appendDirectoryFiles(v4, (const WTF::String *)&v50, (uint64_t)&v54);
      }
      else
      {
        v8 = *(WTF::StringImpl **)v4;
        if (*(_QWORD *)v4)
          *(_DWORD *)v8 += 2;
        v50 = v8;
        v51 = 0;
        v9 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
        if (v9)
          *(_DWORD *)v9 += 2;
        v52 = v9;
        v10 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          v11 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, HIDWORD(v55) + 1, (unint64_t)&v50);
          v10 = HIDWORD(v55);
          v12 = (_QWORD *)(v54 + 24 * HIDWORD(v55));
          v13 = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          *v12 = v13;
          v14 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          v12[1] = v14;
          v15 = (WTF::StringImpl **)(v12 + 2);
          v16 = (WTF::StringImpl **)(v11 + 16);
        }
        else
        {
          v17 = (WTF::StringImpl **)(v54 + 24 * HIDWORD(v55));
          v50 = 0;
          *v17 = v8;
          v18 = v51;
          v51 = 0;
          v17[1] = v18;
          v15 = v17 + 2;
          v16 = &v52;
        }
        v19 = *v16;
        *v16 = 0;
        *v15 = v19;
        HIDWORD(v55) = v10 + 1;
        v20 = v52;
        v52 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = v51;
        v51 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, a2);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      result = (unsigned int *)v50;
      v50 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v4 = (WTF::FileSystemImpl *)((char *)v4 + 24);
      v6 -= 24;
    }
    while (v6);
    LODWORD(v5) = HIDWORD(v55);
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  v23 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
  v50 = v3;
  v51 = v22;
  *((_OWORD *)v2 + 1) = 0u;
  v52 = v23;
  v53 = 0u;
  if ((_DWORD)v5)
  {
    if (v5 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v24 = 24 * v5;
    v25 = WTF::fastMalloc((WTF *)(24 * v5));
    v26 = (v24 & 0xFFFFFFF8) / 0x18;
    DWORD2(v53) = v26;
    *(_QWORD *)&v53 = v25;
    if (HIDWORD(v55))
    {
      v27 = v54;
      v28 = v54 + 24 * HIDWORD(v55);
      do
      {
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        v29 = v27 + 16;
        WTF::String::isolatedCopy();
        v31 = HIDWORD(v53) + 1;
        v32 = v53;
        v33 = (WTF::StringImpl **)(v53 + 24 * HIDWORD(v53));
        v34 = v56;
        v56 = 0;
        *v33 = v34;
        v35 = v57;
        v57 = 0;
        v33[1] = v35;
        v36 = v58;
        v58 = 0;
        v33[2] = v36;
        HIDWORD(v53) = v31;
        v37 = v58;
        v58 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v30);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = v57;
        v57 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v30);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v56;
        v56 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v30);
          else
            *(_DWORD *)v39 -= 2;
        }
        v27 = v29 + 8;
      }
      while (v27 != v28);
      v3 = v50;
      v22 = v51;
      v23 = v52;
      v26 = DWORD2(v53);
    }
    else
    {
      v32 = v25;
      v31 = 0;
    }
  }
  else
  {
    v31 = 0;
    v26 = 0;
    v32 = 0;
  }
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v40 = off_1E33B2248;
  *(_QWORD *)(v40 + 8) = v3;
  *(_QWORD *)(v40 + 16) = v22;
  *(_QWORD *)(v40 + 24) = v23;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)(v40 + 32) = v32;
  v53 = 0uLL;
  *(_DWORD *)(v40 + 40) = v26;
  *(_DWORD *)(v40 + 44) = v31;
  v56 = (WTF::StringImpl *)v40;
  WTF::callOnMainThread();
  v42 = v56;
  v56 = 0;
  if (v42)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v53, v41);
  v44 = v52;
  v52 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v43);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = v51;
  v51 = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr((unsigned int *)v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v45));
    if (!v47)
    {
      atomic_store(1u, (unsigned int *)v45);
      v48 = *((_QWORD *)v45 + 2);
      *((_QWORD *)v45 + 2) = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      v49 = *((_QWORD *)v45 + 1);
      *((_QWORD *)v45 + 1) = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 56))(v49);
      WTF::fastFree(v45, v43);
    }
  }
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v54, (WTF::StringImpl *)v43);
}

uint64_t WebCore::appendDirectoryFiles(WTF::FileSystemImpl *a1, const WTF::String *a2, uint64_t a3)
{
  uint64_t result;
  const WTF::String *v6;
  WTF *v7;
  uint64_t v8;
  const WTF::String *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  int v46;
  unsigned int v47;

  result = WTF::FileSystemImpl::listDirectory(a1, a2);
  v7 = v45;
  if (!v47)
  {
LABEL_71:
    if (v7)
      goto LABEL_81;
    return result;
  }
  v8 = 8 * v47;
  do
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if ((WTF::FileSystemImpl::isHiddenFile((WTF::FileSystemImpl *)&v44, v9) & 1) != 0)
      goto LABEL_51;
    result = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v44, v6);
    if ((result & 0xFF00000000) == 0)
      goto LABEL_51;
    v10 = result;
    v11 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v11 += 2;
    v12 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
      *(_DWORD *)v12 += 2;
    if (v11)
    {
      v13 = *((_DWORD *)v11 + 1);
      if (!v12)
        goto LABEL_62;
    }
    else
    {
      v13 = 0;
      if (!v12)
      {
LABEL_62:
        v14 = 0;
        goto LABEL_12;
      }
    }
    v14 = *(_DWORD *)(v12 + 4);
    if (v14 < 0)
      goto LABEL_82;
LABEL_12:
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    v17 = v15;
    if (v13 < 0 || (v17 & 1) != 0 || (v18 = (v13 + v16), __OFADD__(v13, v16)))
    {
LABEL_82:
      v43 = 0;
LABEL_83:
      __break(0xC471u);
      return result;
    }
    if (!v11)
    {
      if (!v12)
      {
        if ((v18 & 0x80000000) != 0)
          goto LABEL_82;
        result = WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
        v37 = v40;
        if (!v40)
          goto LABEL_82;
        v38 = (char *)v40 + 20;
        *(_DWORD *)v40 = 2;
        *((_DWORD *)v37 + 1) = v18;
        *((_QWORD *)v37 + 1) = (char *)v37 + 20;
        *((_DWORD *)v37 + 4) = 4;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v38, 0, 47, 0);
        v43 = v37;
        goto LABEL_29;
      }
LABEL_21:
      v20 = (*(unsigned __int8 *)(v12 + 16) >> 2) & 1;
      goto LABEL_22;
    }
    v19 = *((_DWORD *)v11 + 4);
    v20 = (v19 >> 2) & 1;
    if (v12 && (v19 & 4) != 0)
      goto LABEL_21;
LABEL_22:
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v20, (uint64_t)v11, 47, v12, &v43);
    if (!v43)
      goto LABEL_83;
    if (!v12)
      goto LABEL_26;
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
LABEL_26:
      if (v11)
        goto LABEL_27;
      goto LABEL_29;
    }
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v6);
    if (v11)
    {
LABEL_27:
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
LABEL_29:
    if (v10)
    {
      if (v10 == 1)
        WebCore::appendDirectoryFiles(&v44, &v43, a3);
    }
    else
    {
      v21 = v44;
      if (v44)
        *(_DWORD *)v44 += 2;
      v40 = v21;
      v22 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      v41 = v22;
      v42 = 0;
      v23 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a3 + 8))
      {
        v24 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v23 + 1, (unint64_t)&v40);
        LODWORD(v23) = *(_DWORD *)(a3 + 12);
        v25 = (_QWORD *)(*(_QWORD *)a3 + 24 * v23);
        v26 = *(_QWORD *)v24;
        *(_QWORD *)v24 = 0;
        *v25 = v26;
        v27 = *((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        v25[1] = v27;
        v28 = (WTF::StringImpl **)(v25 + 2);
        v29 = (WTF::StringImpl **)(v24 + 16);
      }
      else
      {
        v30 = (WTF::StringImpl **)(*(_QWORD *)a3 + 24 * v23);
        v40 = 0;
        *v30 = v21;
        v31 = v41;
        v41 = 0;
        v30[1] = v31;
        v28 = v30 + 2;
        v29 = &v42;
      }
      v32 = *v29;
      *v29 = 0;
      *v28 = v32;
      *(_DWORD *)(a3 + 12) = v23 + 1;
      v33 = v42;
      v42 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v6);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v41;
      v41 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v6);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = v40;
      v40 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v6);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    v36 = v43;
    v43 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v6);
      else
        *(_DWORD *)v36 -= 2;
    }
LABEL_51:
    result = (uint64_t)v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v7 = (WTF *)((char *)v7 + 8);
    v8 -= 8;
  }
  while (v8);
  v7 = v45;
  if (!v47)
    goto LABEL_71;
  v39 = 8 * v47;
  do
  {
    result = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v7 = (WTF *)((char *)v7 + 8);
    v39 -= 8;
  }
  while (v39);
  v7 = v45;
  if (v45)
  {
LABEL_81:
    v45 = 0;
    v46 = 0;
    return WTF::fastFree(v7, v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DirectoryFileListCreator::start(WebCore::Document *,WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E33B2248;
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 32), a2);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E33B2248;
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 32), a2);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DirectoryFileListCreator::start(WebCore::Document *,WTF::Vector<WebCore::FileChooserFileInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WebCore::File *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  bmalloc::api *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  bmalloc::api *v23;
  uint64_t v24;
  _BYTE v25[16];
  WTF::StringImpl *v26;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 44);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *(_QWORD *)(result + 24);
      v6 = WTF::fastMalloc((WTF *)(8 * v4));
      if (*(_DWORD *)(v3 + 44))
      {
        v7 = 0;
        if (v5)
          v8 = (WebCore::File *)(v5 + 192);
        else
          v8 = 0;
        v9 = 8;
        do
        {
          v10 = (WTF::StringImpl **)(*(_QWORD *)(v3 + 32) + v9);
          v11 = v10 - 1;
          if (*v10)
          {
            WebCore::File::createWithRelativePath(v8, v11, (const WTF::String *)v10, &v24);
          }
          else
          {
            v26 = 0;
            v25[0] = 0;
            v25[8] = 0;
            WebCore::File::create(v10 + 1, (uint64_t)v8, v11, &v26, (WTF::String *)v25, &v24);
            v13 = v26;
            v26 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v12);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
          v14 = v7 + 1;
          *(_QWORD *)(v6 + 8 * v7) = v24;
          v9 += 24;
          v7 = v14;
        }
        while (v14 < *(unsigned int *)(v3 + 44));
      }
      else
      {
        LODWORD(v14) = 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
      v6 = 0;
    }
    v15 = bmalloc::api::isoAllocate();
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)(v15 + 16) = v6;
    *(_DWORD *)(v15 + 24) = v4;
    *(_DWORD *)(v15 + 28) = v14;
    v23 = (bmalloc::api *)v15;
    (*(void (**)(uint64_t, bmalloc::api **))(*(_QWORD *)v2 + 16))(v2, &v23);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
      {
        v18 = *((unsigned int *)v17 + 7);
        if ((_DWORD)v18)
        {
          v19 = (_DWORD **)*((_QWORD *)v17 + 2);
          v20 = 8 * v18;
          do
          {
            v21 = *v19;
            *v19 = 0;
            if (v21)
            {
              if (v21[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
              else
                --v21[4];
            }
            ++v19;
            v20 -= 8;
          }
          while (v20);
        }
        v22 = (WTF *)*((_QWORD *)v17 + 2);
        if (v22)
        {
          *((_QWORD *)v17 + 2) = 0;
          *((_DWORD *)v17 + 6) = 0;
          WTF::fastFree(v22, v16);
        }
        if (*(_QWORD *)v17)
        {
          *(_QWORD *)(*(_QWORD *)v17 + 8) = 3;
          *(_QWORD *)v17 = 0;
        }
        bmalloc::api::isoDeallocate(v17, v16);
      }
      else
      {
        --*((_DWORD *)v17 + 2);
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *__dst[17];

  v5 = (_QWORD *)result;
  __dst[16] = *(WTF::AtomStringImpl **)MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v6 = 0;
    if (a3)
      goto LABEL_3;
LABEL_23:
    v7 = 0;
    goto LABEL_4;
  }
  v6 = *(_DWORD *)(a2 + 4);
  if (!a3)
    goto LABEL_23;
LABEL_3:
  v7 = *(_DWORD *)(a3 + 4);
LABEL_4:
  if ((v7 | v6) < 0)
    goto LABEL_29;
  result = (v6 + v7);
  if (__OFADD__(v6, v7))
    goto LABEL_29;
  if (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if (a3)
    {
      v8 = *(_DWORD *)(a3 + 16);
      if (result >= 0x40)
      {
        v9 = (v8 >> 2) & 1;
        goto LABEL_17;
      }
      if ((v8 & 4) == 0)
      {
LABEL_14:
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(__dst, a2, a3);
        return WTF::AtomStringImpl::add();
      }
    }
    else if (result >= 0x40)
    {
      v9 = 1;
      goto LABEL_17;
    }
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(__dst, a2, a3);
    return WTF::AtomStringImpl::add();
  }
  if (result < 0x40)
    goto LABEL_14;
  v9 = 0;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, a2, a3, __dst);
  result = (uint64_t)__dst[0];
  if (!__dst[0])
  {
LABEL_29:
    *v5 = 0;
    return result;
  }
  if ((*((_BYTE *)__dst[0] + 16) & 0x10) != 0)
  {
    *(_DWORD *)__dst[0] += 2;
    *v5 = result;
    __dst[0] = 0;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(__dst[0], v10);
    result = (uint64_t)__dst[0];
    __dst[0] = 0;
    if (!result)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, WTF::AtomString *a4@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *__dst[17];

  v4 = result;
  __dst[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (result)
    v6 = *(_DWORD *)(result + 4);
  else
    v6 = 0;
  if (a3)
  {
    v7 = *(_DWORD *)(a3 + 4);
    if (v7 < 0)
    {
LABEL_31:
      *(_QWORD *)a4 = 0;
      return result;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  v10 = v8;
  if (v6 < 0)
    goto LABEL_31;
  if ((v10 & 1) != 0)
    goto LABEL_31;
  result = (v6 + v9);
  if (__OFADD__(v6, v9))
    goto LABEL_31;
  if (v4 && (*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (result < 0x40)
      goto LABEL_19;
    v12 = 0;
  }
  else if (a3)
  {
    v11 = *(_DWORD *)(a3 + 16);
    if (result < 0x40)
    {
      if ((v11 & 4) != 0)
      {
LABEL_16:
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)__dst, v4, a2, a3);
        return WTF::AtomStringImpl::add();
      }
LABEL_19:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((char *)__dst, v4, a2, a3);
      return WTF::AtomStringImpl::add();
    }
    v12 = (v11 >> 2) & 1;
  }
  else
  {
    if (result < 0x40)
      goto LABEL_16;
    v12 = 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v4, a2, a3, __dst);
  WTF::AtomString::AtomString(a4, __dst[0]);
  result = (uint64_t)__dst[0];
  __dst[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_1E33D5AC0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = a3;
    *(_BYTE *)(v5 + 32) = 0;
    v7 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v7 & 0xFFFF000000000000 | v5;
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v14 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v14)
        {
          v17 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v14));
          v8 = v17;
        }
        v15 = *(WTF **)(v8 + 16);
        if (v15)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v16 = v8;
          WTF::fastFree(v15, v6);
          v8 = v16;
        }
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = off_1E33AF818;
  return a1;
}

void WebCore::FileInputType::~FileInputType(WebCore::FileInputType *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    *(_QWORD *)(v3 + 8) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  if (v4)
    *v4 = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v20 = (const void *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v20)
        CFRelease(v20);
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v27 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v28 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (v10[2] == 1)
    {
      v22 = v10[7];
      if ((_DWORD)v22)
      {
        v23 = (_DWORD **)*((_QWORD *)v10 + 2);
        v24 = 8 * v22;
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (v25[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            else
              --v25[4];
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v26 = (WTF *)*((_QWORD *)v10 + 2);
      if (v26)
      {
        *((_QWORD *)v10 + 2) = 0;
        v10[6] = 0;
        WTF::fastFree(v26, a2);
      }
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
        *(_QWORD *)v10 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v10, a2);
    }
    else
    {
      --v10[2];
    }
  }
  v11 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    WTF::fastFree(v11, a2);
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::FileChooserSettings::~FileChooserSettings((WebCore::FileChooserSettings *)(v12 + 16), a2);
      WTF::fastFree((WTF *)v12, v21);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *((_QWORD *)this + 6);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v29 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v29)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v29));
      v30 = *(WTF **)(v17 + 16);
      if (v30)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        WTF::fastFree(v30, a2);
      }
      WTF::fastFree((WTF *)v17, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::FileInputType::~FileInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::FileInputType::~FileInputType(WebCore::FileInputType *this, WTF::StringImpl *a2)
{
  WebCore::FileInputType::~FileInputType((WebCore::FileInputType *)((char *)this - 32), a2);
}

{
  WebCore::FileInputType::~FileInputType((WebCore::FileInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::FileInputType::~FileInputType((WebCore::FileInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::FileInputType::~FileInputType((WebCore::FileInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::FileInputType::filesFromFormControlState@<X0>(WTF *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;

  v5 = 0;
  v38 = 0;
  v39 = 0;
  v6 = *((unsigned int *)this + 3) - 1;
  if (v6 >= 2)
  {
    if (v6 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_48;
    }
    v5 = WTF::fastMalloc((WTF *)(24 * (v6 >> 1)));
    LODWORD(v39) = 24 * (v6 >> 1) / 0x18;
    v38 = v5;
  }
  v7 = 0;
  if (v6)
  {
    v8 = 0;
    while (1)
    {
      v9 = *((unsigned int *)this + 3);
      if (v8 >= v9)
        break;
      v10 = *(_QWORD *)this;
      v11 = *(WTF::StringImpl **)(*(_QWORD *)this + 8 * v8);
      if (v11)
        *(_DWORD *)v11 += 2;
      v35 = v11;
      v36 = 0;
      v12 = v8 + 1;
      if (v8 + 1 >= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195BA0368);
      }
      v13 = *(WTF::StringImpl **)(v10 + 8 * v8 + 8);
      if (v13)
        *(_DWORD *)v13 += 2;
      v37 = v13;
      if (v7 == (_DWORD)v39)
      {
        v14 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v7 + 1, (unint64_t)&v35);
        v7 = HIDWORD(v39);
        v5 = v38;
        v15 = (_QWORD *)(v38 + 24 * HIDWORD(v39));
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        *v15 = v16;
        v17 = *((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        v15[1] = v17;
        v18 = (WTF::StringImpl **)(v15 + 2);
        v19 = (WTF::StringImpl **)(v14 + 16);
      }
      else
      {
        v20 = (WTF::StringImpl **)(v5 + 24 * v7);
        v35 = 0;
        *v20 = v11;
        v21 = v36;
        v36 = 0;
        v20[1] = v21;
        v18 = v20 + 2;
        v19 = &v37;
      }
      v22 = *v19;
      *v19 = 0;
      *v18 = v22;
      HIDWORD(v39) = ++v7;
      v23 = v37;
      v37 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v36;
      v36 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v35;
      v35 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_29;
    }
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x195BA0360);
  }
LABEL_29:
  if (v6 >= *((unsigned int *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x195BA0370);
  }
  v26 = *(_QWORD *)this;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = v7;
  if (v7)
  {
    if (v7 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x195BA0378);
    }
    v27 = 3 * v7;
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v27));
    *(_DWORD *)(a3 + 8) = 8 * (int)v27 / 0x18u;
    *(_QWORD *)a3 = v28;
    v29 = v5 + 8 * v27;
    do
    {
      v30 = *(_DWORD **)v5;
      if (*(_QWORD *)v5)
        *v30 += 2;
      *v28 = v30;
      v31 = *(_DWORD **)(v5 + 8);
      if (v31)
        *v31 += 2;
      v28[1] = v31;
      v32 = *(_DWORD **)(v5 + 16);
      if (v32)
        *v32 += 2;
      v28[2] = v32;
      v5 += 24;
      v28 += 3;
    }
    while (v5 != v29);
  }
  v33 = *(_DWORD **)(v26 + 8 * v6);
  if (v33)
    *v33 += 2;
  *(_QWORD *)(a3 + 16) = v33;
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v38, a2);
}

uint64_t *WebCore::FileInputType::formControlType(WebCore::FileInputType *this)
{
  uint64_t v2;

  {
    WTF::AtomStringImpl::add();
    WebCore::InputTypeNames::file(void)::name = v2;
  }
  return &WebCore::InputTypeNames::file(void)::name;
}

uint64_t WebCore::FileInputType::saveFormControlState@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v3 = *(unsigned int *)(*(_QWORD *)(this + 72) + 28);
  if ((_DWORD)v3)
  {
    v29 = 0;
    if (((v3 >> 28) & 0x7FFFFFFFFLL) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      LODWORD(v29) = (2 * v3) | 1;
      v28 = WTF::fastMalloc((WTF *)(8 * ((2 * v3) | 1)));
      v6 = *(_QWORD *)(v4 + 72);
      v7 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v6 + 16);
        v9 = 8 * v7;
        do
        {
          v10 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 128);
          if (v10)
          {
            if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v10 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v10, v5);
              v10 = v30;
            }
          }
          v30 = v10;
          LODWORD(v11) = HIDWORD(v29);
          if (HIDWORD(v29) == (_DWORD)v29)
          {
            v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
            v11 = HIDWORD(v29);
            v17 = v28;
            v18 = *v16;
            *v16 = 0;
            *(_QWORD *)(v17 + 8 * v11) = v18;
          }
          else
          {
            v30 = 0;
            *(_QWORD *)(v28 + 8 * HIDWORD(v29)) = v10;
          }
          HIDWORD(v29) = v11 + 1;
          v12 = v30;
          v30 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v5);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 144);
          if (v13)
          {
            if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v13 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v13, v5);
              v13 = v30;
            }
          }
          v30 = v13;
          LODWORD(v14) = HIDWORD(v29);
          if (HIDWORD(v29) == (_DWORD)v29)
          {
            v19 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
            v14 = HIDWORD(v29);
            v20 = v28;
            v21 = *v19;
            *v19 = 0;
            *(_QWORD *)(v20 + 8 * v14) = v21;
          }
          else
          {
            v30 = 0;
            *(_QWORD *)(v28 + 8 * HIDWORD(v29)) = v13;
          }
          HIDWORD(v29) = v14 + 1;
          v15 = v30;
          v30 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v5);
            else
              *(_DWORD *)v15 -= 2;
          }
          v8 += 8;
          v9 -= 8;
        }
        while (v9);
      }
      this = *(_QWORD *)(v4 + 96);
      if (this)
      {
        if ((*(_BYTE *)(this + 16) & 0x10) != 0)
        {
          *(_DWORD *)this += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)this, v5);
          this = (uint64_t)v30;
        }
      }
      v30 = (WTF::StringImpl *)this;
      v22 = HIDWORD(v29);
      if (HIDWORD(v29) == (_DWORD)v29)
      {
        v23 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
        v25 = HIDWORD(v29);
        v26 = v28;
        v27 = *v23;
        *v23 = 0;
        *(_QWORD *)(v26 + 8 * v25) = v27;
        this = (uint64_t)v30;
        HIDWORD(v29) = v25 + 1;
        v30 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v24);
          else
            *(_DWORD *)this -= 2;
        }
      }
      else
      {
        *(_QWORD *)(v28 + 8 * HIDWORD(v29)) = this;
        HIDWORD(v29) = v22 + 1;
      }
      *a2 = v28;
      a2[1] = v29;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

unsigned int *WebCore::FileInputType::restoreFormControlState(WTF *a1, WTF *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v6[4];
  WTF::StringImpl *v7;

  WebCore::FileInputType::filesFromFormControlState(this, this, (uint64_t)v6);
  WebCore::FileInputType::filesChosen(a1, v6, (_DWORD **)&v7, 0);
  v4 = v7;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v3);
}

WTF *WebCore::FileInputType::filesChosen(WTF *result, unsigned int *a2, _DWORD **a3, WTF *a4)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::FileSystemImpl *v38;
  bmalloc::api *v39;
  uint64_t v40;
  void *v41;
  WTF *v42;
  bmalloc::api *v43;
  const void *v44;
  uint64_t v45;
  _DWORD **v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  bmalloc::api *v53[2];
  int v54;

  v6 = (uint64_t)result;
  v7 = *a3;
  if (*a3)
  {
    if (v7[1])
    {
      *v7 += 2;
      result = (WTF *)*((_QWORD *)result + 12);
      *(_QWORD *)(v6 + 96) = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v8 = *(_QWORD *)(v6 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = *(WTF **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 56))(result);
  }
  v10 = *(_QWORD *)(v6 + 24);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
    v13 = v12;
  }
  else
  {
    v13 = 0;
    v11 = MEMORY[8];
    v12 = *(_QWORD *)(*(_QWORD *)(MEMORY[8] + 40) + 8);
  }
  if ((*(_QWORD *)(*(_QWORD *)(v12 + 680) + 672) & 0x2000000000000) == 0)
    goto LABEL_38;
  v14 = *(_QWORD *)(v11 + 104);
  if (!v14)
    goto LABEL_38;
  v15 = *(_DWORD *)(v14 + 4);
  if ((v15 & 1) == 0)
  {
    v16 = (uint64_t *)(v14 + 32);
    LODWORD(v17) = v15 >> 5;
    if (!(_DWORD)v17)
      goto LABEL_38;
LABEL_19:
    v17 = v17;
    while (1)
    {
      v18 = *v16;
      if (*v16 == WebCore::HTMLNames::webkitdirectoryAttr
        || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 24)
        && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v17)
        goto LABEL_38;
    }
    v19 = *(_QWORD *)(v6 + 48);
    if (v19)
      goto LABEL_84;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v6;
    v21 = *(unsigned int **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = v19;
    if (!v21)
      goto LABEL_84;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v19 = *(_QWORD *)(v6 + 48);
    if (v19)
    {
LABEL_84:
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
    }
    if (a4)
      ++*(_DWORD *)a4;
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v25 = &off_1E33B3AB8;
    v25[1] = v6;
    v25[2] = v19;
    v25[3] = a4;
    v26 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v26 = 1;
    WTF::WorkQueue::create();
    *(bmalloc::api **)(v26 + 8) = v53[0];
    *(_QWORD *)(v26 + 16) = v25;
    v28 = *(_QWORD *)(v6 + 80);
    *(_QWORD *)(v6 + 80) = v26;
    if (v28)
    {
      do
      {
        v29 = __ldaxr((unsigned int *)v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v28));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)v28);
        v50 = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = 0;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        v51 = *(_QWORD *)(v28 + 8);
        *(_QWORD *)(v28 + 8) = 0;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 56))(v51);
        WTF::fastFree((WTF *)v28, v27);
      }
    }
    return WebCore::DirectoryFileListCreator::start(*(WTF **)(v6 + 80), v13, (uint64_t *)a2);
  }
  v16 = *(uint64_t **)(v14 + 40);
  LODWORD(v17) = *(_DWORD *)(v14 + 52);
  if ((_DWORD)v17)
    goto LABEL_19;
LABEL_38:
  v31 = a2[3];
  if ((_DWORD)v31)
  {
    if (v31 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v32 = WTF::fastMalloc((WTF *)(8 * v31));
    if (a2[3])
    {
      v33 = 0;
      if (v13)
        v34 = v13 + 192;
      else
        v34 = 0;
      v35 = 16;
      do
      {
        v36 = v33;
        v37 = (WTF::StringImpl **)(*(_QWORD *)a2 + v35);
        v38 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
        v54 = (int)v38;
        v53[0] = (bmalloc::api *)WTF::FileSystemImpl::fileID(v38);
        v53[1] = v39;
        WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v54, (int *)v39);
        WebCore::File::create(v37, v34, v37 - 2, v37 - 1, (WTF::String *)v53, (uint64_t *)&v52);
        v33 = v36 + 1;
        *(_QWORD *)(v32 + 8 * v36) = v52;
        v35 += 24;
      }
      while (v36 + 1 < (unint64_t)a2[3]);
    }
    else
    {
      LODWORD(v33) = 0;
    }
  }
  else
  {
    LODWORD(v33) = 0;
    v32 = 0;
  }
  v40 = bmalloc::api::isoAllocate();
  *(_QWORD *)v40 = 0;
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)(v40 + 16) = v32;
  *(_DWORD *)(v40 + 24) = v31;
  *(_DWORD *)(v40 + 28) = v33;
  v53[0] = (bmalloc::api *)v40;
  if (a4)
    ++*(_DWORD *)a4;
  v52 = a4;
  result = (WTF *)WebCore::FileInputType::didCreateFileList(v6, (uint64_t *)v53, (uint64_t *)&v52);
  v42 = v52;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
    {
      v44 = (const void *)*((_QWORD *)v52 + 1);
      *((_QWORD *)v52 + 1) = 0;
      if (v44)
        CFRelease(v44);
      result = (WTF *)WTF::fastFree(v42, v41);
    }
    else
    {
      --*(_DWORD *)v52;
    }
  }
  v43 = v53[0];
  if (v53[0])
  {
    if (*((_DWORD *)v53[0] + 2) == 1)
    {
      v45 = *((unsigned int *)v53[0] + 7);
      if ((_DWORD)v45)
      {
        v46 = (_DWORD **)*((_QWORD *)v53[0] + 2);
        v47 = 8 * v45;
        do
        {
          v48 = *v46;
          *v46 = 0;
          if (v48)
          {
            if (v48[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
            else
              --v48[4];
          }
          ++v46;
          v47 -= 8;
        }
        while (v47);
      }
      v49 = (WTF *)*((_QWORD *)v43 + 2);
      if (v49)
      {
        *((_QWORD *)v43 + 2) = 0;
        *((_DWORD *)v43 + 6) = 0;
        WTF::fastFree(v49, v41);
      }
      if (*(_QWORD *)v43)
      {
        *(_QWORD *)(*(_QWORD *)v43 + 8) = 3;
        *(_QWORD *)v43 = 0;
      }
      return (WTF *)bmalloc::api::isoDeallocate(v43, v41);
    }
    else
    {
      --*((_DWORD *)v53[0] + 2);
    }
  }
  return result;
}

uint64_t WebCore::FileInputType::appendFormData(WebCore::FileInputType *this, WebCore::DOMFormData *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::Blob **v9;
  uint64_t v10;
  WebCore::Blob *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  void *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30[2];
  WTF::StringImpl *v31;

  v3 = *(_QWORD **)(*((_QWORD *)this + 3) + 8);
  v4 = v3[30];
  if (*(_DWORD *)(v4 + 12) == 64)
  {
    v5 = *(_DWORD **)(v4 + 72);
    if (v5)
    {
      v6 = 0;
      ++v5[2];
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_4:
  v7 = (WTF::StringImpl *)v3[26];
  if (v7 || (v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) != 0)
    *(_DWORD *)v7 += 2;
  v31 = v7;
  v8 = v5[7];
  if ((_DWORD)v8)
  {
    v9 = (WebCore::Blob **)*((_QWORD *)v5 + 2);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      v30[0] = 0;
      WebCore::DOMFormData::append(a2, &v31, v11, (const WTF::String *)v30);
      v13 = v30[0];
      v30[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v14 = *(_QWORD *)(v3[5] + 8);
    if (v14)
      v15 = (WebCore::ScriptExecutionContext *)(v14 + 192);
    else
      v15 = 0;
    v30[0] = 0;
    v30[1] = 0;
    {
      WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl += 2;
      WebCore::defaultMIMEType(void)::defaultMIMEType = (uint64_t)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
    }
    v16 = (_DWORD *)bmalloc::api::isoAllocate();
    v17 = WebCore::Blob::Blob((uint64_t)v16, v15, (uint64_t)v30, &WebCore::defaultMIMEType(void)::defaultMIMEType);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v17 + 24));
    v18 = bmalloc::api::isoAllocate();
    v20 = WebCore::Blob::Blob(v18, v19, v15, (uint64_t)v16);
    *(_QWORD *)(v20 + 24) = &unk_1E33AE718;
    v21 = (_QWORD *)(v20 + 24);
    *(_QWORD *)v18 = off_1E33AE6D8;
    *(_QWORD *)(v18 + 128) = 0;
    *(_QWORD *)(v18 + 136) = 0;
    v22 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v22 += 2;
    *(_QWORD *)(v18 + 144) = v22;
    *(_BYTE *)(v18 + 152) = 0;
    *(_BYTE *)(v18 + 160) = 0;
    *(_BYTE *)(v18 + 168) = 0;
    *(_BYTE *)(v18 + 176) = 0;
    *(_WORD *)(v18 + 184) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded(v21);
    if (v16[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[4];
    if (v30[0])
      WTF::fastFree(v30[0], v23);
    v30[0] = 0;
    WebCore::DOMFormData::append(a2, &v31, (WebCore::Blob *)v18, (const WTF::String *)v30);
    v24 = v30[0];
    v30[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v12);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*(_DWORD *)(v18 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    else
      --*(_DWORD *)(v18 + 16);
  }
  if (!v31)
  {
LABEL_33:
    if ((v6 & 1) != 0)
      return 1;
    goto LABEL_34;
  }
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v31, v12);
  if ((v6 & 1) != 0)
    return 1;
LABEL_34:
  if (v5[2] == 1)
  {
    v26 = v5[7];
    v27 = (WTF *)*((_QWORD *)v5 + 2);
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      do
      {
        v29 = *(_DWORD **)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
        {
          if (v29[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
          else
            --v29[4];
        }
        v27 = (WTF *)((char *)v27 + 8);
        v28 -= 8;
      }
      while (v28);
      v27 = (WTF *)*((_QWORD *)v5 + 2);
    }
    if (v27)
    {
      *((_QWORD *)v5 + 2) = 0;
      v5[6] = 0;
      WTF::fastFree(v27, v12);
    }
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
      *(_QWORD *)v5 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v5, v12);
  }
  else
  {
    --v5[2];
  }
  return 1;
}

BOOL WebCore::FileInputType::valueMissing(WebCore::FileInputType *this, const WTF::String *a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0)
    return 0;
  if (*(_QWORD *)a2)
    return *(_DWORD *)(*(_QWORD *)a2 + 4) == 0;
  return 1;
}

void WebCore::FileInputType::valueMissingText(WebCore::FileInputType *this@<X0>, uint64_t a1@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(uint64_t **)(v2 + 40);
      LODWORD(v5) = *(_DWORD *)(v2 + 52);
      if (!(_DWORD)v5)
        goto LABEL_12;
    }
    else
    {
      v4 = (uint64_t *)(v2 + 32);
      LODWORD(v5) = v3 >> 5;
      if (!(_DWORD)v5)
        goto LABEL_12;
    }
    v5 = v5;
    do
    {
      v6 = *v4;
      if (*v4 == WebCore::HTMLNames::multipleAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
      {
        break;
      }
      v4 += 2;
      --v5;
    }
    while (v5);
  }
LABEL_12:
  WebCore::validationMessageValueMissingForFileText(a1);
}

WebCore::FileInputType *WebCore::FileInputType::handleDOMActivateEvent(WebCore::FileInputType *this, WebCore::Event *a2)
{
  WebCore::FileInputType *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160) & 0x18) == 0)
  {
    v3 = this;
    this = (WebCore::FileInputType *)WTF::isMainThread(this);
    if ((_DWORD)this)
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          v4 = *((_QWORD *)v3 + 3);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 8);
            v6 = v5;
          }
          else
          {
            v6 = 0;
            v5 = MEMORY[8];
          }
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                {
                  v11 = *(_QWORD *)(v10 + 48);
                  if (v11)
                  {
                    WebCore::FileInputType::applyFileChooserSettings(v3);
                    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528) + 8);
                    v13 = *((_QWORD *)v3 + 7);
                    WebCore::Chrome::notifyPopupOpeningObservers(v11);
                    this = (WebCore::FileInputType *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 16) + 816))(*(_QWORD *)(v11 + 16), v12, v13);
                  }
                }
              }
            }
          }
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
  }
  return this;
}

_QWORD *WebCore::FileInputType::showPicker(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = this;
  v2 = this[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = v3;
  }
  else
  {
    v4 = 0;
    v3 = MEMORY[8];
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 48);
          if (v9)
          {
            WebCore::FileInputType::applyFileChooserSettings((WebCore::FileInputType *)this);
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528) + 8);
            v11 = v1[7];
            WebCore::Chrome::notifyPopupOpeningObservers(v9);
            return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 16) + 816))(*(_QWORD *)(v9 + 16), v10, v11);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::FileInputType::applyFileChooserSettings(WebCore::FileInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLInputElement *v4;
  WebCore::HTMLInputElement *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    *(_QWORD *)(v2 + 8) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(WebCore::HTMLInputElement **)(v3 + 8);
    v5 = v4;
  }
  else
  {
    v5 = 0;
    v4 = (WebCore::HTMLInputElement *)MEMORY[8];
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 680) + 672) & 0x2000000000000) == 0)
    goto LABEL_17;
  v6 = *((_QWORD *)v4 + 13);
  if (!v6)
    goto LABEL_17;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) == 0)
  {
    v8 = (uint64_t *)(v6 + 32);
    LODWORD(v9) = v7 >> 5;
    if ((_DWORD)v9)
      goto LABEL_9;
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v8 = *(uint64_t **)(v6 + 40);
  LODWORD(v9) = *(_DWORD *)(v6 + 52);
  if (!(_DWORD)v9)
    goto LABEL_17;
LABEL_9:
  v9 = v9;
  while (1)
  {
    v10 = *v8;
    if (*v8 == WebCore::HTMLNames::webkitdirectoryAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitdirectoryAttr + 32))
    {
      break;
    }
    v11 = 0;
    v8 += 2;
    if (!--v9)
      goto LABEL_18;
  }
  v11 = 1;
LABEL_18:
  v46 = v11;
  v12 = *((_QWORD *)v5 + 13);
  if (!v12)
  {
    v47 = 0;
    goto LABEL_42;
  }
  v13 = *(_DWORD *)(v12 + 4);
  v14 = v13 >> 5;
  if ((v13 & 1) != 0)
  {
    v15 = *(uint64_t **)(v12 + 40);
    LODWORD(v16) = *(_DWORD *)(v12 + 52);
    if ((_DWORD)v16)
      goto LABEL_21;
LABEL_32:
    v47 = 0;
    if ((v13 & 1) == 0)
      goto LABEL_29;
    goto LABEL_33;
  }
  v15 = (uint64_t *)(v12 + 32);
  LODWORD(v16) = v13 >> 5;
  if (!v14)
    goto LABEL_32;
LABEL_21:
  v16 = v16;
  while (1)
  {
    v17 = *v15;
    if (*v15 == WebCore::HTMLNames::multipleAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
    {
      break;
    }
    v15 += 2;
    if (!--v16)
    {
      v18 = 0;
      goto LABEL_28;
    }
  }
  v18 = 1;
LABEL_28:
  v47 = v18;
  if ((v13 & 1) != 0)
  {
LABEL_33:
    v19 = *(_QWORD *)(v12 + 40);
    v14 = *(_DWORD *)(v12 + 52);
    if (v14)
      goto LABEL_34;
LABEL_42:
    v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_43;
  }
LABEL_29:
  v19 = v12 + 32;
  if (!v14)
    goto LABEL_42;
LABEL_34:
  v20 = v14;
  v21 = (uint64_t *)(v19 + 8);
  while (1)
  {
    v22 = *(v21 - 1);
    if (v22 == WebCore::HTMLNames::acceptAttr
      || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::acceptAttr + 24)
      && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::acceptAttr + 32))
    {
      break;
    }
    v21 += 2;
    if (!--v20)
    {
      v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_43:
  v23 = *v21;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(unsigned int *)(v23 + 4) | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v24 = 0;
    v25 = 0x100000000;
  }
  WebCore::parseAcceptAttribute((unsigned __int16 *)&v56, v24, v25, (unsigned int (*)(void))WebCore::isValidMIMEType);
  v48 = v56;
  v49 = v57;
  v26 = *((_QWORD *)v5 + 13);
  if (!v26)
    goto LABEL_56;
  v27 = *(_DWORD *)(v26 + 4);
  if ((v27 & 1) == 0)
  {
    v28 = v26 + 32;
    LODWORD(v29) = v27 >> 5;
    if ((_DWORD)v29)
      goto LABEL_48;
LABEL_56:
    v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_57;
  }
  v28 = *(_QWORD *)(v26 + 40);
  LODWORD(v29) = *(_DWORD *)(v26 + 52);
  if (!(_DWORD)v29)
    goto LABEL_56;
LABEL_48:
  v29 = v29;
  v30 = (uint64_t *)(v28 + 8);
  while (1)
  {
    v31 = *(v30 - 1);
    if (v31 == WebCore::HTMLNames::acceptAttr
      || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::acceptAttr + 24)
      && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::acceptAttr + 32))
    {
      break;
    }
    v30 += 2;
    if (!--v29)
    {
      v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_57:
  v32 = *v30;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v33 = 0;
    v34 = 0x100000000;
  }
  WebCore::parseAcceptAttribute((unsigned __int16 *)&v56, v33, v34, (unsigned int (*)(void))WebCore::isValidFileExtension);
  v50 = v56;
  v51 = v57;
  v35 = *((_QWORD *)this + 9);
  v36 = *(unsigned int *)(v35 + 28);
  if ((_DWORD)v36)
  {
    if (v36 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v37 = WTF::fastMalloc((WTF *)(8 * v36));
    v38 = *(unsigned int *)(v35 + 28);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = *(_QWORD *)(v35 + 16);
      do
      {
        v41 = *(_DWORD **)(*(_QWORD *)(v40 + v39) + 128);
        if (v41)
          *v41 += 2;
        *(_QWORD *)(v37 + v39) = v41;
        v39 += 8;
      }
      while (8 * v38 != v39);
    }
  }
  else
  {
    v37 = 0;
    LODWORD(v38) = 0;
  }
  v52 = v37;
  v53 = v36;
  v54 = v38;
  v55 = WebCore::HTMLInputElement::mediaCaptureType(v5);
  v42 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v42 = 1;
  *(_QWORD *)(v42 + 8) = (char *)this + 32;
  WebCore::FileChooserSettings::FileChooserSettings((WebCore::FileChooserSettings *)(v42 + 16), (const WebCore::FileChooserSettings *)&v46);
  v44 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v42;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
    {
      WebCore::FileChooserSettings::~FileChooserSettings((WebCore::FileChooserSettings *)(v44 + 16), v43);
      WTF::fastFree((WTF *)v44, v45);
    }
    else
    {
      --*(_DWORD *)v44;
    }
  }
  WebCore::FileChooserSettings::~FileChooserSettings((WebCore::FileChooserSettings *)&v46, v43);
}

uint64_t WebCore::FileInputType::allowsShowPickerAcrossFrames(WebCore::FileInputType *this)
{
  return 1;
}

uint64_t WebCore::FileInputType::createInputRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = bmalloc::api::isoAllocate();
  result = WebCore::RenderBlockFlow::RenderBlockFlow(v7, 8, v6, a2, 0);
  *(_QWORD *)result = off_1E34235E0;
  *(_BYTE *)(result + 248) = (*(_WORD *)(v6 + 232) & 0x200) != 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::FileInputType::canSetStringValue(WebCore::FileInputType *this)
{
  return 0;
}

uint64_t WebCore::FileInputType::firstElementPathForInputValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(this + 72);
  if (!*(_DWORD *)(v3 + 28))
  {
    *a2 = 0;
    return this;
  }
  v4 = *(WTF::StringImpl **)(**(_QWORD **)(v3 + 16) + 144);
  if (!v4)
  {
    this = WTF::tryFastCompactMalloc((WTF *)0x20);
    if (v7)
    {
      *(_QWORD *)v7 = 0xC00000002;
      *(_QWORD *)(v7 + 20) = *(_QWORD *)"C:\\fakepath\\";
      *(_QWORD *)(v7 + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      *(_DWORD *)(v7 + 28) = 1550349409;
      *a2 = v7;
      return this;
    }
    goto LABEL_13;
  }
  v5 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (v5 < 0 || (this = (v5 + 12), __OFADD__(v5, 12)))
  {
LABEL_13:
    *a2 = 0;
    goto LABEL_14;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, (*((_DWORD *)v4 + 4) >> 2) & 1, (int8x16_t *)"C:\\fakepath\\", 0xCu, (uint64_t)v4, a2);
  if (!*a2)
  {
LABEL_14:
    __break(0xC471u);
    return this;
  }
  if (*(_DWORD *)v4 == 2)
    return WTF::StringImpl::destroy(v4, v6);
  *(_DWORD *)v4 -= 2;
  return this;
}

uint64_t WebCore::FileInputType::setValue(uint64_t result, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  WebCore::Node *ElementSibling;
  WebCore::Element *v17;

  if (a3)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 72);
    if (*(_DWORD *)(v4 + 24))
    {
      v5 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD ***)(v4 + 16);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (v8[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            else
              --v8[4];
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
        *(_DWORD *)(v4 + 28) = 0;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        WTF::fastFree(v9, a2);
      }
    }
    v10 = *(WTF **)(v3 + 88);
    *(_QWORD *)(v3 + 88) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v14 = (const void *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v14)
          CFRelease(v14);
        WTF::fastFree(v10, a2);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    v11 = *(_QWORD *)(v3 + 24);
    if (v11)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = 0;
    WebCore::Node::invalidateStyle(v12, 4u, 0);
    if ((*(_BYTE *)(v12 + 71) & 1) != 0)
    {
      v15 = *(_QWORD *)(v12 + 32);
      if (!v15 || (*(_WORD *)(v15 + 28) & 8) == 0 || (*(_BYTE *)(v15 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v12);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v17);
      }
    }
    v13 = *(_QWORD *)(v3 + 24);
    if (v13)
      v13 = *(_QWORD *)(v13 + 8);
    return WebCore::ValidatedFormListedElement::updateValidity(v13 + 112);
  }
  return result;
}

unsigned int *WebCore::FileInputType::createShadowSubtree(WebCore::FileInputType *this)
{
  uint64_t v2;
  void *v3;
  WebCore::HTMLLabelElement *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WebCore::Style::RuleSet *v23;
  WTF::String *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int *result;
  void *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];
  WTF::StringImpl *v35;
  char v36;
  WebCore::HTMLLabelElement *v37;
  WTF::StringImpl *v38;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::HTMLInputElement::create((WebCore::HTMLInputElement *)&WebCore::HTMLNames::inputTag, (const WebCore::QualifiedName *)v2, 0, 0, (uint64_t *)&v37);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = v37;
  v5 = *((_QWORD *)v37 + 13);
  if (!v5)
    goto LABEL_15;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_15:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_15;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_15;
  }
LABEL_16:
  WebCore::Element::setAttributeInternal(v37, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, (WTF::StringImpl **)(WebCore::HTMLNames::buttonTag + 24), 0);
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::fileSelectorButton(void)::fileSelectorButton = (uint64_t)v38;
  }
  v11 = *((_QWORD *)v4 + 13);
  if (!v11)
    goto LABEL_30;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_DWORD *)(v11 + 52);
    if (!v14)
    {
LABEL_30:
      v15 = 0xFFFFFFFFLL;
      goto LABEL_31;
    }
  }
  else
  {
    v13 = (uint64_t *)(v11 + 32);
    v14 = v12 >> 5;
    if (!v14)
      goto LABEL_30;
  }
  v15 = 0;
  while (1)
  {
    v16 = *v13;
    if (*v13 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v15;
    v13 += 2;
    if (v14 == v15)
      goto LABEL_30;
  }
LABEL_31:
  WebCore::Element::setAttributeInternal(v4, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::fileSelectorButton(void)::fileSelectorButton, 0);
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v17)
    goto LABEL_43;
  v18 = *(_DWORD *)(v17 + 4);
  if ((v18 & 1) != 0)
  {
    v19 = *(uint64_t **)(v17 + 40);
    LODWORD(v20) = *(_DWORD *)(v17 + 52);
    if ((_DWORD)v20)
      goto LABEL_36;
LABEL_43:
    WebCore::fileButtonChooseFileLabel((uint64_t)&v38);
    goto LABEL_44;
  }
  v19 = (uint64_t *)(v17 + 32);
  LODWORD(v20) = v18 >> 5;
  if (!(_DWORD)v20)
    goto LABEL_43;
LABEL_36:
  v20 = v20;
  while (1)
  {
    v21 = *v19;
    if (*v19 == WebCore::HTMLNames::multipleAttr
      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
    {
      break;
    }
    v19 += 2;
    if (!--v20)
      goto LABEL_43;
  }
  WebCore::fileButtonChooseMultipleFilesLabel((uint64_t)&v38);
LABEL_44:
  WebCore::HTMLInputElement::setValue((uint64_t)v4, (uint64_t)&v38, 0, 0, (uint64_t)v34);
  if (v36)
  {
    v25 = v35;
    v35 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v22);
    else
      *(_DWORD *)v26 -= 2;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v27 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  else
    v27 = 0;
  *(_DWORD *)(v27 + 24) += 2;
  result = (unsigned int *)WebCore::ContainerNode::parserAppendChild(v27, v4, v23, v24);
  v31 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_QWORD *)(v31 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v32 = *(_QWORD *)((*(_QWORD *)(v31 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 80);
      if (v33)
      {
        while ((*(_WORD *)(v33 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          v33 = *(_QWORD *)(v33 + 56);
          if (!v33)
            goto LABEL_54;
        }
        *(_DWORD *)(v33 + 24) += 2;
        result = (unsigned int *)WebCore::Element::setBooleanAttribute((WTF::StringImpl **)v33, (const WebCore::QualifiedName *)&WebCore::HTMLNames::disabledAttr, (*(_BYTE *)(v31 + 160) & 0x18) != 0, v30);
        if (*(_DWORD *)(v33 + 24) == 2)
        {
          if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v33, v29);
        }
        else
        {
          *(_DWORD *)(v33 + 24) -= 2;
        }
      }
    }
  }
LABEL_54:
  if (*(_DWORD *)(v27 + 24) == 2)
  {
    if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v27, v29);
  }
  else
  {
    *(_DWORD *)(v27 + 24) -= 2;
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v4, v29);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return result;
}

unsigned int *WebCore::FileInputType::disabledStateChanged(unsigned int *this, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 80);
      if (v4)
      {
        while ((*(_WORD *)(v4 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          v4 = *(_QWORD *)(v4 + 56);
          if (!v4)
            return this;
        }
        *(_DWORD *)(v4 + 24) += 2;
        this = (unsigned int *)WebCore::Element::setBooleanAttribute((WTF::StringImpl **)v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::disabledAttr, (*(_BYTE *)(v2 + 160) & 0x18) != 0, a2);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::FileInputType::attributeChanged(unsigned int *this, const WebCore::QualifiedName *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BYTE v13[8];
  WTF::StringImpl *v14;
  char v15;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::multipleAttr)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v5 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 80);
            if (v6)
            {
              while ((*(_WORD *)(v6 + 28) & 0x10) == 0
                   || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
              {
                v6 = *(_QWORD *)(v6 + 56);
                if (!v6)
                  goto LABEL_5;
              }
              *(_DWORD *)(v6 + 24) += 2;
              v7 = *(_QWORD *)(v4 + 104);
              if (v7
                && ((v8 = *(_DWORD *)(v7 + 4), (v8 & 1) != 0)
                  ? (v9 = *(uint64_t **)(v7 + 40), LODWORD(v7) = *(_DWORD *)(v7 + 52))
                  : (v9 = (uint64_t *)(v7 + 32), LODWORD(v7) = v8 >> 5),
                    (_DWORD)v7))
              {
                v7 = v7;
                while (1)
                {
                  v10 = *v9;
                  if (*v9 == v2
                    || *(_QWORD *)(v10 + 24) == *(_QWORD *)(v2 + 24) && *(_QWORD *)(v10 + 32) == *(_QWORD *)(v2 + 32))
                  {
                    break;
                  }
                  v9 += 2;
                  if (!--v7)
                    goto LABEL_28;
                }
                WebCore::fileButtonChooseMultipleFilesLabel((uint64_t)&v12);
              }
              else
              {
LABEL_28:
                WebCore::fileButtonChooseFileLabel((uint64_t)&v12);
              }
              WebCore::HTMLInputElement::setValue(v6, (uint64_t)&v12, 0, 0, (uint64_t)v13);
              if (v15)
              {
                v11 = v14;
                v14 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy(v11, a2);
                  else
                    *(_DWORD *)v11 -= 2;
                }
              }
              this = (unsigned int *)v12;
              v12 = 0;
              if (this)
              {
                if (*this == 2)
                  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                else
                  *this -= 2;
              }
              if (*(_DWORD *)(v6 + 24) == 2)
              {
                if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
              }
              else
              {
                *(_DWORD *)(v6 + 24) -= 2;
              }
            }
          }
        }
LABEL_5:
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FileInputType::iconLoaded(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  const void *v5;
  _BYTE v6[20];
  __int128 v7;
  char v8;

  v2 = *a2;
  if (*(_QWORD *)(result + 88) != *a2)
  {
    v3 = result;
    *a2 = 0;
    v4 = *(WTF **)(result + 88);
    *(_QWORD *)(result + 88) = v2;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v5 = (const void *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v5)
          CFRelease(v5);
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL;
    if (result)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        result = 105;
        __break(0xC471u);
      }
      else if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                  + 8)
                                                                                      + 1944)
                                                                          + 24)
                                                              + 8)
                                                  + 40)
                                      + 8)
                          + 3382))
      {
        LOBYTE(v7) = 0;
        v8 = 0;
        v6[0] = 0;
        v6[16] = 0;
        return WebCore::RenderObject::issueRepaint(result, &v7, 0, 0, (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::Element::hasAttributeWithoutSynchronization(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
    return 0;
  }
  v4 = *(uint64_t **)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    return 0;
LABEL_4:
  v6 = *a2;
  v5 = v5;
  while (1)
  {
    v7 = *v4;
    if (*v4 == v6 || *(_QWORD *)(v7 + 24) == *(_QWORD *)(v6 + 24) && *(_QWORD *)(v7 + 32) == *(_QWORD *)(v6 + 32))
      break;
    v4 += 2;
    if (!--v5)
      return 0;
  }
  return 1;
}

uint64_t WebCore::FileInputType::dirAutoUsesValue(WebCore::FileInputType *this)
{
  return 0;
}

unsigned int *WebCore::FileInputType::setFiles(unsigned int *result, uint64_t *a2, const WTF::StringImpl *a3, char a4)
{
  uint64_t v4;
  int v6;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF *v44;
  const void *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  WTF *v50;
  uint64_t v51;
  _BYTE v52[16];
  char v53;
  __int128 v54;
  char v55;

  v4 = *a2;
  if (!*a2)
    return result;
  v6 = (int)a3;
  v8 = result;
  v9 = *((_QWORD *)result + 3);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v11 == *(_DWORD *)(*((_QWORD *)result + 9) + 28))
  {
    if (!(_DWORD)v11)
    {
LABEL_14:
      v14 = 0;
      goto LABEL_16;
    }
    v12 = 0;
    while (1)
    {
      if (v12 >= *(unsigned int *)(*a2 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195BA2624);
      }
      v13 = *((_QWORD *)v8 + 9);
      if (v12 >= *(unsigned int *)(v13 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195BA262CLL);
      }
      if (!WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8 * v12) + 128), *(const WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v12) + 128), a3))break;
      if (v12 >= *(unsigned int *)(*a2 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195BA2634);
      }
      if (v12 >= *(unsigned int *)(*((_QWORD *)v8 + 9) + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195BA263CLL);
      }
      if ((WTF::FileSystemImpl::fileIDsAreEqual() & 1) == 0)
        break;
      if (v11 == ++v12)
        goto LABEL_14;
    }
  }
  v14 = 1;
LABEL_16:
  v15 = *a2;
  *a2 = 0;
  v16 = (_DWORD *)*((_QWORD *)v8 + 9);
  *((_QWORD *)v8 + 9) = v15;
  if (v16)
  {
    if (v16[2] == 1)
    {
      v40 = v16[7];
      if ((_DWORD)v40)
      {
        v41 = (_DWORD **)*((_QWORD *)v16 + 2);
        v42 = 8 * v40;
        do
        {
          v43 = *v41;
          *v41 = 0;
          if (v43)
          {
            if (v43[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
            else
              --v43[4];
          }
          ++v41;
          v42 -= 8;
        }
        while (v42);
      }
      v44 = (WTF *)*((_QWORD *)v16 + 2);
      if (v44)
      {
        *((_QWORD *)v16 + 2) = 0;
        v16[6] = 0;
        WTF::fastFree(v44, a2);
      }
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)(*(_QWORD *)v16 + 8) = 3;
        *(_QWORD *)v16 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v16, a2);
    }
    else
    {
      --v16[2];
    }
  }
  *(_BYTE *)(v10 + 168) |= 2u;
  WebCore::ValidatedFormListedElement::updateValidity(v10 + 112);
  if (v6)
  {
    v18 = *((_QWORD *)v8 + 9);
    v50 = 0;
    v51 = 0;
    v19 = *(unsigned int *)(v18 + 28);
    if ((_DWORD)v19)
    {
      if (v19 >> 29)
      {
        __break(0xC471u);
        goto LABEL_104;
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
      v21 = v20;
      LODWORD(v51) = v19;
      v50 = v20;
      v22 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = *(_QWORD *)(v18 + 16);
        do
        {
          v25 = *(_DWORD **)(*(_QWORD *)(v24 + v23) + 128);
          if (v25)
            *v25 += 2;
          *(_QWORD *)((char *)v20 + v23) = v25;
          v23 += 8;
        }
        while (8 * v22 != v23);
        HIDWORD(v51) = v22;
        v26 = *((_QWORD *)v8 + 3);
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40) + 8) + 528);
        if (v27
          && (v28 = *(_QWORD *)(v27 + 8)) != 0
          && (v29 = *(_QWORD *)(v28 + 24)) != 0
          && (v30 = *(_QWORD *)(v29 + 8)) != 0
          && (v31 = *(_QWORD *)(v30 + 48)) != 0)
        {
          v32 = (_QWORD *)*((_QWORD *)v8 + 8);
          if (v32)
            *v32 = 0;
          v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          *v34 = v8 + 10;
          v35 = (WTF *)*((_QWORD *)v8 + 8);
          *((_QWORD *)v8 + 8) = v34;
          if (v35)
          {
            WTF::fastFree(v35, v33);
            v34 = (_QWORD *)*((_QWORD *)v8 + 8);
          }
          (*(void (**)(_QWORD, WTF **, _QWORD *))(**(_QWORD **)(v31 + 16) + 840))(*(_QWORD *)(v31 + 16), &v50, v34);
          LODWORD(v22) = HIDWORD(v51);
          v21 = v50;
          if (!HIDWORD(v51))
            goto LABEL_76;
        }
        else
        {
          v36 = (WTF *)*((_QWORD *)v8 + 11);
          if (v36)
          {
            *((_QWORD *)v8 + 11) = 0;
            if (*(_DWORD *)v36 == 1)
            {
              v45 = (const void *)*((_QWORD *)v36 + 1);
              *((_QWORD *)v36 + 1) = 0;
              if (v45)
                CFRelease(v45);
              WTF::fastFree(v36, v17);
              v26 = *((_QWORD *)v8 + 3);
            }
            else
            {
              --*(_DWORD *)v36;
            }
            v37 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 64);
            if ((v37 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((v37 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195BA25F4);
              }
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                         + 1944)
                                                                             + 24)
                                                                 + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v54) = 0;
                v55 = 0;
                v52[0] = 0;
                v53 = 0;
                WebCore::RenderObject::issueRepaint(v37 & 0xFFFFFFFFFFFFLL, &v54, 0, 0, (uint64_t)v52);
              }
            }
          }
        }
        v38 = 8 * v22;
        do
        {
          v39 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
            else
              *(_DWORD *)v39 -= 2;
          }
          v21 = (WTF *)((char *)v21 + 8);
          v38 -= 8;
        }
        while (v38);
        v21 = v50;
LABEL_76:
        if (v21)
        {
          v50 = 0;
          LODWORD(v51) = 0;
          WTF::fastFree(v21, v17);
        }
        goto LABEL_78;
      }
    }
    else
    {
      v21 = 0;
    }
    v46 = (WTF *)*((_QWORD *)v8 + 11);
    if (v46)
    {
      *((_QWORD *)v8 + 11) = 0;
      if (*(_DWORD *)v46 == 1)
      {
        v49 = (const void *)*((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = 0;
        if (v49)
          CFRelease(v49);
        WTF::fastFree(v46, v17);
      }
      else
      {
        --*(_DWORD *)v46;
      }
      v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 64);
      if ((v47 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v47 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195BA2614);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v54) = 0;
          v55 = 0;
          v52[0] = 0;
          v53 = 0;
          WebCore::RenderObject::issueRepaint(v47 & 0xFFFFFFFFFFFFLL, &v54, 0, 0, (uint64_t)v52);
        }
      }
    }
    goto LABEL_76;
  }
LABEL_78:
  v48 = *(_QWORD *)(v10 + 64);
  result = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
  if ((v48 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v48 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v48 & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v54) = 0;
        v55 = 0;
        v52[0] = 0;
        v53 = 0;
        result = (unsigned int *)WebCore::RenderObject::issueRepaint((uint64_t)result, &v54, 0, 0, (uint64_t)v52);
      }
      goto LABEL_82;
    }
    __break(0xC471u);
LABEL_104:
    JUMPOUT(0x195BA25D4);
  }
LABEL_82:
  if ((a4 & 1) == 0)
  {
    if (v14)
    {
      WebCore::Node::dispatchInputEvent((WebCore::Node *)v10);
      WebCore::HTMLFormControlElement::dispatchChangeEvent((WebCore::HTMLFormControlElement *)v10);
    }
    else
    {
      WebCore::HTMLFormControlElement::dispatchCancelEvent((WebCore::HTMLFormControlElement *)v10);
    }
    *(_BYTE *)(v10 + 168) &= ~4u;
    result = (unsigned int *)WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)(v10 + 112), 1);
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::FileInputType::didCreateFileList(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  bmalloc::api *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[20];
  __int128 v25;
  char v26;

  ++*(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v22 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)&v25 = v9;
  result = (uint64_t)WebCore::FileInputType::setFiles((unsigned int *)a1, (uint64_t *)&v25, (const WTF::StringImpl *)(*a3 == 0), 0);
  v12 = (bmalloc::api *)v25;
  if ((_QWORD)v25)
  {
    if (*(_DWORD *)(v25 + 8) == 1)
    {
      v16 = *(unsigned int *)(v25 + 28);
      if ((_DWORD)v16)
      {
        v17 = *(_DWORD ***)(v25 + 16);
        v18 = 8 * v16;
        do
        {
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (v19[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[4];
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      v20 = (WTF *)*((_QWORD *)v12 + 2);
      if (v20)
      {
        *((_QWORD *)v12 + 2) = 0;
        *((_DWORD *)v12 + 6) = 0;
        WTF::fastFree(v20, v11);
      }
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)(*(_QWORD *)v12 + 8) = 3;
        *(_QWORD *)v12 = 0;
      }
      result = bmalloc::api::isoDeallocate(v12, v11);
    }
    else
    {
      --*(_DWORD *)(v25 + 8);
    }
  }
  v13 = *a3;
  if (*a3)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 28))
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8) && *(_QWORD *)(a1 + 88) != v13)
        {
          *a3 = 0;
          v15 = *(WTF **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v13;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              v21 = (const void *)*((_QWORD *)v15 + 1);
              *((_QWORD *)v15 + 1) = 0;
              if (v21)
                CFRelease(v21);
              WTF::fastFree(v15, v11);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
          result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL;
          if (result)
          {
            if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              result = 105;
              __break(0xC471u);
              return result;
            }
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                       + 1944)
                                                                           + 24)
                                                               + 8)
                                                   + 40)
                                       + 8)
                           + 3382))
            {
              LOBYTE(v25) = 0;
              v26 = 0;
              v24[0] = 0;
              v24[16] = 0;
              result = WebCore::RenderObject::issueRepaint(result, &v25, 0, 0, (uint64_t)v24);
            }
          }
        }
      }
    }
  }
  else if (!a1)
  {
    return result;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  --*(_DWORD *)(a1 + 8);
  return result;
}

WTF *`non-virtual thunk to'WebCore::FileInputType::filesChosen(uint64_t a1, unsigned int *a2, _DWORD **a3, WTF *a4)
{
  return WebCore::FileInputType::filesChosen((WTF *)(a1 - 32), a2, a3, a4);
}

unsigned int *WebCore::FileInputType::fileChoosingCancelled(WebCore::FileInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *result;
  void *v4;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::HTMLFormControlElement::dispatchCancelEvent((WebCore::HTMLFormControlElement *)v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::FileInputType::fileChoosingCancelled(WebCore::FileInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *result;
  void *v4;

  v1 = *((_QWORD *)this - 1);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::HTMLFormControlElement::dispatchCancelEvent((WebCore::HTMLFormControlElement *)v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::FileInputType::displayString@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 96);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FileInputType::iconLoaded(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  const void *v5;
  _BYTE v6[20];
  __int128 v7;
  char v8;

  v2 = *a2;
  if (*(_QWORD *)(result + 48) != *a2)
  {
    v3 = result;
    *a2 = 0;
    v4 = *(WTF **)(result + 48);
    *(_QWORD *)(result + 48) = v2;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v5 = (const void *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v5)
          CFRelease(v5);
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 16) + 8) + 64) & 0xFFFFFFFFFFFFLL;
    if (result)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 16) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        result = 105;
        __break(0xC471u);
      }
      else if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 16) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                  + 8)
                                                                                      + 1944)
                                                                          + 24)
                                                              + 8)
                                                  + 40)
                                      + 8)
                          + 3382))
      {
        LOBYTE(v7) = 0;
        v8 = 0;
        v6[0] = 0;
        v6[16] = 0;
        return WebCore::RenderObject::issueRepaint(result, &v7, 0, 0, (uint64_t)v6);
      }
    }
  }
  return result;
}

BOOL WebCore::FileInputType::receiveDroppedFiles(WebCore::FileInputType *this, const WebCore::DragData *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _DWORD **v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;

  WebCore::DragData::asFilenames((uint64_t)a2, (uint64_t)&v26);
  v4 = v28;
  if (!v28)
    goto LABEL_26;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v5)
    goto LABEL_15;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = (uint64_t *)(v5 + 32);
    LODWORD(v8) = v6 >> 5;
    if (!(_DWORD)v8)
      goto LABEL_15;
LABEL_7:
    v8 = v8;
    while (1)
    {
      v9 = *v7;
      if (*v7 == WebCore::HTMLNames::multipleAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
      {
        break;
      }
      v7 += 2;
      if (!--v8)
        goto LABEL_15;
    }
    v31 = 0;
    v10 = v28;
    if (v28 >= 0xAAAAAAB)
    {
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x195BA2BA4);
    }
    goto LABEL_16;
  }
  v7 = *(uint64_t **)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if ((_DWORD)v8)
    goto LABEL_7;
LABEL_15:
  v10 = 1;
LABEL_16:
  v11 = WTF::fastMalloc((WTF *)(24 * v10));
  LODWORD(v31) = 24 * (int)v10 / 0x18u;
  v30 = v11;
  v12 = v28;
  v13 = v26;
  v14 = v10 - 1;
  if (v10 - 1 >= (unint64_t)v28)
    v14 = v28;
  v15 = v14 + 1;
  v16 = (_QWORD *)(v11 + 8);
  v17 = (_DWORD **)MEMORY[0x1E0CBF6F0];
  do
  {
    if (!v12)
      goto LABEL_36;
    v18 = *(_DWORD **)v13;
    if (*(_QWORD *)v13)
      *v18 += 2;
    v19 = *v17;
    if (*v17)
      *v19 += 2;
    *(v16 - 1) = v18;
    *v16 = v19;
    --v12;
    v13 = (WTF *)((char *)v13 + 8);
    v16[1] = 0;
    v16 += 3;
    --v10;
  }
  while (v10);
  HIDWORD(v31) = v15;
  v29 = 0;
  WebCore::FileInputType::filesChosen(this, (unsigned int *)&v30, &v29, 0);
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v30, v20);
  if (v28)
  {
    v23 = v26;
    v24 = 8 * v28;
    do
    {
      v25 = *(WTF::StringImpl **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v3);
        else
          *(_DWORD *)v25 -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
LABEL_26:
  v21 = v26;
  if (v26)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v21, v3);
  }
  return v4 != 0;
}

uint64_t WebCore::FileInputType::icon(WebCore::FileInputType *this)
{
  return *((_QWORD *)this + 11);
}

void WebCore::FileInputType::defaultToolTip(WebCore::FileInputType *this@<X0>, WTF::StringImpl *a2@<X1>, WebCore **a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WebCore *v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WebCore *v16;
  WTF::StringImpl *v17;
  WebCore *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  char v27;
  char v28;

  v5 = *(unsigned int *)(*((_QWORD *)this + 9) + 28);
  if (!(_DWORD)v5)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 + 4);
      if ((v20 & 1) == 0)
      {
        v21 = (uint64_t *)(v19 + 32);
        LODWORD(v22) = v20 >> 5;
        if (!(_DWORD)v22)
          goto LABEL_58;
LABEL_51:
        v22 = v22;
        do
        {
          v23 = *v21;
          if (*v21 == WebCore::HTMLNames::multipleAttr
            || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
            && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
          {
            WebCore::fileButtonNoFilesSelectedLabel((uint64_t)a3);
            return;
          }
          v21 += 2;
          --v22;
        }
        while (v22);
        goto LABEL_58;
      }
      v21 = *(uint64_t **)(v19 + 40);
      LODWORD(v22) = *(_DWORD *)(v19 + 52);
      if ((_DWORD)v22)
        goto LABEL_51;
    }
LABEL_58:
    WebCore::fileButtonNoFileSelectedLabel((uint64_t)a3);
    return;
  }
  v6 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  do
  {
    v7 = *((_QWORD *)this + 9);
    if (v6 >= *(unsigned int *)(v7 + 28))
    {
      __break(0xC471u);
      return;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v6);
    v9 = *(_QWORD *)(v8 + 144);
    if (v26)
      v10 = 0;
    else
      v10 = v25 == 0;
    if (v10)
    {
      if (v9)
        *(_DWORD *)v9 += 2;
      v11 = v24;
      v24 = (WebCore *)v9;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, a2);
          v9 = *(_QWORD *)(v8 + 144);
          if (!v9)
            goto LABEL_16;
          goto LABEL_15;
        }
        *(_DWORD *)v11 -= 2;
      }
      if (!v9)
      {
LABEL_16:
        v26 = v9;
        goto LABEL_17;
      }
LABEL_15:
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
      goto LABEL_16;
    }
    if (v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
LABEL_17:
    if ((_DWORD)v5 - 1 != v6)
    {
      v28 = 10;
      if (v25 && ((v12 = v26, v26 < *((_DWORD *)v25 + 1)) ? (v13 = v24 == 0) : (v13 = 0), v13))
      {
        v14 = *((_DWORD *)v25 + 4);
        v15 = *((_QWORD *)v25 + 1);
        ++v26;
        if ((v14 & 4) != 0)
          *(_BYTE *)(v15 + v12) = 10;
        else
          *(_WORD *)(v15 + 2 * v12) = 10;
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
    ++v6;
  }
  while (v5 != v6);
  v16 = v24;
  if (v24
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24),
        (v16 = v24) != 0))
  {
    *(_DWORD *)v16 += 2;
  }
  *a3 = v16;
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

void WebCore::FormAssociatedCustomElement::~FormAssociatedCustomElement(WebCore::FormAssociatedCustomElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::Node *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  char v22;
  char v23;

  v21 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      (*(void (**)(WebCore::FormAssociatedCustomElement *, WebCore::Node **))(*(_QWORD *)this + 80))(this, &v21);
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
  }
  v4 = *((unsigned int *)this + 26);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E33B3978[v4])(&v22, (char *)this + 96);
  *((_DWORD *)this + 26) = -1;
  v5 = *((unsigned int *)this + 22);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E33B3978[v5])(&v23, (char *)this + 80);
  *((_DWORD *)this + 22) = -1;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v13 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v13)
      {
        v19 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v13));
        v6 = v19;
      }
      v14 = *(WTF **)(v6 + 16);
      if (v14)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v17 = v6;
        WTF::fastFree(v14, a2);
        v6 = v17;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v15 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v15)
      {
        v20 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v15));
        v9 = v20;
      }
      v16 = *(WTF **)(v9 + 16);
      if (v16)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v18 = v9;
        WTF::fastFree(v16, a2);
        v9 = v18;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(this, (WTF::StringImpl *)a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::FormAssociatedCustomElement::~FormAssociatedCustomElement(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::FormAssociatedCustomElement::setValidity@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X2>, const WebCore::Node ***a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;

  v6 = (_QWORD *)this;
  if (((unsigned __int16)a2 & 0x3FF) != 0)
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      v8 = 33;
      goto LABEL_21;
    }
    *(_WORD *)(this + 64) = (_WORD)a2;
    v9 = *a3;
    if (!*a3)
      goto LABEL_19;
LABEL_5:
    v10 = 0;
    *(_DWORD *)v9 += 4;
    goto LABEL_6;
  }
  *(_WORD *)(this + 64) = (_WORD)a2;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    goto LABEL_5;
LABEL_19:
  v10 = 1;
LABEL_6:
  v11 = *(WTF::StringImpl **)(this + 32);
  v6[4] = v9;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)v6);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v12);
      if (a4)
        goto LABEL_13;
      goto LABEL_24;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (a4)
  {
LABEL_13:
    this = WebCore::Node::isDescendantOrShadowDescendantOf(a4, *(const WebCore::Node **)(v6[7] + 8));
    if ((_DWORD)this)
    {
      this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a4);
      if (this)
      {
        do
          v13 = __ldaxr((unsigned int *)this);
        while (__stlxr(v13 + 1, (unsigned int *)this));
      }
      goto LABEL_25;
    }
    v8 = 5;
LABEL_21:
    *(_BYTE *)a5 = v8;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
    return this;
  }
LABEL_24:
  this = 0;
LABEL_25:
  v14 = v6[9];
  v6[9] = this;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v17 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v17)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
      v18 = *(WTF **)(v14 + 16);
      if (v18)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v18, v12);
      }
      this = WTF::fastFree((WTF *)v14, v12);
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  return this;
}

uint64_t WebCore::FormAssociatedCustomElement::validationMessage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

_QWORD *WebCore::FormAssociatedCustomElement::setFormValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::FormAssociatedCustomElement *v12;
  uint64_t v13;
  int v14;
  char v15;
  char *v16;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
    goto LABEL_22;
  v16 = &v15;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, char **))off_1E33B3998[v3])(&v13, &v16);
  v7 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v7 == -1)
  {
    if (v14 == -1)
      goto LABEL_9;
  }
  else if (v14 == -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E33B3978[v7])(&v16, a1 + 80);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_7;
  }
  v16 = (char *)(a1 + 80);
  result = (_QWORD *)((uint64_t (*)(char **, uint64_t, uint64_t *))off_1E33B39B8[v14])(&v16, a1 + 80, &v13);
LABEL_7:
  if (v14 != -1)
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t *))off_1E33B3978[v14])(&v16, &v13);
LABEL_9:
  if (*(_BYTE *)(a3 + 16))
  {
    v8 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v8 != -1)
    {
      v16 = &v15;
      result = ((_QWORD *(*)(uint64_t *__return_ptr, char **, uint64_t))off_1E33B3998[v8])(&v13, &v16, a3);
      v9 = v14;
      goto LABEL_14;
    }
LABEL_22:
    v12 = (WebCore::FormAssociatedCustomElement *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::FormAssociatedCustomElement::validationAnchorElement(v12);
  }
  LOBYTE(v13) = 0;
  v9 = -1;
  v14 = -1;
  v10 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v10 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t *, uint64_t))off_1E33B39D8[v10])(&v16, &v13, a1 + 80);
    v14 = v10;
    v9 = v10;
  }
LABEL_14:
  v11 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v11 == -1)
  {
    if (v9 == -1)
      return result;
  }
  else if (v9 == -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E33B3978[v11])(&v16, a1 + 96);
    *(_DWORD *)(a1 + 104) = -1;
    goto LABEL_19;
  }
  v16 = (char *)(a1 + 96);
  result = (_QWORD *)((uint64_t (*)(char **))off_1E33B39B8[v9])(&v16);
LABEL_19:
  if (v14 != -1)
    return (_QWORD *)((uint64_t (*)(char **, uint64_t *))off_1E33B3978[v14])(&v16, &v13);
  return result;
}

uint64_t WebCore::FormAssociatedCustomElement::validationAnchorElement(WebCore::FormAssociatedCustomElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WebCore::FormAssociatedCustomElement::computeValidity(WebCore::FormAssociatedCustomElement *this)
{
  return (*((_WORD *)this + 32) & 0x3FF) == 0;
}

uint64_t WebCore::FormAssociatedCustomElement::appendFormData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::FormAssociatedCustomElement *v4;
  _QWORD v5[5];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a1;
  v5[2] = a2;
  v5[3] = a1;
  v5[4] = a2;
  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::FormAssociatedCustomElement *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FormAssociatedCustomElement::isEnumeratable(v4);
  }
  else
  {
    v6 = v5;
    ((void (*)(_QWORD **, uint64_t))off_1E33B3AD0[v2])(&v6, a1 + 80);
    return 1;
  }
}

uint64_t WebCore::FormAssociatedCustomElement::isEnumeratable(WebCore::FormAssociatedCustomElement *this)
{
  return 1;
}

WebCore::Element *WebCore::FormAssociatedCustomElement::reset(WebCore::FormAssociatedCustomElement *this)
{
  WebCore::Element *v2;

  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this, 0);
  return WebCore::CustomElementReactionQueue::enqueueFormResetCallbackIfNeeded(*(WebCore::Element **)(*((_QWORD *)this + 7) + 8), v2);
}

WebCore::Element *WebCore::FormAssociatedCustomElement::disabledStateChanged(WebCore::FormAssociatedCustomElement *this)
{
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  return WebCore::CustomElementReactionQueue::enqueueFormDisabledCallbackIfNeeded(*(WebCore::Element **)(*((_QWORD *)this + 7) + 8), (WebCore::Element *)((*((_BYTE *)this + 48) & 0x18) != 0));
}

WebCore::Element *WebCore::FormAssociatedCustomElement::didChangeForm(WebCore::Element *this, uint64_t a2, WebCore::HTMLFormElement *a3)
{
  int v3;
  uint64_t v4;
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::Element *v7;
  WebCore::HTMLFormElement *v8;
  const WebCore::HTMLElement *v9;
  WebCore::Element *v10;

  v3 = WebCore::ScriptDisallowedScope::s_count++;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v8 = *(WebCore::HTMLFormElement **)(v4 + 8);
    if (v8)
    {
      if ((*((_BYTE *)this + 48) & 7) == 6)
      {
        v10 = this;
        v9 = (const WebCore::HTMLElement *)(*(uint64_t (**)(void))(*(_QWORD *)this + 16))();
        WebCore::HTMLFormElement::addInvalidFormControl(v8, v9);
        this = v10;
        v3 = WebCore::ScriptDisallowedScope::s_count - 1;
      }
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v3;
  if ((*((char *)this + 48) & 0x80000000) == 0)
  {
    v5 = (WebCore::Element *)*((_QWORD *)this + 7);
    if (v5)
      v5 = (WebCore::Element *)*((_QWORD *)v5 + 1);
    v6 = *((_QWORD *)this + 1);
    if (v6)
      v7 = *(WebCore::Element **)(v6 + 8);
    else
      v7 = 0;
    return WebCore::CustomElementReactionQueue::enqueueFormAssociatedCallbackIfNeeded(v5, v7, a3);
  }
  return this;
}

WTF *WebCore::FormAssociatedCustomElement::didUpgrade(WebCore::FormAssociatedCustomElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::AtomString *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::AtomString *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  WebCore::CollectionNamedElementCache **v28;
  uint64_t v29;
  int v30;
  WebCore::CollectionNamedElementCache **v31;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 104);
  if (!v4)
    goto LABEL_15;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_7;
LABEL_15:
    v8 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_15;
LABEL_7:
  v7 = v7;
  v8 = (const WTF::AtomString *)(v6 + 8);
  while (1)
  {
    v9 = *((_QWORD *)v8 - 1);
    if (v9 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v8 = (const WTF::AtomString *)((char *)v8 + 16);
    if (!--v7)
    {
      v8 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  WebCore::FormListedElement::parseFormAttribute(this, v8);
  v10 = *(_QWORD *)(v3 + 104);
  if (!v10)
    goto LABEL_27;
  v11 = *(_DWORD *)(v10 + 4);
  if ((v11 & 1) == 0)
  {
    v12 = v10 + 32;
    LODWORD(v13) = v11 >> 5;
    if ((_DWORD)v13)
      goto LABEL_19;
LABEL_27:
    v14 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_28;
  }
  v12 = *(_QWORD *)(v10 + 40);
  LODWORD(v13) = *(_DWORD *)(v10 + 52);
  if (!(_DWORD)v13)
    goto LABEL_27;
LABEL_19:
  v13 = v13;
  v14 = (_QWORD *)(v12 + 8);
  while (1)
  {
    v15 = *(v14 - 1);
    if (v15 == WebCore::HTMLNames::disabledAttr
      || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
      && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
    {
      break;
    }
    v14 += 2;
    if (!--v13)
    {
      v14 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_28:
  WebCore::ValidatedFormListedElement::setDisabledInternal(this, *v14 != 0, (*((unsigned __int8 *)this + 48) >> 4) & 1);
  v16 = *(_QWORD *)(v3 + 104);
  if (!v16)
    goto LABEL_39;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) == 0)
  {
    v18 = v16 + 32;
    LODWORD(v19) = v17 >> 5;
    if ((_DWORD)v19)
      goto LABEL_31;
LABEL_39:
    v20 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_40;
  }
  v18 = *(_QWORD *)(v16 + 40);
  LODWORD(v19) = *(_DWORD *)(v16 + 52);
  if (!(_DWORD)v19)
    goto LABEL_39;
LABEL_31:
  v19 = v19;
  v20 = (const WTF::AtomString *)(v18 + 8);
  while (1)
  {
    v21 = *((_QWORD *)v20 - 1);
    if (v21 == WebCore::HTMLNames::readonlyAttr
      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 24)
      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 32))
    {
      break;
    }
    v20 = (const WTF::AtomString *)((char *)v20 + 16);
    if (!--v19)
    {
      v20 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_40:
  WebCore::ValidatedFormListedElement::parseReadOnlyAttribute((unsigned __int8 *)this, v20);
  *((_BYTE *)this + 50) = *((_BYTE *)this + 50) & 0xFC | 2;
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  WebCore::ValidatedFormListedElement::syncWithFieldsetAncestors(this, *(WebCore::ContainerNode **)(v3 + 32));
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    v29 = *(_QWORD *)(v23 + 8);
    if (v29)
    {
      v30 = *(_DWORD *)(v29 + 24);
      *(_DWORD *)(v29 + 24) = v30 + 2;
      v31 = (WebCore::CollectionNamedElementCache **)(*(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFLL);
      if (v31 && *v31)
      {
        WebCore::NodeListsNodeData::invalidateCachesForAttribute(*v31, (const WebCore::QualifiedName *)&WebCore::HTMLNames::formAttr);
        v30 = *(_DWORD *)(v29 + 24) - 2;
      }
      if (v30)
      {
        *(_DWORD *)(v29 + 24) = v30;
      }
      else if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v22);
      }
    }
  }
  v24 = *((_QWORD *)this + 7);
  if (v24)
    v25 = *(_QWORD *)(v24 + 8);
  else
    v25 = 0;
  if ((*(_WORD *)(v25 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
  {
    v25 = *(_QWORD *)(v25 + 32);
    if (!v25)
      return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
    v26 = *(_WORD *)(v25 + 28);
    if ((v26 & 8) == 0)
      return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
    while ((v26 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    {
      v25 = *(_QWORD *)(v25 + 32);
      if (v25)
      {
        v26 = *(_WORD *)(v25 + 28);
        if ((v26 & 8) != 0)
          continue;
      }
      return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
    }
  }
  do
  {
    v28 = (WebCore::CollectionNamedElementCache **)(*(_QWORD *)(v25 + 72) & 0xFFFFFFFFFFFFLL);
    if (v28 && *v28)
      WebCore::NodeListsNodeData::invalidateCachesForAttribute(*v28, (const WebCore::QualifiedName *)&WebCore::HTMLNames::formAttr);
    v25 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v25);
  }
  while (v25);
  return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
}

uint64_t WebCore::FormAssociatedCustomElement::asHTMLElement(WebCore::FormAssociatedCustomElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

unsigned int *WebCore::FormListedElement::parseFormAttribute(WebCore::FormListedElement *this, const WTF::AtomString *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this);
  v6 = v4;
  if (*(_QWORD *)a2)
  {
    result = WebCore::FormListedElement::resetFormOwner(this);
    if ((*(_BYTE *)(v6 + 22) & 8) != 0)
      return (unsigned int *)WebCore::FormListedElement::resetFormAttributeTargetObserver(this);
    return result;
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = 0;
      *(_DWORD *)(v9 + 24) += 2;
      goto LABEL_7;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
LABEL_7:
  v11 = *(_QWORD *)(v4 + 32);
  if (v11)
  {
    v12 = *(_WORD *)(v11 + 28);
    if ((v12 & 8) != 0)
    {
      while ((v12 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_14;
        v12 = *(_WORD *)(v11 + 28);
        if ((v12 & 8) == 0)
          goto LABEL_13;
      }
      *(_DWORD *)(v11 + 24) += 2;
    }
    else
    {
LABEL_13:
      v11 = 0;
    }
  }
LABEL_14:
  v17 = v11;
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  if (v11 != v8)
  {
    (*(void (**)(WebCore::FormListedElement *, uint64_t *))(*(_QWORD *)this + 80))(this, &v17);
    v11 = v17;
  }
  v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v5);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    v15 = !v14 || v9 == v14;
    if (!v15 && (*(_BYTE *)(v14 + 22) & 8) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
      *(_DWORD *)(v16 + 24) += 2;
      WebCore::Document::didAssociateFormControl(v16, (WebCore::Element *)v6);
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v5);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

WTF *WebCore::FormAssociatedCustomElement::finishParsingChildren(WebCore::FormAssociatedCustomElement *this)
{
  WTF *result;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (WTF *)(*(uint64_t (**)(WebCore::FormAssociatedCustomElement *))(*(_QWORD *)this + 24))(this);
  v3 = *((_QWORD *)result + 13);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) == 0)
    {
      v5 = (uint64_t *)(v3 + 32);
      LODWORD(v6) = v4 >> 5;
      if (!(_DWORD)v6)
        goto LABEL_13;
LABEL_6:
      v6 = v6;
      while (1)
      {
        v7 = *v5;
        if (*v5 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
        }
        v5 += 2;
        if (!--v6)
          goto LABEL_13;
      }
    }
    v5 = *(uint64_t **)(v3 + 40);
    LODWORD(v6) = *(_DWORD *)(v3 + 52);
    if ((_DWORD)v6)
      goto LABEL_6;
  }
LABEL_13:
  v8 = *((_QWORD *)this + 1);
  if (!v8 || !*(_QWORD *)(v8 + 8))
    return WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(this);
  return result;
}

uint64_t WebCore::FormController::ownerForm(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) + 104);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(uint64_t **)(v2 + 40);
      LODWORD(v5) = *(_DWORD *)(v2 + 52);
      if ((_DWORD)v5)
      {
LABEL_4:
        v5 = v5;
        do
        {
          v6 = *v4;
          if (*v4 == WebCore::HTMLNames::formAttr
            || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
            && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
          {
            return 0;
          }
          v4 += 2;
        }
        while (--v5);
      }
    }
    else
    {
      v4 = (uint64_t *)(v2 + 32);
      LODWORD(v5) = v3 >> 5;
      if ((_DWORD)v5)
        goto LABEL_4;
    }
  }
  v7 = a1[1];
  if (!v7)
    return 0;
  return *(_QWORD *)(v7 + 8);
}

uint64_t WebCore::FormAssociatedCustomElement::formControlType(WebCore::FormAssociatedCustomElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 96) + 24;
}

BOOL WebCore::FormAssociatedCustomElement::shouldSaveAndRestoreFormControlState(WebCore::FormAssociatedCustomElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 72);
  return (v1 & 0x3000000000000000) == 0x2000000000000000
      && (v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x60) + 8) + 96)) != 0
      && *(_QWORD *)v2
      && (*(_BYTE *)(v2 + 8) & 3) == 0;
}

uint64_t WebCore::FormAssociatedCustomElement::saveFormControlState@<X0>(WebCore::FormAssociatedCustomElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[5];
  _QWORD *v8;

  *a2 = 0;
  a2[1] = 0;
  v6 = 0;
  v5[0] = this;
  v5[1] = &v6;
  v7[0] = a2;
  v7[1] = v5;
  v7[2] = a2;
  v7[3] = this;
  v7[4] = &v6;
  v2 = *((unsigned int *)this + 26);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FormAssociatedCustomElement::restoreFormControlState(v4);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, char *))off_1E33B3B00[v2])(&v8, (char *)this + 96);
  }
}

void *WebCore::FormAssociatedCustomElement::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WebCore::ScriptExecutionContext *v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;
  int v15;
  const char *v16[2];

  v14 = 0;
  v15 = 0;
  if (*(_DWORD *)(a2 + 12) == 1)
  {
    v4 = **(_DWORD ***)a2;
    if (v4)
      *v4 += 2;
    v14 = v4;
    v15 = 2;
LABEL_14:
    result = WebCore::CustomElementReactionQueue::enqueueFormStateRestoreCallbackIfNeeded(*(WebCore::Element **)(*(_QWORD *)(a1 + 56) + 8), (unsigned int *)&v14);
    if (v15 != -1)
      return (void *)((uint64_t (*)(const char **, _DWORD **))off_1E33B3978[v15])(v16, &v14);
    return result;
  }
  v5 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) + 8)
                                         + 192);
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v12;
    v16[0] = (const char *)xmmword_1ECE86C80;
    v16[1] = v12;
    if (v12 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v16))
      {
        v13 = 165;
      }
      else
      {
        v13 = 92;
      }
    }
    else
    {
      v13 = 92;
    }
    word_1ECE86C90 = v13;
  }
  v6 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  result = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, v5);
  *(_QWORD *)v6 = &off_1E33B0880;
  *(_QWORD *)(v6 + 24) = &off_1E31F4A18;
  *(_OWORD *)(v6 + 32) = xmmword_1ECE86C80;
  *(_WORD *)(v6 + 48) = word_1ECE86C90;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  v8 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v8)
  {
LABEL_10:
    if (v15 != -1)
      ((void (*)(const char **, _DWORD **))off_1E33B3978[v15])(v16, &v14);
    v11 = *(_DWORD *)(v6 + 16);
    *(_DWORD *)(v6 + 16) = v11 + 1;
    v14 = (_DWORD *)v6;
    v15 = 3;
    if (v11)
      *(_DWORD *)(v6 + 16) = v11;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    goto LABEL_14;
  }
  v9 = 0;
  v10 = 0;
  while (v10 + 1 < v8)
  {
    result = WebCore::DOMFormData::append((WebCore::DOMFormData *)v6, (WTF::StringImpl **)(*(_QWORD *)a2 + v9), (WTF::StringImpl **)(*(_QWORD *)a2 + v9 + 8));
    v10 += 2;
    v8 = *(unsigned int *)(a2 + 12);
    v9 += 16;
    if (v10 >= v8)
      goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FormAssociatedElement::setFormInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;

  v2 = a1;
  if (*a2)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*a2);
    v3 = v9;
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v2 = a1;
  }
  else
  {
    v3 = 0;
  }
  result = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      v7 = *(unsigned int *)(result + 28);
      if ((_DWORD)v7)
      {
        v13 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v7));
        result = v13;
      }
      v8 = *(WTF **)(result + 16);
      if (v8)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v11 = result;
        WTF::fastFree(v8, a2);
        result = v11;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WebCore::FormAssociatedElement::elementRemovedFromAncestor(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  _QWORD *v8;
  WebCore::Node *v9;

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      do
      {
        v4 = a2;
        a2 = *(_QWORD *)(a2 + 32);
      }
      while (a2);
      do
      {
        v5 = v3;
        v3 = *(_QWORD *)(v3 + 32);
      }
      while (v3);
      if (v4 != v5)
      {
        v8 = result;
        v9 = 0;
        (*(void (**)(_QWORD *, WebCore::Node **))(*result + 80))(result, &v9);
        v7 = v9;
        v9 = 0;
        if (v7)
        {
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v7, v6);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
        }
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 72))(v8);
      }
    }
  }
  return result;
}

uint64_t WebCore::FormController::SavedFormState::takeControlState@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_31;
  v4 = (uint64_t *)result;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_QWORD *)a2 + 1);
  v7 = v5 & ((0xD7862706ELL
            * (unint64_t)(277951225 * (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8)
                                             + 95187966 * (*(_DWORD *)(v6 + 16) >> 8))) >> 4);
  v8 = v3 + 48 * v7;
  v10 = *(WTF::StringImpl **)v8;
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_OWORD *)v8 == 0)
  {
LABEL_8:
    v12 = *(_DWORD *)(v3 - 4);
    v8 = v3 + 48 * v12;
  }
  else
  {
    v11 = 1;
    while (v10 == (WTF::StringImpl *)-1 || v10 != *(WTF::StringImpl **)a2 || v9 != v6)
    {
      v7 = (v7 + v11) & v5;
      v8 = v3 + 48 * v7;
      v10 = *(WTF::StringImpl **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      ++v11;
      result = *(_QWORD *)v8 | v9;
      if (!result)
        goto LABEL_8;
    }
    v12 = *(_DWORD *)(v3 - 4);
  }
  if (v8 == v3 + 48 * v12)
  {
LABEL_31:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v8 + 16);
    if (v13 == *(_QWORD *)(v8 + 24))
    {
      result = 80;
      __break(0xC471u);
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(v8 + 32) + 16 * v13);
      *a3 = *v14;
      v15 = v14[1];
      *v14 = 0;
      v14[1] = 0;
      a3[1] = v15;
      v16 = *(_QWORD *)(v8 + 32) + 16 * v13;
      v17 = *(unsigned int *)(v16 + 12);
      if ((_DWORD)v17)
      {
        v30 = *(WTF::StringImpl ***)v16;
        v31 = 8 * v17;
        do
        {
          v32 = *v30;
          *v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, a2);
            else
              *(_DWORD *)v32 -= 2;
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
      }
      result = *(_QWORD *)v16;
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v18 = *(_QWORD *)(v8 + 16);
      v19 = *(_QWORD *)(v8 + 24);
      if (v18 == *(unsigned int *)(v8 + 40) - 1)
        v20 = 0;
      else
        v20 = v18 + 1;
      *(_QWORD *)(v8 + 16) = v20;
      if (v20 == v19)
      {
        v21 = *v4;
        if (!*v4 || (v21 += 48 * *(unsigned int *)(v21 - 4), v21 != v8))
        {
          if (v21 != v8)
          {
            v22 = *(WTF::StringImpl **)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, a2);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = *(WTF::StringImpl **)v8;
            *(_QWORD *)v8 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, a2);
              else
                *(_DWORD *)v23 -= 2;
            }
            *(_QWORD *)v8 = -1;
            WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)(v8 + 16), a2);
            result = *(_QWORD *)(v8 + 32);
            if (result)
            {
              *(_QWORD *)(v8 + 32) = 0;
              *(_DWORD *)(v8 + 40) = 0;
              result = WTF::fastFree((WTF *)result, v24);
            }
            ++*(_DWORD *)(*v4 - 16);
            v25 = *v4;
            if (*v4)
              v26 = *(_DWORD *)(v25 - 12) - 1;
            else
              v26 = -1;
            *(_DWORD *)(v25 - 12) = v26;
            v27 = *v4;
            if (*v4)
            {
              v28 = 6 * *(_DWORD *)(v27 - 12);
              v29 = *(_DWORD *)(v27 - 4);
              if (v28 < v29 && v29 >= 9)
                return (uint64_t)WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(v4, v29 >> 1, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::FormController::FormKeyGenerator::formKey@<X0>(WebCore::FormController::FormKeyGenerator *this@<X0>, const WebCore::ValidatedFormListedElement *a2@<X1>, int **a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17[2];
  char v18[8];
  uint64_t v19;

  result = (*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *(_QWORD *)(result + 104);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(uint64_t **)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
    }
    else
    {
      v9 = (uint64_t *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_9;
      }
LABEL_10:
      if ((_MergedGlobals_184 & 1) != 0)
      {
        v13 = (int *)qword_1ECE833F0;
        if (!qword_1ECE833F0)
        {
LABEL_14:
          *a3 = v13;
          return result;
        }
        v14 = WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_0::operator() const(void)::impl;
      }
      else
      {
        v13 = &WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_0::operator() const(void)::impl;
        v14 = WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_0::operator() const(void)::impl
            + 2;
        WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_0::operator() const(void)::impl += 2;
        qword_1ECE833F0 = (uint64_t)&WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_0::operator() const(void)::impl;
        _MergedGlobals_184 = 1;
      }
      *v13 = v14 + 2;
      goto LABEL_14;
    }
  }
LABEL_9:
  v12 = *((_QWORD *)a2 + 1);
  if (!v12)
    goto LABEL_10;
  v15 = *(_QWORD *)(v12 + 8);
  if (!v15)
    goto LABEL_10;
  *(_DWORD *)(v15 + 24) += 4;
  v17[0] = (uint64_t)this;
  v17[1] = v15;
  WTF::WeakHashMap<WebCore::HTMLFormElement,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::ensure<WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_1>((uint64_t)v18, this, v15, v17);
  v16 = *(int **)(v19 + 8);
  if (v16)
    *v16 += 2;
  *a3 = v16;
  result = WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0::~$_0((uint64_t)v17);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::WeakHashMap<WebCore::HTMLFormElement,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::ensure<WebCore::FormController::FormKeyGenerator::formKey(WebCore::ValidatedFormListedElement const&)::$_1>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  unsigned int v30;
  uint64_t *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;
  WebCore::Element *v37;
  uint64_t v38;
  WebCore::Document *v39;
  _QWORD *Attribute;
  WTF::StringImpl *v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WebCore::Element *v44;
  __int16 v45;
  WebCore::Element *v46;
  BOOL v47;
  int v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  __int16 v57;
  WebCore::Element *v58;
  BOOL v59;
  BOOL v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  BOOL v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  char v106;
  char v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109[6];

  v109[5] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v8 = a2[2];
  v9 = a2[3];
  a2[2] = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)a2, a2);
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = a3;
    *(_BYTE *)(v10 + 32) = 0;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v11 & 0xFFFF000000000000 | v10;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v99 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v99)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v99));
        v100 = *(WTF **)(v12 + 16);
        if (v100)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v100, a2);
        }
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  v15 = *(_QWORD *)(a3 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFLL;
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  do
    v18 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v18 + 1, (unsigned int *)v16));
  if (v16)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v16));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v16);
      v97 = *(unsigned int *)((v15 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v97)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v97));
      v98 = *(WTF **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v98)
      {
        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v98, a2);
      }
      WTF::fastFree((WTF *)(v15 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v21 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, 8u, 0), (v21 = *(_QWORD *)a2) != 0))
  {
    v22 = 0;
    v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v23 = 0;
    v22 = 1;
  }
  v24 = 0;
  v25 = (v16 + ~(v15 << 32)) ^ ((unint64_t)(v16 + ~(v15 << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = (v27 >> 31) ^ v27;
  for (i = 1; ; ++i)
  {
    v30 = v28 & v23;
    v31 = (uint64_t *)(v21 + 16 * v30);
    result = (WTF::StringImpl *)*v31;
    if (*v31 != -1)
      break;
    v24 = (uint64_t *)(v21 + 16 * v30);
LABEL_22:
    v28 = i + v30;
  }
  if (!result)
  {
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a2 - 16);
      *v24 = v16;
      v31 = v24;
    }
    else
    {
      *v31 = v16;
    }
    v38 = *a4;
    v37 = (WebCore::Element *)a4[1];
    v104 = 0;
    v106 = 1;
    v39 = *(WebCore::Document **)(*((_QWORD *)v37 + 5) + 8);
    Attribute = (_QWORD *)WebCore::Element::getAttribute(v37, (const WebCore::QualifiedName *)&WebCore::HTMLNames::actionAttr);
    WebCore::Document::completeURL(v39, Attribute, (uint64_t)v39 + 848, 0, (WTF::URL *)v109);
    WTF::URL::setQuery();
    v41 = v109[0];
    if (v109[0])
    {
      v42 = *((_DWORD *)v109[0] + 1);
      *(_DWORD *)v109[0] += 2;
    }
    else
    {
      v42 = 0;
    }
    v103 = v41;
    v105 = v42;
    ++WebCore::ScriptDisallowedScope::s_count;
    WTF::StringBuilder::append();
    v44 = (WebCore::Element *)*((_QWORD *)v37 + 10);
    if (v44)
    {
      v45 = *((_WORD *)v44 + 14);
      if ((v45 & 8) != 0)
      {
        v46 = (WebCore::Element *)*((_QWORD *)v37 + 10);
      }
      else
      {
        do
        {
          if ((v45 & 4) == 0 || (v46 = (WebCore::Element *)*((_QWORD *)v44 + 10)) == 0)
          {
            if (v44 == v37)
              goto LABEL_106;
            while (1)
            {
              v46 = (WebCore::Element *)*((_QWORD *)v44 + 7);
              if (v46)
                break;
              v44 = (WebCore::Element *)*((_QWORD *)v44 + 4);
              if (v44)
                v47 = v44 == v37;
              else
                v47 = 1;
              if (v47)
                goto LABEL_106;
            }
          }
          v45 = *((_WORD *)v46 + 14);
          v44 = v46;
        }
        while ((v45 & 8) == 0);
      }
      v48 = 0;
      v49 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      while (1)
      {
        if ((*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v46 + 848))(v46))
        {
          if (((*(uint64_t (**)(_QWORD *))(*((_QWORD *)v46 + 14) + 304))((_QWORD *)v46 + 14) & 1) == 0)
            goto LABEL_72;
        }
        else if (!(*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v46 + 856))(v46)
               || (*((_BYTE *)v46 + 23) & 8) == 0
               && (*((_QWORD *)v46 + 9) & 0x3000000000000000) != 0x1000000000000000)
        {
          goto LABEL_72;
        }
        v50 = *((_QWORD *)v46 + 13);
        if (v50)
        {
          v51 = *(unsigned int *)(v50 + 4);
          if ((v51 & 1) != 0)
          {
            v52 = *(uint64_t **)(v50 + 40);
            v53 = *(unsigned int *)(v50 + 52);
            if (*(_DWORD *)(v50 + 52))
              goto LABEL_61;
          }
          else
          {
            v52 = (uint64_t *)(v50 + 32);
            v53 = v51 >> 5;
            if (v51 >> 5)
            {
LABEL_61:
              do
              {
                v54 = *v52;
                if (*v52 == WebCore::HTMLNames::formAttr
                  || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
                  && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
                {
                  goto LABEL_72;
                }
                v52 += 2;
              }
              while (--v53);
            }
          }
          v55 = v49;
          if ((v51 & 2) != 0)
          {
            if ((v51 & 1) != 0)
            {
              v61 = *(_QWORD **)(v50 + 40);
              v62 = *(unsigned int *)(v50 + 52);
            }
            else
            {
              v61 = (_QWORD *)(v50 + 32);
              v62 = v51 >> 5;
            }
            if (v62)
            {
              while (1)
              {
                v63 = *v61;
                if (*v61 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v63 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v63 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  break;
                }
                v61 += 2;
                if (!--v62)
                  goto LABEL_104;
              }
            }
            else
            {
LABEL_104:
              v61 = 0;
            }
            v55 = (WTF::StringImpl **)(v61 + 1);
          }
        }
        else
        {
          v55 = v49;
        }
        if (*v55 && *((_DWORD *)*v55 + 1))
        {
          v108 = *v55;
          v107 = 32;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v103, (uint64_t *)&v108, &v107);
          if (v48)
            break;
          v48 = 1;
        }
LABEL_72:
        v56 = *((_QWORD *)v46 + 10);
        if (!v56)
        {
          if (v46 == v37)
            break;
          while (1)
          {
            v56 = *((_QWORD *)v46 + 7);
            if (v56)
              break;
            v46 = (WebCore::Element *)*((_QWORD *)v46 + 4);
            if (v46)
              v60 = v46 == v37;
            else
              v60 = 1;
            if (v60)
              goto LABEL_106;
          }
        }
        v57 = *(_WORD *)(v56 + 28);
        v46 = (WebCore::Element *)v56;
        if ((v57 & 8) == 0)
        {
          do
          {
            v58 = (WebCore::Element *)v56;
            if ((v57 & 4) == 0 || (v56 = *(_QWORD *)(v56 + 80)) == 0)
            {
              if (v58 == v37)
                goto LABEL_106;
              while (1)
              {
                v56 = *((_QWORD *)v58 + 7);
                if (v56)
                  break;
                v58 = (WebCore::Element *)*((_QWORD *)v58 + 4);
                if (v58)
                  v59 = v58 == v37;
                else
                  v59 = 1;
                if (v59)
                  goto LABEL_106;
              }
            }
            v57 = *(_WORD *)(v56 + 28);
          }
          while ((v57 & 8) == 0);
          v46 = (WebCore::Element *)v56;
        }
      }
    }
LABEL_106:
    LOBYTE(v108) = 93;
    if (v104 && ((v64 = v105, v105 < *((_DWORD *)v104 + 1)) ? (v65 = v103 == 0) : (v65 = 0), v65))
    {
      v90 = *((_DWORD *)v104 + 4);
      v91 = *((_QWORD *)v104 + 1);
      ++v105;
      if ((v90 & 4) != 0)
        *(_BYTE *)(v91 + v64) = 93;
      else
        *(_WORD *)(v91 + 2 * v64) = 93;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v66 = v103;
    if (v103
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v103),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v103),
          (v66 = v103) != 0))
    {
      *(_DWORD *)v66 += 2;
    }
    v108 = v66;
    --WebCore::ScriptDisallowedScope::s_count;
    v67 = v109[0];
    v109[0] = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v43);
      else
        *(_DWORD *)v67 -= 2;
    }
    v68 = v104;
    v104 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v43);
      else
        *(_DWORD *)v68 -= 2;
    }
    v69 = v103;
    v103 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v43);
      else
        *(_DWORD *)v69 -= 2;
    }
    LODWORD(v103) = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v38 + 16), &v108, (const WTF::StringImpl *)&v103, (uint64_t)v109);
    v70 = v108;
    v71 = *((_DWORD *)v109[0] + 2);
    *((_DWORD *)v109[0] + 2) = v71 + 1;
    if (v70)
    {
      v72 = *((_DWORD *)v70 + 1);
      *(_DWORD *)v70 += 2;
    }
    else
    {
      v72 = 0;
    }
    v73 = 0;
    v74 = v71;
    do
    {
      ++v73;
      v75 = v74 > 9;
      v74 /= 0xAu;
    }
    while (v75);
    if ((v73 & 0x80000000) == 0)
    {
      v76 = __OFADD__(v73, 2);
      v77 = v73 + 2;
      v78 = v76;
      if ((v72 & 0x80000000) == 0 && !v78)
      {
        v79 = (v72 + v77);
        if (!__OFADD__(v72, v77))
        {
          if (v70)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)v109, v79, (*((_BYTE *)v70 + 16) & 4) != 0, (uint64_t)v70, v71);
            v81 = v109[0];
            if (v109[0])
            {
              if (*(_DWORD *)v70 == 2)
                WTF::StringImpl::destroy(v70, v80);
              else
                *(_DWORD *)v70 -= 2;
              goto LABEL_139;
            }
          }
          else if ((v79 & 0x80000000) == 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v79 + 20));
            v81 = v109[0];
            if (v109[0])
            {
              v96 = 0;
              *((_WORD *)v109[0] + 10) = 8992;
              *(_DWORD *)v81 = 2;
              *((_DWORD *)v81 + 1) = v79;
              *((_QWORD *)v81 + 1) = (char *)v81 + 20;
              *((_DWORD *)v81 + 4) = 4;
              do
              {
                *((_BYTE *)&v109[1] + v96-- + 4) = (v71 % 0xA) | 0x30;
                v75 = v71 > 9;
                v71 /= 0xAu;
              }
              while (v75);
              if (v96 + 14 <= 13)
                memcpy((char *)v81 + 22, (char *)&v109[1] + v96 + 5, -v96);
              v109[0] = v81;
LABEL_139:
              v82 = v108;
              v108 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v80);
                else
                  *(_DWORD *)v82 -= 2;
              }
              result = (WTF::StringImpl *)v31[1];
              v31[1] = (uint64_t)v81;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v80);
                else
                  *(_DWORD *)result -= 2;
              }
              v83 = *(_QWORD *)a2;
              if (*(_QWORD *)a2)
                v84 = *(_DWORD *)(v83 - 12) + 1;
              else
                v84 = 1;
              *(_DWORD *)(v83 - 12) = v84;
              v85 = *(_QWORD *)a2;
              if (*(_QWORD *)a2)
                v86 = *(_DWORD *)(v85 - 12);
              else
                v86 = 0;
              v87 = (*(_DWORD *)(v85 - 16) + v86);
              v88 = *(unsigned int *)(v85 - 4);
              if (v88 > 0x400)
              {
                if (v88 <= 2 * v87)
                  goto LABEL_154;
              }
              else if (3 * v88 <= 4 * v87)
              {
                if (!(_DWORD)v88)
                {
                  v89 = 8;
LABEL_159:
                  result = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, v89, v31);
                  v31 = (uint64_t *)result;
                  v85 = *(_QWORD *)a2;
                  if (*(_QWORD *)a2)
                    v88 = *(unsigned int *)(v85 - 4);
                  else
                    v88 = 0;
                  goto LABEL_164;
                }
LABEL_154:
                v89 = (_DWORD)v88 << (6 * *(_DWORD *)(v85 - 12) >= (2 * v88));
                goto LABEL_159;
              }
LABEL_164:
              v34 = (uint64_t *)(v85 + 16 * v88);
              v36 = 1;
              goto LABEL_165;
            }
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195BA50CCLL);
  }
  if (result != (WTF::StringImpl *)v16)
    goto LABEL_22;
  if ((v22 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v21 - 4);
  v34 = (uint64_t *)(v21 + 16 * v33);
  if (v16)
  {
    do
      v35 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v35 - 1, (unsigned int *)v16));
    if (v35 == 1)
    {
      atomic_store(1u, (unsigned int *)v16);
      v101 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v101)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v101));
      v102 = *(WTF **)(v16 + 16);
      if (v102)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v102, a2);
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v16, a2);
    }
  }
  v36 = 0;
LABEL_165:
  v92 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v93 = *(unsigned int *)(v92 - 4);
    v94 = (uint64_t *)(v92 + 16 * v93);
  }
  else
  {
    v94 = 0;
    v93 = 0;
  }
  if (v31 != v94)
  {
    while (!*(_QWORD *)(*v31 + 8))
    {
      v95 = v31 + 2;
      v31 = v34;
      if (v95 != v34)
      {
        v31 = v95;
        while ((unint64_t)(*v31 + 1) <= 1)
        {
          v31 += 2;
          if (v31 == v34)
          {
            v31 = v34;
            break;
          }
        }
      }
      if (v31 == v94)
      {
        v31 = v94;
        break;
      }
    }
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v94;
  *(_QWORD *)(a1 + 32) = v92 + 16 * v93;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v36;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::HTMLFormElement,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  v6 = a2[2];
  v7 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v15 + i++) & v9)
  {
    v15 = v13;
    v16 = *(_QWORD *)(v8 + 16 * v13);
    if (v16 != -1)
    {
      if (!v16)
        return 0;
      if (v16 == v7)
        break;
    }
  }
  if ((_DWORD)v15 == *(_DWORD *)(v8 - 4))
    return 0;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (_QWORD *)(v8 + 16 * v15));
  return 1;
}

void WebCore::FormController::~FormController(WebCore::FormController *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3[2];
    if (v4)
    {
      v6 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v6)
      {
        v7 = (WTF::StringImpl **)v3[2];
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, a2);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    if (*v3)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)this;
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          if (*(_QWORD *)(v10 + 8))
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v10 + 8), a2);
            v11 = *(WTF::StringImpl **)v10;
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
}

uint64_t **std::unique_ptr<WebCore::FormController::FormKeyGenerator>::~unique_ptr[abi:sn180100](uint64_t **a1, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = v3[2];
    if (v4)
    {
      v6 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v6)
      {
        v7 = (WTF::StringImpl **)v3[2];
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, a2);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    if (*v3)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void WebCore::FormController::formElementsState(const WebCore::Document *a1@<X1>, uint64_t a2@<X8>)
{
  const WebCore::Document *v4;
  __int16 v6;
  const WebCore::Document *j;
  BOOL v8;
  uint64_t v9;
  const WebCore::ValidatedFormListedElement *v10;
  const WebCore::Document *v11;
  __int16 v12;
  BOOL v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  unsigned int v18;
  int i;
  BOOL v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF **v34;
  uint64_t v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  const WebCore::ValidatedFormListedElement **v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _DWORD **v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD **v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  _DWORD **v97;
  uint64_t v98;
  _DWORD *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::AtomString *v115;
  WTF::StringImpl **v116;
  uint64_t v117;
  int *v118;
  WTF::StringImpl *v119;

  v116 = 0;
  v117 = 0;
  v114 = 0;
  v115 = 0;
  v4 = (const WebCore::Document *)*((_QWORD *)a1 + 10);
  if (!v4)
    goto LABEL_48;
  v6 = *((_WORD *)v4 + 14);
  if ((v6 & 8) != 0)
  {
    j = (const WebCore::Document *)*((_QWORD *)a1 + 10);
  }
  else
  {
    do
    {
      if ((v6 & 4) == 0 || (j = (const WebCore::Document *)*((_QWORD *)v4 + 10)) == 0)
      {
        if (v4 == a1)
          goto LABEL_46;
        while (1)
        {
          j = (const WebCore::Document *)*((_QWORD *)v4 + 7);
          if (j)
            break;
          v4 = (const WebCore::Document *)*((_QWORD *)v4 + 4);
          if (v4)
            v8 = v4 == a1;
          else
            v8 = 1;
          if (v8)
            goto LABEL_46;
        }
      }
      v6 = *((_WORD *)j + 14);
      v4 = j;
    }
    while ((v6 & 8) == 0);
  }
  while (2)
  {
    v9 = (*(uint64_t (**)(const WebCore::Document *))(*(_QWORD *)j + 464))(j);
    if (!v9)
      goto LABEL_19;
    v10 = (const WebCore::ValidatedFormListedElement *)v9;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
    if (!(*(unsigned int (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v10 + 304))(v10)
      || (*(_BYTE *)((*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v10 + 24))(v10)
                   + 22) & 8) == 0
      || !(*(unsigned int (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v10 + 296))(v10))
    {
      (*(void (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v10 + 96))(v10);
      goto LABEL_19;
    }
    WebCore::FormController::FormKeyGenerator::formKey((WebCore::FormController::FormKeyGenerator *)&v114, v10, (int **)&v113);
    v41 = v113;
    if (v113)
    {
      v118 = (int *)v113;
      if ((*((_BYTE *)v113 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v100 = (WTF::StringImpl *)v118;
        v41 = v119;
        v118 = 0;
        v119 = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
            WTF::StringImpl::destroy(v100, a1);
          else
            *(_DWORD *)v100 -= 2;
        }
      }
    }
    v42 = v117;
    if (v117
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v117, 8u, 0), (v42 = v117) != 0))
    {
      v43 = *(_DWORD *)(v42 - 8);
    }
    else
    {
      v43 = 0;
    }
    v17 = 0;
    v18 = *((_DWORD *)v41 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v14 = v18 & v43;
      v15 = (WTF::StringImpl **)(v42 + 24 * v14);
      v16 = *v15;
      if (*v15 == (WTF::StringImpl *)-1)
      {
        v17 = (WTF::StringImpl **)(v42 + 24 * v14);
        goto LABEL_37;
      }
      if (!v16)
        break;
      if (v16 == v41)
        goto LABEL_105;
LABEL_37:
      v18 = i + v14;
    }
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      --*(_DWORD *)(v42 - 16);
      v15 = v17;
    }
    if (v41)
      *(_DWORD *)v41 += 2;
    *v15 = v41;
    v44 = v15 + 1;
    v45 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v45)
    {
      v109 = *v44;
      v110 = 8 * v45;
      do
      {
        v112 = v110;
        v111 = *(_QWORD *)v109;
        *(_QWORD *)v109 = 0;
        if (v111)
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 96))(v111);
        v109 = (WTF *)((char *)v109 + 8);
        v110 = v112 - 8;
      }
      while (v112 != 8);
    }
    v46 = *v44;
    if (*v44)
    {
      v15[1] = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree(v46, a1);
    }
    *v44 = 0;
    v15[2] = 0;
    v47 = v117;
    if (v117)
      v48 = *(_DWORD *)(v117 - 12) + 1;
    else
      v48 = 1;
    *(_DWORD *)(v117 - 12) = v48;
    v49 = (*(_DWORD *)(v47 - 16) + v48);
    v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 <= 2 * v49)
        goto LABEL_206;
    }
    else if (3 * v50 <= 4 * v49)
    {
      if (!(_DWORD)v50)
      {
        v51 = 8;
        goto LABEL_104;
      }
LABEL_206:
      v51 = (_DWORD)v50 << (6 * v48 >= (2 * v50));
LABEL_104:
      v15 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::ValidatedFormListedElement const,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement const>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v117, v51, v15);
    }
LABEL_105:
    v52 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v52 != *((_DWORD *)v15 + 4))
    {
      v53 = (const WebCore::ValidatedFormListedElement **)((char *)v15[1] + 8 * v52);
      goto LABEL_107;
    }
    v101 = v52 + (v52 >> 2);
    if (v101 >= 0x10)
      v102 = v101 + 1;
    else
      v102 = 16;
    if (v102 <= v52 + 1)
      v103 = v52 + 1;
    else
      v103 = v102;
    if (v103 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v104 = v15[1];
      v105 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v103));
      *((_DWORD *)v15 + 4) = v103;
      v15[1] = v105;
      memcpy(v105, v104, 8 * v52);
      if (v104)
      {
        if (v15[1] == v104)
        {
          v15[1] = 0;
          *((_DWORD *)v15 + 4) = 0;
        }
        WTF::fastFree(v104, a1);
      }
      v52 = *((unsigned int *)v15 + 5);
      v53 = (const WebCore::ValidatedFormListedElement **)((char *)v15[1] + 8 * v52);
LABEL_107:
      *v53 = v10;
      *((_DWORD *)v15 + 5) = v52 + 1;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a1);
        else
          *(_DWORD *)v41 -= 2;
      }
LABEL_19:
      v11 = (const WebCore::Document *)*((_QWORD *)j + 10);
      if (v11)
        goto LABEL_20;
      if (j != a1)
      {
        while (1)
        {
          v11 = (const WebCore::Document *)*((_QWORD *)j + 7);
          if (v11)
            break;
          j = (const WebCore::Document *)*((_QWORD *)j + 4);
          if (j)
            v20 = j == a1;
          else
            v20 = 1;
          if (v20)
            goto LABEL_45;
        }
LABEL_20:
        v12 = *((_WORD *)v11 + 14);
        for (j = v11; (v12 & 8) == 0; v11 = j)
        {
          if ((v12 & 4) == 0 || (j = (const WebCore::Document *)*((_QWORD *)v11 + 10)) == 0)
          {
            if (v11 == a1)
              goto LABEL_45;
            while (1)
            {
              j = (const WebCore::Document *)*((_QWORD *)v11 + 7);
              if (j)
                break;
              v11 = (const WebCore::Document *)*((_QWORD *)v11 + 4);
              if (v11)
                v13 = v11 == a1;
              else
                v13 = 1;
              if (v13)
                goto LABEL_45;
            }
          }
          v12 = *((_WORD *)j + 14);
        }
        continue;
      }
LABEL_45:
      v21 = v116;
      if (v116)
      {
        v106 = *((unsigned int *)v116 - 1);
        if ((_DWORD)v106)
        {
          v107 = v116;
          do
          {
            v108 = *v107;
            if (*v107 != (WTF::StringImpl *)-1)
            {
              *v107 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, a1);
                else
                  *(_DWORD *)v108 -= 2;
              }
            }
            v107 += 2;
            --v106;
          }
          while (v106);
        }
        WTF::fastFree((WTF *)(v21 - 2), a1);
      }
LABEL_46:
      if (v114)
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable((uint64_t)v114, a1);
LABEL_48:
      v22 = v117;
      if (v117 && *(_DWORD *)(v117 - 12))
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        if ((byte_1ECE833EC & 1) != 0)
        {
          v23 = (WTF::StringImpl *)qword_1ECE83410;
          if (qword_1ECE83410)
          {
            v24 = WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
            goto LABEL_53;
          }
        }
        else
        {
          v23 = (WTF::StringImpl *)&WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
          v24 = WebCore::formStateSignature(void)::$_0::operator() const(void)::impl + 2;
          WebCore::formStateSignature(void)::$_0::operator() const(void)::impl += 2;
          qword_1ECE83410 = (uint64_t)&WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
          byte_1ECE833EC = 1;
LABEL_53:
          *(_DWORD *)v23 = v24 + 2;
        }
        v114 = v23;
        WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a2, &v114);
        v26 = v114;
        v114 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*(_DWORD *)(v22 - 12))
        {
          v27 = *(unsigned int *)(v22 - 4);
          v28 = v22;
          if ((_DWORD)v27)
          {
            v29 = 0;
            while ((unint64_t)(*(_QWORD *)(v22 + v29) + 1) <= 1)
            {
              v29 += 24;
              if (24 * v27 == v29)
                goto LABEL_62;
            }
            v28 = v22 + v29;
          }
          v54 = v22 + 24 * v27;
          if (v54 != v28)
          {
            v55 = (WTF::StringImpl *)MEMORY[0x1E0CBF3B8];
LABEL_113:
            v56 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v56 == *(_DWORD *)(a2 + 8))
            {
              v97 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v56 + 1, v28);
              v56 = *(unsigned int *)(a2 + 12);
              v98 = *(_QWORD *)a2;
              v99 = *v97;
              if (*v97)
                *v99 += 2;
              *(_QWORD *)(v98 + 8 * v56) = v99;
            }
            else
            {
              v57 = *(_QWORD *)a2;
              v58 = *(_DWORD **)v28;
              if (*(_QWORD *)v28)
                *v58 += 2;
              *(_QWORD *)(v57 + 8 * v56) = v58;
            }
            *(_DWORD *)(a2 + 12) = v56 + 1;
            WTF::AtomString::number((WTF::AtomString *)*(unsigned int *)(v28 + 20));
            v60 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v60 == *(_DWORD *)(a2 + 8))
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a2, (unint64_t)&v114);
            }
            else
            {
              v61 = *(_QWORD *)a2;
              v62 = v114;
              v114 = 0;
              *(_QWORD *)(v61 + 8 * v60) = v62;
              *(_DWORD *)(a2 + 12) = v60 + 1;
            }
            v63 = v114;
            v114 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, v59);
              else
                *(_DWORD *)v63 -= 2;
            }
            v64 = *(unsigned int *)(v28 + 20);
            if ((_DWORD)v64)
            {
              v65 = *(_QWORD **)(v28 + 8);
              v66 = &v65[v64];
              do
              {
                v67 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v65 + 128))(*v65);
                v68 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v68 == *(_DWORD *)(a2 + 8))
                {
                  v81 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v68 + 1, (unint64_t)v67);
                  v68 = *(unsigned int *)(a2 + 12);
                  v82 = *(_QWORD *)a2;
                  v83 = *v81;
                  if (*v81)
                    *v83 += 2;
                  *(_QWORD *)(v82 + 8 * v68) = v83;
                }
                else
                {
                  v69 = *(_QWORD *)a2;
                  v70 = (_DWORD *)*v67;
                  if (*v67)
                    *v70 += 2;
                  *(_QWORD *)(v69 + 8 * v68) = v70;
                }
                *(_DWORD *)(a2 + 12) = v68 + 1;
                v71 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v65 + 328))(*v65);
                v72 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v72 == *(_DWORD *)(a2 + 8))
                {
                  v84 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v72 + 1, (unint64_t)v71);
                  v72 = *(unsigned int *)(a2 + 12);
                  v85 = *(_QWORD *)a2;
                  v86 = *v84;
                  if (*v84)
                    *v86 += 2;
                  *(_QWORD *)(v85 + 8 * v72) = v86;
                }
                else
                {
                  v73 = *(_QWORD *)a2;
                  v74 = (_DWORD *)*v71;
                  if (*v71)
                    *v74 += 2;
                  *(_QWORD *)(v73 + 8 * v72) = v74;
                }
                *(_DWORD *)(a2 + 12) = v72 + 1;
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*v65 + 312))(&v114);
                WTF::AtomString::number((WTF::AtomString *)HIDWORD(v115));
                v76 = *(unsigned int *)(a2 + 12);
                if ((_DWORD)v76 == *(_DWORD *)(a2 + 8))
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a2, (unint64_t)&v119);
                }
                else
                {
                  v77 = *(_QWORD *)a2;
                  v78 = v119;
                  v119 = 0;
                  *(_QWORD *)(v77 + 8 * v76) = v78;
                  *(_DWORD *)(a2 + 12) = v76 + 1;
                }
                v79 = v119;
                v119 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, v75);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = v114;
                if (HIDWORD(v115))
                {
                  v87 = 8 * HIDWORD(v115);
                  do
                  {
                    if (*(_QWORD *)v80)
                      v88 = v80;
                    else
                      v88 = v55;
                    v89 = *(unsigned int *)(a2 + 12);
                    if ((_DWORD)v89 == *(_DWORD *)(a2 + 8))
                    {
                      v92 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v89 + 1, (unint64_t)v88);
                      v89 = *(unsigned int *)(a2 + 12);
                      v93 = *(_QWORD *)a2;
                      v94 = *v92;
                      if (*v92)
                        *v94 += 2;
                      *(_QWORD *)(v93 + 8 * v89) = v94;
                    }
                    else
                    {
                      v90 = *(_QWORD *)a2;
                      v91 = *(_DWORD **)v88;
                      if (*(_QWORD *)v88)
                        *v91 += 2;
                      *(_QWORD *)(v90 + 8 * v89) = v91;
                    }
                    *(_DWORD *)(a2 + 12) = v89 + 1;
                    v80 = (WTF::StringImpl *)((char *)v80 + 8);
                    v87 -= 8;
                  }
                  while (v87);
                  v80 = v114;
                  if (HIDWORD(v115))
                  {
                    v95 = 8 * HIDWORD(v115);
                    do
                    {
                      v96 = *(WTF::StringImpl **)v80;
                      *(_QWORD *)v80 = 0;
                      if (v96)
                      {
                        if (*(_DWORD *)v96 == 2)
                          WTF::StringImpl::destroy(v96, v75);
                        else
                          *(_DWORD *)v96 -= 2;
                      }
                      v80 = (WTF::StringImpl *)((char *)v80 + 8);
                      v95 -= 8;
                    }
                    while (v95);
                    v80 = v114;
                  }
                }
                if (v80)
                {
                  v114 = 0;
                  LODWORD(v115) = 0;
                  WTF::fastFree(v80, v75);
                }
                ++v65;
              }
              while (v65 != v66);
            }
            while (1)
            {
              v28 += 24;
              if (v28 == v54)
                break;
              if ((unint64_t)(*(_QWORD *)v28 + 1) > 1)
              {
                if (v28 != v54)
                  goto LABEL_113;
                break;
              }
            }
            v22 = v117;
          }
        }
LABEL_62:
        WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, *(unsigned int *)(a2 + 12));
      }
      else
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
      }
      if (v22)
      {
        v30 = *(unsigned int *)(v22 - 4);
        if ((_DWORD)v30)
        {
          for (k = 0; k != v30; ++k)
          {
            v32 = (WTF::StringImpl **)(v22 + 24 * k);
            if (*v32 != (WTF::StringImpl *)-1)
            {
              v33 = v22 + 24 * k;
              v34 = (WTF **)(v33 + 8);
              v35 = *(unsigned int *)(v33 + 20);
              if ((_DWORD)v35)
              {
                v38 = *v34;
                v39 = 8 * v35;
                do
                {
                  v40 = *(_QWORD *)v38;
                  *(_QWORD *)v38 = 0;
                  if (v40)
                    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 96))(v40);
                  v38 = (WTF *)((char *)v38 + 8);
                  v39 -= 8;
                }
                while (v39);
              }
              v36 = *v34;
              if (*v34)
              {
                *v34 = 0;
                *(_DWORD *)(v22 + 24 * k + 16) = 0;
                WTF::fastFree(v36, a1);
              }
              v37 = *v32;
              *v32 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, a1);
                else
                  *(_DWORD *)v37 -= 2;
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v22 - 16), a1);
      }
    }
    break;
  }
}

void WebCore::FormController::setStateForNewFormElements(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  WebCore::FormController::parseStateVector(a2, a3, &v9);
  v5 = *a1;
  *a1 = v9;
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *(WTF::StringImpl **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          if (*(_QWORD *)(v7 + 8))
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v7 + 8), v4);
            v8 = *(WTF::StringImpl **)v7;
          }
          *(_QWORD *)v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v4);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 16;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
}

void WebCore::FormController::parseStateVector(uint64_t a1@<X0>, const WTF::StringImpl *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int v5;
  unint64_t v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  int v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl **v13;
  unint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  unsigned int v59;
  int v61;
  unsigned int v62;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl **v91;
  int v92;
  int v93;
  __int128 v94;
  WTF *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  WTF *v111;
  unsigned int v112;
  uint64_t v113;
  WTF *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  char *v118;
  WTF *v119;
  WTF::StringImpl **v120;
  uint64_t v121;
  WTF *v122;
  WTF *v123;
  WTF::StringImpl **v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  char *v128;
  WTF::StringImpl **v129;
  uint64_t v130;
  WTF *v131;
  WTF *v132;
  WTF::StringImpl **v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF *v140;
  char *v141;
  char *v142;
  char *v143;
  WTF::StringImpl **v144;
  uint64_t v145;
  WTF *v146;
  WTF *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl **v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  unint64_t v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  unint64_t v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  unint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  WTF::StringImpl **v198;
  int v199;
  unsigned int v200;
  WTF **v201;
  WTF *v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  WTF *v214;
  WTF *v215;
  WTF *v216;
  _QWORD *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  _QWORD *v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  __int128 v226;
  WTF *v227[2];
  uint64_t v228;

  v3 = (_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12);
  v21 = v5 == 0;
  v6 = v5 != 0;
  v7 = *(WTF ***)a1;
  if (v21)
    v7 = (WTF **)MEMORY[0x1E0CBF2F8];
  if ((byte_1ECE833EC & 1) == 0)
    goto LABEL_399;
  v8 = (const WTF::StringImpl *)qword_1ECE83410;
  if (!qword_1ECE83410)
  {
    if ((WTF::equal(*v7, 0, a2) & 1) != 0)
      goto LABEL_9;
LABEL_393:
    *a3 = 0;
    return;
  }
  v9 = WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
LABEL_7:
  *(_DWORD *)v8 = v9 + 2;
  v10 = WTF::equal(*v7, v8, a2);
  v12 = v10;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v11);
    if ((v12 & 1) == 0)
      goto LABEL_393;
  }
  else
  {
    *(_DWORD *)v8 -= 2;
    if ((v10 & 1) == 0)
      goto LABEL_393;
  }
LABEL_9:
  v225 = 0;
  v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v221 = v3;
  do
  {
LABEL_10:
    v14 = *((unsigned int *)v3 + 3);
    if (v6 == v14)
    {
      v15 = v13;
    }
    else
    {
      if (v6 >= v14)
      {
LABEL_406:
        __break(0xC471u);
        JUMPOUT(0x195BA6E98);
      }
      v15 = (WTF::StringImpl **)(*v3 + 8 * v6++);
    }
    v16 = *v15;
    if (!*v15)
    {
      *a3 = v225;
      return;
    }
    *(_DWORD *)v16 += 2;
    v228 = 0;
    v17 = v13;
    if (v6 != v14)
    {
      if (v6 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x195BA6EA0);
      }
      v14 = v6 + 1;
      v17 = (WTF::StringImpl **)(*v3 + 8 * v6);
    }
    v18 = *v17;
    if (!*v17)
    {
      v19 = 0;
      v20 = 0;
LABEL_36:
      v32 = 0;
      v33 = 0;
      v34 = 0;
      if (v19 && v20)
      {
        v35 = 0;
        while (1)
        {
          v36 = *(unsigned __int8 *)(v19 + v35);
          if (v36 - 9 >= 5 && v36 != 32)
            break;
          if (v20 == ++v35)
            goto LABEL_70;
        }
        if (v36 == 43)
        {
          if (v20 - 1 == v35)
            goto LABEL_70;
          v37 = ~v35 + v20;
          v38 = v19 + v35;
          v40 = *(unsigned __int8 *)(v38 + 1);
          v39 = v38 + 1;
          v36 = v40;
        }
        else
        {
          v39 = v19 + v35;
          v37 = v20 - v35;
        }
        if (v36 - 48 > 9)
        {
LABEL_70:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          goto LABEL_71;
        }
        v41 = 0;
        v42 = 0;
        while (1)
        {
          v43 = v36 - 48;
          v44 = (v41 * (unsigned __int128)0xAuLL) >> 64;
          if (is_mul_ok(v41, 0xAuLL))
            v41 *= 10;
          v45 = __CFADD__(v41, v43);
          v46 = v41 + v43;
          v47 = v45;
          if (!v45)
            v41 = v46;
          if (v44)
            v48 = 1;
          else
            v48 = v47;
          if (v48)
            v42 = 1;
          if (!--v37)
            break;
          v49 = *(unsigned __int8 *)++v39;
          v36 = v49;
          v50 = v49 - 48;
          if (v49 - 48 > 9 || v50 >= 0xA)
          {
            if (!v42)
            {
              v51 = 0;
              while (1)
              {
                v52 = *(unsigned __int8 *)(v39 + v51);
                if ((v52 - 9) >= 5 && v52 != 32)
                  break;
                if (v37 == ++v51)
                  goto LABEL_330;
              }
            }
            goto LABEL_70;
          }
        }
        if (v42)
          goto LABEL_70;
LABEL_330:
        v34 = v41 & 0xFFFFFFFFFFFFFF00;
        v32 = v41;
        v33 = 1;
      }
LABEL_71:
      v25 = v34 | v32;
      if (!v33)
        goto LABEL_369;
      goto LABEL_72;
    }
    v19 = *((_QWORD *)v18 + 1);
    v20 = *((unsigned int *)v18 + 1);
    if ((*((_BYTE *)v18 + 16) & 4) != 0)
      goto LABEL_36;
    if (v19)
      v21 = (_DWORD)v20 == 0;
    else
      v21 = 1;
    if (v21)
      goto LABEL_25;
    v26 = 0;
    v27 = 2 * v20;
    while (1)
    {
      v28 = *(unsigned __int16 *)(v19 + v26);
      if (v28 - 9 >= 5 && v28 != 32)
        break;
      --v20;
      v26 += 2;
      if (v27 == v26)
        goto LABEL_25;
    }
    if (v28 == 43)
    {
      if (v27 - 2 == v26)
        goto LABEL_25;
      --v20;
      v29 = v19 + v26;
      v31 = *(unsigned __int16 *)(v29 + 2);
      v30 = v29 + 2;
      v28 = v31;
    }
    else
    {
      v30 = v19 + v26;
    }
    if (v28 - 48 > 9)
    {
LABEL_25:
      v22 = 0;
      v23 = 0;
      v24 = 0;
      goto LABEL_26;
    }
    v180 = 0;
    v181 = 0;
    while (1)
    {
      v182 = v28 - 48;
      v183 = (v180 * (unsigned __int128)0xAuLL) >> 64;
      if (is_mul_ok(v180, 0xAuLL))
        v180 *= 10;
      v184 = __CFADD__(v180, v182);
      v185 = v180 + v182;
      v186 = v184;
      if (!v184)
        v180 = v185;
      if (v183)
        v187 = 1;
      else
        v187 = v186;
      if (v187)
        v181 = 1;
      if (!--v20)
        break;
      v188 = *(unsigned __int16 *)(v30 + 2);
      v30 += 2;
      v28 = v188;
      v189 = v188 - 48;
      if (v188 - 48 > 9 || v189 >= 0xA)
      {
        if (!v181)
        {
          v190 = 0;
          while (1)
          {
            v191 = *(unsigned __int16 *)(v30 + 2 * v190);
            if ((v191 - 9) >= 5 && v191 != 32)
              break;
            if (v20 == ++v190)
              goto LABEL_332;
          }
        }
        goto LABEL_25;
      }
    }
    if (v181)
      goto LABEL_25;
LABEL_332:
    v24 = v180 & 0xFFFFFFFFFFFFFF00;
    v22 = v180;
    v23 = 1;
LABEL_26:
    v25 = v24 | v22;
    if (!v23)
      goto LABEL_369;
LABEL_72:
    if (!v25)
      goto LABEL_369;
    v6 = v14;
    do
    {
      v7 = (WTF **)*((unsigned int *)v3 + 3);
      if ((WTF **)v6 == v7)
      {
        v53 = v13;
      }
      else
      {
        if (v6 >= (unint64_t)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x195BA6EA8);
        }
        v53 = (WTF::StringImpl **)(*v3 + 8 * v6++);
      }
      v14 = *((unsigned int *)v3 + 3);
      v54 = v13;
      if ((WTF **)v6 != v7)
      {
        if (v6 >= (unint64_t)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x195BA6EB0);
        }
        v14 = v6 + 1;
        v54 = (WTF::StringImpl **)(*v3 + 8 * v6);
      }
      v55 = *v54;
      if (!*v54)
        goto LABEL_367;
      v56 = *((unsigned int *)v55 + 1);
      if (!(_DWORD)v56)
        goto LABEL_367;
      v57 = (unsigned __int16 *)*((_QWORD *)v55 + 1);
      if ((*((_BYTE *)v55 + 16) & 4) == 0)
      {
        while (1)
        {
          v58 = *v57++;
          v59 = v58 - 123;
          if (v58 != 45 && v59 < 0xFFFFFFE6)
            break;
          if (!--v56)
            goto LABEL_97;
        }
LABEL_367:
        if (v228)
          WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v228, v11);
LABEL_369:
        v192 = 0;
        v6 = v14;
LABEL_370:
        v203 = 0;
        *a3 = 0;
LABEL_371:
        if (v192)
          WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v192, v11);
        goto LABEL_373;
      }
      do
      {
        v61 = *(unsigned __int8 *)v57;
        v57 = (unsigned __int16 *)((char *)v57 + 1);
        v62 = v61 - 123;
        if (v61 != 45 && v62 < 0xFFFFFFE6)
          goto LABEL_367;
        --v56;
      }
      while (v56);
LABEL_97:
      v6 = *((unsigned int *)v3 + 3);
      v64 = v13;
      if ((WTF **)v14 != v7)
      {
        if (v14 >= (unint64_t)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x195BA6EB8);
        }
        v6 = v14 + 1;
        v64 = (WTF::StringImpl **)(*v3 + 8 * v14);
      }
      v65 = *v64;
      if (!*v64)
      {
        v14 = v6;
        goto LABEL_367;
      }
      v66 = *((unsigned int *)v65 + 1);
      v67 = *(_DWORD *)v65 + 2;
      *(_DWORD *)v65 = v67;
      v68 = *((_QWORD *)v65 + 1);
      if (v68)
        v69 = v66 == 0;
      else
        v69 = 1;
      v70 = v69;
      if ((*((_BYTE *)v65 + 16) & 4) != 0)
      {
        if ((v70 & 1) != 0)
          goto LABEL_118;
        v101 = 0;
        while (1)
        {
          v102 = *(unsigned __int8 *)(v68 + v101);
          if (v102 - 9 >= 5 && v102 != 32)
            break;
          if (v66 == ++v101)
            goto LABEL_118;
        }
        if (v102 == 43)
        {
          if (v66 - 1 == v101)
            goto LABEL_118;
          v103 = ~v101 + v66;
          v104 = v68 + v101;
          v106 = *(unsigned __int8 *)(v104 + 1);
          v105 = v104 + 1;
          v102 = v106;
        }
        else
        {
          v105 = v68 + v101;
          v103 = v66 - v101;
        }
        if (v102 - 48 > 9)
        {
LABEL_118:
          v77 = 0;
          v78 = 0;
          v79 = 0;
          goto LABEL_119;
        }
        v152 = 0;
        v153 = 0;
        while (1)
        {
          v164 = v102 - 48;
          v165 = (v152 * (unsigned __int128)0xAuLL) >> 64;
          if (is_mul_ok(v152, 0xAuLL))
            v152 *= 10;
          v166 = __CFADD__(v152, v164);
          v167 = v152 + v164;
          v168 = v166;
          if (!v166)
            v152 = v167;
          if (v165)
            v169 = 1;
          else
            v169 = v168;
          if (v169)
            v153 = 1;
          if (!--v103)
            break;
          v170 = *(unsigned __int8 *)++v105;
          v102 = v170;
          v171 = v170 - 48;
          if (v170 - 48 > 9 || v171 >= 0xA)
          {
            if (!v153)
            {
              v172 = 0;
              while (1)
              {
                v173 = *(unsigned __int8 *)(v105 + v172);
                if ((v173 - 9) >= 5 && v173 != 32)
                  break;
                if (v103 == ++v172)
                  goto LABEL_297;
              }
            }
            goto LABEL_118;
          }
        }
      }
      else
      {
        if ((v70 & 1) != 0)
          goto LABEL_118;
        v71 = 0;
        v72 = 2 * v66;
        while (1)
        {
          v73 = *(unsigned __int16 *)(v68 + v71);
          if (v73 - 9 >= 5 && v73 != 32)
            break;
          --v66;
          v71 += 2;
          if (v72 == v71)
            goto LABEL_118;
        }
        if (v73 == 43)
        {
          if (v72 - 2 == v71)
            goto LABEL_118;
          --v66;
          v74 = v68 + v71;
          v76 = *(unsigned __int16 *)(v74 + 2);
          v75 = v74 + 2;
          v73 = v76;
        }
        else
        {
          v75 = v68 + v71;
        }
        if (v73 - 48 > 9)
          goto LABEL_118;
        v152 = 0;
        v153 = 0;
        while (1)
        {
          v154 = v73 - 48;
          v155 = (v152 * (unsigned __int128)0xAuLL) >> 64;
          if (is_mul_ok(v152, 0xAuLL))
            v152 *= 10;
          v156 = __CFADD__(v152, v154);
          v157 = v152 + v154;
          v158 = v156;
          if (!v156)
            v152 = v157;
          if (v155)
            v159 = 1;
          else
            v159 = v158;
          if (v159)
            v153 = 1;
          if (!--v66)
            break;
          v160 = *(unsigned __int16 *)(v75 + 2);
          v75 += 2;
          v73 = v160;
          v161 = v160 - 48;
          if (v160 - 48 > 9 || v161 >= 0xA)
          {
            if (!v153)
            {
              v162 = 0;
              while (1)
              {
                v163 = *(unsigned __int16 *)(v75 + 2 * v162);
                if ((v163 - 9) >= 5 && v163 != 32)
                  break;
                if (v66 == ++v162)
                  goto LABEL_297;
              }
            }
            goto LABEL_118;
          }
        }
      }
      if (v153)
        goto LABEL_118;
LABEL_297:
      v79 = v152 & 0xFFFFFFFFFFFFFF00;
      v77 = v152;
      v78 = 1;
LABEL_119:
      v80 = v79 | v77;
      if (v78)
      {
        if ((unint64_t)v7 - v6 < v80)
        {
          v223 = 0;
          v224 = 0;
          goto LABEL_129;
        }
      }
      else
      {
        v80 = 0;
      }
      if ((unint64_t)v7 < v6)
      {
        __break(1u);
LABEL_399:
        v8 = (const WTF::StringImpl *)&WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
        v9 = WebCore::formStateSignature(void)::$_0::operator() const(void)::impl + 2;
        WebCore::formStateSignature(void)::$_0::operator() const(void)::impl += 2;
        qword_1ECE83410 = (uint64_t)&WebCore::formStateSignature(void)::$_0::operator() const(void)::impl;
        byte_1ECE833EC = 1;
        goto LABEL_7;
      }
      v81 = v80 + v6;
      if (v80 == -1)
        v82 = (unint64_t)v7 - v6;
      else
        v82 = v80;
      if (v82)
      {
        v224 = v82;
        if (v82 >> 29)
          goto LABEL_406;
        v174 = a3;
        v175 = *v221 + 8 * v6;
        v176 = 8 * v82;
        v177 = WTF::fastMalloc((WTF *)(8 * v82));
        v178 = 0;
        do
        {
          v179 = *(_DWORD **)(v175 + v178);
          if (v179)
            *v179 += 2;
          *(_QWORD *)(v177 + v178) = v179;
          v178 += 8;
        }
        while (v176 != v178);
        v223 = v177;
        v67 = *(_DWORD *)v65;
        v6 = v81;
        a3 = v174;
        v3 = v221;
        v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      else
      {
        v223 = 0;
        v224 = 0;
        v6 += v80;
      }
LABEL_129:
      if (v67 == 2)
        WTF::StringImpl::destroy(v65, v11);
      else
        *(_DWORD *)v65 = v67 - 2;
      v83 = *v53;
      if (*v53)
        *(_DWORD *)v83 += 2;
      v84 = *v54;
      if (v84)
        *(_DWORD *)v84 += 2;
      v226 = 0u;
      *(_OWORD *)v227 = 0u;
      v85 = v228;
      if (v228
        || (WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(&v228, 8u, 0), (v85 = v228) != 0))
      {
        v86 = *(_DWORD *)(v85 - 8);
      }
      else
      {
        v86 = 0;
      }
      v87 = v86 & ((0xD7862706ELL
                  * (unint64_t)(277951225 * (*((_DWORD *)v83 + 4) >> 8)
                                                   + 95187966 * (*((_DWORD *)v84 + 4) >> 8))) >> 4);
      v88 = (WTF::StringImpl **)(v85 + 48 * v87);
      v90 = *v88;
      v89 = v88[1];
      if (*(_OWORD *)v88 != 0)
      {
        v91 = 0;
        v92 = 1;
        do
        {
          if (v90 == (WTF::StringImpl *)-1)
          {
            v91 = v88;
          }
          else if (v90 == v83 && v89 == v84)
          {
            goto LABEL_167;
          }
          v87 = (v87 + v92) & v86;
          v88 = (WTF::StringImpl **)(v85 + 48 * v87);
          v90 = *v88;
          v89 = v88[1];
          ++v92;
        }
        while (*(_OWORD *)v88 != 0);
        if (v91)
        {
          *((_OWORD *)v91 + 1) = 0u;
          *((_OWORD *)v91 + 2) = 0u;
          *(_OWORD *)v91 = 0u;
          --*(_DWORD *)(v85 - 16);
          v88 = v91;
        }
      }
      *v88 = v83;
      v88[1] = v84;
      v93 = (int)v227[1];
      v94 = *((_OWORD *)v88 + 1);
      *((_OWORD *)v88 + 1) = v226;
      v226 = v94;
      v95 = v88[4];
      v88[4] = v227[0];
      v227[0] = v95;
      LODWORD(v95) = *((_DWORD *)v88 + 10);
      *((_DWORD *)v88 + 10) = v93;
      LODWORD(v227[1]) = (_DWORD)v95;
      v96 = v228;
      if (v228)
        v97 = *(_DWORD *)(v228 - 12) + 1;
      else
        v97 = 1;
      *(_DWORD *)(v228 - 12) = v97;
      v98 = (*(_DWORD *)(v96 - 16) + v97);
      v99 = *(unsigned int *)(v96 - 4);
      if (v99 > 0x400)
      {
        if (v99 > 2 * v98)
          goto LABEL_166;
        goto LABEL_154;
      }
      if (3 * v99 <= 4 * v98)
      {
        if (!(_DWORD)v99)
        {
          v100 = 8;
          goto LABEL_165;
        }
LABEL_154:
        v100 = (_DWORD)v99 << (6 * v97 >= (2 * v99));
LABEL_165:
        v88 = WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(&v228, v100, v88);
      }
LABEL_166:
      v84 = 0;
      v83 = 0;
LABEL_167:
      v108 = v88[2];
      v107 = v88[3];
      if (v108)
      {
        if ((WTF::StringImpl *)((char *)v107 + 1) != v108)
          goto LABEL_216;
        v109 = (WTF::StringImpl *)*((unsigned int *)v88 + 10);
      }
      else if (v107)
      {
        v109 = (WTF::StringImpl *)*((unsigned int *)v88 + 10);
        if (v107 != (WTF::StringImpl *)((char *)v109 - 1))
          goto LABEL_216;
      }
      else
      {
        v109 = 0;
        if (*((_DWORD *)v88 + 10))
          goto LABEL_216;
      }
      v222 = v84;
      v218 = v109;
      v110 = (unint64_t)v109 + ((unint64_t)v109 >> 2);
      if (v110 <= 0xF)
        v110 = 15;
      if (v110 >= 0xFFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x195BA6EC0);
      }
      v111 = v88[4];
      v112 = v110 + 1;
      v113 = WTF::fastMalloc((WTF *)(16 * (v110 + 1)));
      v114 = v111;
      v115 = (WTF::StringImpl *)v113;
      *((_DWORD *)v88 + 10) = v112;
      v88[4] = (WTF::StringImpl *)v113;
      v116 = v88[2];
      v117 = v88[3];
      v118 = (char *)v111 + 16 * (_QWORD)v117;
      if (v116 <= v117)
      {
        if (v116 != v117)
        {
          v127 = v113 + 16 * (_QWORD)v116;
          v128 = (char *)v114 + 16 * (_QWORD)v116;
          do
          {
            *(_QWORD *)v127 = 0;
            *(_QWORD *)(v127 + 8) = 0;
            v129 = *(WTF::StringImpl ***)v128;
            *(_QWORD *)v128 = 0;
            *(_QWORD *)v127 = v129;
            LODWORD(v129) = *((_DWORD *)v128 + 2);
            *((_DWORD *)v128 + 2) = 0;
            *(_DWORD *)(v127 + 8) = (_DWORD)v129;
            LODWORD(v129) = *((_DWORD *)v128 + 3);
            *((_DWORD *)v128 + 3) = 0;
            *(_DWORD *)(v127 + 12) = (_DWORD)v129;
            v130 = *((unsigned int *)v128 + 3);
            if ((_DWORD)v130)
            {
              v133 = *(WTF::StringImpl ***)v128;
              v134 = 8 * v130;
              do
              {
                v135 = *v133;
                *v133 = 0;
                if (v135)
                {
                  if (*(_DWORD *)v135 == 2)
                  {
                    v215 = v114;
                    v219 = v134;
                    WTF::StringImpl::destroy(v135, v11);
                    v134 = v219;
                    v114 = v215;
                  }
                  else
                  {
                    *(_DWORD *)v135 -= 2;
                  }
                }
                ++v133;
                v134 -= 8;
              }
              while (v134);
            }
            v131 = *(WTF **)v128;
            if (*(_QWORD *)v128)
            {
              *(_QWORD *)v128 = 0;
              *((_DWORD *)v128 + 2) = 0;
              v132 = v114;
              WTF::fastFree(v131, v11);
              v114 = v132;
            }
            v127 += 16;
            v128 += 16;
          }
          while (v128 != v118);
        }
      }
      else
      {
        v217 = a3;
        if (v117)
        {
          v119 = v114;
          do
          {
            *(_QWORD *)v115 = 0;
            *((_QWORD *)v115 + 1) = 0;
            v120 = *(WTF::StringImpl ***)v119;
            *(_QWORD *)v119 = 0;
            *(_QWORD *)v115 = v120;
            LODWORD(v120) = *((_DWORD *)v119 + 2);
            *((_DWORD *)v119 + 2) = 0;
            *((_DWORD *)v115 + 2) = (_DWORD)v120;
            LODWORD(v120) = *((_DWORD *)v119 + 3);
            *((_DWORD *)v119 + 3) = 0;
            *((_DWORD *)v115 + 3) = (_DWORD)v120;
            v121 = *((unsigned int *)v119 + 3);
            if ((_DWORD)v121)
            {
              v124 = *(WTF::StringImpl ***)v119;
              v125 = 8 * v121;
              do
              {
                v126 = *v124;
                *v124 = 0;
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2)
                  {
                    v214 = v114;
                    WTF::StringImpl::destroy(v126, v11);
                    v114 = v214;
                  }
                  else
                  {
                    *(_DWORD *)v126 -= 2;
                  }
                }
                ++v124;
                v125 -= 8;
              }
              while (v125);
            }
            v122 = *(WTF **)v119;
            if (*(_QWORD *)v119)
            {
              *(_QWORD *)v119 = 0;
              *((_DWORD *)v119 + 2) = 0;
              v123 = v114;
              WTF::fastFree(v122, v11);
              v114 = v123;
            }
            v115 = (WTF::StringImpl *)((char *)v115 + 16);
            v119 = (WTF *)((char *)v119 + 16);
          }
          while (v119 != (WTF *)v118);
          v136 = *((unsigned int *)v88 + 10);
          v116 = v88[2];
          v115 = v88[4];
        }
        else
        {
          v136 = v112;
        }
        v137 = (WTF::StringImpl *)(v116 - v218 + v136);
        if (v116 != v218)
        {
          v141 = (char *)v114 + 16 * (_QWORD)v218;
          v142 = (char *)v115 + 16 * (_QWORD)v137;
          v143 = (char *)v114 + 16 * (_QWORD)v116;
          do
          {
            *(_QWORD *)v142 = 0;
            *((_QWORD *)v142 + 1) = 0;
            v144 = *(WTF::StringImpl ***)v143;
            *(_QWORD *)v143 = 0;
            *(_QWORD *)v142 = v144;
            LODWORD(v144) = *((_DWORD *)v143 + 2);
            *((_DWORD *)v143 + 2) = 0;
            *((_DWORD *)v142 + 2) = (_DWORD)v144;
            LODWORD(v144) = *((_DWORD *)v143 + 3);
            *((_DWORD *)v143 + 3) = 0;
            *((_DWORD *)v142 + 3) = (_DWORD)v144;
            v145 = *((unsigned int *)v143 + 3);
            if ((_DWORD)v145)
            {
              v149 = *(WTF::StringImpl ***)v143;
              v150 = 8 * v145;
              do
              {
                v151 = *v149;
                *v149 = 0;
                if (v151)
                {
                  if (*(_DWORD *)v151 == 2)
                  {
                    v216 = v114;
                    v220 = v137;
                    WTF::StringImpl::destroy(v151, v11);
                    v137 = v220;
                    v114 = v216;
                  }
                  else
                  {
                    *(_DWORD *)v151 -= 2;
                  }
                }
                ++v149;
                v150 -= 8;
              }
              while (v150);
            }
            v146 = *(WTF **)v143;
            if (*(_QWORD *)v143)
            {
              *(_QWORD *)v143 = 0;
              *((_DWORD *)v143 + 2) = 0;
              v147 = v114;
              v148 = v137;
              WTF::fastFree(v146, v11);
              v137 = v148;
              v114 = v147;
            }
            v142 += 16;
            v143 += 16;
          }
          while (v143 != v141);
        }
        v88[2] = v137;
        a3 = v217;
      }
      v3 = v221;
      v84 = v222;
      v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      if (v114)
      {
        if (v88[4] == v114)
        {
          v88[4] = 0;
          *((_DWORD *)v88 + 10) = 0;
        }
        WTF::fastFree(v114, v11);
      }
      v107 = v88[3];
LABEL_216:
      v138 = (uint64_t)v88[4] + 16 * (_QWORD)v107;
      *(_QWORD *)v138 = v223;
      *(_DWORD *)(v138 + 8) = v224;
      *(_DWORD *)(v138 + 12) = v224;
      if (v107 == (WTF::StringImpl *)(*((unsigned int *)v88 + 10) - 1))
        v139 = 0;
      else
        v139 = (WTF::StringImpl *)((char *)v107 + 1);
      v88[3] = v139;
      WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll((WTF::StringImpl **)&v226, v11);
      v140 = v227[0];
      if (v227[0])
      {
        v227[0] = 0;
        LODWORD(v227[1]) = 0;
        WTF::fastFree(v140, v11);
      }
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::destroy(v84, v11);
          if (!v83)
            goto LABEL_227;
          goto LABEL_225;
        }
        *(_DWORD *)v84 -= 2;
      }
      if (!v83)
        goto LABEL_227;
LABEL_225:
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v11);
      else
        *(_DWORD *)v83 -= 2;
LABEL_227:
      --v25;
    }
    while (v25);
    v192 = v228;
    if (!v228 || !*(_DWORD *)(v228 - 12))
      goto LABEL_370;
    v193 = a3;
    v194 = v225;
    if (v225
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v225, 8u), (v194 = v225) != 0))
    {
      v195 = *(_DWORD *)(v194 - 8);
    }
    else
    {
      v195 = 0;
    }
    v196 = *((_DWORD *)v16 + 4);
    if (v196 < 0x100)
      v197 = WTF::StringImpl::hashSlowCase(v16);
    else
      v197 = v196 >> 8;
    v198 = 0;
    v199 = 1;
    while (2)
    {
      v200 = v197 & v195;
      v201 = (WTF **)(v194 + 16 * (v197 & v195));
      v202 = *v201;
      if (*v201 == (WTF *)-1)
      {
        v198 = (WTF::StringImpl **)(v194 + 16 * v200);
LABEL_347:
        v197 = v199 + v200;
        ++v199;
        continue;
      }
      break;
    }
    if (v202)
    {
      if ((WTF::equal(v202, v16, a2) & 1) != 0)
      {
        v203 = 1;
        a3 = v193;
        v3 = v221;
        v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        goto LABEL_371;
      }
      goto LABEL_347;
    }
    if (v198)
    {
      *v198 = 0;
      v198[1] = 0;
      --*(_DWORD *)(v194 - 16);
      *(_DWORD *)v16 += 2;
      *v198 = v16;
    }
    else
    {
      *(_DWORD *)v16 += 2;
      *v201 = v16;
      v198 = (WTF::StringImpl **)(v194 + 16 * v200);
    }
    a3 = v193;
    v3 = v221;
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v204 = (uint64_t)v198[1];
    v198[1] = (WTF::StringImpl *)v192;
    if (v204)
      WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v204, v11);
    v205 = v225;
    if (v225)
      v206 = *(_DWORD *)(v225 - 12) + 1;
    else
      v206 = 1;
    *(_DWORD *)(v225 - 12) = v206;
    v207 = (*(_DWORD *)(v205 - 16) + v206);
    v208 = *(unsigned int *)(v205 - 4);
    if (v208 > 0x400)
    {
      if (v208 <= 2 * v207)
      {
LABEL_359:
        v209 = (_DWORD)v208 << (6 * v206 >= (2 * v208));
        goto LABEL_362;
      }
    }
    else if (3 * v208 <= 4 * v207)
    {
      if ((_DWORD)v208)
        goto LABEL_359;
      v209 = 8;
LABEL_362:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v225, v209);
    }
    v203 = 1;
LABEL_373:
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v11);
      if ((v203 & 1) == 0)
        break;
      goto LABEL_10;
    }
    *(_DWORD *)v16 -= 2;
  }
  while ((v203 & 1) != 0);
  v210 = v225;
  if (v225)
  {
    v211 = *(unsigned int *)(v225 - 4);
    if ((_DWORD)v211)
    {
      v212 = v225;
      do
      {
        v213 = *(WTF::StringImpl **)v212;
        if (*(_QWORD *)v212 != -1)
        {
          if (*(_QWORD *)(v212 + 8))
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v212 + 8), v11);
            v213 = *(WTF::StringImpl **)v212;
          }
          *(_QWORD *)v212 = 0;
          if (v213)
          {
            if (*(_DWORD *)v213 == 2)
              WTF::StringImpl::destroy(v213, v11);
            else
              *(_DWORD *)v213 -= 2;
          }
        }
        v212 += 16;
        --v211;
      }
      while (v211);
    }
    WTF::fastFree((WTF *)(v210 - 16), v11);
  }
}

uint64_t **std::unique_ptr<WebCore::FormController::FormKeyGenerator>::operator=[abi:sn180100](uint64_t **a1, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;

  v3 = *(uint64_t **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = v4[2];
    if (v5)
    {
      v7 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)v4[2];
        do
        {
          v9 = *v8;
          if (*v8 != (WTF::StringImpl *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, a2);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v5 - 16), a2);
    }
    if (*v4)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(*v4, a2);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::find(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v12 = *(WTF **)(v3 + 16 * v11);
    if (v12 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return v3 + 16 * v11;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;

  if (*a1)
  {
    v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl **)v4 == a2)
      return 0;
  }
  else
  {
    if (!a2)
      return 0;
    v4 = 0;
  }
  if ((WTF::StringImpl **)v4 != a2)
  {
    v5 = *a2;
    *a2 = (WTF::StringImpl *)-1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (uint64_t)a2[1];
    if (v6)
      WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v6, (WTF::StringImpl *)a2);
    ++*(_DWORD *)(*a1 - 16);
    v7 = *a1;
    if (*a1)
      v8 = *(_DWORD *)(v7 - 12) - 1;
    else
      v8 = -1;
    *(_DWORD *)(v7 - 12) = v8;
    v9 = *a1;
    if (*a1)
    {
      v11 = 6 * *(_DWORD *)(v9 - 12);
      v12 = *(_DWORD *)(v9 - 4);
      if (v11 < v12 && v12 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FormController::SavedFormState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v12 >> 1);
    }
  }
  return 1;
}

const WebCore::ValidatedFormListedElement *WebCore::FormController::restoreControlStateIn(WebCore::FormController *this, WebCore::HTMLFormElement *a2)
{
  const WebCore::ValidatedFormListedElement *result;
  void *v5;
  const WebCore::ValidatedFormListedElement **v6;
  uint64_t v7;
  const WebCore::ValidatedFormListedElement *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  int v14;
  unsigned int v15;

  result = (const WebCore::ValidatedFormListedElement *)WebCore::HTMLFormElement::copyValidatedListedElementsVector((unsigned int *)a2, (uint64_t)&v13);
  v6 = (const WebCore::ValidatedFormListedElement **)v13;
  if (v15)
  {
    v7 = 8 * v15;
    do
    {
      v8 = *v6;
      result = (const WebCore::ValidatedFormListedElement *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)*v6 + 304))(*v6);
      if ((_DWORD)result)
      {
        result = (const WebCore::ValidatedFormListedElement *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v8 + 24))(v8);
        if ((*((_BYTE *)result + 22) & 8) != 0)
        {
          result = (const WebCore::ValidatedFormListedElement *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)v8 + 296))(v8);
          if ((_DWORD)result)
          {
            result = (const WebCore::ValidatedFormListedElement *)WebCore::FormController::ownerForm(*v6);
            if (result == a2)
            {
              WebCore::FormController::takeStateForFormElement(this, *v6, &v11);
              if (v12)
                (*(void (**)(const WebCore::ValidatedFormListedElement *, uint64_t *))(*(_QWORD *)*v6 + 320))(*v6, &v11);
              result = (const WebCore::ValidatedFormListedElement *)WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v9);
            }
          }
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v6 = (const WebCore::ValidatedFormListedElement **)v13;
    if (v15)
    {
      v10 = 8 * v15;
      do
      {
        result = *v6;
        *v6 = 0;
        if (result)
          result = (const WebCore::ValidatedFormListedElement *)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)result + 96))(result);
        ++v6;
        v10 -= 8;
      }
      while (v10);
      v6 = (const WebCore::ValidatedFormListedElement **)v13;
    }
  }
  if (v6)
  {
    v13 = 0;
    v14 = 0;
    return (const WebCore::ValidatedFormListedElement *)WTF::fastFree((WTF *)v6, v5);
  }
  return result;
}

void WebCore::FormController::referencedFilePaths(uint64_t a1@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  char *v27;
  char *v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  _DWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  WTF *v63;
  unsigned int v64;
  WTF::StringImpl *v65;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  WebCore::FormController::parseStateVector(a1, a2, &v62);
  v5 = 0;
  v6 = 0;
  v7 = v62;
  v57 = v62;
  if (v62)
  {
    v6 = *((unsigned int *)v62 - 1);
    v5 = &v62[2 * v6];
    if (*((_DWORD *)v62 - 3))
    {
      v10 = v62;
      if ((_DWORD)v6)
      {
        v11 = 16 * v6;
        v10 = v62;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v5;
            break;
          }
        }
      }
      v7 = v62;
      v8 = v5;
      v5 = v10;
      goto LABEL_3;
    }
    v7 = v62;
  }
  v8 = &v7[2 * v6];
  if (v7)
  {
LABEL_3:
    v9 = &v7[2 * *((unsigned int *)v7 - 1)];
    goto LABEL_12;
  }
  v9 = 0;
LABEL_12:
  if (v9 != v5)
  {
    v58 = v9;
    v59 = v8;
    do
    {
      v12 = v5[1];
      v60 = v5;
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 4);
        v14 = v12 + 48 * v13;
        if (*(_DWORD *)(v12 - 12))
        {
          v15 = v5[1];
          if ((_DWORD)v13)
          {
            v16 = 48 * v13;
            v15 = v5[1];
            while (*(_QWORD *)v15 == -1 || *(_OWORD *)v15 == 0)
            {
              v15 += 48;
              v16 -= 48;
              if (!v16)
              {
                v15 = v14;
                goto LABEL_27;
              }
            }
          }
          goto LABEL_27;
        }
        v15 = v12 + 48 * v13;
      }
      else
      {
        v15 = 0;
        LODWORD(v13) = 0;
      }
      v14 = v12 + 48 * v13;
LABEL_27:
      if (v12)
        v12 += 48 * *(unsigned int *)(v12 - 4);
      if (v12 != v15)
      {
        v61 = v12;
        do
        {
          if (MEMORY[0x19AEA53F4](*(_QWORD *)(v15 + 8), "file", 4))
          {
            v18 = *(_QWORD *)(v15 + 16);
            v19 = *(_QWORD *)(v15 + 24);
            while (v19 != v18)
            {
              WebCore::FileInputType::filesFromFormControlState((WTF *)(*(_QWORD *)(v15 + 32) + 16 * v18), v4, (uint64_t)&v63);
              v22 = v64;
              if (v64)
              {
                if (v64 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195BA77E4);
                }
                v23 = WTF::fastMalloc((WTF *)(24 * v64));
                v24 = (WTF *)v23;
                v25 = 0;
                v26 = v63;
                v27 = (char *)v63 + 24 * v22;
                do
                {
                  v28 = (char *)v26 + v25;
                  v29 = *(_DWORD **)((char *)v26 + v25);
                  if (v29)
                    *v29 += 2;
                  v30 = v23 + v25;
                  *(_QWORD *)(v23 + v25) = v29;
                  v31 = (_DWORD *)*((_QWORD *)v28 + 1);
                  if (v31)
                    *v31 += 2;
                  *(_QWORD *)(v30 + 8) = v31;
                  v32 = (_DWORD *)*((_QWORD *)v28 + 2);
                  if (v32)
                    *v32 += 2;
                  *(_QWORD *)(v30 + 16) = v32;
                  v25 += 24;
                }
                while (v28 + 24 != v27);
              }
              else
              {
                v24 = 0;
              }
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, v4);
                else
                  *(_DWORD *)v65 -= 2;
              }
              v33 = v63;
              if ((_DWORD)v22)
              {
                v34 = 24 * v22;
                v35 = (WTF::StringImpl **)((char *)v63 + 16);
                do
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v4);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v37 = *(v35 - 1);
                  *(v35 - 1) = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, v4);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v38 = *(v35 - 2);
                  *(v35 - 2) = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, v4);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v35 += 3;
                  v34 -= 24;
                }
                while (v34);
              }
              if (v33)
                WTF::fastFree(v33, v4);
              if ((_DWORD)v22)
              {
                LODWORD(v39) = *(_DWORD *)(a3 + 12);
                v40 = 24 * v22;
                v41 = v40;
                v42 = v24;
                do
                {
                  if ((_DWORD)v39 == *(_DWORD *)(a3 + 8))
                  {
                    v43 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v39 + 1, (unint64_t)v42);
                    v39 = *(unsigned int *)(a3 + 12);
                    v44 = *(_QWORD *)a3;
                    v45 = *v43;
                    if (*v43)
                      *v45 += 2;
                    *(_QWORD *)(v44 + 8 * v39) = v45;
                  }
                  else
                  {
                    v46 = *(_QWORD *)a3;
                    v47 = *(_DWORD **)v42;
                    if (*(_QWORD *)v42)
                      *v47 += 2;
                    *(_QWORD *)(v46 + 8 * v39) = v47;
                  }
                  LODWORD(v39) = v39 + 1;
                  *(_DWORD *)(a3 + 12) = v39;
                  v42 = (WTF *)((char *)v42 + 24);
                  v41 -= 24;
                }
                while (v41);
                v48 = (WTF::StringImpl **)((char *)v24 + 16);
                do
                {
                  v49 = *v48;
                  *v48 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, v4);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v50 = *(v48 - 1);
                  *(v48 - 1) = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, v4);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  v51 = *(v48 - 2);
                  *(v48 - 2) = 0;
                  if (v51)
                  {
                    if (*(_DWORD *)v51 == 2)
                      WTF::StringImpl::destroy(v51, v4);
                    else
                      *(_DWORD *)v51 -= 2;
                  }
                  v48 += 3;
                  v40 -= 24;
                }
                while (v40);
              }
              if (v24)
                WTF::fastFree(v24, v4);
              v52 = *(unsigned int *)(v15 + 40);
              v18 += v52 + 1;
              do
                v18 -= v52;
              while (v18 >= v52);
            }
          }
          v20 = v15 + 48;
          v15 = v14;
          if (v20 != v14)
          {
            v15 = v20;
            while (*(_QWORD *)v15 == -1 || *(_OWORD *)v15 == 0)
            {
              v15 += 48;
              if (v15 == v14)
              {
                v15 = v14;
                break;
              }
            }
          }
        }
        while (v15 != v61);
      }
      v5 = v59;
      if (v60 + 2 != v59)
      {
        v5 = v60 + 2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v59)
          {
            v5 = v59;
            break;
          }
        }
      }
    }
    while (v5 != v58);
  }
  v53 = v57;
  if (v57)
  {
    v54 = *((unsigned int *)v57 - 1);
    if ((_DWORD)v54)
    {
      v55 = (WTF::StringImpl **)v57;
      do
      {
        v56 = *v55;
        if (*v55 != (WTF::StringImpl *)-1)
        {
          if (v55[1])
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable((uint64_t)v55[1], v4);
            v56 = *v55;
          }
          *v55 = 0;
          v53 = v57;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v4);
            else
              *(_DWORD *)v56 -= 2;
            v53 = v57;
          }
        }
        v55 += 2;
        --v54;
      }
      while (v54);
    }
    WTF::fastFree((WTF *)(v53 - 2), v4);
  }
}

void WebCore::FormListedElement::~FormListedElement(WebCore::FormListedElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = off_1E33B31D0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = off_1E33B3CE0;
  v5 = *((_QWORD *)this + 1);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x195BA7950);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v12)
      {
        v18 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v12));
        v6 = v18;
      }
      v13 = *(WTF **)(v6 + 16);
      if (v13)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v16 = v6;
        WTF::fastFree(v13, a2);
        v6 = v16;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v14)
      {
        v19 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v14));
        v9 = v19;
      }
      v15 = *(WTF **)(v9 + 16);
      if (v15)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v17 = v9;
        WTF::fastFree(v15, a2);
        v9 = v17;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

uint64_t WebCore::FormListedElement::didMoveToNewDocument(WebCore::FormListedElement *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this);
  v3 = *(_QWORD *)(result + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(uint64_t **)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
    }
    else
    {
      v5 = (uint64_t *)(v3 + 32);
      LODWORD(v6) = v4 >> 5;
    }
    if ((_DWORD)v6)
    {
      v6 = v6;
      while (1)
      {
        v7 = *v5;
        if (*v5 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v5 += 2;
        if (!--v6)
          return result;
      }
      if ((*(_BYTE *)(result + 22) & 8) != 0)
        return WebCore::FormListedElement::resetFormAttributeTargetObserver(this);
    }
  }
  return result;
}

uint64_t WebCore::FormListedElement::resetFormAttributeTargetObserver(WebCore::FormListedElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t result;

  v2 = *(_QWORD *)((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x28);
  v9 = *(_QWORD *)((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this) + 40);
  v10 = *(WTF::StringImpl **)(v9 + 64);
  if (!v10)
  {
    v11 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    v13 = *(WTF **)(v9 + 64);
    *(_QWORD *)(v9 + 64) = v11;
    if (v13)
    {
      v14 = (_DWORD *)*((_QWORD *)v13 + 2);
      if (v14)
      {
        if (!*v14)
        {
          __break(0xC471u);
          JUMPOUT(0x195BA7C24);
        }
        --*v14;
      }
      v15 = *((_QWORD *)v13 + 1);
      if (v15)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v15, v12);
      if (*(_DWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
      }
      else
      {
        WTF::fastFree(v13, v12);
      }
    }
    v10 = *(WTF::StringImpl **)(v9 + 64);
  }
  *(_DWORD *)(v8 + 8) = 0;
  *(_QWORD *)v8 = off_1E33A5038;
  *(_QWORD *)(v8 + 16) = v10;
  ++*(_DWORD *)v10;
  v16 = *v6;
  if (*v6)
    *v16 += 2;
  *(_QWORD *)(v8 + 24) = v16;
  WebCore::IdTargetObserverRegistry::addObserver(v10, (WTF::StringImpl **)(v8 + 24), (WebCore::IdTargetObserver *)v8);
  *(_QWORD *)v8 = off_1E33B32F8;
  *(_QWORD *)(v8 + 32) = this;
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebCore::FormListedElement::elementRemovedFromAncestor(WebCore::FormListedElement *this, uint64_t a2, char a3)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WebCore::Node *v18;
  uint64_t v19;
  void *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;

  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v13 = *(_QWORD *)(v7 + 8);
    if (v13)
    {
      v14 = a2;
      do
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 32);
      }
      while (v14);
      do
      {
        v16 = v13;
        v13 = *(_QWORD *)(v13 + 32);
      }
      while (v13);
      if (v15 != v16)
      {
        v22 = 0;
        (*(void (**)(WebCore::FormListedElement *, WebCore::Node **))(*(_QWORD *)this + 80))(this, &v22);
        v18 = v22;
        v22 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v17);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        result = (unsigned int *)(*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  if ((a3 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 104);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) != 0)
      {
        v10 = *(uint64_t **)(v8 + 40);
        LODWORD(v11) = *(_DWORD *)(v8 + 52);
        if (!(_DWORD)v11)
          return result;
      }
      else
      {
        v10 = (uint64_t *)(v8 + 32);
        LODWORD(v11) = v9 >> 5;
        if (!(_DWORD)v11)
          return result;
      }
      v11 = v11;
      while (1)
      {
        v12 = *v10;
        if (*v10 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v10 += 2;
        if (!--v11)
          return result;
      }
      v22 = 0;
      v19 = *((_QWORD *)this + 1);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 8))
        {
          (*(void (**)(WebCore::FormListedElement *, WebCore::Node **))(*(_QWORD *)this + 80))(this, &v22);
          v21 = v22;
          v22 = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v21, v20);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
        }
      }
      return WebCore::FormListedElement::resetFormOwner(this);
    }
  }
  return result;
}

unsigned int *WebCore::FormListedElement::formOwnerRemovedFromTree(WebCore::FormListedElement *this, const WebCore::Node *a2)
{
  const WebCore::Node *v4;
  uint64_t v5;
  const WebCore::Node *v6;
  unsigned int *result;
  const WebCore::Node *v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;

  v4 = (const WebCore::Node *)(*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = *(const WebCore::Node **)(v5 + 8);
  else
    v6 = 0;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this);
  v8 = (const WebCore::Node *)*((_QWORD *)result + 4);
  if (v8)
  {
    while (v8 != v6)
    {
      v4 = v8;
      v8 = (const WebCore::Node *)*((_QWORD *)v8 + 4);
      if (!v8)
        goto LABEL_6;
    }
    result = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
LABEL_6:
    if (v4 != a2)
    {
      v11 = 0;
      v9 = *((_QWORD *)this + 1);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 8))
        {
          (*(void (**)(WebCore::FormListedElement *, WebCore::Node **))(*(_QWORD *)this + 80))(this, &v11);
          result = (unsigned int *)v11;
          v11 = 0;
          if (result)
          {
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
            }
            else
            {
              result[6] -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::FormListedElement::setFormInternal(WebCore::FormListedElement *a1, WebCore::HTMLFormElement **a2)
{
  void *v4;
  uint64_t v5;
  WebCore::HTMLFormElement *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::HTMLFormElement *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  (*(void (**)(WebCore::FormListedElement *))(*(_QWORD *)a1 + 256))(a1);
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    v14 = *(WebCore::HTMLFormElement **)(v5 + 8);
    if (v14)
      WebCore::HTMLFormElement::unregisterFormListedElement(v14, a1);
  }
  v6 = *a2;
  if (*a2)
  {
    *((_DWORD *)v6 + 6) += 2;
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v6);
    v8 = v7;
    if (v7)
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 + 1, v7));
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v15)
      {
        v18 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v15));
        v10 = v18;
      }
      v16 = *(WTF **)(v10 + 16);
      if (v16)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v17 = v10;
        WTF::fastFree(v16, v4);
        v10 = v17;
      }
      WTF::fastFree((WTF *)v10, v4);
    }
  }
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  if (*a2)
    WebCore::HTMLFormElement::registerFormListedElement(*a2, a1);
  return (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)a1 + 264))(a1);
}

_QWORD *WebCore::FormListedElement::formWillBeDestroyed(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;

  v1 = this[1];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    (*(void (**)(_QWORD *))(*this + 256))(this);
    v4 = (unsigned int *)v2[1];
    v2[1] = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v9 = (WTF *)v4;
        v7 = v4[7];
        if ((_DWORD)v7)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v9 + 2), (WTF::StringImpl *)(*((_QWORD *)v9 + 2) + 32 * v7));
        v8 = (WTF *)*((_QWORD *)v9 + 2);
        if (v8)
        {
          *((_QWORD *)v9 + 2) = 0;
          *((_DWORD *)v9 + 6) = 0;
          WTF::fastFree(v8, v3);
        }
        WTF::fastFree(v9, v3);
      }
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 264))(v2);
  }
  return this;
}

uint64_t WebCore::FormAssociatedElement::formWillBeDestroyed(WebCore::FormAssociatedElement *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::FormListedElement::hasBadInput(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::patternMismatch(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::rangeOverflow(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::rangeUnderflow(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::stepMismatch(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::tooShort(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::tooLong(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::typeMismatch(WebCore::FormListedElement *this)
{
  return 0;
}

BOOL WebCore::FormListedElement::computeValidity(WebCore::FormListedElement *this)
{
  uint64_t v2;

  if (((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 200))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 176))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 168))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 160))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 184))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 192))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 152))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 208))(this) & 1) != 0
    || ((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 144))(this) & 1) != 0)
  {
    return 0;
  }
  v2 = *((_QWORD *)this + 4);
  return !v2 || *(_DWORD *)(v2 + 4) == 0;
}

uint64_t WebCore::FormListedElement::valueMissing(WebCore::FormListedElement *this)
{
  return 0;
}

uint64_t WebCore::FormListedElement::validationMessage@<X0>(WebCore::FormListedElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 272))(this);
  if ((_DWORD)result)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 4);
    if (v5)
      *v5 += 2;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

WTF::StringImpl *WebCore::FormListedElement::setCustomValidity(WebCore::FormListedElement *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::FormListedElement::name(WebCore::FormListedElement *this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)((*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 24))(this) + 104);
  if (v1 && (v2 = *(_DWORD *)(v1 + 4), (v2 & 2) != 0))
  {
    if ((v2 & 1) != 0)
    {
      v5 = *(uint64_t **)(v1 + 40);
      LODWORD(v6) = *(_DWORD *)(v1 + 52);
    }
    else
    {
      v5 = (uint64_t *)(v1 + 32);
      LODWORD(v6) = v2 >> 5;
    }
    if ((_DWORD)v6)
    {
      v6 = v6;
      while (1)
      {
        v7 = *v5;
        if (*v5 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v5 += 2;
        if (!--v6)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v5 = 0;
    }
    v3 = v5 + 1;
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if (*v3)
    return v3;
  else
    return (_QWORD *)MEMORY[0x1E0CBF3B8];
}

unsigned int *WebCore::FormAttributeTargetObserver::idTargetChanged(WebCore::FormListedElement **this)
{
  return WebCore::FormListedElement::resetFormOwner(this[4]);
}

uint64_t WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>::elementMatches(char a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = a1 & 0x1F;
  result = 1;
  switch(v2)
  {
    case 0:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::imgTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 1:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::embedTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 3:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::formTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 4:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
      if (v5 != *(_QWORD *)(WebCore::HTMLNames::aTag + 24) && v5 != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
        return 0;
      v6 = *(_QWORD *)(a2 + 104);
      if (!v6)
        return 0;
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(uint64_t **)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
      }
      else
      {
        v8 = (uint64_t *)(v6 + 32);
        LODWORD(v9) = v7 >> 5;
      }
      if (!(_DWORD)v9)
        return 0;
      v9 = v9;
      while (1)
      {
        v16 = *v8;
        if (*v8 == WebCore::HTMLNames::hrefAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
        {
          break;
        }
        result = 0;
        v8 += 2;
        if (!--v9)
          return result;
      }
      return 1;
    case 5:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      if (*(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
        return 0;
      v10 = *(_QWORD *)(a2 + 104);
      if (!v10)
        return 0;
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) != 0)
      {
        v12 = *(uint64_t **)(v10 + 40);
        LODWORD(v13) = *(_DWORD *)(v10 + 52);
      }
      else
      {
        v12 = (uint64_t *)(v10 + 32);
        LODWORD(v13) = v11 >> 5;
      }
      if (!(_DWORD)v13)
        return 0;
      v13 = v13;
      break;
    case 6:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::scriptTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 11:
      return result;
    case 12:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::tbodyTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 13:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::trTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 15:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
      if (v14 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
        return result;
      return v14 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24);
    case 17:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        return 0;
      }
      return WebCore::HTMLOptionElement::selected(a2, 1u);
    case 18:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::optionTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 19:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        return 0;
      v4 = &WebCore::HTMLNames::areaTag;
      return *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v4 + 24);
    case 21:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
    default:
      return 0;
  }
  while (1)
  {
    v17 = *v12;
    if (*v12 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    result = 0;
    v12 += 2;
    if (!--v13)
      return result;
  }
  return 1;
}

uint64_t WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)1>::elementMatches(char a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;

  if ((a1 & 0x1F) == 0xB)
    return 1;
  switch(a1 & 0x1F)
  {
    case 0:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::imgTag;
      goto LABEL_35;
    case 1:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::embedTag;
      goto LABEL_35;
    case 3:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::formTag;
      goto LABEL_35;
    case 4:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v4 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
      if (v4 != *(_QWORD *)(WebCore::HTMLNames::aTag + 24) && v4 != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
        goto LABEL_4;
      v5 = &WebCore::HTMLNames::hrefAttr;
      return WebCore::Element::hasAttributeWithoutSynchronization(a2, v5);
    case 5:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
      {
        goto LABEL_4;
      }
      v5 = &WebCore::HTMLNames::nameAttr;
      return WebCore::Element::hasAttributeWithoutSynchronization(a2, v5);
    case 6:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::scriptTag;
      goto LABEL_35;
    case 0xC:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::tbodyTag;
      goto LABEL_35;
    case 0xD:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::trTag;
      goto LABEL_35;
    case 0xF:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
      if (v6 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
        return 1;
      v7 = v6 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24);
      goto LABEL_36;
    case 0x11:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        goto LABEL_4;
      }
      return WebCore::HTMLOptionElement::selected(a2, 1u);
    case 0x12:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::optionTag;
      goto LABEL_35;
    case 0x13:
      if ((*(_WORD *)(a2 + 28) & 0x10) == 0)
        goto LABEL_4;
      v3 = &WebCore::HTMLNames::areaTag;
LABEL_35:
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*v3 + 24);
LABEL_36:
      result = v7;
      break;
    case 0x15:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
    default:
LABEL_4:
      result = 0;
      break;
  }
  return result;
}

void WebCore::HTMLAllCollection::create(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = WebCore::AllDescendantsCollection::operator new(88);
  WebCore::AllDescendantsCollection::AllDescendantsCollection(v6, a1, a2);
  *v7 = off_1E33B3A08;
  *a3 = v7;
}

WebCore::HTMLAllCollection *WebCore::HTMLAllCollection::namedOrIndexedItemOrItems@<X0>(WebCore::HTMLAllCollection *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  v5 = *(_BYTE **)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 4);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if (!(_DWORD)v6
      || (v17 = *v5 - 48, v17 > 9)
      || (v6 >= 2 ? (v20 = *v5 == 48) : (v20 = 0), v20))
    {
LABEL_26:
      v18 = 0;
      v13 = 0;
      v19 = 0;
    }
    else
    {
      v21 = v6 - 1;
      v22 = v5 + 1;
      while (v21)
      {
        if (v17 > 0x19999999)
          goto LABEL_26;
        v23 = *v22 - 48;
        if (v23 > 9)
          goto LABEL_26;
        v18 = 0;
        v13 = 0;
        v19 = 0;
        v12 = __CFADD__(v23, 10 * v17);
        v17 = v23 + 10 * v17;
        --v21;
        ++v22;
        if (v12)
          goto LABEL_27;
      }
      if (v17 == -1)
        v18 = 0;
      else
        v18 = v17;
      if (v17 == -1)
        v13 = 0;
      else
        v13 = 0x100000000;
      if (v17 == -1)
        v19 = 0;
      else
        v19 = v17 & 0xFFFFFF00;
    }
LABEL_27:
    v16 = v19 | v18;
    if ((v13 & 0x100000000) != 0)
      goto LABEL_17;
    return (WebCore::HTMLAllCollection *)WebCore::HTMLAllCollection::namedItemOrItems(this, a2, a3);
  }
  if (!(_DWORD)v6
    || (v7 = *(unsigned __int16 *)v5 - 48, v7 > 9)
    || (v6 >= 2 ? (v8 = *(unsigned __int16 *)v5 == 48) : (v8 = 0), v8))
  {
LABEL_15:
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v9 = (unsigned __int16 *)(v5 + 2);
    v10 = v6 - 1;
    while (v10)
    {
      if (v7 <= 0x19999999)
      {
        v11 = *v9 - 48;
        if (v11 <= 9)
        {
          v12 = __CFADD__(v11, 10 * v7);
          v7 = v11 + 10 * v7;
          ++v9;
          --v10;
          if (!v12)
            continue;
        }
      }
      goto LABEL_15;
    }
    v8 = v7 == -1;
    v15 = v7 & 0xFFFFFF00;
    v14 = v7;
    v13 = 0x100000000;
    if (v8)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
    }
  }
  v16 = v15 | v14;
  if ((v13 & 0x100000000) == 0)
    return (WebCore::HTMLAllCollection *)WebCore::HTMLAllCollection::namedItemOrItems(this, a2, a3);
LABEL_17:
  this = (WebCore::HTMLAllCollection *)WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::item((uint64_t)this, v16 | v13);
  if (this)
    *((_DWORD *)this + 6) += 2;
  *(_QWORD *)a3 = this;
  *(_DWORD *)(a3 + 8) = 1;
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

uint64_t WebCore::HTMLAllCollection::namedItemOrItems@<X0>(WebCore::HTMLAllCollection *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t result;
  WTF *v14;
  int v15;
  unsigned int v16;

  WebCore::HTMLCollection::namedItems((uint64_t)this, a2, &v14);
  if (v16 == 1)
  {
    v7 = *(_QWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)a3 = v7;
    v8 = 1;
    *(_DWORD *)(a3 + 8) = 1;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_5;
  }
  if (!v16)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    goto LABEL_15;
  }
  v12 = (WebCore::Document *)*((_QWORD *)this + 3);
  if ((*((_WORD *)v12 + 14) & 0xF000) != 0x9000)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  WebCore::Document::allFilteredByName(v12, a2, (_QWORD *)a3);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v8 = v16;
  if (v16)
  {
LABEL_5:
    v9 = v14;
    v10 = 8 * v8;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v6);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
      v10 -= 8;
    }
    while (v10);
  }
LABEL_15:
  result = (uint64_t)v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    return WTF::fastFree((WTF *)result, v6);
  }
  return result;
}

void WebCore::HTMLAllNamedSubCollection::~HTMLAllNamedSubCollection(WebCore::HTMLAllNamedSubCollection *this)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if ((*(_QWORD *)(*((_QWORD *)this + 3) + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v2 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 3) + 72) & 0xFFFFFFFFFFFFLL);
  else
    v2 = 0;
  WebCore::NodeListsNodeData::removeCachedCollection(v2, this, (WTF::StringImpl **)this + 11);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33B3C40;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v3);
  WebCore::HTMLCollection::~HTMLCollection(this, v5);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLAllNamedSubCollection::~HTMLAllNamedSubCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WebCore::HTMLAllNamedSubCollection::elementMatches(WebCore::HTMLAllNamedSubCollection *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)a2 + 13);
  if (v2 && *(_QWORD *)(v2 + 24))
  {
    v10 = *(_DWORD *)(v2 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(uint64_t **)(v2 + 40);
      LODWORD(v12) = *(_DWORD *)(v2 + 52);
    }
    else
    {
      v11 = (uint64_t *)(v2 + 32);
      LODWORD(v12) = v10 >> 5;
    }
    if ((_DWORD)v12)
    {
      v12 = v12;
      while (1)
      {
        v13 = *v11;
        if (*v11 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_37;
      }
    }
    else
    {
LABEL_37:
      v11 = 0;
    }
    v3 = v11 + 1;
  }
  else
  {
    v3 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v4 = *v3;
  v5 = *((_QWORD *)this + 11);
  if (v4 == v5)
    return 1;
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    return 0;
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v7
    && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v7)
  {
    return 0;
  }
  if (v2 && (v8 = *(_DWORD *)(v2 + 4), (v8 & 2) != 0))
  {
    if ((v8 & 1) != 0)
    {
      v14 = *(uint64_t **)(v2 + 40);
      LODWORD(v15) = *(_DWORD *)(v2 + 52);
    }
    else
    {
      v14 = (uint64_t *)(v2 + 32);
      LODWORD(v15) = v8 >> 5;
    }
    if ((_DWORD)v15)
    {
      v15 = v15;
      while (1)
      {
        v16 = *v14;
        if (*v14 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v14 += 2;
        if (!--v15)
          goto LABEL_50;
      }
    }
    else
    {
LABEL_50:
      v14 = 0;
    }
    v9 = v14 + 1;
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return *v9 == v5;
}

void `non-virtual thunk to'WebCore::HTMLAnchorElement::~HTMLAnchorElement(WebCore::HTMLAnchorElement *this, WTF::StringImpl *a2)
{
  WebCore::HTMLAnchorElement::~HTMLAnchorElement((WebCore::HTMLAnchorElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLAnchorElement::~HTMLAnchorElement((WebCore::HTMLAnchorElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLAnchorElement::supportsFocus(WebCore::HTMLAnchorElement *this)
{
  uint64_t result;
  int v3;

  if (!WebCore::Node::computeEditability((uint64_t)this, 0, 1) && (*((_WORD *)this + 15) & 1) != 0
    || ((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
  {
    return 1;
  }
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

uint64_t WebCore::HTMLAnchorElement::isMouseFocusable(WebCore::HTMLAnchorElement *this)
{
  uint64_t result;
  int v3;

  if ((*((_WORD *)this + 15) & 1) == 0)
    return (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 552))(this);
  if (((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

uint64_t WebCore::HTMLAnchorElement::isInteractiveContent(WebCore::HTMLAnchorElement *this)
{
  return *((_WORD *)this + 15) & 1;
}

uint64_t WebCore::HTMLAnchorElement::isKeyboardFocusable(WebCore::HTMLAnchorElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  result = (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 552))(this);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 552))(this)
      && ((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3
      || (*((_WORD *)this + 15) & 1) == 0
      || (result = WebCore::EventHandler::tabsToLinks(*(WebCore::EventHandler **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)+ 8)+ 640), a2), (_DWORD)result))
    {
      result = (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 552))(this);
      if ((_DWORD)result)
      {
        if (((*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 1120))(this) & 0x80000000) == 0
          || (result = (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 544))(this),
              (_DWORD)result))
        {
          v6 = *((_QWORD *)this + 9);
          v7 = (v6 >> 58) & 3;
          if ((_DWORD)v7 == 2)
            return 0;
          v8 = v6 & 0xFFFFFFFFFFFFLL;
          if ((_DWORD)v7 == 3 && (*(_DWORD *)(v8 + 28) & 0x80000000) != 0)
          {
            return 0;
          }
          else
          {
            if (v8 && (v10 = *(_QWORD *)(v8 + 88)) != 0)
            {
              v11 = *(_DWORD *)(v10 + 24);
              *(_DWORD *)(v10 + 24) = v11 + 2;
              v9 = (*(unsigned __int8 *)(v10 + 192) >> 1) & 1;
              if (v11)
              {
                *(_DWORD *)(v10 + 24) = v11;
              }
              else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
              }
            }
            else
            {
              v9 = 0;
            }
            return v9 ^ 1u;
          }
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLAnchorElement::defaultEventHandler(uint64_t this, WebCore::Event *a2)
{
  WebCore::HTMLAnchorElement *v3;
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::Event *v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int j;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  unsigned int *v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  WTF *v92;

  v3 = (WebCore::HTMLAnchorElement *)this;
  if ((*(_WORD *)(this + 30) & 1) == 0)
    goto LABEL_152;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementFocused((WebCore::Element *)this);
    if ((_DWORD)this)
    {
      v67 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v67 || (v68 = *(_QWORD *)(v67 + 96)) == 0)
      {
        this = WebCore::threadGlobalDataSlow((WebCore *)this);
        v68 = this;
      }
      v69 = *(_QWORD *)(v68 + 40);
      if (!v69)
      {
        this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v68);
        v69 = *(_QWORD *)(v68 + 40);
      }
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v69 + 1048))
      {
        this = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
        if ((_DWORD)this)
        {
          this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Enter", 5);
          if ((_DWORD)this)
          {
            this = WebCore::Node::computeEditability((uint64_t)v3, 0, 1);
            if (!(_DWORD)this
              || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 680) + 369) <= 1u)
            {
              *((_DWORD *)a2 + 5) |= 0x80u;
              WebCore::simulateClick(v3, (uint64_t)a2, 0, 1, 1);
              return;
            }
          }
        }
      }
    }
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v7 + 400))
  {
    if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2)
      || (v50 = *((unsigned __int16 *)a2 + 77), v50 >= 3) && v50 - 65534 > 1
      || *((_WORD *)a2 + 77) != 2)
    {
      if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2))
        v51 = (*((unsigned __int8 *)a2 + 84) >> 3) & 1;
      else
        v51 = 2;
      if (!WebCore::Node::computeEditability((uint64_t)v3, 0, 1))
        goto LABEL_78;
      v53 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 680) + 369);
      if (v53 < 2)
        goto LABEL_78;
      if (v53 == 2)
        goto LABEL_77;
      if (v53 == 3)
      {
        if (v51)
        {
LABEL_77:
          if (v51 == 1)
          {
LABEL_78:
            WebCore::HTMLAnchorElement::handleClick((unsigned int *)v3, a2);
            return;
          }
          goto LABEL_9;
        }
        v70 = WebCore::HTMLAnchorElement::rootEditableElementForSelectionOnMouseDown(v3, v52);
        v71 = 0;
        v72 = (uint64_t)v3;
        do
        {
          if (!WebCore::Node::hasEditableStyle(v72, 0))
            break;
          if ((*(_WORD *)(v72 + 28) & 8) != 0)
            v71 = v72;
          i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if (i == v72)
            break;
          v72 = *(_QWORD *)(v72 + 32);
        }
        while (v72);
        if (v70 != v71)
          goto LABEL_78;
      }
    }
  }
LABEL_9:
  v8 = (WebCore *)WebCore::Node::computeEditability((uint64_t)v3, 0, 1);
  if (!(_DWORD)v8)
    goto LABEL_152;
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v8);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v12 = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if ((_DWORD)v12)
    v14 = a2;
  else
    v14 = 0;
  v15 = *((_QWORD *)a2 + 3);
  v16 = v15 != *(_QWORD *)(v11 + 1208) || (_DWORD)v12 == 0;
  if (v16
    || ((v17 = *((unsigned __int16 *)v14 + 77), v17 >= 3) ? (v18 = v17 - 65534 > 1) : (v18 = 0),
        !v18 ? (v19 = *((_WORD *)v14 + 77) == 2) : (v19 = 0),
        v19
     || (v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528)) == 0
     || (v21 = *(_QWORD *)(v20 + 8)) == 0))
  {
    if (v15 == *(_QWORD *)(v11 + 1248))
    {
      if (*((_BYTE *)v3 + 120))
      {
        if ((byte_1ECE833ED & 1) != 0)
        {
          v48 = dword_1ECE83420++;
          if (v48 > dword_1ECE83424)
            WTF::WeakHashMap<WebCore::HTMLAnchorElement,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v12, v13);
        }
        else
        {
          *(_QWORD *)&dword_1ECE83420 = 1;
          qword_1ECE83418 = 0;
          byte_1ECE833ED = 1;
        }
        v49 = *((_QWORD *)v3 + 2);
        if ((v49 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v49 & 0xFFFFFFFFFFFFLL) + 8))
          WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(v49 & 0xFFFFFFFFFFFFLL, v13);
        *((_BYTE *)v3 + 120) = 0;
      }
      *((_BYTE *)v3 + 121) = 0;
    }
    goto LABEL_152;
  }
  v22 = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(v21 + 296) + 3064) + 120, 0);
  if (!v22)
  {
    if (*((_BYTE *)v3 + 120))
    {
      if ((byte_1ECE833ED & 1) != 0)
      {
        v54 = dword_1ECE83420++;
        if (v54 > dword_1ECE83424)
          WTF::WeakHashMap<WebCore::HTMLAnchorElement,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(0, v23);
      }
      else
      {
        *(_QWORD *)&dword_1ECE83420 = 1;
        qword_1ECE83418 = 0;
        byte_1ECE833ED = 1;
      }
      v55 = *((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL;
      if (v55 && *(_QWORD *)((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL) + 8))
        WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(v55, v23);
      *((_BYTE *)v3 + 120) = 0;
    }
    goto LABEL_151;
  }
  v24 = v22;
  if ((byte_1ECE833ED & 1) != 0)
  {
    v25 = dword_1ECE83420++;
    if (v25 > dword_1ECE83424)
      WTF::WeakHashMap<WebCore::HTMLAnchorElement,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v22, v23);
  }
  else
  {
    *(_QWORD *)&dword_1ECE83420 = 1;
    qword_1ECE83418 = 0;
    byte_1ECE833ED = 1;
  }
  if ((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v26 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 8) = v3;
    *(_BYTE *)(v26 + 32) = 0;
    v27 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = v27 & 0xFFFF000000000000 | v26;
    v28 = v27 & 0xFFFFFFFFFFFFLL;
    if ((v27 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v29 = __ldaxr((unsigned int *)v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v28));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)v28);
        v91 = *(unsigned int *)(v28 + 28);
        if ((_DWORD)v91)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v91));
        v92 = *(WTF **)(v28 + 16);
        if (v92)
        {
          *(_QWORD *)(v28 + 16) = 0;
          *(_DWORD *)(v28 + 24) = 0;
          WTF::fastFree(v92, v23);
        }
        WTF::fastFree((WTF *)v28, v23);
      }
    }
  }
  v31 = *((_QWORD *)v3 + 2);
  v32 = v31 & 0xFFFFFFFFFFFFLL;
  do
    v33 = __ldaxr((unsigned int *)v32);
  while (__stlxr(v33 + 1, (unsigned int *)v32));
  do
    v34 = __ldaxr((unsigned int *)v32);
  while (__stlxr(v34 + 1, (unsigned int *)v32));
  if (v32)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)v32);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v32));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v32);
      v85 = *(unsigned int *)((v31 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v85)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v31 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v85));
      v86 = *(WTF **)((v31 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v86)
      {
        *(_QWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v86, v23);
      }
      WTF::fastFree((WTF *)(v31 & 0xFFFFFFFFFFFFLL), v23);
    }
  }
  v37 = qword_1ECE83418;
  if (qword_1ECE83418
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(8u),
        (v37 = qword_1ECE83418) != 0))
  {
    v38 = *(_DWORD *)(v37 - 8);
  }
  else
  {
    v38 = 0;
  }
  v39 = 0;
  v40 = (v32 + ~(v31 << 32)) ^ ((unint64_t)(v32 + ~(v31 << 32)) >> 22);
  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  v43 = (v42 >> 31) ^ v42;
  for (j = 1; ; ++j)
  {
    v45 = v43 & v38;
    v46 = (uint64_t *)(v37 + 16 * v45);
    v47 = *v46;
    if (*v46 != -1)
      break;
    v39 = (uint64_t *)(v37 + 16 * v45);
LABEL_54:
    v43 = j + v45;
  }
  if (!v47)
  {
    if (v39)
    {
      *v39 = 0;
      v39[1] = 0;
      --*(_DWORD *)(qword_1ECE83418 - 16);
      *v39 = v32;
      v46 = v39;
    }
    else
    {
      *v46 = v32;
    }
    v74 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v24);
    if (v74)
    {
      do
        v76 = __ldaxr(v74);
      while (__stlxr(v76 + 1, v74));
    }
    v77 = v46[1];
    v46[1] = (uint64_t)v74;
    if (v77)
    {
      do
      {
        v78 = __ldaxr((unsigned int *)v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, (unsigned int *)v77));
      if (!v79)
      {
        atomic_store(1u, (unsigned int *)v77);
        v87 = *(unsigned int *)(v77 + 28);
        if ((_DWORD)v87)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v77 + 16), (WTF::StringImpl *)(*(_QWORD *)(v77 + 16) + 32 * v87));
        v88 = *(WTF **)(v77 + 16);
        if (v88)
        {
          *(_QWORD *)(v77 + 16) = 0;
          *(_DWORD *)(v77 + 24) = 0;
          WTF::fastFree(v88, v75);
        }
        WTF::fastFree((WTF *)v77, v75);
      }
    }
    if (qword_1ECE83418)
      v80 = *(_DWORD *)(qword_1ECE83418 - 12) + 1;
    else
      v80 = 1;
    *(_DWORD *)(qword_1ECE83418 - 12) = v80;
    if (qword_1ECE83418)
      v81 = *(_DWORD *)(qword_1ECE83418 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(qword_1ECE83418 - 16) + v81);
    v83 = *(unsigned int *)(qword_1ECE83418 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_150;
    }
    else
    {
      if (3 * v83 > 4 * v82)
        goto LABEL_150;
      if (!(_DWORD)v83)
      {
        v84 = 8;
        goto LABEL_149;
      }
    }
    v84 = (_DWORD)v83 << (6 * *(_DWORD *)(qword_1ECE83418 - 12) >= (2 * v83));
LABEL_149:
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v84);
    goto LABEL_150;
  }
  if (v47 != v32)
    goto LABEL_54;
  v56 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v24);
  if (v56)
  {
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 + 1, v56));
  }
  v59 = v37 + 16 * v45;
  v60 = *(_QWORD *)(v59 + 8);
  *(_QWORD *)(v59 + 8) = v56;
  if (!v60)
    goto LABEL_94;
  do
  {
    v61 = __ldaxr((unsigned int *)v60);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, (unsigned int *)v60));
  if (!v62)
  {
    atomic_store(1u, (unsigned int *)v60);
    v89 = *(unsigned int *)(v60 + 28);
    if ((_DWORD)v89)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v60 + 16), (WTF::StringImpl *)(*(_QWORD *)(v60 + 16) + 32 * v89));
    v90 = *(WTF **)(v60 + 16);
    if (v90)
    {
      *(_QWORD *)(v60 + 16) = 0;
      *(_DWORD *)(v60 + 24) = 0;
      WTF::fastFree(v90, v57);
    }
    WTF::fastFree((WTF *)v60, v57);
    if (v32)
      goto LABEL_95;
  }
  else
  {
LABEL_94:
    if (!v32)
      goto LABEL_150;
    do
    {
LABEL_95:
      v63 = __ldaxr((unsigned int *)v32);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, (unsigned int *)v32));
    if (!v64)
    {
      atomic_store(1u, (unsigned int *)v32);
      v65 = *(unsigned int *)(v32 + 28);
      if ((_DWORD)v65)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v65));
      v66 = *(WTF **)(v32 + 16);
      if (v66)
      {
        *(_QWORD *)(v32 + 16) = 0;
        *(_DWORD *)(v32 + 24) = 0;
        WTF::fastFree(v66, v57);
      }
      WTF::fastFree((WTF *)v32, v57);
    }
  }
LABEL_150:
  *((_BYTE *)v3 + 120) = 1;
LABEL_151:
  *((_BYTE *)v3 + 121) = (*((_BYTE *)v14 + 84) & 8) != 0;
LABEL_152:
  WebCore::Node::defaultEventHandler(v3, (WebCore::Node **)a2);
}

unsigned int *WebCore::HTMLAnchorElement::handleClick(unsigned int *this, WebCore::Event *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  char v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  _WORD *v45;
  _WORD *v46;
  uint64_t v47;
  unint64_t v48;
  _WORD *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  _BYTE *v60;
  void *v61;
  uint64_t v62;
  _BYTE *v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _WORD *v69;
  unsigned int v70;
  unint64_t v71;
  _WORD *v72;
  _WORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int v86;
  WTF::StringImpl *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  int canRequest;
  WTF::StringImpl *v92;
  char v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::ResourceResponseBase *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int16 *v131;
  unint64_t v132;
  WTF::StringImpl *v133;
  double v134;
  double v135;
  float v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t isBlankTargetFrameName;
  __int16 v141;
  unsigned int v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  int *v155;
  unsigned int v156;
  unsigned int v157;
  WebCore *v158;
  char shouldOpenExternalURLsPolicyToPropagate;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl **v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  unsigned int v169;
  const char *v170;
  unint64_t v171;
  unsigned int v172;
  unsigned __int8 *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  unsigned int v184;
  unsigned int v185;
  WTF *v186;
  void *v187;
  WTF *v188;
  void *v189;
  WTF *v190;
  void *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int **v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl **v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  int v244;
  __int128 v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::WallTime *v248;
  WTF::StringImpl *v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  void *v253;
  int v254;
  WTF *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  unsigned int *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  WebCore::Document *v267;
  uint64_t v268;
  WebCore::PingLoader *v269;
  const WTF::URL *v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  char v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::WallTime *v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  void *v303;
  int v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  unsigned int *v310;
  _QWORD *v311;
  WTF::StringImpl *v312;
  char v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  char v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  int v319;
  char v320;
  WTF::StringImpl *v321;
  char v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  int v326;
  __int128 v327;
  uint64_t v328;
  int v329;
  char v330;
  WTF::StringImpl *v331;
  int v332;
  int v333;
  char v334;
  WTF::StringImpl *v335[5];
  char v336;
  char v337;
  WTF *v338;
  WTF *v339;
  uint64_t v340;
  char v341;
  __int16 v342;
  uint64_t v343;
  char v344;
  WTF::StringImpl *v345[2];
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  WebCore::Event *v351;
  char v352;
  WTF::StringImpl *v353;
  void *v354;
  WTF::StringImpl *v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  char v359;
  char v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365;
  void *v366;
  char v367;
  __int128 v368;
  __int128 v369;
  char v370;
  char v371;
  WTF::StringImpl *v372;
  uint64_t v373;

  v373 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a2 + 5) |= 0x80u;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 528);
  if (!v4)
    goto LABEL_316;
  v5 = *(_QWORD **)(v4 + 8);
  if (!v5)
    goto LABEL_316;
  v6 = a2;
  v7 = (uint64_t)this;
  v8 = (unsigned int *)(v5 + 1);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24)
    && (*((_BYTE *)this + 22) & 8) == 0)
  {
    goto LABEL_312;
  }
  v317 = 0;
  v318 = 0;
  v319 = 0;
  v320 = 1;
  v10 = *((_QWORD *)this + 13);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v10 + 40);
      LODWORD(v13) = *(_DWORD *)(v10 + 52);
      if (!(_DWORD)v13)
        goto LABEL_18;
    }
    else
    {
      v12 = v10 + 32;
      LODWORD(v13) = v11 >> 5;
      if (!(_DWORD)v13)
        goto LABEL_18;
    }
    v13 = v13;
    v14 = v12 + 8;
    do
    {
      v15 = *(_QWORD *)(v14 - 8);
      if (v15 == WebCore::HTMLNames::hrefAttr
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
        && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
      {
        break;
      }
      v14 += 16;
      --v13;
    }
    while (v13);
  }
LABEL_18:
  WTF::String::trim();
  v17 = v335[0];
  if (v335[0])
    *(_DWORD *)v335[0] += 2;
  v18 = v317;
  v317 = v17;
  if (!v18)
  {
LABEL_23:
    if (!v17)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v18, v16);
  v17 = v335[0];
  if (v335[0])
LABEL_24:
    LODWORD(v17) = *((_DWORD *)v17 + 1);
LABEL_25:
  v319 = (int)v17;
  v19 = v335[0];
  v335[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)v6 + 88))(v6))
    goto LABEL_136;
  v20 = *((_QWORD *)v6 + 6);
  if (!v20)
    goto LABEL_136;
  if ((*(_BYTE *)(v20 + 22) & 2) == 0)
    goto LABEL_136;
  if ((*(_WORD *)(v20 + 28) & 0x10) == 0)
    goto LABEL_136;
  if (*(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    goto LABEL_136;
  if (!WebCore::HTMLImageElement::isServerMap(*((WebCore::HTMLImageElement **)v6 + 6)))
    goto LABEL_136;
  v21 = *(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v21)
    goto LABEL_136;
  if ((*(_BYTE *)(v21 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195BAB260);
  }
  if ((((*(_BYTE *)(v21 + 52) & 7) == 3) & *(_BYTE *)(v21 + 53)) != 1)
    goto LABEL_136;
  ++*(_DWORD *)(v21 + 16);
  v22 = *((_DWORD *)v6 + 31);
  *(float *)v335 = (float)(*((_DWORD *)v6 + 30) / 64);
  *((float *)v335 + 1) = (float)(v22 / 64);
  v337 = 0;
  memset(&v335[1], 0, 32);
  v336 = 0;
  v339 = 0;
  v340 = 0;
  v338 = 0;
  v341 = 0;
  v342 = 1;
  v343 = 0x100000000;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v21 + 584))(v21, 0, v335);
  WebCore::TransformState::flatten((WebCore::TransformState *)v335, 0);
  v24 = v335[0];
  v25 = v339;
  v339 = 0;
  if (v25)
    WTF::fastFree(v25, v23);
  v26 = v338;
  v338 = 0;
  if (v26)
    WTF::fastFree(v26, v23);
  v27 = llroundf(*(float *)&v24);
  v28 = llroundf(*((float *)&v24 + 1));
  if ((v27 & 0x8000000000000000) != 0)
  {
    v32 = -(uint64_t)v27;
    v29 = 1;
    do
    {
      ++v29;
      v33 = v32 >= 0xA;
      v32 /= 0xAuLL;
    }
    while (v33);
  }
  else
  {
    v29 = 0;
    v30 = v27;
    do
    {
      ++v29;
      v31 = v30 > 9;
      v30 /= 0xAuLL;
    }
    while (v31);
  }
  if ((v28 & 0x8000000000000000) != 0)
  {
    v36 = -(uint64_t)v28;
    v34 = 1;
    do
    {
      ++v34;
      v33 = v36 >= 0xA;
      v36 /= 0xAuLL;
    }
    while (v33);
  }
  else
  {
    v34 = 0;
    v35 = v28;
    do
    {
      ++v34;
      v31 = v35 > 9;
      v35 /= 0xAuLL;
    }
    while (v31);
  }
  v33 = __CFADD__(v34, 1);
  v37 = v34 + 1;
  if (v33)
    v37 = -1;
  v33 = __CFADD__(v37, v29);
  v38 = v37 + v29;
  v39 = v33;
  v33 = __CFADD__(v38, 1);
  v40 = v38 + 1;
  v41 = v33;
  if ((v39 & 1) != 0 || v41)
    v40 = -1;
  v33 = __CFADD__(v40, v319);
  v42 = v40 + v319;
  if (v33)
    v43 = 0xFFFFFFFFLL;
  else
    v43 = v42;
  v44 = v318;
  if ((v318 || (v44 = v317) != 0) && (*((_BYTE *)v44 + 16) & 4) == 0)
  {
    v45 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v317);
    if (v45)
    {
      *v45 = 63;
      v46 = v45 + 1;
      if ((v27 & 0x8000000000000000) != 0)
      {
        v67 = -(uint64_t)v27;
        v68 = 24;
        do
        {
          *((_BYTE *)v335 + v68--) = (v67 % 0xA) | 0x30;
          v31 = v67 > 9;
          v67 /= 0xAuLL;
        }
        while (v31);
        *((_BYTE *)v335 + v68) = 45;
        if (v68 + 2 <= 26)
        {
          v69 = v46;
          do
          {
            *v69++ = *((unsigned __int8 *)v335 + v68);
            v31 = v68++ < 24;
          }
          while (v31);
        }
      }
      else
      {
        v47 = 0;
        v48 = v27;
        do
        {
          *((_BYTE *)&v335[3] + v47--) = (v48 % 0xA) | 0x30;
          v31 = v48 > 9;
          v48 /= 0xAuLL;
        }
        while (v31);
        if (v47 + 26 <= 25)
        {
          v49 = v46;
          do
          {
            *v49++ = *((unsigned __int8 *)&v335[3] + v47 + 1);
            v33 = __CFADD__(v47++, 1);
          }
          while (!v33);
        }
      }
      if ((v27 & 0x8000000000000000) != 0)
      {
        v71 = -(uint64_t)v27;
        v70 = 1;
        do
        {
          ++v70;
          v33 = v71 >= 0xA;
          v71 /= 0xAuLL;
        }
        while (v33);
      }
      else
      {
        v70 = 0;
        do
        {
          ++v70;
          v31 = v27 > 9;
          v27 /= 0xAuLL;
        }
        while (v31);
      }
      v72 = &v46[v70];
      *v72 = 44;
      v73 = v72 + 1;
      if ((v28 & 0x8000000000000000) != 0)
      {
        v75 = -(uint64_t)v28;
        v76 = 24;
        do
        {
          *((_BYTE *)v335 + v76--) = (v75 % 0xA) | 0x30;
          v31 = v75 > 9;
          v75 /= 0xAuLL;
        }
        while (v31);
        *((_BYTE *)v335 + v76) = 45;
        if (v76 + 2 <= 26)
        {
          do
          {
            *v73++ = *((unsigned __int8 *)v335 + v76);
            v31 = v76++ < 24;
          }
          while (v31);
        }
      }
      else
      {
        v74 = 0;
        do
        {
          *((_BYTE *)&v335[3] + v74--) = (v28 % 0xA) | 0x30;
          v31 = v28 > 9;
          v28 /= 0xAuLL;
        }
        while (v31);
        if (v74 + 26 <= 25)
        {
          do
          {
            *v73++ = *((unsigned __int8 *)&v335[3] + v74 + 1);
            v33 = __CFADD__(v74++, 1);
          }
          while (!v33);
        }
      }
    }
    goto LABEL_134;
  }
  v50 = (_BYTE *)MEMORY[0x19AEA4824](&v317, v43);
  if (!v50)
    goto LABEL_134;
  *v50 = 63;
  v51 = v50 + 1;
  v52 = 0;
  if ((v27 & 0x8000000000000000) != 0)
  {
    v56 = -(uint64_t)v27;
    do
    {
      *((_BYTE *)&v335[3] + v52--) = (v56 % 0xA) | 0x30;
      v31 = v56 > 9;
      v56 /= 0xAuLL;
    }
    while (v31);
    v57 = v52 + 24;
    v54 = (char *)&v335[3] + v52;
    *v54 = 45;
    if (v52 + 26 <= 26)
    {
      if (v57 <= 24)
        v57 = 24;
      v55 = v57 - v52 - 23;
      goto LABEL_94;
    }
  }
  else
  {
    v53 = v27;
    do
    {
      *((_BYTE *)&v335[3] + v52--) = (v53 % 0xA) | 0x30;
      v31 = v53 > 9;
      v53 /= 0xAuLL;
    }
    while (v31);
    if (v52 + 26 <= 25)
    {
      v54 = (char *)&v335[3] + v52 + 1;
      v55 = -v52;
LABEL_94:
      memcpy(v50 + 1, v54, v55);
    }
  }
  if ((v27 & 0x8000000000000000) != 0)
  {
    v59 = -(uint64_t)v27;
    v58 = 1;
    do
    {
      ++v58;
      v33 = v59 >= 0xA;
      v59 /= 0xAuLL;
    }
    while (v33);
  }
  else
  {
    v58 = 0;
    do
    {
      ++v58;
      v31 = v27 > 9;
      v27 /= 0xAuLL;
    }
    while (v31);
  }
  v60 = &v51[v58];
  *v60 = 44;
  v61 = v60 + 1;
  v62 = 0;
  if ((v28 & 0x8000000000000000) != 0)
  {
    v65 = -(uint64_t)v28;
    do
    {
      *((_BYTE *)&v335[3] + v62--) = (v65 % 0xA) | 0x30;
      v31 = v65 > 9;
      v65 /= 0xAuLL;
    }
    while (v31);
    v66 = v62 + 24;
    v63 = (char *)&v335[3] + v62;
    *v63 = 45;
    if (v62 + 26 > 26)
      goto LABEL_134;
    if (v66 <= 24)
      v66 = 24;
    v64 = v66 - v62 - 23;
  }
  else
  {
    do
    {
      *((_BYTE *)&v335[3] + v62--) = (v28 % 0xA) | 0x30;
      v31 = v28 > 9;
      v28 /= 0xAuLL;
    }
    while (v31);
    if (v62 + 26 > 25)
      goto LABEL_134;
    v63 = (char *)&v335[3] + v62 + 1;
    v64 = -v62;
  }
  memcpy(v61, v63, v64);
LABEL_134:
  v77 = *(_DWORD *)(v21 + 16);
  if (!v77)
  {
    __break(0xC471u);
    goto LABEL_385;
  }
  *(_DWORD *)(v21 + 16) = v77 - 1;
LABEL_136:
  v78 = v317;
  if (v317
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v317),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v317),
        (v78 = v317) != 0))
  {
    *(_DWORD *)v78 += 2;
  }
  v335[0] = v78;
  WebCore::Document::completeURL((WebCore::Document *)v2, v335, v2 + 848, 0, (WTF::URL *)&v315);
  v80 = v335[0];
  v335[0] = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v79);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (!WebCore::DataDetection::canPresentDataDetectorsUIForElement((WebCore::DataDetection *)v7, v79)
    || (v81 = *(_QWORD *)(v2 + 528)) == 0
    || (v82 = *(_QWORD *)(v81 + 8)) == 0
    || (v83 = *(_QWORD *)(v82 + 24)) == 0
    || (v84 = *(_QWORD *)(v83 + 8)) == 0)
  {
LABEL_152:
    v314 = 0;
    if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 672) & 0x200000000000000) == 0)
      goto LABEL_183;
    if ((WTF::URL::protocolIs() & 1) == 0)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), v87);
      v89 = v88;
      if (v88)
      {
        do
          v90 = __ldaxr(v88);
        while (__stlxr(v90 + 1, v88));
      }
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      canRequest = WebCore::SecurityOrigin::canRequest((uint64_t)v88, (WebCore::ThreadableBlobRegistry *)&v315, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
      v93 = canRequest;
      if (!v89)
        goto LABEL_161;
      do
      {
        v94 = __ldaxr(v89);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v89));
      if (v95)
      {
LABEL_161:
        if (canRequest)
          goto LABEL_162;
LABEL_357:
        v198 = *(_QWORD *)(v7 + 104);
        if (!v198)
          goto LABEL_183;
        v199 = *(_DWORD *)(v198 + 4);
        if ((v199 & 1) != 0)
        {
          v200 = *(uint64_t **)(v198 + 40);
          LODWORD(v201) = *(_DWORD *)(v198 + 52);
          if (!(_DWORD)v201)
            goto LABEL_183;
        }
        else
        {
          v200 = (uint64_t *)(v198 + 32);
          LODWORD(v201) = v199 >> 5;
          if (!(_DWORD)v201)
            goto LABEL_183;
        }
        v201 = v201;
        while (1)
        {
          v202 = *v200;
          if (*v200 == WebCore::HTMLNames::downloadAttr
            || *(_QWORD *)(v202 + 24) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 24)
            && *(_QWORD *)(v202 + 32) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 32))
          {
            break;
          }
          v200 += 2;
          if (!--v201)
            goto LABEL_183;
        }
        v203 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        *(_DWORD *)(v203 + 24) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v353 = v335[0];
        WebCore::Document::addConsoleMessage((_QWORD *)v203, 8, 1, &v353, 0);
        v205 = v353;
        v353 = 0;
        if (v205)
        {
          if (*(_DWORD *)v205 == 2)
            WTF::StringImpl::destroy(v205, v204);
          else
            *(_DWORD *)v205 -= 2;
        }
        if (*(_DWORD *)(v203 + 24) == 2)
        {
          if ((*(_WORD *)(v203 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v203, v204);
        }
        else
        {
          *(_DWORD *)(v203 + 24) -= 2;
        }
LABEL_183:
        v348 = 0;
        v347 = 0uLL;
        v346 = 0;
        v345[0] = 0;
        v345[1] = 0;
        v351 = 0;
        v349 = 0;
        v350 = 0;
        v352 = 0;
        if (WebCore::HTMLAnchorElement::isSystemPreviewLink((WebCore::HTMLAnchorElement *)v7))
        {
          v107 = *(_QWORD *)(v2 + 680);
          v108 = *(unsigned __int8 *)(v107 + 724);
          v109 = *(unsigned int *)(v107 + 720) | (v108 << 32);
          v352 = v108 >> 7;
          if ((v109 & 0x8000000000) != 0)
          {
            v349 = WebCore::Element::identifier((WebCore::Element *)v7);
            v347 = *(_OWORD *)(v2 + 416);
            v348 = *(_QWORD *)(v2 + 432);
            v110 = *(_QWORD *)(v2 + 528);
            if (v110)
            {
              v111 = *(_QWORD *)(v110 + 8);
              if (v111)
              {
                v111 = *(_QWORD *)(v111 + 24);
                if (v111)
                {
                  v111 = *(_QWORD *)(v111 + 8);
                  if (v111)
                  {
                    if (!*(_BYTE *)(v111 + 40))
                      goto LABEL_190;
                    v111 = *(_QWORD *)(v111 + 32);
                  }
                }
              }
LABEL_191:
              v346 = v111;
              v112 = *(_QWORD *)(v7 + 80);
              if (v112)
              {
                while ((*(_WORD *)(v112 + 28) & 8) == 0)
                {
                  v112 = *(_QWORD *)(v112 + 56);
                  if (!v112)
                    goto LABEL_194;
                }
                v350 = WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v112);
                v351 = a2;
                v110 = *(_QWORD *)(v2 + 528);
                if (!v110)
                  goto LABEL_300;
              }
              else
              {
LABEL_194:
                if (!v110)
                {
LABEL_300:
                  v181 = v314;
                  v314 = 0;
                  if (v181)
                  {
                    if (*(_DWORD *)v181 == 2)
                      WTF::StringImpl::destroy(v181, a2);
                    else
                      *(_DWORD *)v181 -= 2;
                  }
                  goto LABEL_303;
                }
              }
              v113 = *(_QWORD *)(v110 + 8);
              if (v113)
              {
                v114 = *(_QWORD *)(v113 + 24);
                if (v114)
                {
                  v115 = *(_QWORD *)(v114 + 8);
                  if (v115)
                  {
                    ++*(_DWORD *)v115;
                    WebCore::Document::topOrigin((WebCore::Document *)v2, a2);
                    v117 = v116 + 8;
                    WebCore::Document::topOrigin((WebCore::Document *)v2, v118);
                    LOBYTE(v353) = 0;
                    LODWORD(v356) = -1;
                    v120 = *(unsigned int *)(v119 + 32);
                    if ((_DWORD)v120 != -1)
                    {
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))off_1E33B3A98[v120])(v335, &v353, v119 + 8);
                      LODWORD(v356) = v120;
                    }
                    v357 = 1;
                    WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)v335, (uint64_t)&v315, (uint64_t)&v353);
                    v121 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
                    *(_QWORD *)v121 = off_1E33B3CB8;
                    WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)v121 + 8, (uint64_t *)v335);
                    v325 = v121;
                    (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v115 + 48) + 16) + 1736))(*(_QWORD *)(*(_QWORD *)(v115 + 48) + 16), &v315, v117, v345, &v325);
                    v122 = v325;
                    v325 = 0;
                    if (v122)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v122 + 8))(v122);
                    WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v335);
                    if (v357 && (_DWORD)v356 != -1)
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v356])(&v331, &v353);
                    if (*(_DWORD *)v115 == 1)
                    {
                      WebCore::Page::~Page(v115);
                      WTF::fastFree(v190, v191);
                    }
                    else
                    {
                      --*(_DWORD *)v115;
                    }
                  }
                }
              }
              goto LABEL_300;
            }
LABEL_190:
            v111 = 0;
            goto LABEL_191;
          }
        }
        else
        {
          v352 = 0;
        }
        v313 = 0;
        if ((*(_BYTE *)(v7 + 122) & 1) != 0)
        {
          LOBYTE(v129) = 1;
          goto LABEL_226;
        }
        v123 = *(_QWORD *)(v7 + 104);
        if (v123)
        {
          v124 = *(_DWORD *)(v123 + 4);
          if ((v124 & 1) != 0)
          {
            v125 = *(_QWORD *)(v123 + 40);
            LODWORD(v126) = *(_DWORD *)(v123 + 52);
            if ((_DWORD)v126)
            {
LABEL_212:
              v126 = v126;
              v127 = (uint64_t *)(v125 + 8);
              while (1)
              {
                v128 = *(v127 - 1);
                if (v128 == WebCore::HTMLNames::referrerpolicyAttr
                  || *(_QWORD *)(v128 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
                  && *(_QWORD *)(v128 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
                {
                  goto LABEL_222;
                }
                v127 += 2;
                if (!--v126)
                {
                  v127 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                  goto LABEL_222;
                }
              }
            }
          }
          else
          {
            v125 = v123 + 32;
            LODWORD(v126) = v124 >> 5;
            if ((_DWORD)v126)
              goto LABEL_212;
          }
        }
        v127 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_222:
        v130 = *v127;
        if (v130)
        {
          v131 = *(unsigned __int16 **)(v130 + 8);
          v132 = *(unsigned int *)(v130 + 4) | ((unint64_t)((*(_DWORD *)(v130 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v131 = 0;
          v132 = 0x100000000;
        }
        v129 = (unsigned __int16)WebCore::parseReferrerPolicy(v131, v132, 2);
        if (v129 <= 0x100)
          LOBYTE(v129) = 0;
LABEL_226:
        v313 = v129;
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v7 + 648))(v335, v7);
        v137 = v335[0];
        if (!v335[0] || !*((_DWORD *)v335[0] + 1))
        {
          v138 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1176);
          if (v138)
            *(_DWORD *)v138 += 2;
          v335[0] = v138;
          if (v137)
          {
            if (*(_DWORD *)v137 == 2)
              WTF::StringImpl::destroy(v137, v133);
            else
              *(_DWORD *)v137 -= 2;
          }
        }
        WebCore::Element::makeTargetBlankIfHasDanglingMarkup((WebCore::Element *)v335, &v312, v134, v135, v136);
        isBlankTargetFrameName = (uint64_t)v335[0];
        v335[0] = 0;
        if (isBlankTargetFrameName)
        {
          if (*(_DWORD *)isBlankTargetFrameName == 2)
            isBlankTargetFrameName = WTF::StringImpl::destroy((WTF::StringImpl *)isBlankTargetFrameName, v139);
          else
            *(_DWORD *)isBlankTargetFrameName -= 2;
        }
        if ((*(_BYTE *)(v7 + 122) & 3) != 0
          || (*(_BYTE *)(v7 + 122) & 4) == 0
          && ((v142 = v312, !v312)
            ? (v143 = 0, v144 = 1)
            : (v143 = (unsigned __int8 *)*((_QWORD *)v312 + 1),
               v142 = *((_DWORD *)v312 + 1),
               v144 = ((unint64_t)*((unsigned int *)v312 + 4) >> 2) & 1),
              (isBlankTargetFrameName = WebCore::isBlankTargetFrameName(v143, v142 | (v144 << 32)),
               (_DWORD)isBlankTargetFrameName)
           && (isBlankTargetFrameName = WTF::URL::protocolIsJavaScript((WTF::URL *)&v315),
               (isBlankTargetFrameName & 1) == 0)))
        {
          v141 = 256;
        }
        else
        {
          v141 = 257;
        }
        v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
        if (!v145 || (v146 = *(_QWORD *)(v145 + 8)) == 0)
        {
          LOBYTE(v335[0]) = 0;
          v344 = 0;
          goto LABEL_258;
        }
        v147 = (unsigned int *)(v146 + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 + 1, v147));
        v149 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        v150 = *(_QWORD *)(v149 + 528);
        if (!v150)
          goto LABEL_255;
        v151 = *(_QWORD *)(v150 + 8);
        if (!v151)
          goto LABEL_255;
        v152 = *(_QWORD *)(v151 + 24);
        if (!v152)
          goto LABEL_255;
        v153 = *(_QWORD *)(v152 + 8);
        if (!v153
          || (*(_QWORD *)(*(_QWORD *)(v149 + 680) + 688) & 0x400000000) == 0
          || !WTF::isMainThread((WTF *)isBlankTargetFrameName))
        {
          goto LABEL_255;
        }
        v154 = &dword_1ECE90000;
        v155 = &webThreadDelegateMessageScopeCount;
          goto LABEL_540;
        if (!WebCore::currentToken(void)::token
          || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
          || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
        {
          goto LABEL_255;
        }
        v309 = v146;
        v310 = (unsigned int *)(v5 + 1);
        v311 = v5;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 680) + 688) & 0x1000000000000) == 0
          || (v206 = WebCore::PrivateClickMeasurement::appStoreURLAdamID((WebCore::PrivateClickMeasurement *)&v315, v139), !(_BYTE)v139))
        {
          LOBYTE(v335[0]) = 0;
          v344 = 0;
          goto LABEL_391;
        }
        v207 = v206;
        v208 = *(_QWORD *)(v7 + 104);
        if (v208
          && ((v209 = *(_DWORD *)(v208 + 4), (v209 & 1) != 0)
            ? (v210 = *(_QWORD *)(v208 + 40), LODWORD(v211) = *(_DWORD *)(v208 + 52))
            : (v210 = v208 + 32, LODWORD(v211) = v209 >> 5),
              (_DWORD)v211))
        {
          v211 = v211;
          v234 = (WTF::StringImpl **)(v210 + 8);
          while (1)
          {
            v235 = (uint64_t)*(v234 - 1);
            if (v235 == WebCore::HTMLNames::attributiondestinationAttr
              || *(_QWORD *)(v235 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 24)
              && *(_QWORD *)(v235 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 32))
            {
              break;
            }
            v234 += 2;
            if (!--v211)
            {
              v234 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v234 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        }
        v236 = *v234;
        if (v236)
          *(_DWORD *)v236 += 2;
        v353 = v236;
        MEMORY[0x19AEA52D4](v335, &v353, 0);
        v237 = v353;
        v353 = 0;
        if (v237)
        {
          if (*(_DWORD *)v237 == 2)
            WTF::StringImpl::destroy(v237, v139);
          else
            *(_DWORD *)v237 -= 2;
        }
        if ((~LODWORD(v335[1]) & 3) == 0)
        {
          v325 = v335[0];
          v327 = *(_OWORD *)((char *)&v335[1] + 4);
          v328 = *(uint64_t *)((char *)&v335[3] + 4);
          v326 = (int)v335[1];
          v329 = HIDWORD(v335[4]);
          v330 = 1;
LABEL_478:
          v238 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
          v239 = *(_QWORD *)(v238 + 528);
          if (v239)
          {
            v240 = *(_QWORD *)(v239 + 8);
            if (v240)
            {
              v241 = *(_QWORD *)(v240 + 24);
              if (v241)
              {
                v242 = *(_QWORD *)(v241 + 8);
                if (v242)
                {
                  v243 = *(WTF::StringImpl **)(v242 + 168);
                  if (v243)
                  {
                    v244 = *(_DWORD *)v243;
                    *(_DWORD *)v243 += 2;
                    v335[0] = v243;
                    v245 = *(_OWORD *)(v242 + 192);
                    *(_OWORD *)&v335[1] = *(_OWORD *)(v242 + 176);
                    *(_OWORD *)&v335[3] = v245;
                    if (*((_DWORD *)v243 + 1))
                    {
                      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v353, (const WTF::URL *)v335);
                      v8 = (unsigned int *)v353;
                      v247 = v335[0];
                      v335[0] = 0;
                      if (v247)
                      {
                        if (*(_DWORD *)v247 == 2)
                          WTF::StringImpl::destroy(v247, v246);
                        else
                          *(_DWORD *)v247 -= 2;
                      }
                      WebCore::HTMLAnchorElement::attributionSourceNonceForPCM(&v331, (_QWORD *)v7);
                      if (!(_BYTE)v332)
                      {
                        LOBYTE(v335[0]) = 0;
                        v344 = 0;
                        goto LABEL_562;
                      }
                      WebCore::applicationBundleIdentifier(v139, &v321);
                      if (v330)
                      {
                        v248 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v335, (const WTF::URL *)&v325);
                        WTF::WallTime::now(v248);
                        LOBYTE(v353) = 0;
                        if (v8)
                          *v8 += 2;
                        v354 = v8;
                        v251 = v335[0];
                        if (v335[0])
                          *(_DWORD *)v335[0] += 2;
                        v355 = v251;
                        v356 = v250;
                        v357 = 0;
                        LOBYTE(v358) = 0;
                        v359 = 0;
                        v360 = 0;
                        v361 = 0;
                        v362 = 0;
                        v363 = 0;
                        v364 = 0;
                        v365 = 0;
                        LOBYTE(v366) = 0;
                        v367 = 0;
                        v371 = 0;
                        v368 = 0u;
                        v369 = 0u;
                        v370 = 0;
                        v252 = v321;
                        if (v321)
                          *(_DWORD *)v321 += 2;
                        v372 = v252;
                        v335[0] = 0;
                        if (v251)
                        {
                          if (*(_DWORD *)v251 == 2)
                          {
                            WTF::StringImpl::destroy(v251, v249);
                            if (!v8)
                              goto LABEL_501;
                            goto LABEL_499;
                          }
                          *(_DWORD *)v251 -= 2;
                        }
                        if (!v8)
                          goto LABEL_501;
LABEL_499:
                        if (*v8 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v8, v249);
                        else
                          *v8 -= 2;
LABEL_501:
                        v8 = (unsigned int *)v331;
                        WTF::base64Decode();
                        if (LOBYTE(v335[2]))
                        {
                          v254 = HIDWORD(v335[1]);
                          v255 = v335[0];
                          if (v335[0])
                          {
                            v335[0] = 0;
                            LODWORD(v335[1]) = 0;
                            WTF::fastFree(v255, v253);
                          }
                          if (v254 == 16)
                          {
                            v366 = v8;
                            v367 = 1;
                            v8 = 0;
                          }
                        }
                        v358 = v207;
                        v359 = 1;
                        std::__optional_destruct_base<WebCore::PrivateClickMeasurement,false>::__optional_destruct_base[abi:sn180100]<WebCore::PrivateClickMeasurement>((uint64_t)v335, (uint64_t)&v353);
                        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v353, v256);
                        v257 = v321;
                        v321 = 0;
                        if (v257)
                        {
                          if (*(_DWORD *)v257 == 2)
                          {
                            WTF::StringImpl::destroy(v257, v139);
                            if (!v8)
                              goto LABEL_565;
                          }
                          else
                          {
                            *(_DWORD *)v257 -= 2;
                            if (!v8)
                              goto LABEL_565;
                          }
LABEL_563:
                          if (*v8 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v8, v139);
                          else
                            *v8 -= 2;
LABEL_565:
                          if (v330)
                          {
                            v274 = v325;
                            v325 = 0;
                            if (v274)
                            {
                              if (*(_DWORD *)v274 == 2)
                                WTF::StringImpl::destroy(v274, v139);
                              else
                                *(_DWORD *)v274 -= 2;
                            }
                          }
LABEL_569:
                          v8 = v310;
                          v5 = v311;
                          if (v344)
                          {
                            do
                            {
LABEL_256:
                              v156 = __ldaxr(v147);
                              v157 = v156 - 1;
                            }
                            while (__stlxr(v157, v147));
                            if (!v157)
                            {
                              atomic_store(1u, v147);
                              v193 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                              *(_QWORD *)v193 = off_1E31FE290;
                              *((_QWORD *)v193 + 1) = v147;
                              v353 = v193;
                              WTF::ensureOnMainThread();
                              v194 = v353;
                              v353 = 0;
                              if (v194)
                                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v194 + 8))(v194);
                            }
LABEL_258:
                            v158 = (WebCore *)v5[35];
                            ++*(_DWORD *)v158;
                            shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate((WebCore::Document *)v2, v139);
                            WebCore::FrameLoader::changeLocation(v158, (uint64_t)&v315, (_DWORD **)&v312, v6, &v313, shouldOpenExternalURLsPolicyToPropagate, v141, (_DWORD **)&v314, (const WebCore::Document *)v335);
                            if (*(_DWORD *)v158)
                            {
                              --*(_DWORD *)v158;
                              v160 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                              v161 = *(_QWORD *)(v160 + 528);
                              if (!v161
                                || !*(_QWORD *)(v161 + 8)
                                || (*(_QWORD *)(*(_QWORD *)(v160 + 680) + 680) & 0x100000) == 0)
                              {
                                goto LABEL_279;
                              }
                              v162 = *(_QWORD *)(v7 + 104);
                              if (v162)
                              {
                                v163 = *(_DWORD *)(v162 + 4);
                                if ((v163 & 1) != 0)
                                {
                                  v164 = *(_QWORD *)(v162 + 40);
                                  LODWORD(v165) = *(_DWORD *)(v162 + 52);
                                  if ((_DWORD)v165)
                                  {
LABEL_265:
                                    v165 = v165;
                                    v166 = (WTF::StringImpl **)(v164 + 8);
                                    while (1)
                                    {
                                      v167 = (uint64_t)*(v166 - 1);
                                      if (v167 == WebCore::HTMLNames::pingAttr
                                        || *(_QWORD *)(v167 + 24) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 24)
                                        && *(_QWORD *)(v167 + 32) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 32))
                                      {
                                        break;
                                      }
                                      v166 += 2;
                                      if (!--v165)
                                      {
                                        v166 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                                        break;
                                      }
                                    }
LABEL_277:
                                    v168 = *v166;
                                    if (v168 && *((_DWORD *)v168 + 1))
                                    {
                                      v261 = v8;
                                      *(_DWORD *)v168 += 2;
                                      v353 = v168;
                                      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v353, a2, &v325);
                                      v262 = v353;
                                      v353 = 0;
                                      if (v262)
                                      {
                                        if (*(_DWORD *)v262 == 2)
                                          WTF::StringImpl::destroy(v262, a2);
                                        else
                                          *(_DWORD *)v262 -= 2;
                                      }
                                      v263 = v325;
                                      if (v325)
                                      {
                                        v264 = *((unsigned int *)v325 + 3);
                                        if ((_DWORD)v264)
                                        {
                                          v265 = (_QWORD *)((char *)v325 + 16);
                                          v266 = 8 * v264;
                                          do
                                          {
                                            v267 = *(WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8);
                                            v268 = *((_QWORD *)v267 + 66);
                                            if (v268)
                                              v269 = *(WebCore::PingLoader **)(v268 + 8);
                                            else
                                              v269 = 0;
                                            WebCore::Document::completeURL(v267, v265, (uint64_t)v267 + 848, 0, (WTF::URL *)&v353);
                                            WebCore::PingLoader::sendPing(v269, (WebCore::LocalFrame *)&v353, &v315, v270);
                                            v271 = v353;
                                            v353 = 0;
                                            if (v271)
                                            {
                                              if (*(_DWORD *)v271 == 2)
                                                WTF::StringImpl::destroy(v271, a2);
                                              else
                                                *(_DWORD *)v271 -= 2;
                                            }
                                            ++v265;
                                            v266 -= 8;
                                          }
                                          while (v266);
                                          v263 = v325;
                                          v325 = 0;
                                          v8 = v261;
                                          if (!v263)
                                            goto LABEL_279;
                                        }
                                        else
                                        {
                                          v325 = 0;
                                        }
                                        if (*((_DWORD *)v263 + 2) == 1)
                                          WebCore::SpaceSplitStringData::destroy(v263, a2);
                                        else
                                          --*((_DWORD *)v263 + 2);
                                        v8 = v261;
                                      }
                                    }
LABEL_279:
                                    if ((v316 & 2) == 0
                                      || (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 680) & 0x40000000000000) == 0)
                                    {
                                      goto LABEL_295;
                                    }
                                    if (*(_QWORD **)(v5[16] + 8) != v5
                                      || ((v169 = v312, !v312)
                                        ? (v170 = 0, v171 = 1)
                                        : (v170 = (const char *)*((_QWORD *)v312 + 1),
                                           v169 = *((_DWORD *)v312 + 1),
                                           v171 = ((unint64_t)*((unsigned int *)v312 + 4) >> 2) & 1),
                                          !WebCore::isSelfTargetFrameName(v170, v169 | (v171 << 32))))
                                    {
                                      v172 = v312;
                                      if (v312)
                                      {
                                        v173 = (unsigned __int8 *)*((_QWORD *)v312 + 1);
                                        v172 = *((_DWORD *)v312 + 1);
                                        v174 = ((unint64_t)*((unsigned int *)v312 + 4) >> 2) & 1;
                                      }
                                      else
                                      {
                                        v173 = 0;
                                        v174 = 1;
                                      }
                                      if (!WebCore::isBlankTargetFrameName(v173, v172 | (v174 << 32)))
                                      {
LABEL_295:
                                        if (v344)
                                          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v335, a2);
                                        v180 = v312;
                                        v312 = 0;
                                        if (v180)
                                        {
                                          if (*(_DWORD *)v180 == 2)
                                            WTF::StringImpl::destroy(v180, a2);
                                          else
                                            *(_DWORD *)v180 -= 2;
                                        }
                                        goto LABEL_300;
                                      }
                                    }
                                    v175 = v5[3];
                                    v7 = v175
                                      && (v176 = *(_QWORD *)(v175 + 8)) != 0
                                      && *(unsigned __int8 *)(v176 + 1682) != 0;
                                    v6 = (WebCore::Event *)WebCore::s_platformStrategies;
                                    v177 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
                                    if (v177)
                                    {
LABEL_293:
                                      v178 = v5[35];
                                      v353 = 0;
                                      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v177 + 112))(v177, v178, &v315, v7, 1, &v353);
                                      v179 = v353;
                                      v353 = 0;
                                      if (v179)
                                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v179 + 8))(v179);
                                      goto LABEL_295;
                                    }
LABEL_386:
                                    v177 = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v6 + 16))(v6);
                                    *((_QWORD *)v6 + 1) = v177;
                                    goto LABEL_293;
                                  }
                                }
                                else
                                {
                                  v164 = v162 + 32;
                                  LODWORD(v165) = v163 >> 5;
                                  if ((_DWORD)v165)
                                    goto LABEL_265;
                                }
                              }
                              v166 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                              goto LABEL_277;
                            }
LABEL_679:
                            __break(0xC471u);
                            JUMPOUT(0x195BAB018);
                          }
LABEL_391:
                          v212 = *(_QWORD *)(v7 + 104);
                          if (v212)
                          {
                            v213 = *(_DWORD *)(v212 + 4);
                            v214 = v213 >> 5;
                            if ((v213 & 1) != 0)
                            {
                              v215 = *(uint64_t **)(v212 + 40);
                              LODWORD(v216) = *(_DWORD *)(v212 + 52);
                            }
                            else
                            {
                              v215 = (uint64_t *)(v212 + 32);
                              LODWORD(v216) = v213 >> 5;
                            }
                            if ((_DWORD)v216)
                            {
                              v216 = v216;
                              while (1)
                              {
                                v217 = *v215;
                                if (*v215 == WebCore::HTMLNames::attributionsourceidAttr
                                  || *(_QWORD *)(v217 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributionsourceidAttr
                                                                         + 24)
                                  && *(_QWORD *)(v217 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributionsourceidAttr
                                                                         + 32))
                                {
                                  break;
                                }
                                v215 += 2;
                                if (!--v216)
                                  goto LABEL_403;
                              }
                              v218 = 1;
                            }
                            else
                            {
LABEL_403:
                              v218 = 0;
                            }
                            if ((v213 & 1) != 0)
                            {
                              v219 = *(uint64_t **)(v212 + 40);
                              LODWORD(v220) = *(_DWORD *)(v212 + 52);
                            }
                            else
                            {
                              v219 = (uint64_t *)(v212 + 32);
                              LODWORD(v220) = v213 >> 5;
                            }
                            if ((_DWORD)v220)
                            {
                              v220 = v220;
                              while (1)
                              {
                                v221 = *v219;
                                if (*v219 == WebCore::HTMLNames::attributiondestinationAttr
                                  || *(_QWORD *)(v221 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr
                                                                         + 24)
                                  && *(_QWORD *)(v221 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr
                                                                         + 32))
                                {
                                  break;
                                }
                                v219 += 2;
                                if (!--v220)
                                  goto LABEL_415;
                              }
                              v222 = 0;
LABEL_417:
                              if ((v213 & 1) != 0)
                              {
                                v223 = *(_QWORD *)(v212 + 40);
                                LODWORD(v224) = *(_DWORD *)(v212 + 52);
                              }
                              else
                              {
                                v223 = v212 + 32;
                                LODWORD(v224) = v213 >> 5;
                              }
                              if ((_DWORD)v224)
                              {
                                v224 = v224;
                                v225 = (uint64_t *)(v223 + 8);
                                while (1)
                                {
                                  v226 = *(v225 - 1);
                                  if (v226 == WebCore::HTMLNames::attributionsourceidAttr
                                    || *(_QWORD *)(v226 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributionsourceidAttr
                                                                           + 24)
                                    && *(_QWORD *)(v226 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributionsourceidAttr
                                                                           + 32))
                                  {
                                    break;
                                  }
                                  v225 += 2;
                                  if (!--v224)
                                  {
                                    v225 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                                    break;
                                  }
                                }
                              }
                              else
                              {
                                v225 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                              }
                              v227 = *v225;
                              if (*v225)
                                *(_DWORD *)v227 += 2;
                              if ((v213 & 1) != 0)
                              {
                                v228 = *(_QWORD *)(v212 + 40);
                                v214 = *(_DWORD *)(v212 + 52);
                              }
                              else
                              {
                                v228 = v212 + 32;
                              }
                              if (v214)
                              {
                                v229 = v214;
                                v230 = (unsigned int **)(v228 + 8);
                                while (1)
                                {
                                  v231 = (uint64_t)*(v230 - 1);
                                  if (v231 == WebCore::HTMLNames::attributiondestinationAttr
                                    || *(_QWORD *)(v231 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr
                                                                           + 24)
                                    && *(_QWORD *)(v231 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr
                                                                           + 32))
                                  {
                                    break;
                                  }
                                  v230 += 2;
                                  if (!--v229)
                                  {
                                    v230 = (unsigned int **)MEMORY[0x1E0CBF2F8];
                                    break;
                                  }
                                }
                              }
                              else
                              {
                                v230 = (unsigned int **)MEMORY[0x1E0CBF2F8];
                              }
                              v8 = *v230;
                              if (*v230)
                                *v8 += 2;
                              if (((v222 | v218 ^ 1) & 1) != 0
                                || !v227
                                || !v8
                                || (v272 = *(unsigned int *)(v227 + 4), !(_DWORD)v272)
                                || !v8[1])
                              {
                                v232 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v232 + 24) += 2;
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                WebCore::Document::addConsoleMessage((_QWORD *)v232, 16, 1, &v353, 0);
                                v233 = v353;
                                v353 = 0;
                                if (v233)
                                {
                                  if (*(_DWORD *)v233 == 2)
                                    WTF::StringImpl::destroy(v233, v139);
                                  else
                                    *(_DWORD *)v233 -= 2;
                                }
                                if (*(_DWORD *)(v232 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v232 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v232, v139);
                                }
                                else
                                {
                                  *(_DWORD *)(v232 + 24) -= 2;
                                }
                                LOBYTE(v335[0]) = 0;
                                v344 = 0;
                                if (!v8)
                                  goto LABEL_457;
                                goto LABEL_455;
                              }
                              WebCore::parseHTMLInteger(*(uint64_t **)(v227 + 8), v272 | ((unint64_t)((*(_DWORD *)(v227 + 16) >> 2) & 1) << 32), (uint64_t *)&v353);
                              if (HIDWORD(v353) == 1)
                                goto LABEL_594;
                              if (HIDWORD(v353))
                              {
                                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_540:
                                *((_QWORD *)v155 + 266) = 0;
                                *((_BYTE *)v154 + 1392) = 1;
LABEL_255:
                                LOBYTE(v335[0]) = 0;
                                v344 = 0;
                                goto LABEL_256;
                              }
                              v275 = (char)v353;
                              if ((v353 & 0x80000000) != 0)
                              {
LABEL_594:
                                v276 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v276 + 24) += 2;
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                WebCore::Document::addConsoleMessage((_QWORD *)v276, 16, 1, &v353, 0);
                                v277 = v353;
                                v353 = 0;
                                if (!v277)
                                {
LABEL_597:
                                  if (*(_DWORD *)(v276 + 24) == 2)
                                  {
                                    if ((*(_WORD *)(v276 + 30) & 0x400) == 0)
                                      WebCore::Node::removedLastRef((WebCore::Node *)v276, v139);
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v276 + 24) -= 2;
                                  }
                                  LOBYTE(v335[0]) = 0;
                                  v344 = 0;
LABEL_455:
                                  if (*v8 == 2)
                                    WTF::StringImpl::destroy((WTF::StringImpl *)v8, v139);
                                  else
                                    *v8 -= 2;
LABEL_457:
                                  v8 = v310;
                                  v5 = v311;
                                  if (!v227)
                                    goto LABEL_256;
                                  if (*(_DWORD *)v227 == 2)
                                    WTF::StringImpl::destroy((WTF::StringImpl *)v227, v139);
                                  else
                                    *(_DWORD *)v227 -= 2;
                                  goto LABEL_460;
                                }
LABEL_595:
                                if (*(_DWORD *)v277 == 2)
                                  WTF::StringImpl::destroy(v277, v139);
                                else
                                  *(_DWORD *)v277 -= 2;
                                goto LABEL_597;
                              }
                              if (v353 >= 0x100)
                              {
                                v276 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v276 + 24) += 2;
                                v353 = (WTF::StringImpl *)"attributionsourceid must have a non-negative value less than or equal to ";
                                LODWORD(v354) = 73;
                                LOBYTE(v321) = -1;
                                v325 = (WTF::StringImpl *)" for Private Click Measurement.";
                                v326 = 31;
                                WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v353, (unsigned __int8 *)&v321, (uint64_t)&v325, &v331);
                                if (!v331)
                                  goto LABEL_679;
                                WebCore::Document::addConsoleMessage((_QWORD *)v276, 16, 1, &v331, 0);
                                v277 = v331;
                                v331 = 0;
                                if (!v277)
                                  goto LABEL_597;
                                goto LABEL_595;
                              }
                              *v8 += 2;
                              v353 = (WTF::StringImpl *)v8;
                              MEMORY[0x19AEA52D4](&v325, &v353, 0);
                              v278 = v353;
                              v353 = 0;
                              if (v278)
                              {
                                if (*(_DWORD *)v278 == 2)
                                  WTF::StringImpl::destroy(v278, v139);
                                else
                                  *(_DWORD *)v278 -= 2;
                              }
                              if ((~v326 & 3) != 0)
                              {
                                v289 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v289 + 24) += 2;
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                WebCore::Document::addConsoleMessage((_QWORD *)v289, 16, 1, &v353, 0);
                                v290 = v353;
                                v353 = 0;
                                if (v290)
                                {
                                  if (*(_DWORD *)v290 == 2)
                                    WTF::StringImpl::destroy(v290, v139);
                                  else
                                    *(_DWORD *)v290 -= 2;
                                }
                                if (*(_DWORD *)(v289 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v289 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v289, v139);
                                }
                                else
                                {
                                  *(_DWORD *)(v289 + 24) -= 2;
                                }
                                LOBYTE(v335[0]) = 0;
                                v344 = 0;
                                goto LABEL_632;
                              }
                              v324 = 0;
                              v279 = *(_QWORD *)(*(_QWORD *)(v309 + 128) + 8);
                              if (!v279 || *(_BYTE *)(v279 + 144))
                                goto LABEL_628;
                              v280 = *(_QWORD *)(v279 + 296);
                              if (!v280)
                              {
                                v288 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v288 + 24) += 2;
                                goto LABEL_623;
                              }
                              WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v353, (const WTF::URL *)(v280 + 736));
                              v282 = v353;
                              v353 = 0;
                              v283 = v324;
                              v324 = v282;
                              if (v283)
                              {
                                v284 = *(_DWORD *)v283 - 2;
                                if (*(_DWORD *)v283 != 2)
                                {
LABEL_610:
                                  *(_DWORD *)v283 = v284;
                                  goto LABEL_611;
                                }
                                WTF::StringImpl::destroy(v283, v281);
                                v283 = v353;
                                v353 = 0;
                                if (v283)
                                {
                                  v284 = *(_DWORD *)v283 - 2;
                                  if (*(_DWORD *)v283 != 2)
                                    goto LABEL_610;
                                  WTF::StringImpl::destroy(v283, v308);
                                }
                              }
LABEL_611:
                              v285 = WTF::URL::host((WTF::URL *)&v325);
                              if (WebCore::RegistrableDomain::matches(&v324, v285, v286))
                              {
                                v288 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                                *(_DWORD *)(v288 + 24) += 2;
LABEL_623:
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                WebCore::Document::addConsoleMessage((_QWORD *)v288, 16, 1, &v353, 0);
                                v291 = v353;
                                v353 = 0;
                                if (v291)
                                {
                                  if (*(_DWORD *)v291 == 2)
                                    WTF::StringImpl::destroy(v291, v139);
                                  else
                                    *(_DWORD *)v291 -= 2;
                                }
                                if (*(_DWORD *)(v288 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v288 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v288, v139);
                                }
                                else
                                {
                                  *(_DWORD *)(v288 + 24) -= 2;
                                }
LABEL_628:
                                LOBYTE(v335[0]) = 0;
                                v344 = 0;
LABEL_629:
                                v292 = v324;
                                v324 = 0;
                                if (v292)
                                {
                                  if (*(_DWORD *)v292 == 2)
                                    WTF::StringImpl::destroy(v292, v139);
                                  else
                                    *(_DWORD *)v292 -= 2;
                                }
LABEL_632:
                                v293 = v325;
                                v325 = 0;
                                if (v293)
                                {
                                  if (*(_DWORD *)v293 == 2)
                                    WTF::StringImpl::destroy(v293, v139);
                                  else
                                    *(_DWORD *)v293 -= 2;
                                }
                                goto LABEL_455;
                              }
                              WebCore::applicationBundleIdentifier(v287, &v323);
                              v294 = v324;
                              v324 = 0;
                              v295 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v331, (const WTF::URL *)&v325);
                              WTF::WallTime::now(v295);
                              v298 = *(_QWORD *)(v153 + 1008);
                              v299 = v298 < 0 && v298 != -1;
                              LOBYTE(v353) = v275;
                              if (v294)
                                *(_DWORD *)v294 += 2;
                              v354 = v294;
                              v300 = v331;
                              if (v331)
                                *(_DWORD *)v331 += 2;
                              v355 = v300;
                              v356 = v297;
                              v357 = v299;
                              LOBYTE(v358) = 0;
                              v359 = 0;
                              v360 = 0;
                              v361 = 0;
                              v362 = 0;
                              v363 = 0;
                              v364 = 0;
                              v365 = 0;
                              LOBYTE(v366) = 0;
                              v367 = 0;
                              v371 = 0;
                              v368 = 0u;
                              v369 = 0u;
                              v370 = 0;
                              v301 = v323;
                              if (v323)
                                *(_DWORD *)v323 += 2;
                              v372 = v301;
                              v331 = 0;
                              if (v300)
                              {
                                if (*(_DWORD *)v300 == 2)
                                {
                                  WTF::StringImpl::destroy(v300, v296);
                                  if (v294)
                                  {
LABEL_647:
                                    if (*(_DWORD *)v294 == 2)
                                      WTF::StringImpl::destroy(v294, v296);
                                    else
                                      *(_DWORD *)v294 -= 2;
                                  }
LABEL_649:
                                  WebCore::HTMLAnchorElement::attributionSourceNonceForPCM(&v321, (_QWORD *)v7);
                                  if (v322)
                                  {
                                    v302 = v321;
                                    WTF::base64Decode();
                                    if (!v334)
                                      goto LABEL_659;
                                    v304 = v333;
                                    v305 = v331;
                                    if (v331)
                                    {
                                      v331 = 0;
                                      v332 = 0;
                                      WTF::fastFree(v305, v303);
                                    }
                                    if (v304 == 16)
                                    {
                                      v366 = v302;
                                      v367 = 1;
                                    }
                                    else
                                    {
LABEL_659:
                                      if (v302)
                                      {
                                        if (*(_DWORD *)v302 == 2)
                                          WTF::StringImpl::destroy(v302, (WTF::StringImpl *)v303);
                                        else
                                          *(_DWORD *)v302 -= 2;
                                      }
                                    }
                                  }
                                  std::__optional_destruct_base<WebCore::PrivateClickMeasurement,false>::__optional_destruct_base[abi:sn180100]<WebCore::PrivateClickMeasurement>((uint64_t)v335, (uint64_t)&v353);
                                  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v353, v306);
                                  v307 = v323;
                                  v323 = 0;
                                  if (v307)
                                  {
                                    if (*(_DWORD *)v307 == 2)
                                      WTF::StringImpl::destroy(v307, v139);
                                    else
                                      *(_DWORD *)v307 -= 2;
                                  }
                                  goto LABEL_629;
                                }
                                *(_DWORD *)v300 -= 2;
                              }
                              if (v294)
                                goto LABEL_647;
                              goto LABEL_649;
                            }
LABEL_415:
                            if ((v218 & 1) != 0)
                            {
                              v222 = 1;
                              goto LABEL_417;
                            }
                          }
                          LOBYTE(v335[0]) = 0;
                          v344 = 0;
LABEL_460:
                          v8 = v310;
                          v5 = v311;
                          goto LABEL_256;
                        }
LABEL_562:
                        if (!v8)
                          goto LABEL_565;
                        goto LABEL_563;
                      }
LABEL_385:
                      __break(1u);
                      goto LABEL_386;
                    }
                    if (v244)
                    {
                      *(_DWORD *)v243 = v244;
                    }
                    else
                    {
                      WTF::StringImpl::destroy(v243, v139);
                      v238 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
                    }
                  }
                }
              }
            }
          }
          *(_DWORD *)(v238 + 24) += 2;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WebCore::Document::addConsoleMessage((_QWORD *)v238, 16, 1, v335, 0);
          v273 = v335[0];
          v335[0] = 0;
          if (v273)
          {
            if (*(_DWORD *)v273 == 2)
              WTF::StringImpl::destroy(v273, v139);
            else
              *(_DWORD *)v273 -= 2;
          }
          if (*(_DWORD *)(v238 + 24) == 2)
          {
            if ((*(_WORD *)(v238 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v238, v139);
          }
          else
          {
            *(_DWORD *)(v238 + 24) -= 2;
          }
          LOBYTE(v335[0]) = 0;
          v344 = 0;
          goto LABEL_565;
        }
        v258 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        *(_DWORD *)(v258 + 24) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage((_QWORD *)v258, 16, 1, &v353, 0);
        v259 = v353;
        v353 = 0;
        if (v259)
        {
          if (*(_DWORD *)v259 == 2)
            WTF::StringImpl::destroy(v259, v139);
          else
            *(_DWORD *)v259 -= 2;
        }
        if (*(_DWORD *)(v258 + 24) == 2)
        {
          if ((*(_WORD *)(v258 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v258, v139);
        }
        else
        {
          *(_DWORD *)(v258 + 24) -= 2;
        }
        LOBYTE(v325) = 0;
        v330 = 0;
        v260 = v335[0];
        v335[0] = 0;
        if (v260)
        {
          if (*(_DWORD *)v260 == 2)
          {
            WTF::StringImpl::destroy(v260, v139);
            if (v330)
              goto LABEL_478;
          }
          else
          {
            *(_DWORD *)v260 -= 2;
          }
        }
        LOBYTE(v335[0]) = 0;
        v344 = 0;
        goto LABEL_569;
      }
      atomic_store(1u, v89);
      v195 = (WTF::StringImpl *)*((_QWORD *)v89 + 6);
      *((_QWORD *)v89 + 6) = 0;
      if (v195)
      {
        if (*(_DWORD *)v195 == 2)
          WTF::StringImpl::destroy(v195, v92);
        else
          *(_DWORD *)v195 -= 2;
      }
      v196 = (WTF::StringImpl *)*((_QWORD *)v89 + 5);
      *((_QWORD *)v89 + 5) = 0;
      if (v196)
      {
        if (*(_DWORD *)v196 == 2)
          WTF::StringImpl::destroy(v196, v92);
        else
          *(_DWORD *)v196 -= 2;
      }
      v197 = v89[8];
      if ((_DWORD)v197 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v197])(v335, v89 + 2);
      v89[8] = -1;
      WTF::fastFree((WTF *)v89, v92);
      if ((v93 & 1) == 0)
        goto LABEL_357;
    }
LABEL_162:
    v96 = *(_QWORD *)(v7 + 104);
    if (v96)
    {
      v97 = *(_DWORD *)(v96 + 4);
      if ((v97 & 1) != 0)
      {
        v98 = *(_QWORD *)(v96 + 40);
        LODWORD(v99) = *(_DWORD *)(v96 + 52);
        if ((_DWORD)v99)
        {
LABEL_165:
          v99 = v99;
          v100 = (WebCore::ResourceResponseBase *)(v98 + 8);
          while (1)
          {
            v101 = *((_QWORD *)v100 - 1);
            if (v101 == WebCore::HTMLNames::downloadAttr
              || *(_QWORD *)(v101 + 24) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 24)
              && *(_QWORD *)(v101 + 32) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 32))
            {
              goto LABEL_174;
            }
            v100 = (WebCore::ResourceResponseBase *)((char *)v100 + 16);
            if (!--v99)
            {
              v100 = (WebCore::ResourceResponseBase *)MEMORY[0x1E0CBF2F8];
              goto LABEL_174;
            }
          }
        }
      }
      else
      {
        v98 = v96 + 32;
        LODWORD(v99) = v97 >> 5;
        if ((_DWORD)v99)
          goto LABEL_165;
      }
    }
    v100 = (WebCore::ResourceResponseBase *)MEMORY[0x1E0CBF2F8];
LABEL_174:
    WebCore::ResourceResponseBase::sanitizeSuggestedFilename(v100, v345);
    v103 = v345[0];
    v345[0] = 0;
    if (v103)
    {
      v353 = v103;
      if ((*((_BYTE *)v103 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v104 = v353;
        v103 = v335[0];
        v335[0] = 0;
        v353 = 0;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, v102);
          else
            *(_DWORD *)v104 -= 2;
        }
      }
    }
    v105 = v314;
    v314 = v103;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v102);
      else
        *(_DWORD *)v105 -= 2;
    }
    v106 = v345[0];
    v345[0] = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v102);
      else
        *(_DWORD *)v106 -= 2;
    }
    goto LABEL_183;
  }
  ++*(_DWORD *)v84;
  v85 = (*(uint64_t (**)(_QWORD, uint64_t, WebCore::Event *))(**(_QWORD **)(*(_QWORD *)(v84 + 48) + 16)
                                                                     + 760))(*(_QWORD *)(*(_QWORD *)(v84 + 48) + 16), v7, v6);
  v86 = *(_DWORD *)v84 - 1;
  if ((v85 & 1) == 0)
  {
    if (*(_DWORD *)v84 == 1)
    {
      WebCore::Page::~Page(v84);
      WTF::fastFree(v188, v189);
    }
    else
    {
      *(_DWORD *)v84 = v86;
    }
    goto LABEL_152;
  }
  if (*(_DWORD *)v84 == 1)
  {
    WebCore::Page::~Page(v84);
    WTF::fastFree(v186, v187);
  }
  else
  {
    *(_DWORD *)v84 = v86;
  }
LABEL_303:
  v182 = v315;
  v315 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, a2);
    else
      *(_DWORD *)v182 -= 2;
  }
  v183 = v318;
  v318 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, a2);
    else
      *(_DWORD *)v183 -= 2;
  }
  this = (unsigned int *)v317;
  v317 = 0;
  if (this)
  {
    if (*this == 2)
      this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *this -= 2;
  }
  do
  {
LABEL_312:
    v184 = __ldaxr(v8);
    v185 = v184 - 1;
  }
  while (__stlxr(v185, v8));
  if (!v185)
  {
    atomic_store(1u, v8);
    v192 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v192 = off_1E31FE290;
    *((_QWORD *)v192 + 1) = v8;
    v335[0] = v192;
    WTF::ensureOnMainThread();
    this = (unsigned int *)v335[0];
    v335[0] = 0;
    if (this)
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24) - 2;
LABEL_316:
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
  }
  return this;
}

void WebCore::HTMLAnchorElement::setActive(WebCore::Node *a1, void *a2, int a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;

  if (!(_DWORD)a2
    || !WebCore::Node::computeEditability((uint64_t)a1, 0, 1)
    || ((v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8), v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 680) + 369), v7 != 2)
      ? (v8 = v7 == 4)
      : (v8 = 1),
        !v8
     && (v7 != 3
      || (v9 = *(_QWORD *)(v6 + 528)) == 0
      || (v10 = *(_QWORD *)(v9 + 8)) == 0
      || (v11 = (WebCore::Node *)WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 120, 0), v11 != WebCore::Node::rootEditableElement(a1)))))
  {
    WebCore::Element::setActive((uint64_t)a1, a2, a3);
  }
}

uint64_t WebCore::HTMLAnchorElement::canStartSelection(WebCore::HTMLAnchorElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if ((*((_WORD *)this + 15) & 1) != 0)
    return WebCore::Node::computeEditability((uint64_t)this, 0, 1) != 0;
  if (!WebCore::Node::hasEditableStyle((uint64_t)this, 0))
  {
    v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v2)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0xC00000) == 0x800000)
      {
        v3 = *(_QWORD *)(v2 + 104);
        if ((*(_BYTE *)(v3 + 239) & 1) != 0 || (*(_DWORD *)(v3 + 228) & 0x18000) == 0)
          return 0;
      }
    }
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 25);
      if (v6)
      {
        v4 = *(_QWORD *)(v6 + 8);
        if (v4)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
    }
  }
  return 1;
}

BOOL WebCore::HTMLAnchorElement::draggable(WebCore::HTMLAnchorElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if (v2 >> 5)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::draggableAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::draggableAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (!*v5)
    goto LABEL_14;
  v13 = *(_DWORD *)(v7 + 4);
  if (v13 == 4)
  {
    v17 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v17 & 0xDF) != 0x54
        || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x55)
      {
        goto LABEL_14;
      }
      v18 = *(unsigned __int8 *)(v17 + 3);
    }
    else
    {
      if ((*(_WORD *)v17 & 0xFFDF) != 0x54
        || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_14;
      }
      v18 = *(unsigned __int16 *)(v17 + 6);
    }
    v16 = (v18 & 0xFFFFFFDF) == 69;
    result = v16;
    if (!v1)
      return result;
LABEL_44:
    if (v16)
      return result;
    goto LABEL_15;
  }
  if (v13 == 5)
  {
    v14 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v14 & 0xDF) == 0x46
        && (*(_BYTE *)(v14 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x4C
        && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x53)
      {
        result = 0;
        if (!v1)
          return result;
        v15 = *(unsigned __int8 *)(v14 + 4);
LABEL_37:
        v16 = (v15 & 0xFFFFFFDF) == 69;
        goto LABEL_44;
      }
    }
    else if ((*(_WORD *)v14 & 0xFFDF) == 0x46
           && (*(_WORD *)(v14 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v14 + 4) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v14 + 6) & 0xFFDF) == 0x53)
    {
      result = 0;
      if (!v1)
        return result;
      v15 = *(unsigned __int16 *)(v14 + 8);
      goto LABEL_37;
    }
  }
LABEL_14:
  if (!v1)
    return 0;
LABEL_15:
  v8 = *(_DWORD *)(v1 + 4);
  if ((v8 & 1) == 0)
  {
    v9 = (uint64_t *)(v1 + 32);
    LODWORD(v10) = v8 >> 5;
    if (!(_DWORD)v10)
      return 0;
    goto LABEL_19;
  }
  v9 = *(uint64_t **)(v1 + 40);
  LODWORD(v10) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v10)
    return 0;
LABEL_19:
  v10 = v10;
  while (1)
  {
    v11 = *v9;
    if (*v9 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v10)
      return 0;
  }
  return 1;
}

WTF::StringImpl *WebCore::HTMLAnchorElement::href@<X0>(WebCore::HTMLAnchorElement *this@<X0>, WTF::URL *a2@<X8>)
{
  WebCore::Document *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v4 = *((_QWORD *)this + 13);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
      : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
        (_DWORD)v7))
  {
    v7 = v7;
    v8 = (_QWORD *)(v6 + 8);
    while (1)
    {
      v9 = *(v8 - 1);
      if (v9 == WebCore::HTMLNames::hrefAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
      {
        break;
      }
      v8 += 2;
      if (!--v7)
      {
        v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
      }
    }
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return WebCore::Document::completeURL(v3, v8, (uint64_t)v3 + 848, 0, a2);
}

uint64_t WebCore::HTMLAnchorElement::relList(WebCore::HTMLAnchorElement *this)
{
  uint64_t v1;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v1 = *((_QWORD *)this + 16);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x38);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33B3A70;
    *(_QWORD *)v1 = this;
    *(_QWORD *)(v1 + 8) = &WebCore::HTMLNames::relAttr;
    *(_WORD *)(v1 + 16) = 256;
    *(_QWORD *)(v1 + 24) = v1 + 40;
    *(_QWORD *)(v1 + 32) = 1;
    *(_QWORD *)(v1 + 48) = v3;
    v5 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v1;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *((_QWORD *)this + 16);
    }
  }
  return v1;
}

uint64_t WebCore::HTMLAnchorElement::defaultTabIndex(WebCore::HTMLAnchorElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLAnchorElement::target@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

WTF::StringImpl *WebCore::HTMLAnchorElement::origin@<X0>(WebCore::HTMLAnchorElement *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  char *v19;

  WebCore::HTMLAnchorElement::href(this, (WTF::URL *)&v16);
  if ((v17 & 1) != 0)
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v16, &v15);
    v5 = v15;
    v6 = *(unsigned int *)(v15 + 32);
    if ((_DWORD)v6 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      if ((_DWORD)v6 == -1)
      {
        v14 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WebCore::HTMLAnchorElement::setProtocol(v14);
      }
      v19 = &v18;
      v7 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v19, v15 + 8);
      if (MEMORY[0x19AEA53F4](*v7, "file", 4) && *(_BYTE *)(v5 + 59))
        WTF::String::String(a2, (uint64_t)"null", 5);
      else
        WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v5 + 8), a2);
    }
    v15 = 0;
    do
    {
      v8 = __ldaxr((unsigned int *)v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v5));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v5);
      v11 = *(WTF::StringImpl **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v3);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(WTF::StringImpl **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v3);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(unsigned int *)(v5 + 32);
      if ((_DWORD)v13 != -1)
        ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v13])(&v19, v5 + 8);
      *(_DWORD *)(v5 + 32) = -1;
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  else
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a2 = v4;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLAnchorElement::setProtocol(WebCore::HTMLAnchorElement *a1)
{
  WTF::StringImpl *v2;
  char v3;
  WTF::StringImpl *result;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;

  WebCore::HTMLAnchorElement::href(a1, (WTF::URL *)&v8);
  v3 = v9;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      if ((v3 & 1) == 0)
        return result;
      goto LABEL_5;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v3 & 1) == 0)
    return result;
LABEL_5:
  v6 = *((_QWORD *)a1 + 14);
  v5 = (_QWORD *)((char *)a1 + 112);
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(v6 + 16))(&v8, v5);
  WTF::URL::setProtocol();
  (*(void (**)(_QWORD *, WTF::StringImpl **))(*v5 + 24))(v5, &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLAnchorElement::text@<X0>(WebCore::HTMLAnchorElement *this@<X0>, WTF::StringBuilder *a2@<X4>, WTF::StringImpl **a3@<X8>, __n128 a4@<Q0>)
{
  return WebCore::Node::textContent(this, 0, a2, a3, a4);
}

uint64_t WebCore::HTMLAnchorElement::isLiveLink(WebCore::HTMLAnchorElement *this)
{
  uint64_t v1;
  int v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  WebCore::HTMLAnchorElement *v7;
  WebCore::HTMLAnchorElement *v8;
  uint64_t i;

  if ((*((_WORD *)this + 15) & 1) == 0)
    return 0;
  v3 = *((unsigned __int8 *)this + 121);
  v1 = 1;
  if (WebCore::Node::computeEditability((uint64_t)this, 0, 1))
  {
    switch(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 369))
    {
      case 0:
      case 1:
        return v1;
      case 2:
        v5 = v3 == 0;
        goto LABEL_23;
      case 3:
        if (v3)
          return v1;
        v6 = WebCore::HTMLAnchorElement::rootEditableElementForSelectionOnMouseDown(this, v4);
        v7 = 0;
        v8 = this;
        do
        {
          if (!WebCore::Node::hasEditableStyle((uint64_t)v8, 0))
            break;
          if ((*((_WORD *)v8 + 14) & 8) != 0)
            v7 = v8;
          i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if ((WebCore::HTMLAnchorElement *)i == v8)
            break;
          v8 = (WebCore::HTMLAnchorElement *)*((_QWORD *)v8 + 4);
        }
        while (v8);
        v5 = v6 == (_QWORD)v7;
LABEL_23:
        v1 = !v5;
        break;
      default:
        return 0;
    }
  }
  return v1;
}

BOOL WebCore::HTMLAnchorElement::isSystemPreviewLink(WebCore::HTMLAnchorElement *this)
{
  uint64_t v1;
  _BOOL8 result;
  WebCore::Element **v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (((*(unsigned int *)(v1 + 720) | (unint64_t)((uint64_t)*(char *)(v1 + 724) << 32)) & 0x8000000000000000) == 0)
    return 0;
  {
    WTF::AtomStringImpl::add();
    WebCore::HTMLAnchorElement::isSystemPreviewLink(void)::systemPreviewRelValue = v13;
  }
  v4 = (WebCore::Element **)WebCore::HTMLAnchorElement::relList(this);
  result = WebCore::DOMTokenList::contains(v4, (const WTF::AtomString *)&WebCore::HTMLAnchorElement::isSystemPreviewLink(void)::systemPreviewRelValue, v5, v6, v7);
  if ((_DWORD)result)
  {
    v8 = *((_QWORD *)this + 10);
    if (!v8)
      return 0;
    v9 = *((_QWORD *)this + 10);
    result = 0;
    while (1)
    {
      v10 = *(_WORD *)(v9 + 28);
      if ((v10 & 8) != 0)
        break;
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        return result;
    }
    if ((v10 & 0x10) == 0)
      return 0;
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
    if (v11 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) && v11 != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
      return 0;
    while ((*(_WORD *)(v8 + 28) & 8) == 0)
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
      {
        v12 = -1;
        return v12 < 2;
      }
    }
    v12 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
        break;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        ++v12;
    }
    return v12 < 2;
  }
  return result;
}

_BYTE *WebCore::HTMLAnchorElement::attributionSourceNonceForPCM(_BYTE *this, _QWORD *a2)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int **v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  char v17;

  v3 = this;
  v4 = a2[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (int **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (int **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::HTMLNames::attributionsourcenonceAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (int **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (!*v8)
  {
    *this = 0;
    this[8] = 0;
    return this;
  }
  v11 = *v10;
  v12 = v10[1];
  *v10 += 2;
  if (v12)
  {
    *v10 = v11 + 4;
    WTF::base64Decode();
    if (!v17)
      goto LABEL_20;
    this = v14;
    if (v14)
    {
      v14 = 0;
      v15 = 0;
      this = (_BYTE *)WTF::fastFree((WTF *)this, a2);
    }
    if (v16 == 16)
    {
      *(_QWORD *)v3 = v10;
      v3[8] = 1;
    }
    else
    {
LABEL_20:
      v13 = *(_QWORD *)(a2[5] + 8);
      *(_DWORD *)(v13 + 24) += 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage((_QWORD *)v13, 16, 1, &v14, 0);
      this = v14;
      v14 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)this -= 2;
      }
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      *v3 = 0;
      v3[8] = 0;
      if (*v10 == 2)
        this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)a2);
      else
        *v10 -= 2;
    }
    v11 = *v10 - 2;
    if (*v10 != 2)
      goto LABEL_28;
    return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)a2);
  }
  *this = 0;
  this[8] = 0;
  if (!v11)
    return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)a2);
LABEL_28:
  *v10 = v11;
  return this;
}

