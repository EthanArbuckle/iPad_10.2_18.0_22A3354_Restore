void WebCore::FormState::~FormState(WebCore::FormState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E33F39E8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v8 = (WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v11 = v8;
          v13 = v7;
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          v8 = v11;
          v7 = v13;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      v10 = *(v8 - 1);
      *(v8 - 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          v12 = v8;
          v14 = v7;
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          v8 = v12;
          v7 = v14;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::FrameDestructionObserver::~FrameDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::FormState::~FormState(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::FormState::willDetachPage(uint64_t this)
{
  if (!*(_DWORD *)(this + 24))
  {
    this = 58;
    __break(0xC471u);
  }
  return this;
}

const char *WebCore::FormSubmission::Attributes::methodString(WebCore::FormSubmission::Attributes *this, Method a2)
{
  const char *v2;

  v2 = "get";
  if ((_DWORD)this == 1)
    v2 = "post";
  if ((_DWORD)this == 2)
    return "dialog";
  else
    return v2;
}

WTF::StringImpl *WebCore::FormSubmission::Attributes::parseAction(WebCore::FormSubmission::Attributes *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::String::trim();
  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v3);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::FormSubmission::Attributes::parseEncodingType@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = *this;
  if (!*this || *(_DWORD *)(v3 + 4) != 10)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v4 & 0xDF) != 0x54
      || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x45
      || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x58
      || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x54
      || (*(_BYTE *)(v4 + 4) & 0xDF) != 0xF
      || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x50
      || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x4C
      || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x41
      || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x49)
    {
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    v5 = *(unsigned __int8 *)(v4 + 9);
  }
  else
  {
    if ((*(_WORD *)v4 & 0xFFDF) != 0x54
      || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x58
      || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x54
      || (*(_WORD *)(v4 + 8) & 0xFFDF) != 0xF
      || (*(_WORD *)(v4 + 10) & 0xFFDF) != 0x50
      || (*(_WORD *)(v4 + 12) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v4 + 14) & 0xFFDF) != 0x41
      || (*(_WORD *)(v4 + 16) & 0xFFDF) != 0x49)
    {
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    v5 = *(unsigned __int16 *)(v4 + 18);
  }
  if ((v5 & 0xFFFFFFDF) != 0x4E)
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::textPlainContentTypeAtomData;
  if (WebCore::textPlainContentTypeAtomData)
    *(_DWORD *)WebCore::textPlainContentTypeAtomData += 2;
  *a2 = v6;
  return this;
}

uint64_t WebCore::FormSubmission::Attributes::updateEncodingType(WebCore::FormSubmission::Attributes *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WebCore::FormSubmission::Attributes::parseEncodingType((uint64_t *)a2, (uint64_t *)&v9);
  v4 = v9;
  v9 = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      v5 = v9;
      v9 = 0;
      if (!v5)
        goto LABEL_4;
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v8);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v5 = v6;
  }
LABEL_4:
  result = MEMORY[0x19AEA53F4](*((_QWORD *)this + 3), "multipart/form-data", 19);
  *((_BYTE *)this + 1) = result;
  return result;
}

uint64_t WebCore::FormSubmission::Attributes::parseMethodType(WebCore::FormSubmission::Attributes *this, const WTF::String *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_DWORD *)(v2 + 4);
  if (v4 != 6)
  {
    if (v4 == 4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) != 0x50 || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x53)
          return 0;
        v6 = *(unsigned __int8 *)(v5 + 3);
      }
      else
      {
        if ((*(_WORD *)v5 & 0xFFDF) != 0x50
          || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x53)
        {
          return 0;
        }
        v6 = *(unsigned __int16 *)(v5 + 6);
      }
      if ((v6 & 0xFFFFFFDF) == 0x54)
        return 1;
    }
    return 0;
  }
  v7 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x44
      || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x49
      || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x4C
      || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x4F)
    {
      return 0;
    }
    v8 = *(unsigned __int8 *)(v7 + 5);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x44
      || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x49
      || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x4F)
    {
      return 0;
    }
    v8 = *(unsigned __int16 *)(v7 + 10);
  }
  if ((v8 & 0xFFFFFFDF) != 0x47)
    return 0;
  return 2;
}

uint64_t WebCore::FormSubmission::Attributes::updateMethodType(WebCore::FormSubmission::Attributes *this, const WTF::String *a2)
{
  uint64_t result;

  result = WebCore::FormSubmission::Attributes::parseMethodType(a2, a2);
  *(_BYTE *)this = result;
  return result;
}

WTF::StringImpl *WebCore::FormSubmission::create@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, __int16 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v64;
  _BOOL4 v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  char v70;
  double v71;
  double v72;
  float v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  char v79;
  char *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  const char *v88;
  __int16 v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  uint64_t v93;
  __int128 v94;
  void *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  _DWORD *v98;
  const WebCore::DOMFormData *v99;
  uint64_t v100;
  uint64_t appended;
  WTF::StringImpl *v102;
  uint64_t v103;
  int v104;
  int v105;
  WTF::StringImpl *v106;
  WTF *v107;
  WebCore::HTMLMetaCharsetParser *v108;
  WTF *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int v117;
  const char *v118;
  __n128 v119;
  WTF::StringImpl **v120;
  char *v121;
  unint64_t v122;
  void *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  BOOL v134;
  int v135;
  char v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  _BYTE *v143;
  _BYTE *v144;
  _BYTE *v145;
  unsigned __int128 *v146;
  const char *v147;
  size_t v148;
  WTF::StringImpl *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WebCore::LocalFrame *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  double v161;
  double v162;
  float v163;
  WTF::StringImpl *v164;
  __int128 v165;
  WTF::StringImpl *v166;
  _DWORD *v167;
  WTF *v168;
  _DWORD *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *result;
  uint64_t v175;
  int v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  unsigned int v180;
  unint64_t v181;
  WTF::StringImpl *v182;
  bmalloc::api *v183;
  void *v184;
  uint64_t v185;
  WTF::StringImpl **v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  double v189;
  unsigned __int128 *v190;
  unsigned __int128 *v191;
  unsigned __int128 v192;
  char v193;
  __int16 v194;
  unint64_t v195;
  __int16 v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  char v201;
  char v202;
  char v203;
  uint64_t *v204;
  int v205;
  int v206;
  char v207;
  unsigned int *v208;
  char v209;
  _DWORD *v210;
  _DWORD *v211;
  WTF::StringImpl *v212;
  __int128 v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  __int128 v216;
  __int128 v217;
  __int16 v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl **v223;
  uint64_t v224;
  BOOL v225;
  WTF::StringImpl *v226;
  unint64_t v227;
  __int16 v228;
  char v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  char *v232;
  uint64_t v233;

  v11 = a2;
  v218 = *a3;
  v14 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  if (v14)
    *(_DWORD *)v14 += 2;
  v219 = v14;
  v15 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
  if (v15)
    *(_DWORD *)v15 += 2;
  v220 = v15;
  v16 = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
  if (v16)
    *(_DWORD *)v16 += 2;
  v221 = v16;
  v17 = (WTF::StringImpl *)*((_QWORD *)a3 + 4);
  if (v17)
    *(_DWORD *)v17 += 2;
  v222 = v17;
  if (a2)
    goto LABEL_10;
  if (!a4)
    goto LABEL_100;
  v11 = *(WTF::StringImpl **)(a4 + 48);
  if (!v11)
  {
LABEL_22:
    v24 = 0;
LABEL_101:
    v209 = 1;
    goto LABEL_102;
  }
  if ((*((_QWORD *)v11 + 2) & 0x2000000000000) == 0)
    goto LABEL_100;
  if ((*((_WORD *)v11 + 14) & 8) == 0)
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)v11 + 4);
    if (!v11)
      goto LABEL_22;
    if ((*((_WORD *)v11 + 14) & 8) == 0)
      goto LABEL_100;
  }
  if (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 848))(v11) & 1) != 0)
    goto LABEL_10;
  v11 = (WTF::StringImpl *)*((_QWORD *)v11 + 4);
  if (!v11)
    goto LABEL_22;
  if ((*((_WORD *)v11 + 14) & 8) == 0)
  {
LABEL_100:
    v24 = 0;
    v11 = 0;
    goto LABEL_101;
  }
  while (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 848))(v11) & 1) == 0)
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)v11 + 4);
    if (!v11)
      goto LABEL_22;
    if ((*((_WORD *)v11 + 14) & 8) == 0)
    {
      v209 = 1;
      v24 = 0;
      v11 = 0;
      goto LABEL_102;
    }
  }
LABEL_10:
  *((_DWORD *)v11 + 6) += 2;
  v212 = 0;
  v18 = *((_QWORD *)v11 + 13);
  if (!v18)
    goto LABEL_24;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) == 0)
  {
    v20 = v18 + 32;
    LODWORD(v21) = v19 >> 5;
    if (v19 >> 5)
      goto LABEL_13;
LABEL_24:
    v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_25;
  }
  v20 = *(_QWORD *)(v18 + 40);
  LODWORD(v21) = *(_DWORD *)(v18 + 52);
  if (!(_DWORD)v21)
    goto LABEL_24;
LABEL_13:
  v21 = v21;
  v22 = (WTF::StringImpl **)(v20 + 8);
  while (1)
  {
    v23 = (uint64_t)*(v22 - 1);
    if (v23 == WebCore::HTMLNames::formactionAttr
      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 24)
      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::formactionAttr + 32))
    {
      break;
    }
    v22 += 2;
    if (!--v21)
    {
      v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_25:
  v25 = *v22;
  if (v25)
  {
    *(_DWORD *)v25 += 2;
    v212 = v25;
    WTF::String::trim();
    v26 = v215;
    v215 = 0;
    v27 = v219;
    v219 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, a2);
        v215 = 0;
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    v18 = *((_QWORD *)v11 + 13);
  }
  if (!v18)
    goto LABEL_41;
  v28 = *(_DWORD *)(v18 + 4);
  if ((v28 & 1) == 0)
  {
    v29 = v18 + 32;
    v30 = v28 >> 5;
    if (v28 >> 5)
      goto LABEL_33;
LABEL_41:
    v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  v29 = *(_QWORD *)(v18 + 40);
  v30 = *(_DWORD *)(v18 + 52);
  if (!v30)
    goto LABEL_41;
LABEL_33:
  v31 = v30;
  v32 = (WTF::StringImpl **)(v29 + 8);
  while (1)
  {
    v33 = (uint64_t)*(v32 - 1);
    if (v33 == WebCore::HTMLNames::formenctypeAttr
      || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 24)
      && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::formenctypeAttr + 32))
    {
      break;
    }
    v32 += 2;
    if (!--v31)
    {
      v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_42:
  v34 = *v32;
  if (v34)
    *(_DWORD *)v34 += 2;
  v35 = v212;
  v212 = v34;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, a2);
    else
      *(_DWORD *)v35 -= 2;
    v34 = v212;
  }
  if (v34)
  {
    WebCore::FormSubmission::Attributes::parseEncodingType((uint64_t *)&v212, (uint64_t *)&v215);
    v37 = v215;
    v215 = 0;
    v38 = v221;
    v221 = v37;
    if (v38)
    {
      v39 = *(_DWORD *)v38 - 2;
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v36);
        v38 = v215;
        v215 = 0;
        if (!v38)
          goto LABEL_52;
        v39 = *(_DWORD *)v38 - 2;
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::destroy(v38, v106);
          goto LABEL_52;
        }
      }
      *(_DWORD *)v38 = v39;
    }
LABEL_52:
    HIBYTE(v218) = MEMORY[0x19AEA53F4](v221, "multipart/form-data", 19);
  }
  v40 = *((_QWORD *)v11 + 13);
  if (!v40)
    goto LABEL_64;
  v41 = *(_DWORD *)(v40 + 4);
  if ((v41 & 1) == 0)
  {
    v42 = v40 + 32;
    LODWORD(v43) = v41 >> 5;
    if ((_DWORD)v43)
      goto LABEL_56;
LABEL_64:
    v44 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_65;
  }
  v42 = *(_QWORD *)(v40 + 40);
  LODWORD(v43) = *(_DWORD *)(v40 + 52);
  if (!(_DWORD)v43)
    goto LABEL_64;
LABEL_56:
  v43 = v43;
  v44 = (WTF::StringImpl **)(v42 + 8);
  while (1)
  {
    v45 = (uint64_t)*(v44 - 1);
    if (v45 == WebCore::HTMLNames::formmethodAttr
      || *(_QWORD *)(v45 + 24) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 24)
      && *(_QWORD *)(v45 + 32) == *(_QWORD *)(WebCore::HTMLNames::formmethodAttr + 32))
    {
      break;
    }
    v44 += 2;
    if (!--v43)
    {
      v44 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_65:
  v46 = *v44;
  if (*v44)
    *(_DWORD *)v46 += 2;
  v47 = v212;
  v212 = v46;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
    v46 = v212;
  }
  if (v46)
    LOBYTE(v218) = WebCore::FormSubmission::Attributes::parseMethodType((WebCore::FormSubmission::Attributes *)&v212, a2);
  v48 = *((_QWORD *)v11 + 13);
  if (v48)
  {
    v49 = *(_DWORD *)(v48 + 4);
    if ((v49 & 1) != 0)
    {
      v50 = *(_QWORD *)(v48 + 40);
      LODWORD(v51) = *(_DWORD *)(v48 + 52);
      if ((_DWORD)v51)
      {
LABEL_76:
        v51 = v51;
        v52 = (WTF::StringImpl **)(v50 + 8);
        while (1)
        {
          v53 = (uint64_t)*(v52 - 1);
          if (v53 == WebCore::HTMLNames::formtargetAttr
            || *(_QWORD *)(v53 + 24) == *(_QWORD *)(WebCore::HTMLNames::formtargetAttr + 24)
            && *(_QWORD *)(v53 + 32) == *(_QWORD *)(WebCore::HTMLNames::formtargetAttr + 32))
          {
            goto LABEL_85;
          }
          v52 += 2;
          if (!--v51)
          {
            v52 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_85;
          }
        }
      }
    }
    else
    {
      v50 = v48 + 32;
      LODWORD(v51) = v49 >> 5;
      if ((_DWORD)v51)
        goto LABEL_76;
    }
  }
  v52 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_85:
  v54 = *v52;
  if (v54)
    *(_DWORD *)v54 += 2;
  v212 = v54;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
    v54 = v212;
  }
  if (v54)
  {
    *(_DWORD *)v54 += 2;
    v55 = v220;
    v220 = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, a2);
      else
        *(_DWORD *)v55 -= 2;
    }
  }
  v56 = v212;
  v212 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v209 = 0;
  v24 = 1;
  v16 = v221;
LABEL_102:
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v57 + 24) += 2;
  if (v16)
    *(_DWORD *)v16 += 2;
  if (v219 && *((_DWORD *)v219 + 1))
    v58 = &v219;
  else
    v58 = (WTF::StringImpl **)(v57 + 736);
  WebCore::Document::completeURL((WebCore::Document *)v57, v58, v57 + 848, 0, (WTF::URL *)&v215);
  if (v218 == 2)
  {
    if (v24)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)v11 + 1296))(&v212, v11);
    }
    else
    {
      v68 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v68 += 2;
      v212 = v68;
    }
    v69 = WTF::fastMalloc((WTF *)0x98);
    v70 = v218;
    WebCore::HTMLFormElement::effectiveTarget(a1, (const WebCore::Event *)a4, v11, &v226, v71, v72, v73);
    *(_DWORD *)v69 = 1;
    *(_QWORD *)(v69 + 8) = 0;
    *(_BYTE *)(v69 + 16) = v70;
    *(_BYTE *)(v69 + 17) = 0;
    v75 = v215;
    if (v215)
      *(_DWORD *)v215 += 2;
    *(_QWORD *)(v69 + 24) = v75;
    v76 = v217;
    *(_OWORD *)(v69 + 32) = v216;
    *(_OWORD *)(v69 + 48) = v76;
    v77 = v226;
    if (v226)
      *(_DWORD *)v226 += 2;
    *(_QWORD *)(v69 + 64) = v77;
    if (v16)
      *(_DWORD *)v16 += 2;
    *(_QWORD *)(v69 + 72) = v16;
    *(_QWORD *)(v69 + 80) = 0;
    *(_QWORD *)(v69 + 88) = 0;
    *(_QWORD *)(v69 + 96) = 0;
    *(_BYTE *)(v69 + 104) = a5;
    if (a4)
      ++*(_DWORD *)(a4 + 16);
    *(_QWORD *)(v69 + 120) = 0;
    *(_QWORD *)(v69 + 128) = 0;
    *(_QWORD *)(v69 + 112) = a4;
    v78 = v212;
    if (v212)
      *(_DWORD *)v212 += 2;
    *(_QWORD *)(v69 + 136) = v78;
    *(_WORD *)(v69 + 144) = 1;
    *a7 = v69;
    v226 = 0;
    if (v77)
    {
      v79 = v209;
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::destroy(v77, v74);
        v78 = v212;
      }
      else
      {
        *(_DWORD *)v77 -= 2;
      }
    }
    else
    {
      v79 = v209;
    }
    v212 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v74);
      else
        *(_DWORD *)v78 -= 2;
    }
    goto LABEL_390;
  }
  v203 = a5;
  v204 = a7;
  v206 = WTF::URL::protocolIs();
  v59 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v57 + 192));
  if (v59)
  {
    v60 = v59;
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 + 1, v59));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v59, (WebCore::SecurityOriginData *)&v215, 1u, 0);
    if (!atomic_load(v60))
    {
      __break(0xC471u);
      goto LABEL_535;
    }
    do
      v64 = __ldaxr(v60);
    while (__stlxr(v64 - 1, v60));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::SecurityOriginData *)&v215, 1u, 0);
  }
  v208 = (unsigned int *)a1;
  if (v218 == 1)
  {
    v65 = HIBYTE(v218) != 0;
    v66 = v206;
    if (!HIBYTE(v218))
      v66 = 0;
    if (v66 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v67 = v212;
      if (v16)
      {
        if (*(_DWORD *)v16 != 2)
        {
          v65 = 0;
          *(_DWORD *)v16 -= 2;
LABEL_121:
          v16 = v67;
          goto LABEL_144;
        }
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v62);
      }
      v65 = 0;
      goto LABEL_121;
    }
  }
  else
  {
    v65 = 0;
  }
LABEL_144:
  v205 = a6;
  if (!v206)
  {
    if (v222)
    {
      WTF::StringImpl::replace();
      v80 = (char *)v212;
      if (v212)
      {
        v201 = 0;
        v81 = (WTF::StringImpl *)*((_QWORD *)v212 + 1);
        v82 = *((unsigned int *)v212 + 1);
        v83 = (unint64_t)((*((_DWORD *)v212 + 4) >> 2) & 1) << 32;
LABEL_150:
        v226 = v81;
        v227 = v83 | v82;
        v228 = 32;
        v229 = 0;
        v223 = &v226;
        LODWORD(v224) = 0;
        v225 = v82 == 0;
        WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v223);
        v84 = v227;
        while (1)
        {
          if ((_DWORD)v224 == v84 && v225)
          {
            v90 = *(_QWORD *)(v57 + 1744);
            if (v90)
            {
              v91 = (*(_DWORD *)v90)++;
              v212 = (WTF::StringImpl *)&off_1E31F4A18;
              v92 = *(_WORD *)(v90 + 32);
              v213 = *(_OWORD *)(v90 + 16);
              LOWORD(v214) = v92;
              if (v91)
              {
                *(_DWORD *)v90 = v91;
              }
              else
              {
                v107 = *(WTF **)(v90 + 72);
                if (v107)
                {
                  *(_QWORD *)(v90 + 72) = 0;
                  *(_DWORD *)(v90 + 80) = 0;
                  WTF::fastFree(v107, (void *)v62);
                }
                v108 = *(WebCore::HTMLMetaCharsetParser **)(v90 + 48);
                *(_QWORD *)(v90 + 48) = 0;
                if (v108)
                {
                  WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v108, (WTF::StringImpl *)v62);
                  WTF::fastFree(v109, v110);
                }
                v111 = *(_QWORD *)(v90 + 40);
                *(_QWORD *)(v90 + 40) = 0;
                if (v111)
                  (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
                WTF::fastFree((WTF *)v90, (void *)v62);
              }
              goto LABEL_177;
            }
            goto LABEL_271;
          }
          v85 = *((unsigned int *)v223 + 2);
          if (v85 <= v224)
          {
            v62 = 0x100000000;
            v88 = "";
            goto LABEL_162;
          }
          v86 = HIDWORD(v224);
          if ((v85 - v224) <= HIDWORD(v224))
          {
            if (!(_DWORD)v224)
            {
              v88 = (const char *)*v223;
              v62 = (uint64_t)v223[1];
              goto LABEL_162;
            }
            v86 = v85 - v224;
          }
          v62 = v86;
          v87 = v85 - v224;
          if (*((_BYTE *)v223 + 12))
          {
            if (v87 < v86)
              goto LABEL_270;
            v88 = (char *)*v223 + v224;
            v62 = v86 | 0x100000000;
          }
          else
          {
            if (v87 < v86)
              goto LABEL_270;
            v88 = (char *)*v223 + 2 * v224;
          }
LABEL_162:
          v212 = (WTF::StringImpl *)&off_1E31F4A18;
          *(_QWORD *)&v213 = PAL::atomCanonicalTextEncodingName((unint64_t)v88, (const char *)v62);
          *((_QWORD *)&v213 + 1) = v62;
          v232 = (char *)v213;
          v233 = v62;
          if (v62 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
          {
            if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v232))
            {
              v89 = 165;
            }
            else
            {
              v89 = 92;
            }
            v62 = *((_QWORD *)&v213 + 1);
          }
          else
          {
            v89 = 92;
          }
          LOWORD(v214) = v89;
          if (v62)
            goto LABEL_177;
          WTF::StringView::SplitResult::Iterator::operator++();
        }
      }
    }
    else
    {
      v80 = 0;
    }
    v81 = 0;
    v82 = 0;
    v83 = 0x100000000;
    v201 = 1;
    goto LABEL_150;
  }
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v62;
    v212 = (WTF::StringImpl *)xmmword_1ECE86C80;
    *(_QWORD *)&v213 = v62;
    if (v62 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v212))
      {
        v194 = 165;
      }
      else
      {
        v194 = 92;
      }
    }
    else
    {
      v194 = 92;
    }
    word_1ECE86C90 = v194;
  }
  v212 = (WTF::StringImpl *)&off_1E31F4A18;
  v213 = xmmword_1ECE86C80;
  LOWORD(v214) = word_1ECE86C90;
  while (1)
  {
    v80 = (char *)PAL::TextEncoding::encodingForFormSubmissionOrURLParsing((PAL::TextEncoding *)&v212, (const char *)v62);
    v93 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v93 + 16) = 1;
    *(_QWORD *)v93 = &off_1E33A18C0;
    *(_QWORD *)(v93 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v93, (WebCore::ScriptExecutionContext *)(v57 + 192));
    *(_QWORD *)v93 = &off_1E33B0880;
    *(_QWORD *)(v93 + 24) = &off_1E31F4A18;
    v94 = *(_OWORD *)(v80 + 8);
    *(_WORD *)(v93 + 48) = *((_WORD *)v80 + 12);
    *(_OWORD *)(v93 + 32) = v94;
    *(_QWORD *)(v93 + 56) = 0;
    *(_QWORD *)(v93 + 64) = 0;
    v211 = (_DWORD *)v93;
    v232 = 0;
    v233 = 0;
    if ((v209 & 1) == 0)
      *((_DWORD *)v11 + 6) += 2;
    v226 = v11;
    WebCore::HTMLFormElement::constructEntryList(v208, &v226, &v211, (uint64_t)&v232, (uint64_t *)&v210);
    v96 = v226;
    v226 = 0;
    if (v96)
    {
      if (*((_DWORD *)v96 + 6) == 2)
      {
        if ((*((_WORD *)v96 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v96, v95);
      }
      else
      {
        *((_DWORD *)v96 + 6) -= 2;
      }
    }
    v97 = (uint64_t)v210;
    if (v210)
      break;
    v62 = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/loader/FormSubmission.cpp";
    __break(0xC471u);
LABEL_270:
    __break(1u);
LABEL_271:
    v214 = 0;
    v212 = (WTF::StringImpl *)&off_1E31F4A18;
    v213 = 0uLL;
LABEL_177:
    if ((v201 & 1) == 0)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v80, (WTF::StringImpl *)v62);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  v98 = v211;
  v210 = 0;
  v211 = (_DWORD *)v97;
  if (v98)
  {
    if (v98[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 16))(v98);
    else
      --v98[4];
  }
  v99 = (const WebCore::DOMFormData *)v211;
  if (v65)
  {
    v100 = bmalloc::api::isoAllocate();
    *(_DWORD *)v100 = 1;
    *(_BYTE *)(v100 + 64) = 0;
    *(_QWORD *)(v100 + 16) = 0;
    *(_QWORD *)(v100 + 24) = 0;
    *(_QWORD *)(v100 + 8) = 0;
    *(_BYTE *)(v100 + 32) = 0;
    *(_QWORD *)(v100 + 40) = 0;
    *(_QWORD *)(v100 + 48) = 0;
    *(_BYTE *)(v100 + 56) = 0;
    WebCore::FormData::appendMultiPartKeyValuePairItems((WebCore::FormData *)v100, v99);
    appended = WTF::String::String();
    v102 = v226;
    v103 = (uint64_t)v208;
    goto LABEL_359;
  }
  v104 = 0;
  if (!*(_BYTE *)a3)
    goto LABEL_303;
  v103 = (uint64_t)v208;
  if (v16)
  {
    v105 = *((_DWORD *)v16 + 1);
    if (v105 == 10)
    {
      v112 = *((_QWORD *)v16 + 1);
      if ((*((_BYTE *)v16 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v112 & 0xDF) != 0x54
          || (*(_BYTE *)(v112 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v112 + 2) & 0xDF) != 0x58
          || (*(_BYTE *)(v112 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v112 + 4) & 0xDF) != 0xF
          || (*(_BYTE *)(v112 + 5) & 0xDF) != 0x50
          || (*(_BYTE *)(v112 + 6) & 0xDF) != 0x4C
          || (*(_BYTE *)(v112 + 7) & 0xDF) != 0x41
          || (*(_BYTE *)(v112 + 8) & 0xDF) != 0x49)
        {
          goto LABEL_195;
        }
        v113 = *(unsigned __int8 *)(v112 + 9);
      }
      else
      {
        if ((*(_WORD *)v112 & 0xFFDF) != 0x54
          || (*(_WORD *)(v112 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v112 + 4) & 0xFFDF) != 0x58
          || (*(_WORD *)(v112 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v112 + 8) & 0xFFDF) != 0xF
          || (*(_WORD *)(v112 + 10) & 0xFFDF) != 0x50
          || (*(_WORD *)(v112 + 12) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v112 + 14) & 0xFFDF) != 0x41
          || (*(_WORD *)(v112 + 16) & 0xFFDF) != 0x49)
        {
          goto LABEL_195;
        }
        v113 = *(unsigned __int16 *)(v112 + 18);
      }
      if ((v113 & 0xFFFFFFDF) == 0x4E)
      {
        v104 = 1;
        goto LABEL_304;
      }
      goto LABEL_195;
    }
    if (v105 != 19)
    {
LABEL_195:
      v104 = 0;
      goto LABEL_304;
    }
    v114 = *((_QWORD *)v16 + 1);
    if ((*((_BYTE *)v16 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v114 & 0xDF) != 0x4D
        || (*(_BYTE *)(v114 + 1) & 0xDF) != 0x55
        || (*(_BYTE *)(v114 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v114 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v114 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(v114 + 5) & 0xDF) != 0x50
        || (*(_BYTE *)(v114 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v114 + 7) & 0xDF) != 0x52
        || (*(_BYTE *)(v114 + 8) & 0xDF) != 0x54
        || (*(_BYTE *)(v114 + 9) & 0xDF) != 0xF
        || (*(_BYTE *)(v114 + 10) & 0xDF) != 0x46
        || (*(_BYTE *)(v114 + 11) & 0xDF) != 0x4F
        || (*(_BYTE *)(v114 + 12) & 0xDF) != 0x52
        || (*(_BYTE *)(v114 + 13) & 0xDF) != 0x4D
        || (*(_BYTE *)(v114 + 14) & 0xDF) != 0xD
        || (*(_BYTE *)(v114 + 15) & 0xDF) != 0x44
        || (*(_BYTE *)(v114 + 16) & 0xDF) != 0x41
        || (*(_BYTE *)(v114 + 17) & 0xDF) != 0x54
        || (*(_BYTE *)(v114 + 18) & 0xDF) != 0x41)
      {
        goto LABEL_195;
      }
      goto LABEL_265;
    }
    if ((*(_WORD *)v114 & 0xFFDF) == 0x4D
      && (*(_WORD *)(v114 + 2) & 0xFFDF) == 0x55
      && (*(_WORD *)(v114 + 4) & 0xFFDF) == 0x4C
      && (*(_WORD *)(v114 + 6) & 0xFFDF) == 0x54
      && (*(_WORD *)(v114 + 8) & 0xFFDF) == 0x49
      && (*(_WORD *)(v114 + 10) & 0xFFDF) == 0x50
      && (*(_WORD *)(v114 + 12) & 0xFFDF) == 0x41
      && (*(_WORD *)(v114 + 14) & 0xFFDF) == 0x52
      && (*(_WORD *)(v114 + 16) & 0xFFDF) == 0x54
      && (*(_WORD *)(v114 + 18) & 0xFFDF) == 0xF
      && (*(_WORD *)(v114 + 20) & 0xFFDF) == 0x46
      && (*(_WORD *)(v114 + 22) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v114 + 24) & 0xFFDF) == 0x52
      && (*(_WORD *)(v114 + 26) & 0xFFDF) == 0x4D
      && (*(_WORD *)(v114 + 28) & 0xFFDF) == 0xD
      && (*(_WORD *)(v114 + 30) & 0xFFDF) == 0x44
      && (*(_WORD *)(v114 + 32) & 0xFFDF) == 0x41
      && (*(_WORD *)(v114 + 34) & 0xFFDF) == 0x54)
    {
      v103 = (uint64_t)v208;
      if ((*(_WORD *)(v114 + 36) & 0xFFDF) != 0x41)
        goto LABEL_195;
LABEL_265:
      v104 = 2;
      goto LABEL_304;
    }
    v104 = 0;
LABEL_303:
    v103 = (uint64_t)v208;
  }
LABEL_304:
  v115 = bmalloc::api::isoAllocate();
  *(_DWORD *)v115 = 1;
  *(_BYTE *)(v115 + 64) = 0;
  *(_QWORD *)(v115 + 16) = 0;
  *(_QWORD *)(v115 + 24) = 0;
  *(_QWORD *)(v115 + 8) = 0;
  *(_BYTE *)(v115 + 32) = 0;
  *(_QWORD *)(v115 + 40) = 0;
  *(_QWORD *)(v115 + 48) = 0;
  *(_BYTE *)(v115 + 56) = 0;
  appended = (uint64_t)WebCore::FormData::appendNonMultiPartKeyValuePairItems(v115, (uint64_t)v99, v104);
  v117 = v206;
  if (v218 != 1)
    v117 = 0;
  if (v117 != 1)
  {
    v102 = 0;
    v100 = v115;
    goto LABEL_359;
  }
  WebCore::FormData::flattenToString((const char *)v115, v116, &v231);
  if (v16 && *((_DWORD *)v16 + 1) == 10)
  {
    v175 = *((_QWORD *)v16 + 1);
    if ((*((_BYTE *)v16 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v175 & 0xDF) != 0x54
        || (*(_BYTE *)(v175 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v175 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v175 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v175 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(v175 + 5) & 0xDF) != 0x50
        || (*(_BYTE *)(v175 + 6) & 0xDF) != 0x4C
        || (*(_BYTE *)(v175 + 7) & 0xDF) != 0x41
        || (*(_BYTE *)(v175 + 8) & 0xDF) != 0x49)
      {
        goto LABEL_308;
      }
      v176 = *(unsigned __int8 *)(v175 + 9);
    }
    else
    {
      if ((*(_WORD *)v175 & 0xFFDF) != 0x54
        || (*(_WORD *)(v175 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v175 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v175 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v175 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(v175 + 10) & 0xFFDF) != 0x50
        || (*(_WORD *)(v175 + 12) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v175 + 14) & 0xFFDF) != 0x41
        || (*(_WORD *)(v175 + 16) & 0xFFDF) != 0x49)
      {
        goto LABEL_308;
      }
      v176 = *(unsigned __int16 *)(v175 + 18);
    }
    if ((v176 & 0xFFFFFFDF) == 0x4E)
    {
      if (v231)
      {
        WTF::StringImpl::replace();
        v177 = v226;
        if (v226)
        {
          WTF::StringImpl::replace();
          v178 = v226;
          if (v226)
          {
            v202 = 0;
            v207 = 0;
            v179 = (WTF::StringImpl *)*((_QWORD *)v226 + 1);
            v180 = *((_DWORD *)v226 + 1);
            v181 = ((unint64_t)*((unsigned int *)v226 + 4) >> 2) & 1;
          }
          else
          {
            v207 = 0;
            v179 = 0;
            v180 = 0;
            v181 = 1;
            v202 = 1;
          }
LABEL_448:
          {
            if (v180)
            {
LABEL_450:
              PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v179, v180 | (v181 << 32), (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v226, v119);
              v103 = (uint64_t)v208;
LABEL_518:
              v197 = v226;
              v226 = 0;
              v198 = v231;
              v231 = v197;
              if (v198)
              {
                if (*(_DWORD *)v198 == 2)
                {
                  WTF::StringImpl::destroy(v198, v182);
                  v199 = v226;
                  v226 = 0;
                  if (v199)
                  {
                    if (*(_DWORD *)v199 == 2)
                      WTF::StringImpl::destroy(v199, v182);
                    else
                      *(_DWORD *)v199 -= 2;
                    v103 = (uint64_t)v208;
                  }
                }
                else
                {
                  *(_DWORD *)v198 -= 2;
                  v226 = 0;
                }
              }
              if ((v202 & 1) == 0)
              {
                if (*(_DWORD *)v178 == 2)
                  WTF::StringImpl::destroy(v178, v182);
                else
                  *(_DWORD *)v178 -= 2;
              }
              if ((v207 & 1) == 0)
              {
                if (*(_DWORD *)v177 == 2)
                  WTF::StringImpl::destroy(v177, v182);
                else
                  *(_DWORD *)v177 -= 2;
              }
              goto LABEL_308;
            }
          }
          else
          {
            v200 = v179;
            PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
            *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", v118);
            *((_QWORD *)&xmmword_1ECE86C80 + 1) = v195;
            v226 = (WTF::StringImpl *)xmmword_1ECE86C80;
            v227 = v195;
            if (v195 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
            {
              if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v226))
              {
                v196 = 165;
              }
              else
              {
                v196 = 92;
              }
            }
            else
            {
              v196 = 92;
            }
            word_1ECE86C90 = v196;
            v179 = v200;
            if (v180)
              goto LABEL_450;
          }
          v103 = (uint64_t)v208;
          if (v181)
            WTF::String::String();
          else
            WTF::String::String();
          goto LABEL_518;
        }
        v178 = 0;
        v179 = 0;
        v180 = 0;
        v207 = 1;
        v202 = 1;
      }
      else
      {
        v178 = 0;
        v177 = 0;
        v179 = 0;
        v180 = 0;
        v202 = 1;
        v207 = 1;
      }
      v181 = 1;
      goto LABEL_448;
    }
  }
LABEL_308:
  v120 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)5);
  v224 = 0x500000005;
  v223 = v120;
  *(_DWORD *)v120 = 2036625250;
  *((_BYTE *)v120 + 4) = 61;
  WTF::String::utf8();
  if (v226)
  {
    v121 = (char *)v226 + 16;
    v122 = *((_QWORD *)v226 + 1);
  }
  else
  {
    v122 = 0;
    v121 = 0;
  }
  WebCore::FormDataBuilder::appendFormURLEncoded((uint64_t)&v223, (uint64_t)v121, v122);
  v124 = v226;
  v226 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 1)
      WTF::fastFree(v124, v123);
    else
      --*(_DWORD *)v124;
  }
  WTF::String::String();
  if (v230)
  {
    WTF::StringImpl::replace();
    v126 = v226;
  }
  else
  {
    v126 = 0;
  }
  v127 = v231;
  v231 = v126;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, v125);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = v230;
  v230 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, v125);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = WTF::URL::query((WTF::URL *)&v215);
  v131 = v130;
  v132 = (uint64_t)v231;
  if (!(_DWORD)v130)
  {
    WTF::URL::setQuery();
    goto LABEL_352;
  }
  if (v231)
  {
    v133 = *((_DWORD *)v231 + 1);
    *(_DWORD *)v231 += 2;
    if (v133 < 0)
      goto LABEL_534;
  }
  else
  {
    v133 = 0;
  }
  v134 = __OFADD__(v133, 1);
  v135 = v133 + 1;
  v136 = v134;
  if ((v130 & 0x80000000) != 0)
    goto LABEL_534;
  if ((v136 & 1) != 0)
    goto LABEL_534;
  v137 = (v130 + v135);
  if (__OFADD__((_DWORD)v130, v135))
    goto LABEL_534;
  if ((v130 & 0xFF00000000) != 0 && v132)
  {
    if ((*(_BYTE *)(v132 + 16) & 4) == 0)
    {
LABEL_333:
      if (v137 <= 0x7FFFFFEF)
      {
        v138 = (WTF::StringImpl *)v129;
        WTF::tryFastCompactMalloc((WTF *)(2 * v137 + 20));
        v139 = v138;
        v140 = v226;
        if (v226)
        {
          *(_DWORD *)v226 = 2;
          *((_DWORD *)v140 + 1) = v137;
          *((_QWORD *)v140 + 1) = (char *)v140 + 20;
          *((_DWORD *)v140 + 4) = 0;
          v226 = v139;
          v227 = v131;
          WTF::StringView::getCharacters<char16_t>(&v226, (char *)v140 + 20);
          v141 = (uint64_t)v140 + 2 * v227 + 20;
          v103 = (uint64_t)v208;
          *(_WORD *)v141 = 38;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v141 + 2), v132);
          goto LABEL_348;
        }
      }
      goto LABEL_534;
    }
  }
  else if ((v130 & 0xFF00000000) == 0)
  {
    goto LABEL_333;
  }
  if ((v137 & 0x80000000) != 0
    || (v143 = (_BYTE *)v129, WTF::tryFastCompactMalloc((WTF *)(v137 + 20)), v144 = v143, (v140 = v226) == 0))
  {
LABEL_534:
    __break(0xC471u);
LABEL_535:
    JUMPOUT(0x195ED4BA0);
  }
  v145 = (char *)v226 + 20;
  *(_DWORD *)v226 = 2;
  *((_DWORD *)v140 + 1) = v137;
  *((_QWORD *)v140 + 1) = (char *)v140 + 20;
  *((_DWORD *)v140 + 4) = 4;
  if ((_DWORD)v131 == 1)
  {
    *v145 = *v144;
    v131 = 1;
  }
  else
  {
    v131 = v131;
    memcpy((char *)v140 + 20, v144, v131);
  }
  v145[v131] = 38;
  v146 = (unsigned __int128 *)&v145[v131 + 1];
  if (!v132)
  {
LABEL_497:
    v103 = (uint64_t)v208;
    goto LABEL_348;
  }
  v147 = *(const char **)(v132 + 8);
  v148 = *(unsigned int *)(v132 + 4);
  v103 = (uint64_t)v208;
  if ((*(_BYTE *)(v132 + 16) & 4) == 0)
  {
    v190 = (unsigned __int128 *)((char *)v146 + v148);
    if (v148 >= 0x10)
    {
      v191 = (unsigned __int128 *)((char *)v146 + (v148 & 0xFFFFFFF0));
      do
      {
        v192 = (unsigned __int128)vld2q_s8(v147);
        v147 += 32;
        *v146++ = v192;
      }
      while (v146 != v191);
      v146 = v191;
    }
    while (v146 != v190)
    {
      v193 = *v147;
      v147 += 2;
      *(_BYTE *)v146 = v193;
      v146 = (unsigned __int128 *)((char *)v146 + 1);
    }
    goto LABEL_497;
  }
  if ((_DWORD)v148)
  {
    if ((_DWORD)v148 == 1)
      *(_BYTE *)v146 = *v147;
    else
      memcpy(v146, v147, v148);
  }
LABEL_348:
  WTF::URL::setQuery();
  if (*(_DWORD *)v140 == 2)
  {
    WTF::StringImpl::destroy(v140, v142);
    if (v132)
    {
LABEL_350:
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v132, v142);
      else
        *(_DWORD *)v132 -= 2;
    }
  }
  else
  {
    *(_DWORD *)v140 -= 2;
    if (v132)
      goto LABEL_350;
  }
LABEL_352:
  if (v223)
    WTF::fastFree((WTF *)v223, v142);
  v149 = v231;
  v231 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, v142);
    else
      *(_DWORD *)v149 -= 2;
  }
  appended = bmalloc::api::isoAllocate();
  v100 = appended;
  *(_DWORD *)appended = 1;
  *(_BYTE *)(appended + 64) = 0;
  *(_QWORD *)(appended + 16) = 0;
  *(_QWORD *)(appended + 24) = 0;
  *(_QWORD *)(appended + 8) = 0;
  *(_BYTE *)(appended + 32) = 0;
  *(_QWORD *)(appended + 40) = 0;
  *(_QWORD *)(appended + 48) = 0;
  *(_BYTE *)(appended + 56) = 0;
  if (*(_DWORD *)v115 == 1)
  {
    WebCore::FormData::~FormData((WebCore::FormData *)v115, v150);
    appended = bmalloc::api::isoDeallocate(v183, v184);
    v102 = 0;
  }
  else
  {
    v102 = 0;
    --*(_DWORD *)v115;
  }
LABEL_359:
  if (byte_1ECE83799 == 1)
  {
    v151 = qword_1ECE837D8;
  }
  else
  {
    WTF::WallTime::now((WTF::WallTime *)appended);
    v151 = (uint64_t)(v189 * 1000.0 * 1000.0);
    byte_1ECE83799 = 1;
  }
  qword_1ECE837D8 = v151 + 1;
  *(_QWORD *)(v100 + 24) = v151 + 1;
  v152 = WTF::fastMalloc((WTF *)0x48);
  v153 = v152;
  *(_DWORD *)(v152 + 24) = 1;
  v154 = *(_QWORD *)(v57 + 528);
  if (v154)
    v155 = *(WebCore::LocalFrame **)(v154 + 8);
  else
    v155 = 0;
  *(_QWORD *)(v152 + 8) = 0;
  *(_QWORD *)(v152 + 16) = 0;
  *(_QWORD *)v152 = off_1E33FEB10;
  WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)v152, v155);
  *(_QWORD *)v153 = off_1E33F39E8;
  *(_DWORD *)(v103 + 24) += 2;
  v156 = v232;
  *(_QWORD *)(v153 + 32) = v103;
  *(_QWORD *)(v153 + 40) = v156;
  v157 = v233;
  v232 = 0;
  v233 = 0;
  *(_QWORD *)(v153 + 48) = v157;
  *(_DWORD *)(v57 + 24) += 2;
  *(_QWORD *)(v153 + 56) = v57;
  *(_DWORD *)(v153 + 64) = v205;
  v158 = *(_QWORD *)(v57 + 528);
  if (!v158 || !*(_QWORD *)(v158 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x195ED5648);
  }
  v159 = WTF::fastMalloc((WTF *)0x98);
  v160 = v218;
  WebCore::HTMLFormElement::effectiveTarget(v103, (const WebCore::Event *)a4, v11, &v226, v161, v162, v163);
  *(_DWORD *)v159 = 1;
  *(_QWORD *)(v159 + 8) = 0;
  *(_BYTE *)(v159 + 16) = v160;
  *(_BYTE *)(v159 + 17) = 0;
  v164 = v215;
  if (v215)
    *(_DWORD *)v215 += 2;
  *(_QWORD *)(v159 + 24) = v164;
  v165 = v217;
  *(_OWORD *)(v159 + 32) = v216;
  *(_OWORD *)(v159 + 48) = v165;
  v166 = v226;
  if (v226)
    *(_DWORD *)v226 += 2;
  *(_QWORD *)(v159 + 64) = v166;
  if (v16)
    *(_DWORD *)v16 += 2;
  *(_QWORD *)(v159 + 72) = v16;
  *(_QWORD *)(v159 + 80) = v153;
  *(_QWORD *)(v159 + 88) = v100;
  if (v102)
    *(_DWORD *)v102 += 2;
  *(_QWORD *)(v159 + 96) = v102;
  *(_BYTE *)(v159 + 104) = v203;
  if (a4)
    ++*(_DWORD *)(a4 + 16);
  *(_QWORD *)(v159 + 112) = a4;
  *(_QWORD *)(v159 + 120) = 0;
  *(_QWORD *)(v159 + 128) = 0;
  *(_QWORD *)(v159 + 136) = 0;
  *(_WORD *)(v159 + 144) = 1;
  *v204 = v159;
  v226 = 0;
  if (!v166)
  {
LABEL_378:
    if (v102)
      goto LABEL_379;
    goto LABEL_381;
  }
  if (*(_DWORD *)v166 != 2)
  {
    *(_DWORD *)v166 -= 2;
    goto LABEL_378;
  }
  WTF::StringImpl::destroy(v166, v74);
  if (v102)
  {
LABEL_379:
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, v74);
    else
      *(_DWORD *)v102 -= 2;
  }
LABEL_381:
  v167 = v210;
  v210 = 0;
  if (v167)
  {
    if (v167[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v167 + 16))(v167);
    else
      --v167[4];
  }
  if (HIDWORD(v233))
  {
    v185 = 16 * HIDWORD(v233);
    v186 = (WTF::StringImpl **)(v232 + 8);
    do
    {
      v187 = *v186;
      *v186 = 0;
      if (v187)
      {
        if (*(_DWORD *)v187 == 2)
          WTF::StringImpl::destroy(v187, v74);
        else
          *(_DWORD *)v187 -= 2;
      }
      v188 = *(v186 - 1);
      *(v186 - 1) = 0;
      if (v188)
      {
        if (*(_DWORD *)v188 == 2)
          WTF::StringImpl::destroy(v188, v74);
        else
          *(_DWORD *)v188 -= 2;
      }
      v186 += 2;
      v185 -= 16;
    }
    while (v185);
  }
  v168 = (WTF *)v232;
  if (v232)
  {
    v232 = 0;
    LODWORD(v233) = 0;
    WTF::fastFree(v168, v74);
  }
  v169 = v211;
  v211 = 0;
  v79 = v209;
  if (v169)
  {
    if (v169[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v169 + 16))(v169);
    else
      --v169[4];
  }
LABEL_390:
  v170 = v215;
  v215 = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::destroy(v170, v74);
      if (!v16)
        goto LABEL_396;
      goto LABEL_394;
    }
    *(_DWORD *)v170 -= 2;
  }
  if (!v16)
    goto LABEL_396;
LABEL_394:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v74);
  else
    *(_DWORD *)v16 -= 2;
LABEL_396:
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v74);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  if ((v79 & 1) == 0)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v74);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v171 = v222;
  v222 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v74);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = v221;
  v221 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, v74);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = v220;
  v220 = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v74);
    else
      *(_DWORD *)v173 -= 2;
  }
  result = v219;
  v219 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v74);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FormSubmission::requestURL@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = this;
  v4 = *(unsigned __int8 *)(this + 16);
  v5 = *(_DWORD **)(this + 24);
  if (v4 == 1)
  {
    if (v5)
      *v5 += 2;
    *(_QWORD *)a2 = v5;
    v6 = *(_OWORD *)(this + 48);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(this + 32);
    *(_OWORD *)(a2 + 24) = v6;
  }
  else
  {
    if (v5)
      *v5 += 2;
    *(_QWORD *)a2 = v5;
    v7 = *(_OWORD *)(this + 48);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(this + 32);
    *(_OWORD *)(a2 + 24) = v7;
    if (!v4)
    {
      this = WTF::URL::protocolIsJavaScript((WTF::URL *)a2);
      if ((this & 1) == 0)
      {
        WebCore::FormData::flattenToString(*(const char **)(v2 + 88), v8, &v10);
        WTF::URL::setQuery();
        this = (uint64_t)v10;
        v10 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FormSubmission::populateFrameLoadRequest(WebCore::FormSubmission *this, WebCore::FrameLoadRequest *a2)
{
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  bmalloc::api *v26;
  void *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;

  v4 = (_DWORD *)*((_QWORD *)this + 8);
  if (v4)
  {
    if (v4[1])
    {
      *v4 += 2;
      v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 27);
      *((_QWORD *)a2 + 27) = v4;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  v5 = *((_QWORD *)this + 15);
  if (v5 && *(_DWORD *)(v5 + 4))
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::FrameLoadRequest *)((char *)a2 + 16), (WTF::StringImpl **)this + 15);
  if (*((_BYTE *)this + 16) != 1)
    goto LABEL_18;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = v28;
  WebCore::ResourceRequestBase::setHTTPMethod((WTF **)a2 + 2, &v31);
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 11);
  if (v8)
    ++*v8;
  if ((*((_BYTE *)a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::FrameLoadRequest *)((char *)a2 + 16));
    *((_BYTE *)a2 + 200) |= 1u;
  }
  result = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData((WebCore::FormData *)result, v6);
      result = bmalloc::api::isoDeallocate(v26, v27);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v10 = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v10 & 0xF3 | 4;
  v11 = *((_QWORD *)this + 12);
  if (!v11 || (v18 = *(_DWORD *)(v11 + 4)) == 0)
  {
    if ((v10 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::FrameLoadRequest *)((char *)a2 + 16));
      *((_BYTE *)a2 + 200) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::FrameLoadRequest *)((char *)a2 + 112), (WTF::StringImpl *)0x1A, (WTF::StringImpl **)this + 9);
    *((_BYTE *)a2 + 200) &= ~2u;
    goto LABEL_18;
  }
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 4);
    *(_DWORD *)v19 += 2;
  }
  else
  {
    v20 = 0;
  }
  *(_DWORD *)v11 += 2;
  if (v18 < 0
    || (v21 = __OFADD__(v18, 11), v22 = v18 + 11, v21)
    || v20 < 0
    || (result = (v20 + v22), __OFADD__(v20, v22)))
  {
    v28 = 0;
LABEL_67:
    __break(0xC471u);
    return result;
  }
  if (v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
    v23 = 0;
  else
    v23 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v23, v19, (int8x16_t *)"; boundary=",
             0xBu,
             v11,
             &v28);
  if (!v28)
    goto LABEL_67;
  if ((*((_BYTE *)a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::FrameLoadRequest *)((char *)a2 + 16));
    *((_BYTE *)a2 + 200) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WebCore::FrameLoadRequest *)((char *)a2 + 112), (WTF::StringImpl *)0x1A, &v28);
  *((_BYTE *)a2 + 200) &= ~2u;
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, v24);
    if (v19)
    {
LABEL_53:
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v19, v24);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    *(_DWORD *)v11 -= 2;
    if (v19)
      goto LABEL_53;
  }
LABEL_18:
  v12 = (WTF::StringImpl **)((char *)a2 + 16);
  WebCore::FormSubmission::requestURL((uint64_t)this, (uint64_t)&v28);
  if ((*((_BYTE *)a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::FrameLoadRequest *)((char *)a2 + 16));
    *((_BYTE *)a2 + 200) |= 1u;
  }
  v15 = v28;
  if (v28)
    *(_DWORD *)v28 += 2;
  v16 = *v12;
  *v12 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v13);
      v15 = v28;
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  *(_OWORD *)((char *)a2 + 24) = v29;
  *(_OWORD *)((char *)a2 + 40) = v30;
  *((_BYTE *)a2 + 164) &= ~0x20u;
  *((_BYTE *)a2 + 200) &= ~2u;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)a2 + 16, (WebCore::FormSubmission *)((char *)this + 128), v14);
}

WTF::StringImpl *WebCore::FrameLoadRequest::setFrameName(WebCore::FrameLoadRequest *this, const WTF::AtomString *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, _DWORD **a5, char a6, _DWORD **a7)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int64x2_t v20;
  char v21;
  _DWORD *v22;

  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v12;
  do
    v13 = __ldaxr(a3);
  while (__stlxr(v13 + 1, a3));
  *(_QWORD *)(a1 + 8) = a3;
  WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 16, (uint64_t *)a4);
  v14 = *(_QWORD *)(a4 + 152);
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a4 + 160);
  *(_QWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a4 + 168);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a1 + 184) = v16;
  v17 = *(_QWORD *)(a4 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a4 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  v18 = *(_QWORD *)(a4 + 192);
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *a5;
  if (*a5)
    *v19 += 2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = v19;
  WTF::URL::invalidate((WTF::URL *)(a1 + 232));
  *(_QWORD *)(a1 + 272) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 272));
  *(_BYTE *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_BYTE *)(a1 + 392) = 0;
  v20 = vdupq_n_s64(0x7FF8000000000000uLL);
  v21 = *(_BYTE *)(a1 + 410);
  *(int64x2_t *)(a1 + 416) = v20;
  *(int64x2_t *)(a1 + 432) = v20;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x8000000000000000;
  *(_QWORD *)(a1 + 472) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 480) = v20;
  *(_BYTE *)(a1 + 496) &= 0xF0u;
  *(_WORD *)(a1 + 504) &= 0xC000u;
  *(_BYTE *)(a1 + 506) = *(_BYTE *)(a1 + 506) & 0xF8 | 2;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 410) = v21 & 0xC0 | 5;
  *(_BYTE *)(a1 + 528) = 1;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 541) = 0;
  *(_WORD *)(a1 + 549) = 257;
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  v22 = *a7;
  if (*a7)
    *v22 += 2;
  *(_QWORD *)(a1 + 560) = v22;
  *(_BYTE *)(a1 + 568) = a6;
  *(_WORD *)(a1 + 569) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_BYTE *)(a1 + 574) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  return a1;
}

void WebCore::ResourceRequest::ResourceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WebCore::ResourceRequestBase::RequestData::RequestData(a1, (uint64_t *)a2);
  v3 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(v4 + 152) = v3;
  v5 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(v4 + 160) = v5;
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(v4 + 168) = v6;
  v7 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(v4 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(v4 + 176) = v7;
  v8 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(v4 + 192) = v8;
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 16, a2 + 2);
  v6 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 168) = v6;
  v7 = a2[22];
  a2[22] = 0;
  *(_QWORD *)(a1 + 176) = v7;
  v8 = a2[23];
  a2[23] = 0;
  *(_QWORD *)(a1 + 184) = v8;
  v9 = a2[24];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = a2[26];
  a2[26] = 0;
  *(_QWORD *)(a1 + 208) = v10;
  v11 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(a1 + 216) = v11;
  v12 = a2[28];
  a2[28] = 0;
  *(_QWORD *)(a1 + 224) = v12;
  v13 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v13;
  v14 = *(_DWORD *)(a1 + 240) & 0xFFFFFFFE | a2[30] & 1;
  *(_DWORD *)(a1 + 240) = v14;
  v15 = v14 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 60) >> 1) & 1));
  *(_DWORD *)(a1 + 240) = v15;
  v16 = v15 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 60) >> 2) & 1));
  *(_DWORD *)(a1 + 240) = v16;
  v17 = v16 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 60) >> 3) & 7));
  *(_DWORD *)(a1 + 240) = v17;
  *(_DWORD *)(a1 + 240) = a2[30] & 0xFFFFFFC0 | v17 & 0x3F;
  *(_OWORD *)(a1 + 244) = *(_OWORD *)((char *)a2 + 244);
  *(_DWORD *)(a1 + 260) = *((_DWORD *)a2 + 65);
  *(_QWORD *)(a1 + 264) = a2[33];
  *((_DWORD *)a2 + 60) &= ~1u;
  WebCore::ResourceResponseBase::ResourceResponseBase(a1 + 272, a2 + 34);
  v18 = a2[64];
  a2[64] = 0;
  *(_QWORD *)(a1 + 512) = v18;
  *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
  *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
  v19 = a2[67];
  a2[67] = 0;
  *(_QWORD *)(a1 + 536) = v19;
  v20 = a2[68];
  *(_QWORD *)(a1 + 549) = *(uint64_t *)((char *)a2 + 549);
  *(_QWORD *)(a1 + 544) = v20;
  v21 = a2[70];
  a2[70] = 0;
  *(_QWORD *)(a1 + 560) = v21;
  v22 = a2[71];
  *(_BYTE *)(a1 + 576) = *((_BYTE *)a2 + 576);
  *(_QWORD *)(a1 + 568) = v22;
  return a1;
}

uint64_t *WebCore::FrameLoadRequest::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char v24;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v21 = *(WTF::StringImpl **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF::StringImpl **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(unsigned int *)(v7 + 32);
      if ((_DWORD)v23 != -1)
        ((void (*)(char *, uint64_t))off_1E33F5B50[v23])(&v24, v7 + 8);
      *(_DWORD *)(v7 + 32) = -1;
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::ResourceRequest::operator=((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  v11 = a2[27];
  a2[27] = 0;
  v12 = (WTF::StringImpl *)a1[27];
  a1[27] = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::SubstituteData::operator=(a1 + 28, a2 + 28);
  v14 = a2[67];
  a2[67] = 0;
  v15 = (WTF::StringImpl *)a1[67];
  a1[67] = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = a2[68];
  *(uint64_t *)((char *)a1 + 549) = *(uint64_t *)((char *)a2 + 549);
  a1[68] = v16;
  v17 = a2[70];
  a2[70] = 0;
  v18 = (WTF::StringImpl *)a1[70];
  a1[70] = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = a2[71];
  *((_BYTE *)a1 + 576) = *((_BYTE *)a2 + 576);
  a1[71] = v19;
  return a1;
}

uint64_t WebCore::FrameLoadRequest::requester(WebCore::FrameLoadRequest *this)
{
  return *(_QWORD *)this;
}

BOOL WebCore::isBackForwardLoadType(int a1)
{
  return (a1 - 1) < 3;
}

uint64_t WebCore::isReload(unsigned int a1)
{
  return (a1 < 0xA) & (0x310u >> a1);
}

void WebCore::FrameLoader::~FrameLoader(WebCore::FrameLoader *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::HistoryItem *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  WebCore::FrameLoader::FrameProgressTracker *v33;
  WTF *v34;
  WTF *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  const void *v43;
  _QWORD *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  void *v59;

  v3 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v4 = v3[20];
  if (!v4)
  {
    v3[20] = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(v5 + 168, v3);
    v4 = v3[20];
    v3[20] = 0;
    if (!v4)
      goto LABEL_7;
  }
  else
  {
    v3[20] = 0;
  }
  do
  {
    v6 = __ldaxr((unsigned int *)v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v4));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)v4);
    WTF::fastFree((WTF *)v4, a2);
  }
LABEL_7:
  (*(void (**)(_QWORD *))(*v3 + 136))(v3);
  WebCore::Frame::detachFromAllOpenedFrames(*(_QWORD **)(*((_QWORD *)this + 1) + 8), v8);
  v10 = *((_QWORD *)this + 42);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(unsigned int **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v9);
      }
    }
    do
    {
      v16 = __ldaxr(v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)(v10 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  v18 = (WebCore::HistoryItem *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v18, (WTF::StringImpl *)v9);
      WTF::fastFree(v58, v59);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  *((_QWORD *)this + 33) = off_1E31F7378;
  v24 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  WebCore::TimerBase::~TimerBase((WebCore::FrameLoader *)((char *)this + 264));
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v30)
  {
    if (v30[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 24))(v30);
    else
      --v30[6];
  }
  v31 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v31)
  {
    if (v31[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 24))(v31);
    else
      --v31[6];
  }
  v32 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v32)
  {
    if (v32[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 24))(v32);
    else
      --v32[6];
  }
  v33 = (WebCore::FrameLoader::FrameProgressTracker *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v33)
  {
    WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker(v33, (unsigned int *)v25);
    if (*(_DWORD *)v34)
    {
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v34, v25);
    }
  }
  v35 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v35)
  {
    v36 = (unsigned int *)*((_QWORD *)v35 + 1);
    *((_QWORD *)v35 + 1) = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v25);
      }
    }
    WTF::fastFree(v35, v25);
  }
  v39 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v25);
    }
  }
  v42 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v42)
  {
    v43 = (const void *)*((_QWORD *)v42 + 14);
    *((_QWORD *)v42 + 14) = 0;
    if (v43)
      CFRelease(v43);
    v44 = (_QWORD *)*((_QWORD *)v42 + 13);
    if (v44 == (_QWORD *)((char *)v42 + 80))
    {
      v45 = 4;
      v44 = (_QWORD *)((char *)v42 + 80);
    }
    else
    {
      if (!v44)
      {
LABEL_72:
        v46 = (WTF::StringImpl *)*((_QWORD *)v42 + 5);
        *((_QWORD *)v42 + 5) = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v25);
          else
            *(_DWORD *)v46 -= 2;
        }
        v47 = (WTF::StringImpl *)*((_QWORD *)v42 + 4);
        *((_QWORD *)v42 + 4) = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v25);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = (unsigned int *)*((_QWORD *)v42 + 1);
        *((_QWORD *)v42 + 1) = 0;
        if (v48)
        {
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v48);
            WTF::fastFree((WTF *)v48, v25);
          }
        }
        if (*(_QWORD *)v42)
        {
          *(_QWORD *)(*(_QWORD *)v42 + 8) = 0;
          v51 = *(unsigned int **)v42;
          *(_QWORD *)v42 = 0;
          if (v51)
          {
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              atomic_store(1u, v51);
              WTF::fastFree((WTF *)v51, v25);
            }
          }
        }
        else
        {
          *(_QWORD *)v42 = 0;
        }
        WTF::fastFree(v42, v25);
        goto LABEL_88;
      }
      v45 = 5;
    }
    (*(void (**)(void))(*v44 + 8 * v45))();
    goto LABEL_72;
  }
LABEL_88:
  v54 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
  v55 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v25);
    }
  }
}

uint64_t WebCore::FrameLoader::protectedFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

void WebCore::FrameLoader::initForSynthesizedDocument(WebCore::FrameLoader *this, const WTF::URL *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD **v7;
  WTF::StringImpl *v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::DocumentLoader *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebCore::DocumentLoader *v25;
  WebCore::DocumentLoader *v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  void *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  WebCore::FrameLoader::FrameProgressTracker *v39;
  WTF *v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _OWORD v53[3];
  __int128 v54;
  __int128 v55;
  _OWORD v56[6];
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  CFTypeRef cf[4];
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  WTF::StringImpl *v64[5];
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[7];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  char v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  WebCore::DocumentLoader *v84;

  v3 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  v4 = v3 + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)this + 2);
  v64[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v64);
  v7 = (_DWORD **)MEMORY[0x1E0CBF738];
  MEMORY[0x19AEA52F8](&v65, v64, MEMORY[0x1E0CBF738], 0);
  v8 = v65;
  if (v65)
    *(_DWORD *)v65 += 2;
  v69 = v66;
  v70 = v67;
  v68 = v8;
  v71[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v71);
  v71[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v71[6] = *(_QWORD *)&v53[0];
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0x10000;
  v9 = v76 & 0x80 | 4;
  v76 = v9;
  v77 = 0;
  v10 = *v7;
  if (*v7)
  {
    *v10 += 2;
    v9 = v76;
  }
  v78 = v10;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = v82 & 0xE0 | 5;
  v76 = v9 | 2;
  v83 = 0;
  v63 = 0;
  v61 = 0uLL;
  v62 = 0uLL;
  memset(cf, 0, sizeof(cf));
  v59 = 0uLL;
  v57 = 0uLL;
  memset(v58, 0, sizeof(v58));
  memset(v56, 0, sizeof(v56));
  v54 = 0uLL;
  v55 = 0uLL;
  memset(v53, 0, sizeof(v53));
  WTF::URL::invalidate((WTF::URL *)((char *)v53 + 8));
  *(_QWORD *)&v54 = 0;
  WTF::URL::invalidate((WTF::URL *)&v54);
  LOBYTE(v57) = 0;
  WORD4(v57) = 0;
  memset((char *)v56 + 8, 0, 81);
  v58[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v58[1] = v58[0];
  v59 = 0uLL;
  *(_OWORD *)&cf[1] = v58[0];
  cf[0] = (CFTypeRef)0x8000000000000000;
  cf[3] = (CFTypeRef)0x7FF8000000000000;
  LOBYTE(v61) = v61 & 0xF0;
  WORD4(v61) &= 0xC000u;
  BYTE10(v61) = BYTE10(v61) & 0xF8 | 2;
  *(_QWORD *)&v62 = 0;
  BYTE8(v62) = 0;
  BYTE10(v57) = BYTE10(v57) & 0xC0 | 5;
  LOBYTE(v63) = 1;
  (*(void (**)(WebCore::DocumentLoader **__return_ptr, uint64_t, WTF::StringImpl **, _OWORD *))(*(_QWORD *)v6 + 760))(&v84, v6, &v68, v53);
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v53, v11);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v68, v12);
  v14 = v65;
  v65 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v64[0];
  v64[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::DocumentLoader::attachToFrame(v84, (WebCore::LocalFrame *)v3);
  v16 = v84;
  v68 = 0;
  WTF::URL::invalidate((WTF::URL *)&v68);
  v17 = v68;
  if (v68)
    *(_DWORD *)v68 += 2;
  *(_QWORD *)&v53[0] = v17;
  *(_OWORD *)((char *)v53 + 8) = v69;
  *(_OWORD *)((char *)&v53[1] + 8) = v70;
  v18 = WebCore::textHTMLContentTypeAtomData;
  if (WebCore::textHTMLContentTypeAtomData)
    *(_DWORD *)WebCore::textHTMLContentTypeAtomData += 2;
  *((_QWORD *)&v53[2] + 1) = v18;
  v54 = 0u;
  v55 = 0u;
  memset(v56, 0, 48);
  LOBYTE(v56[3]) = 1;
  WORD4(v56[3]) = 0;
  v56[4] = vdupq_n_s64(0x7FF8000000000000uLL);
  v56[5] = v56[4];
  v57 = 0uLL;
  *(_OWORD *)((char *)v58 + 8) = v56[4];
  *(_QWORD *)&v58[0] = 0x8000000000000000;
  *((_QWORD *)&v58[1] + 1) = 0x7FF8000000000000;
  LOBYTE(v59) = v59 & 0xF0;
  WORD4(v59) &= 0xC000u;
  BYTE10(v59) = BYTE10(v59) & 0xF8 | 2;
  cf[0] = 0;
  LOBYTE(cf[1]) = 0;
  BYTE10(v56[3]) = BYTE10(v56[3]) & 0xC0 | 4;
  WebCore::ResourceResponseBase::operator=((uint64_t)v16 + 1272, (uint64_t)v53);
  v20 = cf[0];
  if (cf[0])
    CFRetain(cf[0]);
  v21 = (const void *)*((_QWORD *)v16 + 189);
  *((_QWORD *)v16 + 189) = v20;
  if (v21)
    CFRelease(v21);
  *((_BYTE *)v16 + 1520) = cf[1];
  v22 = cf[0];
  cf[0] = 0;
  if (v22)
    CFRelease(v22);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v53, v19);
  v24 = v68;
  v68 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v84;
  *((_BYTE *)v84 + 3537) = 1;
  v84 = 0;
  *(_QWORD *)&v53[0] = v25;
  WebCore::FrameLoader::setDocumentLoader((unsigned int *)this, (uint64_t *)v53);
  if (*(_QWORD *)&v53[0])
  {
    if (*(_DWORD *)(*(_QWORD *)&v53[0] + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)&v53[0] + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)&v53[0] + 24);
  }
  v26 = v84;
  v84 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v26 + 24))(v26);
    else
      --*((_DWORD *)v26 + 6);
  }
  *((_DWORD *)this + 16) = 3;
  v27 = *((_QWORD *)this + 11);
  if (v27)
    v28 = *(unsigned __int8 *)(v27 + 3543) != 0;
  else
    v28 = 0;
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 2) + 832))(*((_QWORD *)this + 2), v28);
  *((_BYTE *)this + 209) = 1;
  *((_WORD *)this + 108) = 257;
  *((_BYTE *)this + 80) = 2;
  (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 2) + 984))(v53);
  v29 = *(_QWORD *)&v53[0];
  *(_QWORD *)&v53[0] = 0;
  v30 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v29;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
    }
    v34 = *(unsigned int **)&v53[0];
    *(_QWORD *)&v53[0] = 0;
    if (v34)
    {
      v48 = v34 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      }
    }
  }
  v36 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v36 = 0;
  if (!*((_QWORD *)v3 + 2))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v44 = 1;
    *(_QWORD *)(v44 + 8) = v3;
    v45 = (unsigned int *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = v44;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v35);
      }
    }
  }
  v37 = (unsigned int *)*((_QWORD *)v3 + 2);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  *(_QWORD *)(v36 + 8) = v37;
  *(_BYTE *)(v36 + 16) = 0;
  v39 = (WebCore::FrameLoader::FrameProgressTracker *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v36;
  if (v39)
  {
    WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker(v39, (unsigned int *)v35);
    if (*(_DWORD *)v40)
    {
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v40, v41);
    }
  }
  do
  {
    v42 = __ldaxr(v4);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, v4));
  if (!v43)
  {
    atomic_store(1u, v4);
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v51 = off_1E31FE290;
    v51[1] = v4;
    *(_QWORD *)&v53[0] = v51;
    WTF::ensureOnMainThread();
    v52 = *(_QWORD *)&v53[0];
    *(_QWORD *)&v53[0] = 0;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
}

void WebCore::FrameLoader::setDefersLoading(WebCore::FrameLoader *this, uint64_t a2)
{
  WebCore::DocumentLoader *v4;
  WebCore::DocumentLoader *v5;
  WebCore::DocumentLoader *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::HistoryItem *v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = (WebCore::DocumentLoader *)*((_QWORD *)this + 11);
  if (v4)
  {
    ++*((_DWORD *)v4 + 6);
    WebCore::DocumentLoader::setDefersLoading(v4, a2);
    if (*((_DWORD *)v4 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v4 + 24))(v4);
    else
      --*((_DWORD *)v4 + 6);
  }
  v5 = (WebCore::DocumentLoader *)*((_QWORD *)this + 12);
  if (v5)
  {
    ++*((_DWORD *)v5 + 6);
    WebCore::DocumentLoader::setDefersLoading(v5, a2);
    if (*((_DWORD *)v5 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v5 + 24))(v5);
    else
      --*((_DWORD *)v5 + 6);
  }
  v6 = (WebCore::DocumentLoader *)*((_QWORD *)this + 13);
  if (v6)
  {
    ++*((_DWORD *)v6 + 6);
    WebCore::DocumentLoader::setDefersLoading(v6, a2);
    if (*((_DWORD *)v6 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v6 + 24))(v6);
    else
      --*((_DWORD *)v6 + 6);
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(WebCore::HistoryItem **)(v7 + 184);
  ++*(_DWORD *)v10;
  WebCore::HistoryController::setDefersLoading(v10, a2);
  if (!*(_DWORD *)v10)
    goto LABEL_25;
  --*(_DWORD *)v10;
  if ((a2 & 1) != 0)
    goto LABEL_16;
  v11 = *(_DWORD **)(v7 + 152);
  ++*v11;
  WebCore::NavigationScheduler::startTimer((uint64_t)v11);
  if (!*v11)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x195ED71BCLL);
  }
  --*v11;
  WebCore::FrameLoader::startCheckCompleteTimer(this);
  do
  {
LABEL_16:
    v12 = __ldaxr(v8);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v8));
  if (!v13)
  {
    atomic_store(1u, v8);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v8;
    v15 = v14;
    WTF::ensureOnMainThread();
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
}

double WebCore::FrameLoader::startCheckCompleteTimer(WebCore::FrameLoader *this)
{
  char *v1;
  double v2;
  double result;

  if (*((_BYTE *)this + 320) || *((_BYTE *)this + 321))
  {
    if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      v1 = (char *)this + 264;
      *((_QWORD *)this + 36) = 0;
      WTF::MonotonicTime::now(this);
      WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded(WebCore::FrameLoader *this, const WTF::URL *a2, WebCore::ResourceRequest *a3)
{
  uint64_t shouldUpgradeRequestforHTTPSOnly;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  WebCore::FrameLoader *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _BOOL4 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  shouldUpgradeRequestforHTTPSOnly = WebCore::FrameLoader::shouldUpgradeRequestforHTTPSOnly(this, a2, a3);
  if ((_DWORD)shouldUpgradeRequestforHTTPSOnly)
  {
    v7 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
      v9 = v8[3];
      if (v9)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9)
        {
          if (*(_BYTE *)(v9 + 40))
            v9 = *(_QWORD *)(v9 + 32);
          else
            v9 = 0;
        }
      }
      v10 = v8[4];
      v11 = *(_QWORD *)(v8[16] + 8) == (_QWORD)v8;
      v12 = 134218752;
      v13 = this;
      v14 = 2048;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded: upgrading navigation request", (uint8_t *)&v12, 0x26u);
    }
    WebCore::ResourceRequestBase::upgradeToHTTPS(a3);
    WebCore::ResourceRequestBase::setTimeoutInterval(a3, 10.0);
  }
  return shouldUpgradeRequestforHTTPSOnly;
}

void WebCore::FrameLoader::changeLocation(WebCore *a1, uint64_t a2, _DWORD **a3, const WebCore::MouseEvent *a4, char *a5, char a6, __int16 a7, _DWORD **a8, const WebCore::Document *a9)
{
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  char v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int *v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  void *v28;
  void *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _DWORD *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[7];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  WebCore::Node *v53;
  _QWORD v54[68];
  char v55;
  char v56;
  int v57;
  char v58;

  v16 = WebCore::lexicalFrameFromCommonVM(a1);
  v18 = v16;
  if (v16)
  {
    v19 = (unsigned int *)(v16 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) != v16;
  }
  else
  {
    v21 = 1;
  }
  if ((a7 & 0xFF00) == 0)
    LOBYTE(a7) = *a5 != 1;
  v22 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296);
  v22[6] += 2;
  v53 = (WebCore::Node *)v22;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v22 + 48), v17);
  v24 = v23;
  v25 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v25 += 2;
  v37 = v25;
  v38 = *(_OWORD *)(a2 + 8);
  v39 = *(_OWORD *)(a2 + 24);
  v40[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v40);
  v40[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40[6] = v54[0];
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0x10000;
  v26 = v45 & 0x80 | 4;
  v45 = v26;
  v46 = 0;
  v27 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v27 += 2;
    v26 = v45;
  }
  v47 = v27;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = v51 & 0xE0 | 5;
  v45 = v26 | 2;
  v52 = 0;
  WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v54, (uint64_t *)&v53, v24, (uint64_t)&v37, a3, v21, a8);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v37, v28);
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53, v29);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  v56 = a7;
  v55 = *a5;
  v58 = a6;
  v57 = 1;
  WebCore::FrameLoader::changeLocation(a1, (uint64_t)v54, a4, a9);
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v54, v30);
  if (v18)
  {
    v31 = (unsigned int *)(v18 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E31FE290;
      v34[1] = v31;
      v54[0] = v34;
      WTF::ensureOnMainThread();
      v35 = v54[0];
      v54[0] = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
  }
}

WTF::StringImpl *WebCore::FrameLoader::changeLocation(WebCore::FrameLoader *a1, uint64_t a2, const WebCore::MouseEvent *a3, const WebCore::Document *a4)
{
  NSObject *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *result;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _DWORD *v34;
  _BYTE buf[24];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 8);
    v11 = v10[3];
    if (v11)
    {
      v11 = *(_QWORD *)(v11 + 8);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 40))
          v11 = *(_QWORD *)(v11 + 32);
        else
          v11 = 0;
      }
    }
    v12 = v10[4];
    v13 = *(_QWORD *)(v10[16] + 8) == (_QWORD)v10;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v36 = v12;
    WORD4(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 10) = v13;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::changeLocation: frame load started", buf, 0x26u);
  }
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(WTF::StringImpl **)(a2 + 216);
  if (!v17 || !*((_DWORD *)v17 + 1))
  {
    v18 = *(_DWORD **)(*(_QWORD *)(v14 + 296) + 1176);
    if (v18)
      *v18 += 2;
    *(_QWORD *)(a2 + 216) = v18;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v9);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  v19 = *(_QWORD *)(v14 + 296);
  if (v19)
  {
    v31 = *(_DWORD **)(v19 + 736);
    if (v31)
      *v31 += 2;
    *(_QWORD *)buf = v31;
    v32 = v19 + 736;
    *(_OWORD *)&buf[8] = *(_OWORD *)(v32 + 8);
    v36 = *(_OWORD *)(v32 + 24);
  }
  else
  {
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
  }
  WebCore::FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded(a1, (const WTF::URL *)buf, (WebCore::ResourceRequest *)(a2 + 16));
  v20 = *(_QWORD *)(v14 + 296);
  if (v20)
    *(_DWORD *)(v20 + 24) += 2;
  v21 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v20 + 192));
  if (v21)
  {
    v22 = v21;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 + 1, v21));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v21, (WebCore::ResourceRequest *)(a2 + 16), 2u, 0);
    if (!atomic_load(v22))
    {
      __break(0xC471u);
      JUMPOUT(0x195ED795CLL);
    }
    do
      v25 = __ldaxr(v22);
    while (__stlxr(v25 - 1, v22));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)(a2 + 16), 2u, 0);
  }
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v34 = 0;
  WebCore::FrameLoader::loadFrameRequest((uint64_t)a1, a2, a3, (uint64_t *)&v34, a4);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (v27[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
    else
      --v27[6];
  }
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v29 = __ldaxr(v15);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v15));
  if (!v30)
  {
    atomic_store(1u, v15);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v33 = off_1E31FE290;
    v33[1] = v15;
    *(_QWORD *)buf = v33;
    WTF::ensureOnMainThread();
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::loadFrameRequest(uint64_t a1, uint64_t a2, const WebCore::MouseEvent *a3, uint64_t *a4, const WebCore::Document *a5)
{
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v20;
  const WTF::URL *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  const WebCore::Document *v31;
  const WebCore::MouseEvent *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  NSObject *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  const WTF::String *v59;
  NSObject *v60;
  const WTF::URL *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  const char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  WTF::StringImpl *v71;
  void *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  WebCore::ResourceRequest *v78;
  char v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  WTF::StringImpl *v84;
  _BYTE v85[24];
  __int128 v86;
  _BYTE buf[24];
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v12 = v11[3];
    if (v12)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 40))
          v12 = *(_QWORD *)(v12 + 32);
        else
          v12 = 0;
      }
    }
    v13 = v11[4];
    v14 = *(_QWORD *)(v11[16] + 8) == (_QWORD)v11;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v12;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v88 = v13;
    WORD4(v88) = 1024;
    *(_DWORD *)((char *)&v88 + 10) = v14;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadFrameRequest: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  v15 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8);
  v16 = v15 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = (_DWORD **)(a2 + 16);
  if ((*(_BYTE *)(a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 16));
    *(_BYTE *)(a2 + 200) |= 1u;
  }
  v19 = *v18;
  if (*v18)
    *v19 += 2;
  *(_QWORD *)buf = v19;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 24);
  v88 = *(_OWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 8);
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  if ((WebCore::SecurityOrigin::canDisplay(v20, (WTF::URL *)buf, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) == 0)
  {
    v54 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
      v56 = v55[3];
      if (v56)
      {
        v56 = *(_QWORD *)(v56 + 8);
        if (v56)
        {
          if (*(_BYTE *)(v56 + 40))
            v56 = *(_QWORD *)(v56 + 32);
          else
            v56 = 0;
        }
      }
      v57 = v55[4];
      v58 = *(_QWORD *)(v55[16] + 8) == (_QWORD)v55;
      *(_DWORD *)v85 = 134218752;
      *(_QWORD *)&v85[4] = a1;
      *(_WORD *)&v85[12] = 2048;
      *(_QWORD *)&v85[14] = v56;
      *(_WORD *)&v85[22] = 2048;
      *(_QWORD *)&v86 = v57;
      WORD4(v86) = 1024;
      *(_DWORD *)((char *)&v86 + 10) = v58;
      _os_log_impl(&dword_1940B8000, v54, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadFrameRequest: canceling - Not allowed to load local resource", v85, 0x26u);
    }
    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)buf);
    WebCore::FrameLoader::reportLocalLoadFailed((uint64_t)v15, (WebCore::LocalFrame *)v85, v59);
    goto LABEL_59;
  }
  if ((WTF::portAllowed() & 1) == 0)
  {
    v60 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v62 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
      v63 = v62[3];
      if (v63)
      {
        v63 = *(_QWORD *)(v63 + 8);
        if (v63)
        {
          if (*(_BYTE *)(v63 + 40))
            v63 = *(_QWORD *)(v63 + 32);
          else
            v63 = 0;
        }
      }
      v64 = v62[4];
      v65 = *(_QWORD *)(v62[16] + 8) == (_QWORD)v62;
      *(_DWORD *)v85 = 134218752;
      *(_QWORD *)&v85[4] = a1;
      *(_WORD *)&v85[12] = 2048;
      *(_QWORD *)&v85[14] = v63;
      *(_WORD *)&v85[22] = 2048;
      *(_QWORD *)&v86 = v64;
      WORD4(v86) = 1024;
      *(_DWORD *)((char *)&v86 + 10) = v65;
      v66 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadFrameRequest: canceling - port not allowed";
      goto LABEL_104;
    }
LABEL_105:
    WebCore::FrameLoader::reportBlockedLoadFailed((WebCore::FrameLoader *)v15, (WebCore::LocalFrame *)buf, v61);
    goto LABEL_62;
  }
  if (WebCore::isIPAddressDisallowed((WebCore *)buf, v21))
  {
    v60 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v67 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
      v68 = v67[3];
      if (v68)
      {
        v68 = *(_QWORD *)(v68 + 8);
        if (v68)
        {
          if (*(_BYTE *)(v68 + 40))
            v68 = *(_QWORD *)(v68 + 32);
          else
            v68 = 0;
        }
      }
      v69 = v67[4];
      v70 = *(_QWORD *)(v67[16] + 8) == (_QWORD)v67;
      *(_DWORD *)v85 = 134218752;
      *(_QWORD *)&v85[4] = a1;
      *(_WORD *)&v85[12] = 2048;
      *(_QWORD *)&v85[14] = v68;
      *(_WORD *)&v85[22] = 2048;
      *(_QWORD *)&v86 = v69;
      WORD4(v86) = 1024;
      *(_DWORD *)((char *)&v86 + 10) = v70;
      v66 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadFrameRequest: canceling - IP address is not allowed";
LABEL_104:
      _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, v66, v85, 0x26u);
      goto LABEL_105;
    }
    goto LABEL_105;
  }
  *(_QWORD *)v85 = 0;
  WTF::URL::invalidate((WTF::URL *)v85);
  if ((*(_BYTE *)(a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 16));
    *(_BYTE *)(a2 + 200) |= 1u;
  }
  v22 = *(unsigned int *)(a2 + 124);
  v78 = (WebCore::ResourceRequest *)(a2 + 16);
  if (!(_DWORD)v22)
  {
LABEL_22:
    v25 = 0;
LABEL_23:
    v79 = 1;
    goto LABEL_24;
  }
  v23 = 0;
  v24 = (_DWORD **)(*(_QWORD *)(a2 + 112) + 8);
  while (*((_WORD *)v24 - 4) != 60)
  {
    ++v23;
    v24 += 2;
    if (v22 == v23)
      goto LABEL_22;
  }
  if (v23 >= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x195ED82B8);
  }
  v25 = (WTF::StringImpl *)*v24;
  if (!*v24)
    goto LABEL_23;
  v47 = *(_DWORD *)v25;
  v48 = *((_DWORD *)v25 + 1);
  *(_DWORD *)v25 += 2;
  if (v48)
  {
    *(_DWORD *)v25 = v47 + 4;
    v84 = v25;
    MEMORY[0x19AEA52D4](&v81, &v84, 0);
    v50 = v84;
    v84 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v49);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v81;
    v81 = 0;
    v52 = *(WTF::StringImpl **)v85;
    *(_QWORD *)v85 = v51;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::destroy(v52, v49);
        v53 = v81;
      }
      else
      {
        v53 = 0;
        *(_DWORD *)v52 -= 2;
      }
    }
    else
    {
      v53 = 0;
    }
    *(_OWORD *)&v85[8] = v82;
    LODWORD(v82) = v82 & 0xFFFFFFFE;
    v86 = v83;
    v81 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v49);
      else
        *(_DWORD *)v53 -= 2;
    }
    v79 = 0;
    goto LABEL_30;
  }
  v79 = 0;
LABEL_24:
  WebCore::FrameLoader::outgoingReferrerURL((WebCore::FrameLoader *)a1, (uint64_t)&v81);
  v27 = v81;
  v81 = 0;
  v28 = *(WTF::StringImpl **)v85;
  *(_QWORD *)v85 = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v26);
      v29 = v81;
    }
    else
    {
      v29 = 0;
      *(_DWORD *)v28 -= 2;
    }
  }
  else
  {
    v29 = 0;
  }
  *(_OWORD *)&v85[8] = v82;
  LODWORD(v82) = v82 & 0xFFFFFFFE;
  v86 = v83;
  v81 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v26);
    else
      *(_DWORD *)v29 -= 2;
  }
LABEL_30:
  v30 = *(unsigned __int8 *)(a2 + 548);
  if (!*(_BYTE *)(a2 + 548))
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v15 + 37) + 192) + 8))(*((_QWORD *)v15 + 37) + 192);
  v80 = a1;
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  v31 = a5;
  WebCore::SecurityPolicy::generateReferrerHeader((WebCore::SecurityPolicy *)buf, (WTF::StringImpl ***)v85, v30, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, (WTF::StringImpl ***)&v81);
  if ((*(_BYTE *)(a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v78);
    *(_BYTE *)(a2 + 200) |= 1u;
  }
  v32 = a3;
  if (*(_BYTE *)(a2 + 547))
    v33 = 6;
  else
    v33 = 0;
  if (*(_BYTE *)(a2 + 160) == 1)
    v34 = 4;
  else
    v34 = v33;
  do
    v35 = __ldaxr(v16);
  while (__stlxr(v35 + 1, v16));
  v36 = a4;
  v37 = *a4;
  if (*a4)
  {
    v38 = *(_QWORD *)(v37 + 8);
    if (v38)
      goto LABEL_136;
    v38 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = v37;
    v73 = *(unsigned int **)(v37 + 8);
    *(_QWORD *)(v37 + 8) = v38;
    if (!v73)
      goto LABEL_136;
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, v72);
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (v38)
    {
LABEL_136:
      do
        v76 = __ldaxr((unsigned int *)v38);
      while (__stlxr(v76 + 1, (unsigned int *)v38));
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = *(_DWORD **)(a2 + 216);
  if (v39)
    *v39 += 2;
  if ((*(_BYTE *)(a2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v78);
    *(_BYTE *)(a2 + 200) |= 1u;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)(a2 + 104), "POST", 4))
  {
    v71 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v71 = &off_1E33F5EE8;
    *((_QWORD *)v71 + 1) = v15;
    *((_QWORD *)v71 + 2) = v38;
    *((_QWORD *)v71 + 3) = v39;
    v84 = v71;
    WebCore::FrameLoader::loadPostRequest(v80, (uint64_t *)a2, &v81, v34, v32, v36, (uint64_t *)&v84);
  }
  else
  {
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v40 = &off_1E33F5EE8;
    *((_QWORD *)v40 + 1) = v15;
    *((_QWORD *)v40 + 2) = v38;
    *((_QWORD *)v40 + 3) = v39;
    v84 = v40;
    WebCore::FrameLoader::loadURL(v80, (WTF::StringImpl **)a2, &v81, v34, v32, v36, v31, (uint64_t *)&v84);
  }
  if (v84)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v84 + 8))(v84);
  v42 = v81;
  v81 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  if ((v79 & 1) == 0)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v41);
    else
      *(_DWORD *)v25 -= 2;
  }
LABEL_59:
  v43 = *(WTF::StringImpl **)v85;
  *(_QWORD *)v85 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
LABEL_62:
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v41);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15)
  {
    do
    {
      v45 = __ldaxr(v16);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v16));
    if (!v46)
    {
      atomic_store(1u, v16);
      v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v77 = off_1E31FE290;
      v77[1] = v16;
      *(_QWORD *)buf = v77;
      WTF::ensureOnMainThread();
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::URL *WebCore::FrameLoader::submitForm(WTF::URL *result, uint64_t *a2)
{
  char v2;
  WTF::URL *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unsigned int v22;
  const WTF::AtomString *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  WTF::StringImpl *v30;
  WTF *isMainThread;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  WebCore::Frame *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WebCore::Frame *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Frame *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl **v57;
  int v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  _QWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WebCore::Frame *v89;
  WTF::StringImpl *v90;
  __int128 v91;
  __int128 v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  char v98;

  v4 = result;
  v5 = *(unsigned int **)(*((_QWORD *)result + 1) + 8);
  v6 = v5 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)v5 + 3);
  if (!v8)
    goto LABEL_6;
  if (!*(_QWORD *)(v8 + 8))
    goto LABEL_6;
  v9 = *a2;
  result = (WTF::URL *)(*a2 + 24);
  v10 = *(WTF::StringImpl **)result;
  if (!*(_QWORD *)result || !*((_DWORD *)v10 + 1))
    goto LABEL_6;
  v13 = *((_QWORD *)v5 + 37);
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    if ((*(_BYTE *)(v13 + 268) & 8) != 0)
    {
      WTF::URL::stringCenterEllipsizedToLength(result);
      if (v96)
      {
        v26 = *((_DWORD *)v96 + 1);
        if (v26 < 0)
          goto LABEL_181;
      }
      else
      {
        v26 = 0;
      }
      v27 = __OFADD__(v26, 84);
      v28 = v26 + 84;
      if (!v27 && !__OFADD__(v28, 28))
      {
        v29 = !v96 || (*((_BYTE *)v96 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 28), v29, (int8x16_t *)"Blocked form submission to '", 0x1Cu, (uint64_t)v96, (int8x16_t *)"' because the form's frame is sandboxed and the 'allow-forms' permission is not set.", 0x54u, &v93);
        if (v93)
        {
          WebCore::Document::addConsoleMessage((_QWORD *)v13, 8, 2, &v93, 0);
          v30 = v93;
          v93 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v18);
            else
              *(_DWORD *)v30 -= 2;
          }
          result = v96;
          v96 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::URL *)WTF::StringImpl::destroy(result, v18);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_122;
        }
        goto LABEL_182;
      }
LABEL_181:
      v93 = 0;
LABEL_182:
      __break(0xC471u);
LABEL_183:
      JUMPOUT(0x195ED8A18);
    }
  }
  *(_DWORD *)v10 += 2;
  v93 = v10;
  v14 = *(_OWORD *)(v9 + 32);
  v95 = *(_OWORD *)(v9 + 48);
  v94 = v14;
  v15 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v13 + 192));
  v16 = v15;
  if (v15)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
  }
  v90 = 0;
  WTF::URL::invalidate((WTF::URL *)&v90);
  v19 = WebCore::ContentSecurityPolicy::allowResourceFromSource((uint64_t)v16, (WTF::URL *)&v93, 0, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFormAction, 0, (WTF::URL *)&v90);
  v20 = v90;
  v90 = 0;
  if (!v20)
  {
LABEL_17:
    if (!v16)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v20, v18);
  if (!v16)
    goto LABEL_20;
LABEL_18:
  if (!atomic_load(v16))
  {
    __break(0xC471u);
    goto LABEL_183;
  }
  do
    v22 = __ldaxr(v16);
  while (__stlxr(v22 - 1, v16));
LABEL_20:
  if (!v19)
    goto LABEL_118;
  v23 = (const WTF::AtomString *)(*a2 + 64);
  v24 = *(_QWORD *)(*(_QWORD *)(*a2 + 80) + 56);
  *(_DWORD *)(v24 + 24) += 2;
  WebCore::FrameLoader::findFrameForNavigation(v4, v23, (WebCore::Document *)v24, &v89);
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24, v18);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
  if (v89)
  {
    v25 = *(WTF::StringImpl **)(*a2 + 64);
    *(_QWORD *)(*a2 + 64) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    goto LABEL_69;
  }
  isMainThread = *(WTF **)(*((_QWORD *)v5 + 35) + 88);
  if (!isMainThread)
    goto LABEL_49;
  v32 = *((_DWORD *)isMainThread + 6);
  *((_DWORD *)isMainThread + 6) = v32 + 1;
  v33 = *((unsigned __int8 *)isMainThread + 3522);
  v34 = 1;
  if (v33 != 1)
  {
    if (v33 != 2)
      goto LABEL_47;
    LOBYTE(v34) = 0;
  }
  v2 = v34;
  v34 = 0;
LABEL_47:
  if (v32)
  {
    *((_DWORD *)isMainThread + 6) = v32;
    if (v34)
      goto LABEL_49;
  }
  else
  {
    isMainThread = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)isMainThread + 24))(isMainThread);
    if (v34)
    {
LABEL_49:
      isMainThread = (WTF *)WTF::isMainThread(isMainThread);
      if ((_DWORD)isMainThread)
      {
        {
          if (WebCore::currentToken(void)::token
            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
          {
            goto LABEL_64;
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
      if ((*(_QWORD *)(*((_QWORD *)v5 + 17) + 680) & 0x100000000000) != 0)
      {
        do
LABEL_64:
          v35 = __ldaxr(v6);
        while (__stlxr(v35 + 1, v6));
        v36 = v89;
        v89 = (WebCore::Frame *)v5;
        if (v36)
        {
          v37 = (unsigned int *)((char *)v36 + 8);
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            v87 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v87 = off_1E31FE290;
            *((_QWORD *)v87 + 1) = v37;
            v90 = v87;
            WTF::ensureOnMainThread();
            v88 = v90;
            v90 = 0;
            if (v88)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v88 + 8))(v88);
          }
        }
LABEL_69:
        v40 = v89;
        v41 = *((_QWORD *)v89 + 3);
        if (!v41 || (v42 = *(_QWORD *)(v41 + 8)) == 0)
        {
LABEL_115:
          v89 = 0;
          v74 = (unsigned int *)((char *)v40 + 8);
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            atomic_store(1u, v74);
            v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v80 = off_1E31FE290;
            *((_QWORD *)v80 + 1) = v74;
            v90 = v80;
            WTF::ensureOnMainThread();
            v81 = v90;
            v90 = 0;
            if (v81)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v81 + 8))(v81);
          }
          goto LABEL_118;
        }
        v43 = *(WebCore::Frame **)(*((_QWORD *)v5 + 6) + 8);
        v44 = *((_QWORD *)v43 + 3);
        if (v44)
          v44 = *(_QWORD *)(v44 + 8);
        if (v44 == v42)
        {
          if (v43 == v89)
          {
LABEL_75:
            WebCore::FormSubmission::requestURL(*a2, (uint64_t)&v90);
            v46 = v90;
            v90 = 0;
            v47 = (WTF::StringImpl *)*((_QWORD *)v4 + 28);
            *((_QWORD *)v4 + 28) = v46;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::destroy(v47, v45);
                v48 = v90;
              }
              else
              {
                v48 = 0;
                *(_DWORD *)v47 -= 2;
              }
            }
            else
            {
              v48 = 0;
            }
            v49 = v91;
            *(_OWORD *)((char *)v4 + 232) = v91;
            LODWORD(v91) = v49 & 0xFFFFFFFE;
            *(_OWORD *)((char *)v4 + 248) = v92;
            v90 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v45);
              else
                *(_DWORD *)v48 -= 2;
            }
          }
          else
          {
            while (1)
            {
              v79 = *((_QWORD *)v43 + 7);
              if (!v79)
                break;
              v43 = *(WebCore::Frame **)(v79 + 8);
              if (v43 == v89 || v43 == 0)
              {
                if (v43)
                  goto LABEL_75;
                break;
              }
            }
          }
        }
        v50 = *a2;
        WebCore::FrameLoader::nonSrcdocFrame((uint64_t *)v4, (uint64_t *)&v97);
        v52 = v97;
        if (v97)
        {
          v53 = *(WTF::StringImpl **)(*((_QWORD *)v97 + 35) + 160);
          if (v53)
            *(_DWORD *)v53 += 2;
          v97 = 0;
          v54 = (unsigned int *)((char *)v52 + 8);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v54);
            v85 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v85 = off_1E31FE290;
            *((_QWORD *)v85 + 1) = v54;
            v90 = v85;
            WTF::ensureOnMainThread();
            v86 = v90;
            v90 = 0;
            if (v86)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v86 + 8))(v86);
          }
          v57 = (WTF::StringImpl **)(v50 + 120);
          if (v53)
          {
            v58 = *(_DWORD *)v53;
LABEL_89:
            v59 = 0;
            *(_DWORD *)v53 = v58 + 2;
            goto LABEL_90;
          }
        }
        else
        {
          v53 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            v58 = *(_DWORD *)v53 + 2;
            *(_DWORD *)v53 = v58;
            v57 = (WTF::StringImpl **)(v50 + 120);
            goto LABEL_89;
          }
          v57 = (WTF::StringImpl **)(v50 + 120);
        }
        v59 = 1;
LABEL_90:
        v60 = *v57;
        *v57 = v53;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::destroy(v60, v51);
            if ((v59 & 1) == 0)
            {
LABEL_94:
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v51);
              else
                *(_DWORD *)v53 -= 2;
            }
LABEL_96:
            v61 = *a2;
            v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v5 + 37) + 192) + 8))(*((_QWORD *)v5 + 37) + 192);
            WebCore::FormSubmission::requestURL(*a2, (uint64_t)&v90);
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) + 296) + 192), v63);
            v65 = v64;
            if (v64)
            {
              do
                v66 = __ldaxr(v64);
              while (__stlxr(v66 + 1, v64));
            }
            {
              WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
            }
            WebCore::SecurityPolicy::generateOriginHeader(v62, (WebCore::ThreadableBlobRegistry *)&v90, (uint64_t)v64, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, &v97);
            v68 = v97;
            if (v97)
              *(_DWORD *)v97 += 2;
            v69 = *(WTF::StringImpl **)(v61 + 128);
            *(_QWORD *)(v61 + 128) = v68;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::destroy(v69, v67);
                v68 = v97;
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
            v97 = 0;
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v67);
              else
                *(_DWORD *)v68 -= 2;
            }
            do
            {
              v70 = __ldaxr(v65);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v65));
            if (!v71)
            {
              atomic_store(1u, v65);
              v82 = (WTF::StringImpl *)*((_QWORD *)v65 + 6);
              *((_QWORD *)v65 + 6) = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v67);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = (WTF::StringImpl *)*((_QWORD *)v65 + 5);
              *((_QWORD *)v65 + 5) = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v67);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v84 = v65[8];
              if ((_DWORD)v84 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F5B50[v84])(&v98, v65 + 2);
              v65[8] = -1;
              WTF::fastFree((WTF *)v65, v67);
            }
            v72 = v90;
            v90 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy(v72, v67);
              else
                *(_DWORD *)v72 -= 2;
            }
            v40 = v89;
            v73 = (_QWORD *)*((_QWORD *)v89 + 19);
            ++*(_DWORD *)v73;
            WebCore::NavigationScheduler::scheduleFormSubmission(v73, (WebCore::Frame *)a2);
            if (!*(_DWORD *)v73)
            {
              __break(0xC471u);
              JUMPOUT(0x195ED8B18);
            }
            --*(_DWORD *)v73;
            goto LABEL_115;
          }
          *(_DWORD *)v60 -= 2;
        }
        if ((v59 & 1) == 0)
          goto LABEL_94;
        goto LABEL_96;
      }
      goto LABEL_124;
    }
  }
  if ((v2 & 1) != 0)
    goto LABEL_64;
LABEL_124:
  if (WTF::isMainThread(isMainThread))
  {
    {
      if (!WebCore::currentToken(void)::token
        || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
        || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
      {
        goto LABEL_118;
      }
      goto LABEL_64;
    }
    WebCore::currentToken(void)::token = 0;
  }
LABEL_118:
  result = v93;
  v93 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::URL *)WTF::StringImpl::destroy(result, v18);
      if (!v13)
        goto LABEL_6;
      goto LABEL_122;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v13)
    goto LABEL_6;
LABEL_122:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      result = (WTF::URL *)WebCore::Node::removedLastRef((WebCore::Node *)v13, v18);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  do
  {
LABEL_6:
    v11 = __ldaxr(v6);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v6));
  if (!v12)
  {
    atomic_store(1u, v6);
    v77 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v77 = off_1E31FE290;
    *((_QWORD *)v77 + 1) = v6;
    v93 = v77;
    WTF::ensureOnMainThread();
    result = v93;
    v93 = 0;
    if (result)
      return (WTF::URL *)(*(uint64_t (**)(WTF::URL *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void *WebCore::FrameLoader::didExplicitOpen(WebCore::FrameLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  void *result;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 209) = 0;
  if (*((int *)this + 16) <= 1)
    *((_DWORD *)this + 16) = 2;
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    v3 = *((_QWORD *)this + 2);
    WebCore::Document::contentType(v2, &v14);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 344))(v3, v2 + 736, &v14);
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD **)(v6 + 152);
  ++*(_DWORD *)v9;
  result = WebCore::NavigationScheduler::cancel(v9, 0);
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195ED8D80);
  }
  --*(_DWORD *)v9;
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, v7);
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E31FE290;
    *((_QWORD *)v13 + 1) = v7;
    v14 = v13;
    WTF::ensureOnMainThread();
    result = v14;
    v14 = 0;
    if (result)
      return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::setOutgoingReferrer(WebCore::FrameLoader *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  char v20;

  WTF::URL::strippedForUseAsReferrer(a2);
  v5 = v19;
  v19 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v20)
  {
    v16 = 0;
    WTF::URL::invalidate((WTF::URL *)&v16);
    v11 = v16;
    v16 = 0;
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v4);
        v13 = v16;
      }
      else
      {
        v13 = 0;
        *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      v13 = 0;
    }
    v14 = v17;
    v15 = v18;
    LODWORD(v17) = v17 & 0xFFFFFFFE;
    *((_OWORD *)this + 11) = v14;
    *((_OWORD *)this + 12) = v15;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v4);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v7 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v7 += 2;
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 11) = *(_OWORD *)((char *)a2 + 8);
    *((_OWORD *)this + 12) = v9;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::updateFirstPartyForCookies(WTF::StringImpl *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)v4;
      this = WebCore::FrameLoader::setFirstPartyForCookies(this, (const WTF::URL *)(v4 + 168), a3);
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v4);
        return (WTF::StringImpl *)WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return this;
}

_BYTE *WebCore::FrameLoader::referrer@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    return WebCore::ResourceRequestBase::httpReferrer((_BYTE *)(v2 + 872), a2);
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return this;
}

BOOL WebCore::FrameLoaderStateMachine::creatingInitialEmptyDocument(WebCore::FrameLoaderStateMachine *this)
{
  return *(_DWORD *)this == 0;
}

double WebCore::FrameLoader::scheduleCheckCompleted(WebCore::FrameLoader *this)
{
  char *v1;
  double v2;
  double result;

  *((_BYTE *)this + 320) = 1;
  if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 264;
    *((_QWORD *)this + 36) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

WTF *WebCore::FrameLoader::checkLoadComplete(WTF *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  _BYTE v44[128];
  _QWORD *v45;

  *((_BYTE *)result + 321) = 0;
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = (char)a2;
    v42 = (WTF *)v44;
    v43 = 16;
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (v5)
    {
      do
      {
        v8 = (unsigned int *)(v5 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        if (*(_BYTE *)(v5 + 144))
        {
          do
          {
            v39 = __ldaxr(v8);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v8));
          if (v40)
            goto LABEL_15;
          atomic_store(1u, v8);
          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v35 = off_1E31FE290;
          v35[1] = v8;
        }
        else
        {
          v41 = v5;
          v10 = HIDWORD(v43);
          if (HIDWORD(v43) == (_DWORD)v43)
          {
            WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::MutableCSSSelector>>((uint64_t)&v42, (unint64_t)&v41);
          }
          else
          {
            v41 = 0;
            *((_QWORD *)v42 + HIDWORD(v43)) = v5;
            HIDWORD(v43) = v10 + 1;
          }
          v11 = v41;
          v41 = 0;
          if (!v11)
            goto LABEL_15;
          v12 = (unsigned int *)(v11 + 8);
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (v14)
            goto LABEL_15;
          atomic_store(1u, v12);
          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v35 = off_1E31FE290;
          v35[1] = v12;
        }
        v45 = v35;
        WTF::ensureOnMainThread();
        v36 = v45;
        v45 = 0;
        if (v36)
          (*(void (**)(_QWORD *))(*v36 + 8))(v36);
LABEL_15:
        if (*(_QWORD *)(v5 + 88))
        {
          v5 = *(_QWORD *)(v5 + 88);
        }
        else
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
          if (!v15)
            goto LABEL_22;
          v5 = *(_QWORD *)(v5 + 72);
          if (!v5)
          {
            while (1)
            {
              v16 = *(_QWORD *)(v15 + 56);
              if (!v16)
                break;
              v15 = *(_QWORD *)(v16 + 8);
              if (!v15)
                break;
              v5 = *(_QWORD *)(v15 + 72);
              if (v5)
                goto LABEL_28;
            }
LABEL_22:
            v5 = 0;
            v17 = 1;
            goto LABEL_23;
          }
        }
LABEL_28:
        v20 = (unsigned int *)(v5 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v17 = 0;
        do
        {
LABEL_23:
          v18 = __ldaxr(v8);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v8));
        if (!v19)
        {
          atomic_store(1u, v8);
          v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v33 = off_1E31FE290;
          v33[1] = v8;
          v45 = v33;
          WTF::ensureOnMainThread();
          v34 = v45;
          v45 = 0;
          if (v34)
            (*(void (**)(_QWORD *))(*v34 + 8))(v34);
        }
      }
      while ((v17 & 1) == 0);
    }
    result = v42;
    if (HIDWORD(v43))
    {
      v22 = (WTF *)((char *)v42 + 8 * HIDWORD(v43));
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 = (WTF *)((char *)v22 - 8);
        v23 = v24;
        v25 = *(_QWORD *)(v24 + 24);
        if (v25 && *(_QWORD *)(v25 + 8))
        {
          v26 = *(_DWORD **)(v23 + 280);
          ++*v26;
          WebCore::FrameLoader::checkLoadCompleteForThisFrame((uint64_t)v26, v4);
          if (!*v26)
          {
            __break(0xC471u);
            JUMPOUT(0x195ED9310);
          }
          --*v26;
          result = v42;
        }
      }
      while (v22 != result);
      if (HIDWORD(v43))
      {
        v27 = (WTF *)((char *)v22 + 8 * HIDWORD(v43));
        do
        {
          v28 = *(_QWORD *)v22;
          *(_QWORD *)v22 = 0;
          if (v28)
          {
            v29 = (unsigned int *)(v28 + 8);
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v37 = off_1E31FE290;
              v37[1] = v29;
              v45 = v37;
              WTF::ensureOnMainThread();
              v38 = v45;
              v45 = 0;
              if (v38)
                (*(void (**)(_QWORD *))(*v38 + 8))(v38);
            }
          }
          v22 = (WTF *)((char *)v22 + 8);
        }
        while (v27 != v22);
        result = v42;
      }
      else
      {
        result = v22;
      }
    }
    if (v44 != (_BYTE *)result && result != 0)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

double WebCore::FrameLoader::scheduleCheckLoadComplete(WebCore::FrameLoader *this)
{
  char *v1;
  double v2;
  double result;

  *((_BYTE *)this + 321) = 1;
  if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 264;
    *((_QWORD *)this + 36) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

uint64_t WebCore::FrameLoader::allAncestorsAreComplete(WebCore::FrameLoader *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!v1)
    return 1;
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  while (*(_BYTE *)(v1 + 144) || *(_BYTE *)(*(_QWORD *)(v1 + 280) + 216))
  {
    v4 = *(_QWORD *)(v1 + 56);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v7 = (unsigned int *)(v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v6 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v5 = 0;
    }
    v6 = 1;
LABEL_13:
    v9 = (unsigned int *)(v1 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v9;
      v17 = v12;
      WTF::ensureOnMainThread();
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    }
    v1 = v5;
    if ((v6 & 1) != 0)
      return 1;
  }
  v14 = (unsigned int *)(v1 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15 == 1)
  {
    atomic_store(1u, v14);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v14;
    v18 = v16;
    WTF::ensureOnMainThread();
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return 0;
}

void WebCore::FrameLoader::checkCallImplicitClose(WebCore::FrameLoader *this, void *a2)
{
  uint64_t v3;

  if (!*((_BYTE *)this + 209))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
    *(_DWORD *)(v3 + 24) += 2;
    if (!*(_BYTE *)(v3 + 3389)
      && !*(_DWORD *)(v3 + 3328)
      && WebCore::FrameLoader::allChildrenAreComplete(this))
    {
      *(_WORD *)((char *)this + 209) = 1;
      WebCore::Document::implicitClose((WebCore::Document *)v3);
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

void WebCore::FrameLoader::checkCompletenessNow(WebCore::FrameLoader *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Page *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 24);
  if (v6)
  {
    v7 = *(WebCore::Page **)(v6 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      if (*((_BYTE *)v7 + 339))
      {
        WTF::RefCounted<WebCore::Page>::deref(v7);
        goto LABEL_12;
      }
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page((uint64_t)v7);
        WTF::fastFree(v11, v12);
      }
    }
  }
  if (*((_BYTE *)this + 320))
    WebCore::FrameLoader::checkCompleted(this, a2);
  if (*((_BYTE *)this + 321))
    WebCore::FrameLoader::checkLoadComplete(this, 0);
  do
  {
LABEL_12:
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v4;
    v14 = v13;
    WTF::ensureOnMainThread();
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
}

void WebCore::FrameLoader::loadArchive(uint64_t a1, WebCore::Archive **a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  char v24;
  _DWORD *v25;
  WebCore::DocumentLoader *v26;
  WebCore::Archive *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::ArchiveResourceCollection *v31;
  WTF *v32;
  void *v33;
  void *v34;
  WebCore::DocumentLoader *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  CFTypeRef v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[7];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  char v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  __int16 v66;
  char v67;
  int64x2_t v68;
  int64x2_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int64x2_t v73;
  uint64_t v74;
  char v75;
  __int16 v76;
  char v77;
  CFTypeRef cf;
  char v79;
  WebCore::DocumentLoader *v80;
  _BYTE buf[48];
  _QWORD v82[31];
  char v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v6 = v5[3];
    if (v6)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 40))
          v6 = *(_QWORD *)(v6 + 32);
        else
          v6 = 0;
      }
    }
    v7 = v5[4];
    v8 = *(_QWORD *)(v5[16] + 8) == (_QWORD)v5;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v7;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v8;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadArchive: frame load started", buf, 0x26u);
  }
  v9 = *((_QWORD *)*a2 + 2);
  if (v9)
  {
    ++*(_DWORD *)(v9 + 8);
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    v12 = *(_QWORD *)(WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v9, v10) + 48);
    v13 = *(WTF::StringImpl **)buf;
    if (*(_QWORD *)buf)
      **(_DWORD **)buf += 2;
    v55 = v13;
    v56 = *(_OWORD *)&buf[8];
    v57 = *(_OWORD *)&buf[24];
    v14 = *(_DWORD **)(v9 + 320);
    if (v14)
      *v14 += 2;
    v58 = v14;
    v59 = v12;
    v15 = *(_DWORD **)(v9 + 328);
    if (v15)
      *v15 += 2;
    v60 = v15;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 1;
    v66 = 0;
    v68 = vdupq_n_s64(0x7FF8000000000000uLL);
    v69 = v68;
    v70 = 0;
    v71 = 0;
    v73 = v68;
    v72 = 0x8000000000000000;
    v74 = 0x7FF8000000000000;
    v75 = 0;
    v76 = 0;
    v77 = 2;
    cf = 0;
    v79 = 0;
    v67 = 4;
    *(_QWORD *)buf = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = (unsigned int *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v9, v11);
    v17 = v16;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
    v39 = 0;
    WTF::URL::invalidate((WTF::URL *)&v39);
    *(_QWORD *)buf = v17;
    v19 = v39;
    if (v39)
      *(_DWORD *)v39 += 2;
    *(_QWORD *)&buf[8] = v19;
    *(_OWORD *)&buf[16] = v40;
    *(_OWORD *)&buf[32] = v41;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v82, (const WebCore::ResourceResponseBase *)&v55);
    v82[30] = cf;
    if (cf)
      CFRetain(cf);
    v83 = v79;
    v84 = 1;
    v21 = v39;
    v39 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(WTF::StringImpl **)(v9 + 16);
    if (v22)
      *(_DWORD *)v22 += 2;
    v39 = v22;
    v23 = *(_OWORD *)(v9 + 24);
    v41 = *(_OWORD *)(v9 + 40);
    v40 = v23;
    v42[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v42);
    v42[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42[6] = v80;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0x10000;
    v24 = v47 & 0x80 | 4;
    v47 = v24;
    v48 = 0;
    v25 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v25 += 2;
      v24 = v47;
    }
    v49 = v25;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = v53 & 0xE0 | 5;
    v47 = v24 | 2;
    v54 = 0;
    (*(void (**)(WebCore::DocumentLoader **__return_ptr, _QWORD, WTF::StringImpl **, _BYTE *))(**(_QWORD **)(a1 + 16) + 760))(&v80, *(_QWORD *)(a1 + 16), &v39, buf);
    v26 = v80;
    v27 = *a2;
    *a2 = 0;
    v28 = (_DWORD *)*((_QWORD *)v26 + 333);
    *((_QWORD *)v26 + 333) = v27;
    if (v28)
    {
      if (v28[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        v27 = (WebCore::Archive *)*((_QWORD *)v26 + 333);
      }
      else
      {
        --v28[2];
      }
    }
    v29 = (WTF::StringImpl *)*((_QWORD *)v26 + 332);
    if (!v29)
    {
      v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      v31 = (WebCore::ArchiveResourceCollection *)*((_QWORD *)v26 + 332);
      *((_QWORD *)v26 + 332) = v29;
      if (v31)
      {
        WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v31, v30);
        WTF::fastFree(v32, v33);
        v29 = (WTF::StringImpl *)*((_QWORD *)v26 + 332);
      }
    }
    WebCore::ArchiveResourceCollection::addAllResources(v29, v27);
    WebCore::FrameLoader::load((WebCore::FrameLoader *)a1, v80, 0);
    v35 = v80;
    v80 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v35 + 24))(v35);
      else
        --*((_DWORD *)v35 + 6);
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v39, v34);
    WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)buf, v36);
    v38 = cf;
    cf = 0;
    if (v38)
      CFRelease(v38);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v55, v37);
    if (*(_DWORD *)(v9 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 8);
  }
}

WebCore::HistoryItem **WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::operator=(WebCore::HistoryItem **a1, WebCore::HistoryItem *a2)
{
  WebCore::HistoryItem *v3;
  WTF *v5;
  void *v6;

  if (a2)
    ++*(_DWORD *)a2;
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::FrameLoader::loadDifferentDocumentItem(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  WebCore::Page *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  __int16 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  WebCore::FormData *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;
  char v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebCore::FormData *v68;
  char v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _QWORD *v75;
  const WTF::String *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  char v79;
  uint64_t v80;
  char v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  unsigned int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  char v89;
  WTF::StringImpl *v90;
  _DWORD *v91;
  _DWORD *v92;
  WebCore::FormData *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  void *v98;
  char v99;
  char v100;
  __int16 v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  void *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  unsigned int v110;
  unsigned int v111;
  bmalloc::api *v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  WebCore::ResourceResponseBase *v121;
  uint64_t v122;
  char v123;
  int v124;
  int v125;
  WTF::StringImpl *v127;
  __int128 v128;
  __int128 v129;
  char v130;
  _DWORD *v131;
  _DWORD *v132;
  WebCore::FormData *v133;
  uint64_t v134;
  char v135;
  CFTypeRef v136;
  WTF::StringImpl *v137;
  __int128 v138;
  __int128 v139;
  _QWORD v140[7];
  _BYTE v141[48];
  int v142;
  char v143;
  _DWORD *v144;
  _DWORD *v145;
  WebCore::FormData *v146;
  uint64_t v147;
  char v148;
  CFTypeRef cf;
  WTF::StringImpl *v150;
  __int128 v151;
  __int128 v152;
  WTF::StringImpl *v153;
  __int128 v154;
  __int128 v155;
  WTF::StringImpl *v156;
  __int128 v157;
  __int128 v158;
  char v159;
  WTF::StringImpl *v160[3];
  __int128 v161;
  _QWORD v162[7];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  char v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t v170;
  char v171;
  char v172;
  char v173;
  uint64_t v174;
  _BYTE buf[12];
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  _BOOL4 v181;
  __int128 v182;
  char v183;
  char v184;
  _BYTE v185[15];
  char v186;
  __int16 v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v13 = v12[3];
    if (v13)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 40))
          v13 = *(_QWORD *)(v13 + 32);
        else
          v13 = 0;
      }
    }
    v14 = v12[4];
    v15 = *(_QWORD *)(v12[16] + 8) == (_QWORD)v12;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v176 = 2048;
    v177 = v13;
    v178 = 2048;
    v179 = v14;
    v180 = 1024;
    v181 = v15;
    _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadDifferentDocumentItem: frame load started", buf, 0x26u);
  }
  v16 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v17 = (unsigned int *)(v16 + 1);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_BYTE *)(a1 + 156) = 0;
  v19 = (_DWORD *)v16[23];
  ++*v19;
  ++*(_DWORD *)a2;
  *(_QWORD *)buf = a2;
  WebCore::HistoryController::setProvisionalItem((uint64_t)v19, (WTF::StringImpl *)buf);
  if (*(_QWORD *)buf)
  {
    if (**(_DWORD **)buf == 1)
    {
      WebCore::HistoryItem::~HistoryItem(*(WebCore::HistoryItem **)buf, v20);
      WTF::fastFree(v40, v41);
    }
    else
    {
      --**(_DWORD **)buf;
    }
  }
  if (!*v19)
  {
    __break(0xC471u);
    JUMPOUT(0x195EDAAFCLL);
  }
  v124 = a5;
  v125 = a6;
  --*v19;
  v21 = *(_BYTE *)(a1 + 349);
  *(_BYTE *)(a1 + 349) = 2 * (a6 != 0);
  {
    WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
  }
  v22 = v16[3];
  if (v22)
  {
    v23 = *(WebCore::Page **)(v22 + 8);
    if (v23)
      ++*(_DWORD *)v23;
  }
  else
  {
    v23 = 0;
  }
  v24 = (_DWORD *)WebCore::BackForwardCache::get((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, (WebCore::HistoryItem *)a2, v23);
  v25 = v24;
  if (v24)
    ++*v24;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::Page::~Page(v23);
      WTF::fastFree(v42, v43);
      if (v25)
        goto LABEL_23;
      goto LABEL_55;
    }
    --*(_DWORD *)v23;
  }
  if (v24)
  {
LABEL_23:
    v26 = *(_QWORD *)(*((_QWORD *)v25 + 3) + 8);
    if (v26)
      ++*(_DWORD *)(v26 + 24);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 768))(*(_QWORD *)(a1 + 16), v26);
    v27 = v16[37];
    if (v27)
      *(_DWORD *)(v27 + 24) += 2;
    WebCore::NavigationAction::NavigationAction((uint64_t)buf, v27, v26 + 872, 1, *(_BYTE *)(v26 + 3532), a4, 0, 0, 0, MEMORY[0x1E0CBF2F8]);
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
    v182 = *(_OWORD *)(a2 + 352);
    if (!v183)
      v183 = 1;
    if (a3)
    {
      v28 = *(_BYTE *)(a3 + 352);
      *(WTF::StringImpl **)((char *)v160 + 7) = *(WTF::StringImpl **)(a3 + 360);
      v160[0] = *(WTF::StringImpl **)(a3 + 353);
      v29 = 1;
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    v184 = v28;
    *(WTF::StringImpl **)v185 = v160[0];
    *(WTF::StringImpl **)&v185[7] = *(WTF::StringImpl **)((char *)v160 + 7);
    v186 = v29;
    if (a4 - 1 < 3)
    {
      v30 = 3;
    }
    else if (a4 <= 9 && ((1 << a4) & 0x310) != 0)
    {
      v30 = 2;
    }
    else
    {
      v30 = a4 == 7;
    }
    v187 = v30 | 0x100;
    WebCore::DocumentLoader::setTriggeringAction(v26, (uint64_t *)buf);
    v137 = 0;
    WTF::URL::invalidate((WTF::URL *)&v137);
    v31 = v137;
    if (v137)
      *(_DWORD *)v137 += 2;
    *(_OWORD *)&v160[1] = v138;
    v161 = v139;
    v160[0] = v31;
    v162[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v162);
    v162[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v162[6] = v127;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0x10000;
    v33 = v167 & 0x80 | 4;
    v167 = v33;
    v168 = 0;
    v34 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v34 += 2;
      v33 = v167;
    }
    v169 = v34;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = v173 & 0xE0 | 5;
    v167 = v33 | 2;
    v35 = v137;
    v137 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v174 = 0;
    WebCore::ResourceRequest::operator=(v26 + 1072, (uint64_t)v160);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v160, v36);
    if (!*v25)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDAB70);
    }
    --*v25;
    v160[0] = 0;
    v37 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v37 = off_1E33F5FB0;
    v137 = v37;
    WebCore::FrameLoader::loadWithDocumentLoader(a1, v26, a4, (uint64_t *)v160, 1, (uint64_t *)&v137);
    if (v137)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v137 + 8))(v137);
    v39 = v160[0];
    v160[0] = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 24))(v39);
      else
        --*((_DWORD *)v39 + 6);
    }
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v38);
    if (*(_DWORD *)(v26 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    else
      --*(_DWORD *)(v26 + 24);
    goto LABEL_199;
  }
LABEL_55:
  WebCore::HistoryItem::url((WebCore::HistoryItem *)a2, (uint64_t)&v156);
  WebCore::HistoryItem::originalURL((WebCore::HistoryItem *)a2, (uint64_t)&v153);
  v150 = 0;
  WTF::URL::invalidate((WTF::URL *)&v150);
  v45 = *(_QWORD *)(a1 + 88);
  if (v45)
  {
    v46 = (WTF::StringImpl **)(v45 + 872);
    if ((*(_BYTE *)(v45 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v45 + 872));
      *(_BYTE *)(v45 + 1056) |= 1u;
    }
    v47 = *v46;
    if (*v46)
      *(_DWORD *)v47 += 2;
    v48 = v150;
    v150 = v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v44);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = *(_OWORD *)(v45 + 896);
    v151 = *(_OWORD *)(v45 + 880);
    v152 = v49;
  }
  v50 = *(WebCore::FormData **)(a2 + 184);
  if (v50)
    ++*(_DWORD *)v50;
  v51 = v156;
  if (v156)
    *(_DWORD *)v156 += 2;
  v138 = v157;
  v139 = v158;
  v137 = v51;
  v140[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v140);
  v140[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  v52 = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v140[6] = *(_QWORD *)buf;
  memset(v141, 0, sizeof(v141));
  v142 = 0x10000;
  v53 = v143 & 0x80 | 4;
  v143 = v53;
  v144 = 0;
  v54 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v54 += 2;
    v53 = v143;
  }
  v145 = v54;
  v146 = 0;
  LOBYTE(v147) = 0;
  BYTE4(v147) = 0;
  v148 = v148 & 0xE0 | 5;
  v143 = v53 | 2;
  cf = 0;
  if (*(_QWORD *)(a2 + 32))
    v52 = WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v137, (WTF::StringImpl **)(a2 + 32));
  v55 = *(_BYTE *)(a2 + 120);
  if (!WTF::isMainThread(v52))
    goto LABEL_75;
  {
    WebCore::currentToken(void)::token = 0;
LABEL_75:
    v56 = *(_QWORD *)(v16[16] + 8);
    if ((_QWORD *)v56 == v16)
      v57 = v55;
    else
      v57 = 0;
    goto LABEL_78;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
    goto LABEL_75;
  }
  v56 = *(_QWORD *)(v16[16] + 8);
  v57 = 2;
LABEL_78:
  v123 = v57;
  if (v56 && !*(_BYTE *)(v56 + 144))
  {
    v58 = (unsigned int *)(v56 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
    v60 = *(_QWORD *)(*(_QWORD *)(v56 + 280) + 88);
    if (v60)
    {
      v61 = v21;
      ++*(_DWORD *)(v60 + 24);
      v62 = *(unsigned __int8 *)(v60 + 3533);
      v63 = v148;
      if ((v148 & 1) == 0)
      {
        v122 = v60;
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
        v60 = v122;
        v63 = v148 | 1;
        v148 |= 1u;
      }
      if ((v62 != 0) == ((v143 & 4) == 0))
      {
        v143 = v143 & 0xFB | (4 * (v62 != 0));
        v148 = v63 & 0xFD;
      }
      if (*(_DWORD *)(v60 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
      else
        --*(_DWORD *)(v60 + 24);
      v21 = v61;
    }
    do
    {
      v64 = __ldaxr(v58);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v58));
    if (!v65)
    {
      atomic_store(1u, v58);
      v116 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v116 = off_1E31FE290;
      v116[1] = v58;
      *(_QWORD *)buf = v116;
      WTF::ensureOnMainThread();
      v117 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
    }
  }
  WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)buf);
  if (v50)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v127 = v160[0];
    WebCore::ResourceRequestBase::setHTTPMethod(&v137, &v127);
    v67 = v127;
    v127 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v66);
      else
        *(_DWORD *)v67 -= 2;
    }
    if ((v148 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
      v148 |= 1u;
    }
    v68 = v146;
    v146 = v50;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
      {
        WebCore::FormData::~FormData(v68, v66);
        bmalloc::api::isoDeallocate(v112, v113);
      }
      else
      {
        --*(_DWORD *)v68;
      }
    }
    v69 = v148 & 0xF3 | 4;
    v148 = v69;
    v70 = *(WTF::StringImpl **)(a2 + 192);
    if (v70)
    {
      *(_DWORD *)v70 += 2;
      v69 = v148;
    }
    v160[0] = v70;
    if ((v69 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
      v148 |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v141, (WTF::StringImpl *)0x1A, v160);
    v148 &= ~2u;
    v72 = v160[0];
    v160[0] = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v71);
      else
        *(_DWORD *)v72 -= 2;
    }
    WebCore::SecurityOrigin::createFromString((WTF::StringImpl **)(a2 + 32), (uint64_t *)&v127);
    v73 = v127;
    v74 = *((unsigned int *)v127 + 8);
    if ((_DWORD)v74 == 1)
      goto LABEL_243;
    if ((_DWORD)v74 == -1)
    {
      v118 = std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::SubstituteData::SubstituteData(v118, v119, v120, v121);
      return;
    }
    v160[0] = (WTF::StringImpl *)&v159;
    v75 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v74])(v160, (char *)v127 + 8);
    if (MEMORY[0x19AEA53F4](*v75, "file", 4) && *((_BYTE *)v73 + 59))
LABEL_243:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v73 + 8), v160);
    WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)&v137, (WebCore::ResourceRequest *)v160, v76);
    v78 = v160[0];
    v160[0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v77);
      else
        *(_DWORD *)v78 -= 2;
    }
    WebCore::FrameLoader::updateRequestAndAddExtraFields(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (WebCore::FrameLoader *)&v137, (const WebCore::Page *)1, a4, 1, 0, 0, 0);
    v79 = v148;
    if (v124)
    {
      if ((v148 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
        v79 = v148 | 1;
        v148 |= 1u;
      }
      if (v142 != 2)
      {
        LOBYTE(v142) = 2;
        v148 = v79 & 0xFD;
      }
      v80 = v16[37];
      if (v80)
        *(_DWORD *)(v80 + 24) += 2;
      WebCore::NavigationAction::NavigationAction((uint64_t)v160, (WebCore::NavigationRequester *)v80, (const WebCore::ResourceRequest *)&v137, 1, 0, 4, v123, 0, MEMORY[0x1E0CBF2F8]);
    }
    else
    {
      if ((v148 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
        v79 = v148 | 1;
        v148 |= 1u;
      }
      if (v142 != 3)
      {
        LOBYTE(v142) = 3;
        v148 = v79 & 0xFD;
      }
      v80 = v16[37];
      if (v80)
        *(_DWORD *)(v80 + 24) += 2;
      WebCore::NavigationAction::NavigationAction((uint64_t)v160, v80, (uint64_t)&v137, 1, 0, a4, 0, 0, v123, MEMORY[0x1E0CBF2F8]);
    }
    WebCore::NavigationAction::operator=((uint64_t)buf, (uint64_t *)v160);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v160, v82);
    if (*(_DWORD *)(v80 + 24) == 2)
    {
      if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v80);
    }
    else
    {
      *(_DWORD *)(v80 + 24) -= 2;
    }
    v127 = 0;
    do
    {
      v84 = __ldaxr((unsigned int *)v73);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, (unsigned int *)v73));
    if (!v85)
    {
      atomic_store(1u, (unsigned int *)v73);
      v86 = (WTF::StringImpl *)*((_QWORD *)v73 + 6);
      *((_QWORD *)v73 + 6) = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v83);
        else
          *(_DWORD *)v86 -= 2;
      }
      v87 = (WTF::StringImpl *)*((_QWORD *)v73 + 5);
      *((_QWORD *)v73 + 5) = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v83);
        else
          *(_DWORD *)v87 -= 2;
      }
      v88 = *((unsigned int *)v73 + 8);
      if ((_DWORD)v88 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F5B50[v88])(v160, (char *)v73 + 8);
      *((_DWORD *)v73 + 8) = -1;
      WTF::fastFree(v73, v83);
    }
  }
  else
  {
    if (a4 <= 9)
    {
      if (((1 << a4) & 0xE) != 0)
      {
        v89 = v148;
        if ((v148 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
          v89 = v148 | 1;
          v148 |= 1u;
        }
        if (v142 != 2)
        {
          LOBYTE(v142) = 2;
          v148 = v89 & 0xFD;
        }
        *(_BYTE *)(a2 + 146) = 0;
      }
      else if (((1 << a4) & 0x310) != 0)
      {
        v81 = v148;
        if ((v148 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v137);
          v81 = v148 | 1;
          v148 |= 1u;
        }
        if (v142 != 1)
        {
          LOBYTE(v142) = 1;
          v148 = v81 & 0xFD;
        }
      }
    }
    WebCore::FrameLoader::updateRequestAndAddExtraFields(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (WebCore::FrameLoader *)&v137, (const WebCore::Page *)1, a4, 1, 0, 0, 0);
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v127, (const WebCore::ResourceRequestBase::RequestData *)&v137);
    v91 = v144;
    if (v144)
      *v144 += 2;
    v131 = v91;
    v92 = v145;
    if (v145)
      *v145 += 2;
    v132 = v92;
    v93 = v146;
    if (v146)
      ++*(_DWORD *)v146;
    v133 = v93;
    v134 = v147;
    v135 = v148;
    v136 = cf;
    if (cf)
      CFRetain(cf);
    if ((v135 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v127);
      v135 |= 1u;
    }
    v94 = v153;
    if (v153)
      *(_DWORD *)v153 += 2;
    v95 = v127;
    v127 = v94;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v90);
      else
        *(_DWORD *)v95 -= 2;
    }
    v128 = v154;
    v129 = v155;
    v130 &= ~0x20u;
    v135 &= ~2u;
    v96 = v16[37];
    if (v96)
      *(_DWORD *)(v96 + 24) += 2;
    WebCore::NavigationAction::NavigationAction((uint64_t)v160, v96, (uint64_t)&v127, 1, (v143 & 4) != 0, a4, 0, 0, v123, MEMORY[0x1E0CBF2F8]);
    WebCore::NavigationAction::operator=((uint64_t)buf, (uint64_t *)v160);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v160, v97);
    if (*(_DWORD *)(v96 + 24) == 2)
    {
      if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v96);
    }
    else
    {
      *(_DWORD *)(v96 + 24) -= 2;
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v127, v98);
  }
  v182 = *(_OWORD *)(a2 + 352);
  if (!v183)
    v183 = 1;
  if (a3)
  {
    v99 = *(_BYTE *)(a3 + 352);
    *(WTF::StringImpl **)((char *)v160 + 7) = *(WTF::StringImpl **)(a3 + 360);
    v160[0] = *(WTF::StringImpl **)(a3 + 353);
    v100 = 1;
  }
  else
  {
    v100 = 0;
    v99 = 0;
  }
  v184 = v99;
  *(WTF::StringImpl **)v185 = v160[0];
  *(WTF::StringImpl **)&v185[7] = *(WTF::StringImpl **)((char *)v160 + 7);
  v186 = v100;
  if (a4 - 1 < 3)
  {
    v101 = 3;
  }
  else if (a4 <= 9 && ((1 << a4) & 0x310) != 0)
  {
    v101 = 2;
  }
  else
  {
    v101 = a4 == 7;
  }
  v187 = v101 | 0x100;
  v160[0] = 0;
  v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v102 = off_1E33F60C8;
  v127 = v102;
  WebCore::FrameLoader::loadWithNavigationAction(a1, (WebCore::ResourceRequest *)&v137, (const WebCore::NavigationAction *)buf, a4, (uint64_t *)v160, 1, v125, (uint64_t *)&v127);
  if (v127)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v127 + 8))(v127);
  v104 = v160[0];
  v160[0] = 0;
  if (v104)
  {
    if (*((_DWORD *)v104 + 6) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v104 + 24))(v104);
    else
      --*((_DWORD *)v104 + 6);
  }
  WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v103);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v137, v105);
  v107 = v150;
  v150 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, v106);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = v153;
  v153 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v106);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = v156;
  v156 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v106);
    else
      *(_DWORD *)v109 -= 2;
  }
LABEL_199:
  *(_BYTE *)(a1 + 349) = v21;
  do
  {
    v110 = __ldaxr(v17);
    v111 = v110 - 1;
  }
  while (__stlxr(v111, v17));
  if (!v111)
  {
    atomic_store(1u, v17);
    v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v114 = off_1E31FE290;
    v114[1] = v17;
    *(_QWORD *)buf = v114;
    WTF::ensureOnMainThread();
    v115 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v115)
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  }
}

uint64_t WebCore::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, uint64_t a3, WebCore::ResourceResponseBase *a4)
{
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  const void *v9;

  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v6;
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 32) = v8;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 48), a4);
  v9 = (const void *)*((_QWORD *)a4 + 30);
  *(_QWORD *)(a1 + 288) = v9;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a4 + 248);
  *(_BYTE *)(a1 + 304) = 1;
  return a1;
}

uint64_t *WebCore::FrameLoader::nonSrcdocFrame@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = *(_QWORD *)(this[1] + 8);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v15 = v2;
    while (1)
    {
      if (*(_BYTE *)(v2 + 144))
      {
        *a2 = 0;
        v15 = 0;
        goto LABEL_10;
      }
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 296) + 3403))
        break;
      v12 = a2;
      v13 = *(_QWORD *)(v2 + 56);
      if (v13)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = 0;
      this = WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=(&v15, v14);
      v2 = v15;
      a2 = v12;
      if (!v15)
        goto LABEL_21;
    }
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = v15;
    *a2 = v2;
    v15 = 0;
    v2 = v7;
    if (!v7)
      return this;
LABEL_10:
    v8 = (unsigned int *)(v2 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v11 = (uint64_t)off_1E31FE290;
      v11[1] = (uint64_t)v8;
      v16 = v11;
      WTF::ensureOnMainThread();
      this = v16;
      v16 = 0;
      if (this)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  else
  {
LABEL_21:
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::FrameLoader::outgoingReferrerURL@<X0>(WebCore::FrameLoader *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  _DWORD *v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  result = (WTF::StringImpl *)WebCore::FrameLoader::nonSrcdocFrame((uint64_t *)this, &v18);
  v4 = v18;
  if (!v18)
    return (WTF::StringImpl *)WTF::URL::URL(a2, MEMORY[0x1E0CBF738]);
  v5 = *(_QWORD *)(v18 + 280);
  v6 = (__int128 *)(v5 + 176);
  if ((*(_BYTE *)(v5 + 176) & 1) != 0)
  {
    v7 = *(_DWORD **)(v5 + 168);
    if (v7)
      *v7 += 2;
    *(_QWORD *)a2 = v7;
    v8 = *v6;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v5 + 192);
    *(_OWORD *)(a2 + 8) = v8;
  }
  else
  {
    v12 = *(WTF::StringImpl **)(v5 + 160);
    if (v12)
      *(_DWORD *)v12 += 2;
    v19 = v12;
    MEMORY[0x19AEA52D4](a2, &v19, 0);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v15 += 2;
    result = *(WTF::StringImpl **)(v5 + 168);
    *(_QWORD *)(v5 + 168) = v15;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
    v16 = *(_OWORD *)(a2 + 24);
    *v6 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v5 + 192) = v16;
  }
  v18 = 0;
  v9 = (unsigned int *)(v4 + 8);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v17 = off_1E31FE290;
    *((_QWORD *)v17 + 1) = v9;
    v19 = v17;
    WTF::ensureOnMainThread();
    result = v19;
    v19 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FrameLoader::checkIfFormActionAllowedByCSP(WebCore::FrameLoader *this, const WTF::URL *a2, unsigned __int8 a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;

  v4 = *((_QWORD *)this + 28);
  if (!v4 || !*(_DWORD *)(v4 + 4))
    return 1;
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v11 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v10 + 192));
  if (!v11)
  {
    v5 = WebCore::ContentSecurityPolicy::allowResourceFromSource(0, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFormAction, 0, a4);
    goto LABEL_13;
  }
  v12 = v11;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = WebCore::ContentSecurityPolicy::allowResourceFromSource((uint64_t)v11, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFormAction, 0, a4);
  if (atomic_load(v12))
  {
    v5 = v14;
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 - 1, v12));
LABEL_13:
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    return v5;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

BOOL WebCore::FrameLoaderStateMachine::firstLayoutDone(WebCore::FrameLoaderStateMachine *this)
{
  return *(_DWORD *)this == 4;
}

WTF::StringImpl *WebCore::FrameLoader::loadInSameDocument(uint64_t a1, WTF **a2, uint64_t *a3, const WebCore::SecurityOrigin *a4, int a5, int a6)
{
  NSObject *v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _DWORD *v19;
  WebCore::DocumentLoader *v20;
  __n128 v21;
  int *v22;
  int *updated;
  uint64_t isMainThread;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  WebCore::HistoryItem *v28;
  int v29;
  const WTF::String *v30;
  int v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  WebCore::HistoryItem *v47;
  int v48;
  int v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  WTF::StringImpl *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t isSameOriginAs;
  WTF::StringImpl *v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *result;
  unsigned int v81;
  unsigned int v82;
  void *v83;
  WTF *v84;
  WTF *v85;
  void *v86;
  uint64_t v87;
  WebCore::Node *v88;
  uint64_t v89;
  WebCore::HistoryItem *v90;
  WebCore::LocalDOMWindow *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WebCore::HistoryItem *v97;
  WTF::StringImpl *v98;
  WebCore::HistoryItem *v99;
  double v100;
  double v101;
  WebCore::HistoryItem *v102;
  WebCore::HistoryItem *v103;
  WebCore::HistoryItem *v104;
  WebCore::HistoryItem *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF *v112;
  void *v113;
  WebCore::HistoryItem *v114;
  _BYTE buf[24];
  __int128 v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v15 = v14[3];
    if (v15)
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 40))
          v15 = *(_QWORD *)(v15 + 32);
        else
          v15 = 0;
      }
    }
    v16 = v14[4];
    v17 = *(_QWORD *)(v14[16] + 8) == (_QWORD)v14;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v116 = v16;
    WORD4(v116) = 1024;
    *(_DWORD *)((char *)&v116 + 10) = v17;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadInSameDocument: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  v19 = *(_DWORD **)(v18 + 736);
  if (v19)
    *v19 += 2;
  *(_QWORD *)buf = v19;
  *(_OWORD *)&buf[8] = *(_OWORD *)(v18 + 744);
  v116 = *(_OWORD *)(v18 + 760);
  WebCore::Document::setURL((WebCore::Document *)v18, a2, v13);
  WebCore::FrameLoader::setOutgoingReferrer((WebCore::FrameLoader *)a1, (const WTF::URL *)a2);
  v20 = *(WebCore::DocumentLoader **)(a1 + 88);
  if (v20)
  {
    ++*((_DWORD *)v20 + 6);
    v21 = WebCore::DocumentLoader::replaceRequestURLForSameDocumentNavigation(v20, (const WTF::URL *)a2);
    if (*((_DWORD *)v20 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *, __n128))(*(_QWORD *)v20 + 24))(v20, v21);
    else
      --*((_DWORD *)v20 + 6);
  }
  else
  {
    WebCore::DocumentLoader::replaceRequestURLForSameDocumentNavigation(0, (const WTF::URL *)a2);
  }
  if (a5 && (WebCore::FrameLoader::shouldTreatURLAsSameAsCurrent((WebCore::FrameLoader *)a1, a4, a2) & 1) == 0 && !*a3)
  {
    v22 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
    ++*v22;
    updated = WebCore::HistoryController::updateBackForwardListClippedAtTarget(v22, 0);
    if (!*v22)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDBC20);
    }
    --*v22;
    isMainThread = WTF::isMainThread((WTF *)updated);
    if ((_DWORD)isMainThread)
    {
      {
        isMainThread = WebCore::currentToken(void)::token;
        if (WebCore::currentToken(void)::token)
        {
          if (!*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
          {
            isMainThread = WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, (const WebCore::Document *)v18);
            if ((isMainThread & 1) != 0)
              goto LABEL_27;
          }
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    v26 = *(_QWORD *)(v18 + 696);
    if (v26)
    {
      v27 = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v27 + 1;
      if (fabs(*(double *)(v26 + 296)) == INFINITY)
      {
        if (v27)
          *(_DWORD *)(v26 + 24) = v27;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
      }
      else
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isMainThread);
        v101 = v100 - *(double *)(v26 + 296);
        if (*(_DWORD *)(v26 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
        else
          --*(_DWORD *)(v26 + 24);
        if (v101 <= 10.0)
          goto LABEL_27;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 88) + 2508))
    {
      v28 = *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184) + 16);
      if (v28)
      {
        v29 = (*(_DWORD *)v28)++;
        *((_BYTE *)v28 + 147) = 1;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WebCore::HistoryItem::~HistoryItem(v28, v25);
          WTF::fastFree(v85, v86);
        }
      }
    }
  }
LABEL_27:
  if (WTF::equalIgnoringFragmentIdentifier())
  {
    WTF::URL::fragmentIdentifier((WTF::URL *)a2);
    WTF::URL::fragmentIdentifier((WTF::URL *)buf);
    v31 = WTF::equalRespectingNullity() ^ 1;
  }
  else
  {
    v31 = 0;
  }
  v32 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
  ++*v32;
  WebCore::HistoryController::updateForSameDocumentNavigation((uint64_t)v32, v30);
  if (!*v32)
  {
    __break(0xC471u);
    JUMPOUT(0x195EDBB40);
  }
  --*v32;
  if (a6 == 2)
  {
    v34 = 1;
  }
  else if (a6 == 1)
  {
    v34 = 0;
  }
  else
  {
    v33 = *(unsigned __int8 *)(a1 + 81);
    if (v33 - 1 < 3)
    {
      v34 = 3;
    }
    else if (v33 <= 9 && ((1 << v33) & 0x310) != 0)
    {
      v34 = 2;
    }
    else
    {
      v34 = v33 == 7;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 688) & 0x4000) != 0)
  {
    v91 = *(WebCore::LocalDOMWindow **)(v18 + 696);
    if (v91)
    {
      v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
      v93 = (*(_DWORD *)v92)++;
      if (v93 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195EDBE04);
      }
      v94 = *(_QWORD *)(v92 + 16);
      *(_DWORD *)v92 = v93;
      if (v94)
      {
        ++*((_DWORD *)v91 + 6);
        v95 = WebCore::LocalDOMWindow::navigation(v91);
        v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
        ++*(_DWORD *)v96;
        v97 = *(WebCore::HistoryItem **)(v96 + 16);
        ++*(_DWORD *)v97;
        v114 = v97;
        WebCore::Navigation::updateForNavigation(v95, (uint64_t *)&v114, v34);
        v99 = v114;
        v114 = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 1)
          {
            WebCore::HistoryItem::~HistoryItem(v99, v98);
            WTF::fastFree(v112, v113);
          }
          else
          {
            --*(_DWORD *)v99;
          }
        }
        if (!*(_DWORD *)v96)
        {
          __break(0xC471u);
          JUMPOUT(0x195EDBE24);
        }
        --*(_DWORD *)v96;
        if (*((_DWORD *)v91 + 6) == 1)
          (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v91 + 72))(v91);
        else
          --*((_DWORD *)v91 + 6);
      }
    }
  }
  if (v31)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v36 = (unsigned int *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v38 = *(_QWORD *)(v35 + 640);
    ++*(_DWORD *)v38;
    WebCore::AutoscrollController::stopAutoscrollTimer(*(WebCore::AutoscrollController **)(v38 + 144), 0);
    if (!*(_DWORD *)v38)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDBB60);
    }
    --*(_DWORD *)v38;
    do
    {
      v39 = __ldaxr(v36);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v36));
    if (!v40)
    {
      atomic_store(1u, v36);
      v102 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v102 = off_1E31FE290;
      *((_QWORD *)v102 + 1) = v36;
      v114 = v102;
      WTF::ensureOnMainThread();
      v103 = v114;
      v114 = 0;
      if (v103)
        (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v103 + 8))(v103);
    }
  }
  WebCore::FrameLoader::started(a1);
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v42 = *(_QWORD *)(v41 + 120);
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 8);
    if (v43)
    {
      *(_DWORD *)(v43 + 24) += 2;
      v44 = *(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL;
      if (v44)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EDBC00);
        }
        v45 = (*(unsigned __int8 *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          v45 = 0;
        if (v45 == 1)
        {
          v46 = 0;
          ++*(_DWORD *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          goto LABEL_54;
        }
        v44 = 0;
      }
      v46 = 1;
LABEL_54:
      v47 = *(WebCore::HistoryItem **)(v41 + 288);
      if (v47)
      {
        v48 = *((_DWORD *)v47 + 2);
        *((_DWORD *)v47 + 2) = v48 + 1;
        if (!v44)
        {
          if (v48)
            goto LABEL_58;
          goto LABEL_131;
        }
        v114 = v47;
        WebCore::RenderWidget::setWidget(v44, (uint64_t *)&v114);
        v47 = v114;
        v114 = 0;
        if (v47)
        {
          v48 = *((_DWORD *)v47 + 2) - 1;
          if (*((_DWORD *)v47 + 2) != 1)
          {
LABEL_58:
            *((_DWORD *)v47 + 2) = v48;
            goto LABEL_59;
          }
LABEL_131:
          (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v47 + 8))(v47);
        }
      }
LABEL_59:
      if ((v46 & 1) == 0)
      {
        v49 = *(_DWORD *)(v44 + 16);
        if (!v49)
        {
          __break(0xC471u);
          JUMPOUT(0x195EDBBE0);
        }
        *(_DWORD *)(v44 + 16) = v49 - 1;
      }
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
    }
  }
  WebCore::FrameLoader::scrollToFragmentWithParentBoundary(a1, (const WTF::URL *)a2, a5);
  *(_BYTE *)(a1 + 216) = 0;
  WebCore::FrameLoader::checkCompleted((WebCore::FrameLoader *)a1, v50);
  if (a5)
    WebCore::FrameLoader::checkLoadComplete((WTF *)a1, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16));
  v52 = *a3;
  if (*a3)
  {
    *a3 = 0;
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x100);
    *(_DWORD *)v52 = 1;
    *(_OWORD *)(v52 + 8) = 0u;
    *(_OWORD *)(v52 + 24) = 0u;
    *(_OWORD *)(v52 + 40) = 0u;
    *(_OWORD *)(v52 + 56) = 0u;
    *(_OWORD *)(v52 + 72) = 0u;
    *(_OWORD *)(v52 + 88) = 0u;
    *(_OWORD *)(v52 + 104) = 0u;
    *(_OWORD *)(v52 + 120) = 0u;
    *(_OWORD *)(v52 + 136) = 0u;
    *(_OWORD *)(v52 + 152) = 0u;
    *(_OWORD *)(v52 + 168) = 0u;
    *(_OWORD *)(v52 + 184) = 0u;
    *(_OWORD *)(v52 + 200) = 0u;
    *(_OWORD *)(v52 + 216) = 0u;
    *(_OWORD *)(v52 + 232) = 0u;
    *(_QWORD *)(v52 + 248) = 0;
    *(_QWORD *)(v52 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v52);
  }
  v53 = *(_QWORD *)(v18 + 528);
  if (v53 && *(_QWORD *)(v53 + 8))
  {
    v114 = (WebCore::HistoryItem *)v52;
    WebCore::Document::dispatchPopstateEvent(v18, (uint64_t *)&v114);
    v55 = (unsigned int *)v114;
    v114 = 0;
    if (!v55)
      goto LABEL_73;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (v57)
      goto LABEL_73;
    atomic_store(1u, v55);
    WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v55 + 2), v54);
    v84 = (WTF *)v55;
LABEL_151:
    WTF::fastFree(v84, v83);
    goto LABEL_73;
  }
  do
  {
    v81 = __ldaxr((unsigned int *)v52);
    v82 = v81 - 1;
  }
  while (__stlxr(v82, (unsigned int *)v52));
  if (!v82)
  {
    atomic_store(1u, (unsigned int *)v52);
    WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v52 + 8), v51);
    v84 = (WTF *)v52;
    goto LABEL_151;
  }
LABEL_73:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
  if (v31)
  {
    WebCore::Document::enqueueHashchangeEvent((WebCore::Document *)v18, (const WTF::String *)buf, (const WTF::String *)a2);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  }
  v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 56);
  if (v59)
  {
    v60 = *(_QWORD *)(v59 + 8);
    if (v60)
    {
      if (!*(_BYTE *)(v60 + 144))
      {
        v61 = (unsigned int *)(v60 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
        if (*(_BYTE *)(v18 + 3386) || *(_BYTE *)(v18 + 3387))
        {
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v18 + 192), v58);
          v65 = v63;
          if (v63)
          {
            do
              v66 = __ldaxr(v63);
            while (__stlxr(v66 + 1, v63));
          }
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v60 + 296) + 192), v64);
          v68 = v67;
          if (v67)
          {
            do
              v69 = __ldaxr(v67);
            while (__stlxr(v69 + 1, v67));
          }
          isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v65, (const WebCore::SecurityOrigin *)v67);
          v72 = isSameOriginAs;
          do
          {
            v73 = __ldaxr(v68);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v68));
          if (!v74)
          {
            atomic_store(1u, v68);
            v106 = (WTF::StringImpl *)*((_QWORD *)v68 + 6);
            *((_QWORD *)v68 + 6) = 0;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
                WTF::StringImpl::destroy(v106, v71);
              else
                *(_DWORD *)v106 -= 2;
            }
            v107 = (WTF::StringImpl *)*((_QWORD *)v68 + 5);
            *((_QWORD *)v68 + 5) = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v71);
              else
                *(_DWORD *)v107 -= 2;
            }
            v108 = v68[8];
            if ((_DWORD)v108 != -1)
              ((void (*)(WebCore::HistoryItem **, unsigned int *))off_1E33F5B50[v108])(&v114, v68 + 2);
            v68[8] = -1;
            isSameOriginAs = WTF::fastFree((WTF *)v68, v71);
          }
          if (v65)
          {
            do
            {
              v75 = __ldaxr(v65);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v65));
            if (!v76)
            {
              atomic_store(1u, v65);
              v109 = (WTF::StringImpl *)*((_QWORD *)v65 + 6);
              *((_QWORD *)v65 + 6) = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, v71);
                else
                  *(_DWORD *)v109 -= 2;
              }
              v110 = (WTF::StringImpl *)*((_QWORD *)v65 + 5);
              *((_QWORD *)v65 + 5) = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, v71);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = v65[8];
              if ((_DWORD)v111 != -1)
                ((void (*)(WebCore::HistoryItem **, unsigned int *))off_1E33F5B50[v111])(&v114, v65 + 2);
              v65[8] = -1;
              isSameOriginAs = WTF::fastFree((WTF *)v65, v71);
            }
          }
          if ((v72 & 1) == 0)
          {
            v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 120);
            if (v87)
            {
              v88 = *(WebCore::Node **)(v87 + 8);
              if (v88)
                *((_DWORD *)v88 + 6) += 2;
            }
            else
            {
              v88 = 0;
            }
            v89 = WebCore::eventNames((WebCore *)isSameOriginAs);
            WebCore::Event::create((_QWORD *)(v89 + 1104), 0, 0, 0, (uint64_t *)&v114);
            v90 = v114;
            (*(void (**)(WebCore::Node *, WebCore::HistoryItem *))(*(_QWORD *)v88 + 48))(v88, v114);
            if (v90)
            {
              if (*((_DWORD *)v90 + 4) == 1)
                (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v90 + 8))(v90);
              else
                --*((_DWORD *)v90 + 4);
            }
            if (*((_DWORD *)v88 + 6) == 2)
            {
              if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v88);
            }
            else
            {
              *((_DWORD *)v88 + 6) -= 2;
            }
          }
        }
        do
        {
          v77 = __ldaxr(v61);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v61));
        if (!v78)
        {
          atomic_store(1u, v61);
          v104 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v104 = off_1E31FE290;
          *((_QWORD *)v104 + 1) = v61;
          v114 = v104;
          WTF::ensureOnMainThread();
          v105 = v114;
          v114 = 0;
          if (v105)
            (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v105 + 8))(v105);
        }
      }
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 744))(*(_QWORD *)(a1 + 16));
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v79);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v18);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  return result;
}

WebCore::HistoryItem **WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(WebCore::HistoryItem **a1)
{
  WebCore::HistoryItem *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

uint64_t WebCore::FrameLoader::isComplete(WebCore::FrameLoader *this)
{
  return *((unsigned __int8 *)this + 216);
}

unsigned int *WebCore::FrameLoader::setupForReplace(WebCore::FrameLoader *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  NSObject *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _DWORD *v13;
  int v15;
  WebCore::FrameLoader *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  v3 = (_DWORD *)*((_QWORD *)this + 11);
  if (v3)
  {
    ++v3[6];
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v2 + 448))(v2, v3);
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 448))(v2, 0);
  }
  *((_BYTE *)this + 80) = 0;
  WebCore::FrameLoader::provisionalLoadStarted(this);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    ++*(_DWORD *)(v4 + 24);
  v5 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v4;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5);
    else
      --v5[6];
  }
  v6 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v9 = v8[3];
    if (v9)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 40))
          v9 = *(_QWORD *)(v9 + 32);
        else
          v9 = 0;
      }
    }
    v10 = v8[4];
    v11 = *(_QWORD *)(v8[16] + 8) == (_QWORD)v8;
    v12 = *((_QWORD *)this + 12);
    v15 = 134219008;
    v16 = this;
    v17 = 2048;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 1024;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::setupForReplace: Setting provisional document loader (m_provisionalDocumentLoader=%p)", (uint8_t *)&v15, 0x30u);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (v13[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
    else
      --v13[6];
  }
  return WebCore::FrameLoader::detachChildren(this, v7);
}

uint64_t WebCore::FrameLoader::reportLocalLoadFailed(uint64_t this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (!this)
    return this;
  v3 = *(_QWORD *)(this + 296);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v4 += 2;
    if (v5 < 0 || (this = (v5 + 36), __OFADD__(v5, 36)))
    {
      v8 = 0;
      goto LABEL_26;
    }
    v6 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
  }
  else
  {
    v6 = 1;
    this = 36;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v6, (int8x16_t *)"Not allowed to load local resource: ", 0x24u, v4, &v8);
  if (!v8)
  {
LABEL_26:
    __break(0xC471u);
    return this;
  }
  WebCore::Document::addConsoleMessage((_QWORD *)v3, 8, 2, &v8, 0);
  this = (uint64_t)v8;
  v8 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      if (!v4)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v4)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v4 == 2)
    this = WTF::StringImpl::destroy((WTF::StringImpl *)v4, v7);
  else
    *(_DWORD *)v4 -= 2;
LABEL_15:
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::FrameLoader::reportBlockedLoadFailed(WebCore::FrameLoader *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  _BYTE *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  unsigned __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];
  _QWORD v29[2];

  if (WebCore::isIPAddressDisallowed(a2, a2))
  {
    v5 = (_BYTE *)WTF::URL::host(a2);
    if ((v6 & 0x80000000) == 0 && !__OFADD__((_DWORD)v6, 1) && !__OFADD__(v6 + 1, 6))
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v6 + 7), (v6 & 0xFF00000000) != 0, "host \"", 6u, v5, v6, "\"", 1u, &v27);
      v7 = v27;
      if (v27)
      {
        v8 = *(_DWORD *)v27 + 2;
        goto LABEL_18;
      }
LABEL_44:
      __break(0xC471u);
      goto LABEL_47;
    }
LABEL_43:
    v27 = 0;
    goto LABEL_44;
  }
  v9 = WTF::URL::port(a2);
  if ((v9 & 0xFF0000) == 0)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_43;
  }
  v10 = v9;
  v11 = 0;
  v12 = v9;
  do
  {
    ++v11;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  if (v11 < 0
    || (v14 = (v11 + 5), __OFADD__(v11, 5))
    || (WTF::tryFastCompactMalloc((WTF *)(v14 + 20)), (v7 = (WTF::StringImpl *)v29[0]) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x195EDC48CLL);
  }
  v15 = 0;
  *(_DWORD *)v29[0] = 2;
  *((_DWORD *)v7 + 1) = v14;
  *((_QWORD *)v7 + 1) = (char *)v7 + 20;
  *((_QWORD *)v7 + 2) = 0x74726F7000000004;
  *((_BYTE *)v7 + 24) = 32;
  do
  {
    v16 = v10;
    *((_BYTE *)v29 + v15-- + 6) = (v10 % 0xAu) | 0x30;
    v10 /= 0xAu;
  }
  while (v16 > 9);
  if (v15 + 8 <= 7)
    memcpy((char *)v7 + 25, (char *)v29 + v15 + 7, -v15);
  v27 = v7;
  v8 = 4;
LABEL_18:
  *(_DWORD *)v7 = v8;
  v25 = v7;
  WTF::URL::stringCenterEllipsizedToLength(a2);
  v29[0] = "Not allowed to use restricted network ";
  v29[1] = 39;
  v28[0] = ": ";
  v28[1] = 3;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)v29, (uint64_t *)&v25, (uint64_t)v28, (uint64_t *)&v24, &v26);
  if (!v26)
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x195EDC484);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)this + 37);
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    WebCore::Document::addConsoleMessage((_QWORD *)v20, 8, 2, &v26, 0);
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::addConsoleMessage(0, 8, 2, &v26, 0);
  }
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::loadPostRequest(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, unsigned int a4, const WebCore::MouseEvent *a5, uint64_t *a6, uint64_t *a7)
{
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  char v20;
  WTF **v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF *v31;
  __int128 v32;
  char v33;
  _DWORD *v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WebCore::FormData *v38;
  WebCore::FormData *v39;
  char v40;
  WebCore::Frame *v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  WTF::StringImpl *v55;
  WebCore::SecurityOrigin *v56;
  const WebCore::SecurityOrigin *v57;
  char v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  void (*v64)(void);
  _DWORD *v65;
  WTF::StringImpl *v66;
  void *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *result;
  unsigned int v76;
  unsigned int v77;
  bmalloc::api *v78;
  void *v79;
  __int16 v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unsigned int *v85;
  WTF::StringImpl *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  _BOOL4 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  const WebCore::NavigationAction *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  _QWORD *v118;
  uint64_t v119;
  __int16 v120;
  int v121;
  WebCore::Frame *v125;
  WTF *v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[7];
  _OWORD v130[3];
  int v131;
  char v132;
  uint64_t v133;
  _DWORD *v134;
  WebCore::FormData *v135;
  char v136;
  char v137;
  char v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  _BYTE buf[12];
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  _BOOL4 v150;
  uint64_t v151;
  int v152;
  char v153;
  char v154;
  char v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v11 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v13 = v12[3];
    if (v13)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 40))
          v13 = *(_QWORD *)(v13 + 32);
        else
          v13 = 0;
      }
    }
    v14 = v12[4];
    v15 = *(_QWORD *)(v12[16] + 8) == (_QWORD)v12;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v145 = 2048;
    v146 = v13;
    v147 = 2048;
    v148 = v14;
    v149 = 1024;
    v150 = v15;
    _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadPostRequest: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = (WTF::StringImpl *)a2[27];
  if (v19)
    *(_DWORD *)v19 += 2;
  v142 = v19;
  v20 = *((_BYTE *)a2 + 546);
  v120 = *((unsigned __int8 *)a2 + 550);
  v121 = *((unsigned __int8 *)a2 + 549);
  v21 = (WTF **)(a2 + 2);
  v22 = *((_BYTE *)a2 + 200);
  if ((v22 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
    v22 = *((_BYTE *)a2 + 200) | 1;
    *((_BYTE *)a2 + 200) = v22;
    if ((v22 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
      v22 = *((_BYTE *)a2 + 200) | 1;
      *((_BYTE *)a2 + 200) = v22;
    }
  }
  v23 = *((unsigned int *)a2 + 31);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = (WTF::StringImpl **)(a2[14] + 8);
    while (*((_WORD *)v25 - 4) != 26)
    {
      ++v24;
      v25 += 2;
      if (v23 == v24)
        goto LABEL_14;
    }
    if (v24 >= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDD164);
    }
    v26 = *v25;
    if (*v25)
    {
      *(_DWORD *)v26 += 2;
      v22 = *((_BYTE *)a2 + 200);
    }
  }
  else
  {
LABEL_14:
    v26 = 0;
  }
  v141 = v26;
  if ((v22 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
    *((_BYTE *)a2 + 200) |= 1u;
  }
  v27 = *((unsigned int *)a2 + 31);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = (WTF::StringImpl **)(a2[14] + 8);
    while (*((_WORD *)v29 - 4) != 53)
    {
      ++v28;
      v29 += 2;
      if (v27 == v28)
        goto LABEL_24;
    }
    if (v28 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDD16CLL);
    }
    v30 = *v29;
    if (*v29)
      *(_DWORD *)v30 += 2;
  }
  else
  {
LABEL_24:
    v30 = 0;
  }
  v140 = v30;
  v31 = *v21;
  if (*v21)
    *(_DWORD *)v31 += 2;
  v126 = v31;
  v32 = *(_OWORD *)(a2 + 5);
  v127 = *(_OWORD *)(a2 + 3);
  v128 = v32;
  v129[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v129);
  v129[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v129[6] = *(_QWORD *)buf;
  memset(v130, 0, sizeof(v130));
  v131 = 0x10000;
  v33 = v132 & 0x80 | 4;
  v132 = v33;
  v133 = 0;
  v34 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v34 += 2;
    v33 = v132;
  }
  v134 = v34;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v35 = v138 & 0xE0 | 5;
  v138 = v35;
  v132 = v33 | 2;
  v139 = 0;
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v126, a3);
    v35 = v138;
  }
  if ((v35 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v126);
    v138 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v130, (WTF::StringImpl *)0x35, &v140);
  v138 &= ~2u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = *(WTF::StringImpl **)buf;
  WebCore::ResourceRequestBase::setHTTPMethod(&v126, &v143);
  v37 = v143;
  v143 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  if ((a2[25] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
    v112 = *((_BYTE *)a2 + 200) | 1;
    *((_BYTE *)a2 + 200) = v112;
    if ((v112 & 4) != 0)
      goto LABEL_40;
LABEL_171:
    WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)(a2 + 2));
    *((_BYTE *)a2 + 200) |= 4u;
    goto LABEL_40;
  }
  if ((a2[25] & 4) == 0)
    goto LABEL_171;
LABEL_40:
  v38 = (WebCore::FormData *)a2[23];
  if (v38)
    ++*(_DWORD *)v38;
  if ((v138 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v126);
    v138 |= 1u;
  }
  v39 = v135;
  v135 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      WebCore::FormData::~FormData(v39, v36);
      bmalloc::api::isoDeallocate(v78, v79);
    }
    else
    {
      --*(_DWORD *)v39;
    }
  }
  v40 = v138;
  v138 = v138 & 0xF3 | 4;
  if ((v40 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v126);
    v138 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v130, (WTF::StringImpl *)0x1A, &v141);
  v138 &= ~2u;
  if (*a6)
    goto LABEL_50;
  if (!v142)
  {
    v41 = 0;
    goto LABEL_60;
  }
  if (!*((_DWORD *)v142 + 1))
    goto LABEL_50;
  WebCore::FrameLoader::findFrameForNavigation((WTF::StringImpl *)a1, (const WTF::AtomString *)&v142, 0, &v125);
  v41 = v125;
  if (v125 && *((_BYTE *)v125 + 144))
  {
    v125 = 0;
    v116 = (unsigned int *)((char *)v41 + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (v117 == 1)
    {
      atomic_store(1u, v116);
      v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v118 = off_1E31FE290;
      v118[1] = v116;
      *(_QWORD *)buf = v118;
      WTF::ensureOnMainThread();
      v119 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
    }
LABEL_50:
    v41 = 0;
    goto LABEL_51;
  }
  v125 = 0;
LABEL_51:
  if (!v142)
  {
LABEL_60:
    v43 = 0;
    goto LABEL_61;
  }
  if (v41)
    v42 = 1;
  else
    v42 = *((_DWORD *)v142 + 1) == 0;
  v43 = !v42;
LABEL_61:
  v44 = *a2;
  *(_DWORD *)(v44 + 24) = *(_DWORD *)(*a2 + 24) + 2;
  WebCore::FrameLoader::updateRequestAndAddExtraFields(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (WebCore::FrameLoader *)&v126, (const WebCore::Page *)1, a4, 1, 0, v43, (WebCore::ResourceRequest *)v44);
  if (*(_DWORD *)(v44 + 24) == 2)
  {
    if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v44);
  }
  else
  {
    *(_DWORD *)(v44 + 24) -= 2;
  }
  v45 = *(_QWORD *)(v16 + 296);
  if (v45)
  {
    *(_DWORD *)(v45 + 24) += 2;
    v46 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v45 + 192));
    if (v46)
    {
      v47 = v46;
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 + 1, v46));
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v46, (WebCore::ResourceRequest *)&v126, 0, 0);
      if (!atomic_load(v47))
      {
        __break(0xC471u);
        JUMPOUT(0x195EDCF68);
      }
      do
        v50 = __ldaxr(v47);
      while (__stlxr(v50 - 1, v47));
    }
    else
    {
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)&v126, 0, 0);
    }
    if (*(_DWORD *)(v45 + 24) == 2)
    {
      if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v45);
    }
    else
    {
      *(_DWORD *)(v45 + 24) -= 2;
    }
  }
  v51 = *a2;
  v52 = *((_BYTE *)a2 + 568);
  v53 = *((_BYTE *)a2 + 569);
  v54 = *((_BYTE *)a2 + 556);
  v143 = 0;
  WebCore::NavigationAction::NavigationAction((uint64_t)buf, v51, (uint64_t)&v126, v52, v53, a4, 1, a5, v54, (_DWORD **)&v143);
  v153 = v20;
  v154 = *((_BYTE *)a2 + 547);
  v152 = *((_DWORD *)a2 + 138);
  v155 = *((_BYTE *)a2 + 550);
  if (!v142 || !*((_DWORD *)v142 + 1))
  {
    v56 = (WebCore::SecurityOrigin *)a2[1];
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v16 + 296) + 192), v55);
    if (WebCore::SecurityOrigin::isSameOriginDomain(v56, v57)
      && (WebCore::FrameLoader::dispatchNavigateEvent(*(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296), (WTF::URL *)(a2 + 2), a4, v151, *((unsigned __int8 *)a2 + 576), 0, *a6) & 1) == 0)
    {
      v68 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
      v64 = *(void (**)(void))(*(_QWORD *)v68 + 8);
    }
    else
    {
      v58 = *(_BYTE *)(a1 + 152);
      v59 = *((unsigned __int8 *)a2 + 545);
      do
        v60 = __ldaxr(v17);
      while (__stlxr(v60 + 1, v17));
      v61 = *a7;
      *a7 = 0;
      v62 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v62 = &off_1E33F6078;
      *(_QWORD *)(v62 + 8) = a1;
      *(_BYTE *)(v62 + 16) = v58;
      *(_QWORD *)(v62 + 24) = v16;
      *(_QWORD *)(v62 + 32) = v61;
      v143 = (WTF::StringImpl *)v62;
      WebCore::FrameLoader::loadWithNavigationAction(a1, (WebCore::ResourceRequest *)&v126, (const WebCore::NavigationAction *)buf, a4, a6, v121 != 0, v59, (uint64_t *)&v143);
      if (!v143)
      {
LABEL_86:
        WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v63);
        if (!v41)
          goto LABEL_90;
        goto LABEL_87;
      }
      v64 = *(void (**)(void))(*(_QWORD *)v143 + 8);
    }
    v64();
    goto LABEL_86;
  }
  if (v41)
  {
    v65 = (_DWORD *)*((_QWORD *)v41 + 35);
    ++*v65;
    WebCore::FrameLoader::loadWithNavigationAction((uint64_t)v65, (WebCore::ResourceRequest *)&v126, (const WebCore::NavigationAction *)buf, a4, a6, v121 != 0, *((unsigned __int8 *)a2 + 545), a7);
    if (!*v65)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDD08CLL);
    }
    --*v65;
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v66);
LABEL_87:
    v69 = (unsigned int *)((char *)v41 + 8);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v69);
      v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v110 = off_1E31FE290;
      v110[1] = v69;
      *(_QWORD *)buf = v110;
      WTF::ensureOnMainThread();
      v111 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v111)
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
    }
    goto LABEL_90;
  }
  v80 = v120;
  if (WebCore::Document::shouldForceNoOpenerBasedOnCOOP((WebCore::Document *)*a2))
  {
    WTF::AtomStringImpl::add();
    v82 = v142;
    v142 = v143;
    if (v82)
    {
      if (*(_DWORD *)v82 != 2)
      {
        v80 = 0;
        *(_DWORD *)v82 -= 2;
        goto LABEL_115;
      }
      WTF::StringImpl::destroy(v82, v81);
    }
    v80 = 0;
  }
LABEL_115:
  v83 = *(_QWORD *)(v16 + 296);
  if (v83)
    *(_DWORD *)(v83 + 24) += 2;
  if ((*(_QWORD *)(*(_QWORD *)(v83 + 680) + 664) & 0x20000000000) == 0)
    goto LABEL_140;
  if ((a2[25] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
    *((_BYTE *)a2 + 200) |= 1u;
  }
  if (!WTF::URL::protocolIs())
  {
LABEL_140:
    v93 = 0;
    goto LABEL_141;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v16 + 296) + 192), v84);
  v87 = v85;
  if (v85)
  {
    do
      v88 = __ldaxr(v85);
    while (__stlxr(v88 + 1, v85));
  }
  WebCore::Document::topOrigin(*(WebCore::Document **)(v16 + 296), v86);
  v90 = v89;
  do
    v91 = __ldaxr(v89);
  while (__stlxr(v91 + 1, v89));
  v93 = !WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v87, (const WebCore::SecurityOrigin *)v89);
  do
  {
    v94 = __ldaxr(v90);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, v90));
  if (v95)
  {
    if (!v87)
      goto LABEL_141;
    goto LABEL_129;
  }
  atomic_store(1u, v90);
  v113 = (WTF::StringImpl *)*((_QWORD *)v90 + 6);
  *((_QWORD *)v90 + 6) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v92);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)v90 + 5);
  *((_QWORD *)v90 + 5) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v92);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = v90[8];
  if ((_DWORD)v115 != -1)
    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F5B50[v115])(&v143, v90 + 2);
  v90[8] = -1;
  WTF::fastFree((WTF *)v90, v92);
  if (v87)
  {
    do
    {
LABEL_129:
      v96 = __ldaxr(v87);
      v97 = v96 - 1;
    }
    while (__stlxr(v97, v87));
    if (!v97)
    {
      atomic_store(1u, v87);
      v98 = (WTF::StringImpl *)*((_QWORD *)v87 + 6);
      *((_QWORD *)v87 + 6) = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v92);
        else
          *(_DWORD *)v98 -= 2;
      }
      v99 = (WTF::StringImpl *)*((_QWORD *)v87 + 5);
      *((_QWORD *)v87 + 5) = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v92);
        else
          *(_DWORD *)v99 -= 2;
      }
      v100 = v87[8];
      if ((_DWORD)v100 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F5B50[v100])(&v143, v87 + 2);
      v87[8] = -1;
      WTF::fastFree((WTF *)v87, v92);
    }
  }
LABEL_141:
  if (*(_DWORD *)(v83 + 24) == 2)
  {
    if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v83);
  }
  else
  {
    *(_DWORD *)(v83 + 24) -= 2;
  }
  if (!v93)
    goto LABEL_147;
  WTF::AtomStringImpl::add();
  v102 = v142;
  v142 = v143;
  if (v102)
  {
    if (*(_DWORD *)v102 != 2)
    {
      v80 = 0;
      *(_DWORD *)v102 -= 2;
      goto LABEL_147;
    }
    WTF::StringImpl::destroy(v102, v101);
  }
  v80 = 0;
LABEL_147:
  v103 = *(const WebCore::NavigationAction **)(a1 + 24);
  do
    v104 = __ldaxr(v17);
  while (__stlxr(v104 + 1, v17));
  v105 = *a7;
  *a7 = 0;
  v106 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v106 = &off_1E33F6050;
  *(_QWORD *)(v106 + 8) = a1;
  *(_QWORD *)(v106 + 16) = v16;
  *(_WORD *)(v106 + 24) = v121 | (v80 << 8);
  *(_QWORD *)(v106 + 32) = v105;
  v143 = (WTF::StringImpl *)v106;
  WebCore::PolicyChecker::checkNewWindowPolicy(v103, (const WebCore::NavigationAction *)buf, (uint64_t)&v126, a6, (_DWORD **)&v142, (uint64_t *)&v143);
  v108 = v143;
  v143 = 0;
  if (v108)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v108 + 8))(v108);
  WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v107);
LABEL_90:
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v126, v67);
  v73 = v140;
  v140 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v72);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = v141;
  v141 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v72);
    else
      *(_DWORD *)v74 -= 2;
  }
  result = v142;
  v142 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v72);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v76 = __ldaxr(v17);
    v77 = v76 - 1;
  }
  while (__stlxr(v77, v17));
  if (!v77)
  {
    atomic_store(1u, v17);
    v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v109 = off_1E31FE290;
    v109[1] = v17;
    *(_QWORD *)buf = v109;
    WTF::ensureOnMainThread();
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FrameLoader::updateRequestAndAddExtraFields(uint64_t result, uint64_t a2, WebCore::FrameLoader *this, const WebCore::Page *a4, unsigned int a5, int a6, char a7, int a8, WebCore::ResourceRequest *a9)
{
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  uint64_t v19;
  WebCore::FrameLoader *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WebCore::ResourceRequest *v27;
  char v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  int v39;
  unsigned __int16 *v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned __int16 *v55;
  int v56;
  WTF::StringImpl *v57;
  char v58;
  void *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  BOOL v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  unsigned __int16 *v77;
  uint64_t v78;
  int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  int v82;
  unsigned __int16 *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF *v94;
  void *v95;
  WTF::StringImpl *v96;
  int v97;
  int v98;
  int v99;
  uint64_t *v100;
  WebCore::ResourceRequest *v101;
  uint64_t v102;
  uint64_t *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unsigned int *v108;
  unsigned int v109;
  int v110;
  int v111;
  char v112;
  char v113;
  WebCore::ResourceRequest *v114;
  int v115;
  int v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  int v122;
  uint64_t v123;
  WebCore::FrameLoader *v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  unsigned __int8 v128;
  WTF::StringImpl *v129;

  v124 = (WebCore::FrameLoader *)result;
  if (*(_BYTE *)(result + 349) == 1)
    return result;
  v11 = (int)a4;
  v13 = a2;
  if (*(_BYTE *)(a2 + 144))
    v14 = 0;
  else
    v14 = a2;
  v123 = v14;
  if (*(_BYTE *)(a2 + 144))
  {
    v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 296);
    if (v15)
    {
      v16 = 0;
      *(_DWORD *)(v15 + 24) += 2;
      goto LABEL_8;
    }
  }
  v16 = 1;
LABEL_8:
  if ((_DWORD)a4)
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2)
      v17 = 1;
    else
      v17 = a8;
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_BYTE *)this + 184);
  if ((v18 & 1) == 0)
  {
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v18 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v18;
  }
  v19 = *((_QWORD *)this + 5);
  if (!v19 || !*(_DWORD *)(v19 + 4))
  {
    if (v17)
    {
      v20 = this;
      if ((v18 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v18 = *((_BYTE *)this + 184) | 1;
        *((_BYTE *)this + 184) = v18;
        v20 = this;
      }
    }
    else
    {
      if (!v15)
        goto LABEL_25;
      v20 = (WebCore::FrameLoader *)(v15 + 1008);
    }
    if ((v18 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    result = WTF::equal(*((WTF **)this + 5), *(const WTF::StringImpl **)v20, this);
    if ((result & 1) == 0)
    {
      v22 = *(const WTF::StringImpl **)v20;
      if (*(_QWORD *)v20)
        *(_DWORD *)v22 += 2;
      result = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v22;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
        else
          *(_DWORD *)result -= 2;
      }
      v23 = *(_OWORD *)((char *)v20 + 24);
      *((_OWORD *)this + 3) = *(_OWORD *)((char *)v20 + 8);
      *((_OWORD *)this + 4) = v23;
      *((_BYTE *)this + 184) &= ~2u;
    }
  }
LABEL_25:
  v24 = *(_QWORD *)(v13 + 24);
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v26 = 0;
      ++*(_DWORD *)v25;
      goto LABEL_28;
    }
  }
  else
  {
    v25 = 0;
  }
  v26 = 1;
LABEL_28:
  if (*((_BYTE *)this + 145))
    goto LABEL_33;
  v27 = a9;
  if (!a9)
  {
    v27 = (WebCore::ResourceRequest *)v15;
    if (v15)
    {
      v27 = (WebCore::ResourceRequest *)v15;
      if (v11)
      {
        v105 = *(_QWORD *)(v123 + 56);
        if (v105 && (v107 = *(WTF::StringImpl **)(v105 + 8)) != 0 && !*((_BYTE *)v107 + 144))
        {
          v108 = (unsigned int *)((char *)v107 + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 + 1, v108));
        }
        else
        {
          v125 = 0;
          v27 = (WebCore::ResourceRequest *)v15;
          if ((*((_DWORD *)v124 + 16) - 1) > 1)
            goto LABEL_32;
          v106 = *(_QWORD *)(v123 + 160);
          if (v106)
          {
            v117 = *(unsigned int **)(v106 + 8);
            if (v117)
            {
              if (!*((_BYTE *)v117 + 144))
              {
                v118 = v117 + 2;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 + 1, v118));
                v129 = (WTF::StringImpl *)v117;
                WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::operator=((uint64_t *)&v125, (uint64_t *)&v129);
                if (v129)
                  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v129 + 2);
              }
            }
          }
          v107 = v125;
          v27 = (WebCore::ResourceRequest *)v15;
          if (!v125)
            goto LABEL_32;
        }
        v120 = v13;
        v110 = a6;
        v111 = v11;
        v112 = v26;
        v113 = v16;
        v114 = (WebCore::ResourceRequest *)*((_QWORD *)v107 + 37);
        v125 = 0;
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v107 + 2);
        v27 = v114;
        v16 = v113;
        v26 = v112;
        v11 = v111;
        a6 = v110;
        v13 = v120;
      }
    }
  }
LABEL_32:
  result = WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)this, v27, (const WebCore::Document *)v25, a4);
LABEL_33:
  v28 = *((_BYTE *)this + 184);
  if ((a7 & 1) != 0)
  {
    v30 = v123;
  }
  else
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v28 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v28;
    }
    v29 = *((_BYTE *)this + 148);
    v30 = v123;
    if (((v17 ^ ((v29 & 1) == 0)) & 1) == 0)
    {
      *((_BYTE *)this + 148) = v29 & 0xFE | v17;
      v28 &= ~2u;
      *((_BYTE *)this + 184) = v28;
    }
  }
  if ((v28 & 1) == 0)
  {
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v28 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v28;
  }
  v31 = *((unsigned __int8 *)this + 144);
  v122 = a6;
  if (v25 && *(_BYTE *)(v25 + 1092))
  {
    v47 = v11;
    v50 = v26;
    v51 = v16;
    a5 = 8;
  }
  else
  {
    if (*((_BYTE *)this + 144))
      goto LABEL_79;
    if (*((_BYTE *)v124 + 345))
    {
      v47 = v11;
      v50 = v26;
      v51 = v16;
      v52 = *((unsigned __int8 *)v124 + 344);
      goto LABEL_74;
    }
    if (v11)
    {
      v47 = v11;
      v50 = v26;
      v51 = v16;
      if (a5 <= 9)
      {
        v52 = 1;
        if (((1 << a5) & 0x310) != 0)
          goto LABEL_74;
      }
      if ((v28 & 1) == 0)
      {
        v116 = *((unsigned __int8 *)this + 144);
        result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v31 = v116;
        *((_BYTE *)this + 184) |= 1u;
      }
      v72 = *((unsigned int *)this + 27);
      if (!(_DWORD)v72)
      {
        v52 = 0;
        goto LABEL_74;
      }
      v73 = (unsigned __int16 *)*((_QWORD *)this + 12);
      v74 = v73;
      v75 = *((unsigned int *)this + 27);
      while (1)
      {
        v76 = *v74;
        v74 += 8;
        if (v76 == 43)
          break;
        if (!--v75)
        {
          v77 = (unsigned __int16 *)*((_QWORD *)this + 12);
          v78 = *((unsigned int *)this + 27);
          while (1)
          {
            v79 = *v77;
            v77 += 8;
            if (v79 == 44)
              goto LABEL_73;
            if (!--v78)
            {
              v80 = (unsigned __int16 *)*((_QWORD *)this + 12);
              v81 = *((unsigned int *)this + 27);
              while (1)
              {
                v82 = *v80;
                v80 += 8;
                if (v82 == 45)
                  goto LABEL_73;
                if (!--v81)
                {
                  v83 = (unsigned __int16 *)*((_QWORD *)this + 12);
                  v84 = *((unsigned int *)this + 27);
                  while (1)
                  {
                    v85 = *v83;
                    v83 += 8;
                    if (v85 == 46)
                      goto LABEL_73;
                    if (!--v84)
                    {
                      v86 = v72 - 1;
                      do
                      {
                        v87 = *v73;
                        v73 += 8;
                        v52 = v87 == 47;
                      }
                      while (v87 != 47 && v86-- != 0);
                      goto LABEL_74;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if ((v28 & 1) == 0)
      {
        v99 = *((unsigned __int8 *)this + 144);
        result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v31 = v99;
        *((_BYTE *)this + 184) |= 1u;
      }
      v32 = *((unsigned int *)this + 27);
      if (!(_DWORD)v32)
      {
LABEL_62:
        v47 = v11;
        v48 = *((_QWORD *)v124 + 11);
        if (v48)
        {
          v49 = v31;
          v50 = v26;
          ++*(_DWORD *)(v48 + 24);
          result = WebCore::DocumentLoader::isLoadingInAPISense((WebCore::DocumentLoader *)v48);
          v51 = v16;
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v48 + 344) & 1) == 0)
            {
              result = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v48 + 160));
              *(_BYTE *)(v48 + 344) |= 1u;
            }
            if (*(_BYTE *)(v48 + 304) == 3)
              v52 = 2;
            else
              v52 = *(unsigned __int8 *)(v48 + 304);
          }
          else
          {
            v52 = 0;
          }
          v31 = v49;
          if (*(_DWORD *)(v48 + 24) == 1)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
            v31 = v49;
          }
          else
          {
            --*(_DWORD *)(v48 + 24);
          }
        }
        else
        {
          v50 = v26;
          v51 = v16;
          v52 = 0;
        }
        v30 = v123;
        goto LABEL_74;
      }
      v33 = (unsigned __int16 *)*((_QWORD *)this + 12);
      v34 = v33;
      v35 = *((unsigned int *)this + 27);
      while (1)
      {
        v36 = *v34;
        v34 += 8;
        if (v36 == 43)
          break;
        if (!--v35)
        {
          v37 = (unsigned __int16 *)*((_QWORD *)this + 12);
          v38 = *((unsigned int *)this + 27);
          while (1)
          {
            v39 = *v37;
            v37 += 8;
            if (v39 == 44)
              goto LABEL_72;
            if (!--v38)
            {
              v40 = (unsigned __int16 *)*((_QWORD *)this + 12);
              v41 = *((unsigned int *)this + 27);
              while (1)
              {
                v42 = *v40;
                v40 += 8;
                if (v42 == 45)
                  goto LABEL_72;
                if (!--v41)
                {
                  v43 = (unsigned __int16 *)*((_QWORD *)this + 12);
                  v44 = *((unsigned int *)this + 27);
                  while (1)
                  {
                    v45 = *v43;
                    v43 += 8;
                    if (v45 == 46)
                      goto LABEL_72;
                    if (!--v44)
                    {
                      while (1)
                      {
                        v46 = *v33;
                        v33 += 8;
                        if (v46 == 47)
                          goto LABEL_72;
                        if (!--v32)
                          goto LABEL_62;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v47 = v11;
      v50 = v26;
      v51 = v16;
    }
  }
LABEL_73:
  v52 = 1;
LABEL_74:
  v28 = *((_BYTE *)this + 184);
  if ((v28 & 1) == 0)
  {
    v98 = v31;
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v31 = v98;
    v28 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v28;
  }
  if (*((unsigned __int8 *)this + 144) != v52)
  {
    *((_BYTE *)this + 144) = v52;
    v28 &= ~2u;
    *((_BYTE *)this + 184) = v28;
  }
  v16 = v51;
  v26 = v50;
  v11 = v47;
  a6 = v122;
LABEL_79:
  if ((v28 & 1) == 0)
  {
    v97 = v31;
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v31 = v97;
    v28 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v28;
  }
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    goto LABEL_85;
  if ((v28 & 1) == 0)
  {
    v115 = v31;
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v31 = v115;
    v28 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v28;
  }
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
LABEL_85:
    if (v31)
      goto LABEL_88;
    if ((v28 & 1) == 0)
    {
      result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if (*((_BYTE *)this + 144) != 1)
      goto LABEL_88;
    if (a5 == 4)
    {
      v100 = WebCore::HTTPHeaderValues::maxAge0((WebCore::HTTPHeaderValues *)result);
      v101 = this;
      v102 = 15;
    }
    else
    {
      if (a5 != 8)
      {
LABEL_88:
        if (*((_BYTE *)v124 + 347))
          WebCore::ResourceRequestBase::setPriority(this, *((unsigned __int8 *)v124 + 346));
        v125 = 0;
        WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)this, (WebCore::ResourceRequest *)&v125, this);
        result = (uint64_t)v125;
        v125 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
          else
            *(_DWORD *)result -= 2;
        }
        v54 = *((unsigned int *)this + 27);
        if ((_DWORD)v54)
        {
          v55 = (unsigned __int16 *)*((_QWORD *)this + 12);
          while (1)
          {
            v56 = *v55;
            v55 += 8;
            if (v56 == 86)
              break;
            if (!--v54)
              goto LABEL_97;
          }
        }
        else
        {
LABEL_97:
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          WebCore::FrameLoader::userAgent(v124, this, (uint64_t *)&v125);
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          WebCore::HTTPHeaderMap::set((WebCore::FrameLoader *)((char *)this + 96), (WTF::StringImpl *)0x56, &v125);
          *((_BYTE *)this + 184) &= ~2u;
          result = (uint64_t)v125;
          v125 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v57);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v11)
        {
          WebCore::CachedResourceRequest::acceptHeaderValueFromType(0, &v125);
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          WebCore::HTTPHeaderMap::set((WebCore::FrameLoader *)((char *)this + 96), 0, &v125);
          *((_BYTE *)this + 184) &= ~2u;
          result = (uint64_t)v125;
          v125 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v89);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v15)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v30 + 136) + 688) & 0x1000000000) != 0)
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v30 + 280) + 16) + 1080))(*(_QWORD *)(*(_QWORD *)(v30 + 280) + 16));
            if ((result & 1) == 0)
            {
              result = WebCore::PermissionsPolicy::isFeatureEnabled(0xFu, (_QWORD *)v15, 0);
              if ((_DWORD)result)
                v58 = 64;
              else
                v58 = 0;
              *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0xBF | v58;
            }
          }
          if (!*((_DWORD *)this + 35))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v129 = v125;
            WebCore::Document::encoding(v15, v59, &v125);
            WebCore::ResourceRequestBase::setResponseContentDispositionEncodingFallbackArray(this, (const WTF::String *)&v129, (const WTF::String *)&v125, (const WTF::String *)(*(_QWORD *)(v30 + 136) + 344));
            v61 = v125;
            v125 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v60);
              else
                *(_DWORD *)v61 -= 2;
            }
            result = (uint64_t)v129;
            v129 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v60);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
        v62 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
        if (v62)
          v63 = *(_BYTE *)(v62 + 144) == 0;
        else
          v63 = 0;
        if (v63)
        {
          v64 = (unsigned int *)(v62 + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 + 1, v64));
          if (a6)
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v62 + 280) + 88);
            if (v66)
            {
              ++*(_DWORD *)(v66 + 24);
              v67 = *(unsigned __int8 *)(v66 + 3533);
              v68 = *((_BYTE *)this + 184);
              if ((v68 & 1) == 0)
              {
                result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
                v68 = *((_BYTE *)this + 184) | 1;
                *((_BYTE *)this + 184) = v68;
              }
              v69 = *((_BYTE *)this + 148);
              if ((v67 != 0) == ((v69 & 4) == 0))
              {
                *((_BYTE *)this + 148) = v69 & 0xFB | (4 * (v67 != 0));
                *((_BYTE *)this + 184) = v68 & 0xFD;
              }
              if (*(_DWORD *)(v66 + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
              else
                --*(_DWORD *)(v66 + 24);
            }
          }
          do
          {
            v70 = __ldaxr(v64);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v64));
          if (!v71)
          {
            atomic_store(1u, v64);
            v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v96 = off_1E31FE290;
            *((_QWORD *)v96 + 1) = v64;
            v125 = v96;
            WTF::ensureOnMainThread();
            result = (uint64_t)v125;
            v125 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
        if (v25 && v11)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 16);
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WebCore::FrameLoader *, uint64_t))(*(_QWORD *)v90 + 1480))(&v125, v90, this, 1);
          v92 = v128;
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          result = (uint64_t)v125;
          if (v125)
            *(_DWORD *)v125 += 2;
          v93 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = result;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
            {
              WTF::StringImpl::destroy(v93, v91);
              result = (uint64_t)v125;
            }
            else
            {
              *(_DWORD *)v93 -= 2;
            }
          }
          *(_OWORD *)((char *)this + 8) = v126;
          *(_OWORD *)((char *)this + 24) = v127;
          *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0xDF | (32 * (v92 != 0));
          *((_BYTE *)this + 184) &= ~2u;
          v125 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v91);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_138;
      }
      v103 = WebCore::HTTPHeaderValues::noCache((WebCore::HTTPHeaderValues *)result);
      v104 = WebCore::ResourceRequestBase::setHTTPHeaderField(this, (WTF::StringImpl *)0xF, (WTF::StringImpl **)v103);
      v100 = WebCore::HTTPHeaderValues::noCache(v104);
      v101 = this;
      v102 = 56;
    }
    WebCore::ResourceRequestBase::setHTTPHeaderField(v101, (WTF::StringImpl *)v102, (WTF::StringImpl **)v100);
    goto LABEL_88;
  }
LABEL_138:
  if ((v26 & 1) == 0)
  {
    if (*(_DWORD *)v25 == 1)
    {
      WebCore::Page::~Page((WebCore::Page *)v25);
      result = WTF::fastFree(v94, v95);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  if ((v16 & 1) == 0)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::NavigationAction::setPrivateClickMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 544;
  if (*(_BYTE *)(a1 + 856))
    return WebCore::PrivateClickMeasurement::operator=(v3, a2);
  result = WebCore::PrivateClickMeasurement::PrivateClickMeasurement(v3, a2);
  *(_BYTE *)(a1 + 856) = 1;
  return result;
}

uint64_t WebCore::FrameLoader::dispatchNavigateEvent(WebCore::Node *this, WTF::URL *a2, int a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  uint64_t v8;
  _DWORD *v10;
  unsigned __int8 v16;
  void *v17;
  WebCore::Navigation *v18;

  if (!this)
    return 1;
  *((_DWORD *)this + 6) += 2;
  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 688) & 0x4000) == 0 || (v10 = (_DWORD *)*((_QWORD *)this + 87)) == 0)
  {
    v8 = 1;
    goto LABEL_4;
  }
  ++v10[6];
  if (a4 || (a6 & 1) == 0 && !WTF::URL::hasFetchScheme(a2))
    goto LABEL_11;
  if (a5 == 2)
  {
    v16 = 1;
  }
  else
  {
    if (a5 != 1)
    {
      if ((a3 - 1) >= 3)
      {
        if ((a3 - 4) <= 5)
          v16 = 0x20200000002uLL >> (8 * (a3 - 4));
        else
          v16 = 0;
        goto LABEL_23;
      }
LABEL_11:
      v8 = 1;
      goto LABEL_12;
    }
    v16 = 0;
  }
LABEL_23:
  WebCore::LocalDOMWindow::protectedNavigation((uint64_t)v10, (uint64_t *)&v18);
  v8 = WebCore::Navigation::dispatchPushReplaceReloadNavigateEvent((uint64_t)v18, (uint64_t)a2, v16, a6, a7, 0);
  WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(&v18, v17);
LABEL_12:
  if (v10[6] == 1)
    (*(void (**)(_DWORD *, WTF::URL *))(*(_QWORD *)v10 + 72))(v10, a2);
  else
    --v10[6];
LABEL_4:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v8;
}

uint64_t *WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(uint64_t *a1, WTF *a2, WTF *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v6, a2, a3);
  v10 = v6;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *a1 = WebCore::SharedBuffer::SharedBuffer(v7, &v10);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v10, v8);
}

uint64_t WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded(uint64_t this, WebCore::ResourceRequest *a2, const WebCore::Document *a3, const WebCore::Page *a4)
{
  WTF::URL *v5;
  unsigned __int8 v7;
  char v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::UserContentURLPattern *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  WebCore::Quirks *v17;

  if (*(_BYTE *)(this + 145))
    return this;
  v5 = (WTF::URL *)this;
  if (a2)
  {
    if ((*(_BYTE *)(this + 184) & 1) == 0)
    {
      this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
      *((_BYTE *)v5 + 184) |= 1u;
    }
    if (*(_QWORD *)v5)
    {
      if (*(_DWORD *)(*(_QWORD *)v5 + 4))
      {
        this = WTF::URL::isAboutBlank(v5);
        if ((this & 1) == 0)
        {
          this = WTF::URL::isAboutSrcDoc(v5);
          if ((this & 1) == 0)
          {
            v9 = (const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)this);
            this = WTF::equalIgnoringASCIICase(*(WTF **)v5, *v9, v10);
            if ((this & 1) == 0)
            {
              if (!a3)
                goto LABEL_24;
              if ((*((_BYTE *)v5 + 184) & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest(v5);
                *((_BYTE *)v5 + 184) |= 1u;
              }
              v11 = *((unsigned int *)a3 + 405);
              if ((_DWORD)v11)
              {
                v12 = (WebCore::UserContentURLPattern *)*((_QWORD *)a3 + 201);
                v13 = 32 * v11;
                while (1)
                {
                  if (!*((_BYTE *)v12 + 24))
                  {
                    if (WebCore::UserContentURLPattern::matchesScheme(v12, v5))
                    {
                      if (WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v12, v5))
                      {
                        this = WebCore::UserContentURLPattern::matchesPath(v12, v5);
                        if ((this & 1) != 0)
                          break;
                      }
                    }
                  }
                  v12 = (WebCore::UserContentURLPattern *)((char *)v12 + 32);
                  v13 -= 32;
                  if (!v13)
                    goto LABEL_24;
                }
              }
              else
              {
LABEL_24:
                v14 = *((_QWORD *)a2 + 66);
                if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
                  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v15 + 280) + 16) + 1200))(*(_QWORD *)(*(_QWORD *)(v15 + 280) + 16));
                else
                  v16 = 1;
                if (!WTF::URL::protocolIs()
                  || (v16 & 1) != 0
                  || (this = WTF::linkedOnOrAfterSDKWithBehavior(), (_DWORD)this))
                {
                  v17 = (WebCore::Quirks *)*((_QWORD *)a2 + 86);
                  if (!v17)
                    v17 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(a2);
                  if ((*((_BYTE *)v5 + 184) & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest(v5);
                    *((_BYTE *)v5 + 184) |= 1u;
                  }
                  this = WebCore::Quirks::needsLaxSameSiteCookieQuirk(v17, v5);
                  if ((this & 1) == 0)
                  {
                    if ((*((_BYTE *)v5 + 184) & 1) == 0)
                    {
                      WebCore::ResourceRequest::doUpdateResourceRequest(v5);
                      *((_BYTE *)v5 + 184) |= 1u;
                    }
                    this = WebCore::Document::isSameSiteForCookies(a2, v5);
                    if ((_DWORD)this)
                      v7 = 1;
                    else
                      v7 = 2;
                    goto LABEL_8;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v7 = 1;
LABEL_8:
  v8 = *((_BYTE *)v5 + 184);
  if ((v8 & 1) == 0)
  {
    this = WebCore::ResourceRequest::doUpdateResourceRequest(v5);
    v8 = *((_BYTE *)v5 + 184) | 1;
    *((_BYTE *)v5 + 184) = v8;
  }
  if (*((unsigned __int8 *)v5 + 145) != v7)
  {
    *((_BYTE *)v5 + 145) = v7;
    *((_BYTE *)v5 + 184) = v8 & 0xFD;
  }
  return this;
}

WTF::StringImpl *WebCore::DocumentLoader::setClientRedirectSourceForHistory(WebCore::DocumentLoader *this, const WTF::String *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FrameLoader::executeJavaScriptURL(WebCore::FrameLoader *this, const WTF::URL *a2, const WebCore::NavigationAction *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::MonotonicTime *v32;
  int v33;
  uint64_t v34;
  double v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;

  v4 = *((_DWORD *)this + 16);
  if (v4 <= 1)
    *((_DWORD *)this + 16) = 2;
  v5 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v6 = v5[15];
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v10 = 0;
    v8 = 0;
LABEL_8:
    v9 = 1;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v9 = 0;
  *(_DWORD *)(v8 + 24) += 2;
  ++*(_DWORD *)(v8 + 3328);
  v10 = 1;
LABEL_9:
  v41 = 0;
  if (!*((_BYTE *)a3 + 224) || (*((_BYTE *)a3 + 208) & 0x10) == 0)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = v5[38];
    ++*(_DWORD *)(v13 + 8);
    if (*((_BYTE *)a3 + 224))
    {
      v14 = (unsigned int *)*((_QWORD *)a3 + 5);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
    }
    else
    {
      v14 = 0;
    }
    v39 = (WTF *)v14;
    WebCore::ScriptController::executeJavaScriptURL(v13, a2, &v39, *((_DWORD *)a3 + 216), &v41);
    v21 = v39;
    v39 = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)v21);
        v36 = (WTF::StringImpl *)*((_QWORD *)v21 + 6);
        *((_QWORD *)v21 + 6) = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, a2);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = (WTF::StringImpl *)*((_QWORD *)v21 + 5);
        *((_QWORD *)v21 + 5) = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, a2);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = *((unsigned int *)v21 + 8);
        if ((_DWORD)v38 != -1)
          ((void (*)(WTF::StringImpl **, char *))off_1E33F5B50[v38])(&v42, (char *)v21 + 8);
        *((_DWORD *)v21 + 8) = -1;
        WTF::fastFree(v21, a2);
      }
    }
    v24 = *(_DWORD *)(v13 + 8);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195EDE65CLL);
    }
    *(_DWORD *)(v13 + 8) = v24 - 1;
    do
    {
      v25 = __ldaxr(v11);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v11));
    if (!v26)
    {
      atomic_store(1u, v11);
      v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = off_1E31FE290;
      *((_QWORD *)v27 + 1) = v11;
      v42 = v27;
      WTF::ensureOnMainThread();
      v28 = v42;
      v42 = 0;
      if (v28)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
    }
    goto LABEL_45;
  }
  v16 = v5[37];
  if (!v16)
    goto LABEL_45;
  *(_DWORD *)(v16 + 24) += 2;
  WTF::URL::stringCenterEllipsizedToLength(a3);
  if (v40)
  {
    v17 = *((_DWORD *)v40 + 1);
    if (v17 < 0)
    {
LABEL_86:
      v42 = 0;
      goto LABEL_87;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = __OFADD__(v17, 90);
  v19 = v17 + 90;
  if (v18 || __OFADD__(v19, 29))
    goto LABEL_86;
  v20 = !v40 || (*((_BYTE *)v40 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v19 + 29), v20, (int8x16_t *)"Blocked script execution in '", 0x1Du, (uint64_t)v40, (int8x16_t *)"' because the document's frame is sandboxed and the 'allow-scripts' permission is not set.", 0x5Au, &v42);
  if (!v42)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x195EDE700);
  }
  WebCore::Document::addConsoleMessage((_QWORD *)v16, 8, 2, &v42, 0);
  v29 = v42;
  v42 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
LABEL_45:
  v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v31)
    *(_DWORD *)(v31 + 24) += 2;
  if (v4 <= 1 && !v41)
    WebCore::Document::dispatchWindowLoadEvent(v31);
  if (v31)
  {
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
  }
  WebCore::FrameLoader::checkCompleted(this, a2);
  if (v10)
  {
    v33 = *(_DWORD *)(v8 + 3328) - 1;
    *(_DWORD *)(v8 + 3328) = v33;
    v34 = *(_QWORD *)(v8 + 528);
    if (v34)
    {
      if (*(_QWORD *)(v34 + 8)
        && !v33
        && ((*(_QWORD *)(v8 + 2152) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v8 + 2152) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
      {
        *(_QWORD *)(v8 + 2144) = 0;
        WTF::MonotonicTime::now(v32);
        WebCore::TimerBase::setNextFireTime(v8 + 2120, v35 + 0.0);
      }
    }
  }
  *((_BYTE *)this + 152) = 0;
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

uint64_t WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WebCore::FrameLoader::willLoadMediaElementURL(WebCore::FrameLoader *this, WTF::URL *a2, WebCore::Node *a3)
{
  WTF::StringImpl *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  char v15;
  char *v16;
  _DWORD *v17;
  __int128 *v18;
  Inspector::IdentifiersFactory *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  int v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  __int16 v57;
  char v58;
  int64x2_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64x2_t v64;
  uint64_t v65;
  char v66;
  __int16 v67;
  char v68;
  CFTypeRef v69;
  char v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72[7];
  CFTypeRef cf;
  char v74;
  Inspector::IdentifiersFactory *v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  _QWORD v79[7];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  char v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;

  if (WebCore::IOSApplication::isMobileStore(this))
    return (*(uint64_t (**)(_QWORD, WTF::URL *))(**((_QWORD **)this + 2) + 952))(*((_QWORD *)this + 2), a2);
  v7 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v7 += 2;
  v8 = *(_OWORD *)((char *)a2 + 24);
  v77 = *(_OWORD *)((char *)a2 + 8);
  v78 = v8;
  v76 = v7;
  v79[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v79);
  v79[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v79[6] = v46;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0x10000;
  v9 = v84 & 0x80 | 4;
  v84 = v9;
  v85 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v9 = v84;
  }
  LODWORD(v11) = 0;
  v86 = v10;
  v87 = 0;
  LOBYTE(v88) = 0;
  v89 = 0;
  v90 = v90 & 0xE0 | 5;
  v84 = v9 | 2;
  v91 = 0;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v33 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 8);
    v34 = *(_QWORD *)(v33 + 528);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 24);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 8);
          if (v37)
            goto LABEL_56;
        }
      }
    }
    v38 = *(_QWORD *)(v33 + 2632);
    if (v38
      && (v39 = *(_QWORD *)(v38 + 8)) != 0
      && (v40 = *(_QWORD *)(v39 + 528)) != 0
      && (v41 = *(_QWORD *)(v40 + 8)) != 0
      && (v42 = *(_QWORD *)(v41 + 24)) != 0
      && (v37 = *(_QWORD *)(v42 + 8)) != 0)
    {
LABEL_56:
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 80) + 8) + 40);
      if (v11)
      {
        v46 = 0;
        LODWORD(v11) = WebCore::InspectorDOMAgent::pushNodePathToFrontend(v11, (WebCore::Node *)&v46, a3);
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            v44 = v11;
            WTF::StringImpl::destroy(v46, v43);
            LODWORD(v11) = v44;
          }
          else
          {
            *(_DWORD *)v46 -= 2;
          }
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
  }
  v88 = v11;
  v89 = 1;
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 3533);
    v15 = v90;
    if ((v90 & 1) == 0)
    {
      v45 = v14;
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v76);
      v14 = v45;
      v15 = v90 | 1;
      v90 |= 1u;
    }
    if ((v14 != 0) == ((v84 & 4) == 0))
    {
      v84 = v84 & 0xFB | (4 * (v14 != 0));
      v90 = v15 & 0xFD;
    }
  }
  v75 = 0;
  v71 = 0;
  v72[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v72);
  cf = 0;
  memset(&v72[5], 0, 14);
  v74 = 1;
  WebCore::FrameLoader::requestFromDelegate((uint64_t)this, (uint64_t)&v76, (uint64_t *)&v75, (uint64_t)&v71);
  v16 = (char *)this + 32;
  v17 = (_DWORD *)*((_QWORD *)this + 11);
  if (v17)
    ++v17[6];
  v18 = (__int128 *)((char *)a2 + 8);
  v19 = v75;
  v20 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v20 += 2;
  v21 = *(_OWORD *)((char *)a2 + 24);
  v47 = *v18;
  v46 = v20;
  v48 = v21;
  v49 = 0;
  v50 = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  v56 = 1;
  v57 = 0;
  v59 = vdupq_n_s64(0x7FF8000000000000uLL);
  v60 = v59;
  v61 = 0;
  v62 = 0;
  v63 = 0x8000000000000000;
  v64 = v59;
  v65 = 0x7FF8000000000000;
  v66 &= 0xF0u;
  v67 &= 0xC000u;
  v68 = v68 & 0xF8 | 2;
  v69 = 0;
  v70 = 0;
  v58 = v58 & 0xC0 | 4;
  WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages((uint64_t)v16, (uint64_t)v17, v19, (WebCore::ResourceRequest *)&v76, (uint64_t)&v46, 0, 0xFFFFFFFFLL, -1, (WebCore::ResourceError *)&v71);
  v23 = v69;
  v69 = 0;
  if (v23)
    CFRelease(v23);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v46, v22);
  if (v17)
  {
    if (v17[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 24))(v17);
    else
      --v17[6];
  }
  if ((v90 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v76);
    v90 |= 1u;
  }
  v25 = v76;
  if (v76)
    *(_DWORD *)v76 += 2;
  v26 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v78;
  *v18 = v77;
  *(_OWORD *)((char *)a2 + 24) = v27;
  v28 = BYTE4(v72[6]);
  v29 = cf;
  cf = 0;
  if (v29)
    CFRelease(v29);
  v30 = v72[5];
  v72[5] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v72[0];
  v72[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v24);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v71;
  v71 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v24);
    else
      *(_DWORD *)v32 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v76, v24);
  return v28 == 0;
}

void WebCore::FrameLoader::requestFromDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t IdentifierInternal;
  WebCore::DocumentLoader *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30[8];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  __int16 v36;
  char v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  char v45;
  __int16 v46;
  char v47;
  CFTypeRef v48;
  char v49;
  _QWORD v50[23];
  char v51;
  const void *v52;

  if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195EDEFC4);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *a3 = IdentifierInternal;
  v9 = *(WebCore::DocumentLoader **)(a1 + 88);
  if (v9)
  {
    ++*((_DWORD *)v9 + 6);
    v10 = *a3;
  }
  else
  {
    v10 = IdentifierInternal;
  }
  WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest(a1 + 32, v10, v9, a2);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v50, (const WebCore::ResourceRequestBase::RequestData *)a2);
  v11 = *(_DWORD **)(a2 + 152);
  if (v11)
    *v11 += 2;
  v50[19] = v11;
  v12 = *(_DWORD **)(a2 + 160);
  if (v12)
    *v12 += 2;
  v50[20] = v12;
  v13 = *(_DWORD **)(a2 + 168);
  if (v13)
    ++*v13;
  v14 = *(_QWORD *)(a2 + 176);
  v50[21] = v13;
  v50[22] = v14;
  v51 = *(_BYTE *)(a2 + 184);
  v15 = *(const void **)(a2 + 192);
  v52 = v15;
  if (v15)
    CFRetain(v15);
  v16 = (const WTF::StringImpl *)*a3;
  v29 = 0;
  WTF::URL::invalidate((WTF::URL *)&v29);
  v35 = 0;
  v36 = 0;
  memset(&v30[4], 0, 32);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  v39 = v38;
  v40 = 0;
  v41 = 0;
  v42 = 0x8000000000000000;
  v43 = v38;
  v44 = 0x7FF8000000000000;
  v45 &= 0xF0u;
  v46 &= 0xC000u;
  v47 = v47 & 0xF8 | 2;
  v48 = 0;
  v49 = 0;
  v37 = v37 & 0xC0 | 5;
  WebCore::ResourceLoadNotifier::dispatchWillSendRequest(a1 + 32, (uint64_t)v9, v16, (WebCore::ResourceRequest *)v50, (WebCore::ResourceLoader *)&v29, 0, 0);
  v18 = v48;
  v48 = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v29, v17);
  v19 = v51;
  if ((v51 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v50);
    v19 = v51 | 1;
    v51 |= 1u;
  }
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v50);
    v51 |= 1u;
  }
  if (v50[0])
  {
    v29 = 0;
    v30[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v30);
    v30[7] = 0;
    v30[5] = 0;
    *(WTF::StringImpl **)((char *)&v30[5] + 6) = 0;
    LOBYTE(v31) = 1;
    WebCore::ResourceErrorBase::operator=(a4, (uint64_t *)&v29);
    v21 = v30[7];
    v30[7] = 0;
    v22 = *(const void **)(a4 + 64);
    *(_QWORD *)(a4 + 64) = v21;
    if (v22)
    {
      CFRelease(v22);
      v28 = v30[7];
      *(_BYTE *)(a4 + 72) = v31;
      v30[7] = 0;
      if (v28)
        CFRelease(v28);
    }
    else
    {
      *(_BYTE *)(a4 + 72) = v31;
      v30[7] = 0;
    }
    v23 = v30[5];
    v30[5] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v30[0];
    v30[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v20);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 568))(&v29, *(_QWORD *)(a1 + 16), a2);
    BYTE4(v30[6]) = 3;
    WebCore::ResourceError::operator=(a4, (uint64_t)&v29);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v29, v27);
  }
  WebCore::ResourceRequest::operator=(a2, (uint64_t)v50);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v50, v26);
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v9 + 24))(v9);
    else
      --*((_DWORD *)v9 + 6);
  }
}

void WebCore::FrameLoader::reloadWithOverrideEncoding(WebCore::FrameLoader *this, const WTF::String **a2)
{
  uint64_t v2;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _BOOL8 isSameOriginAs;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  WebCore::DocumentLoader *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WebCore::SecurityOrigin *v36;
  WebCore::SecurityOrigin *v37;
  WTF::StringImpl *v38;
  const WebCore::SecurityOrigin *v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  WebCore::DocumentLoader *v43;
  WebCore::DocumentLoader *v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  _DWORD *v47;
  WebCore::DocumentLoader *v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  WebCore::DocumentLoader *v54;
  __int128 v55;
  __int128 v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  char v60;
  char v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  char v66;
  const void *v67;
  _BYTE buf[12];
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  _BOOL4 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v5 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
      v7 = v6[3];
      if (v7)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 40))
            v7 = *(_QWORD *)(v7 + 32);
          else
            v7 = 0;
        }
      }
      v8 = v6[4];
      v9 = *(_QWORD *)(v6[16] + 8) == (_QWORD)v6;
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v8;
      v73 = 1024;
      v74 = v9;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::reloadWithOverrideEncoding: frame load started", buf, 0x26u);
      v2 = *((_QWORD *)this + 11);
    }
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v57, (const WebCore::ResourceRequestBase::RequestData *)(v2 + 872));
    v11 = *(_DWORD **)(v2 + 1024);
    if (v11)
      *v11 += 2;
    v62 = v11;
    v12 = *(_DWORD **)(v2 + 1032);
    if (v12)
      *v12 += 2;
    v63 = v12;
    v13 = *(_DWORD **)(v2 + 1040);
    if (v13)
      ++*v13;
    v14 = *(_QWORD *)(v2 + 1048);
    v64 = v13;
    v65 = v14;
    v66 = *(_BYTE *)(v2 + 1056);
    v15 = *(const void **)(v2 + 1064);
    v67 = v15;
    if (v15)
      CFRetain(v15);
    v16 = *((_QWORD *)this + 11);
    v17 = *(int **)(v16 + 368);
    if (v17)
    {
      v18 = v17[1];
      v19 = *v17 + 2;
      *v17 = v19;
      v20 = v16 + 360;
      v21 = *(_OWORD *)(v20 + 32);
      v55 = *(_OWORD *)(v20 + 16);
      v56 = v21;
      if (v18)
      {
        if ((v66 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v57);
          v66 |= 1u;
          v19 = *v17;
        }
        *v17 = v19 + 2;
        v22 = v57;
        v57 = (WTF::StringImpl *)v17;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v10);
          else
            *(_DWORD *)v22 -= 2;
        }
        v58 = v55;
        v59 = v56;
        v61 &= ~0x20u;
        v66 &= ~2u;
      }
    }
    else
    {
      v49 = v16 + 360;
      v50 = *(_OWORD *)(v49 + 32);
      v55 = *(_OWORD *)(v49 + 16);
      v56 = v50;
    }
    v23 = v66;
    if ((v66 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v57);
      v23 = v66 | 1;
      v66 |= 1u;
    }
    if (v60 != 2)
    {
      v60 = 2;
      v23 &= ~2u;
      v66 = v23;
    }
    v24 = *((_QWORD *)this + 2);
    if ((v23 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v57);
      v66 |= 1u;
    }
    WebCore::FrameLoader::defaultSubstituteDataForURL((WebCore::FrameLoader *)buf, this, (WTF::URL *)&v57);
    (*(void (**)(WebCore::DocumentLoader **__return_ptr, uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v24 + 760))(&v54, v24, &v57, buf);
    WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)buf, v25);
    v28 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    v31 = v54;
    v32 = *((_QWORD *)this + 11);
    v33 = *(_QWORD *)(v32 + 16);
    if (!v33)
      goto LABEL_68;
    v34 = *(_QWORD **)(v33 + 8);
    if (!v34)
      goto LABEL_68;
    if (*(_QWORD **)(v34[16] + 8) == v34)
      goto LABEL_36;
    if (*(_QWORD *)(v34[35] + 88) != v32)
      goto LABEL_68;
    v35 = v34[37];
    if (!v35)
      goto LABEL_37;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v35 + 192), v27);
    v37 = v36;
    WebCore::Document::topOrigin((WebCore::Document *)v35, v38);
    isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v37, v39);
    if (isSameOriginAs)
LABEL_36:
      LOBYTE(v35) = *(_BYTE *)(v32 + 3530);
    else
LABEL_68:
      LOBYTE(v35) = 0;
LABEL_37:
    if (WTF::isMainThread((WTF *)isSameOriginAs))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          *((_BYTE *)v31 + 3530) = 2;
          if (!v28)
            goto LABEL_46;
          goto LABEL_44;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(v28 + 128) + 8) == v28)
      v40 = v35;
    else
      v40 = 0;
    *((_BYTE *)v31 + 3530) = v40;
    do
    {
LABEL_44:
      v41 = __ldaxr(v29);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v29));
    if (!v42)
    {
      atomic_store(1u, v29);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v51 = off_1E31FE290;
      v51[1] = v29;
      *(_QWORD *)buf = v51;
      WTF::ensureOnMainThread();
      v52 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
LABEL_46:
    v43 = v54;
    ++*((_DWORD *)v54 + 6);
    *(_QWORD *)buf = v43;
    WebCore::FrameLoader::setPolicyDocumentLoader((uint64_t)this, (WebCore::DocumentLoader **)buf, 0);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
        (*(void (**)(void))(**(_QWORD **)buf + 24))();
      else
        --*(_DWORD *)(*(_QWORD *)buf + 24);
    }
    WebCore::DocumentLoader::setOverrideEncoding(v54, *a2);
    v44 = v54;
    *(_QWORD *)buf = 0;
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v45 = off_1E33F5FB0;
    v53 = v45;
    WebCore::FrameLoader::loadWithDocumentLoader((uint64_t)this, (uint64_t)v44, 4u, (uint64_t *)buf, 1, (uint64_t *)&v53);
    if (v53)
      (*(void (**)(_QWORD *))(*v53 + 8))(v53);
    v47 = *(_DWORD **)buf;
    *(_QWORD *)buf = 0;
    if (v47)
    {
      if (v47[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 24))(v47);
      else
        --v47[6];
    }
    v48 = v54;
    v54 = 0;
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 1)
      {
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v48 + 24))(v48);
        if (v17)
        {
LABEL_58:
          if (*v17 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v17, v46);
          else
            *v17 -= 2;
        }
LABEL_60:
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v57, v46);
        return;
      }
      --*((_DWORD *)v48 + 6);
    }
    if (v17)
      goto LABEL_58;
    goto LABEL_60;
  }
}

void WebCore::FrameLoader::reload(const WTF::URL *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BOOL8 isSameOriginAs;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  WebCore::DocumentLoader *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WebCore::SecurityOrigin *v37;
  WebCore::SecurityOrigin *v38;
  WTF::StringImpl *v39;
  const WebCore::SecurityOrigin *v40;
  WTF::StringImpl *v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  WebCore::DocumentLoader *v45;
  WTF::StringImpl **v46;
  const WebCore::ResourceRequest *v47;
  char v48;
  WebCore::DocumentLoader *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  void *v52;
  WebCore::DocumentLoader *v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WebCore::DocumentLoader *v59;
  uint64_t v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  WebCore::DocumentLoader *v65;
  __int128 v66;
  __int128 v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  char v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  char v76;
  const void *v77;
  _BYTE buf[12];
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  _BOOL4 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 11);
  if (v2)
  {
    v5 = v2 + 872;
    if ((*(_BYTE *)(v2 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v2 + 872));
      *(_BYTE *)(v2 + 1056) |= 1u;
    }
    if (*(_QWORD *)v5 && *(_DWORD *)(*(_QWORD *)v5 + 4))
    {
      v6 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 8);
        v8 = v7[3];
        if (v8)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (v8)
          {
            if (*(_BYTE *)(v8 + 40))
              v8 = *(_QWORD *)(v8 + 32);
            else
              v8 = 0;
          }
        }
        v9 = v7[4];
        v10 = *(_QWORD *)(v7[16] + 8) == (_QWORD)v7;
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = a1;
        v79 = 2048;
        v80 = v8;
        v81 = 2048;
        v82 = v9;
        v83 = 1024;
        v84 = v10;
        _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::reload: frame load started", buf, 0x26u);
      }
      v11 = *((_QWORD *)a1 + 11);
      WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v68, (const WebCore::ResourceRequestBase::RequestData *)(v11 + 872));
      v13 = *(_DWORD **)(v11 + 1024);
      if (v13)
        *v13 += 2;
      v72 = v13;
      v14 = *(_DWORD **)(v11 + 1032);
      if (v14)
        *v14 += 2;
      v73 = v14;
      v15 = *(_DWORD **)(v11 + 1040);
      if (v15)
        ++*v15;
      v16 = *(_QWORD *)(v11 + 1048);
      v74 = v15;
      v75 = v16;
      v76 = *(_BYTE *)(v11 + 1056);
      v17 = *(const void **)(v11 + 1064);
      v77 = v17;
      if (v17)
        CFRetain(v17);
      v18 = *((_QWORD *)a1 + 11);
      v19 = *(int **)(v18 + 368);
      if (v19)
      {
        v20 = v19[1];
        v21 = *v19 + 2;
        *v19 = v21;
        v22 = v18 + 360;
        v23 = *(_OWORD *)(v22 + 32);
        v66 = *(_OWORD *)(v22 + 16);
        v67 = v23;
        if (v20)
        {
          if ((v76 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
            v76 |= 1u;
            v21 = *v19;
          }
          *v19 = v21 + 2;
          v24 = v68;
          v68 = (WTF::StringImpl *)v19;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v12);
            else
              *(_DWORD *)v24 -= 2;
          }
          v69 = v66;
          v70 = v67;
          v71 &= ~0x20u;
          v76 &= ~2u;
        }
      }
      else
      {
        v60 = v18 + 360;
        v61 = *(_OWORD *)(v60 + 32);
        v66 = *(_OWORD *)(v60 + 16);
        v67 = v61;
      }
      v25 = *((_QWORD *)a1 + 2);
      if ((v76 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
        v76 |= 1u;
      }
      WebCore::FrameLoader::defaultSubstituteDataForURL((WebCore::FrameLoader *)buf, a1, (WTF::URL *)&v68);
      (*(void (**)(WebCore::DocumentLoader **__return_ptr, uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v25 + 760))(&v65, v25, &v68, buf);
      WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)buf, v26);
      *((_BYTE *)v65 + 3532) = *(_BYTE *)(*((_QWORD *)a1 + 11) + 3532);
      v29 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
      v30 = (unsigned int *)(v29 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v32 = v65;
      v33 = *((_QWORD *)a1 + 11);
      v34 = *(_QWORD *)(v33 + 16);
      if (!v34)
        goto LABEL_85;
      v35 = *(_QWORD **)(v34 + 8);
      if (!v35)
        goto LABEL_85;
      if (*(_QWORD **)(v35[16] + 8) == v35)
        goto LABEL_37;
      if (*(_QWORD *)(v35[35] + 88) != v33)
        goto LABEL_85;
      v36 = v35[37];
      if (!v36)
        goto LABEL_38;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v36 + 192), v28);
      v38 = v37;
      WebCore::Document::topOrigin((WebCore::Document *)v36, v39);
      isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v38, v40);
      if (isSameOriginAs)
LABEL_37:
        LOBYTE(v36) = *(_BYTE *)(v33 + 3530);
      else
LABEL_85:
        LOBYTE(v36) = 0;
LABEL_38:
      if (WTF::isMainThread((WTF *)isSameOriginAs))
      {
        {
          if (WebCore::currentToken(void)::token
            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
          {
            *((_BYTE *)v32 + 3530) = 2;
            if (!v29)
              goto LABEL_47;
            goto LABEL_45;
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
      if (*(_QWORD *)(*(_QWORD *)(v29 + 128) + 8) == v29)
        v42 = v36;
      else
        v42 = 0;
      *((_BYTE *)v32 + 3530) = v42;
      do
      {
LABEL_45:
        v43 = __ldaxr(v30);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v30));
      if (!v44)
      {
        atomic_store(1u, v30);
        v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v62 = off_1E31FE290;
        v62[1] = v30;
        *(_QWORD *)buf = v62;
        WTF::ensureOnMainThread();
        v63 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
LABEL_47:
      v45 = v65;
      *((_BYTE *)v65 + 3432) = ((a2 >> 2) & 1) == 0;
      v46 = (WTF::StringImpl **)*((_QWORD *)v45 + 430);
      *((_QWORD *)v45 + 430) = 0;
      if (v46)
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v41);
        v45 = v65;
      }
      v47 = (WebCore::DocumentLoader *)((char *)v45 + 872);
      v48 = *((_BYTE *)v45 + 1056);
      if ((v48 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)v45 + 872));
        v48 = *((_BYTE *)v45 + 1056) | 1;
        *((_BYTE *)v45 + 1056) = v48;
      }
      if (*((_BYTE *)v45 + 1016) != 1)
      {
        *((_BYTE *)v45 + 1016) = 1;
        v48 &= ~2u;
        *((_BYTE *)v45 + 1056) = v48;
      }
      if (!*((_BYTE *)v45 + 1017))
      {
        WebCore::ResourceRequestBase::setIsSameSite((_BYTE *)v45 + 872, 1);
        v48 = *((_BYTE *)v45 + 1056);
      }
      if ((v48 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)v45 + 872));
        *((_BYTE *)v45 + 1056) |= 1u;
      }
      if (MEMORY[0x19AEA53F4](*((_QWORD *)v45 + 120), "POST", 4))
      {
        v49 = v65;
        v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296);
        if (v50)
          *(_DWORD *)(v50 + 24) += 2;
        WebCore::NavigationAction::NavigationAction((uint64_t)buf, (WebCore::NavigationRequester *)v50, v47, 1, *((_BYTE *)v49 + 3532), 4, 0, 0, MEMORY[0x1E0CBF2F8]);
        WebCore::DocumentLoader::setTriggeringAction((uint64_t)v49, (uint64_t *)buf);
        WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v51);
        if (*(_DWORD *)(v50 + 24) == 2)
        {
          if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v50, v52);
        }
        else
        {
          *(_DWORD *)(v50 + 24) -= 2;
        }
      }
      WebCore::DocumentLoader::setOverrideEncoding(v65, *(const WTF::String **)(*((_QWORD *)a1 + 11) + 1624));
      v53 = v65;
      if ((a2 & 1) != 0)
        v54 = 9;
      else
        v54 = 4;
      if ((a2 & 2) != 0)
        v55 = 8;
      else
        v55 = v54;
      *(_QWORD *)buf = 0;
      v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v56 = off_1E33F5FB0;
      v64 = v56;
      WebCore::FrameLoader::loadWithDocumentLoader((uint64_t)a1, (uint64_t)v53, v55, (uint64_t *)buf, 1, (uint64_t *)&v64);
      if (v64)
        (*(void (**)(_QWORD *))(*v64 + 8))(v64);
      v58 = *(_DWORD **)buf;
      *(_QWORD *)buf = 0;
      if (v58)
      {
        if (v58[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 24))(v58);
        else
          --v58[6];
      }
      v59 = v65;
      v65 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 6) == 1)
        {
          (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v59 + 24))(v59);
          if (v19)
          {
LABEL_77:
            if (*v19 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v19, v57);
            else
              *v19 -= 2;
          }
LABEL_79:
          WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v68, v57);
          return;
        }
        --*((_DWORD *)v59 + 6);
      }
      if (v19)
        goto LABEL_77;
      goto LABEL_79;
    }
  }
}

WebCore::Navigation **WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(WebCore::Navigation **a1, void *a2)
{
  WebCore::Navigation *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::Navigation::~Navigation(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

_QWORD *WebCore::FrameLoader::stopForBackForwardCache(WebCore::FrameLoader *this)
{
  char v2;
  WebCore::DocumentLoader *v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  WebCore::DocumentLoader *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::FrameLoader *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *result;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  _BYTE v37[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *((_BYTE *)this + 401);
  *((_BYTE *)this + 401) = 1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 128) + 8) != *(_QWORD *)(*((_QWORD *)this + 1) + 8))
  {
    v3 = (WebCore::DocumentLoader *)*((_QWORD *)this + 12);
    if (v3)
    {
      ++*((_DWORD *)v3 + 6);
      WebCore::DocumentLoader::stopLoading(v3);
      if (*((_DWORD *)v3 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v3 + 24))(v3);
      else
        --*((_DWORD *)v3 + 6);
    }
    v4 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
      v6 = v5[3];
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 40))
            v6 = *(_QWORD *)(v6 + 32);
          else
            v6 = 0;
        }
      }
      v7 = v5[4];
      v8 = *(_QWORD *)(v5[16] + 8) == (_QWORD)v5;
      v9 = *((_QWORD *)this + 12);
      *(_DWORD *)v37 = 134219008;
      *(_QWORD *)&v37[4] = this;
      v38 = 2048;
      v39 = v6;
      v40 = 2048;
      v41 = v7;
      v42 = 1024;
      v43 = v8;
      v44 = 2048;
      v45 = v9;
      _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::stopForBackForwardCache: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", v37, 0x30u);
    }
    *(_QWORD *)v37 = 0;
    WebCore::FrameLoader::setProvisionalDocumentLoader((uint64_t)this, (uint64_t *)v37);
    if (*(_QWORD *)v37)
    {
      if (*(_DWORD *)(*(_QWORD *)v37 + 24) == 1)
        (*(void (**)(void))(**(_QWORD **)v37 + 24))();
      else
        --*(_DWORD *)(*(_QWORD *)v37 + 24);
    }
  }
  v10 = (WebCore::DocumentLoader *)*((_QWORD *)this + 11);
  if (v10)
  {
    ++*((_DWORD *)v10 + 6);
    WebCore::DocumentLoader::stopLoading(v10);
    if (*((_DWORD *)v10 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v10 + 24))(v10);
    else
      --*((_DWORD *)v10 + 6);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 88);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    do
    {
      if (!*(_BYTE *)(v11 + 144))
      {
        v14 = (unsigned int *)(v11 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v16 = *(WebCore::FrameLoader **)(v11 + 280);
        ++*(_DWORD *)v16;
        WebCore::FrameLoader::stopForBackForwardCache(v16);
        if (!*(_DWORD *)v16)
        {
          __break(0xC471u);
          JUMPOUT(0x195EDFFE8);
        }
        --*(_DWORD *)v16;
        do
        {
          v17 = __ldaxr(v14);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v14));
        if (!v18)
        {
          atomic_store(1u, v14);
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v27 = off_1E31FE290;
          v27[1] = v14;
          *(_QWORD *)v37 = v27;
          WTF::ensureOnMainThread();
          v28 = *(_QWORD *)v37;
          *(_QWORD *)v37 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      v19 = *(_QWORD *)(v11 + 72);
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      v22 = (unsigned int *)(v11 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v25 = off_1E31FE290;
        v25[1] = v22;
        *(_QWORD *)v37 = v25;
        WTF::ensureOnMainThread();
        v26 = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      v11 = v19;
    }
    while (v19);
  }
  WebCore::PolicyChecker::stopCheck(*((WebCore::PolicyChecker **)this + 3));
  v29 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v30 = (unsigned int *)(v29 + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  v32 = *(_QWORD **)(v29 + 152);
  ++*(_DWORD *)v32;
  result = WebCore::NavigationScheduler::cancel(v32, 0);
  if (!*(_DWORD *)v32)
  {
    __break(0xC471u);
    JUMPOUT(0x195EE0008);
  }
  --*(_DWORD *)v32;
  do
  {
    v34 = __ldaxr(v30);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v30));
  if (!v35)
  {
    atomic_store(1u, v30);
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = off_1E31FE290;
    v36[1] = v30;
    *(_QWORD *)v37 = v36;
    WTF::ensureOnMainThread();
    result = *(_QWORD **)v37;
    *(_QWORD *)v37 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *((_BYTE *)this + 401) = v2;
  return result;
}

void WebCore::FrameLoader::stopAllLoadersAndCheckCompleteness(WebCore::FrameLoader *this)
{
  void *v2;

  WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 1, 0);
  if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::FrameLoader *)((char *)this + 264));
    *((_BYTE *)this + 350) = 1;
    WebCore::FrameLoader::checkCompletenessNow(this, v2);
    *((_BYTE *)this + 350) = 0;
  }
}

void WebCore::FrameLoader::stopForUserCancel(WebCore::FrameLoader *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*((_BYTE *)this + 401))
    return;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 1, 0);
  v7 = *(_QWORD *)(v4 + 288);
  if (v7 && *(_BYTE *)(v7 + 475))
  {
    ++*(_DWORD *)(v7 + 8);
    WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v7 + 336));
    if (*(_DWORD *)(v7 + 8) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (a2)
        goto LABEL_9;
LABEL_11:
      v8 = *(_QWORD *)(v4 + 24);
      if (v8 && *(_QWORD *)(v8 + 8))
        WebCore::FrameLoader::checkLoadComplete(this, 0);
      goto LABEL_14;
    }
    --*(_DWORD *)(v7 + 8);
  }
  if (!a2)
    goto LABEL_11;
LABEL_9:
  WebCore::FrameLoader::scheduleCheckLoadComplete(this);
  do
  {
LABEL_14:
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, v5);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v5;
    v12 = v11;
    WTF::ensureOnMainThread();
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
}

BOOL WebCore::FrameLoader::frameHasLoaded(WebCore::FrameLoader *this)
{
  int v1;
  BOOL v3;

  v1 = *((_DWORD *)this + 16);
  if (v1 > 1)
    return 1;
  if (v1)
    v3 = *((_QWORD *)this + 12) == 0;
  else
    v3 = 1;
  return !v3;
}

void WebCore::FrameLoader::clearProvisionalLoad(WebCore::FrameLoader *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  WebCore::FrameLoader::FrameProgressTracker *v8;
  _BYTE v9[12];
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v4 = v3[3];
    if (v4)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 40))
          v4 = *(_QWORD *)(v4 + 32);
        else
          v4 = 0;
      }
    }
    v5 = v3[4];
    v6 = *(_QWORD *)(v3[16] + 8) == (_QWORD)v3;
    v7 = *((_QWORD *)this + 12);
    *(_DWORD *)v9 = 134219008;
    *(_QWORD *)&v9[4] = this;
    v10 = 2048;
    v11 = v4;
    v12 = 2048;
    v13 = v5;
    v14 = 1024;
    v15 = v6;
    v16 = 2048;
    v17 = v7;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::clearProvisionalLoad: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", v9, 0x30u);
  }
  *(_QWORD *)v9 = 0;
  WebCore::FrameLoader::setProvisionalDocumentLoader((uint64_t)this, (uint64_t *)v9);
  if (*(_QWORD *)v9)
  {
    if (*(_DWORD *)(*(_QWORD *)v9 + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)v9 + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)v9 + 24);
  }
  v8 = (WebCore::FrameLoader::FrameProgressTracker *)*((_QWORD *)this + 9);
  if (v8)
  {
    ++*(_DWORD *)v8;
    WebCore::FrameLoader::FrameProgressTracker::progressCompleted(v8);
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195EE03A8);
    }
    --*(_DWORD *)v8;
  }
  WebCore::FrameLoader::setState((uint64_t)this);
}

WTF *WebCore::FrameLoader::provisionalLoadFailedInAnotherProcess(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  *((_BYTE *)this + 157) = 0;
  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v3 = (unsigned int *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        v5 = *(WTF **)(v2 + 280);
        ++*(_DWORD *)v5;
        this = WebCore::FrameLoader::checkLoadComplete(v5, 0);
        if (!*(_DWORD *)v5)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE047CLL);
        }
        --*(_DWORD *)v5;
        do
        {
          v6 = __ldaxr(v3);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v3));
        if (!v7)
        {
          atomic_store(1u, v3);
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v8 = off_1E31FE290;
          v8[1] = v3;
          v9 = (uint64_t)v8;
          WTF::ensureOnMainThread();
          this = (WTF *)v9;
          if (v9)
            return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FrameLoader::checkLoadCompleteForThisFrame(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::MonotonicTime **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int *v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  WTF::StringImpl *v39;
  WebCore::HistoryItem *v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v45;
  WebCore::Page *v46;
  uint64_t v47;
  NSObject *v48;
  WTF::StringImpl *v49;
  const WTF::StringImpl *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  _BOOL4 v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  WebCore::LocalDOMWindow *v64;
  WebCore::Performance *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 v71;
  int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  int v86;
  int v87;
  WebCore::HistoryItem *v88;
  uint64_t v89;
  WebCore::BackForwardController **v90;
  _BOOL4 v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  WebCore::ResourceError *v100;
  _QWORD *v101;
  WebCore::HistoryItem *v102;
  _BYTE buf[24];
  uint64_t v104;
  __int16 v105;
  _BOOL4 v106;
  __int16 v107;
  _BOOL4 v108;
  __int16 v109;
  _BOOL4 v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 296) + 3328))
    return result;
  v3 = result;
  v4 = *(unsigned __int8 *)(result + 80);
  if (v4 == 2)
  {
    *(_BYTE *)(result + 402) = 0;
    *(_BYTE *)(result + 81) = 0;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 712))(*(_QWORD *)(result + 16));
    v5 = *(int **)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 184);
    v6 = *v5;
    *((_BYTE *)v5 + 40) = 1;
    *v5 = v6 + 1;
    if (v6 != -1)
    {
      *v5 = v6;
      if (*(_QWORD *)(v3 + 88))
      {
        v7 = *(_DWORD *)(v3 + 64);
        if (v7 > 2 && v7 != 4)
          *(_DWORD *)(v3 + 64) = 4;
      }
      return result;
    }
    __break(0xC471u);
LABEL_165:
    JUMPOUT(0x195EE0860);
  }
  if (v4 != 1)
  {
    if (*(_BYTE *)(result + 80))
      return result;
    v42 = *(_QWORD *)(result + 112);
    if (v42)
    {
      if (*(_DWORD *)(v42 + 4))
        return result;
    }
    v16 = *(_QWORD *)(result + 96);
    if (!v16)
      return result;
    v43 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v43 + 1;
    if (!*(_BYTE *)(v16 + 1588))
    {
LABEL_135:
      if (v43)
      {
        *(_DWORD *)(v16 + 24) = v43;
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    }
    v102 = 0;
    v45 = *(_QWORD *)(v2 + 24);
    if (v45)
    {
      v46 = *(WebCore::Page **)(v45 + 8);
      if (v46)
      {
        ++*(_DWORD *)v46;
        if (*(unsigned __int8 *)(result + 81) - 1 <= 2)
          WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::operator=(&v102, *(WebCore::HistoryItem **)(*(_QWORD *)(*((_QWORD *)v46 + 20) + 184) + 16));
        WTF::RefCounted<WebCore::Page>::deref(v46);
      }
    }
    v100 = (WebCore::ResourceError *)(v16 + 1528);
    if ((*(_WORD *)(v16 + 3514) & 6) == 2 && !*(_BYTE *)(v3 + 402))
    {
      if (WebCore::DocumentLoader::mainResourceLoader((WebCore::DocumentLoader *)v16))
        v91 = *(_DWORD *)(WebCore::DocumentLoader::mainResourceLoader((WebCore::DocumentLoader *)v16) + 1640) == 0;
      else
        v91 = 1;
      v99 = v91;
    }
    else
    {
      v99 = 0;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 184) + 32);
    LOBYTE(v98) = v47 == 0;
    if (!WebCore::DocumentLoader::isLoadingInAPISense((WebCore::DocumentLoader *)v16)
      || *(_BYTE *)(v16 + 3538))
    {
      v48 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v51 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8);
        v52 = v51[3];
        if (v52 && (v53 = *(_QWORD *)(v52 + 8)) != 0 && *(_BYTE *)(v53 + 40))
          v54 = *(_QWORD *)(v53 + 32);
        else
          v54 = 0;
        v55 = v51[4];
        v56 = *(_QWORD *)(v51[16] + 8) == (_QWORD)v51;
        v57 = *(unsigned __int8 *)(v16 + 1588);
        v58 = v57 == 4;
        v59 = v57 == 3;
        WebCore::ResourceError::platformLazyInit(v100);
        v60 = *(_DWORD *)(v16 + 1584);
        *(_DWORD *)buf = 134219776;
        *(_QWORD *)&buf[4] = v3;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v54;
        *(_WORD *)&buf[22] = 2048;
        v104 = v55;
        v105 = 1024;
        v106 = v56;
        v107 = 1024;
        v108 = v58;
        v109 = 1024;
        v110 = v59;
        v111 = 1024;
        v112 = v60;
        v113 = 1024;
        v114 = v99;
        _os_log_impl(&dword_1940B8000, v48, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::checkLoadCompleteForThisFrame: Failed provisional load (isTimeout = %d, isCancellation = %d, errorCode = %d, httpsFirstApplicable = %d)", buf, 0x3Eu);
      }
      if ((a2 & 1) == 0)
      {
        WebCore::ResourceError::errorRecoveryMethod(v100);
        if (v61)
        {
          WebCore::ResourceError::errorRecoveryMethod(v100);
          if ((v62 & v99) == 1)
            v63 = *(_BYTE *)(v3 + 402) == 0;
          else
            v63 = v62 ^ 1u;
        }
        else
        {
          v63 = 0;
        }
        WebCore::FrameLoader::dispatchDidFailProvisionalLoad(v3, (WebCore::DocumentLoader *)v16, v100, v63);
      }
      if (*(_BYTE *)(v3 + 81) == 7 && !*(_QWORD *)(v3 + 88))
      {
        ++*(_DWORD *)(v16 + 24);
        *(_QWORD *)buf = v16;
        WebCore::FrameLoader::setDocumentLoader((unsigned int *)v3, (uint64_t *)buf);
        if (*(_QWORD *)buf)
        {
          if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
            (*(void (**)(void))(**(_QWORD **)buf + 24))();
          else
            --*(_DWORD *)(*(_QWORD *)buf + 24);
        }
      }
      if (v16 == *(_QWORD *)(v3 + 96))
      {
        WebCore::FrameLoader::clearProvisionalLoad((WebCore::FrameLoader *)v3);
      }
      else
      {
        v83 = 88;
        if (!*(_BYTE *)(v3 + 80))
          v83 = 96;
        v84 = *(_QWORD *)(v3 + v83);
        if (v84)
        {
          v85 = *(int **)(v84 + 368);
          if (v85)
          {
            v86 = *v85;
            v87 = v85[1];
            *v85 += 2;
            if (v87)
            {
              if ((*(_BYTE *)(v16 + 1056) & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v16 + 872));
                *(_BYTE *)(v16 + 1056) |= 1u;
              }
              v98 = (v47 == 0) & ~WTF::equal((WTF *)v85, *(const WTF::StringImpl **)(v16 + 872), v50);
              v86 = *v85 - 2;
            }
            if (v86)
              *v85 = v86;
            else
              WTF::StringImpl::destroy((WTF::StringImpl *)v85, v49);
            if ((v98 & 1) == 0)
              goto LABEL_132;
            goto LABEL_138;
          }
        }
      }
    }
    if (v47)
    {
LABEL_132:
      WebCore::FrameLoader::handleLoadFailureRecovery((WebCore::FrameLoader *)v3, (WebCore::DocumentLoader *)v16, v100, v99);
      result = (uint64_t)v102;
      v102 = 0;
      if (result)
        result = WTF::RefCounted<WebCore::HistoryItem>::deref(result);
      v43 = *(_DWORD *)(v16 + 24) - 1;
      goto LABEL_135;
    }
LABEL_138:
    v88 = v102;
    if (v102)
    {
      v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 24);
      if (v89)
      {
        v90 = *(WebCore::BackForwardController ***)(v89 + 8);
        if (v90)
        {
          ++*(_DWORD *)v90;
          WebCore::BackForwardController::setCurrentItem(v90[17], v88);
          WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v90);
        }
      }
    }
    goto LABEL_132;
  }
  result = *(_QWORD *)(result + 88);
  if (result)
  {
    result = WebCore::DocumentLoader::isLoadingInAPISense((WebCore::DocumentLoader *)result);
    if (!(_DWORD)result || *(_BYTE *)(*(_QWORD *)(v3 + 88) + 3538) || *(_BYTE *)(v3 + 350))
    {
      WebCore::FrameLoader::setState(v3);
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 56))(*(_QWORD *)(v3 + 16));
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 8))
        {
          v10 = *(unsigned __int8 *)(v3 + 81);
          if (v10 - 1 < 3 || v10 <= 9 && ((1 << v10) & 0x310) != 0)
          {
            v82 = *(_DWORD **)(v8 + 184);
            ++*v82;
            result = WebCore::HistoryController::restoreScrollPositionAndViewState((uint64_t)v82);
            if (!*v82)
            {
              __break(0xC471u);
              JUMPOUT(0x195EE0FC0);
            }
            --*v82;
          }
        }
      }
      if (*(int *)(v3 + 64) >= 2)
      {
        WebCore::FrameLoader::FrameProgressTracker::progressCompleted(*(WebCore::FrameLoader::FrameProgressTracker **)(v3 + 72));
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
        {
          v13 = *(WTF::MonotonicTime ***)(v12 + 8);
          if (v13)
          {
            v14 = *(_DWORD *)v13 + 1;
            *(_DWORD *)v13 = v14;
            if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) == v11)
            {
              kdebug_trace();
              WebCore::Page::didFinishLoad(v13, v41);
              v14 = *(_DWORD *)v13;
            }
            if (v14 == 1)
            {
              WebCore::Page::~Page((WebCore::Page *)v13);
              WTF::fastFree(v31, v32);
            }
            else
            {
              *(_DWORD *)v13 = v14 - 1;
            }
          }
        }
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 296);
        if (v15)
        {
          v64 = *(WebCore::LocalDOMWindow **)(v15 + 696);
          if (v64)
          {
            ++*((_DWORD *)v64 + 6);
            WebCore::LocalDOMWindow::protectedPerformance(v64, buf);
            WebCore::Performance::scheduleNavigationObservationTaskIfNeeded(*(_QWORD **)buf);
            v65 = *(WebCore::Performance **)buf;
            *(_QWORD *)buf = 0;
            if (v65)
            {
              if (*((_DWORD *)v65 + 4) == 1)
              {
                WebCore::Performance::~Performance(v65);
                WebCore::MediaQueryList::operator delete(v92);
              }
              else
              {
                --*((_DWORD *)v65 + 4);
              }
            }
            if (*((_DWORD *)v64 + 6) == 1)
              (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v64 + 72))(v64);
            else
              --*((_DWORD *)v64 + 6);
          }
        }
        v16 = *(_QWORD *)(v3 + 88);
        ++*(_DWORD *)(v16 + 24);
        v17 = *(unsigned __int8 *)(v16 + 1588);
        v18 = qword_1ECE7C860;
        v19 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
        if (v17)
        {
          if (v19)
          {
            v66 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8);
            v67 = v66[3];
            if (v67 && (v68 = *(_QWORD *)(v67 + 8)) != 0 && *(_BYTE *)(v68 + 40))
              v69 = *(_QWORD *)(v68 + 32);
            else
              v69 = 0;
            v70 = v66[4];
            v71 = *(_QWORD *)(v66[16] + 8) == (_QWORD)v66;
            WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)(v16 + 1528));
            v72 = *(_DWORD *)(v16 + 1584);
            *(_DWORD *)buf = 134219520;
            *(_QWORD *)&buf[4] = v3;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v69;
            *(_WORD *)&buf[22] = 2048;
            v104 = v70;
            v105 = 1024;
            v106 = v71;
            v107 = 1024;
            v108 = v17 == 4;
            v109 = 1024;
            v110 = v17 == 3;
            v111 = 1024;
            v112 = v72;
            _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::checkLoadCompleteForThisFrame: Finished frame load with error (isTimeout = %d, isCancellation = %d, errorCode = %d)", buf, 0x38u);
          }
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 320))(*(_QWORD *)(v3 + 16), v16 + 1528);
          *(_BYTE *)(v3 + 404) = 1;
          v28 = 2;
        }
        else
        {
          v20 = *(_QWORD *)(v3 + 8);
          if (v19)
          {
            v21 = *(_QWORD **)(v20 + 8);
            v22 = v21[3];
            if (v22)
            {
              v22 = *(_QWORD *)(v22 + 8);
              if (v22)
              {
                if (*(_BYTE *)(v22 + 40))
                  v22 = *(_QWORD *)(v22 + 32);
                else
                  v22 = 0;
              }
            }
            v23 = v21[4];
            v24 = *(_QWORD *)(v21[16] + 8) == (_QWORD)v21;
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = v3;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v22;
            *(_WORD *)&buf[22] = 2048;
            v104 = v23;
            v105 = 1024;
            v106 = v24;
            _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::checkLoadCompleteForThisFrame: Finished frame load", buf, 0x26u);
            v20 = *(_QWORD *)(v3 + 8);
          }
          v25 = *(unsigned int **)(v20 + 8);
          v26 = *((_QWORD *)v25 + 37);
          if (v26)
          {
            *(_DWORD *)(v26 + 24) += 2;
            v27 = *(_BYTE *)(*((_QWORD *)v25 + 17) + 616);
            if (v27)
            {
              v73 = v25 + 2;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 + 1, v73));
              v102 = (WebCore::HistoryItem *)v25;
              v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 944))(*(_QWORD *)(v3 + 16));
              v77 = v76;
              *(_QWORD *)buf = v3;
              WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&buf[8], *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
              *(_DWORD *)(v26 + 24) += 2;
              *(_QWORD *)&buf[16] = v26;
              v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v78 = &off_1E33F6028;
              v78[1] = *(_QWORD *)buf;
              v78[2] = *(_QWORD *)&buf[8];
              v79 = *(_QWORD *)&buf[16];
              *(_OWORD *)&buf[8] = 0uLL;
              v78[3] = v79;
              v101 = v78;
              WebCore::DataDetection::detectContentInFrame((uint64_t)v25, v27, v75, v77, (uint64_t *)&v101);
              v81 = (uint64_t)v101;
              v101 = 0;
              if (v81)
                (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
              WebCore::FrameLoader::checkLoadCompleteForThisFrame(WebCore::LoadWillContinueInAnotherProcess)::$_0::~$_0((uint64_t)buf, v80);
              WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v102);
            }
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 336))(*(_QWORD *)(v3 + 16));
            if (*(_DWORD *)(v26 + 24) == 2)
            {
              if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)v26);
            }
            else
            {
              *(_DWORD *)(v26 + 24) -= 2;
            }
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 336))(*(_QWORD *)(v3 + 16));
          }
          v28 = 3;
        }
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 296);
        if (v29)
        {
          *(_DWORD *)(v29 + 24) += 2;
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            result = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v29);
            if (result)
            {
              v93 = result;
              ++*(_DWORD *)(result + 8);
              v94 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
              v95 = (unsigned int *)(v94 + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 + 1, v95));
              *(_QWORD *)buf = v94;
              WebCore::AXObjectCache::frameLoadingEventNotification((WebCore::AXObjectCache *)result, v94, v28);
              result = (uint64_t)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)buf);
              v97 = *(_DWORD *)(v93 + 8);
              if (!v97)
              {
                __break(0xC471u);
                goto LABEL_165;
              }
              *(_DWORD *)(v93 + 8) = v97 - 1;
            }
          }
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v29);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        v30 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
        if (*(_QWORD *)(*(_QWORD *)(v30 + 128) + 8) == v30)
        {
          v33 = *(_QWORD *)(v30 + 24);
          if (v33)
          {
            if (*(_QWORD *)(v33 + 8))
            {
              v34 = (unsigned int *)(v30 + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 + 1, v34));
              *(_QWORD *)buf = v30;
              v36 = *(_QWORD *)(v30 + 24);
              if (v36)
              {
                v37 = *(uint64_t **)(v36 + 8);
                if (v37)
                  ++*(_DWORD *)v37;
              }
              else
              {
                v37 = 0;
              }
              v38 = WebCore::Page::diagnosticLoggingClient(v37);
              WebCore::DiagnosticLoggingKeys::pageLoadedKey((uint64_t *)&v102, (WebCore::DiagnosticLoggingKeys *)v38);
              (*(void (**)(uint64_t *, WebCore::HistoryItem **, _QWORD, BOOL, uint64_t))(*v38 + 8))(v38, &v102, MEMORY[0x1E0CBF738], *(_BYTE *)(v16 + 1588) != 0, 1);
              v40 = v102;
              v102 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v39);
                else
                  *(_DWORD *)v40 -= 2;
              }
              if (v37)
                WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v37);
              result = (uint64_t)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)buf);
            }
          }
        }
        if (*(_DWORD *)(v16 + 24) != 1)
        {
          --*(_DWORD *)(v16 + 24);
          return result;
        }
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      }
    }
  }
  return result;
}

uint64_t WebCore::FrameLoader::clientRedirected(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  WTF *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  uint64_t v10;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a1 + 153) = 1;
  if ((a3 & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
    ++*(_DWORD *)v3;
    result = *(_QWORD *)(v3 + 16);
    if (!result
      || *(_QWORD *)(v3 + 24)
      || (v7 = (WTF *)WebCore::HistoryItem::urlString((WebCore::HistoryItem *)result),
          v8 = (const WTF::StringImpl **)WTF::aboutBlankURL(v7),
          result = WTF::equalIgnoringASCIICase(*(WTF **)v7, *v8, v9),
          !(_DWORD)result))
    {
      *(_BYTE *)(a1 + 152) = 0;
LABEL_5:
      if (*(_DWORD *)v3)
      {
        --*(_DWORD *)v3;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
      return result;
    }
  }
  v10 = *(_QWORD *)(a1 + 88);
  if (v10)
    LOBYTE(v10) = *(_BYTE *)(a1 + 208) == 0;
  *(_BYTE *)(a1 + 152) = v10;
  if (v3 && (a3 & 1) == 0)
    goto LABEL_5;
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::open(WebCore::FrameLoader *this, WebCore::CachedFrameBase *a2)
{
  WTF::StringImpl *v4;
  __int128 v5;
  int v6;
  int v7;
  CGFloat v8;
  int v9;
  WebCore::LocalFrameView *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  CGFloat v17;
  int width_low;
  WebCore::Node *v19;
  const WTF::StringImpl *v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  const WTF::StringImpl *v28;
  WebCore::Node *v29;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *result;
  WebCore::Node *v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  _QWORD *v44;
  CGFloat x;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  const CGRect *v50;
  char v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  CGRect v55;
  WebCore::Node *v56;

  *((_BYTE *)this + 209) = 1;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v4)
    *(_DWORD *)v4 += 2;
  v52 = v4;
  v5 = *((_OWORD *)a2 + 3);
  v53 = *((_OWORD *)a2 + 2);
  v54 = v5;
  if ((v53 & 2) != 0)
  {
    WTF::URL::host((WTF::URL *)&v52);
    if (v6)
    {
      WTF::URL::path((WTF::URL *)&v52);
      if (!v7)
        WTF::URL::setPath();
    }
  }
  WebCore::FrameLoader::started((uint64_t)this);
  v8 = *(double *)a2;
  *(_DWORD *)(*(_QWORD *)&v8 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 4;
  v55.origin.x = v8;
  v9 = *((unsigned __int8 *)a2 + 80);
  v56 = 0;
  WebCore::FrameLoader::clear((uint64_t)this, (uint64_t)&v55, 1, 1, v9, &v56);
  if (*(_DWORD *)(*(_QWORD *)&v8 + 24) == 2)
  {
    if ((*(_WORD *)(*(_QWORD *)&v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v8);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)&v8 + 24) -= 2;
  }
  WebCore::Document::attachToCachedFrame(*(uint64_t *)&v8, a2);
  WebCore::Document::setBackForwardCacheState(*(uint64_t *)&v8, 0);
  *((_WORD *)this + 108) = 256;
  *((_BYTE *)this + 209) = 0;
  WebCore::FrameLoader::setOutgoingReferrer(this, (const WTF::URL *)&v52);
  v10 = (WebCore::LocalFrameView *)*((_QWORD *)a2 + 2);
  if (v10)
  {
    ++*((_DWORD *)v10 + 2);
    if (((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 704))(v10) & 1) == 0)
    {
      ++*((_DWORD *)v10 + 2);
      WebCore::LocalFrameView::setWasScrolledByUser(v10, 0);
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
    }
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(v11 + 288);
  if (v14)
  {
    v15 = *(void **)(v14 + 40);
    if (v15)
    {
      if (objc_msgSend(*(id *)(v14 + 40), "conformsToProtocol:", &unk_1EE342188))
        v15 = (void *)objc_msgSend(v15, "superview");
      objc_msgSend(v15, "frame");
      v55.origin.x = v46;
      v55.origin.y = v47;
      v55.size.width = v48;
      v55.size.height = v49;
      v16 = WebCore::enclosingIntRect(&v55, v50);
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 48);
      v17 = *(double *)(v14 + 56);
    }
    *(_QWORD *)&v55.origin.x = v16;
    v55.origin.y = v17;
    width_low = 1;
  }
  else
  {
    width_low = 0;
    LOBYTE(v55.origin.x) = 0;
  }
  LOBYTE(v55.size.width) = width_low;
  if (v10)
  {
    if (((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 704))(v10) & 1) == 0)
    {
      ++*((_DWORD *)v10 + 2);
      v56 = v10;
      WebCore::LocalFrame::setView(v11, &v56);
      v19 = v56;
      v56 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 2) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v19 + 8))(v19);
        else
          --*((_DWORD *)v19 + 2);
      }
    }
    width_low = LOBYTE(v55.size.width);
  }
  if (width_low)
    (*(void (**)(WebCore::LocalFrameView *, CGRect *))(*(_QWORD *)v10 + 16))(v10, &v55);
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v51, *(uint64_t *)&v8, 1);
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  do
    v21 = __ldaxr(v12);
  while (__stlxr(v21 + 1, v12));
  v22 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
  if (v22)
    v23 = *(_BYTE *)(v22 + 144) == 0;
  else
    v23 = 0;
  if (v23)
    ++*(_DWORD *)(v22 + 608);
  *(_DWORD *)(*(_QWORD *)&v8 + 24) += 2;
  v56 = *(WebCore::Node **)&v8;
  WebCore::LocalFrame::setDocument(v11, &v56, v20);
  v24 = v56;
  v56 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  v25 = *(_QWORD *)(*(_QWORD *)&v8 + 696);
  if (v25)
  {
    ++*(_DWORD *)(v25 + 24);
    v26 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = off_1E33FF850;
    v56 = v26;
    WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v25 + 96), &v56);
    v29 = v56;
    v56 = 0;
    if (v29)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v29 + 8))(v29);
    *(_BYTE *)(v25 + 89) = 0;
    if (*(_DWORD *)(v25 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    else
      --*(_DWORD *)(v25 + 24);
  }
  else
  {
    v40 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v40 = off_1E33FF850;
    v56 = v40;
    WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)0x60, &v56);
    v41 = v56;
    v56 = 0;
    if (v41)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v41 + 8))(v41);
    MEMORY[0x59] = 0;
  }
  WebCore::FrameLoader::updateFirstPartyForCookies(*(WTF::StringImpl **)(*((_QWORD *)this + 1) + 8), v27, v28);
  WebCore::CachedFrameBase::restore(a2);
  v31 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
  if (v31 && !*(_BYTE *)(v31 + 144))
    --*(_DWORD *)(v31 + 608);
  do
  {
    v32 = __ldaxr(v12);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v12));
  if (!v33)
  {
    atomic_store(1u, v12);
    v42 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v42 = off_1E31FE290;
    *((_QWORD *)v42 + 1) = v12;
    v56 = v42;
    WTF::ensureOnMainThread();
    v43 = v56;
    v56 = 0;
    if (v43)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v43 + 8))(v43);
  }
  v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v56, v30);
    v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v34 - 1;
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v51, v30);
  do
  {
    v37 = __ldaxr(v12);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v12));
  if (!v38)
  {
    atomic_store(1u, v12);
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v44 = off_1E31FE290;
    v44[1] = v12;
    *(_QWORD *)&v55.origin.x = v44;
    WTF::ensureOnMainThread();
    x = v55.origin.x;
    v55.origin.x = 0.0;
    if (x != 0.0)
      (*(void (**)(CGFloat))(**(_QWORD **)&x + 8))(COERCE_CGFLOAT(*(_QWORD *)&x));
  }
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
  }
  if (*(_DWORD *)(*(_QWORD *)&v8 + 24) == 2)
  {
    if ((*(_WORD *)(*(_QWORD *)&v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v8);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)&v8 + 24) -= 2;
  }
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::FrameLoader::isReplacing(WebCore::FrameLoader *this)
{
  return *((_BYTE *)this + 81) == 7;
}

WTF::StringImpl *WebCore::FrameLoader::dispatchDidFailProvisionalLoad(uint64_t a1, WebCore::DocumentLoader *this, WebCore::ResourceError *a3, uint64_t a4)
{
  _DWORD **v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  unsigned int Failure;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  int v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;

  v8 = (_DWORD **)((char *)this + 872);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  v9 = *v8;
  if (*v8)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, this);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((_OWORD *)this + 55);
  *(_OWORD *)(a1 + 136) = *((_OWORD *)this + 56);
  *(_OWORD *)(a1 + 120) = v11;
  *(_BYTE *)(a1 + 404) = 1;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184) + 32);
  Failure = WebCore::DocumentLoader::contentFilterWillHandleProvisionalLoadFailure(this, a3);
  v14 = Failure;
  if (v12)
    v15 = 1;
  else
    v15 = Failure;
  (*(void (**)(_QWORD, WebCore::ResourceError *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 312))(*(_QWORD *)(a1 + 16), a3, v15, a4);
  if (v14)
    WebCore::DocumentLoader::contentFilterHandleProvisionalLoadFailure(this, a3);
  v21 = 0;
  WTF::URL::invalidate((WTF::URL *)&v21);
  v17 = v21;
  v21 = 0;
  v18 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v16);
      result = v21;
    }
    else
    {
      result = 0;
      *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    result = 0;
  }
  v20 = v22;
  *(_OWORD *)(a1 + 120) = v22;
  LODWORD(v22) = v20 & 0xFFFFFFFE;
  *(_OWORD *)(a1 + 136) = v23;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FrameLoader::handleLoadFailureRecovery(WebCore::FrameLoader *this, WebCore::DocumentLoader *a2, const WebCore::ResourceError *a3, int a4)
{
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  const void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  _BYTE buf[24];
  __int128 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  char v52;
  const void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v10 = v9[3];
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && *(_BYTE *)(v11 + 40))
      v12 = *(_QWORD *)(v11 + 32);
    else
      v12 = 0;
    v13 = v9[4];
    v14 = *(_QWORD *)(v9[16] + 8) == (_QWORD)v9;
    WebCore::ResourceError::errorRecoveryMethod(a3);
    v15 = *((unsigned __int8 *)this + 402);
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v12;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v42 = v13;
    WORD4(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 10) = v14;
    HIWORD(v42) = 1024;
    v43 = v16;
    v44 = 1024;
    v45 = a4;
    v46 = 1024;
    v47 = v15;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::handleLoadFailureRecovery: errorRecoveryMethod: %hhu, isHTTPSFirstApplicable: %d, isHTTPFallbackInProgress: %d", buf, 0x38u);
  }
  WebCore::ResourceError::errorRecoveryMethod(a3);
  if (!v17 || !a4)
  {
    if (!*((_BYTE *)this + 402))
      return;
    goto LABEL_40;
  }
  if (*((_BYTE *)this + 402))
  {
LABEL_40:
    *((_BYTE *)this + 402) = 0;
    return;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)buf, (WebCore::DocumentLoader *)((char *)a2 + 872));
  v18 = (_DWORD *)*((_QWORD *)a2 + 128);
  if (v18)
    *v18 += 2;
  v48 = v18;
  v19 = (_DWORD *)*((_QWORD *)a2 + 129);
  if (v19)
    *v19 += 2;
  v49 = v19;
  v20 = (_DWORD *)*((_QWORD *)a2 + 130);
  if (v20)
    ++*v20;
  v21 = *((_QWORD *)a2 + 131);
  v50 = v20;
  v51 = v21;
  v52 = *((_BYTE *)a2 + 1056);
  v22 = (const void *)*((_QWORD *)a2 + 133);
  v53 = v22;
  if (v22)
    CFRetain(v22);
  if ((v52 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
    v52 |= 1u;
  }
  v23 = *(WTF::StringImpl **)buf;
  if (*(_QWORD *)buf)
    **(_DWORD **)buf += 2;
  v37 = v23;
  v38 = *(_OWORD *)&buf[8];
  v39 = v42;
  WTF::URL::setProtocol();
  if ((WTF::URL::port((WTF::URL *)&v37) & 0xFF0000) != 0)
  {
    if ((WTF::URL::port((WTF::URL *)&v37) & 0xFF0000) == 0)
    {
      v35 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v35, v36);
      return;
    }
    if (WTF::isDefaultPortForProtocol())
    {
      WTF::URL::protocol((WTF::URL *)&v37);
      WTF::defaultPortForProtocol();
      WTF::URL::setPort();
    }
  }
  *((_BYTE *)this + 402) = 1;
  v24 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v25 = (unsigned int *)(v24 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = *(_DWORD **)(v24 + 152);
  ++*v27;
  v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v28)
    *(_DWORD *)(v28 + 24) += 2;
  WebCore::NavigationScheduler::scheduleRedirect((uint64_t)v27, (WebCore::Document *)v28, (WTF::URL *)&v37, 0, 0.0);
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  if (!*v27)
  {
    __break(0xC471u);
    JUMPOUT(0x195EE1C4CLL);
  }
  --*v27;
  do
  {
    v30 = __ldaxr(v25);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v25));
  if (!v31)
  {
    atomic_store(1u, v25);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v33 = off_1E31FE290;
    v33[1] = v25;
    v40 = v33;
    WTF::ensureOnMainThread();
    v34 = v40;
    v40 = 0;
    if (v34)
      (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  }
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v29);
}

uint64_t WebCore::FrameLoader::checkLoadCompleteForThisFrame(WebCore::LoadWillContinueInAnotherProcess)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::FrameLoader::setOriginalURLForDownloadRequest(WebCore::FrameLoader *this, WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  const WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WebCore::Page *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  const WebCore::Document *v29;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *result;
  WTF *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42[5];
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;

  v43 = 0;
  WTF::URL::invalidate((WTF::URL *)&v43);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (!v6)
  {
    v14 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(WTF::StringImpl **)(v6 + 1008);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = v43;
  v43 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v4);
      v7 = v43;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *(_OWORD *)(v6 + 1032);
  v44 = *(_OWORD *)(v6 + 1016);
  v45 = v9;
  if (v7 && *((_DWORD *)v7 + 1)
    || (v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160)) == 0
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || *(_BYTE *)(v11 + 144))
  {
    v14 = v6;
    goto LABEL_28;
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(v11 + 296);
  if (v14)
  {
    v15 = *(WTF::StringImpl **)(v14 + 1008);
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = v43;
    v43 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v4);
        v36 = *(_QWORD *)(v11 + 296);
        v37 = *(_OWORD *)(v14 + 1032);
        v44 = *(_OWORD *)(v14 + 1016);
        v45 = v37;
        v14 = v36;
        if (!v36)
        {
LABEL_21:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          goto LABEL_26;
        }
LABEL_20:
        *(_DWORD *)(v14 + 24) += 2;
        goto LABEL_21;
      }
      *(_DWORD *)v16 -= 2;
    }
    v17 = *(_OWORD *)(v14 + 1032);
    v44 = *(_OWORD *)(v14 + 1016);
    v45 = v17;
    goto LABEL_20;
  }
  v14 = v6;
  do
  {
LABEL_26:
    v18 = __ldaxr(v12);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v12));
  if (!v19)
  {
    atomic_store(1u, v12);
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v40 = off_1E31FE290;
    *((_QWORD *)v40 + 1) = v12;
    v42[0] = v40;
    WTF::ensureOnMainThread();
    v41 = v42[0];
    v42[0] = 0;
    if (v41)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
  }
LABEL_28:
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (WTF::equal(v43, *(const WTF::StringImpl **)a2, v5))
  {
    v42[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v42);
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WTF **)a2, (const WTF::URL *)v42, v21);
    v24 = v42[0];
    v42[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WTF **)a2, (const WTF::URL *)&v43, v20);
  }
  v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v26 = (unsigned int *)(v25 + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = *(_QWORD *)(v25 + 24);
  if (v28 && (v29 = *(const WebCore::Document **)(v28 + 8)) != 0)
  {
    ++*(_DWORD *)v29;
    WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)a2, (WebCore::ResourceRequest *)v14, v29, v23);
    if (*(_DWORD *)v29 == 1)
    {
      WebCore::Page::~Page((uint64_t)v29);
      WTF::fastFree(v34, v35);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
  else
  {
    WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)a2, (WebCore::ResourceRequest *)v14, 0, v23);
  }
  do
  {
    v31 = __ldaxr(v26);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v26));
  if (!v32)
  {
    atomic_store(1u, v26);
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v38 = off_1E31FE290;
    *((_QWORD *)v38 + 1) = v26;
    v42[0] = v38;
    WTF::ensureOnMainThread();
    v39 = v42[0];
    v42[0] = 0;
    if (v39)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 8))(v39);
  }
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v30);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FrameLoader::didReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 368))(*(_QWORD *)(a1 + 16), a2);
}

WTF::MonotonicTime *WebCore::FrameLoader::detachFromParent(WebCore::FrameLoader *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::HistoryItem *v6;
  unsigned int *v8;
  WebCore::FrameLoader::FrameProgressTracker *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF::MonotonicTime *v13;
  WTF::MonotonicTime *result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  unsigned int v26;
  WTF::MonotonicTime *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::MonotonicTime *v32;
  WTF::MonotonicTime *v33;

  v2 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  v3 = v2 + 2;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebCore::FrameLoader::closeURL(this);
  v5 = *((_QWORD *)v2 + 23);
  ++*(_DWORD *)v5;
  v6 = *(WebCore::HistoryItem **)(v5 + 16);
  if (v6)
  {
    ++*(_DWORD *)v6;
    WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v5, v6);
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v6);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v5, 0);
  }
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195EE2484);
  }
  --*(_DWORD *)v5;
  WebCore::FrameLoader::detachChildren(this);
  if (*(_BYTE *)(*((_QWORD *)v2 + 37) + 3362) != 2)
    WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 1, 1);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v30 = *((_QWORD *)v2 + 3);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
        WebCore::InspectorInstrumentation::frameDetachedFromParentImpl(*(_QWORD *)(*(_QWORD *)(v31 + 80) + 8), (WebCore::LocalFrame *)v2);
    }
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v33 = 0;
  WebCore::FrameLoader::setDocumentLoader(this, &v33);
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)v33 + 24))();
    else
      --*((_DWORD *)v33 + 6);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v9 = (WebCore::FrameLoader::FrameProgressTracker *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker(v9, v8);
    if (*(_DWORD *)v10)
    {
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v10, v11);
    }
  }
  v12 = *((_QWORD *)v2 + 7);
  if (v12)
  {
    v17 = *(_QWORD *)(v12 + 8);
    if (v17)
    {
      if (!*(_BYTE *)(v17 + 144))
      {
        v18 = (unsigned int *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        v20 = *(_QWORD *)(v17 + 280);
        ++*(_DWORD *)v20;
        result = (WTF::MonotonicTime *)WebCore::FrameLoader::closeAndRemoveChild((WebCore::FrameLoader *)v20, (WebCore::LocalFrame *)v2);
        *(_BYTE *)(v20 + 320) = 1;
        v21 = *(_QWORD *)(v20 + 296) & 0xFFFFFFFFFFFFLL;
        if (!v21 || *(double *)((*(_QWORD *)(v20 + 296) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *(_QWORD *)(v20 + 288) = 0;
          WTF::MonotonicTime::now(result);
          result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v20 + 264, v22 + 0.0);
          v23 = *(_QWORD *)(v20 + 296);
          *(_BYTE *)(v20 + 321) = 1;
          v21 = v23 & 0xFFFFFFFFFFFFLL;
          if (!v21)
          {
LABEL_30:
            *(_QWORD *)(v20 + 288) = 0;
            WTF::MonotonicTime::now(result);
            result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v20 + 264, v24 + 0.0);
LABEL_31:
            if (!*(_DWORD *)v20)
            {
              __break(0xC471u);
              JUMPOUT(0x195EE2518);
            }
            --*(_DWORD *)v20;
            do
            {
              v25 = __ldaxr(v18);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v18));
            if (!v26)
            {
              atomic_store(1u, v18);
              v27 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v27 = off_1E31FE290;
              *((_QWORD *)v27 + 1) = v18;
              v33 = v27;
              WTF::ensureOnMainThread();
              result = v33;
              v33 = 0;
              if (result)
                result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
            }
            goto LABEL_21;
          }
        }
        else
        {
          *(_BYTE *)(v20 + 321) = 1;
        }
        if (*(double *)(v21 + 8) != 0.0)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
  }
  v33 = 0;
  WebCore::LocalFrame::setView(v2, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
  }
  WebCore::LocalFrame::willDetachPage((WebCore::LocalFrame *)v2);
  result = (WTF::MonotonicTime *)WebCore::Frame::detachFromPage((WebCore::Frame *)v2);
  do
  {
LABEL_21:
    v15 = __ldaxr(v3);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v3));
  if (!v16)
  {
    atomic_store(1u, v3);
    v32 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = off_1E31FE290;
    *((_QWORD *)v32 + 1) = v3;
    v33 = v32;
    WTF::ensureOnMainThread();
    result = v33;
    v33 = 0;
    if (result)
      return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned int *WebCore::FrameLoader::closeAndRemoveChild(WebCore::FrameLoader *this, WebCore::LocalFrame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *result;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;

  v4 = (unsigned int *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v15 = 0;
  WebCore::LocalFrame::setView(a2, &v15);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  WebCore::LocalFrame::willDetachPage(a2);
  WebCore::Frame::detachFromPage(a2);
  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  result = WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v8 + 48), a2);
  if (v8)
  {
    do
    {
      v12 = __ldaxr(v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v9));
    if (!v13)
    {
      atomic_store(1u, v9);
      v14 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v14 = off_1E31FE290;
      *((_QWORD *)v14 + 1) = v9;
      v15 = v14;
      WTF::ensureOnMainThread();
      result = v15;
      v15 = 0;
      if (result)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::navigatorPlatform@<X0>(WebCore::FrameLoader *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                               + 8)
                                                                                   + 128)
                                                                       + 8)
                                                         + 104))(&v5);
  result = v5;
  if (v5)
  {
    if (*((_DWORD *)v5 + 1))
    {
      *a2 = v5;
    }
    else
    {
      *a2 = 0;
      v5 = 0;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::FrameLoader::frameDetached(WebCore::FrameLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::FrameLoader *)((char *)this + 264));
    WebCore::FrameLoader::checkCompletenessNow(this, v12);
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 296) + 3362) != 2)
  {
    WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 1, 0);
    if ((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 37) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::FrameLoader *)((char *)this + 264));
      *((_BYTE *)this + 350) = 1;
      WebCore::FrameLoader::checkCompletenessNow(this, v13);
      *((_BYTE *)this + 350) = 0;
    }
  }
  result = (uint64_t)WebCore::FrameLoader::detachFromParent(this);
  v7 = *(_QWORD *)(v2 + 296);
  if (*(_BYTE *)(v7 + 3362) != 2)
  {
    *(_DWORD *)(v7 + 24) += 2;
    result = WebCore::Document::stopActiveDOMObjects((WebCore::Document *)v7, v6);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    atomic_store(1u, v3);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v3;
    v14 = (uint64_t)v11;
    WTF::ensureOnMainThread();
    result = v14;
    if (v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

uint64_t WebCore::FrameLoader::detachViewsAndDocumentLoader(WebCore::FrameLoader *this)
{
  _DWORD *v3;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v3 = 0;
  WebCore::FrameLoader::setDocumentLoader((unsigned int *)this, (uint64_t *)&v3);
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v3 + 24))();
    else
      --v3[6];
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
}

uint64_t *WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

Inspector::IdentifiersFactory *WebCore::FrameLoader::loadResourceSynchronously(WebCore::FrameLoader *a1, WebCore::ResourceRequest *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::ResourceError *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::SecurityOrigin *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Page *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  WebCore::ResourceLoadObserver *FallbackSynchronously;
  uint64_t *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  _DWORD *v59;
  Inspector::IdentifiersFactory *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  void *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  void *v75;
  WebCore::ResourceRequest *v76;
  WTF::StringImpl *v77;
  WTF *v78;
  __int128 v79;
  __int128 v80;
  _DWORD *v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89[7];
  const WTF::StringImpl *v90[23];
  char v91;
  WTF *v92;
  __int128 v93;
  __int128 v94;
  char v95;
  WTF::StringImpl **v96;
  Inspector::IdentifiersFactory *v97;

  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 + 192) + 8))(v16 + 192);
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WebCore::FrameLoader::outgoingReferrerURL(a1, (uint64_t)&v77);
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  WebCore::SecurityPolicy::generateReferrerHeader(a2, (WTF::StringImpl ***)&v77, v17, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, &v96);
  v19 = v77;
  v77 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v92, a2);
  WebCore::ResourceRequestBase::setTimeoutInterval((WebCore::ResourceRequestBase *)&v92, 10.0);
  if (v96 && *((_DWORD *)v96 + 1))
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v92, (WTF::StringImpl **)&v96);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296) + 192), v20);
  WebCore::SecurityOrigin::toString(v21, &v77);
  WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)&v92, (WebCore::ResourceRequest *)&v77, v22);
  v25 = v77;
  v77 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  v27 = *(_QWORD *)(v26 + 24);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      WebCore::ResourceRequestBase::setFirstPartyForCookies(&v92, (const WTF::URL *)(v28 + 168), v24);
      v26 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
    }
  }
  WebCore::FrameLoader::updateRequestAndAddExtraFields((uint64_t)a1, v26, (WebCore::FrameLoader *)&v92, 0, 0, 1, 0, 0, 0);
  WebCore::FrameLoader::applyUserAgentIfNeeded(a1, (WebCore::ResourceRequest *)&v92);
  v97 = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v90, (const WebCore::ResourceRequest *)&v92);
  WebCore::FrameLoader::requestFromDelegate((uint64_t)a1, (uint64_t)v90, (uint64_t *)&v97, (uint64_t)a6);
  v29 = *((_QWORD *)a1 + 1);
  if (!*((_BYTE *)a6 + 60))
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 24);
    if (v30)
    {
      v31 = *(WebCore::Page **)(v30 + 8);
      if (v31)
      {
        v76 = a2;
        v32 = a4;
        v33 = a3;
        v34 = a5;
        ++*(_DWORD *)v31;
        v35 = (_DWORD *)*((_QWORD *)a1 + 11);
        if (v35)
        {
          ++v35[6];
          v36 = WebCore::Page::userContentProvider(v31);
          if ((v91 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v90);
            v91 |= 1u;
          }
          v77 = 0;
          WTF::URL::invalidate((WTF::URL *)&v77);
          WebCore::UserContentProvider::processContentRuleListsForLoad(v36, (uint64_t)v31, v90, 512, (uint64_t)v35, (WTF::URL *)&v77, (uint64_t)v89);
          v38 = v77;
          v77 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v37);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = LOBYTE(v89[0]);
          WebCore::ContentExtensions::applyResultsToRequest((uint64_t)v89, (uint64_t)v31, (WebCore::ResourceRequestBase *)v90);
          if (v39)
          {
            WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v77);
            WebCore::ResourceRequest::operator=((uint64_t)v90, (uint64_t)&v77);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v77, v68);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v69 = v77;
            if ((v95 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v92);
              v95 |= 1u;
            }
            if (v69)
              *(_DWORD *)v69 += 2;
            v77 = v69;
            v70 = v92;
            if (v92)
              *(_DWORD *)v92 += 2;
            v78 = v70;
            v79 = v93;
            v80 = v94;
            v71 = (_DWORD *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *v71 += 2;
            v81 = v71;
            v82 = 0;
            v83 = 1;
            v84 = 0;
            v85 = 1;
            WebCore::ResourceError::operator=((uint64_t)a6, (uint64_t)&v77);
            WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v77, v72);
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v73);
              else
                *(_DWORD *)v69 -= 2;
            }
            WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v77);
            v87 = 0;
            v88 = 0;
            v86 = v86 & 0xF1 | 4;
            WebCore::ResourceResponse::operator=(a7, (uint64_t)&v77);
            WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&v77, v74);
            WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=(a8, v75);
          }
          WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v89, v40);
          if (v35[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 24))(v35);
          else
            --v35[6];
        }
        WTF::RefCounted<WebCore::Page>::deref(v31);
        v29 = *((_QWORD *)a1 + 1);
        a5 = v34;
        a3 = v33;
        a4 = v32;
        a2 = v76;
      }
    }
  }
  v41 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 296);
  if (v41)
    *(_DWORD *)(v41 + 24) += 2;
  v42 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v41 + 192));
  if (v42)
  {
    v43 = v42;
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 + 1, v42));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v42, (WebCore::ResourceRequest *)v90, 0, 0);
    if (!atomic_load(v43))
    {
      __break(0xC471u);
      JUMPOUT(0x195EE3040);
    }
    do
      v46 = __ldaxr(v43);
    while (__stlxr(v46 - 1, v43));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)v90, 0, 0);
  }
  if (v41)
  {
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
  }
  if (!*((_BYTE *)a6 + 60))
  {
    v47 = *((_QWORD *)a1 + 11);
    if (v47)
      ++*(_DWORD *)(v47 + 24);
    if ((WebCore::ApplicationCacheHost::maybeLoadSynchronously(*(_QWORD *)(v47 + 2872), (const WebCore::ResourceRequest *)v90, (uint64_t)a6, a7, a8) & 1) == 0)
    {
      v77 = 0;
      v78 = 0;
      v48 = WebCore::s_platformStrategies;
      v49 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
      if (!v49)
      {
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
        *(_QWORD *)(v48 + 8) = v49;
      }
      (*(void (**)(uint64_t, WebCore::FrameLoader *, Inspector::IdentifiersFactory *, const WTF::StringImpl **, uint64_t, uint64_t, uint64_t, WebCore::ResourceError *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v49 + 8))(v49, a1, v97, v90, a3, a4, a5, a6, a7, &v77);
      WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v77, v89);
      WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=<WebCore::SharedBuffer>(a8, v89);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v89, v50);
      FallbackSynchronously = (WebCore::ResourceLoadObserver *)WebCore::ApplicationCacheHost::maybeLoadFallbackSynchronously(*(_QWORD *)(v47 + 2872), (WebCore::ApplicationCache *)v90, (uint64_t)a6, a7, a8);
      v52 = WebCore::ResourceLoadObserver::shared(FallbackSynchronously);
      v53 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
      v54 = (unsigned int *)(v53 + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      v89[0] = v53;
      (*(void (**)(uint64_t *))(*v52 + 16))(v52);
      WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(v89);
      v57 = v77;
      if (v77)
      {
        v77 = 0;
        LODWORD(v78) = 0;
        WTF::fastFree(v57, v56);
      }
    }
    if (*(_DWORD *)(v47 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
    else
      --*(_DWORD *)(v47 + 24);
  }
  v58 = (uint64_t)a1 + 32;
  v59 = (_DWORD *)*((_QWORD *)a1 + 11);
  if (v59)
    ++v59[6];
  v60 = v97;
  v61 = *a8;
  if (*a8)
    v62 = *(unsigned int *)(v61 + 48);
  else
    v62 = 0;
  WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages(v58, (uint64_t)v59, v97, a2, a7, v61, v62, -1, a6);
  if (v59)
  {
    if (v59[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 24))(v59);
    else
      --v59[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v90, v63);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v92, v64);
  v66 = (WTF::StringImpl *)v96;
  v96 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v65);
    else
      *(_DWORD *)v66 -= 2;
  }
  return v60;
}

uint64_t *WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v9;
              v17 = v8;
              v18 = (WTF *)v10;
              v19 = v3;
              atomic_store(1u, v10);
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F5B60[v13])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v19;
              v9 = v16;
              v8 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v20 = v3;
        WTF::fastFree(v14, a2);
        v3 = v20;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t *WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;

  WebCore::FragmentedSharedBuffer::create(a1, &v6);
  v3 = WTF::fastMalloc((WTF *)0x38);
  *a2 = WebCore::SharedBuffer::SharedBuffer(v3, &v6);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v6, v4);
}

uint64_t WebCore::FrameLoader::receivedMainResourceError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = 88;
  if (!*(_BYTE *)(a1 + 80))
    v9 = 96;
  v10 = *(_DWORD **)(a1 + v9);
  if (v10)
    ++v10[6];
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_DWORD **)(*(_QWORD *)(v11 + 296) + 728);
  if (v14)
  {
    ++v14[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 104))(v14);
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 72))(v14);
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  do
  {
    v15 = __ldaxr(v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v12));
  if (!v16)
  {
    atomic_store(1u, v12);
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = off_1E31FE290;
    *((_QWORD *)v32 + 1) = v12;
    v35 = v32;
    WTF::ensureOnMainThread();
    v33 = v35;
    v35 = 0;
    if (v33)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 656))(*(_QWORD *)(a1 + 16), a2))
  {
    v19 = v6[15];
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (*(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
        {
          *(_DWORD *)(v20 + 24) += 2;
          WebCore::HTMLObjectElement::renderFallbackContent(v20, v17);
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 80))
  {
    v25 = *(_QWORD *)(a1 + 96);
    if (v25)
    {
      if ((*(_BYTE *)(v25 + 856) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v25 + 672));
        *(_BYTE *)(v25 + 856) |= 1u;
      }
      if (WTF::equal(*(WTF **)(a1 + 224), *(const WTF::StringImpl **)(v25 + 672), v18))
      {
        v35 = 0;
        WTF::URL::invalidate((WTF::URL *)&v35);
        v27 = v35;
        v35 = 0;
        v28 = *(WTF::StringImpl **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::destroy(v28, v26);
            v29 = v35;
          }
          else
          {
            v29 = 0;
            *(_DWORD *)v28 -= 2;
          }
        }
        else
        {
          v29 = 0;
        }
        v30 = v36;
        *(_OWORD *)(a1 + 232) = v36;
        LODWORD(v36) = v30 & 0xFFFFFFFE;
        *(_OWORD *)(a1 + 248) = v37;
        v35 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v26);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
      v31 = (_DWORD *)v6[23];
      ++*v31;
      WebCore::HistoryController::invalidateCurrentItemCachedPage((uint64_t)v31);
      if (!*v31)
      {
        __break(0xC471u);
        JUMPOUT(0x195EE3600);
      }
      --*v31;
      if (*(_BYTE *)(a1 + 153))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
        *(_WORD *)(a1 + 152) = 0;
      }
    }
  }
  result = WebCore::FrameLoader::checkCompleted((WebCore::FrameLoader *)a1);
  v22 = v6[3];
  if (v22 && *(_QWORD *)(v22 + 8))
    result = WebCore::FrameLoader::checkLoadComplete(a1, a3);
  if (v10)
  {
    if (v10[6] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
    else
      --v10[6];
  }
  do
  {
    v23 = __ldaxr(v7);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v7));
  if (!v24)
  {
    atomic_store(1u, v7);
    v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = off_1E31FE290;
    *((_QWORD *)v34 + 1) = v7;
    v35 = v34;
    WTF::ensureOnMainThread();
    result = (uint64_t)v35;
    v35 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FrameLoader::continueFragmentScrollAfterNavigationPolicy(uint64_t result, WebCore::ResourceRequest *this, const WebCore::SecurityOrigin *a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::DocumentLoader *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  _BYTE buf[12];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(result + 152) = 0;
  if (a4)
  {
    v8 = result;
    v9 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(result + 96);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 1056) & 1) == 0)
      {
        v31 = *(_QWORD *)(result + 96);
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 872));
        *(_BYTE *)(v31 + 1056) |= 1u;
      }
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if ((WTF::equalIgnoringFragmentIdentifier() & 1) == 0)
      {
        v22 = *(WebCore::DocumentLoader **)(v8 + 96);
        if (v22)
        {
          ++*((_DWORD *)v22 + 6);
          WebCore::DocumentLoader::stopLoading(v22);
          if (*((_DWORD *)v22 + 6) == 1)
            (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v22 + 24))(v22);
          else
            --*((_DWORD *)v22 + 6);
        }
        else
        {
          WebCore::DocumentLoader::stopLoading(0);
        }
        v23 = qword_1ECE7C860;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8);
          v25 = v24[3];
          if (v25)
          {
            v25 = *(_QWORD *)(v25 + 8);
            if (v25)
            {
              if (*(_BYTE *)(v25 + 40))
                v25 = *(_QWORD *)(v25 + 32);
              else
                v25 = 0;
            }
          }
          v26 = v24[4];
          v27 = *(_QWORD *)(v24[16] + 8) == (_QWORD)v24;
          v28 = *(_QWORD *)(v8 + 96);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = v8;
          v37 = 2048;
          v38 = v25;
          v39 = 2048;
          v40 = v26;
          v41 = 1024;
          v42 = v27;
          v43 = 2048;
          v44 = v28;
          _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueFragmentScrollAfterNavigationPolicy: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", buf, 0x30u);
        }
        *(_QWORD *)buf = 0;
        WebCore::FrameLoader::setProvisionalDocumentLoader(v8, (uint64_t *)buf);
        if (*(_QWORD *)buf)
        {
          if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
            (*(void (**)(void))(**(_QWORD **)buf + 24))();
          else
            --*(_DWORD *)(*(_QWORD *)buf + 24);
        }
      }
    }
    if (*(_BYTE *)(v8 + 152))
      v13 = 0;
    else
      v13 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 26) != 6;
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v14 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v14 += 2;
    v32 = 0;
    v33 = v14;
    v15 = *(_OWORD *)((char *)this + 24);
    v34 = *(_OWORD *)((char *)this + 8);
    v35 = v15;
    WebCore::FrameLoader::loadInSameDocument(v8, &v33, (uint64_t *)&v32, a3, v13, a5);
    v17 = v32;
    v32 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v17 + 2), v16);
        WTF::fastFree((WTF *)v17, v29);
      }
    }
    result = (uint64_t)v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
    if (v9)
    {
      do
      {
        v20 = __ldaxr(v10);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v10));
      if (!v21)
      {
        atomic_store(1u, v10);
        v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v30 = off_1E31FE290;
        v30[1] = v10;
        *(_QWORD *)buf = v30;
        WTF::ensureOnMainThread();
        result = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void WebCore::FrameLoader::loadProvisionalItemFromCachedPage(WebCore::FrameLoader *this)
{
  uint64_t v2;
  uint64_t *Start;
  uint64_t v4;
  void *v5;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    ++*(_DWORD *)(v2 + 24);
  Start = WebCore::FrameLoader::prepareForLoadStart(this);
  *((_BYTE *)this + 322) = 1;
  *(_BYTE *)(v2 + 2776) = 0;
  *(_OWORD *)(v2 + 2744) = 0u;
  *(_OWORD *)(v2 + 2760) = 0u;
  *(_OWORD *)(v2 + 2728) = 0u;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)Start);
  *(_QWORD *)(v2 + 2728) = v4;
  *(_BYTE *)(v2 + 3537) = 1;
  WebCore::FrameLoader::commitProvisionalLoad(this, v5);
  if (*(_DWORD *)(v2 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    --*(_DWORD *)(v2 + 24);
}

void WebCore::FrameLoader::continueLoadAfterNewWindowPolicy(uint64_t a1, WebCore::ResourceRequest *this, uint64_t a3, _QWORD *a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (**v22)();
  void *v23;
  int v24;
  unsigned int v26;
  int v27;
  uint64_t v28;
  WebCore::Frame *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t (*v61)();
  int v62;
  unsigned int v63;
  int v64;
  _QWORD *v65;
  _DWORD *v66;
  uint64_t (*v67[108])();
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v64 = a7;
    if (!WTF::URL::protocolIsJavaScript(this))
      goto LABEL_20;
    v63 = a8;
    v18 = *(_QWORD *)(v15 + 296);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    v19 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v18 + 192));
    v20 = v19;
    if (v19)
    {
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 + 1, v19));
    }
    v22 = (uint64_t (**)())(*(_QWORD *)(v15 + 296) + 736);
    LODWORD(v67[0]) = 0;
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v24 = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v20, v22, v67, (uint64_t (**)())this, 0);
    if (v20)
    {
      if (!atomic_load(v20))
      {
        __break(0xC471u);
        JUMPOUT(0x195EE3F54);
      }
      do
        v26 = __ldaxr(v20);
      while (__stlxr(v26 - 1, v20));
    }
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v23);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    a8 = v63;
    if (v24)
    {
LABEL_20:
      v27 = a8;
      v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16), a5, a8);
      if (v28)
      {
        v29 = (WebCore::Frame *)v28;
        v30 = (unsigned int *)(v28 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v32 = *(_QWORD *)(v28 + 280);
        ++*(_DWORD *)v32;
        v33 = WebCore::FrameLoader::effectiveSandboxFlags(*(WebCore::FrameLoader **)(v15 + 280));
        if ((v33 & 0x200) != 0)
          *(_DWORD *)(v32 + 328) |= v33;
        v34 = (_DWORD *)*a4;
        if (*a4)
        {
          v35 = v34[4];
          v36 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
          LODWORD(v34) = v34[1];
          v37 = (v35 >> 2) & 1;
        }
        else
        {
          v36 = 0;
          v37 = 1;
        }
        if (!WebCore::isBlankTargetFrameName(v36, v34 | (unint64_t)(v37 << 32)))
        {
          v39 = (_DWORD *)*a4;
          if (*a4)
            *v39 += 2;
          v40 = (WTF::StringImpl *)*((_QWORD *)v29 + 8);
          *((_QWORD *)v29 + 8) = v39;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v38);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        v41 = *((_QWORD *)v29 + 3);
        if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
        {
          v43 = (*(_DWORD *)v42)++;
          *(_BYTE *)(v42 + 336) = 1;
          if (v43)
          {
            *(_DWORD *)v42 = v43;
          }
          else
          {
            WebCore::Page::~Page(v42);
            WTF::fastFree(v56, v57);
          }
        }
        else
        {
          MEMORY[0x150] = 1;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 16) + 392))(*(_QWORD *)(v32 + 16));
        if (v27 == 1)
        {
          WebCore::Frame::setOpener(v29, (WebCore::Frame *)v15);
          v44 = *((_QWORD *)v29 + 37);
          if (v44)
          {
            *(_DWORD *)(v44 + 24) += 2;
            v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 296) + 192) + 8))(*(_QWORD *)(v15 + 296) + 192);
            if (v45)
              *(_BYTE *)(v44 + 272) = v45;
            if (*(_DWORD *)(v44 + 24) == 2)
            {
              if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v44, v46);
            }
            else
            {
              *(_DWORD *)(v44 + 24) -= 2;
            }
          }
          else
          {
            v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 296) + 192) + 8))(*(_QWORD *)(v15 + 296) + 192);
            if (v62)
              MEMORY[0x110] = v62;
          }
        }
        v47 = *(_QWORD *)(v15 + 296);
        if (v47)
          *(_DWORD *)(v47 + 24) += 2;
        WebCore::NavigationAction::NavigationAction((uint64_t)v67, (WebCore::NavigationRequester *)v47, this, 1, *(_BYTE *)(a5 + 876), 5, *(_BYTE *)(a5 + 871), 0, (_DWORD **)(a5 + 488));
        if (*(_DWORD *)(v47 + 24) == 2)
        {
          if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47, v48);
        }
        else
        {
          *(_DWORD *)(v47 + 24) -= 2;
        }
        v68 = *(_DWORD *)(a5 + 864);
        if (a3)
          ++*(_DWORD *)(a3 + 24);
        v66 = (_DWORD *)a3;
        v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v49 = off_1E33F60C8;
        v65 = v49;
        WebCore::FrameLoader::loadWithNavigationAction(v32, this, (const WebCore::NavigationAction *)v67, 0, (uint64_t *)&v66, v64, 0, (uint64_t *)&v65);
        if (v65)
          (*(void (**)(_QWORD *))(*v65 + 8))(v65);
        v51 = v66;
        v66 = 0;
        if (v51)
        {
          if (v51[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 24))(v51);
          else
            --v51[6];
        }
        WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v67, v50);
        if (!*(_DWORD *)v32)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE3ED8);
        }
        --*(_DWORD *)v32;
        do
        {
          v52 = __ldaxr(v30);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v30));
        if (!v53)
        {
          atomic_store(1u, v30);
          v60 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v60 = off_1E31FE290;
          *(_QWORD *)(v60 + 8) = v30;
          v67[0] = (uint64_t (*)())v60;
          WTF::ensureOnMainThread();
          v61 = v67[0];
          v67[0] = 0;
          if (v61)
            (*(void (**)(uint64_t (*)()))(*(_QWORD *)v61 + 8))(v61);
        }
      }
      else if (!v15)
      {
        return;
      }
    }
    do
    {
      v54 = __ldaxr(v16);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v16));
    if (!v55)
    {
      atomic_store(1u, v16);
      v58 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = off_1E31FE290;
      *(_QWORD *)(v58 + 8) = v16;
      v67[0] = (uint64_t (*)())v58;
      WTF::ensureOnMainThread();
      v59 = v67[0];
      v67[0] = 0;
      if (v59)
        (*(void (**)(uint64_t (*)()))(*(_QWORD *)v59 + 8))(v59);
    }
  }
}

_QWORD *WebCore::FrameLoader::cancelledError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 568))((_QWORD *)a2);
  *(_BYTE *)(a2 + 60) = 3;
  return result;
}

uint64_t WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions(uint64_t a1, WTF::StringImpl **a2, WebCore::SecurityOrigin *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  _BOOL4 isSameSchemeHostPort;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  _BOOL4 v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) + 128) + 8);
  v10 = *(unsigned __int8 *)(v9 + 144);
  if (*(_BYTE *)(v9 + 144))
    v11 = 0;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) + 128) + 8);
  if (!*(_BYTE *)(v9 + 144))
  {
    v12 = (unsigned int *)(v9 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  }
  if (v11 == v8)
  {
LABEL_12:
    v18 = 0;
  }
  else
  {
    v14 = *a2;
    if (*a2)
    {
      v15 = *((unsigned int *)v14 + 4);
      v16 = *((_QWORD *)v14 + 1);
      LODWORD(v14) = *((_DWORD *)v14 + 1);
      v17 = (v15 >> 2) & 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = 1;
    switch(WebCore::parseXFrameOptionsHeader(v16, v14 | (unint64_t)(v17 << 32)))
    {
      case 1u:
        break;
      case 2u:
        WebCore::SecurityOrigin::create(a3, (uint64_t *)&v78);
        if (v10)
          goto LABEL_110;
        v30 = v78;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v9 + 296) + 192), v29);
        v32 = v31;
        if (v31)
        {
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 + 1, v31));
        }
        isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v30, (uint64_t)v31);
        v35 = isSameSchemeHostPort;
        do
        {
          v36 = __ldaxr(v32);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v32));
        if (v37)
        {
          if (!isSameSchemeHostPort)
            goto LABEL_109;
          goto LABEL_42;
        }
        atomic_store(1u, v32);
        v60 = (WTF::StringImpl *)*((_QWORD *)v32 + 6);
        *((_QWORD *)v32 + 6) = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v29);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = (WTF::StringImpl *)*((_QWORD *)v32 + 5);
        *((_QWORD *)v32 + 5) = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v29);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = v32[8];
        if ((_DWORD)v62 != -1)
          ((void (*)(const char **, unsigned int *))off_1E33F5B50[v62])(&v76, v32 + 2);
        v32[8] = -1;
        WTF::fastFree((WTF *)v32, v29);
        if (v35)
        {
LABEL_42:
          v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 56);
          if (!v38 || (v39 = *(_QWORD *)(v38 + 8)) == 0)
          {
LABEL_85:
            v18 = 0;
            goto LABEL_110;
          }
          while (!*(_BYTE *)(v39 + 144))
          {
            v40 = v78;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v39 + 296) + 192), v29);
            v42 = v41;
            if (v41)
            {
              do
                v43 = __ldaxr(v41);
              while (__stlxr(v43 + 1, v41));
            }
            v44 = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v40, (uint64_t)v41);
            v45 = v44;
            do
            {
              v46 = __ldaxr(v42);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v42));
            if (v47)
            {
              if (!v44)
                break;
            }
            else
            {
              atomic_store(1u, v42);
              v49 = (WTF::StringImpl *)*((_QWORD *)v42 + 6);
              *((_QWORD *)v42 + 6) = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v29);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)v42 + 5);
              *((_QWORD *)v42 + 5) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v29);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v42[8];
              if ((_DWORD)v51 != -1)
                ((void (*)(const char **, unsigned int *))off_1E33F5B50[v51])(&v76, v42 + 2);
              v42[8] = -1;
              WTF::fastFree((WTF *)v42, v29);
              if (!v45)
                break;
            }
            v48 = *(_QWORD *)(v39 + 56);
            if (!v48)
              goto LABEL_85;
            v18 = 0;
            v39 = *(_QWORD *)(v48 + 8);
            if (!v39)
              goto LABEL_110;
          }
        }
LABEL_109:
        v18 = 1;
LABEL_110:
        v63 = v78;
        v78 = 0;
        if (v63)
        {
          do
          {
            v64 = __ldaxr((unsigned int *)v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, (unsigned int *)v63));
          if (!v65)
          {
            atomic_store(1u, (unsigned int *)v63);
            v66 = (WTF::StringImpl *)*((_QWORD *)v63 + 6);
            *((_QWORD *)v63 + 6) = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
                WTF::StringImpl::destroy(v66, v29);
              else
                *(_DWORD *)v66 -= 2;
            }
            v67 = (WTF::StringImpl *)*((_QWORD *)v63 + 5);
            *((_QWORD *)v63 + 5) = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, v29);
              else
                *(_DWORD *)v67 -= 2;
            }
            v68 = *((unsigned int *)v63 + 8);
            if ((_DWORD)v68 != -1)
              ((void (*)(const char **, char *))off_1E33F5B50[v68])(&v76, (char *)v63 + 8);
            *((_DWORD *)v63 + 8) = -1;
            WTF::fastFree(v63, v29);
          }
        }
        break;
      case 4u:
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
        if (v23)
          *(_DWORD *)(v23 + 24) += 2;
        WTF::URL::stringCenterEllipsizedToLength(a3);
        v24 = *a2;
        if (*a2)
          *(_DWORD *)v24 += 2;
        v69 = v24;
        v78 = (WTF *)"Invalid 'X-Frame-Options' header encountered when loading '";
        v79 = 60;
        v76 = "': '";
        v77 = 5;
        v74 = "' is not a recognized directive. The header will be ignored.";
        v75 = 61;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v78, (uint64_t *)&v70, (uint64_t)&v76, (uint64_t *)&v69, (uint64_t)&v74, &v73);
        if (!v73)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE4674);
        }
        WebCore::Document::addConsoleMessage((_QWORD *)v23, 1, 2, &v73, a4);
        v26 = v73;
        v73 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v69;
        v69 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v25);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = v70;
        v70 = 0;
        if (!v28)
          goto LABEL_32;
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v25);
          if (!v23)
            goto LABEL_12;
        }
        else
        {
          *(_DWORD *)v28 -= 2;
LABEL_32:
          if (!v23)
            goto LABEL_12;
        }
        if (*(_DWORD *)(v23 + 24) != 2)
        {
          v18 = 0;
          *(_DWORD *)(v23 + 24) -= 2;
          break;
        }
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, v25);
        goto LABEL_12;
      case 5u:
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
        if (v52)
          *(_DWORD *)(v52 + 24) += 2;
        v53 = *a2;
        if (*a2)
          *(_DWORD *)v53 += 2;
        v72 = v53;
        WTF::URL::stringCenterEllipsizedToLength(a3);
        v78 = (WTF *)"Multiple 'X-Frame-Options' headers with conflicting values ('";
        v79 = 62;
        v76 = "') encountered when loading '";
        v77 = 30;
        v74 = "'. Falling back to 'DENY'.";
        v75 = 27;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v78, (uint64_t *)&v72, (uint64_t)&v76, (uint64_t *)&v71, (uint64_t)&v74, &v73);
        if (!v73)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE467CLL);
        }
        WebCore::Document::addConsoleMessage((_QWORD *)v52, 1, 2, &v73, a4);
        v55 = v73;
        v73 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = v71;
        v71 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v54);
          else
            *(_DWORD *)v56 -= 2;
        }
        v57 = v72;
        v72 = 0;
        if (!v57)
          goto LABEL_80;
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::destroy(v57, v54);
          if (!v52)
            goto LABEL_83;
          goto LABEL_81;
        }
        *(_DWORD *)v57 -= 2;
LABEL_80:
        if (v52)
        {
LABEL_81:
          if (*(_DWORD *)(v52 + 24) == 2)
          {
            if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v52, v54);
          }
          else
          {
            *(_DWORD *)(v52 + 24) -= 2;
          }
        }
LABEL_83:
        v18 = 1;
        break;
      default:
        goto LABEL_12;
    }
  }
  if (!v10)
  {
    v19 = (unsigned int *)(v9 + 8);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v58 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = off_1E31FE290;
      *((_QWORD *)v58 + 1) = v19;
      v78 = v58;
      WTF::ensureOnMainThread();
      v59 = v78;
      v78 = 0;
      if (v59)
        (*(void (**)(WTF *))(*(_QWORD *)v59 + 8))(v59);
    }
  }
  return v18;
}

void WebCore::FrameLoader::loadItem(uint64_t a1, unsigned int **this, WebCore::HistoryItem *a3, unsigned int a4, int a5)
{
  WebCore::HistoryItem *v10;
  uint64_t v11;
  WebCore::HistoryItem *v12;
  uint64_t v13;
  WebCore::SecurityOrigin *v14;
  WebCore::SecurityOrigin *v15;
  WTF::StringImpl *v16;
  _BOOL4 isSameOriginAs;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::Navigation *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  WebCore::HistoryItem *v46;
  WTF::StringImpl *v47;
  WebCore::LocalFrameView *v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  unsigned int v51;
  void *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  WTF *v65;
  void *v66;
  bmalloc::api *v67;
  void *v68;
  WTF *v69;
  void *v70;
  bmalloc::api *v71;
  void *v72;
  bmalloc::api *v73;
  void *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  void *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82[5];
  WebCore::SecurityOrigin *v83;
  char v84;
  WTF *v85;
  WTF::StringImpl *v86[5];

  ++*(_DWORD *)this;
  v10 = *(WebCore::HistoryItem **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = this;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v10, (WTF::StringImpl *)this);
      WTF::fastFree(v61, v62);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v12 = *(WebCore::HistoryItem **)(*(_QWORD *)(v11 + 184) + 16);
  if (v12)
    ++*(_DWORD *)v12;
  v13 = *(_QWORD *)(v11 + 296);
  if (!v13 || !a3 || (*(_QWORD *)(*(_QWORD *)(v13 + 680) + 688) & 0x4000) == 0)
    goto LABEL_48;
  WebCore::HistoryItem::url((WebCore::HistoryItem *)this, (uint64_t)v86);
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v86, (uint64_t *)&v85);
  v14 = v85;
  WebCore::HistoryItem::url(a3, (uint64_t)v82);
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v82, (uint64_t *)&v83);
  v15 = v83;
  isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v14, v83);
  v83 = 0;
  do
  {
    v18 = __ldaxr((unsigned int *)v15);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v15));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v15);
    v75 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
    *((_QWORD *)v15 + 6) = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v16);
      else
        *(_DWORD *)v75 -= 2;
    }
    v76 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
    *((_QWORD *)v15 + 5) = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v16);
      else
        *(_DWORD *)v76 -= 2;
    }
    v77 = *((unsigned int *)v15 + 8);
    if ((_DWORD)v77 != -1)
      ((void (*)(char *, char *))off_1E33F5B50[v77])(&v84, (char *)v15 + 8);
    *((_DWORD *)v15 + 8) = -1;
    WTF::fastFree(v15, v16);
  }
  v20 = v82[0];
  v82[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v85;
  v85 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v79 = (WTF::StringImpl *)*((_QWORD *)v21 + 6);
      *((_QWORD *)v21 + 6) = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v16);
        else
          *(_DWORD *)v79 -= 2;
      }
      v80 = (WTF::StringImpl *)*((_QWORD *)v21 + 5);
      *((_QWORD *)v21 + 5) = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v16);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = *((unsigned int *)v21 + 8);
      if ((_DWORD)v81 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F5B50[v81])(v82, (char *)v21 + 8);
      *((_DWORD *)v21 + 8) = -1;
      WTF::fastFree(v21, v16);
    }
  }
  v24 = v86[0];
  v86[0] = 0;
  if (!v24)
    goto LABEL_21;
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
LABEL_21:
    if (!isSameOriginAs)
      goto LABEL_48;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v24, v16);
  if (!isSameOriginAs)
    goto LABEL_48;
LABEL_22:
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 696);
  if (v25)
  {
    ++*(_DWORD *)(v25 + 24);
    v26 = *(_QWORD *)(v25 + 216);
    if (!v26)
    {
      v26 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v26 + 24) = 1;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 16) = 0;
      *(_QWORD *)v26 = &unk_1E33A4FC0;
      v27 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v25);
      if (v27)
      {
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
      }
      *(_QWORD *)(v26 + 32) = v27;
      *(_QWORD *)v26 = off_1E33FFF20;
      *(_BYTE *)(v26 + 40) = 0;
      *(_BYTE *)(v26 + 48) = 0;
      *(_OWORD *)(v26 + 56) = 0u;
      *(_OWORD *)(v26 + 72) = 0u;
      *(_OWORD *)(v26 + 82) = 0u;
      *(_QWORD *)(v26 + 112) = 0;
      *(_QWORD *)(v26 + 120) = 0;
      *(_QWORD *)(v26 + 104) = 0;
      v29 = *(WebCore::Navigation **)(v25 + 216);
      *(_QWORD *)(v25 + 216) = v26;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 1)
        {
          WebCore::Navigation::~Navigation(v29, v16);
          bmalloc::api::isoDeallocate(v71, v72);
          v26 = *(_QWORD *)(v25 + 216);
        }
        else
        {
          --*((_DWORD *)v29 + 6);
        }
      }
    }
    v30 = *(_DWORD *)(v26 + 24) + 1;
    *(_DWORD *)(v26 + 24) = v30;
    v31 = *(_QWORD *)(v26 + 32);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 72);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
          {
            if (*(_BYTE *)(v34 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x195EE4D94);
            }
            v35 = *(_QWORD *)(v34 + 240);
            if (v35)
            {
              if (*(_QWORD *)(v35 + 8))
              {
                WebCore::Navigation::dispatchTraversalNavigateEvent((WebCore::Navigation *)v26, (WebCore::HistoryItem *)this);
                v36 = *(_QWORD *)(v26 + 32);
                if (!v36)
                  goto LABEL_83;
                v37 = *(_QWORD *)(v36 + 8);
                if (!v37)
                  goto LABEL_83;
                v38 = *(_QWORD *)(v37 + 72);
                if (!v38)
                  goto LABEL_83;
                v39 = *(_QWORD *)(v38 + 8);
                if (!v39)
                  goto LABEL_83;
                if (*(_BYTE *)(v39 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EE4DB4);
                }
                v40 = *(_QWORD *)(v39 + 240);
                if (!v40 || !*(_QWORD *)(v40 + 8))
                {
LABEL_83:
                  if (*(_DWORD *)(v26 + 24) == 1)
                  {
                    WebCore::Navigation::~Navigation((WebCore::Navigation *)v26, v16);
                    bmalloc::api::isoDeallocate(v73, v74);
                  }
                  else
                  {
                    --*(_DWORD *)(v26 + 24);
                  }
                  if (*(_DWORD *)(v25 + 24) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
                  else
                    --*(_DWORD *)(v25 + 24);
LABEL_77:
                  if (!v12)
                    return;
                  goto LABEL_78;
                }
                v30 = *(_DWORD *)(v26 + 24);
              }
            }
          }
        }
      }
    }
    v41 = v30 - 1;
    if (v41)
    {
      *(_DWORD *)(v26 + 24) = v41;
    }
    else
    {
      WebCore::Navigation::~Navigation((WebCore::Navigation *)v26, v16);
      bmalloc::api::isoDeallocate(v67, v68);
    }
    if (*(_DWORD *)(v25 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    else
      --*(_DWORD *)(v25 + 24);
  }
LABEL_48:
  if (!v12 || !WebCore::HistoryItem::shouldDoSameDocumentNavigationTo((WebCore::HistoryItem *)this, v12))
  {
    WebCore::FrameLoader::loadDifferentDocumentItem(a1, (uint64_t)this, (uint64_t)a3, a4, 0, a5);
    goto LABEL_77;
  }
  *(_BYTE *)(a1 + 81) = a4;
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v43 = (unsigned int *)(v42 + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  v45 = *(_QWORD *)(v42 + 184);
  ++*(_DWORD *)v45;
  v46 = *(WebCore::HistoryItem **)(v45 + 16);
  if (v46)
  {
    ++*(_DWORD *)v46;
    WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v45, v46);
    if (*(_DWORD *)v46 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v46, v47);
      WTF::fastFree(v65, v66);
    }
    else
    {
      --*(_DWORD *)v46;
    }
  }
  else
  {
    WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v45, 0);
  }
  v48 = *(WebCore::LocalFrameView **)(v42 + 288);
  if (v48)
  {
    ++*((_DWORD *)v48 + 2);
    WebCore::LocalFrameView::setWasScrolledByUser(v48, 0);
    if (*((_DWORD *)v48 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v48 + 8))(v48);
    else
      --*((_DWORD *)v48 + 2);
  }
  ++*(_DWORD *)this;
  v86[0] = (WTF::StringImpl *)this;
  WebCore::HistoryController::setCurrentItem(v45, (uint64_t *)v86);
  if (v86[0])
  {
    if (*(_DWORD *)v86[0] == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v86[0], v49);
      WTF::fastFree(v69, v70);
    }
    else
    {
      --*(_DWORD *)v86[0];
    }
  }
  WebCore::HistoryItem::url((WebCore::HistoryItem *)this, (uint64_t)v86);
  v50 = this[21];
  if (v50)
  {
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
  }
  v85 = (WTF *)v50;
  WebCore::FrameLoader::loadInSameDocument(a1, v86, (uint64_t *)&v85, 0, 0, 0);
  v53 = (unsigned int *)v85;
  v85 = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v53 + 2), v52);
      WTF::fastFree((WTF *)v53, v78);
    }
  }
  v56 = v86[0];
  v86[0] = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v52);
    else
      *(_DWORD *)v56 -= 2;
  }
  WebCore::HistoryController::restoreScrollPositionAndViewState(v45);
  if (!*(_DWORD *)v45)
  {
    __break(0xC471u);
    JUMPOUT(0x195EE4CFCLL);
  }
  --*(_DWORD *)v45;
  do
  {
    v57 = __ldaxr(v43);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, v43));
  if (!v58)
  {
    atomic_store(1u, v43);
    v59 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v59 = off_1E31FE290;
    *((_QWORD *)v59 + 1) = v43;
    v82[0] = v59;
    WTF::ensureOnMainThread();
    v60 = v82[0];
    v82[0] = 0;
    if (v60)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
  }
LABEL_78:
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::HistoryItem::~HistoryItem(v12, v16);
    WTF::fastFree(v63, v64);
  }
  else
  {
    --*(_DWORD *)v12;
  }
}

void WebCore::FrameLoader::retryAfterFailedCacheOnlyMainResourceLoad(WebCore::FrameLoader *this)
{
  WebCore::HistoryItem *v2;
  unsigned int v3;
  WebCore::HistoryItem *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  void *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  WebCore::FrameLoader *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  _BOOL4 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 32);
  if (v2)
  {
    v3 = *((unsigned __int8 *)this + 81);
    ++*(_DWORD *)v2;
    WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 0, 0);
    v4 = *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 16);
    if (v4)
    {
      ++*(_DWORD *)v4;
      WebCore::FrameLoader::loadDifferentDocumentItem((uint64_t)this, (uint64_t)v2, (uint64_t)v4, v3, 1, 0);
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v4, v5);
        WTF::fastFree(v7, v8);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    else
    {
      WebCore::FrameLoader::loadDifferentDocumentItem((uint64_t)this, (uint64_t)v2, 0, v3, 1, 0);
    }
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v2, v5);
      WTF::fastFree(v2, v6);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  else
  {
    WebCore::FrameLoader::stopAllLoaders((uint64_t)this, 0, 0);
    v9 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
      v11 = v10[3];
      if (v11)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11)
        {
          if (*(_BYTE *)(v11 + 40))
            v11 = *(_QWORD *)(v11 + 32);
          else
            v11 = 0;
        }
      }
      v12 = v10[4];
      v13 = *(_QWORD *)(v10[16] + 8) == (_QWORD)v10;
      v14 = 134218752;
      v15 = this;
      v16 = 2048;
      v17 = v11;
      v18 = 2048;
      v19 = v12;
      v20 = 1024;
      v21 = v13;
      _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::retryAfterFailedCacheOnlyMainResourceLoad: Retrying load after failed cache-only main resource load failed because there is no provisional history item.", (uint8_t *)&v14, 0x26u);
    }
  }
}

uint64_t WebCore::FrameLoader::blockedByContentBlockerError(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 584))(*(_QWORD *)(a1 + 16));
}

_QWORD *WebCore::FrameLoader::blockedError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 576))((_QWORD *)a2);
  *(_BYTE *)(a2 + 60) = 3;
  return result;
}

_QWORD *WebCore::FrameLoader::tellClientAboutPastMemoryCacheLoads(_QWORD *this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  _QWORD *v5;
  WebCore::ResourceRequest *v6;
  uint64_t isMainThread;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  _DWORD *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WebCore::ResourceRequest *v29;
  _DWORD *v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[7];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  char v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  char v47;
  uint64_t *v48;
  uint64_t v49[2];

  v2 = this[11];
  if (v2)
  {
    ++*(_DWORD *)(v2 + 24);
    v3 = *(WTF **)(v2 + 2704);
    *(_QWORD *)(v2 + 2704) = 0;
    v4 = *(_DWORD *)(v2 + 2716);
    *(_QWORD *)(v2 + 2712) = 0;
    if (v4)
    {
      v5 = this;
      v6 = v3;
      do
      {
        isMainThread = WTF::isMainThread((WTF *)this);
        if ((isMainThread & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE5198);
        }
        {
          isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 8) + 24) + 8) + 1008);
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EE51B8);
        }
        v9 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap((WTF *)&WebCore::MemoryCache::singleton(void)::memoryCache, v8);
        if (!v9)
          goto LABEL_15;
        v11 = WebCore::MemoryCache::resourceForRequestImpl((int)v9, v6, v9);
        if (!v11)
          goto LABEL_15;
        v14 = v11;
        v15 = *(unsigned int **)(v11 + 8);
        if (v15)
          goto LABEL_52;
        v15 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v15 = 1;
        *((_QWORD *)v15 + 1) = v14;
        v26 = *(unsigned int **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v15;
        if (!v26)
          goto LABEL_52;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v10);
        }
        v15 = *(unsigned int **)(v14 + 8);
        if (v15)
        {
LABEL_52:
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          v46 = v15;
          v17 = *((_QWORD *)v15 + 1);
          if (v17)
          {
            v49[0] = (uint64_t)&v46;
            ++*(_DWORD *)(v17 + 548);
            v18 = *(_QWORD *)(v17 + 488);
            if (!v18
              || !*(_QWORD *)(v18 + 8)
              || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), v49, (uint64_t)&v30), (v15 = v46) != 0))
            {
              v19 = *((_QWORD *)v15 + 1);
              if (v19)
              {
                v29 = (WebCore::ResourceRequest *)(v19 + 160);
                if ((*(_BYTE *)(v19 + 344) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(v29);
                  *(_BYTE *)(v19 + 344) |= 1u;
                }
                v20 = *(_DWORD **)v29;
                if (*(_QWORD *)v29)
                  *v20 += 2;
                v30 = v20;
                v31 = *(_OWORD *)(v19 + 168);
                v32 = *(_OWORD *)(v19 + 184);
                v33[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v33);
                v33[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v33[6] = v49[0];
                v34 = 0u;
                v35 = 0u;
                v36 = 0u;
                v37 = 0x10000;
                v21 = v38 & 0x80 | 4;
                v38 = v21;
                v39 = 0;
                v22 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                {
                  *v22 += 2;
                  v21 = v38;
                }
                v40 = v22;
                v41 = 0;
                v42 = 0;
                v43 = 0;
                v44 = v44 & 0xE0 | 5;
                v38 = v21 | 2;
                v45 = 0;
                v23 = v5[2];
                if (!*(_QWORD *)(*((_QWORD *)v46 + 1) + 400))
                {
                  v25 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                  if (v25 != -1)
                  {
                    v49[0] = (uint64_t)&v47;
                    v48 = v49;
                    std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v23 + 168))(v23, v2, &v30);
                WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v30, v24);
              }
            }
          }
        }
        else
        {
LABEL_15:
          v46 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v46, v10);
        v6 = (WebCore::ResourceRequest *)((char *)v6 + 200);
      }
      while (v6 != (WTF *)((char *)v3 + 200 * v4));
      v12 = 200 * v4;
      this = v3;
      do
      {
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)this, a2);
        this = (_QWORD *)(v13 + 200);
        v12 -= 200;
      }
      while (v12);
    }
    if (v3)
      this = (_QWORD *)WTF::fastFree(v3, a2);
    if (*(_DWORD *)(v2 + 24) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  return this;
}

uint64_t WebCore::FrameLoader::networkingContext(WebCore::FrameLoader *this)
{
  return *((_QWORD *)this + 42);
}

uint64_t WebCore::FrameLoader::protectedNetworkingContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 336);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v2;
  return this;
}

uint64_t WebCore::FrameLoader::completePageTransitionIfNeeded(WebCore::FrameLoader *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 1064))(*((_QWORD *)this + 2));
}

_BYTE *WebCore::FrameLoader::clearTestingOverrides(_BYTE *this)
{
  if (this[345])
    this[345] = 0;
  if (this[347])
    this[347] = 0;
  this[348] = 0;
  return this;
}

uint64_t WebCore::LocalFrameLoaderClient::hasHTMLView(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::createWindow@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, WebCore::Frame **a6@<X8>)
{
  WebCore::ResourceRequest *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t (**v17)();
  uint64_t result;
  char v19;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  BOOL isSameOriginAs;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  const WebCore::Page *v47;
  WTF::StringImpl *Ref;
  uint64_t v49;
  uint64_t v50;
  WebCore::Page *v51;
  char v52;
  int v53;
  char v54;
  int v55;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WebCore::Frame *v62;
  WTF::StringImpl *v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  WebCore::Page *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WebCore::Page *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  _DWORD *v79;
  int v80;
  unsigned int v81;
  WTF::StringImpl *v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  unsigned int v96;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF *v108;
  void *v109;
  WTF *v110;
  void *v111;
  unsigned int v112;
  WTF *v113;
  void *v114;
  WTF *v115;
  void *v116;
  unsigned int v117;
  char v118;
  _QWORD *v119;
  _QWORD *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  __int16 v131;
  char v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  _QWORD *v135;
  WTF::StringImpl *v136[110];
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  v12 = (WebCore::ResourceRequest *)(a3 + 16);
  if ((*(_BYTE *)(a3 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a3 + 16));
    *(_BYTE *)(a3 + 200) |= 1u;
  }
  if (WTF::URL::protocolIsJavaScript(v12))
  {
    v13 = *(_QWORD *)(a1 + 296);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v14 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v13 + 192));
    v15 = v14;
    if (v14)
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 + 1, v14));
    }
    v17 = (uint64_t (**)())(*(_QWORD *)(a1 + 296) + 736);
    LODWORD(v136[0]) = 0;
    if ((*(_BYTE *)(a3 + 200) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v12);
      *(_BYTE *)(a3 + 200) |= 1u;
    }
    result = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v15, v17, (uint64_t (**)())v136, (uint64_t (**)())v12, 0);
    v19 = result;
    if (v15)
    {
      if (!atomic_load(v15))
      {
        __break(0xC471u);
        JUMPOUT(0x195EE5F54);
      }
      do
        v21 = __ldaxr(v15);
      while (__stlxr(v21 - 1, v15));
    }
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    if ((v19 & 1) == 0)
      goto LABEL_173;
  }
  v23 = (WTF::StringImpl **)(a3 + 216);
  v22 = *(_QWORD *)(a3 + 216);
  if (v22)
  {
    v59 = *(unsigned int *)(v22 + 4);
    if ((_DWORD)v59)
    {
      if (!WebCore::isBlankTargetFrameName(*(unsigned __int8 **)(v22 + 8), v59 | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32)))
      {
        v60 = *(WTF::StringImpl **)(a2 + 280);
        v61 = *(_QWORD *)(a1 + 296);
        if (v61)
        {
          *(_DWORD *)(v61 + 24) += 2;
          WebCore::FrameLoader::findFrameForNavigation(v60, (const WTF::AtomString *)(a3 + 216), (WebCore::Document *)v61, a6);
          if (*(_DWORD *)(v61 + 24) == 2)
          {
            if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v61);
          }
          else
          {
            *(_DWORD *)(v61 + 24) -= 2;
          }
        }
        else
        {
          WebCore::FrameLoader::findFrameForNavigation(v60, (const WTF::AtomString *)(a3 + 216), 0, a6);
        }
        v62 = *a6;
        if (*a6)
        {
          v63 = *v23;
          if (*v23)
          {
            v64 = (const char *)*((_QWORD *)v63 + 1);
            v65 = *((unsigned int *)v63 + 1) | ((unint64_t)((*((_DWORD *)v63 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v64 = 0;
            v65 = 0x100000000;
          }
          result = WebCore::isSelfTargetFrameName(v64, v65);
          if ((result & 1) == 0)
          {
            v66 = *((_QWORD *)v62 + 3);
            if (v66)
            {
              v67 = *(WebCore::Page **)(v66 + 8);
              if (v67)
              {
                ++*(_DWORD *)v67;
                v68 = *(_QWORD *)(a1 + 24);
                if (v68)
                {
                  result = *(_QWORD *)(v68 + 8);
                  if (result)
                  {
                    v69 = (*(_DWORD *)result)++;
                    v70 = *(_WORD *)(result + 658) & 5;
                    if (v69)
                    {
                      *(_DWORD *)result = v69;
                    }
                    else
                    {
                      WebCore::Page::~Page((WebCore::Page *)result);
                      result = WTF::fastFree(v115, v116);
                    }
                    if (v70 == 5)
                      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v67 + 6) + 16) + 32))(*(_QWORD *)(*((_QWORD *)v67 + 6) + 16));
                  }
                }
                if (*(_DWORD *)v67 == 1)
                {
                  WebCore::Page::~Page(v67);
                  return WTF::fastFree(v113, v114);
                }
                else
                {
                  --*(_DWORD *)v67;
                }
              }
            }
          }
          return result;
        }
        *a6 = 0;
      }
    }
  }
  if (WebCore::Document::shouldForceNoOpenerBasedOnCOOP(*(WebCore::Document **)(a1 + 296)))
  {
    WTF::AtomStringImpl::add();
    v25 = v136[0];
    if (v136[0])
      *(_DWORD *)v136[0] += 2;
    v26 = *v23;
    *v23 = v25;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v24);
        if (v25)
        {
LABEL_25:
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
LABEL_27:
        *(_WORD *)(a4 + 54) = 257;
        goto LABEL_28;
      }
      *(_DWORD *)v26 -= 2;
    }
    if (v25)
      goto LABEL_25;
    goto LABEL_27;
  }
LABEL_28:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 680) + 664) & 0x20000000000) == 0)
    goto LABEL_52;
  if ((*(_BYTE *)(a3 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v12);
    *(_BYTE *)(a3 + 200) |= 1u;
  }
  if (!WTF::URL::protocolIs())
    goto LABEL_52;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(a1 + 296) + 192), v27);
  v30 = v28;
  if (v28)
  {
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 + 1, v28));
  }
  WebCore::Document::topOrigin(*(WebCore::Document **)(a1 + 296), v29);
  v33 = v32;
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 + 1, v32));
  isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v30, (const WebCore::SecurityOrigin *)v32);
  do
  {
    v37 = __ldaxr(v33);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v33));
  if (v38)
  {
    if (!v30)
      goto LABEL_42;
    goto LABEL_40;
  }
  atomic_store(1u, v33);
  v121 = (WTF::StringImpl *)*((_QWORD *)v33 + 6);
  *((_QWORD *)v33 + 6) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v35);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)v33 + 5);
  *((_QWORD *)v33 + 5) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v35);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = v33[8];
  if ((_DWORD)v123 != -1)
    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F5B50[v123])(v136, v33 + 2);
  v33[8] = -1;
  WTF::fastFree((WTF *)v33, v35);
  if (v30)
  {
    do
    {
LABEL_40:
      v39 = __ldaxr(v30);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v30));
    if (!v40)
    {
      atomic_store(1u, v30);
      v124 = (WTF::StringImpl *)*((_QWORD *)v30 + 6);
      *((_QWORD *)v30 + 6) = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
          WTF::StringImpl::destroy(v124, v35);
        else
          *(_DWORD *)v124 -= 2;
      }
      v125 = (WTF::StringImpl *)*((_QWORD *)v30 + 5);
      *((_QWORD *)v30 + 5) = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
          WTF::StringImpl::destroy(v125, v35);
        else
          *(_DWORD *)v125 -= 2;
      }
      v126 = v30[8];
      if ((_DWORD)v126 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F5B50[v126])(v136, v30 + 2);
      v30[8] = -1;
      WTF::fastFree((WTF *)v30, v35);
    }
  }
LABEL_42:
  if (!isSameOriginAs)
  {
    WTF::AtomStringImpl::add();
    v42 = v136[0];
    if (v136[0])
      *(_DWORD *)v136[0] += 2;
    v43 = *v23;
    *v23 = v42;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v41);
        if (v42)
        {
LABEL_49:
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
LABEL_51:
        *(_WORD *)(a4 + 54) = 257;
        goto LABEL_52;
      }
      *(_DWORD *)v43 -= 2;
    }
    if (v42)
      goto LABEL_49;
    goto LABEL_51;
  }
LABEL_52:
  v44 = *(_QWORD *)(a1 + 296);
  if (v44 && (*(_BYTE *)(v44 + 268) & 0x40) != 0)
  {
    *(_DWORD *)(v44 + 24) += 2;
    if ((*(_BYTE *)(a3 + 200) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v12);
      *(_BYTE *)(a3 + 200) |= 1u;
    }
    WTF::URL::stringCenterEllipsizedToLength(v12);
    if (v134)
    {
      v55 = *((_DWORD *)v134 + 1);
      if (v55 < 0)
        goto LABEL_250;
    }
    else
    {
      v55 = 0;
    }
    _VF = __OFADD__(v55, 111);
    v57 = v55 + 111;
    if (!_VF && !__OFADD__(v57, 17))
    {
      v58 = !v134 || (*((_BYTE *)v134 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v57 + 17), v58, (int8x16_t *)"Blocked opening '", 0x11u, (uint64_t)v134, (int8x16_t *)"' in a new window because the request was made in a sandboxed frame whose 'allow-popups' permission is not set.", 0x6Fu, v136);
      if (v136[0])
      {
        WebCore::Document::addConsoleMessage((_QWORD *)v44, 8, 2, v136, 0);
        v107 = v136[0];
        v136[0] = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v106);
          else
            *(_DWORD *)v107 -= 2;
        }
        result = (uint64_t)v134;
        v134 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v106);
          else
            *(_DWORD *)result -= 2;
        }
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v44);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
        }
LABEL_173:
        *a6 = 0;
        return result;
      }
LABEL_251:
      __break(0xC471u);
      JUMPOUT(0x195EE6274);
    }
LABEL_250:
    v136[0] = 0;
    goto LABEL_251;
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 + 192) + 8))(v44 + 192);
  if ((*(_BYTE *)(a3 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v12);
    *(_BYTE *)(a3 + 200) |= 1u;
  }
  WebCore::FrameLoader::outgoingReferrerURL(*(WebCore::FrameLoader **)(a1 + 280), (uint64_t)v136);
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  WebCore::SecurityPolicy::generateReferrerHeader(v12, (WTF::StringImpl ***)v136, v45, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, (WTF::StringImpl ***)&v133);
  Ref = v136[0];
  v136[0] = 0;
  if (Ref)
  {
    if (*(_DWORD *)Ref == 2)
      Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v46);
    else
      *(_DWORD *)Ref -= 2;
  }
  if (v133 && *((_DWORD *)v133 + 1))
    Ref = WebCore::ResourceRequestBase::setHTTPReferrer(v12, &v133);
  v49 = *(_QWORD *)(a1 + 296);
  if (v49)
  {
    *(_DWORD *)(v49 + 24) += 2;
    Ref = (WTF::StringImpl *)WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)v12, (WebCore::ResourceRequest *)v49, 0, v47);
    if (*(_DWORD *)(v49 + 24) == 2)
    {
      if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
        Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v49);
    }
    else
    {
      *(_DWORD *)(v49 + 24) -= 2;
    }
  }
  else if (!*(_BYTE *)(a3 + 161))
  {
    v118 = *(_BYTE *)(a3 + 200);
    if ((v118 & 1) != 0
      || (Ref = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(v12),
          v118 = *(_BYTE *)(a3 + 200) | 1,
          *(_BYTE *)(a3 + 200) = v118,
          *(_BYTE *)(a3 + 161) != 1))
    {
      *(_BYTE *)(a3 + 161) = 1;
      *(_BYTE *)(a3 + 200) = v118 & 0xFD;
    }
  }
  v50 = *(_QWORD *)(a1 + 24);
  if (v50)
  {
    v51 = *(WebCore::Page **)(v50 + 8);
    if (v51)
    {
      ++*(_DWORD *)v51;
      v52 = *(_BYTE *)(a3 + 556);
      v53 = *(unsigned __int8 *)(a3 + 568);
      if (WTF::isMainThread(Ref))
      {
        {
          if (WebCore::currentToken(void)::token
            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
          {
            v52 = 2;
LABEL_71:
            WebCore::NavigationAction::NavigationAction((uint64_t)v136, *(WebCore::NavigationRequester **)a3, v12, *(_BYTE *)(a3 + 568), *(_BYTE *)(a3 + 569), 5, v52, 0, MEMORY[0x1E0CBF2F8]);
            if (*(_BYTE *)(a4 + 55) && *(_BYTE *)(a4 + 54))
            {
              v54 = 1;
            }
            else
            {
              v54 = *(_BYTE *)(a4 + 57);
              if (v54)
                v54 = *(_BYTE *)(a4 + 56) != 0;
            }
            v137 = v54 ^ 1;
            v71 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v51 + 6) + 16)
                                                                                          + 80))(*(_QWORD *)(*((_QWORD *)v51 + 6) + 16), a1, a4, v136);
            if (v71)
            {
              v73 = (WebCore::Page *)v71;
              ++*(_DWORD *)v71;
              v74 = *(_QWORD *)(v71 + 160);
              v75 = (unsigned int *)(v74 + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 + 1, v75));
              v77 = *(_QWORD *)(a1 + 296);
              if (v77 && (*(_BYTE *)(v77 + 269) & 2) != 0)
              {
                do
                  v78 = __ldaxr(v75);
                while (__stlxr(v78 + 1, v75));
                if (*(_BYTE *)(v74 + 144))
                {
                  do
                  {
                    v112 = __ldaxr(v75);
                    _ZF = --v112 == 0;
                  }
                  while (__stlxr(v112, v75));
                }
                else
                {
                  v79 = *(_DWORD **)(v74 + 280);
                  v80 = (*v79)++;
                  v79[82] |= *(_DWORD *)(*(_QWORD *)(a1 + 296) + 268);
                  if (v80 == -1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195EE617CLL);
                  }
                  *v79 = v80;
                  do
                  {
                    v81 = __ldaxr(v75);
                    _ZF = --v81 == 0;
                  }
                  while (__stlxr(v81, v75));
                }
                if (_ZF)
                {
                  atomic_store(1u, v75);
                  v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v127 = off_1E31FE290;
                  v127[1] = v75;
                  v135 = v127;
                  WTF::ensureOnMainThread();
                  v128 = v135;
                  v135 = 0;
                  if (v128)
                    (*(void (**)(_QWORD *))(*v128 + 8))(v128);
                }
              }
              v83 = *v23;
              if (*v23)
              {
                v84 = *((unsigned int *)v83 + 4);
                v85 = (unsigned __int8 *)*((_QWORD *)v83 + 1);
                LODWORD(v83) = *((_DWORD *)v83 + 1);
                v86 = (v84 >> 2) & 1;
              }
              else
              {
                v85 = 0;
                v86 = 1;
              }
              if (!WebCore::isBlankTargetFrameName(v85, v83 | (unint64_t)(v86 << 32)))
              {
                v88 = *v23;
                if (*v23)
                  *(_DWORD *)v88 += 2;
                v89 = *(WTF::StringImpl **)(v74 + 64);
                *(_QWORD *)(v74 + 64) = v88;
                if (v89)
                {
                  if (*(_DWORD *)v89 == 2)
                    WTF::StringImpl::destroy(v89, v87);
                  else
                    *(_DWORD *)v89 -= 2;
                }
              }
              (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 112))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16), (*(unsigned __int8 *)(a4 + 43) | *(unsigned __int8 *)(a4 + 45)) != 0);
              v90 = *(_QWORD *)(v74 + 24);
              if (!v90)
                goto LABEL_151;
              if (!*(_QWORD *)(v90 + 8))
                goto LABEL_151;
              if (*(_BYTE *)(a4 + 41))
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 128))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16), *(unsigned __int8 *)(a4 + 40));
                v91 = *(_QWORD *)(v74 + 24);
                if (!v91 || !*(_QWORD *)(v91 + 8))
                  goto LABEL_151;
              }
              if (*(_BYTE *)(a4 + 47))
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 144))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16), *(unsigned __int8 *)(a4 + 46));
                v92 = *(_QWORD *)(v74 + 24);
                if (!v92 || !*(_QWORD *)(v92 + 8))
                  goto LABEL_151;
              }
              if (*(_BYTE *)(a4 + 39))
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 160))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16), *(unsigned __int8 *)(a4 + 38));
                v93 = *(_QWORD *)(v74 + 24);
                if (!v93 || !*(_QWORD *)(v93 + 8))
                  goto LABEL_151;
              }
              if (*(_BYTE *)(a4 + 49))
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 176))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16), *(unsigned __int8 *)(a4 + 48));
              v94 = -1.0;
              v95 = -1.0;
              if (*(_BYTE *)(a4 + 24) && *(float *)(a4 + 20) != 0.0)
                v95 = *(float *)(a4 + 20);
              if (*(_BYTE *)(a4 + 32) && *(float *)(a4 + 28) != 0.0)
                v94 = *(float *)(a4 + 28);
              do
                v96 = __ldaxr(v75);
              while (__stlxr(v96 + 1, v75));
              if (*(_BYTE *)(v74 + 144))
              {
                do
                {
                  v117 = __ldaxr(v75);
                  v102 = --v117 == 0;
                }
                while (__stlxr(v117, v75));
              }
              else
              {
                *(_BYTE *)(v74 + 320) = 0;
                *(_BYTE *)(v74 + 323) = v132;
                *(_WORD *)(v74 + 321) = v131;
                *(float *)(v74 + 324) = v95;
                __asm { FMOV            V1.2S, #-1.0 }
                *(_QWORD *)(v74 + 328) = _D1;
                *(float *)(v74 + 336) = v94;
                __asm { FMOV            V0.4S, #-1.0 }
                *(_OWORD *)(v74 + 340) = _Q0;
                *(_OWORD *)(v74 + 356) = _Q0;
                *(_WORD *)(v74 + 372) = 0;
                do
                {
                  v101 = __ldaxr(v75);
                  v102 = --v101 == 0;
                }
                while (__stlxr(v101, v75));
              }
              if (v102)
              {
                atomic_store(1u, v75);
                v129 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v129 = off_1E31FE290;
                v129[1] = v75;
                v135 = v129;
                WTF::ensureOnMainThread();
                v130 = v135;
                v135 = 0;
                if (v130)
                  (*(void (**)(_QWORD *))(*v130 + 8))(v130);
              }
              v103 = *(_QWORD *)(v74 + 24);
              if (v103 && *(_QWORD *)(v103 + 8))
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v73 + 6) + 16) + 88))(*(_QWORD *)(*((_QWORD *)v73 + 6) + 16));
                *a5 = 1;
                *a6 = (WebCore::Frame *)v74;
              }
              else
              {
LABEL_151:
                *a6 = 0;
                do
                {
                  v104 = __ldaxr(v75);
                  v105 = v104 - 1;
                }
                while (__stlxr(v105, v75));
                if (!v105)
                {
                  atomic_store(1u, v75);
                  v119 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v119 = off_1E31FE290;
                  v119[1] = v75;
                  v135 = v119;
                  WTF::ensureOnMainThread();
                  v120 = v135;
                  v135 = 0;
                  if (v120)
                    (*(void (**)(_QWORD *))(*v120 + 8))(v120);
                }
              }
              if (*(_DWORD *)v73 == 1)
              {
                WebCore::Page::~Page(v73);
                WTF::fastFree(v110, v111);
              }
              else
              {
                --*(_DWORD *)v73;
              }
            }
            else
            {
              *a6 = 0;
            }
            WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v136, v72);
            if (*(_DWORD *)v51 == 1)
            {
              WebCore::Page::~Page(v51);
              WTF::fastFree(v108, v109);
            }
            else
            {
              --*(_DWORD *)v51;
            }
            goto LABEL_158;
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
      if (v53 && *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) != a1)
        v52 = 0;
      goto LABEL_71;
    }
  }
  *a6 = 0;
LABEL_158:
  result = (uint64_t)v133;
  v133 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v46);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FrameLoader::switchBrowsingContextsGroup(WebCore::FrameLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  WebCore::Page *v7;
  int v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WebScriptObject *v12;
  uint64_t v13;
  WebCore::ScriptController *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebCore::Frame::setOpener((WebCore::Frame *)v2, 0);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v6)
  {
    v7 = *(WebCore::Page **)(v6 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      *((_BYTE *)v7 + 337) = 0;
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v22, v23);
      }
    }
  }
  WebCore::Frame::detachFromAllOpenedFrames((_QWORD *)v2, v5);
  v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::WindowProxy::detachFromFrame(*(WebCore::WindowProxy **)(v2 + 112), v9);
  WebCore::Frame::resetWindowProxy((WebCore::Frame *)v2);
  v13 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v13 = 0;
  *(_DWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = 0;
  *(_WORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  v14 = *(WebCore::ScriptController **)(v2 + 304);
  *(_QWORD *)(v2 + 304) = v13;
  if (v14)
  {
    WebCore::ScriptController::~ScriptController(v14, v12);
    if (*(_DWORD *)(v15 + 8))
    {
      *(_QWORD *)(v15 + 64) = 0;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v15, v16);
    }
  }
  v17 = *(_QWORD *)(v2 + 296);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 696);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 24);
      *(_DWORD *)(v18 + 24) = v19 + 1;
      *(_BYTE *)(v18 + 313) = 0;
      if (v19)
        *(_DWORD *)(v18 + 24) = v19;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
    }
  }
  do
  {
    v20 = __ldaxr(v3);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v3));
  if (!v21)
  {
    atomic_store(1u, v3);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v3;
    v25 = v24;
    WTF::ensureOnMainThread();
    if (v25)
      (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  }
}

BOOL WebCore::FrameLoaderStateMachine::committingFirstRealLoad(WebCore::FrameLoaderStateMachine *this)
{
  return *(_DWORD *)this == 1;
}

_QWORD *WebCore::FrameLoader::loaderForWebsitePolicies@<X0>(_QWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = result[13];
  if (v3 || (v3 = result[12]) != 0)
  {
LABEL_2:
    ++*(_DWORD *)(v3 + 24);
LABEL_3:
    *a3 = v3;
    return result;
  }
  *a3 = 0;
  if (a2)
  {
    v3 = result[11];
    if (!v3)
      goto LABEL_3;
    goto LABEL_2;
  }
  return result;
}

void *WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  void *result;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  v4 = a1[3];
  if ((_DWORD)v4 == a1[2])
  {
    v2 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v4 + 1, a2);
    LODWORD(v4) = a1[3];
  }
  v5 = *(_QWORD **)a1;
  result = memmove((void *)(*(_QWORD *)a1 + 8), *(const void **)a1, 8 * v4);
  v7 = *v2;
  *v2 = 0;
  *v5 = v7;
  ++a1[3];
  return result;
}

uint64_t WebCore::LocalFrameLoaderClient::hasCustomUserAgent(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::overrideContentSecurityPolicy(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::dataDetectionReferenceDate(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldLoadMediaElementURL()
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::allowScript(WebCore::LocalFrameLoaderClient *this, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldPaintBrokenImage()
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::hasFrameSpecificStorageAccess(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::loadedSubresourceDomains(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldUsePDFPlugin()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::EmptyEditorClient::EmptyTextCheckerClient::~EmptyTextCheckerClient(WebCore::EmptyEditorClient::EmptyTextCheckerClient *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::EmptyEditorClient::EmptyTextCheckerClient::shouldEraseMarkersAfterChangeSelection()
{
  return 1;
}

void WebCore::EmptyEditorClient::EmptyTextCheckerClient::checkTextOfParagraph(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

float WebCore::EmptyChromeClient::windowRect(WebCore::EmptyChromeClient *this)
{
  return 0.0;
}

float WebCore::EmptyChromeClient::pageRect(WebCore::EmptyChromeClient *this)
{
  return 0.0;
}

uint64_t WebCore::EmptyChromeClient::canTakeFocus()
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::createWindow()
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::canRunModal(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::toolbarsVisible(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::statusbarVisible(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::scrollbarsVisible(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::menubarVisible(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::canRunBeforeUnloadConfirmPanel(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::runBeforeUnloadConfirmPanel(WebCore::EmptyChromeClient *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  return 1;
}

uint64_t WebCore::EmptyChromeClient::runJavaScriptConfirm(WebCore::EmptyChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::runJavaScriptPrompt(WebCore::EmptyChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::String *a5)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::keyboardUIMode(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::hoverSupportedByPrimaryPointingDevice(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::hoverSupportedByAnyAvailablePointingDevice(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::pointerCharacteristicsOfPrimaryPointingDevice(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::pointerCharacteristicsOfAllAvailablePointingDevices(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::screenToRootView(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebCore::EmptyChromeClient::rootViewToScreen(WebCore::EmptyChromeClient *this, const WebCore::IntRect *a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebCore::EmptyChromeClient::accessibilityScreenToRootView(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebCore::EmptyChromeClient::rootViewToAccessibilityScreen(WebCore::EmptyChromeClient *this, const WebCore::IntRect *a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebCore::EmptyChromeClient::platformPageClient(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::supportsSettingCursor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::shouldUseMouseEventForSelection()
{
  return 1;
}

float WebCore::ChromeClient::screenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::availableScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideAvailableScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

uint64_t WebCore::ChromeClient::shouldUnavailablePluginMessageBeButton()
{
  return 0;
}

void WebCore::ChromeClient::underlayColor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::appHighlightsVisiblility(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createWorkerClient(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::ChromeClient::eventThrottlingDelay(WebCore::ChromeClient *this)
{
  return 0.0;
}

uint64_t WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect(WebCore::ChromeClient *this, WebCore::IntRect *a2)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::showDataDetectorsUIForElement(WebCore::EmptyChromeClient *this, const WebCore::Element *a2, const WebCore::Event *a3)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::deviceOrientation(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::canShowDataListSuggestionLabels(WebCore::EmptyChromeClient *this)
{
  return 0;
}

WTF *WebCore::ChromeClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  unsigned int v11;
  char v12;

  LOBYTE(v9) = 0;
  v12 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v9);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v12)
  {
    if (v11)
    {
      v6 = v9;
      v7 = 48 * v11;
      do
      {
        WebCore::ContactInfo::~ContactInfo(v6, v5);
        v6 = (WTF *)(v8 + 48);
        v7 -= 48;
      }
      while (v7);
    }
    result = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t WebCore::ChromeClient::shouldPaintEntireContents(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::hasStablePageScaleFactor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::graphicsLayerFactory(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createImageBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::createGPUForWebGPU(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::createBarcodeDetector(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WTF *WebCore::ChromeClient::getBarcodeDetectorSupportedFormats(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5;
  if (v5)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

void WebCore::ChromeClient::createFaceDetector(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::createTextDetector(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::shouldTriggerRenderingUpdate(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::scheduleRenderingUpdate(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::remoteImagesCountForTesting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::allowsAcceleratedCompositing(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::allowedCompositingTriggers(WebCore::ChromeClient *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::ChromeClient::layerTreeStateIsFrozen(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createScrollingCoordinator(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::canEnterVideoFullscreen(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::supportsVideoFullscreen(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::supportsVideoFullscreenStandby(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::exitVideoFullscreenForVideoElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::ChromeClient::requiresFullscreenForVideoPlayback(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::supportsFullScreenForElement(WebCore::ChromeClient *this, const WebCore::Element *a2)
{
  return 0;
}

uint64_t WebCore::ChromeClient::firstResponder(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::EmptyChromeClient::isStopping(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::selectItemWritingDirectionIsNatural(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyChromeClient::selectItemAlignmentFollowsMenuWritingDirection(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::preferredScrollbarOverlayStyle(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isSVGImageChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

float WebCore::ChromeClient::minimumWindowSize(WebCore::ChromeClient *this)
{
  return 100.0;
}

uint64_t WebCore::EmptyChromeClient::isEmptyChromeClient(WebCore::EmptyChromeClient *this)
{
  return 1;
}

void WebCore::ChromeClient::plugInStartLabelTitle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInStartLabelSubtitle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraScript(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyChromeClient::shouldNotifyOnFormChanges(WebCore::EmptyChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldUseTiledBackingForFrameView(WebCore::ChromeClient *this, const WebCore::LocalFrameView *a2)
{
  return 0;
}

__n128 WebCore::ChromeClient::applyLinkDecorationFilteringWithResult@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

__n128 WebCore::ChromeClient::allowedQueryParametersForAdvancedPrivacyProtections@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::ChromeClient::shouldDispatchFakeMouseMoveEvents(WebCore::ChromeClient *this)
{
  return 1;
}

void WebCore::EmptyChromeClient::createIconForFiles(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::ChromeClient::requestStorageAccess(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = 0;
  v8 = *a6;
  *a6 = 0;
  v13 = 0;
  v14 = a5;
  v15 = v6;
  v16 = v7;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 16))(v8, &v13);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebCore::ChromeClient::hasPageLevelStorageAccess()
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::ChromeClient::userIsInteracting(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;

  v4 = *a4;
  if (*a4)
  {
    v7 = 0;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v4 + 16))(v4, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v5);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
  }
}

uint64_t WebCore::ChromeClient::needsImageOverlayControllerForSelectionPainting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::ChromeClient::startApplePayAMSUISession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int16 v6;

  v6 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v4 + 16))(v4, &v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::ChromeClient::isUsingUISideCompositing(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isInStableState(WebCore::ChromeClient *this)
{
  return 1;
}

double WebCore::ChromeClient::baseViewportLayoutSizeScaleFactor(WebCore::ChromeClient *this)
{
  return 1.0;
}

uint64_t WebCore::ChromeClient::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[72];

  v2 = *a2;
  *a2 = 0;
  v4[0] = 0;
  v4[64] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::EmptyEditorClient::~EmptyEditorClient(WebCore::EmptyEditorClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::EmptyEditorClient::shouldDeleteRange()
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::smartInsertDeleteEnabled(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::isSelectTrailingWhitespaceEnabled(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::isContinuousSpellCheckingEnabled(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::isGrammarCheckingEnabled(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::spellCheckerDocumentTag(WebCore::EmptyEditorClient *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::EmptyEditorClient::shouldBeginEditing(WebCore::EmptyEditorClient *this, const WebCore::SimpleRange *a2)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::shouldEndEditing(WebCore::EmptyEditorClient *this, const WebCore::SimpleRange *a2)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::shouldInsertNode()
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::shouldInsertText()
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::shouldChangeSelectedRange()
{
  return 0;
}

uint64_t WebCore::EditorClient::shouldRevealCurrentSelectionAfterInsertion(WebCore::EditorClient *this)
{
  return 1;
}

uint64_t WebCore::EditorClient::shouldSuppressPasswordEcho(WebCore::EditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::shouldRemoveDictationAlternativesAfterEditing(WebCore::EditorClient *this)
{
  return 1;
}

uint64_t WebCore::EmptyEditorClient::shouldApplyStyle()
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::shouldMoveRangeAfterDelete(WebCore::EmptyEditorClient *this, const WebCore::SimpleRange *a2, const WebCore::SimpleRange *a3)
{
  return 0;
}

uint64_t WebCore::EditorClient::supportsClientSideAttachmentData(WebCore::EditorClient *this)
{
  return 0;
}

void WebCore::EditorClient::serializedAttachmentDataForIdentifiers(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::EmptyEditorClient::requestDOMPasteAccess()
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::canCopyCut(WebCore::EmptyEditorClient *this, WebCore::LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebCore::EmptyEditorClient::canPaste(WebCore::EmptyEditorClient *this, WebCore::LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebCore::EmptyEditorClient::canUndo(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::canRedo(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::doTextFieldCommandFromEvent(WebCore::EmptyEditorClient *this, WebCore::Element *a2, WebCore::KeyboardEvent *a3)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::hasRichlyEditableSelection(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::getPasteboardItemsCount(WebCore::EmptyEditorClient *this)
{
  return 0;
}

void WebCore::EmptyEditorClient::documentFragmentFromDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyEditorClient::performsTwoStepPaste(WebCore::EmptyEditorClient *this, WebCore::DocumentFragment *a2)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::textChecker(WebCore::EmptyEditorClient *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebCore::EmptyEditorClient::spellingUIIsShowing(WebCore::EmptyEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::supportsGlobalSelection(WebCore::EditorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyEditorClient::performTwoStepDrop(WebCore::EmptyEditorClient *this, WebCore::DocumentFragment *a2, const WebCore::SimpleRange *a3)
{
  return 0;
}

uint64_t WebCore::EditorClient::shouldAllowSingleClickToChangeSelection(WebCore::EditorClient *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  return 1;
}

void WebCore::EmptyStorageNamespaceProvider::~EmptyStorageNamespaceProvider(WebCore::EmptyStorageNamespaceProvider *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E344FAE8;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)this + 3, a2);
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

{
  void *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E344FAE8;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)this + 3, a2);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WTF::fastFree(this, v3);
}

void WebCore::StorageNamespaceProvider::cloneSessionStorageNamespaceForPage(WebCore::StorageNamespaceProvider *this, WebCore::Page *a2, WebCore::Page *a3)
{
  __break(0xC471u);
}

void WebCore::EmptySearchPopupMenu::~EmptySearchPopupMenu(WebCore::EmptySearchPopupMenu *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E33F4F18;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::EmptySearchPopupMenu::~EmptySearchPopupMenu(WebCore::EmptySearchPopupMenu *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33F4F18;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::EmptySearchPopupMenu::popupMenu(WebCore::EmptySearchPopupMenu *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::EmptySearchPopupMenu::enabled(WebCore::EmptySearchPopupMenu *this)
{
  return 0;
}

uint64_t WebCore::EmptyDisplayRefreshMonitorFactory::createDisplayRefreshMonitor@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = a1;
  *(_BYTE *)(result + 36) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_WORD *)(result + 44) = 0;
  *(_BYTE *)(result + 46) = 1;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = off_1E33F4F80;
  *a2 = result;
  return result;
}

void WebCore::EmptyDisplayRefreshMonitor::~EmptyDisplayRefreshMonitor(WebCore::EmptyDisplayRefreshMonitor *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = off_1E340B3F8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 2);
      do
      {
        v5 = *v4;
        if ((unint64_t)(*v4 + 1) >= 2)
        {
          v6 = *(_DWORD *)(v5 + 8);
          if (!v6)
          {
            __break(0xC471u);
            return;
          }
          *(_DWORD *)(v5 + 8) = v6 - 1;
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = off_1E340B3F8;
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_9;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_8:
    WTF::fastFree((WTF *)(v3 - 16), a2);
LABEL_9:
    WTF::fastFree(this, a2);
    return;
  }
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  while (1)
  {
    v6 = *v5;
    if ((unint64_t)(*v5 + 1) >= 2)
      break;
LABEL_7:
    ++v5;
    if (!--v4)
      goto LABEL_8;
  }
  v7 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    *(_DWORD *)(v6 + 8) = v7 - 1;
    goto LABEL_7;
  }
  __break(0xC471u);
}

uint64_t WebCore::EmptyDisplayRefreshMonitor::requestRefreshCallback(WebCore::EmptyDisplayRefreshMonitor *this)
{
  return 0;
}

uint64_t WebCore::DisplayRefreshMonitor::displayNominalFramesPerSecond(WebCore::DisplayRefreshMonitor *this)
{
  return 0;
}

uint64_t WebCore::EmptyDisplayRefreshMonitor::startNotificationMechanism(WebCore::EmptyDisplayRefreshMonitor *this)
{
  return 1;
}

uint64_t WebCore::EmptyFrameNetworkingContext::storageSession(WebCore::EmptyFrameNetworkingContext *this)
{
  return 0;
}

void WebCore::EmptyFrameNetworkingContext::~EmptyFrameNetworkingContext(WebCore::EmptyFrameNetworkingContext *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &unk_1E33F5040;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &unk_1E33F5040;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::FrameNetworkingContext::isValid(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

uint64_t WebCore::EmptyFrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::EmptyFrameNetworkingContext *this)
{
  return 1;
}

uint64_t WebCore::EmptyFrameNetworkingContext::localFileContentSniffingEnabled(WebCore::EmptyFrameNetworkingContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameNetworkingContext::scheduledRunLoopPairs(WebCore::EmptyFrameNetworkingContext *this)
{
  return 0;
}

void WebCore::EmptyFrameNetworkingContext::sourceApplicationAuditData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyFrameNetworkingContext::blockedError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

void WebCore::NetworkingContext::sourceApplicationIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

BOOL WebCore::FrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  return !v1
      || (v2 = *(_QWORD *)(v1 + 8)) == 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 192) + 8))(*(_QWORD *)(v2 + 296) + 192) == 2;
}

uint64_t WebCore::NetworkingContext::scheduledRunLoopPairs(WebCore::NetworkingContext *this)
{
  return 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace::storageArea@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F5100;
  *a1 = result;
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace::topLevelOrigin(WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace *this)
{
  return 0;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace::copy@<X0>(WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = WTF::fastMalloc((WTF *)0x18);
  v6 = *((_QWORD *)this + 2);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F50B0;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace::sessionID(WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageNamespace::setSessionIDForTesting(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t WebCore::StorageNamespace::storageAreaMapCountForTesting(WebCore::StorageNamespace *this)
{
  return 0;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::length(WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea *this)
{
  return 0;
}

void WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::key(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::item(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::contains(WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::storageType(WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea *this)
{
  return 1;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea::memoryBytesUsedByCache(WebCore::EmptyStorageNamespaceProvider::EmptyStorageArea *this)
{
  return 0;
}

void WebCore::EmptySocketProvider::createWebSocketChannel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptySocketProvider::initializeWebTransportSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebCore::CacheStorageProvider::createCacheStorageConnection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E33F51E0;
  *a1 = result;
  return result;
}

void WebCore::CacheStorageProvider::DummyCacheStorageConnection::~DummyCacheStorageConnection(WebCore::CacheStorageProvider::DummyCacheStorageConnection *this, void *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E33F5268;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), a2);
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E33F5268;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WTF::fastFree(this, a2);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::open@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "open";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F52F0;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::remove@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "remove";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F5368;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveCaches@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "retrieveCaches";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F53E0;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveRecords@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "retrieveRecords";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F5478;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 104;
  *(_QWORD *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 128) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchDeleteOperation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "batchDeleteOperation";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F5510;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 104;
  *(_QWORD *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 128) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchPutOperation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 5;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "batchPutOperation";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F5510;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 104;
  *(_QWORD *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 128) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WebCore::CacheStorageConnection::clearMemoryRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 0;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "clearMemoryRepresentation";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E33F55A8;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

void WebCore::CacheStorageConnection::engineRepresentation(uint64_t *a1@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = 0;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "engineRepresentation";
  *((_QWORD *)&v7 + 1) = 0;
  v3 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E33F5628;
  v4 = v7;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = v3 + 96;
  *(_QWORD *)(v3 + 88) = 1;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_WORD *)(v3 + 120) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v5, 4u, "creating ", v3);
  *a1 = v3;
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v3, &v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5308[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 132);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 120);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 120);
  if (v12)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 96);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5308[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v45[4], a3);
              v46 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a4, v47);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char *v47;
  uint64_t v48;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint8_t buf[4];
  _BYTE v57[12];
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61[3];

  v61[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v47 = (char *)a4;
  WTF::String::String((WTF::String *)&v53, a4);
  v48 = a5;
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a5, &v52);
  if (v54)
  {
    v10 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v55 = 0;
    goto LABEL_96;
  }
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v17 = *((_DWORD *)v53 + 4);
    v16 = (v17 >> 2) & 1;
    if (v52 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v54, (uint64_t)v53, (uint64_t)v52, &v55);
  if (!v55)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v52;
  v52 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v53;
  v53 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v54;
  v54 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v50 ? (char *)v50 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v57 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v50;
    v50 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v58 = 0;
              WTF::String::String((WTF::String *)&v59, v47);
              v60 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v48, v61);
              v50 = 0;
              v51 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v34;
              v35 = HIDWORD(v51);
              *((_DWORD *)v34 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
              v36 = *(_QWORD *)&v57[4];
              if (*(_QWORD *)&v57[4])
                **(_DWORD **)&v57[4] += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v58;
              v37 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v60;
              v38 = v61[0];
              if (v61[0])
                *(_DWORD *)v61[0] += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              HIDWORD(v51) = v35 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v50);
              v39 = v50;
              if (HIDWORD(v51))
              {
                v40 = 16 * HIDWORD(v51);
                v41 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v42 = *v41;
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v41 += 2;
                  v40 -= 16;
                }
                while (v40);
                v39 = v50;
              }
              if (v39)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v39, v24);
              }
              v43 = v61[0];
              v61[0] = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v59;
              v59 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = *(WTF::StringImpl **)&v57[4];
              *(_QWORD *)&v57[4] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v46 = __ldxr(v26);
          if (v46 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 96);
  if (v4 == (WTF::NativePromiseBase **)(result + 112))
  {
    v5 = *(unsigned int *)(result + 108);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 96) = result + 112;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 108);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 104) = 1;
  v6 = *(WTF **)(v3 + 120);
  v7 = *(_DWORD *)(v3 + 132);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F5308[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F5320[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5308[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t *a1, __int128 *a2, _OWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5308[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>(uint64_t result, __int128 *a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v12;
  _BOOL4 v14;
  __int128 *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v4 = result;
  v5 = *(unsigned int *)(result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))off_1E33F5308[v5])(&v23, result);
LABEL_15:
    *(_DWORD *)(v4 + 32) = -1;
    v12 = a3[1];
    *(_OWORD *)v4 = *a3;
    *(_OWORD *)(v4 + 16) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v6 = a3[1];
  v21 = *a3;
  v22 = v6;
  v7 = (_DWORD *)a2 + 6;
  v8 = *((unsigned int *)a2 + 6);
  if (DWORD2(v6) != -1 || (_DWORD)v8 != -1)
  {
    v10 = DWORD2(v6) == -1;
    if (DWORD2(v6) == -1)
      v11 = -1;
    else
      v11 = DWORD2(v6);
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      return ((uint64_t (*)(__int128 *, __int128 *, __int128 *))off_1E33F5338[v11])(&v23, &v21, a2);
    }
    else
    {
      v14 = (DWORD2(v6) - 2) < 0xFFFFFFFD || (v8 + 1) < 3;
      if (v14)
        v15 = &v21;
      else
        v15 = a2;
      if (!v14)
        a2 = &v21;
      v16 = a2[1];
      v23 = *a2;
      v24 = v16;
      if (v14)
        v17 = v7;
      else
        v17 = (_DWORD *)&v22 + 2;
      *((_DWORD *)a2 + 6) = -1;
      if (v14)
        v18 = (_DWORD *)&v22 + 2;
      else
        v18 = v7;
      v19 = *((unsigned int *)v15 + 6);
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E33F5348[v19])(&v25);
        *v17 = v19;
      }
      *v18 = -1;
      v20 = DWORD2(v24);
      if (DWORD2(v24) != -1)
      {
        result = ((uint64_t (*)(char *, __int128 *, __int128 *))off_1E33F5348[DWORD2(v24)])(&v25, v15, &v23);
        *v18 = v20;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;
  unsigned __int8 v5;

  result = *a2;
  v4 = a2[1].n128_u64[0];
  v5 = a3[1].n128_u8[0];
  *a2 = *a3;
  a2[1].n128_u8[0] = v5;
  a3[1].n128_u8[0] = v4;
  *a3 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5380[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 60) = 0x100000001;
  result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 108);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 96);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 96);
  if (v12)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 72);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5380[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 72);
  if (v4 == (WTF::NativePromiseBase **)(result + 88))
  {
    v5 = *(unsigned int *)(result + 84);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 72) = result + 88;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 84);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 80) = 1;
  v6 = *(WTF **)(v3 + 96);
  v7 = *(_DWORD *)(v3 + 108);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F5380[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F5398[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5380[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5380[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(unint64_t *, uint64_t))off_1E33F5380[v5])(&v21, result);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(_QWORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v20 = *a3;
  v6 = (_DWORD *)a2 + 1;
  v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || (_DWORD)v7 != -1)
  {
    v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1)
      v10 = -1;
    else
      v10 = HIDWORD(v20);
    if ((_DWORD)v7 != -1)
      v9 = v10 == v7;
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1E33F53B0[v10])(&v21, &v20, a2);
    }
    else
    {
      v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      v13 = !v12;
      if (v12)
        v14 = &v20;
      else
        v14 = a2;
      if (!v12)
        a2 = &v20;
      v15 = *a2;
      v21 = *a2;
      if (v13)
        v16 = (_DWORD *)&v20 + 1;
      else
        v16 = v6;
      *((_DWORD *)a2 + 1) = -1;
      if (v13)
        v17 = v6;
      else
        v17 = (_DWORD *)&v20 + 1;
      v18 = *((unsigned int *)v14 + 1);
      v19 = HIDWORD(v15);
      if ((_DWORD)v18 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E33F53C0[v18])(&v22);
        *v16 = v18;
      }
      *v17 = -1;
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1E33F53C0[v19])(&v22, v14, &v21);
        *v17 = v19;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F53F8[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 132);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 120);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 120);
  if (v12)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 96);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F53F8[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5410[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 96);
  if (v4 == (WTF::NativePromiseBase **)(result + 112))
  {
    v5 = *(unsigned int *)(result + 108);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 96) = result + 112;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 108);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 104) = 1;
  v6 = *(WTF **)(v3 + 120);
  v7 = *(_DWORD *)(v3 + 132);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F53F8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F5430[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F53F8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 24);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33F5420[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E33F5410[v10])(&v11, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E33F53F8[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  v8 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F5420[v8])(v9, v4, a3);
    *(_DWORD *)(v4 + 24) = v8;
  }
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F53F8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 24);
  v3 = *(unsigned int *)(a2 + 24);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 24);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F5448[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E33F5420[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 24);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5410[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 24) = -1;
      v13 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F5458[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 24) = v13;
        v14 = *(unsigned int *)(v6 + 24);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5410[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 24) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E33F5458[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 24) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E33F5410[v17])(&v18, v16);
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF *result;

  v4 = *a2;
  v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a2[2];
  v7 = a3[2];
  v8 = *((_DWORD *)a3 + 2);
  v9 = *a3;
  *a3 = 0;
  *a2 = v9;
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v8;
  v10 = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v10;
  a2[2] = v7;
  v11 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = (WTF::StringImpl **)(*a3 + 16);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v13 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  result = (WTF *)*a3;
  if (*a3)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  WTF::Lock *result;
  int v19;
  WTF::Lock *v20;
  char v21;
  char v22;

  v6 = (WTF::Lock *)(a1 + 48);
  v20 = v6;
  v21 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v15 = v8[16] >= 4u;
  else
    v15 = 0;
  if (v15)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v16 = *a2;
  v17 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5490[v17])(&v22, a1 + 56);
  *(_BYTE *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v20, v9, v10, v11, v12, v13, v14);
  if (v21)
  {
    result = v20;
    v19 = __ldxr((unsigned __int8 *)v20);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 124);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 112);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 112);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 88);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5490[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F54A8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::NativePromiseBase *v15;
  unsigned int **v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  const char *v35;
  WTF *v36;
  unsigned int v37;
  uint64_t v38;
  const char **v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v9 = result;
  v39 = &v41;
  v40 = 1;
  v36 = (WTF *)&v38;
  v10 = *(WTF::NativePromiseBase ***)(result + 88);
  if (v10 == (WTF::NativePromiseBase **)(result + 104))
  {
    v11 = *(unsigned int *)(result + 100);
    result = (uint64_t)memcpy(&v38, v10, 8 * v11);
    v10 = (WTF::NativePromiseBase **)&v38;
  }
  else
  {
    *(_QWORD *)(result + 88) = result + 104;
    v36 = (WTF *)v10;
    v11 = *(unsigned int *)(result + 100);
  }
  v37 = v11;
  *(_QWORD *)(v9 + 96) = 1;
  v12 = *(WTF **)(v9 + 112);
  v13 = *(_DWORD *)(v9 + 124);
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  if ((_DWORD)v11)
  {
    v14 = 8 * v11;
    do
    {
      v15 = *v10++;
      result = (uint64_t)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v15, v9, a2, a4, a5, a6, a7, a8, v35);
      v14 -= 8;
    }
    while (v14);
  }
  if (v13)
  {
    v16 = (unsigned int **)((char *)v12 + 40 * v13);
    v17 = v9 + 56;
    v18 = (unsigned int **)v12;
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        v20 = v19 + 2;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v39 = 0;
        v40 = 0;
        v41 = "<chained promise>";
        v42 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v19, v17, (WTF::Logger::LogSiteIdentifier *)&v39);
        do
        {
          v22 = __ldaxr(v20);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v20));
        if (!v23)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
        }
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v19);
        do
        {
          v24 = __ldaxr(v20);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v20));
        if (!v25)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
        }
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = "<chained promise>";
        v42 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v17, (WTF::Logger::LogSiteIdentifier *)&v39);
      }
      v18 += 5;
    }
    while (v18 != v16);
    v26 = (uint64_t *)v12;
    do
    {
      result = *v26;
      if (*v26)
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v26;
        *v26 = 0;
        if (result)
        {
          v27 = (unsigned int *)(result + 8);
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v26 = 0;
      }
      v26 += 5;
    }
    while (v26 != (uint64_t *)v16);
  }
  if (v12)
    result = WTF::fastFree(v12, a2);
  v30 = v36;
  if (v37)
  {
    do
    {
      result = *(_QWORD *)v30;
      *(_QWORD *)v30 = 0;
      if (result)
      {
        v31 = (unsigned int *)(result + 8);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v30 = (WTF *)((char *)v30 + 8);
    }
    while (v30 != (WTF *)((char *)v36 + 8 * v37));
    v30 = v36;
  }
  if (&v38 != (uint64_t *)v30 && v30 != 0)
    return WTF::fastFree(v30, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F5490[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F54C8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5490[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33F54B8[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E33F54A8[v10])(&v11, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E33F5490[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v8 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F54B8[v8])(v9, v4, a3);
    *(_DWORD *)(v4 + 16) = v8;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5490[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F54E0[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E33F54B8[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 16);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F54A8[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 16) = -1;
      v13 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F54F0[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 16) = v13;
        v14 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F54A8[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E33F54F0[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 16) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E33F54A8[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5528[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 124);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 112);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 112);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 88);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5528[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5540[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 88);
  if (v4 == (WTF::NativePromiseBase **)(result + 104))
  {
    v5 = *(unsigned int *)(result + 100);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 88) = result + 104;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 100);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 96) = 1;
  v6 = *(WTF **)(v3 + 112);
  v7 = *(_DWORD *)(v3 + 124);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F5528[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F5560[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5528[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33F5550[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E33F5540[v10])(&v11, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E33F5528[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v8 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F5550[v8])(v9, v4, a3);
    *(_DWORD *)(v4 + 16) = v8;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5528[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F5578[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E33F5550[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 16);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5540[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 16) = -1;
      v13 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F5588[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 16) = v13;
        v14 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5540[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E33F5588[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 16) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E33F5540[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F55C0[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 57) = 1;
  *(_DWORD *)(a1 + 64) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 108);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 96);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 96);
  if (v12)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 72);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F55C0[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 72);
  if (v4 == (WTF::NativePromiseBase **)(result + 88))
  {
    v5 = *(unsigned int *)(result + 84);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 72) = result + 88;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 84);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 80) = 1;
  v6 = *(WTF **)(v3 + 96);
  v7 = *(_DWORD *)(v3 + 108);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

unsigned __int8 *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v27;
  unsigned __int8 *v28;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E33F55E8;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v28 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v28);
      result = v28;
      v28 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v28 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v28, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 64);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 64) != 1)
      goto LABEL_60;
    LOWORD(v28) = *(_WORD *)(a2 + 56);
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v28);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
LABEL_60:
    v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v27);
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v28, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E33F55E8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33F55E8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::Logger::LogSiteIdentifier *v19;
  __int16 v20;
  _BYTE v21[2];
  uint64_t v22;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 64) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v21, v14);
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v10, v21);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_41:
          v17 = std::__throw_bad_variant_access[abi:sn180100]();
          return WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(v17, v18, v19);
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 64) != 1)
          goto LABEL_41;
        v20 = *(_WORD *)(v10 + 56);
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v20);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v20);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  v22 = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v22, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F55C0[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F5600[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F55C0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, _BYTE *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F55C0[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (unsigned __int16)*a3;
  v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1])
        a2[1] = 0;
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F55C0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *v12;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5640[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 1;
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    v12 = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v12);
  }
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 104);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 116);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 104);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 80);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 80);
  if ((WTF *)(a1 + 96) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E33F5640[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5658[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v34 = &v36;
  v35 = 1;
  v31 = (WTF *)&v33;
  v4 = *(WTF::NativePromiseBase ***)(a1 + 80);
  if (v4 == (WTF::NativePromiseBase **)(a1 + 96))
  {
    v5 = *(unsigned int *)(a1 + 92);
    memcpy(&v33, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v33;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = a1 + 96;
    v31 = (WTF *)v4;
    v5 = *(unsigned int *)(a1 + 92);
  }
  v32 = v5;
  *(_QWORD *)(a1 + 88) = 1;
  v6 = *(WTF **)(a1 + 104);
  v7 = *(_DWORD *)(a1 + 116);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(v9, a1, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = a1 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      if (*v20)
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v20);
        v21 = (unsigned int *)*v20;
        *v20 = 0;
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v21 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    WTF::fastFree(v6, a2);
  v25 = v31;
  if (v32)
  {
    do
    {
      v26 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
    }
    while (v25 != (WTF *)((char *)v31 + 8 * v32));
    v25 = v31;
  }
  if (&v33 != (uint64_t *)v25 && v25 != 0)
    WTF::fastFree(v25, a2);
}

void WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::NativePromiseBase *v12;
  WTF::NativePromiseBase *v13;
  _BYTE *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::NativePromiseBase *v32;
  int v33;
  char v34;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 121));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E33F5688;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v32 = v12;
      (*(void (**)(uint64_t, WTF::NativePromiseBase **))(*(_QWORD *)v7 + 16))(v7, &v32);
      v13 = v32;
      v32 = 0;
      if (v13)
        (*(void (**)(WTF::NativePromiseBase *))(*(_QWORD *)v13 + 8))(v13);
      return;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v32 = v5;
    v14 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
    if (*v14)
      v15 = v14[16] >= 4u;
    else
      v15 = 0;
    if (v15)
      WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v14, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v32, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return;
  }
  v16 = *a3;
  v17 = __ldxr(*a3);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v16))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v18 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v20 = *(_DWORD *)(a2 + 72);
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v18))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v20 != 2)
  {
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 72) != 1)
      goto LABEL_65;
    LOBYTE(v32) = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v25 != -1)
    {
      ((void (*)(char *, WTF::NativePromiseBase **, uint64_t))off_1E33F5668[v25])(&v34, &v32, a2 + 56);
      v33 = v25;
    }
    v26 = __ldxr(v18);
    if (v26 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, WTF::NativePromiseBase **))(*(_QWORD *)v5 + 24))(v5, a2, &v32);
        if (v33 != -1)
          ((void (*)(char *, WTF::NativePromiseBase **))off_1E33F5658[v33])(&v34, &v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 72) != 2)
  {
LABEL_65:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(v28, v29, v30);
    return;
  }
  v31 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(WTF::NativePromiseBase **__return_ptr, uint64_t))(*(_QWORD *)v31 + 16))(&v32, v31);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, WTF::NativePromiseBase **))(*(_QWORD *)v5 + 24))(v5, a2, &v32);
  if (v33 != -1)
    ((void (*)(char *, WTF::NativePromiseBase **))off_1E33F5658[v33])(&v34, &v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_60:
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, *a3))
  {
    return;
  }
  MEMORY[0x19AEA534C]();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E33F5688;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33F5688;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  uint64_t v22;
  int v23;
  char v24;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v22 = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v22, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 72);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 72) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v22, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v22);
      if (v23 != -1)
        ((void (*)(char *, uint64_t *))off_1E33F5658[v23])(&v24, &v22);
      v23 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 72) != 1)
    goto LABEL_46;
  LOBYTE(v22) = 0;
  v23 = -1;
  v17 = *(unsigned int *)(v10 + 64);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, uint64_t *, uint64_t))off_1E33F5668[v17])(&v24, &v22, v10 + 56);
    v23 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v22);
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E33F5658[v23])(&v24, &v22);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 72);
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33F5640[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 72) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E33F56A0[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5640[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33F5668[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E33F5658[v10])(&v11, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E33F5640[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E33F5668[v8])(v9, v4, a3);
    *(_DWORD *)(v4 + 8) = v8;
  }
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F5640[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16[8];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 8);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F56B8[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, char *, uint64_t))off_1E33F5668[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5658[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 8) = -1;
      v13 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F56C8[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 8) = v13;
        v14 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33F5658[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 8) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, char *))off_1E33F56C8[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 8) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, char *))off_1E33F5658[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WebCore::EmptyUserContentProvider::~EmptyUserContentProvider(WebCore::EmptyUserContentProvider *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::UserContentProvider::~UserContentProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::EmptyUserContentProvider::userContentExtensionBackend(WebCore::EmptyUserContentProvider *this)
{
  if ((byte_1ECE837B8 & 1) == 0)
  {
    qword_1ECE837B0 = 0;
    byte_1ECE837B8 = 1;
  }
  return &qword_1ECE837B0;
}

void WebCore::EmptyBackForwardClient::itemAtIndex(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyBackForwardClient::backListCount(WebCore::EmptyBackForwardClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyBackForwardClient::forwardListCount(WebCore::EmptyBackForwardClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyBackForwardClient::containsItem(WebCore::EmptyBackForwardClient *this, const WebCore::HistoryItem *a2)
{
  return 0;
}

uint64_t WebCore::EmptyStorageSessionProvider::storageSession(WebCore::EmptyStorageSessionProvider *this)
{
  return 0;
}

void WebCore::DummyStorageProvider::~DummyStorageProvider(WebCore::DummyStorageProvider *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::DragClient::useLegacyDragClient(WebCore::DragClient *this)
{
  return 1;
}

uint64_t WebCore::EmptyDragClient::dragSourceActionMaskForPoint()
{
  return 0;
}

uint64_t WebCore::EmptyInspectorClient::openLocalFrontend(WebCore::EmptyInspectorClient *this, WebCore::InspectorController *a2)
{
  return 0;
}

uint64_t WebCore::InspectorClient::overridesShowPaintRects(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebCore::InspectorClient::paintRectCount(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebCore::InspectorClient::allowRemoteInspectionToPageDirectly(WebCore::InspectorClient *this)
{
  return 0;
}

void WebCore::EmptyDiagnosticLoggingClient::~EmptyDiagnosticLoggingClient(WTF *this, void *a2)
{
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::EmptyDatabaseProvider::idbConnectionToServerForSession()
{
  uint64_t result;
  uint64_t v1;

  if ((byte_1ECE837C0 & 1) == 0)
  {
    qword_1ECE837F0 = (uint64_t)&off_1E33F59D8;
    unk_1ECE837F8 = 0;
    byte_1ECE837C0 = 1;
  }
  if ((byte_1ECE837D0 & 1) != 0)
    return qword_1ECE837C8;
  v1 = bmalloc::api::isoAllocate();
  result = WebCore::IDBClient::IDBConnectionToServer::IDBConnectionToServer(v1, (uint64_t)&qword_1ECE837F0);
  qword_1ECE837C8 = result;
  byte_1ECE837D0 = 1;
  return result;
}

void WebCore::EmptyDatabaseProvider::EmptyIDBConnectionToServerDeletegate::~EmptyIDBConnectionToServerDeletegate(WebCore::EmptyDatabaseProvider::EmptyIDBConnectionToServerDeletegate *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::EmptyDatabaseProvider::EmptyIDBConnectionToServerDeletegate::identifier(WebCore::EmptyDatabaseProvider::EmptyIDBConnectionToServerDeletegate *this)
{
  return 0;
}

void WebCore::EmptyPluginInfoProvider::~EmptyPluginInfoProvider(WebCore::EmptyPluginInfoProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_1E341E098;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_1E341E098;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

void WebCore::EmptyPluginInfoProvider::pluginInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::EmptyPluginInfoProvider::webVisiblePluginInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::EmptyVisitedLinkStore::~EmptyVisitedLinkStore(WebCore::EmptyVisitedLinkStore *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3402DF8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(unsigned int **)(v2 + 8 * i);
        if (v5 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              atomic_store(1u, v5);
              v9 = i;
              v10 = v2;
              v8 = v3;
              WTF::fastFree((WTF *)v5, a2);
              v3 = v8;
              i = v9;
              v2 = v10;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E3402DF8;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              v10 = i;
              v11 = v3;
              v9 = v4;
              WTF::fastFree((WTF *)v6, a2);
              v4 = v9;
              i = v10;
              v3 = v11;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::EmptyVisitedLinkStore::isLinkVisited()
{
  return 0;
}

void WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker(WebCore::FrameLoader::FrameProgressTracker *this, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::Page *v9;
  WebCore::ProgressTracker *v10;
  unsigned int *v11;

  if (*((_BYTE *)this + 16))
  {
    a2 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        v7 = a2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v11 = a2;
        v9 = *(WebCore::Page **)(*((_QWORD *)a2 + 3) + 8);
        ++*(_DWORD *)v9;
        v10 = (WebCore::ProgressTracker *)*((_QWORD *)v9 + 16);
        ++*(_DWORD *)v10;
        WebCore::ProgressTracker::progressCompleted(v10, (WebCore::LocalFrame *)a2);
        if (!*(_DWORD *)v10)
        {
          __break(0xC471u);
          return;
        }
        --*(_DWORD *)v10;
        WTF::RefCounted<WebCore::Page>::deref(v9);
        WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v11);
      }
    }
  }
  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t WebCore::PrivateClickMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WebCore::PCM::AttributionTriggerData *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 16);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = v8;
  v9 = (WebCore::PCM::AttributionTriggerData *)(a1 + 56);
  v10 = (WTF::StringImpl *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
      WebCore::PCM::AttributionTriggerData::operator=((uint64_t)v9, (uint64_t)v10);
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(v9, v10);
    *(_BYTE *)(a1 + 184) = 0;
  }
  else
  {
    WebCore::PCM::AttributionTriggerData::AttributionTriggerData((uint64_t)v9, (uint64_t)v10);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  if (*(unsigned __int8 *)(a1 + 232) == *(unsigned __int8 *)(a2 + 232))
  {
    if (*(_BYTE *)(a1 + 232))
    {
      v12 = *(_DWORD **)(a2 + 224);
      if (v12)
        *v12 += 2;
      v13 = *(WTF::StringImpl **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 232))
  {
    v14 = *(WTF::StringImpl **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v15 = *(_DWORD **)(a2 + 224);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(a1 + 224) = v15;
    *(_BYTE *)(a1 + 232) = 1;
  }
  WebCore::PCM::UnlinkableToken::operator=(a1 + 240, a2 + 240);
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>(a1 + 272, a2 + 272);
  v17 = *(_DWORD **)(a2 + 304);
  if (v17)
    *v17 += 2;
  v18 = *(WTF::StringImpl **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return a1;
}

uint64_t WebCore::PCM::AttributionTriggerData::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;

  v4 = *(_BYTE *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = v4;
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v5 = *(_DWORD **)(a2 + 8);
      if (v5)
        *v5 += 2;
      v6 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v5;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v7 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    v8 = *(_DWORD **)(a2 + 8);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v9 = *(_DWORD **)(a2 + 24);
      if (v9)
        *v9 += 2;
      v10 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v11 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v12 = *(_DWORD **)(a2 + 24);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v13 = *(_DWORD **)(a2 + 40);
      if (v13)
        *v13 += 2;
      v14 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v15 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v16 = *(_DWORD **)(a2 + 40);
    if (v16)
      *v16 += 2;
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = 1;
  }
  std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(a1 + 56, a2 + 56);
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>(a1 + 96, a2 + 96);
  return a1;
}

{
  char v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v4 = *(_BYTE *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = v4;
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v6 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v5;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v7 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v10 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v11 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v13 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v14 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v15 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = 1;
  }
  std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(a1 + 56, (WTF::StringImpl *)(a2 + 56));
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(a1 + 96, (WTF::StringImpl *)(a2 + 96));
  return a1;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _DWORD *v11;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
      WebCore::PCM::UnlinkableToken::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
      CFRelease(v7);
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v8 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v8)
      CFRetain(v8);
    v9 = *(const void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    if (v9)
      CFRetain(v9);
    v10 = *(const void **)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    if (v10)
      CFRetain(v10);
    v11 = *(_DWORD **)(a2 + 24);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t WebCore::PCM::UnlinkableToken::operator=(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    CFRetain(*(CFTypeRef *)(a2 + 8));
  v7 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    CFRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    CFRetain(*(CFTypeRef *)(a2 + 16));
  v9 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
    CFRelease(v9);
  v10 = *(_DWORD **)(a2 + 24);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v4 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v4 += 2;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(_DWORD **)(a2 + 8);
      if (v6)
        *v6 += 2;
      v7 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(_DWORD **)(a2 + 16);
      if (v8)
        *v8 += 2;
      result = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v8;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    v9 = *(WTF::StringImpl **)(result + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v11 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v11 += 2;
    *(_QWORD *)result = v11;
    v12 = *(_DWORD **)(a2 + 8);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(result + 8) = v12;
    v13 = *(_DWORD **)(a2 + 16);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(result + 16) = v13;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t WebCore::PCM::AttributionTriggerData::AttributionTriggerData(uint64_t a1, uint64_t a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v4 = *(_BYTE *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = *(_DWORD **)(a2 + 8);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v6 = *(_DWORD **)(a2 + 24);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v7 = *(_DWORD **)(a2 + 40);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v8 = *(const void **)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v8;
    if (v8)
      CFRetain(v8);
    v9 = *(const void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v9;
    if (v9)
      CFRetain(v9);
    v10 = *(const void **)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v10;
    if (v10)
      CFRetain(v10);
    v11 = *(_DWORD **)(a2 + 80);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v12 = *(_DWORD **)(a2 + 96);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a1 + 96) = v12;
    v13 = *(_DWORD **)(a2 + 104);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(a1 + 104) = v13;
    v14 = *(_DWORD **)(a2 + 112);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(a1 + 112) = v14;
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

uint64_t WebCore::PrivateClickMeasurement::PrivateClickMeasurement(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _DWORD *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 33);
  *(_BYTE *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_OWORD *)(a1 + 33) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    WebCore::PCM::AttributionTriggerData::AttributionTriggerData(v8, a2 + 56);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v10 = *(_DWORD **)(a2 + 224);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(a1 + 224) = v10;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v11 = *(const void **)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v11;
  if (v11)
    CFRetain(v11);
  v12 = *(const void **)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v12;
  if (v12)
    CFRetain(v12);
  v13 = *(const void **)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v13;
  if (v13)
    CFRetain(v13);
  v14 = *(_DWORD **)(a2 + 264);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a1 + 264) = v14;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v15 = *(_DWORD **)(a2 + 272);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(a1 + 272) = v15;
    v16 = *(_DWORD **)(a2 + 280);
    if (v16)
      *v16 += 2;
    *(_QWORD *)(a1 + 280) = v16;
    v17 = *(_DWORD **)(a2 + 288);
    if (v17)
      *v17 += 2;
    *(_QWORD *)(a1 + 288) = v17;
    *(_BYTE *)(a1 + 296) = 1;
  }
  v18 = *(_DWORD **)(a2 + 304);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 304) = v18;
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WebCore::NavigationDisabler,WebCore::LocalFrame *>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v5 = *a2;
  if (*a2)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *result = v5;
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
    if (v8)
      v9 = *(_BYTE *)(v8 + 144) == 0;
    else
      v9 = 0;
    if (v9)
      ++*(_DWORD *)(v8 + 608);
  }
  else
  {
    *result = 0;
    ++WebCore::NavigationDisabler::s_globalNavigationDisableCount;
  }
  *a1 = result;
  return result;
}

WTF **std::unique_ptr<WebCore::NavigationDisabler>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
      if (v4)
        v5 = *(_BYTE *)(v4 + 144) == 0;
      else
        v5 = 0;
      if (v5)
        --*(_DWORD *)(v4 + 608);
      *(_QWORD *)v2 = 0;
      v6 = (unsigned int *)(v3 + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = off_1E31FE290;
        v9[1] = v6;
        v10 = v9;
        WTF::ensureOnMainThread();
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      }
    }
    else
    {
      --WebCore::NavigationDisabler::s_globalNavigationDisableCount;
      *(_QWORD *)v2 = 0;
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ResourceRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ResourceRequest *v15;
  void *v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 200 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::ResourceRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x147AE15)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 200 * v8;
    v11 = WTF::fastMalloc((WTF *)(200 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0xC8;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v13 = v11;
      v14 = 200 * v9;
      v15 = v5;
      do
      {
        WebCore::ResourceRequest::ResourceRequest(v13, (uint64_t)v15);
        WebCore::ResourceRequest::~ResourceRequest(v15, v16);
        v13 += 200;
        v15 = (WebCore::ResourceRequest *)((char *)v15 + 200);
        v14 -= 200;
      }
      while (v14);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WebCore::ResourceRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WebCore::ResourceRequest *v6;
  WebCore::ResourceRequest *v7;
  int v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x147AE15)
    {
      __break(0xC471u);
      JUMPOUT(0x195EEFC60);
    }
    v6 = *(WebCore::ResourceRequest **)a1;
    v7 = (WebCore::ResourceRequest *)(*(_QWORD *)a1 + 200 * *(unsigned int *)(a1 + 12));
    v8 = 200 * v4;
    v9 = WTF::fastMalloc((WTF *)(200 * v4));
    *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0xC8;
    *(_QWORD *)a1 = v9;
    WTF::VectorTypeOperations<WebCore::ResourceRequest>::move(v6, v7, v9);
    if (v6)
    {
      if (*(WebCore::ResourceRequest **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
  }
}

void WTF::VectorTypeOperations<WebCore::ResourceRequest>::move(WebCore::ResourceRequest *a1, WebCore::ResourceRequest *a2, uint64_t a3)
{
  WebCore::ResourceRequest *v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::ResourceRequest::ResourceRequest(a3, (uint64_t)v5);
      WebCore::ResourceRequest::~ResourceRequest(v5, v6);
      a3 += 200;
      v5 = (WebCore::ResourceRequest *)((char *)v5 + 200);
    }
    while (v5 != a2);
  }
}

void WebCore::ContactInfo::~ContactInfo(WebCore::ContactInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v13 = 8 * v5;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v15 = *(WTF::StringImpl ***)this;
    v16 = 8 * v7;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v8 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v8, a2);
  }
}

WebCore::ApplicationCacheStorage *WTF::RefCounted<WebCore::ApplicationCacheStorage>::deref(WebCore::ApplicationCacheStorage *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(result, a2);
    return (WebCore::ApplicationCacheStorage *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;

  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 15);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  WebCore::SQLiteDatabase::close((WebCore::ApplicationCacheStorage *)((char *)this + 56));
  v9 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v8);
    else
      --*(_DWORD *)v9;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::Thread::~Thread((WTF::Thread *)v10);
      WTF::fastFree(v17, v18);
    }
  }
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v13, (WTF::StringImpl *)v8);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v16 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::pageConfigurationWithEmptyClients(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,PAL::SessionID)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = &off_1E33F3F08;
  *a1 = result;
  return result;
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::DummySpeechRecognitionProvider::speechRecognitionConnection(WebCore::DummySpeechRecognitionProvider *this)
{
  _QWORD *result;
  _DWORD *v3;

  result = (_QWORD *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = off_1E33F5C28;
    result[1] = 1;
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return (_QWORD *)*((_QWORD *)this + 1);
      }
      else
      {
        --v3[2];
      }
    }
  }
  return result;
}

void WebCore::EmptyMediaRecorderProvider::createMediaRecorderPrivate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::DummyStorageProvider::storageConnection(WebCore::DummyStorageProvider *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (!*((_QWORD *)this + 1))
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33F5CE0;
    v2[1] = 1;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::DummyStorageProvider::ensureMediaKeysStorageDirectoryForOrigin@<X0>(uint64_t this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, WTF::FileSystemImpl *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = *(_QWORD *)(this + 16);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WebCore::SecurityOriginData::databaseIdentifier(a2, &v8);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return WTF::FileSystemImpl::makeAllDirectories(a3, v6);
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *(_QWORD *)a3 = v5;
  }
  return this;
}

WTF::StringImpl *WebCore::DummyStorageProvider::setMediaKeysStorageDirectory(WebCore::DummyStorageProvider *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getPersisted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::fileSystemGetDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  char v5[8];
  uint64_t v6;
  int v7;
  char v8;

  v5[0] = 6;
  v6 = 0;
  v7 = 1;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7 != -1)
    return ((uint64_t (*)(char *, char *))off_1E33F5D10[v7])(&v8, v5);
  return result;
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getEstimate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  char v5[8];
  uint64_t v6;
  int v7;
  char v8;

  v5[0] = 6;
  v6 = 0;
  v7 = 1;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7 != -1)
    return ((uint64_t (*)(char *, char *))off_1E33F5D20[v7])(&v8, v5);
  return result;
}

void WebCore::EmptyPaymentCoordinatorClient::validatedPaymentNetwork(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebCore::EmptyPaymentCoordinatorClient::canMakePayments(WebCore::EmptyPaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyPaymentCoordinatorClient::canMakePaymentsWithActiveCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a4;
  *a4 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E33F5DF0;
  v5[1] = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WebCore::EmptyPaymentCoordinatorClient::openPaymentSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a4;
  *a4 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E33F5E18;
  v5[1] = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WebCore::EmptyPaymentCoordinatorClient::showPaymentUI()
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isMockPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isWebPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

WTF *WebCore::PaymentCoordinatorClient::getSetupFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *result;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (HIDWORD(v11))
  {
    v6 = v10;
    v7 = 8 * HIDWORD(v11);
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

uint64_t WebCore::PaymentCoordinatorClient::beginApplePaySetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33F5DF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F5DF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33F5E18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F5E18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EmptyPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::EmptyChromeClient>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  result = WebCore::ChromeClient::ChromeClient(v2);
  *result = &off_1E33F4458;
  *a1 = result;
  return result;
}

void WebCore::CryptoClient::wrapCryptoKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void WebCore::CryptoClient::unwrapCryptoKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

_DWORD *WTF::RefCounted<WebCore::Navigation>::deref(_DWORD *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*result == 1)
  {
    WebCore::Navigation::~Navigation((WebCore::Navigation *)(result - 6), a2);
    return (_DWORD *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::FrameLoader::*&)(void),WebCore::FrameLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::derefAllowingPartiallyDestroyed(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadFrameRequest(WebCore::FrameLoadRequest &&,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = &off_1E33F5EE8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v8;
      v13 = v12;
      WTF::ensureOnMainThread();
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadFrameRequest(WebCore::FrameLoadRequest &&,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)this = &off_1E33F5EE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v8;
      v13 = v12;
      WTF::ensureOnMainThread();
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return WTF::fastFree(this, a2);
}

_WORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadFrameRequest(WebCore::FrameLoadRequest &&,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _WORD *result;
  WebCore::Frame *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  WebCore::Frame *v28;
  _QWORD *v29;

  v1 = a1 + 1;
  v2 = a1[2];
  v3 = a1 + 1;
  if (v2)
  {
    v24 = *(_QWORD *)(v2 + 8);
    v3 = a1 + 1;
    if (v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 528);
      if (!v25)
      {
LABEL_31:
        v4 = *v1;
        if (!*v1)
          goto LABEL_5;
        goto LABEL_3;
      }
      v3 = (uint64_t *)(v25 + 8);
    }
  }
  v4 = *v3;
  if (!*v3)
    goto LABEL_31;
LABEL_3:
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
LABEL_5:
  result = WebCore::FrameLoader::findFrameForNavigation(*(WTF::StringImpl **)(v4 + 280), (const WTF::AtomString *)(a1 + 3), 0, &v28);
  v8 = v28;
  if (v28)
  {
    if (v28 != (WebCore::Frame *)v4)
    {
      v9 = *((_QWORD *)v28 + 3);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          ++*(_DWORD *)v10;
          v11 = *(_QWORD *)(v4 + 24);
          if (v11)
          {
            result = *(_WORD **)(v11 + 8);
            if (result)
            {
              v12 = (*(_DWORD *)result)++;
              v13 = result[329] & 5;
              if (v12)
              {
                *(_DWORD *)result = v12;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)result);
                result = (_WORD *)WTF::fastFree(v22, v23);
              }
              if (v13 == 5)
                result = (_WORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16));
            }
          }
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::Page::~Page(v10);
            result = (_WORD *)WTF::fastFree(v20, v21);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
    }
    v28 = 0;
    v14 = (unsigned int *)((char *)v8 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v14;
      v29 = v27;
      WTF::ensureOnMainThread();
      result = v29;
      v29 = 0;
      if (result)
        result = (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)result + 8))(result);
    }
  }
  v17 = (unsigned int *)(v4 + 8);
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v26 = off_1E31FE290;
    v26[1] = v17;
    v29 = v26;
    WTF::ensureOnMainThread();
    result = v29;
    v29 = 0;
    if (result)
      return (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33F5F10;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33F5F10;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  uint64_t v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)a3)
  {
    v8 = 0;
LABEL_3:
    v9 = 1;
    goto LABEL_4;
  }
  v8 = *(_DWORD **)(*(_QWORD *)a3 + 8);
  if (!v8)
    goto LABEL_3;
  v9 = 0;
  ++v8[6];
LABEL_4:
  WebCore::FrameLoader::continueLoadAfterNewWindowPolicy(v7, a2, (uint64_t)v8, a4, a5, a6, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17));
  if ((v9 & 1) == 0)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
    else
      --v8[6];
  }
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33F5F38;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F5F38;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1>> &&,WebCore::NavigationPolicyDecision>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, int a4)
{
  return WebCore::FrameLoader::continueFragmentScrollAfterNavigationPolicy(*(_QWORD *)(a1 + 8), a2, *(const WebCore::SecurityOrigin **)(a1 + 24), a4 == 0, *(unsigned __int8 *)(a1 + 32));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E33F5F60;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F5F60;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadURL(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,std::optional<WebCore::PrivateClickMeasurement> &&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(v2 + 152) = 0;
    v3 = *(_QWORD *)(v2 + 96);
    if (v3 || (v3 = *(_QWORD *)(v2 + 104)) != 0)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 1;
      *(_BYTE *)(v3 + 3540) = 1;
      if (v4)
        *(_DWORD *)(v3 + 24) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  else if (*(_BYTE *)(a1 + 17))
  {
    v5 = *(unsigned __int8 *)(a1 + 18);
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x310;
    if (v6 || v7 == 0)
      *(_BYTE *)(v2 + 81) = 5;
  }
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void WTF::Detail::CallableWrapper<WebCore::FrameLoader::load(WebCore::FrameLoadRequest &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::FormState>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  _DWORD *v7;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a3 && (v7 = *(_DWORD **)(*(_QWORD *)a3 + 8)) != 0)
  {
    ++v7[6];
    WebCore::FrameLoader::continueLoadAfterNewWindowPolicy(v6, a2, (uint64_t)v7, a4, a5, a6, 1, 0);
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
    else
      --v7[6];
  }
  else
  {
    WebCore::FrameLoader::continueLoadAfterNewWindowPolicy(v6, a2, 0, a4, a5, a6, 1, 0);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33F5FD8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F5FD8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, int a4)
{
  return WebCore::FrameLoader::continueFragmentScrollAfterNavigationPolicy(*(_QWORD *)(a1 + 8), a2, *(const WebCore::SecurityOrigin **)(a1 + 24), a4 == 0, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E33F6000;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F6000;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ResourceRequest &&,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::ResourceRequest &>> &&,WebCore::NavigationPolicyDecision>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v8;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a3 && (v8 = *(_DWORD **)(*(_QWORD *)a3 + 8)) != 0)
  {
    ++v8[6];
    WebCore::FrameLoader::continueLoadAfterNavigationPolicy(v5, a2, (uint64_t)v8, a4, *(unsigned __int8 *)(a1 + 24));
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
    else
      --v8[6];
  }
  else
  {
    WebCore::FrameLoader::continueLoadAfterNavigationPolicy(v5, a2, 0, a4, *(unsigned __int8 *)(a1 + 24));
  }
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WTF::VectorTypeOperations<WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v8 = off_1E31FE290;
          v8[1] = v5;
          v9 = v8;
          WTF::ensureOnMainThread();
          result = (uint64_t)v9;
          if (v9)
            result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::checkLoadCompleteForThisFrame(WebCore::LoadWillContinueInAnotherProcess)::$_0,void,NSArray *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33F6028;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::checkLoadCompleteForThisFrame(WebCore::LoadWillContinueInAnotherProcess)::$_0,void,NSArray *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33F6028;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::FrameLoader::checkLoadCompleteForThisFrame(WebCore::LoadWillContinueInAnotherProcess)::$_0,void,NSArray *>::call(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  const void **v8;
  const void *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = v3 + 2;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (*((_QWORD *)v3 + 35) == v5)
      {
        if (cf)
        {
          CFRetain(cf);
          v8 = (const void **)WebCore::LocalFrame::dataDetectionResults((WebCore::LocalFrame *)v3);
          CFRetain(cf);
        }
        else
        {
          v8 = (const void **)WebCore::LocalFrame::dataDetectionResults((WebCore::LocalFrame *)v3);
        }
        v9 = *v8;
        *v8 = cf;
        if (v9)
          CFRelease(v9);
        if (*(unsigned int **)(*((_QWORD *)v3 + 16) + 8) == v3)
          (*(void (**)(_QWORD, CFTypeRef))(**(_QWORD **)(v5 + 16) + 352))(*(_QWORD *)(v5 + 16), cf);
        if (cf)
          CFRelease(cf);
      }
      do
      {
        v10 = __ldaxr(v6);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v6));
      if (!v11)
      {
        atomic_store(1u, v6);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v6;
        v13 = v12;
        WTF::ensureOnMainThread();
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest const>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E33F6050;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest const>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F6050;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ResourceRequest const&,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WebCore::ResourceRequest const>> &&,WTF::AtomString const&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  uint64_t v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)a3)
  {
    v8 = 0;
LABEL_3:
    v9 = 1;
    goto LABEL_4;
  }
  v8 = *(_DWORD **)(*(_QWORD *)a3 + 8);
  if (!v8)
    goto LABEL_3;
  v9 = 0;
  ++v8[6];
LABEL_4:
  WebCore::FrameLoader::continueLoadAfterNewWindowPolicy(v7, a2, (uint64_t)v8, a4, a5, a6, *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
  if ((v9 & 1) == 0)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
    else
      --v8[6];
  }
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E33F6078;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F6078;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::loadPostRequest(WebCore::FrameLoadRequest &&,WTF::String const&,WebCore::FrameLoadType,WebCore::Event *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v2 + 152) = 0;
    v3 = *(_QWORD *)(v2 + 96);
    if (v3 || (v3 = *(_QWORD *)(v2 + 104)) != 0)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 1;
      *(_BYTE *)(v3 + 3540) = 1;
      if (v4)
        *(_DWORD *)(v3 + 24) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::continueLoadAfterNavigationPolicy(WebCore::ResourceRequest const&,WebCore::FormState *,WebCore::NavigationPolicyDecision,WebCore::AllowNavigationToInvalidURL)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E33F60A0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::continueLoadAfterNavigationPolicy(WebCore::ResourceRequest const&,WebCore::FormState *,WebCore::NavigationPolicyDecision,WebCore::AllowNavigationToInvalidURL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E33F60A0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::FrameLoader::continueLoadAfterNavigationPolicy(WebCore::ResourceRequest const&,WebCore::FormState *,WebCore::NavigationPolicyDecision,WebCore::AllowNavigationToInvalidURL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::DocumentLoader *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _BOOL4 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v1 + 96))
  {
    v10 = qword_1ECE7C860;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      return;
    v11 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8);
    v12 = v11[3];
    if (v12)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 40))
          v12 = *(_QWORD *)(v12 + 32);
        else
          v12 = 0;
      }
    }
    v13 = v11[4];
    v14 = *(_QWORD *)(v11[16] + 8) == (_QWORD)v11;
    v20 = 134218752;
    v21 = v1;
    v22 = 2048;
    v23 = v12;
    v24 = 2048;
    v25 = v13;
    v26 = 1024;
    v27 = v14;
    v15 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy (completionHan"
          "dler): Frame load canceled - no provisional document loader before prepareForLoadStart";
    goto LABEL_19;
  }
  WebCore::FrameLoader::prepareForLoadStart(*(WebCore::FrameLoader **)(a1 + 8));
  v2 = *(WebCore::DocumentLoader **)(v1 + 96);
  if (!v2)
  {
    v10 = qword_1ECE7C860;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      return;
    v16 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8);
    v17 = v16[3];
    if (v17)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 40))
          v17 = *(_QWORD *)(v17 + 32);
        else
          v17 = 0;
      }
    }
    v18 = v16[4];
    v19 = *(_QWORD *)(v16[16] + 8) == (_QWORD)v16;
    v20 = 134218752;
    v21 = v1;
    v22 = 2048;
    v23 = v17;
    v24 = 2048;
    v25 = v18;
    v26 = 1024;
    v27 = v19;
    v15 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy (completionHan"
          "dler): Frame load canceled - no provisional document loader after prepareForLoadStart";
LABEL_19:
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v20, 0x26u);
    return;
  }
  v3 = 88;
  if (!*(_BYTE *)(v1 + 80))
    v3 = 96;
  v4 = *(_QWORD *)(v1 + v3);
  if (v4 && (++*(_DWORD *)(v4 + 24), *(_BYTE *)(v4 + 3548)))
  {
    v5 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8);
      v7 = v6[3];
      if (v7)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 40))
            v7 = *(_QWORD *)(v7 + 32);
          else
            v7 = 0;
        }
      }
      v8 = v6[4];
      v9 = *(_QWORD *)(v6[16] + 8) == (_QWORD)v6;
      v20 = 134218752;
      v21 = v1;
      v22 = 2048;
      v23 = v7;
      v24 = 2048;
      v25 = v8;
      v26 = 1024;
      v27 = v9;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy (completionHandler): Main frame already being loaded", (uint8_t *)&v20, 0x26u);
    }
  }
  else
  {
    *(_BYTE *)(v1 + 322) = 0;
    ++*((_DWORD *)v2 + 6);
    WebCore::DocumentLoader::startLoadingMainResource(v2);
    if (*((_DWORD *)v2 + 6) == 1)
    {
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v2 + 24))(v2);
      if (!v4)
        return;
    }
    else
    {
      --*((_DWORD *)v2 + 6);
      if (!v4)
        return;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    --*(_DWORD *)(v4 + 24);
}

uint64_t WebCore::HTTPHeaderField::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t result;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(unsigned int *)(v6 + 16);
    v8 = *(const char **)(v6 + 8);
    v9 = *(unsigned int *)(v6 + 4);
    v10 = v9 & 0xFFFFFFFEFFFFFFFFLL | (((v7 >> 2) & 1) << 32);
    if (((v7 >> 2) & 1) != 0)
    {
      if ((_DWORD)v9)
      {
        v11 = 0;
        while (1)
        {
          v12 = v8[v11];
          if (v12 != 9 && v12 != 32)
            break;
          if (v9 == ++v11)
          {
            v10 = 0x100000000;
            v8 = "";
            goto LABEL_42;
          }
        }
        if ((_DWORD)v9 != 1)
        {
          v13 = (v9 - 1);
          while (v13 < v9)
          {
            v14 = v8[v13];
            if (v14 == 32 || v14 == 9)
            {
              if ((_DWORD)--v13)
                continue;
            }
            if (!(_DWORD)v11 && (_DWORD)v13 == (_DWORD)v9 - 1)
              goto LABEL_42;
            goto LABEL_20;
          }
          goto LABEL_81;
        }
        if ((_DWORD)v11)
        {
          LODWORD(v13) = 0;
LABEL_20:
          v16 = (v13 - v11 + 1);
          if (v9 - v11 < v16)
            goto LABEL_81;
          v8 += v11;
          v10 = v16 | 0x100000000;
        }
      }
    }
    else if ((_DWORD)v9)
    {
      v17 = 0;
      v18 = v8;
      while (1)
      {
        v19 = *(unsigned __int16 *)v18;
        if (v19 != 9 && v19 != 32)
          break;
        ++v17;
        v18 += 2;
        if (v9 == v17)
        {
          v10 = 0x100000000;
          v8 = "";
          goto LABEL_42;
        }
      }
      if ((_DWORD)v9 != 1)
      {
        v20 = (v9 - 1);
        while (v20 < v9)
        {
          v21 = *(unsigned __int16 *)&v8[2 * v20];
          if (v21 == 32 || v21 == 9)
          {
            if ((_DWORD)--v20)
              continue;
          }
          if (!(_DWORD)v17 && (_DWORD)v20 == (_DWORD)v9 - 1)
            goto LABEL_42;
          goto LABEL_39;
        }
        goto LABEL_81;
      }
      if ((_DWORD)v17)
      {
        LODWORD(v20) = 0;
LABEL_39:
        v10 = (v20 - v17 + 1);
        v8 = v18;
        if (v9 - v17 < v10)
          goto LABEL_81;
      }
    }
  }
  else
  {
    v8 = 0;
    v10 = 0x100000000;
  }
LABEL_42:
  v23 = *a2;
  if (!*a2)
  {
LABEL_82:
    v25 = 0;
    v27 = 0x100000000;
    goto LABEL_83;
  }
  v24 = *(unsigned int *)(v23 + 16);
  v25 = *(const char **)(v23 + 8);
  v26 = *(unsigned int *)(v23 + 4);
  v27 = v26 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 2) & 1) << 32);
  if (((v24 >> 2) & 1) != 0)
  {
    if ((_DWORD)v26)
    {
      v28 = 0;
      while (1)
      {
        v29 = v25[v28];
        if (v29 != 9 && v29 != 32)
          break;
        if (v26 == ++v28)
        {
          v27 = 0x100000000;
          v25 = "";
          goto LABEL_83;
        }
      }
      if ((_DWORD)v26 != 1)
      {
        v30 = (v26 - 1);
        while (v30 < v26)
        {
          v31 = v25[v30];
          if (v31 == 32 || v31 == 9)
          {
            if ((_DWORD)--v30)
              continue;
          }
          if (!(_DWORD)v28 && (_DWORD)v30 == (_DWORD)v26 - 1)
            goto LABEL_83;
          goto LABEL_61;
        }
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (!(_DWORD)v28)
        goto LABEL_83;
      LODWORD(v30) = 0;
LABEL_61:
      v33 = (v30 - v28 + 1);
      if (v26 - v28 < v33)
        goto LABEL_81;
      v25 += v28;
      v27 = v33 | 0x100000000;
    }
  }
  else if ((_DWORD)v26)
  {
    v34 = 0;
    v35 = v25;
    while (1)
    {
      v36 = *(unsigned __int16 *)v35;
      if (v36 != 9 && v36 != 32)
        break;
      ++v34;
      v35 += 2;
      if (v26 == v34)
      {
        v27 = 0x100000000;
        v25 = "";
        goto LABEL_83;
      }
    }
    if ((_DWORD)v26 != 1)
    {
      v37 = (v26 - 1);
      while (v37 < v26)
      {
        v38 = *(unsigned __int16 *)&v25[2 * v37];
        if (v38 == 32 || v38 == 9)
        {
          if ((_DWORD)--v37)
            continue;
        }
        if (!(_DWORD)v34 && (_DWORD)v37 == (_DWORD)v26 - 1)
          goto LABEL_83;
        goto LABEL_80;
      }
      goto LABEL_81;
    }
    if ((_DWORD)v34)
    {
      LODWORD(v37) = 0;
LABEL_80:
      v27 = (v37 - v34 + 1);
      v25 = v35;
      if (v26 - v34 < v27)
        goto LABEL_81;
    }
  }
LABEL_83:
  result = RFC7230::isValidName((uint64_t)v8, v10);
  if ((_DWORD)result && (result = RFC7230::isValidValue((uint64_t)v25, v27), (result & 1) != 0))
  {
    v41 = *a1;
    if (*a1)
      v42 = *(_DWORD *)(v41 + 4);
    else
      v42 = 0;
    if (v42 == (_DWORD)v10)
    {
      *a1 = 0;
      v46 = v41;
    }
    else if ((v10 & 0x100000000) != 0)
    {
      result = WTF::String::String();
    }
    else
    {
      result = WTF::String::String();
    }
    v43 = *a2;
    if (*a2)
      v44 = *(_DWORD *)(v43 + 4);
    else
      v44 = 0;
    if (v44 == (_DWORD)v27)
    {
      *a2 = 0;
      v45 = v43;
    }
    else if ((v27 & 0x100000000) != 0)
    {
      result = WTF::String::String();
    }
    else
    {
      result = WTF::String::String();
    }
    *(_QWORD *)a3 = v46;
    *(_QWORD *)(a3 + 8) = v45;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void WebCore::HistoryController::~HistoryController(WebCore::HistoryController *this, WTF::StringImpl *a2)
{
  WebCore::HistoryItem *v3;
  WebCore::HistoryItem *v4;
  WebCore::HistoryItem *v5;
  WebCore::HistoryItem *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;

  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v4, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::HistoryItem *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v5, a2);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (WebCore::HistoryItem *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v6, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

uint64_t WebCore::HistoryController::restoreScrollPositionAndViewState(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WebCore::HistoryItem *v4;
  _DWORD *v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (!v1 || *(_BYTE *)(v1 + 144))
    return this;
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(WebCore::HistoryItem **)(this + 16);
  if (v4)
  {
    ++*(_DWORD *)v4;
    if (*(int *)(*(_QWORD *)(v1 + 280) + 64) < 2)
    {
LABEL_43:
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v4);
        this = WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v4;
      }
      goto LABEL_45;
    }
    v5 = *(_DWORD **)(v1 + 288);
    if (!v5 || (++v5[2], (v6 = *(_QWORD *)(v1 + 24)) == 0) || (v7 = *(WebCore::Page **)(v6 + 8)) == 0)
    {
LABEL_39:
      v21 = *(_QWORD *)(v1 + 280);
      ++*(_DWORD *)v21;
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 16) + 728))(*(_QWORD *)(v21 + 16));
      if (!*(_DWORD *)v21)
      {
        __break(0xC471u);
        JUMPOUT(0x195EF28D4);
      }
      --*(_DWORD *)v21;
      if (v5)
      {
        if (v5[2] == 1)
          this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      goto LABEL_43;
    }
    ++*(_DWORD *)v7;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) != v1 || (v8 = WebCore::Page::scrollingCoordinator(v7)) == 0)
    {
LABEL_37:
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v26, v27);
      }
      else
      {
        --*(_DWORD *)v7;
      }
      goto LABEL_39;
    }
    v9 = (_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_16:
    ++*(_QWORD *)(v10 + 8);
    v12 = __ldxr((unsigned __int8 *)v10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_21:
        (*(void (**)(_QWORD *, _DWORD *))(*v9 + 96))(v9, v5);
        v14 = v9[1];
        if (__ldaxr((unsigned __int8 *)v14))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v14))
        {
          goto LABEL_25;
        }
        MEMORY[0x19AEA534C](v14);
LABEL_25:
        v16 = *(_QWORD *)(v14 + 8);
        v17 = v16 - 1;
        *(_QWORD *)(v14 + 8) = v16 - 1;
        if (v16 == 1)
        {
          v29 = *(_QWORD *)(v14 + 16);
          v18 = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = 0;
          v19 = v29 != 0;
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
        v20 = __ldxr((unsigned __int8 *)v14);
        if (v20 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
          {
LABEL_32:
            if (!v17)
            {
              if (v18)
                (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
              if (!v19)
                WTF::fastFree((WTF *)v14, v13);
            }
            goto LABEL_37;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        goto LABEL_32;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_21;
  }
  do
  {
LABEL_45:
    v22 = __ldaxr(v2);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v2));
  if (!v23)
  {
    atomic_store(1u, v2);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E31FE290;
    v28[1] = v2;
    v30 = (uint64_t)v28;
    WTF::ensureOnMainThread();
    this = v30;
    if (v30)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  return this;
}

uint64_t WebCore::HistoryController::saveDocumentAndScrollState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::HistoryItem *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1)
  {
    v2 = this;
    while (1)
    {
LABEL_3:
      v3 = (_QWORD *)v1;
      if (!*(_BYTE *)(v1 + 144))
      {
        v4 = (unsigned int *)(v1 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v1 + 184);
        ++*(_DWORD *)v6;
        this = WebCore::HistoryController::saveDocumentState(v6);
        v7 = *(WebCore::HistoryItem **)(v6 + 16);
        if (v7)
        {
          ++*(_DWORD *)v7;
          WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v6, v7);
          this = WTF::RefCounted<WebCore::HistoryItem>::deref(v7);
        }
        else
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
          if (v15 && !*(_BYTE *)(v15 + 144))
          {
            v16 = (unsigned int *)(v15 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            this = *(_QWORD *)(v15 + 288);
            if (this)
            {
              v18 = *(_DWORD *)(this + 8);
              *(_DWORD *)(this + 8) = v18 + 1;
              if (v18)
                *(_DWORD *)(this + 8) = v18;
              else
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            }
            do
            {
              v19 = __ldaxr(v16);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v16));
            if (!v20)
            {
              atomic_store(1u, v16);
              v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v21 = off_1E31FE290;
              v21[1] = v16;
              v23 = (uint64_t)v21;
              WTF::ensureOnMainThread();
              this = v23;
              if (v23)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            }
          }
        }
        if (!*(_DWORD *)v6)
        {
          this = 286;
          __break(0xC471u);
          return this;
        }
        --*(_DWORD *)v6;
        do
        {
          v8 = __ldaxr(v4);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v4));
        if (!v9)
        {
          atomic_store(1u, v4);
          v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v22 = off_1E31FE290;
          v22[1] = v4;
          v24 = (uint64_t)v22;
          WTF::ensureOnMainThread();
          this = v24;
          if (v24)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
      }
      v1 = v3[11];
      if (!v1)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
        v11 = *(_QWORD *)(v3[6] + 8);
        if (v11 == v10)
          return this;
        v1 = v3[9];
        if (!v1)
          break;
      }
    }
    if (v10)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v11 + 56);
        if (!v13)
          break;
        v11 = *(_QWORD *)(v13 + 8);
        if (v11 == v10 || v11 == 0)
          break;
        v1 = *(_QWORD *)(v11 + 72);
        if (v1)
          goto LABEL_3;
      }
    }
    else
    {
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 56);
        if (!v12)
          break;
        v11 = *(_QWORD *)(v12 + 8);
        if (!v11)
          break;
        v1 = *(_QWORD *)(v11 + 72);
        if (v1)
          goto LABEL_3;
      }
    }
  }
  return this;
}

uint64_t WebCore::HistoryController::restoreDocumentState(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  WebCore::HistoryItem *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1 && !*(_BYTE *)(v1 + 144))
  {
    v2 = (unsigned int *)(v1 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    v4 = *(_QWORD *)(v1 + 280);
    v5 = *(unsigned __int8 *)(v4 + 81);
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x3B0;
    if (v6 || v7 == 0)
    {
      v9 = *(WebCore::HistoryItem **)(this + 16);
      if (v9)
      {
        ++*(_DWORD *)v9;
        if (*(WebCore::HistoryItem **)(v4 + 392) == v9)
        {
          v13 = *(_QWORD *)(v4 + 88);
          if (v13)
            ++*(_DWORD *)(v13 + 24);
          if (!*(_BYTE *)(v13 + 3540))
          {
            *(_BYTE *)(v13 + 3530) = WebCore::HistoryItem::shouldOpenExternalURLsPolicy(v9);
            v14 = *(_QWORD *)(v1 + 296);
            if (v14)
            {
              *(_DWORD *)(v14 + 24) += 2;
              v15 = WebCore::HistoryItem::documentState(v9);
              WebCore::Document::setStateForNewFormElements(v14, v15, v16);
              if (*(_DWORD *)(v14 + 24) == 2)
              {
                if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v14);
              }
              else
              {
                *(_DWORD *)(v14 + 24) -= 2;
              }
            }
            else
            {
              v17 = WebCore::HistoryItem::documentState(v9);
              WebCore::Document::setStateForNewFormElements(0, v17, v18);
            }
          }
          if (*(_DWORD *)(v13 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
          else
            --*(_DWORD *)(v13 + 24);
        }
        this = WTF::RefCounted<WebCore::HistoryItem>::deref(v9);
      }
    }
    do
    {
      v10 = __ldaxr(v2);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v2));
    if (!v11)
    {
      atomic_store(1u, v2);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v2;
      v19 = (uint64_t)v12;
      WTF::ensureOnMainThread();
      this = v19;
      if (v19)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  return this;
}

uint64_t WebCore::HistoryController::invalidateCurrentItemCachedPage(uint64_t this)
{
  WebCore::HistoryItem *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::CachedPage *v9;
  void *v10;
  WebCore::CachedFrameBase *v11;
  WTF *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::CachedPage *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  WebCore::CachedPage *v23;
  _QWORD *v24;

  v1 = *(WebCore::HistoryItem **)(this + 16);
  if (v1)
  {
    v2 = this;
    ++*(_DWORD *)v1;
    {
      WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 24);
    if (v3 && (v4 = *(WebCore::Page **)(v3 + 8)) != 0)
    {
      ++*(_DWORD *)v4;
      WebCore::BackForwardCache::take((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v1, v4, &v23);
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::Page::~Page(v4);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    else
    {
      WebCore::BackForwardCache::take((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v1, 0, &v23);
    }
    if (v23)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
      if (v5 && !*(_BYTE *)(v5 + 144))
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = **((_QWORD **)v23 + 3);
        if (v8)
          *(_DWORD *)(v8 + 24) += 2;
        if (v8 == *(_QWORD *)(v5 + 296))
        {
          WebCore::Document::setBackForwardCacheState(v8, 0);
          v9 = v23;
          WebCore::CachedFrame::clear(*((_QWORD *)v23 + 3));
          v11 = (WebCore::CachedFrameBase *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v11)
          {
            WebCore::CachedFrameBase::~CachedFrameBase(v11, v10);
            WTF::fastFree(v12, v13);
          }
          *((_WORD *)v9 + 16) = 0;
          *((_BYTE *)v9 + 34) = 0;
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v9 + 10, 0);
        }
        if (v8)
        {
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        do
        {
          v14 = __ldaxr(v6);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v6));
        if (!v15)
        {
          atomic_store(1u, v6);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v21 = off_1E31FE290;
          v21[1] = v6;
          v24 = v21;
          WTF::ensureOnMainThread();
          v22 = v24;
          v24 = 0;
          if (v22)
            (*(void (**)(_QWORD *))(*v22 + 8))(v22);
        }
      }
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        WebCore::CachedPage::~CachedPage(v16);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 48) = 0;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, v18);
        }
      }
    }
    return WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  }
  return this;
}

WebCore::HistoryItem *WebCore::HistoryController::goToItem(WebCore::HistoryItem *result, WTF::StringImpl *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  WebCore::HistoryItem *v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  void *v20;
  WebCore::HistoryItem *v21;
  WebCore::HistoryItem *v22;
  WebCore::HistoryItem *v23;

  v4 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(WebCore::Page **)(v5 + 8);
    if (v6)
    {
      v10 = (uint64_t)result;
      ++*(_DWORD *)v6;
      if (!*(_BYTE *)(v4 + 144))
      {
        v11 = (unsigned int *)(v4 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = *(_QWORD *)(v4 + 280);
        ++*(_DWORD *)v13;
        result = (WebCore::HistoryItem *)(*(uint64_t (**)(_QWORD, WTF::StringImpl *))(**(_QWORD **)(v13 + 16)
                                                                                              + 544))(*(_QWORD *)(v13 + 16), a2);
        if (!*(_DWORD *)v13)
        {
          __break(0xC471u);
          JUMPOUT(0x195EF3158);
        }
        --*(_DWORD *)v13;
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!(_DWORD)result)
        {
          if (v14 == 1)
          {
            atomic_store(1u, v11);
            v15 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v15 = off_1E31FE290;
            *((_QWORD *)v15 + 1) = v11;
            v23 = v15;
            WTF::ensureOnMainThread();
            result = v23;
            v23 = 0;
            if (result)
              result = (WebCore::HistoryItem *)(*(uint64_t (**)(WebCore::HistoryItem *))(*(_QWORD *)result
                                                                                                 + 8))(result);
          }
          goto LABEL_24;
        }
        if (v14 == 1)
        {
          atomic_store(1u, v11);
          v21 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v21 = off_1E31FE290;
          *((_QWORD *)v21 + 1) = v11;
          v23 = v21;
          WTF::ensureOnMainThread();
          v22 = v23;
          v23 = 0;
          if (v22)
            (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      if (*(_BYTE *)(v10 + 41))
      {
        ++*(_DWORD *)a2;
        result = *(WebCore::HistoryItem **)(v10 + 48);
        *(_QWORD *)(v10 + 48) = a2;
        if (result)
          result = WTF::RefCounted<WebCore::HistoryItem>::deref(result, a2);
        *(_BYTE *)(v10 + 56) = a3;
      }
      else
      {
        v16 = *(_DWORD **)(*((_QWORD *)v6 + 17) + 16);
        ++v16[2];
        (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v16 + 32))(&v23, v16, 0);
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
        v17 = *(_DWORD **)(*((_QWORD *)v6 + 17) + 16);
        ++v17[2];
        (*(void (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v17 + 24))(v17, a2);
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
        WebCore::HistoryController::recursiveSetProvisionalItem(v10, (int ***)a2, (int ***)v23);
        WebCore::HistoryController::recursiveGoToItem(v10, (uint64_t)a2, (uint64_t)v23, a3, a4);
        result = v23;
        v23 = 0;
        if (result)
          result = WTF::RefCounted<WebCore::HistoryItem>::deref(result, v18);
      }
LABEL_24:
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::Page::~Page(v6);
        return (WebCore::HistoryItem *)WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  return result;
}

uint64_t WebCore::HistoryController::recursiveSetProvisionalItem(uint64_t this, int ***a2, int ***a3)
{
  uint64_t v5;
  uint64_t v6;
  int **v7;
  int **v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::HistoryItem **v14;
  WebCore::HistoryItem *v15;
  _QWORD *v17;
  unsigned int *v19;
  unsigned int v20;
  WebCore::HistoryController *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;

  if (a3 && a2 != a3 && a2[19] == a3[19])
  {
    v5 = this;
    ++*(_DWORD *)a2;
    this = *(_QWORD *)(this + 32);
    *(_QWORD *)(v5 + 32) = a2;
    if (this)
      this = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)this, (WTF::StringImpl *)a2);
    v6 = *((unsigned int *)a2 + 35);
    if ((_DWORD)v6)
    {
      v7 = a2[16];
      v8 = &v7[v6];
      do
      {
        v9 = *v7;
        v10 = **v7 + 1;
        *v9 = v10;
        if (*((_BYTE *)v9 + 64))
        {
          v11 = *((unsigned int *)a3 + 35);
          if ((_DWORD)v11)
          {
            v13 = *((_QWORD *)v9 + 6);
            v12 = *((_QWORD *)v9 + 7);
            v14 = (WebCore::HistoryItem **)a3[16];
            while (1)
            {
              v15 = *v14;
              if (*((_BYTE *)*v14 + 64))
              {
                if (*((_QWORD *)v15 + 6) == v13 && *((_QWORD *)v15 + 7) == v12)
                  break;
              }
              ++v14;
              if (!--v11)
                goto LABEL_32;
            }
            ++*(_DWORD *)v15;
            v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 88);
            if (v17)
            {
              while (v17[4] != v13 || v17[5] != v12)
              {
                v17 = (_QWORD *)v17[9];
                if (!v17)
                  goto LABEL_31;
              }
              v19 = (unsigned int *)(v17 + 1);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 + 1, v19));
              v21 = (WebCore::HistoryController *)v17[23];
              ++*(_DWORD *)v21;
              WebCore::HistoryController::recursiveSetProvisionalItem(v21, (WebCore::HistoryItem *)v9, v15);
              if (!*(_DWORD *)v21)
              {
                this = 286;
                __break(0xC471u);
                return this;
              }
              --*(_DWORD *)v21;
              do
              {
                v22 = __ldaxr(v19);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v19));
              if (!v23)
              {
                atomic_store(1u, v19);
                v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v26 = off_1E31FE290;
                v26[1] = v19;
                v27 = v26;
                WTF::ensureOnMainThread();
                if (v27)
                  (*(void (**)(_QWORD *))(*v27 + 8))(v27);
              }
            }
LABEL_31:
            this = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v15, (WTF::StringImpl *)a2);
            v10 = *v9;
          }
        }
LABEL_32:
        if (v10 == 1)
        {
          WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v9, (WTF::StringImpl *)a2);
          this = WTF::fastFree(v24, v25);
        }
        else
        {
          *v9 = v10 - 1;
        }
        ++v7;
      }
      while (v7 != v8);
    }
  }
  return this;
}

void WebCore::HistoryController::recursiveGoToItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int **v10;
  int **v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::HistoryItem **v17;
  WebCore::HistoryItem *v18;
  _QWORD *v20;
  unsigned int *v22;
  unsigned int v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  if (a3 && a2 != a3 && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a3 + 152))
  {
    v9 = *(unsigned int *)(a2 + 140);
    if ((_DWORD)v9)
    {
      v10 = *(int ***)(a2 + 128);
      v11 = &v10[v9];
      do
      {
        v12 = *v10;
        v13 = **v10 + 1;
        *v12 = v13;
        if (*((_BYTE *)v12 + 64))
        {
          v14 = *(unsigned int *)(a3 + 140);
          if ((_DWORD)v14)
          {
            v16 = *((_QWORD *)v12 + 6);
            v15 = *((_QWORD *)v12 + 7);
            v17 = *(WebCore::HistoryItem ***)(a3 + 128);
            while (1)
            {
              v18 = *v17;
              if (*((_BYTE *)*v17 + 64))
              {
                if (*((_QWORD *)v18 + 6) == v16 && *((_QWORD *)v18 + 7) == v15)
                  break;
              }
              ++v17;
              if (!--v14)
                goto LABEL_30;
            }
            ++*(_DWORD *)v18;
            v20 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88);
            if (v20)
            {
              while (v20[4] != v16 || v20[5] != v15)
              {
                v20 = (_QWORD *)v20[9];
                if (!v20)
                  goto LABEL_29;
              }
              v22 = (unsigned int *)(v20 + 1);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 + 1, v22));
              v24 = (_DWORD *)v20[23];
              ++*v24;
              WebCore::HistoryController::recursiveGoToItem(v24, v12, v18, a4, a5);
              if (!*v24)
                goto LABEL_49;
              --*v24;
              do
              {
                v25 = __ldaxr(v22);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v22));
              if (!v26)
              {
                atomic_store(1u, v22);
                v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v29 = off_1E31FE290;
                v29[1] = v22;
                v37 = v29;
                WTF::ensureOnMainThread();
                if (v37)
                  (*(void (**)(_QWORD *))(*v37 + 8))(v37);
              }
            }
LABEL_29:
            WTF::RefCounted<WebCore::HistoryItem>::deref(v18, (WTF::StringImpl *)a2);
            v13 = *v12;
          }
        }
LABEL_30:
        if (v13 == 1)
        {
          WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v12, (WTF::StringImpl *)a2);
          WTF::fastFree(v27, v28);
        }
        else
        {
          *v12 = v13 - 1;
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v30 && !*(_BYTE *)(v30 + 144))
    {
      v31 = (unsigned int *)(v30 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v33 = *(_DWORD **)(v30 + 280);
      ++*v33;
      WebCore::FrameLoader::loadItem((uint64_t)v33, (unsigned int **)a2, (WebCore::HistoryItem *)a3, a4, a5);
      if (!*v33)
      {
LABEL_49:
        __break(0xC471u);
        JUMPOUT(0x195EF3620);
      }
      --*v33;
      do
      {
        v34 = __ldaxr(v31);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v31));
      if (!v35)
      {
        atomic_store(1u, v31);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = off_1E31FE290;
        v36[1] = v31;
        v38 = v36;
        WTF::ensureOnMainThread();
        if (v38)
          (*(void (**)(_QWORD *))(*v38 + 8))(v38);
      }
    }
  }
}

WebCore::HistoryItem *WebCore::HistoryController::setDefersLoading(WebCore::HistoryItem *this, char a2)
{
  WebCore::HistoryItem *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore::HistoryItem *v5;

  *((_BYTE *)this + 41) = a2;
  if ((a2 & 1) == 0)
  {
    v2 = this;
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    if (v3)
    {
      ++*(_DWORD *)v3;
      WebCore::HistoryController::goToItem(this, v3, *((unsigned __int8 *)this + 56), 0);
      v5 = (WebCore::HistoryItem *)*((_QWORD *)v2 + 6);
      *((_QWORD *)v2 + 6) = 0;
      if (v5)
        WTF::RefCounted<WebCore::HistoryItem>::deref(v5, v4);
      return WTF::RefCounted<WebCore::HistoryItem>::deref(v3, v4);
    }
  }
  return this;
}

uint64_t WebCore::HistoryController::updateForBackForwardNavigation(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::HistoryItem *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1 && !*(_BYTE *)(v1 + 144))
  {
    v2 = this;
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (!*(_BYTE *)(this + 40))
    {
      v5 = *(WebCore::HistoryItem **)(this + 24);
      if (v5)
      {
        ++*(_DWORD *)v5;
        WebCore::HistoryController::saveScrollPositionAndViewStateToItem(this, v5);
        WTF::RefCounted<WebCore::HistoryItem>::deref(v5);
      }
      else
      {
        v9 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
        if (v9 && !*(_BYTE *)(v9 + 144))
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          v12 = *(_DWORD **)(v9 + 288);
          if (v12)
          {
            v13 = v12[2];
            v12[2] = v13 + 1;
            if (v13)
              v12[2] = v13;
            else
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          }
          do
          {
            v14 = __ldaxr(v10);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v10));
          if (!v15)
          {
            atomic_store(1u, v10);
            v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v16 = off_1E31FE290;
            v16[1] = v10;
            v18 = v16;
            WTF::ensureOnMainThread();
            if (v18)
              (*(void (**)(_QWORD *))(*v18 + 8))(v18);
          }
        }
      }
    }
    this = WebCore::HistoryController::updateCurrentItem(v2);
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v3;
      v17 = (uint64_t)v8;
      WTF::ensureOnMainThread();
      this = v17;
      if (v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  return this;
}

uint64_t WebCore::HistoryController::updateCurrentItem(uint64_t this)
{
  WebCore::HistoryItem *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char isTargetItem;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v1 = *(WebCore::HistoryItem **)(this + 16);
  if (v1)
  {
    v2 = this;
    ++*(_DWORD *)v1;
    v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
    if (v3 && !*(_BYTE *)(v3 + 144))
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 88);
      if (v6)
      {
        ++*(_DWORD *)(v6 + 24);
        v7 = *(_QWORD *)(v6 + 368);
        if (!v7 || !*(_DWORD *)(v7 + 4))
        {
          WebCore::HistoryItem::url(v1, (uint64_t)&v14);
          if ((*(_BYTE *)(v6 + 1056) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 872));
            *(_BYTE *)(v6 + 1056) |= 1u;
          }
          v10 = WTF::equal(v14, *(const WTF::StringImpl **)(v6 + 872), v8);
          v11 = v14;
          v14 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          if ((v10 & 1) != 0)
          {
            WebCore::HistoryItem::setFormInfoFromRequest(v1, (const WebCore::ResourceRequest *)(v6 + 872));
          }
          else
          {
            isTargetItem = WebCore::HistoryItem::isTargetItem(v1);
            WebCore::HistoryItem::reset(v1, v13);
            WebCore::HistoryController::initializeItem(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (WTF::StringImpl **)v1);
            *((_BYTE *)v1 + 145) = isTargetItem;
          }
        }
        if (*(_DWORD *)(v6 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        else
          --*(_DWORD *)(v6 + 24);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
    return WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  }
  return this;
}

uint64_t WebCore::HistoryController::updateForReload(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1 && !*(_BYTE *)(v1 + 144))
  {
    v2 = this;
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = *(unsigned int **)(this + 16);
    if (v5)
    {
      ++*v5;
      {
        WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
      }
      WebCore::BackForwardCache::remove((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, (WebCore::HistoryItem *)v5);
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 280) + 81);
      if (v6 == 8 || v6 == 4)
        WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v2, (WebCore::HistoryItem *)v5);
      WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v5 + 32, 0);
      WTF::RefCounted<WebCore::HistoryItem>::deref(v5);
    }
    this = WebCore::HistoryController::updateCurrentItem(v2);
    do
    {
      v8 = __ldaxr(v3);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v3));
    if (!v9)
    {
      atomic_store(1u, v3);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E31FE290;
      v10[1] = v3;
      v11 = (uint64_t)v10;
      WTF::ensureOnMainThread();
      this = v11;
      if (v11)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  return this;
}

unsigned int *WebCore::HistoryController::updateForClientRedirect(unsigned int *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  WebCore::DocumentLoader *v10;
  const WTF::String *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  WebCore::Page *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19[5];

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2 && !*(_BYTE *)(v2 + 144))
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    if (v5)
    {
      ++*v5;
      WebCore::HistoryItem::clearDocumentState(v5, a2);
      WebCore::HistoryItem::clearScrollPosition((uint64_t)v5);
      WTF::RefCounted<WebCore::HistoryItem>::deref(v5);
    }
    v6 = *(_QWORD *)(v2 + 24);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      v8 = *(_QWORD *)(v7 + 1008);
      v9 = v8 < 0 && v8 != -1;
    }
    else
    {
      v9 = 1;
    }
    v10 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v2 + 280) + 88);
    if (v10)
    {
      ++*((_DWORD *)v10 + 6);
      v12 = WebCore::DocumentLoader::urlForHistory(v10, (uint64_t)v19);
      if (*((_DWORD *)v10 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *, __n128))(*(_QWORD *)v10 + 24))(v10, v12);
      else
        --*((_DWORD *)v10 + 6);
    }
    else
    {
      WebCore::DocumentLoader::urlForHistory(0, (uint64_t)v19);
    }
    v13 = v19[0];
    if (v19[0])
    {
      if (*((_DWORD *)v19[0] + 1))
        v14 = v9;
      else
        v14 = 1;
      if ((v14 & 1) == 0)
      {
        v15 = *(_QWORD *)(v2 + 24);
        if (v15)
        {
          v16 = *(WebCore::Page **)(v15 + 8);
          if (v16)
          {
            ++*(_DWORD *)v16;
            v17 = *((_QWORD *)v16 + 119);
            v18 = WebCore::computeSharedStringHash((WebCore *)v19, v11);
            (*(void (**)(uint64_t, WebCore::Page *, uint64_t))(*(_QWORD *)v17 + 24))(v17, v16, v18);
            WTF::RefCounted<WebCore::Page>::deref(v16);
          }
        }
      }
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return this;
}

WebCore::HistoryItem *WebCore::HistoryController::setCurrentItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::HistoryItem *v5;
  WebCore::HistoryItem *result;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  *(_BYTE *)(a1 + 40) = 0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = *(WebCore::HistoryItem **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v5);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  result = *(WebCore::HistoryItem **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::HistoryItem::~HistoryItem(result);
      return (WebCore::HistoryItem *)WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

_QWORD *WebCore::HistoryController::recursiveUpdateForCommit(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::HistoryItem *v6;
  uint64_t v7;
  WebCore::LocalFrameView *v8;
  WebCore::HistoryItem *v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int v13;
  WebCore::HistoryController *v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::HistoryItem *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  WebCore::HistoryItem *v27;
  WebCore::HistoryItem *v28;
  WebCore::HistoryItem *v29;

  v1 = this[4];
  if (v1)
  {
    v2 = this;
    v3 = this[2];
    if (v3)
    {
      ++*(_DWORD *)v3;
      ++*(_DWORD *)v1;
      if (v3 == v1)
      {
        WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
        this = (_QWORD *)WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
      }
      else
      {
        v4 = *(_QWORD *)(v3 + 152);
        v5 = *(_QWORD *)(v1 + 152);
        WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
        this = (_QWORD *)WTF::RefCounted<WebCore::HistoryItem>::deref(v3);
        if (v4 == v5)
        {
          WebCore::HistoryController::saveDocumentState((uint64_t)v2);
          v6 = (WebCore::HistoryItem *)v2[2];
          if (v6)
          {
            ++*(_DWORD *)v6;
            WebCore::HistoryController::saveScrollPositionAndViewStateToItem((uint64_t)v2, v6);
            WTF::RefCounted<WebCore::HistoryItem>::deref(v6);
          }
          else
          {
            v20 = *(_QWORD *)(v2[1] + 8);
            if (v20 && !*(_BYTE *)(v20 + 144))
            {
              v21 = (unsigned int *)(v20 + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 + 1, v21));
              v23 = *(_DWORD **)(v20 + 288);
              if (v23)
              {
                v24 = v23[2];
                v23[2] = v24 + 1;
                if (v24)
                  v23[2] = v24;
                else
                  (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
              }
              do
              {
                v25 = __ldaxr(v21);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v21));
              if (!v26)
              {
                atomic_store(1u, v21);
                v27 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v27 = off_1E31FE290;
                *((_QWORD *)v27 + 1) = v21;
                v29 = v27;
                WTF::ensureOnMainThread();
                v28 = v29;
                v29 = 0;
                if (v28)
                  (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v28 + 8))(v28);
              }
            }
          }
          v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2[1] + 8) + 56))(*(_QWORD *)(v2[1] + 8));
          if (v7)
          {
            v8 = (WebCore::LocalFrameView *)v7;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 704))(v7) & 1) == 0)
            {
              ++*((_DWORD *)v8 + 2);
              WebCore::LocalFrameView::setWasScrolledByUser(v8, 0);
              if (*((_DWORD *)v8 + 2) == 1)
                (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v8 + 8))(v8);
              else
                --*((_DWORD *)v8 + 2);
            }
          }
          v9 = (WebCore::HistoryItem *)v2[4];
          if (v9)
          {
            ++*(_DWORD *)v9;
            v29 = v9;
            WebCore::HistoryController::setCurrentItem((uint64_t)v2, (uint64_t *)&v29);
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v29);
                WTF::fastFree(v18, v19);
              }
              else
              {
                --*(_DWORD *)v29;
              }
            }
            v10 = v2[4];
            v2[4] = 0;
            if (v10)
              WTF::RefCounted<WebCore::HistoryItem>::deref(v10);
          }
          WebCore::HistoryController::restoreDocumentState((uint64_t)v2);
          this = (_QWORD *)WebCore::HistoryController::restoreScrollPositionAndViewState((uint64_t)v2);
        }
      }
    }
    for (i = *(_QWORD *)(*(_QWORD *)(v2[1] + 8) + 88); i; i = *(_QWORD *)(i + 72))
    {
      if (!*(_BYTE *)(i + 144))
      {
        v12 = (unsigned int *)(i + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v14 = *(WebCore::HistoryController **)(i + 184);
        ++*(_DWORD *)v14;
        this = (_QWORD *)WebCore::HistoryController::recursiveUpdateForCommit(v14);
        if (!*(_DWORD *)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x195EF3FACLL);
        }
        --*(_DWORD *)v14;
        do
        {
          v15 = __ldaxr(v12);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v12));
        if (!v16)
        {
          atomic_store(1u, v12);
          v17 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v17 = off_1E31FE290;
          *((_QWORD *)v17 + 1) = v12;
          v29 = v17;
          WTF::ensureOnMainThread();
          this = v29;
          v29 = 0;
          if (this)
            this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HistoryController::updateForSameDocumentNavigation(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::Page *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return this;
  v3 = this;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v2 + 296);
  v7 = *(_QWORD *)(v6 + 736);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 4))
    {
      v11 = *(_QWORD *)(v2 + 24);
      if (v11)
      {
        v12 = *(WebCore::Page **)(v11 + 8);
        if (v12)
        {
          ++*(_DWORD *)v12;
          v13 = *((_QWORD *)v12 + 126);
          if ((v13 & 0x8000000000000000) == 0 || v13 == -1)
          {
            v14 = *((_QWORD *)v12 + 119);
            v15 = WebCore::computeSharedStringHash((WebCore *)(v6 + 736), a2);
            this = (*(uint64_t (**)(uint64_t, WebCore::Page *, uint64_t))(*(_QWORD *)v14 + 24))(v14, v12, v15);
            v16 = 0;
          }
          else
          {
            v16 = 1;
          }
          v17 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
          if (v17 && !*(_BYTE *)(v17 + 144))
          {
            v18 = (unsigned int *)(v17 + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
            v20 = *(_DWORD **)(v17 + 184);
            ++*v20;
            this = WebCore::HistoryController::recursiveUpdateForSameDocumentNavigation((uint64_t)v20);
            if (!*v20)
              goto LABEL_37;
            --*v20;
            do
            {
              v21 = __ldaxr(v18);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v18));
            if (!v22)
            {
              atomic_store(1u, v18);
              v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v28 = off_1E31FE290;
              v28[1] = v18;
              v30 = (uint64_t)v28;
              WTF::ensureOnMainThread();
              this = v30;
              if (v30)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            }
          }
          v23 = *(WTF::StringImpl ***)(v3 + 16);
          if (!v23)
            goto LABEL_29;
          ++*(_DWORD *)v23;
          WebCore::HistoryItem::setURL(v23, (WTF::StringImpl **)(*(_QWORD *)(v2 + 296) + 736));
          if ((v16 & 1) != 0)
          {
LABEL_28:
            this = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v23, v24);
LABEL_29:
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::Page::~Page(v12);
              this = WTF::fastFree(v26, v27);
            }
            else
            {
              --*(_DWORD *)v12;
            }
            goto LABEL_7;
          }
          v25 = *(_QWORD *)(v2 + 280);
          ++*(_DWORD *)v25;
          (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 528))(*(_QWORD *)(v25 + 16));
          if (*(_DWORD *)v25)
          {
            --*(_DWORD *)v25;
            goto LABEL_28;
          }
LABEL_37:
          __break(0xC471u);
          JUMPOUT(0x195EF4298);
        }
      }
    }
  }
  do
  {
LABEL_7:
    v8 = __ldaxr(v4);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v4));
  if (!v9)
  {
    atomic_store(1u, v4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v4;
    v29 = (uint64_t)v10;
    WTF::ensureOnMainThread();
    this = v29;
    if (v29)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  return this;
}

uint64_t WebCore::HistoryController::recursiveUpdateForSameDocumentNavigation(uint64_t this)
{
  WebCore::HistoryItem *v1;
  uint64_t v2;
  WebCore::HistoryItem *v3;
  int shouldDoSameDocumentNavigationTo;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  WebCore::HistoryController *v11;
  WebCore::HistoryItem *v12;

  v1 = *(WebCore::HistoryItem **)(this + 32);
  if (v1)
  {
    v2 = this;
    v3 = *(WebCore::HistoryItem **)(this + 16);
    if (!v3)
      goto LABEL_6;
    ++*(_DWORD *)v3;
    ++*(_DWORD *)v1;
    shouldDoSameDocumentNavigationTo = WebCore::HistoryItem::shouldDoSameDocumentNavigationTo(v3, v1);
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1, v5);
    this = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v3, v6);
    if (!shouldDoSameDocumentNavigationTo)
      return this;
    v1 = *(WebCore::HistoryItem **)(v2 + 32);
    if (v1)
    {
LABEL_6:
      ++*(_DWORD *)v1;
      v12 = v1;
      WebCore::HistoryController::setCurrentItem(v2, (uint64_t *)&v12);
      WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v12);
      this = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (this)
        this = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)this, v7);
    }
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 88); i; i = *(_QWORD *)(i + 72))
    {
      if (!*(_BYTE *)(i + 144))
      {
        v9 = (unsigned int *)(i + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = *(WebCore::HistoryController **)(i + 184);
        ++*(_DWORD *)v11;
        WebCore::HistoryController::recursiveUpdateForSameDocumentNavigation(v11);
        if (!*(_DWORD *)v11)
        {
          this = 286;
          __break(0xC471u);
          return this;
        }
        --*(_DWORD *)v11;
        this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(i + 8));
      }
    }
  }
  return this;
}

WebCore::HistoryItem **WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::operator=(WebCore::HistoryItem **a1, WTF::StringImpl *a2)
{
  WebCore::HistoryItem *v3;
  WebCore::HistoryItem *v4;
  WTF *v6;
  void *v7;

  v3 = *(WebCore::HistoryItem **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WebCore::HistoryController::clearPreviousItem(WebCore::HistoryController *this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  WebCore::HistoryController *v7;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)result, a2);
  for (i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 88); i; i = *(_QWORD *)(i + 72))
  {
    if (!*(_BYTE *)(i + 144))
    {
      v5 = (unsigned int *)(i + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(WebCore::HistoryController **)(i + 184);
      ++*(_DWORD *)v7;
      WebCore::HistoryController::clearPreviousItem(v7);
      if (!*(_DWORD *)v7)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v7;
      result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(i + 8));
    }
  }
  return result;
}

WebCore::HistoryItem *WebCore::HistoryController::setProvisionalItem(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::HistoryItem *result;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WebCore::HistoryItem **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::HistoryItem::~HistoryItem(result, a2);
      return (WebCore::HistoryItem *)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HistoryController::pushState(WTF::StringImpl *result, uint64_t *a2, _DWORD **a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;
  WebCore::HistoryItem *ItemTree;
  void *v17;
  uint64_t v18;
  uint64_t isMainThread;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  const WTF::String *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  void *v55;
  double v56;
  double v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl *v60;
  double v61;
  WTF::StringImpl *v62[5];
  WTF::StringImpl *v63[5];
  WebCore::HistoryItem *v64;

  if (!*((_QWORD *)result + 2))
    return result;
  v3 = result;
  v4 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  if (!v4 || *(_BYTE *)(v4 + 144))
    return result;
  v7 = (unsigned int *)(v4 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v4 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      ++*(_DWORD *)v10;
      v11 = *(_BYTE *)(*((_QWORD *)result + 2) + 148);
      v12 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
      v13 = (unsigned int *)(v12 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = *(_DWORD **)(v12 + 184);
      ++*v15;
      ItemTree = WebCore::HistoryController::createItemTree((uint64_t *)&v64, (uint64_t)v15, *(_QWORD *)(v10 + 1824), v4, 0);
      if (!*v15)
      {
        __break(0xC471u);
        JUMPOUT(0x195EF4A88);
      }
      --*v15;
      v18 = *(_QWORD *)(v4 + 296);
      if (!v18)
        goto LABEL_21;
      *(_DWORD *)(v18 + 24) += 2;
      isMainThread = WTF::isMainThread(ItemTree);
      if ((_DWORD)isMainThread)
      {
        {
          isMainThread = WebCore::currentToken(void)::token;
          if (WebCore::currentToken(void)::token)
          {
            if (!*(_DWORD *)(WebCore::currentToken(void)::token + 68)
              && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
            {
              isMainThread = WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, (const WebCore::Document *)v18);
              if ((isMainThread & 1) != 0)
                goto LABEL_21;
            }
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
      v20 = *(_QWORD *)(v18 + 696);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 24);
        *(_DWORD *)(v20 + 24) = v21 + 1;
        if (fabs(*(double *)(v20 + 296)) == INFINITY)
        {
          if (v21)
            *(_DWORD *)(v20 + 24) = v21;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
          goto LABEL_20;
        }
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isMainThread);
        v57 = v56 - *(double *)(v20 + 296);
        if (*(_DWORD *)(v20 + 24) != 1)
        {
          --*(_DWORD *)(v20 + 24);
          if (v57 > 10.0)
            goto LABEL_20;
LABEL_21:
          v22 = *((_QWORD *)v3 + 2);
          if (v22)
            ++*(_DWORD *)v22;
          v23 = *a2;
          *a2 = 0;
          v24 = *(unsigned int **)(v22 + 168);
          *(_QWORD *)(v22 + 168) = v23;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v24, v17);
              WTF::fastFree(v58, v59);
            }
          }
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v22 + 472) + 16))(*(_QWORD *)(v22 + 472), v22);
          v28 = *a3;
          if (*a3)
            *v28 += 2;
          v29 = *(WTF::StringImpl **)(v22 + 16);
          *(_QWORD *)(v22 + 16) = v28;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v27);
            else
              *(_DWORD *)v29 -= 2;
          }
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v22 + 472) + 16))(*(_QWORD *)(v22 + 472), v22);
          *(_BYTE *)(v22 + 148) = v11;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v22 + 472) + 16))(*(_QWORD *)(v22 + 472), v22);
          v30 = *(_QWORD *)(v4 + 32);
          v31 = *(_QWORD *)(v4 + 40);
          v32 = *(_DWORD **)(*(_QWORD *)(v10 + 136) + 16);
          ++v32[2];
          (*(void (**)(_DWORD *, uint64_t, uint64_t, WebCore::HistoryItem **))(*(_QWORD *)v32 + 16))(v32, v30, v31, &v64);
          if (v32[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
          else
            --v32[2];
          v34 = *(_QWORD *)(v10 + 1008);
          if ((v34 & 0x8000000000000000) == 0 || v34 == -1)
          {
            v62[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v62);
            MEMORY[0x19AEA52F8](v63, v62, a3, 0);
            v35 = *(_QWORD *)(v10 + 952);
            v37 = WebCore::computeSharedStringHash((WebCore *)v63, v36);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 24))(v35, v10, v37);
            v39 = v63[0];
            v63[0] = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v38);
              else
                *(_DWORD *)v39 -= 2;
            }
            v40 = v62[0];
            v62[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v38);
              else
                *(_DWORD *)v40 -= 2;
            }
            v41 = *(_QWORD *)(v4 + 280);
            ++*(_DWORD *)v41;
            (*(void (**)(_QWORD))(**(_QWORD **)(v41 + 16) + 528))(*(_QWORD *)(v41 + 16));
            if (!*(_DWORD *)v41)
            {
              __break(0xC471u);
              JUMPOUT(0x195EF4ABCLL);
            }
            --*(_DWORD *)v41;
            if (!v18)
            {
              WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v22, v42);
LABEL_47:
              result = v64;
              v64 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                {
                  WebCore::HistoryItem::~HistoryItem(result, v43);
                  result = (WTF::StringImpl *)WTF::fastFree(v51, v52);
                }
                else
                {
                  --*(_DWORD *)result;
                }
              }
              do
              {
                v44 = __ldaxr(v13);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v13));
              if (!v45)
              {
                atomic_store(1u, v13);
                v60 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v60 = off_1E31FE290;
                *((_QWORD *)v60 + 1) = v13;
                v63[0] = v60;
                WTF::ensureOnMainThread();
                result = v63[0];
                v63[0] = 0;
                if (result)
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
              }
              if (*(_DWORD *)v10 == 1)
              {
                WebCore::Page::~Page(v10);
                result = (WTF::StringImpl *)WTF::fastFree(v49, v50);
              }
              else
              {
                --*(_DWORD *)v10;
              }
              goto LABEL_52;
            }
            if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 688) & 0x4000) != 0)
            {
              v53 = *(_DWORD **)(v18 + 696);
              if (v53)
                ++v53[6];
              WebCore::LocalDOMWindow::protectedNavigation((uint64_t)v53, (uint64_t *)v63);
              v54 = v63[0];
              ++*(_DWORD *)v22;
              v62[0] = (WTF::StringImpl *)v22;
              WebCore::Navigation::updateForNavigation((uint64_t)v54, (uint64_t *)v62, 0);
              WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(v62);
              WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(v63, v55);
              if (v53)
              {
                if (v53[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 72))(v53);
                else
                  --v53[6];
              }
            }
            WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v22, v42);
          }
          else
          {
            WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v22, v33);
            if (!v18)
              goto LABEL_47;
          }
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18, v43);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          goto LABEL_47;
        }
        v61 = v57;
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
        if (v61 <= 10.0)
          goto LABEL_21;
      }
LABEL_20:
      *((_BYTE *)v64 + 147) = 1;
      goto LABEL_21;
    }
  }
  do
  {
LABEL_52:
    v46 = __ldaxr(v7);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v7));
  if (!v47)
  {
    atomic_store(1u, v7);
    v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v48 = off_1E31FE290;
    *((_QWORD *)v48 + 1) = v7;
    v63[0] = v48;
    WTF::ensureOnMainThread();
    result = v63[0];
    v63[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::HistoryController::replaceState(uint64_t result, uint64_t *a2, WTF::String *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  WebCore::FormData *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::String *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  void *v35;
  void *v36;
  unsigned int *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF::StringImpl *v43[5];
  WTF::StringImpl *v44[5];

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    ++*(_DWORD *)v3;
    if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
      WebCore::HistoryItem::setURLString((WebCore::HistoryItem *)v3, a3);
    v7 = *a2;
    *a2 = 0;
    v8 = *(unsigned int **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v8, a2);
        WTF::fastFree(v41, v42);
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 472) + 16))(*(_QWORD *)(v3 + 472), v3);
    v12 = *(WebCore::FormData **)(v3 + 184);
    *(_QWORD *)(v3 + 184) = 0;
    if (v12)
      WTF::RefCounted<WebCore::FormData>::deref(v12, v11);
    v13 = *(WTF::StringImpl **)(v3 + 192);
    *(_QWORD *)(v3 + 192) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    if (!v14 || *(_BYTE *)(v14 + 144))
      return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v3, (WTF::StringImpl *)v11);
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *(_QWORD *)(v14 + 24);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = 0;
        ++*(_DWORD *)v18;
        goto LABEL_21;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 1;
LABEL_21:
    v20 = *(_QWORD *)(v18 + 1008);
    if ((v20 & 0x8000000000000000) == 0 || v20 == -1)
    {
      v43[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v43);
      MEMORY[0x19AEA52F8](v44, v43, a3, 0);
      v21 = *(_QWORD *)(v18 + 952);
      v23 = WebCore::computeSharedStringHash((WebCore *)v44, v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v18, v23);
      v25 = v44[0];
      v44[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v43[0];
      v43[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *(_QWORD *)(v14 + 280);
      ++*(_DWORD *)v27;
      (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 16) + 528))(*(_QWORD *)(v27 + 16));
      if (!*(_DWORD *)v27)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v27;
      v28 = *(_QWORD *)(v14 + 296);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 + 24);
        *(_DWORD *)(v28 + 24) = v29 + 2;
        if ((*(_QWORD *)(*(_QWORD *)(v28 + 680) + 688) & 0x4000) != 0)
        {
          v44[0] = 0;
          WebCore::HistoryItem::setNavigationAPIStateObject(v3, (unsigned int **)v44);
          v37 = (unsigned int *)v44[0];
          v44[0] = 0;
          if (v37)
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v37, v36);
          v38 = *(_DWORD **)(v28 + 696);
          if (v38)
            ++v38[6];
          WebCore::LocalDOMWindow::protectedNavigation((uint64_t)v38, (uint64_t *)v44);
          v39 = v44[0];
          ++*(_DWORD *)v3;
          v43[0] = (WTF::StringImpl *)v3;
          WebCore::Navigation::updateForNavigation((uint64_t)v39, (uint64_t *)v43, 1u);
          WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(v43);
          WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(v44, v40);
          if (v38)
          {
            if (v38[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 72))(v38);
            else
              --v38[6];
          }
          v29 = *(_DWORD *)(v28 + 24) - 2;
        }
        if (v29)
        {
          *(_DWORD *)(v28 + 24) = v29;
        }
        else if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v11);
        }
      }
    }
    if ((v19 & 1) == 0)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WebCore::Page::~Page(v18);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
    do
    {
      v30 = __ldaxr(v15);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v15));
    if (!v31)
    {
      atomic_store(1u, v15);
      v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = off_1E31FE290;
      *((_QWORD *)v32 + 1) = v15;
      v44[0] = v32;
      WTF::ensureOnMainThread();
      v33 = v44[0];
      v44[0] = 0;
      if (v33)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
    }
    return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((WebCore::HistoryItem *)v3, (WTF::StringImpl *)v11);
  }
  return result;
}

WebCore::HistoryItem **WebCore::HistoryController::replaceCurrentItem(WebCore::HistoryItem **result, WTF::StringImpl *a2)
{
  WebCore::HistoryItem **v3;
  WebCore::HistoryItem *v4;
  WebCore::HistoryItem **v5;
  WebCore::HistoryItem *v6;
  WebCore::HistoryItem **v7;

  if (*(_QWORD *)a2)
  {
    v3 = result;
    v4 = result[3];
    v3[3] = 0;
    if (v4)
      WTF::RefCounted<WebCore::HistoryItem>::deref(v4, a2);
    v6 = v3[4];
    v5 = v3 + 4;
    if (v6)
      v7 = v5;
    else
      v7 = v5 - 2;
    return WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::operator=(v7, a2);
  }
  return result;
}

void WebCore::ImageLoader::~ImageLoader(WebCore::ImageLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  WebCore::ImageLoader ***v25;
  uint64_t v26;
  WebCore::ImageLoader **v27;
  WebCore::ImageLoader ***v28;
  uint64_t v29;
  WebCore::ImageLoader **v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  _BYTE v37[24];
  unsigned int **v38;

  *(_QWORD *)this = off_1E33F60F0;
  v4 = (unsigned int **)((char *)this + 24);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v36 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (v6)
    {
      v38 = &v36;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v38, (uint64_t)v37), (v3 = v36) != 0))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v3 + 1);
        if (v8)
          WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
      }
    }
  }
  else
  {
    v36 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v36, a2);
  if ((*((_BYTE *)this + 128) & 6) != 0)
  {
    {
      if (dword_1ECE907C4)
      {
        v25 = (WebCore::ImageLoader ***)qword_1ECE907B8;
        v26 = 16 * dword_1ECE907C4;
        do
        {
          v27 = *v25;
          if (*v25 && v27[1] == this)
          {
            v34 = v26;
            *v25 = 0;
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree((WTF *)v27, v9);
            else
              --*(_DWORD *)v27;
            v26 = v34;
          }
          v25 += 2;
          v26 -= 16;
        }
        while (v26);
      }
    }
    else
    {
      v35 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
    }
    if (dword_1ECE907D4)
    {
      v28 = (WebCore::ImageLoader ***)qword_1ECE907C8;
      v29 = 16 * dword_1ECE907D4;
      do
      {
        v30 = *v28;
        if (*v28 && v30[1] == this)
        {
          *v28 = 0;
          if (*(_DWORD *)v30 == 1)
            WTF::fastFree((WTF *)v30, v9);
          else
            --*(_DWORD *)v30;
        }
        v28 += 2;
        v29 -= 16;
      }
      while (v29);
    }
  }
  v10 = *((unsigned int *)this + 31);
  if ((_DWORD)v10)
  {
    v31 = (_DWORD **)*((_QWORD *)this + 14);
    v32 = 8 * v10;
    do
    {
      v33 = *v31;
      *v31 = 0;
      if (v33)
      {
        if (v33[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[4];
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v11 = (WTF *)*((_QWORD *)this + 14);
  if (v11)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v11, v9);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v9);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 4) = off_1E31F7378;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WebCore::TimerBase::~TimerBase((WebCore::ImageLoader *)((char *)this + 32));
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v16);
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v18);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v18));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v18);
      v23 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v23));
      v24 = *(WTF **)(v18 + 16);
      if (v24)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v24, v17);
      }
      WTF::fastFree((WTF *)v18, v17);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, v17);
      else
        --*(_DWORD *)v20;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::ImageLoader::clearImageWithoutConsideringPendingLoadEvent(WebCore::ImageLoader *this, void *a2)
{
  unsigned int *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  char v10;
  WebCore::ImageLoader ***v11;
  uint64_t v12;
  WebCore::ImageLoader **v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::CachedResource *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  WebCore::ImageLoader ***v24;
  uint64_t v25;
  WebCore::ImageLoader **v26;
  unsigned int *v27;
  _BYTE v28[24];
  unsigned int **v29;

  v4 = (uint64_t *)((char *)this + 24);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v27 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (v6)
    {
      v29 = &v27;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v29, (uint64_t)v28), (v3 = v27) != 0))
      {
        if (*((_QWORD *)v3 + 1))
        {
          WebCore::CachedResourceHandleBase::setResource(v4, 0);
          v9 = *((_BYTE *)this + 128);
          v10 = v9 & 0xFE;
          *((_BYTE *)this + 128) = v9 & 0xFE;
          if ((v9 & 6) != 0)
          {
            {
              if (dword_1ECE907C4)
              {
                v11 = (WebCore::ImageLoader ***)qword_1ECE907B8;
                v12 = 16 * dword_1ECE907C4;
                do
                {
                  v13 = *v11;
                  if (*v11 && v13[1] == this)
                  {
                    v14 = v12;
                    *v11 = 0;
                    if (*(_DWORD *)v13 == 1)
                      WTF::fastFree((WTF *)v13, v8);
                    else
                      --*(_DWORD *)v13;
                    v12 = v14;
                  }
                  v11 += 2;
                  v12 -= 16;
                }
                while (v12);
              }
            }
            else
            {
              v15 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
              *(_OWORD *)(v15 + 72) = 0u;
              *(_OWORD *)(v15 + 56) = 0u;
            }
            if (dword_1ECE907D4)
            {
              v24 = (WebCore::ImageLoader ***)qword_1ECE907C8;
              v25 = 16 * dword_1ECE907D4;
              do
              {
                v26 = *v24;
                if (*v24 && v26[1] == this)
                {
                  *v24 = 0;
                  if (*(_DWORD *)v26 == 1)
                    WTF::fastFree((WTF *)v26, v8);
                  else
                    --*(_DWORD *)v26;
                }
                v24 += 2;
                v25 -= 16;
              }
              while (v25);
            }
            v10 = *((_BYTE *)this + 128) & 0xF9;
          }
          *((_BYTE *)this + 128) = v10 | 8;
          if (v27)
            v16 = (WebCore::CachedResource *)*((_QWORD *)v27 + 1);
          else
            v16 = 0;
          WebCore::CachedResource::removeClient(v16, (unsigned int **)this);
        }
      }
    }
  }
  else
  {
    v27 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v27, a2);
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EF5578);
    }
    v18 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v18 + 1;
    v19 = (*(_BYTE *)(v17 + 52) & 7) != 3 || (*(_BYTE *)(v17 + 53) & 1) == 0;
    if ((v19 || *(_BYTE *)(v17 + 233)) && (v23 = *(unsigned __int8 *)(v17 + 46), v23 != 48))
    {
      if (v23 == 70)
      {
        v20 = (uint64_t *)(v17 + 184);
      }
      else
      {
        if (v23 != 92)
        {
          if (v18 != -1)
          {
            *(_DWORD *)(v17 + 16) = v18;
            return;
          }
          goto LABEL_51;
        }
        v20 = (uint64_t *)(v17 + 232);
      }
    }
    else
    {
      v20 = (uint64_t *)(v17 + 224);
    }
    if (v18 != -1)
    {
      v21 = *v20;
      *(_DWORD *)(v17 + 16) = v18;
      if (v21)
      {
        ++*(_DWORD *)(v21 + 8);
        WebCore::RenderImageResource::resetAnimation((_QWORD *)v21);
        v22 = *(_DWORD *)(v21 + 8);
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195EF5598);
        }
        *(_DWORD *)(v21 + 8) = v22 - 1;
      }
      return;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x195EF55CCLL);
  }
}

void WebCore::ImageLoader::didUpdateCachedImage(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  char v12;
  char v13;
  uint64_t v14;
  WebCore::CachedResource *v15;
  WebCore::Element *v16;
  WebCore::Document *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::CachedResource *v26;
  WebCore::CachedResource *v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  void *v34;
  WebCore::LazyLoadImageObserver *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = (uint64_t *)(a1 + 24);
  v8 = (uint64_t)WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v49, (const WebCore::CachedResourceHandleBase *)(a1 + 24));
  v10 = *a3;
  if (*a3)
    v10 = *(_QWORD *)(v10 + 8);
  v11 = v49;
  if (v49)
    v11 = (unsigned int *)*((_QWORD *)v49 + 1);
  if ((unsigned int *)v10 != v11 || a2)
  {
    v12 = *(_BYTE *)(a1 + 128);
    v13 = v12 & 0xFE;
    *(_BYTE *)(a1 + 128) = v12 & 0xFE;
    if ((v12 & 2) != 0)
    {
      {
        v8 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
      }
      v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
      {
        v8 = WebCore::threadGlobalDataSlow((WebCore *)v8);
        v39 = v8;
      }
      v40 = *(_QWORD *)(v39 + 40);
      if (!v40)
      {
        v8 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v39);
        v40 = *(_QWORD *)(v39 + 40);
      }
      if (dword_1ECE907C4)
      {
        v43 = (uint64_t *)qword_1ECE907B8;
        v44 = 16 * dword_1ECE907C4;
        do
        {
          v8 = *v43;
          if (*v43 && *(_QWORD *)(v8 + 8) == a1 && v43[1] == *(_QWORD *)(v40 + 1104))
          {
            v47 = v40;
            *v43 = 0;
            if (*(_DWORD *)v8 == 1)
              v8 = WTF::fastFree((WTF *)v8, v9);
            else
              --*(_DWORD *)v8;
            v40 = v47;
          }
          v43 += 2;
          v44 -= 16;
        }
        while (v44);
      }
      if (dword_1ECE907D4)
      {
        v45 = (uint64_t *)qword_1ECE907C8;
        v46 = 16 * dword_1ECE907D4;
        do
        {
          v8 = *v45;
          if (*v45 && *(_QWORD *)(v8 + 8) == a1 && v45[1] == *(_QWORD *)(v40 + 1104))
          {
            v48 = v40;
            *v45 = 0;
            if (*(_DWORD *)v8 == 1)
              v8 = WTF::fastFree((WTF *)v8, v9);
            else
              --*(_DWORD *)v8;
            v40 = v48;
          }
          v45 += 2;
          v46 -= 16;
        }
        while (v46);
      }
      v13 = *(_BYTE *)(a1 + 128) & 0xFD;
      *(_BYTE *)(a1 + 128) = v13;
    }
    v14 = *a3;
    if ((v13 & 4) != 0)
    {
      if (!v14)
        goto LABEL_88;
      if (!*(_QWORD *)(v14 + 8))
        goto LABEL_10;
      {
        v8 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
      }
      v42 = WebCore::eventNames((WebCore *)v8);
      WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::cancelEvent(a1, (_QWORD *)(v42 + 784));
      *(_BYTE *)(a1 + 128) &= ~4u;
      v14 = *a3;
    }
    if (v14)
    {
LABEL_10:
      v15 = *(WebCore::CachedResource **)(v14 + 8);
LABEL_11:
      WebCore::CachedResourceHandleBase::setResource(v7, v15);
      if ((*(_WORD *)(v6 + 3358) & 4) != 0)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = *a3;
        if (*a3)
          LODWORD(v18) = *(_QWORD *)(v18 + 8) != 0;
      }
      v19 = *(_BYTE *)(a1 + 128) & 0xFE | v18;
      *(_BYTE *)(a1 + 128) = v19;
      v20 = *a3;
      if (*a3)
        LOBYTE(v20) = 2 * (*(_QWORD *)(v20 + 8) != 0);
      v21 = v20 | v19 & 0xFD;
      *(_BYTE *)(a1 + 128) = v21;
      if (*a3 && *(_QWORD *)(*a3 + 8))
        v22 = 0;
      else
        v22 = 8;
      v23 = v22 | v21 & 0xF7;
      *(_BYTE *)(a1 + 128) = v23;
      if (*a3 && *(_QWORD *)(*a3 + 8))
      {
        if ((*(_WORD *)(v6 + 3358) & 4) != 0
          || (_DWORD)v18
          && *v7
          && *(_QWORD *)(*v7 + 8)
          && (v24 = *(_QWORD *)(a1 + 16),
              v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 40) + 8),
              *(_QWORD *)(v25 + 1944))
          && !*(_BYTE *)(v25 + 3405)
          && (*(_BYTE *)(a1 + 128) = v23 & 0xFE, (*(_BYTE *)(*(_QWORD *)(v24 + 8) + 22) & 8) != 0))
        {
          WebCore::ImageLoader::updateRenderer((WebCore::ImageLoader *)a1);
        }
        if (*(_BYTE *)(a1 + 129) == 1)
          WebCore::LazyLoadImageObserver::observe(*(WebCore::LazyLoadImageObserver **)(*(_QWORD *)(a1 + 16) + 8), v16);
        if (*a3)
          v26 = *(WebCore::CachedResource **)(*a3 + 8);
        else
          v26 = 0;
        if (WebCore::CachedResource::addClientToSet(v26, (WebCore::CachedResourceClient *)a1))
          (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v26 + 88))(v26, a1);
      }
      else
      {
        v35 = *(WebCore::LazyLoadImageObserver **)(*(_QWORD *)(a1 + 16) + 8);
        v36 = *(_QWORD *)(*((_QWORD *)v35 + 5) + 8);
        v37 = *(_DWORD *)(v36 + 24);
        *(_DWORD *)(v36 + 24) = v37 + 2;
        if (*(unsigned __int8 *)(a1 + 129) - 1 <= 1)
        {
          WebCore::LazyLoadImageObserver::unobserve(v35, (WebCore::Element *)v36, v17);
          v37 = *(_DWORD *)(v36 + 24) - 2;
        }
        *(_BYTE *)(a1 + 129) = 0;
        if (v37)
        {
          *(_DWORD *)(v36 + 24) = v37;
        }
        else if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v36);
        }
      }
      if (v49)
      {
        v27 = (WebCore::CachedResource *)*((_QWORD *)v49 + 1);
        if (v27)
        {
          WebCore::CachedResource::removeClient(v27, (unsigned int **)a1);
          WebCore::ImageLoader::updateRenderer((WebCore::ImageLoader *)a1);
        }
      }
      goto LABEL_37;
    }
LABEL_88:
    v15 = 0;
    goto LABEL_11;
  }
LABEL_37:
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (!v28)
    goto LABEL_49;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EF59DCLL);
  }
  v29 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v29 + 1;
  v30 = (*(_BYTE *)(v28 + 52) & 7) != 3 || (*(_BYTE *)(v28 + 53) & 1) == 0;
  if ((v30 || *(_BYTE *)(v28 + 233)) && (v41 = *(unsigned __int8 *)(v28 + 46), v41 != 48))
  {
    if (v41 == 70)
    {
      v31 = (uint64_t *)(v28 + 184);
    }
    else
    {
      if (v41 != 92)
      {
        if (v29 != -1)
        {
          *(_DWORD *)(v28 + 16) = v29;
          goto LABEL_49;
        }
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x195EF5A30);
      }
      v31 = (uint64_t *)(v28 + 232);
    }
  }
  else
  {
    v31 = (uint64_t *)(v28 + 224);
  }
  if (v29 == -1)
    goto LABEL_82;
  v32 = *v31;
  *(_DWORD *)(v28 + 16) = v29;
  if (v32)
  {
    ++*(_DWORD *)(v32 + 8);
    WebCore::RenderImageResource::resetAnimation((_QWORD *)v32);
    v33 = *(_DWORD *)(v32 + 8);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x195EF59FCLL);
    }
    *(_DWORD *)(v32 + 8) = v33 - 1;
  }
LABEL_49:
  WebCore::ImageLoader::updatedHasPendingEvent(a1);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v49, v34);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

WebCore::CachedResourceLoader **WTF::Ref<WebCore::CachedResourceLoader,WTF::RawPtrTraits<WebCore::CachedResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::CachedResourceLoader>>::~Ref(WebCore::CachedResourceLoader **a1, void *a2)
{
  WebCore::CachedResourceLoader *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::ImageLoader::clearFailedLoadURL(WebCore::ImageLoader *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::cancelEvent(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (dword_1ECE907C4)
  {
    v2 = qword_1ECE907B8;
    v3 = 16 * dword_1ECE907C4;
    do
    {
      v4 = *(WTF **)v2;
      if (*(_QWORD *)v2 && *((_QWORD *)v4 + 1) == result && *(_QWORD *)(v2 + 8) == *a2)
      {
        *(_QWORD *)v2 = 0;
        if (*(_DWORD *)v4 == 1)
        {
          v14 = result;
          v10 = v3;
          v12 = a2;
          v8 = v2;
          WTF::fastFree(v4, a2);
          v2 = v8;
          v3 = v10;
          result = v14;
          a2 = v12;
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      v2 += 16;
      v3 -= 16;
    }
    while (v3);
  }
  if (dword_1ECE907D4)
  {
    v5 = qword_1ECE907C8;
    v6 = 16 * dword_1ECE907D4;
    do
    {
      v7 = *(WTF **)v5;
      if (*(_QWORD *)v5 && *((_QWORD *)v7 + 1) == result && *(_QWORD *)(v5 + 8) == *a2)
      {
        *(_QWORD *)v5 = 0;
        if (*(_DWORD *)v7 == 1)
        {
          v15 = result;
          v11 = v6;
          v13 = a2;
          v9 = v5;
          WTF::fastFree(v7, a2);
          v5 = v9;
          v6 = v11;
          result = v15;
          a2 = v13;
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

void WebCore::ImageLoader::updateRenderer(WebCore::ImageLoader *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  unsigned int *v16;
  _BYTE v17[24];
  unsigned int **v18;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (!v1)
    return;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EF5EFCLL);
  }
  v2 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v2 + 1;
  v3 = (*(_BYTE *)(v1 + 52) & 7) != 3 || (*(_BYTE *)(v1 + 53) & 1) == 0;
  if ((v3 || *(_BYTE *)(v1 + 233)) && (v15 = *(unsigned __int8 *)(v1 + 46), v15 != 48))
  {
    if (v15 == 70)
    {
      v4 = (uint64_t *)(v1 + 184);
    }
    else
    {
      if (v15 != 92)
      {
        if (v2 != -1)
        {
          *(_DWORD *)(v1 + 16) = v2;
          return;
        }
LABEL_39:
        __break(0xC471u);
        JUMPOUT(0x195EF5F50);
      }
      v4 = (uint64_t *)(v1 + 232);
    }
  }
  else
  {
    v4 = (uint64_t *)(v1 + 224);
  }
  if (v2 == -1)
    goto LABEL_39;
  v5 = *v4;
  *(_DWORD *)(v1 + 16) = v2;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8) + 1;
    *(_DWORD *)(v5 + 8) = v6;
    v7 = *(_QWORD *)(v5 + 24);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v9 = *((_QWORD *)this + 3);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    if (v10 != v8 && (!v8 || (*((_BYTE *)this + 128) & 8) != 0))
    {
      if (v9)
      {
        do
          v11 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v11 + 1, (unsigned int *)v9));
        v16 = (unsigned int *)v9;
        v12 = *(_QWORD *)(v9 + 8);
        if (v12)
        {
          v18 = &v16;
          ++*(_DWORD *)(v12 + 548);
          v13 = *(_QWORD *)(v12 + 488);
          if (v13)
          {
            if (*(_QWORD *)(v13 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), (uint64_t *)&v18, (uint64_t)v17);
          }
        }
      }
      else
      {
        v16 = 0;
      }
      WebCore::RenderImageResource::setCachedImage((_QWORD *)v5, (uint64_t *)&v16);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v16, v14);
      v6 = *(_DWORD *)(v5 + 8);
    }
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195EF5F1CLL);
    }
    *(_DWORD *)(v5 + 8) = v6 - 1;
  }
}

WTF::StringImpl *WebCore::ImageLoader::updateFromElementIgnoringPreviousError(uint64_t a1, WTF::StringImpl *a2)
{
  int v2;
  _DWORD *v4;
  WTF::StringImpl *v5;

  v2 = (int)a2;
  v4 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WebCore::ImageLoader::updateFromElement(a1, v2);
}

void WebCore::ImageLoader::updateFromElementIgnoringPreviousErrorToSameValue(WebCore::ImageLoader *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  double Metrics;
  WTF::StringImpl *v11;
  void *v12;
  _BYTE v13[128];
  unsigned int *v14;

  v2 = (WebCore::ImageLoader *)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (*(_BYTE *)(v4 + 131) & 4) != 0
    || (v5 = *((_QWORD *)this + 12)) != 0 && *(_DWORD *)(v5 + 4)
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8) + 392))
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v6 += 2;
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v2);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebCore::ImageLoader::updateFromElement((uint64_t)this, 1);
  }
  else if ((*((_BYTE *)this + 128) & 2) == 0)
  {
    v8 = *((_QWORD *)this + 13);
    if (!v8 || !*(_DWORD *)(v8 + 4))
    {
      *((_BYTE *)this + 128) |= 2u;
      WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v14, v2);
      if (v14)
        v9 = *((_QWORD *)v14 + 1);
      else
        v9 = 0;
      Metrics = WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v13);
      (*(void (**)(WebCore::ImageLoader *, uint64_t, _BYTE *, _QWORD, double))(*(_QWORD *)this + 16))(this, v9, v13, 0, Metrics);
      WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v13, v11);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v12);
    }
  }
}

void WebCore::ImageLoader::notifyFinished(WebCore::ImageLoader *this, WTF::StringImpl *a2)
{
  uint64_t Ref;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  Ref = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (Ref)
  {
    if (*(_DWORD *)Ref == 2)
      Ref = WTF::StringImpl::destroy((WTF::StringImpl *)Ref, a2);
    else
      *(_DWORD *)Ref -= 2;
  }
  if (*((unsigned __int8 *)this + 129) - 1 <= 1)
  {
    v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    *(_DWORD *)(v15 + 24) += 2;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
    *(_DWORD *)(v16 + 24) += 2;
    v17 = *(uint64_t **)(v16 + 1576);
    if (!v17)
    {
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v18 = 0;
      v30 = v18;
      std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100]((WTF **)(v16 + 1576), &v30);
      std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](&v30, v19);
      v17 = *(uint64_t **)(v16 + 1576);
    }
    Ref = *v17;
    if (*v17)
      Ref = WebCore::IntersectionObserver::unobserve((uint64_t **)Ref, (WebCore::Element *)v15);
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    *((_BYTE *)this + 129) = 3;
  }
  v4 = *((_BYTE *)this + 128);
  v5 = v4 | 8;
  *((_BYTE *)this + 128) = v4 | 8;
  if ((v4 & 1) == 0)
  {
    WebCore::ImageLoader::updateRenderer(this);
    v5 = *((_BYTE *)this + 128);
  }
  if ((v5 & 2) != 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v7 = *(_QWORD *)(v6 + 400);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 380) != 2)
        goto LABEL_10;
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v30);
      v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (word_1EE2F7DC4 != 2)
      {
LABEL_10:
        v8 = *(_QWORD *)(v6 + 400);
        if (v8)
        {
          v9 = (uint64_t *)(v8 + 320);
        }
        else
        {
          std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v30);
          v9 = &WebCore::CachedResource::resourceError(void)const::emptyError;
        }
        v10 = *((unsigned __int8 *)v9 + 60);
        v11 = *((_DWORD *)this + 31);
        if (v10 == 3)
        {
          if (v11)
            WebCore::rejectPromises((uint64_t)this + 112, (WTF::StringImpl *)"Loading was canceled.", 22);
          *((_BYTE *)this + 128) &= ~2u;
          WebCore::ImageLoader::updatedHasPendingEvent((uint64_t)this);
        }
        else
        {
          if (v11)
            Ref = (uint64_t)WebCore::ImageLoader::decode(this, a2);
          {
            Ref = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
            *(_OWORD *)(Ref + 72) = 0u;
            *(_OWORD *)(Ref + 56) = 0u;
          }
          v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
            v13 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
          v14 = *(_QWORD *)(v13 + 40);
          if (!v14)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
            v14 = *(_QWORD *)(v13 + 40);
          }
          WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon((uint64_t)&WebCore::loadEventSender(void)::sender, this, (WTF::StringImpl **)(v14 + 1104));
        }
        return;
      }
    }
    if ((*(_BYTE *)(v6 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 160));
      *(_BYTE *)(v6 + 344) |= 1u;
    }
    v20 = *(WTF::StringImpl **)(v6 + 160);
    if (v20)
      *(_DWORD *)v20 += 2;
    WebCore::ImageLoader::clearImageWithoutConsideringPendingLoadEvent(this, a2);
    *((_BYTE *)this + 128) |= 4u;
    {
      v21 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
      *(_OWORD *)(v21 + 72) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
    }
    v22 = WebCore::eventNames((WebCore *)v21);
    WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon((uint64_t)&WebCore::loadEventSender(void)::sender, this, (WTF::StringImpl **)(v22 + 784));
    if (v20)
      *(_DWORD *)v20 += 2;
    v29 = v20;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Cannot load image ", 19, (uint64_t *)&v29, (int8x16_t *)" due to access control checks.", 31, &v30);
    v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8);
    *(_DWORD *)(v25 + 24) += 2;
    v28 = v25;
    WebCore::Document::addConsoleMessage((_QWORD *)v25, 8, 2, &v30, 0);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v28);
    if (*((_DWORD *)this + 31))
      WebCore::rejectPromises((uint64_t)this + 112, (WTF::StringImpl *)"Access control error.", 22);
    WebCore::ImageLoader::updatedHasPendingEvent((uint64_t)this);
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v26);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

WTF *WebCore::ImageLoader::decode(WebCore::ImageLoader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *result;
  WTF *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18[2];

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8) + 696))
  {
    v12 = (char *)this + 112;
    v13 = "Inactive document.";
    v14 = 19;
    return (WTF *)WebCore::rejectPromises((uint64_t)v12, (WTF::StringImpl *)v13, v14);
  }
  v3 = *((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_23;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_23;
  if ((*(_WORD *)(v4 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v4 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v18);
    v15 = (unsigned int *)v18[0];
    if (v18[0])
    {
      v11 = (WTF *)*((_QWORD *)v18[0] + 1);
      v18[0] = 0;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    if (*(_QWORD *)(v4 + 688))
      goto LABEL_6;
    {
      v11 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v18);
      v11 = v18[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v18[0];
    }
  }
  if (!v11)
  {
LABEL_23:
    v12 = (char *)this + 112;
    v13 = "Loading error.";
    v14 = 15;
    return (WTF *)WebCore::rejectPromises((uint64_t)v12, (WTF::StringImpl *)v13, v14);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
LABEL_6:
    v5 = *(_QWORD *)(v3 + 8);
    if ((*(_WORD *)(v5 + 557) >> 5) - 3 > 1)
      goto LABEL_7;
    goto LABEL_23;
  }
  if ((MEMORY[0x22D] >> 5) - 3 < 2)
    goto LABEL_23;
  v5 = 0;
LABEL_7:
  v6 = *(WTF **)(v5 + 688);
  if (!v6)
  {
    {
      v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v18);
      v6 = v18[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v18[0];
    }
    if (!v6)
      return (WTF *)WebCore::resolvePromises((uint64_t)this + 112, a2);
  }
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 16))(v6) & 1) == 0)
    return (WTF *)WebCore::resolvePromises((uint64_t)this + 112, a2);
  ++*((_DWORD *)v6 + 2);
  v7 = *((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = &off_1E33F6538;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  v18[0] = v9;
  (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v6 + 8) + 96))(*((_QWORD *)v6 + 8), v18);
  result = v18[0];
  v18[0] = 0;
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  if (*((_DWORD *)v6 + 2) == 1)
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
  --*((_DWORD *)v6 + 2);
  return result;
}

uint64_t WebCore::ImageLoader::decode(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v3 = result;
  v4 = (void **)(result + 112);
  v5 = *(unsigned int *)(result + 124);
  if ((_DWORD)v5 == *(_DWORD *)(result + 120))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *v4;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 120) = v8;
    *(_QWORD *)(v3 + 112) = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*v4 == v9)
      {
        *(_QWORD *)(v3 + 112) = 0;
        *(_DWORD *)(v3 + 120) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *(unsigned int *)(v3 + 124);
    v12 = (_QWORD *)(*(_QWORD *)(v3 + 112) + 8 * v5);
  }
  else
  {
    v12 = (char *)*v4 + 8 * v5;
  }
  v13 = *a2;
  *a2 = 0;
  *v12 = v13;
  *(_DWORD *)(v3 + 124) = v5 + 1;
  v14 = *(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
  if (!*(_QWORD *)(*(_QWORD *)(v14[5] + 8) + 696))
    return WebCore::rejectPromises((uint64_t)v4, (WTF::StringImpl *)"Inactive document.", 19);
  result = (*(uint64_t (**)(_QWORD *))(*v14 + 640))(v14);
  v16 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v17 = *(unsigned int *)(v16 + 4);
    *(_DWORD *)v16 += 2;
    v18 = *(unsigned __int8 **)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        while (1)
        {
          v19 = *v18;
          v20 = v19 > 0x20;
          v21 = (1 << v19) & 0x100003600;
          if (v20 || v21 == 0)
            break;
          ++v18;
          if (!--v17)
            goto LABEL_20;
        }
LABEL_39:
        if ((*(_BYTE *)(v3 + 128) & 8) != 0)
          result = (uint64_t)WebCore::ImageLoader::decode((WebCore::ImageLoader *)v3, v15);
        goto LABEL_21;
      }
    }
    else if ((_DWORD)v17)
    {
      v23 = 2 * v17;
      do
      {
        v24 = *(unsigned __int16 *)v18;
        v20 = v24 > 0x20;
        v25 = (1 << v24) & 0x100003600;
        if (v20 || v25 == 0)
          goto LABEL_39;
        v18 += 2;
        v23 -= 2;
      }
      while (v23);
    }
  }
LABEL_20:
  result = WebCore::rejectPromises((uint64_t)v4, (WTF::StringImpl *)"Missing source URL.", 20);
LABEL_21:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v16, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

uint64_t WebCore::ImageLoader::dispatchPendingErrorEvent(uint64_t this, void *a2)
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(_BYTE *)(this + 128) & 4) != 0)
  {
    v2 = this;
    *(_BYTE *)(this + 128) &= ~4u;
    {
      this = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
      *(_OWORD *)(this + 72) = 0u;
      *(_OWORD *)(this + 56) = 0u;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_QWORD *)(StatusReg + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    {
      this = WebCore::threadGlobalDataSlow((WebCore *)this);
      v5 = this;
    }
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    if (dword_1ECE907C4)
    {
      v17 = (uint64_t *)qword_1ECE907B8;
      v18 = 16 * dword_1ECE907C4;
      do
      {
        this = *v17;
        if (*v17 && *(_QWORD *)(this + 8) == v2 && v17[1] == *(_QWORD *)(v6 + 784))
        {
          *v17 = 0;
          if (*(_DWORD *)this == 1)
          {
            v21 = v6;
            this = WTF::fastFree((WTF *)this, a2);
            v6 = v21;
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
        v17 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    if (dword_1ECE907D4)
    {
      v19 = (uint64_t *)qword_1ECE907C8;
      v20 = 16 * dword_1ECE907D4;
      do
      {
        this = *v19;
        if (*v19 && *(_QWORD *)(this + 8) == v2 && v19[1] == *(_QWORD *)(v6 + 784))
        {
          *v19 = 0;
          if (*(_DWORD *)this == 1)
          {
            v22 = v6;
            this = WTF::fastFree((WTF *)this, a2);
            v6 = v22;
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
        v19 += 2;
        v20 -= 16;
      }
      while (v20);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
    if (*(_QWORD *)(v8 + 1944) && !*(_BYTE *)(v8 + 3405))
    {
      *(_DWORD *)(v7 + 24) += 2;
      v9 = *(_QWORD *)(StatusReg + 736);
      if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
        v10 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v11 = *(_QWORD *)(v10 + 40);
      if (!v11)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
        v11 = *(_QWORD *)(v10 + 40);
      }
      v12 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
      *(_QWORD *)v12 = off_1E33A4B48;
      *(_QWORD *)(v12 + 8) = 0;
      v14 = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x1E8200;
      v15 = *(_QWORD *)(v11 + 784) != 0;
      *(_DWORD *)(v12 + 16) = 1;
      *(_DWORD *)(v12 + 20) = v14 | v15;
      v16 = *(_DWORD **)(v11 + 784);
      if (v16)
        *v16 += 2;
      *(_QWORD *)(v12 + 24) = v16;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = v13;
      *(_QWORD *)(v12 + 64) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v12);
      if (*(_DWORD *)(v12 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      else
        --*(_DWORD *)(v12 + 16);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    return WebCore::ImageLoader::updatedHasPendingEvent(v2);
  }
  return this;
}

uint64_t WebCore::ImageLoader::elementDidMoveToNewDocument(WebCore::ImageLoader *this, WebCore::Document *a2)
{
  void *v4;
  uint64_t result;
  WebCore::Document *v6;

  WebCore::ImageLoader::clearFailedLoadURL(this, a2);
  WebCore::ImageLoader::clearImageWithoutConsideringPendingLoadEvent(this, v4);
  result = WebCore::ImageLoader::updatedHasPendingEvent((uint64_t)this);
  if (*((unsigned __int8 *)this + 129) - 1 <= 1)
    result = (uint64_t)WebCore::LazyLoadImageObserver::unobserve(*(WebCore::LazyLoadImageObserver **)(*((_QWORD *)this + 2) + 8), a2, v6);
  *((_BYTE *)this + 129) = 0;
  return result;
}

uint64_t WebCore::ImageLoader::shouldIgnoreCandidateWhenLoadingFromArchive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Page *v20;
  WTF::StringImpl *v21[5];
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[5];
  uint64_t v25;

  if (*(_DWORD *)(a2 + 32) == 1)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v25 = v4;
  v5 = *(_QWORD *)(v4 + 528);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88)) != 0
    && *(_QWORD *)(v6 + 296) == v4)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 1;
    if (*(_QWORD *)(v7 + 2656))
    {
      WTF::StringViewWithUnderlyingString::toString(&v22, a2);
      v21[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v21);
      WebCore::Element::resolveURLStringIfNeeded(v3, &v22, 2, v21, &v23);
      MEMORY[0x19AEA52D4](v24, &v23, 0);
      v12 = v23;
      v23 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v21[0];
      v21[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v22;
      v22 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (WebCore::DocumentLoader::archiveResourceForURL((WebCore::DocumentLoader *)v7, v24, v11))
      {
        v2 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v4 + 528);
        if (v17
          && (v18 = *(_QWORD *)(v17 + 8)) != 0
          && (v19 = *(_QWORD *)(v18 + 24)) != 0
          && (v20 = *(WebCore::Page **)(v19 + 8)) != 0)
        {
          ++*(_DWORD *)v20;
          v2 = WebCore::Page::allowsLoadFromURL((uint64_t)v20, (WTF::URL *)v24, 0) ^ 1;
          WTF::RefCounted<WebCore::Page>::deref(v20);
        }
        else
        {
          v2 = 1;
        }
      }
      v16 = v24[0];
      v24[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v8 = *(_DWORD *)(v7 + 24) - 1;
    }
    else
    {
      v2 = 0;
    }
    if (v8)
      *(_DWORD *)(v7 + 24) = v8;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    v2 = 0;
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v25);
  return v2;
}

_QWORD *WTF::StringViewWithUnderlyingString::toString(_QWORD *this, uint64_t a2)
{
  int v2;
  _DWORD *v3;

  v2 = *(_DWORD *)(a2 + 16);
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    if (v2 == v3[1])
    {
      *v3 += 2;
LABEL_4:
      *this = v3;
      return this;
    }
  }
  else if (!v2)
  {
    goto LABEL_4;
  }
  if (*(_BYTE *)(a2 + 20))
    return (_QWORD *)WTF::String::String();
  else
    return (_QWORD *)WTF::String::String();
}

uint64_t WebCore::LinkHeader::setValue(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch((int)a2)
  {
    case 0:
      if (!*(_QWORD *)(result + 8))
      {
        v13 = *a3;
        *a3 = 0;
        v4 = *(WTF::StringImpl **)(result + 8);
        *(_QWORD *)(result + 8) = v13;
        if (v4)
          goto LABEL_24;
      }
      break;
    case 1:
      *(_BYTE *)(result + 88) = 0;
      break;
    case 3:
      v3 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 32);
      *(_QWORD *)(result + 32) = v3;
      if (v4)
        goto LABEL_24;
      break;
    case 4:
      v5 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 24);
      *(_QWORD *)(result + 24) = v5;
      if (v4)
        goto LABEL_24;
      break;
    case 8:
      v6 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 40);
      *(_QWORD *)(result + 40) = v6;
      if (v4)
        goto LABEL_24;
      break;
    case 9:
      v7 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 16);
      *(_QWORD *)(result + 16) = v7;
      if (v4)
        goto LABEL_24;
      break;
    case 10:
      v8 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 48);
      *(_QWORD *)(result + 48) = v8;
      if (v4)
        goto LABEL_24;
      break;
    case 11:
      v9 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 56);
      *(_QWORD *)(result + 56) = v9;
      if (v4)
        goto LABEL_24;
      break;
    case 12:
      v10 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 64);
      *(_QWORD *)(result + 64) = v10;
      if (v4)
        goto LABEL_24;
      break;
    case 13:
      v11 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 72);
      *(_QWORD *)(result + 72) = v11;
      if (v4)
        goto LABEL_24;
      break;
    case 14:
      v12 = *a3;
      *a3 = 0;
      v4 = *(WTF::StringImpl **)(result + 80);
      *(_QWORD *)(result + 80) = v12;
      if (v4)
      {
LABEL_24:
        if (*(_DWORD *)v4 == 2)
          result = WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      break;
    default:
      return result;
  }
  return result;
}

void WebCore::LinkHeaderSet::LinkHeaderSet(WebCore::LinkHeaderSet *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  unsigned int v75;
  unsigned __int16 *j;
  unsigned __int16 *v77;
  int v78;
  BOOL v79;
  WTF::StringImpl *v80;
  unsigned __int16 *v81;
  int v82;
  unsigned __int16 *v84;
  int v85;
  unsigned __int16 v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  char v94;
  unsigned __int16 *v95;
  unsigned __int16 *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  WTF::StringImpl **v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  int v153;
  const WTF::String *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  int v167;
  int v168;
  char v169;
  unsigned __int8 *i;
  unsigned __int8 *v171;
  int v172;
  WTF::StringImpl *v174;
  unsigned int v175;
  int v176;
  int v178;
  const WTF::String *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  char v184;
  unsigned __int8 *v185;
  int v186;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  WTF::StringImpl *v190[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  WTF::StringImpl *v195;
  char v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((_DWORD)v5)
      {
        while (1)
        {
          v195 = 0;
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          *(_OWORD *)v190 = 0u;
          v196 = 1;
          v99 = 0;
          v100 = v4 + v5;
          v101 = v4 + 1;
          v102 = v5 - 1;
          v103 = v5 - 1;
          while (1)
          {
            v104 = *(unsigned __int8 *)(v4 + v99);
            if (v104 != 9 && v104 != 32)
              break;
            ++v99;
            ++v101;
            --v103;
            if (v5 == v99)
              goto LABEL_231;
          }
          if (v104 == 60)
            break;
          v196 = 0;
          while (*(_BYTE *)(v101 - 1) != 44)
          {
            ++v101;
            if (--v103 == -1)
            {
              v5 = 0;
              v4 = v100;
              goto LABEL_233;
            }
          }
          v5 = v103;
          v4 = v101;
LABEL_233:
          v111 = *((unsigned int *)this + 3);
          if ((_DWORD)v111 == *((_DWORD *)this + 2))
          {
            v112 = (_QWORD *)WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v111 + 1, (unint64_t)v190);
            v113 = (char *)(v112 + 11);
            LODWORD(v111) = *((_DWORD *)this + 3);
            v114 = (_QWORD *)(*(_QWORD *)this + 96 * v111);
            v115 = *v112;
            *v112 = 0;
            *v114 = v115;
            v116 = v112[1];
            v112[1] = 0;
            v114[1] = v116;
            v117 = v112[2];
            v112[2] = 0;
            v114[2] = v117;
            v118 = v112[3];
            v112[3] = 0;
            v114[3] = v118;
            v119 = v112[4];
            v112[4] = 0;
            v114[4] = v119;
            v120 = v112[5];
            v112[5] = 0;
            v114[5] = v120;
            v121 = v112[6];
            v112[6] = 0;
            v114[6] = v121;
            v122 = v112[7];
            v112[7] = 0;
            v114[7] = v122;
            v123 = v112[8];
            v112[8] = 0;
            v114[8] = v123;
            v124 = v112[9];
            v112[9] = 0;
            v114[9] = v124;
            v125 = v112[10];
            v112[10] = 0;
            v114[10] = v125;
            v126 = (char *)(v114 + 11);
          }
          else
          {
            v127 = (WTF::StringImpl **)(*(_QWORD *)this + 96 * v111);
            v128 = v190[0];
            v190[0] = 0;
            *v127 = v128;
            v129 = v190[1];
            v190[1] = 0;
            v127[1] = v129;
            v130 = (WTF::StringImpl *)v191;
            *(_QWORD *)&v191 = 0;
            v127[2] = v130;
            v131 = (WTF::StringImpl *)*((_QWORD *)&v191 + 1);
            *((_QWORD *)&v191 + 1) = 0;
            v127[3] = v131;
            v132 = (WTF::StringImpl *)v192;
            *(_QWORD *)&v192 = 0;
            v127[4] = v132;
            v133 = (WTF::StringImpl *)*((_QWORD *)&v192 + 1);
            *((_QWORD *)&v192 + 1) = 0;
            v127[5] = v133;
            v134 = (WTF::StringImpl *)v193;
            *(_QWORD *)&v193 = 0;
            v127[6] = v134;
            v135 = (WTF::StringImpl *)*((_QWORD *)&v193 + 1);
            *((_QWORD *)&v193 + 1) = 0;
            v127[7] = v135;
            v136 = (WTF::StringImpl *)v194;
            *(_QWORD *)&v194 = 0;
            v127[8] = v136;
            v137 = (WTF::StringImpl *)*((_QWORD *)&v194 + 1);
            *((_QWORD *)&v194 + 1) = 0;
            v127[9] = v137;
            v138 = v195;
            v195 = 0;
            v127[10] = v138;
            v126 = (char *)(v127 + 11);
            v113 = &v196;
          }
          *v126 = *v113;
          *((_DWORD *)this + 3) = v111 + 1;
          WebCore::LinkHeader::~LinkHeader((WebCore::LinkHeader *)v190, a2);
          if (!v5)
            return;
        }
        if (v102 == v99)
        {
          v4 += v99 + 1;
        }
        else
        {
          while (1)
          {
            v105 = *(unsigned __int8 *)(v4 + 1 + v99);
            if (v105 != 9 && v105 != 32)
              break;
            if (v102 == ++v99)
              goto LABEL_231;
          }
          if (v105 == 62)
          {
            v106 = v4 + v99 + 1;
            v107 = v102 - v99;
LABEL_228:
            v100 = v106 + v107;
            v109 = (unsigned __int8 *)(v106 + 1);
            v110 = 1 - v107;
            while (*(v109 - 1) != 62)
            {
              ++v109;
              if (++v110 == 1)
                goto LABEL_231;
            }
            if (~v4 + v106 - v99 < 0)
            {
LABEL_400:
              __break(1u);
              return;
            }
            WTF::String::String();
            v139 = v198;
            if (v198)
              *(_DWORD *)v198 += 2;
            v140 = v190[0];
            v190[0] = v139;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2)
                WTF::StringImpl::destroy(v140, a2);
              else
                *(_DWORD *)v140 -= 2;
            }
            v5 = -v110;
LABEL_245:
            if (!v196)
            {
              if (!v5)
                goto LABEL_388;
              v188 = &v109[v5];
              ++v109;
              --v5;
              do
              {
                if (*(v109 - 1) == 44)
                  goto LABEL_388;
                ++v109;
                --v5;
              }
              while (v5 != -1);
              v5 = 0;
              goto LABEL_387;
            }
            if (!v5)
              goto LABEL_388;
            v141 = 0;
            v196 = 1;
            while (1)
            {
              v142 = v109[v141];
              if (v142 <= 0x1F)
              {
                if (v142 != 9)
                  goto LABEL_375;
              }
              else if (v142 != 32)
              {
                if (v142 != 59)
                {
                  if (v142 == 44)
                  {
                    v143 = v5 - v141;
                    v109 += v141;
                    goto LABEL_257;
                  }
LABEL_375:
                  v196 = 0;
                  v147 = v5 - v141;
                  v148 = &v109[v141];
LABEL_376:
                  v109 = &v148[v147];
                  v188 = v148 + 1;
                  v5 = v147 - 1;
                  while (*(v188 - 1) != 44)
                  {
                    ++v188;
                    if (--v5 == -1)
                      goto LABEL_381;
                  }
LABEL_387:
                  v109 = v188;
                  goto LABEL_388;
                }
                v109 += v141 + 1;
                if (v5 - 1 == v141)
                {
LABEL_381:
                  v5 = 0;
                  goto LABEL_388;
                }
                v143 = ~v141 + v5;
LABEL_257:
                v144 = 0;
                v145 = &v109[v143];
                v146 = (uint64_t)v109;
                v147 = v143;
                v148 = v109;
                while (1)
                {
                  v149 = *v148;
                  if (v149 != 9 && v149 != 32)
                    break;
                  ++v148;
                  ++v146;
                  ++v144;
                  if (!--v147)
                  {
                    v5 = 0;
LABEL_374:
                    v109 = v145;
                    goto LABEL_388;
                  }
                }
                if (v149 == 44)
                  goto LABEL_376;
                v150 = 0;
                v151 = v147 - 1;
                while (v149 - 48 < 0xA
                     || v149 - 94 < 0x1D
                     || v149 - 65 < 0x1A
                     || v149 <= 0x2E && ((1 << v149) & 0x685E00000000) != 0)
                {
                  if (v151 == v150)
                  {
                    v5 = 0;
                    v152 = 0;
                    v153 = (_DWORD)v109 + v143;
                    goto LABEL_274;
                  }
                  v149 = v148[++v150];
                  ++v144;
                }
                v153 = (_DWORD)v148 + v150;
                while (1)
                {
                  v176 = v109[v144];
                  if (v176 != 32 && v176 != 9)
                    break;
                  if (v143 == ++v144)
                  {
                    v5 = 0;
                    v152 = 0;
                    goto LABEL_274;
                  }
                }
                v145 = &v109[v144];
                v152 = v176 == 61;
                if (v176 == 61)
                {
                  ++v145;
                  if (v143 - 1 != v144)
                  {
                    v5 = ~v144 + v143;
                    goto LABEL_366;
                  }
                  v5 = 0;
                  v152 = 1;
                }
                else
                {
                  v5 = v143 - v144;
LABEL_366:
                  v185 = &v145[v5];
                  while (1)
                  {
                    v186 = *v145;
                    if (v186 != 32 && v186 != 9)
                      break;
                    ++v145;
                    if (!--v5)
                    {
                      v145 = v185;
                      break;
                    }
                  }
                }
LABEL_274:
                v154 = (const WTF::String *)WebCore::parameterNameFromString(v146, (v153 - v146) | 0x100000000);
                a2 = v154;
                if (!v152)
                {
                  if (v5)
                  {
                    v159 = *v145;
                    if ((v159 == 59 || v159 == 44) && v154 >= 7)
                    {
                      v197 = 0;
                      goto LABEL_282;
                    }
                    v189 = &v145[v5];
                    ++v145;
                    --v5;
                    while (*(v145 - 1) != 44)
                    {
                      ++v145;
                      if (--v5 == -1)
                      {
                        v5 = 0;
                        v145 = v189;
                        break;
                      }
                    }
LABEL_398:
                    v196 = 0;
                    goto LABEL_374;
                  }
                  if (v154 < 7)
                  {
                    v5 = 0;
                    goto LABEL_398;
                  }
                  v5 = 0;
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  v158 = 0;
                  v197 = 0;
LABEL_317:
                  v109 = v145;
                  v161 = v145;
                  v162 = v145;
LABEL_319:
                  if (v145 != v162)
                    goto LABEL_343;
LABEL_320:
                  v174 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *(_DWORD *)v174 += 2;
                  v197 = v174;
                  if (a2 <= 6)
                    goto LABEL_350;
LABEL_355:
                  WebCore::LinkHeader::setValue((uint64_t)v190, a2, (uint64_t *)&v197);
                  v184 = 1;
                  v174 = v197;
                  goto LABEL_359;
                }
                v197 = 0;
                if (!v5)
                {
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  v158 = 0;
                  goto LABEL_317;
                }
LABEL_282:
                v160 = *v145;
                if (v160 != 39 && v160 != 34)
                {
                  v109 = &v145[v5];
                  for (i = v145; ; ++i)
                  {
                    if (v160 <= 0x3B && ((1 << v160) & 0x800100100000200) != 0)
                    {
                      v157 = 0;
                      v158 = 0;
                      v155 = v5;
                      v156 = v5;
                      v162 = i;
                      v161 = i;
                      goto LABEL_305;
                    }
                    if (!--v5)
                      break;
                    v175 = i[1];
                    v160 = v175;
                  }
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  v158 = 0;
                  v161 = v109;
                  v162 = v109;
                  goto LABEL_319;
                }
                v109 = v145 + 1;
                v155 = --v5;
                v161 = v145 + 1;
                v162 = v145 + 1;
                v156 = v5;
                v163 = v5;
                v164 = v5;
                v165 = v145 + 1;
                while (v164)
                {
                  if (*v165 != v160)
                  {
                    v166 = &v165[v164];
                    v109 = v165;
                    v5 = v164;
                    while (--v5)
                    {
                      v167 = *++v109;
                      v155 = v5;
                      v161 = v109;
                      v162 = v109;
                      v156 = v5;
                      v163 = v5;
                      v164 = v5;
                      v165 = v109;
                      if (v167 == v160)
                        goto LABEL_292;
                    }
                    v155 = 0;
                    v156 = 0;
                    v163 = 0;
                    v164 = 0;
                    v109 = v166;
                    v161 = v166;
                    v162 = v166;
                    v165 = v166;
                  }
LABEL_292:
                  v168 = *(v165 - 1);
                  if (v168 != 92)
                    v164 = v163;
                  if (v164)
                  {
                    if (*v165 == v160)
                    {
                      v5 = v164 - 1;
                      v109 = v165 + 1;
                      v155 = v164 - 1;
                      v161 = v165 + 1;
                      v162 = v165 + 1;
                      v156 = v164 - 1;
                      v163 = --v164;
                      ++v165;
                      v169 = 1;
                    }
                    else
                    {
                      v169 = 0;
                    }
                  }
                  else
                  {
                    v169 = 0;
                  }
                  if (v168 != 92 && (v169 & 1) != 0)
                  {
                    v157 = 1;
                    goto LABEL_303;
                  }
                }
                v157 = 0;
LABEL_303:
                v158 = 1;
                if (!v156)
                {
LABEL_318:
                  if (v157)
                    goto LABEL_343;
                  goto LABEL_319;
                }
                i = v109;
LABEL_305:
                v109 = &v162[v156];
                v171 = v162;
                do
                {
                  v172 = *v171;
                  if (v172 != 32 && v172 != 9)
                  {
                    v109 = i;
                    goto LABEL_318;
                  }
                  i = v171 + 1;
                  v161 = ++v171;
                  v5 = v156 - 1;
                  v79 = v156 == 1;
                  v155 = --v156;
                }
                while (!v79);
                v161 = v109;
                if (!v157)
                  goto LABEL_319;
LABEL_343:
                if (v156)
                {
                  v178 = *v161;
                  if (v178 != 44 && v178 != 59)
                    goto LABEL_320;
                }
                v179 = v154;
                if (&v162[-v157] - &v145[v158] < 0)
                  goto LABEL_400;
                v180 = v158;
                v181 = v157;
                WTF::String::String();
                v174 = v198;
                v197 = v198;
                a2 = v179;
                if (v179 > 6)
                  goto LABEL_355;
                if (v181)
                  goto LABEL_355;
                v155 = v5;
                if (((v180 ^ 1) & 1) != 0)
                  goto LABEL_355;
LABEL_350:
                if (v155)
                {
                  v182 = &v109[v155];
                  v183 = v109 + 1;
                  v5 = v155 - 1;
                  while (*(v183 - 1) != 44)
                  {
                    ++v183;
                    if (--v5 == -1)
                    {
                      v5 = 0;
                      goto LABEL_358;
                    }
                  }
                  v182 = v183;
                }
                else
                {
                  v182 = v109;
                }
LABEL_358:
                v184 = 0;
                v196 = 0;
                v109 = v182;
LABEL_359:
                v197 = 0;
                if (v174)
                {
                  if (*(_DWORD *)v174 == 2)
                    WTF::StringImpl::destroy(v174, a2);
                  else
                    *(_DWORD *)v174 -= 2;
                }
                if ((v184 & 1) == 0)
                {
LABEL_388:
                  if (v139)
                  {
                    if (*(_DWORD *)v139 == 2)
                      WTF::StringImpl::destroy(v139, a2);
                    else
                      *(_DWORD *)v139 -= 2;
                  }
                  v4 = (uint64_t)v109;
                  goto LABEL_233;
                }
                goto LABEL_245;
              }
              if (v5 == ++v141)
              {
                v109 += v5;
                goto LABEL_381;
              }
            }
          }
          v106 = v4 + v99 + 1;
          v107 = v102 - v99;
          while (--v107)
          {
            v108 = *(unsigned __int8 *)++v106;
            if (v108 == 62)
              goto LABEL_228;
          }
LABEL_231:
          v4 = v100;
        }
        v5 = 0;
        v196 = 0;
        goto LABEL_233;
      }
    }
    else if ((_DWORD)v5)
    {
      while (1)
      {
        v195 = 0;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        *(_OWORD *)v190 = 0u;
        v196 = 1;
        v6 = 0;
        v7 = 0;
        v8 = v4;
        v9 = v4 + 2 * v5;
        while (1)
        {
          v10 = *(unsigned __int16 *)(v4 + 2 * v7);
          if (v10 != 9 && v10 != 32)
            break;
          v8 += 2;
          ++v7;
          v6 += 2;
          if (v5 == v7)
          {
LABEL_16:
            v4 += 2 * v5;
            goto LABEL_26;
          }
        }
        if (v10 == 60)
          break;
        v196 = 0;
        v97 = v5 - v7;
        if (v10 == 44)
        {
LABEL_202:
          v5 = v97 - 1;
          v4 = v8 + 2;
        }
        else
        {
          while (--v97)
          {
            v98 = *(unsigned __int16 *)(v8 + 2);
            v8 += 2;
            if (v98 == 44)
              goto LABEL_202;
          }
          v5 = 0;
          v4 = v9;
        }
LABEL_27:
        v18 = *((unsigned int *)this + 3);
        if ((_DWORD)v18 == *((_DWORD *)this + 2))
        {
          v19 = (_QWORD *)WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v18 + 1, (unint64_t)v190);
          v20 = (char *)(v19 + 11);
          LODWORD(v18) = *((_DWORD *)this + 3);
          v21 = (_QWORD *)(*(_QWORD *)this + 96 * v18);
          v22 = *v19;
          *v19 = 0;
          *v21 = v22;
          v23 = v19[1];
          v19[1] = 0;
          v21[1] = v23;
          v24 = v19[2];
          v19[2] = 0;
          v21[2] = v24;
          v25 = v19[3];
          v19[3] = 0;
          v21[3] = v25;
          v26 = v19[4];
          v19[4] = 0;
          v21[4] = v26;
          v27 = v19[5];
          v19[5] = 0;
          v21[5] = v27;
          v28 = v19[6];
          v19[6] = 0;
          v21[6] = v28;
          v29 = v19[7];
          v19[7] = 0;
          v21[7] = v29;
          v30 = v19[8];
          v19[8] = 0;
          v21[8] = v30;
          v31 = v19[9];
          v19[9] = 0;
          v21[9] = v31;
          v32 = v19[10];
          v19[10] = 0;
          v21[10] = v32;
          v33 = (char *)(v21 + 11);
        }
        else
        {
          v34 = (WTF::StringImpl **)(*(_QWORD *)this + 96 * v18);
          v35 = v190[0];
          v190[0] = 0;
          *v34 = v35;
          v36 = v190[1];
          v190[1] = 0;
          v34[1] = v36;
          v37 = (WTF::StringImpl *)v191;
          *(_QWORD *)&v191 = 0;
          v34[2] = v37;
          v38 = (WTF::StringImpl *)*((_QWORD *)&v191 + 1);
          *((_QWORD *)&v191 + 1) = 0;
          v34[3] = v38;
          v39 = (WTF::StringImpl *)v192;
          *(_QWORD *)&v192 = 0;
          v34[4] = v39;
          v40 = (WTF::StringImpl *)*((_QWORD *)&v192 + 1);
          *((_QWORD *)&v192 + 1) = 0;
          v34[5] = v40;
          v41 = (WTF::StringImpl *)v193;
          *(_QWORD *)&v193 = 0;
          v34[6] = v41;
          v42 = (WTF::StringImpl *)*((_QWORD *)&v193 + 1);
          *((_QWORD *)&v193 + 1) = 0;
          v34[7] = v42;
          v43 = (WTF::StringImpl *)v194;
          *(_QWORD *)&v194 = 0;
          v34[8] = v43;
          v44 = (WTF::StringImpl *)*((_QWORD *)&v194 + 1);
          *((_QWORD *)&v194 + 1) = 0;
          v34[9] = v44;
          v45 = v195;
          v195 = 0;
          v34[10] = v45;
          v33 = (char *)(v34 + 11);
          v20 = &v196;
        }
        *v33 = *v20;
        *((_DWORD *)this + 3) = v18 + 1;
        WebCore::LinkHeader::~LinkHeader((WebCore::LinkHeader *)v190, a2);
        if (!v5)
          return;
      }
      if (v5 - 1 == v7)
      {
        v4 = v8 + 2;
        goto LABEL_26;
      }
      v11 = ~v7 + v5;
      while (1)
      {
        v12 = *(unsigned __int16 *)(v4 + 2 + v6);
        if (v12 != 9 && v12 != 32)
          break;
        v6 += 2;
        if (!--v11)
          goto LABEL_16;
      }
      if (v12 != 62)
      {
        v14 = 2 * v5 + v4;
        v13 = v4 + v6 + 2;
        while (--v11)
        {
          v15 = *(unsigned __int16 *)(v13 + 2);
          v13 += 2;
          if (v15 == 62)
            goto LABEL_22;
        }
LABEL_25:
        v4 = v14;
LABEL_26:
        v5 = 0;
        v196 = 0;
        goto LABEL_27;
      }
      v13 = v4 + v6 + 2;
LABEL_22:
      v14 = v13 + 2 * v11;
      v16 = (unsigned __int16 *)(v13 + 2);
      v17 = 1 - v11;
      while (*(v16 - 1) != 62)
      {
        ++v16;
        if (++v17 == 1)
          goto LABEL_25;
      }
      if (v13 - v4 - v6 - 2 > -2)
      {
        WTF::String::String();
        v46 = v198;
        if (v198)
          *(_DWORD *)v198 += 2;
        v47 = v190[0];
        v190[0] = v46;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, a2);
          else
            *(_DWORD *)v47 -= 2;
        }
        v5 = -v17;
LABEL_39:
        if (v196)
        {
          if (!v5)
            goto LABEL_186;
          v48 = 0;
          v196 = 1;
          v49 = v16;
          while (1)
          {
            v50 = v16[v48];
            if (v50 <= 0x1F)
            {
              if (v50 != 9)
                goto LABEL_204;
            }
            else if (v50 != 32)
            {
              if (v50 == 59)
              {
                ++v49;
                if (v5 - 1 == v48)
                {
                  v5 = 0;
                  v16 = v49;
                  if (!v46)
                    goto LABEL_189;
                  goto LABEL_187;
                }
                v51 = ~v48 + v5;
LABEL_51:
                v52 = 0;
                v53 = (uint64_t)v49;
                v54 = v51;
                v55 = v49;
                v56 = &v49[v51];
                while (1)
                {
                  v57 = *v55;
                  if (v57 != 9 && v57 != 32)
                    break;
                  ++v55;
                  v53 += 2;
                  ++v52;
                  if (!--v54)
                  {
                    v5 = 0;
                    goto LABEL_170;
                  }
                }
                if (v57 == 44)
                {
                  v49 = v55;
                  goto LABEL_173;
                }
                while (v57 - 48 < 0xA
                     || v57 - 94 < 0x1D
                     || v57 - 65 < 0x1A
                     || v57 <= 0x2E && ((1 << v57) & 0x685E00000000) != 0)
                {
                  if (!--v54)
                  {
                    v5 = 0;
                    v59 = 0;
                    v55 = &v49[v51];
                    goto LABEL_65;
                  }
                  v58 = v55[1];
                  ++v55;
                  v57 = v58;
                  ++v52;
                }
                v81 = v55;
                while (1)
                {
                  v82 = v49[v52];
                  if (v82 != 32 && v82 != 9)
                    break;
                  ++v81;
                  if (v51 == ++v52)
                  {
                    v5 = 0;
                    v59 = 0;
                    goto LABEL_65;
                  }
                }
                v59 = v82 == 61;
                if (v82 == 61)
                {
                  ++v81;
                  if (v51 - 1 != v52)
                  {
                    v5 = ~v52 + v51;
                    goto LABEL_126;
                  }
                  v5 = 0;
                  v59 = 1;
                  v56 = v81;
                }
                else
                {
                  v5 = v51 - v52;
LABEL_126:
                  v84 = &v81[v5];
                  v56 = v81;
                  while (1)
                  {
                    v85 = *v56;
                    if (v85 != 32 && v85 != 9)
                      break;
                    ++v56;
                    if (!--v5)
                    {
                      v56 = v84;
                      break;
                    }
                  }
                }
LABEL_65:
                v60 = WebCore::parameterNameFromString(v53, (((unint64_t)v55 - v53) >> 1));
                v61 = (WTF::StringImpl *)v60;
                if (!v59)
                {
                  if (v5)
                  {
                    v62 = *v56;
                    if ((v62 == 59 || v62 == 44) && v60 >= 7)
                    {
LABEL_72:
                      if (v62 == 39)
                      {
                        v63 = 39;
                      }
                      else
                      {
                        if (v62 != 34)
                        {
                          v16 = &v56[v5];
                          for (j = v56; ; ++j)
                          {
                            if ((unsigned __int16)v62 <= 0x3Bu && ((1 << v62) & 0x800100100000200) != 0)
                            {
                              v74 = 0;
                              v75 = 0;
                              v66 = v5;
                              v65 = j;
                              v64 = j;
                              goto LABEL_95;
                            }
                            if (!--v5)
                              break;
                            v87 = j[1];
                            LOWORD(v62) = v87;
                          }
                          v66 = 0;
                          v74 = 0;
                          v75 = 0;
                          v64 = v16;
                          v65 = v16;
                          goto LABEL_108;
                        }
                        v63 = 34;
                      }
                      v16 = v56 + 1;
                      --v5;
                      v64 = v56 + 1;
                      v65 = v56 + 1;
                      v66 = v5;
                      v67 = v5;
                      v68 = v56 + 1;
                      while (v67)
                      {
                        if (*v68 != v63)
                        {
                          v69 = &v68[v67];
                          v16 = v68;
                          v5 = v67;
                          while (--v5)
                          {
                            v70 = v16[1];
                            v64 = ++v16;
                            v65 = v16;
                            v66 = v5;
                            v67 = v5;
                            v68 = v16;
                            if (v70 == v63)
                              goto LABEL_82;
                          }
                          v66 = 0;
                          v67 = 0;
                          v16 = v69;
                          v64 = v69;
                          v65 = v69;
                          v68 = v69;
                        }
LABEL_82:
                        v71 = *(v68 - 1);
                        if (v71 != 92)
                          v67 = v66;
                        if (v67)
                        {
                          v72 = *v68;
                          if (v72 == v63)
                          {
                            v5 = v67 - 1;
                            v16 = v68 + 1;
                            v64 = v68 + 1;
                            v65 = v68 + 1;
                            v66 = --v67;
                            ++v68;
                          }
                          v73 = v72 == v63;
                        }
                        else
                        {
                          v73 = 0;
                        }
                        if (v71 != 92 && v73)
                        {
                          v74 = 1;
                          goto LABEL_93;
                        }
                      }
                      v74 = 0;
LABEL_93:
                      v75 = 1;
                      if (v66)
                      {
                        j = v16;
LABEL_95:
                        v16 = &v65[v66];
                        v77 = v65;
                        do
                        {
                          v78 = *v77;
                          v79 = v78 == 32 || v78 == 9;
                          if (!v79)
                          {
                            v16 = j;
                            goto LABEL_107;
                          }
                          j = v77 + 1;
                          v64 = ++v77;
                          v5 = --v66;
                        }
                        while (v66);
                        v64 = v16;
                        if (!v74)
                          goto LABEL_108;
                      }
                      else
                      {
LABEL_107:
                        if (!v74)
                          goto LABEL_108;
                      }
                      goto LABEL_145;
                    }
                    v96 = &v56[v5];
                    ++v56;
                    --v5;
                    while (*(v56 - 1) != 44)
                    {
                      ++v56;
                      if (--v5 == -1)
                      {
                        v5 = 0;
                        v56 = v96;
                        break;
                      }
                    }
                  }
                  else
                  {
                    if (v60 >= 7)
                    {
                      v5 = 0;
                      goto LABEL_106;
                    }
                    v5 = 0;
                  }
                  v196 = 0;
LABEL_170:
                  v16 = v56;
                  if (v46)
                    goto LABEL_187;
                  goto LABEL_189;
                }
                if (v5)
                {
                  v62 = *v56;
                  goto LABEL_72;
                }
LABEL_106:
                v66 = 0;
                v74 = 0;
                v75 = 0;
                v16 = v56;
                v64 = v56;
                v65 = v56;
LABEL_108:
                if (v56 == v65)
                {
LABEL_109:
                  v80 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *(_DWORD *)v80 += 2;
                  v197 = v80;
                  if (v61 > 6)
                    goto LABEL_160;
LABEL_155:
                  if (v66)
                  {
                    v92 = &v16[v66];
                    v93 = v16 + 1;
                    v5 = v66 - 1;
                    while (*(v93 - 1) != 44)
                    {
                      ++v93;
                      if (--v5 == -1)
                      {
                        v5 = 0;
                        goto LABEL_163;
                      }
                    }
                    v92 = v93;
                  }
                  else
                  {
                    v92 = v16;
                  }
LABEL_163:
                  v94 = 0;
                  v196 = 0;
                  v16 = v92;
                  goto LABEL_164;
                }
LABEL_145:
                if (v66)
                {
                  v88 = *v64;
                  if (v88 != 44 && v88 != 59)
                    goto LABEL_109;
                }
                if (v74)
                  v89 = -1;
                else
                  v89 = 0;
                if ((char *)&v65[v89] - (char *)&v56[v75] <= -2)
                  goto LABEL_400;
                v90 = v75;
                v91 = v74;
                WTF::String::String();
                v80 = v198;
                v197 = v198;
                if (v61 <= 6 && !v91)
                {
                  v66 = v5;
                  if (((v90 ^ 1) & 1) == 0)
                    goto LABEL_155;
                }
LABEL_160:
                WebCore::LinkHeader::setValue((uint64_t)v190, v61, (uint64_t *)&v197);
                v94 = 1;
                v80 = v197;
LABEL_164:
                v197 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, a2);
                  else
                    *(_DWORD *)v80 -= 2;
                }
                if ((v94 & 1) != 0)
                  goto LABEL_39;
LABEL_186:
                if (!v46)
                  goto LABEL_189;
                goto LABEL_187;
              }
              if (v50 == 44)
              {
                v51 = v5 - v48;
                goto LABEL_51;
              }
LABEL_204:
              v196 = 0;
              v54 = v5 - v48;
LABEL_173:
              v16 = &v49[v54];
              v95 = v49 + 1;
              v5 = v54 - 1;
              while (*(v95 - 1) != 44)
              {
                ++v95;
                if (--v5 == -1)
                  goto LABEL_178;
              }
LABEL_185:
              v16 = v95;
              goto LABEL_186;
            }
            ++v49;
            if (v5 == ++v48)
            {
              v16 += v5;
LABEL_178:
              v5 = 0;
              if (!v46)
              {
LABEL_189:
                v4 = (uint64_t)v16;
                goto LABEL_27;
              }
LABEL_187:
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, a2);
              else
                *(_DWORD *)v46 -= 2;
              goto LABEL_189;
            }
          }
        }
        if (!v5)
          goto LABEL_186;
        v95 = &v16[v5];
        ++v16;
        --v5;
        do
        {
          if (*(v16 - 1) == 44)
            goto LABEL_186;
          ++v16;
          --v5;
        }
        while (v5 != -1);
        v5 = 0;
        goto LABEL_185;
      }
      goto LABEL_400;
    }
  }
}

void WebCore::LinkLoader::~LinkLoader(unsigned int **this)
{
  unsigned int **v2;
  void *v3;
  WebCore::CachedResource *v4;
  void *v5;
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;

  *this = (unsigned int *)&off_1E33F6170;
  v2 = this + 3;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v14, (const WebCore::CachedResourceHandleBase *)(this + 3));
  if (v14)
  {
    v4 = (WebCore::CachedResource *)*((_QWORD *)v14 + 1);
    if (v4)
      WebCore::CachedResource::removeClient(v4, this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v3);
  v6 = this[4];
  if (v6)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v13 = this[4];
    this[4] = 0;
    if (v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    this[4] = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v2, v5);
  v8 = this[2];
  this[2] = 0;
  if (v8)
  {
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
  }
  *this = (unsigned int *)&off_1E33F87C8;
  v9 = this[1];
  if (v9)
  {
    *((_QWORD *)v9 + 1) = 0;
    v10 = (WTF *)this[1];
    this[1] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v7);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WebCore::LinkLoader::~LinkLoader(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::LinkLoader::notifyFinished(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  WebCore::CachedResource *v4;
  void *v5;
  unsigned int *v6;

  v2 = (uint64_t *)(a1 + 24);
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v6, (const WebCore::CachedResourceHandleBase *)(a1 + 24));
  v3 = 24;
  if ((*(_WORD *)(*((_QWORD *)v6 + 1) + 557) >> 5) - 3 < 2)
    v3 = 32;
  (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + v3))();
  if (v6)
    v4 = (WebCore::CachedResource *)*((_QWORD *)v6 + 1);
  else
    v4 = 0;
  WebCore::CachedResource::removeClient(v4, (unsigned int **)a1);
  WebCore::CachedResourceHandleBase::setResource(v2, 0);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v6, v5);
}

BOOL WebCore::LinkHeader::isViewportDependent(WebCore::LinkHeader *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (v1 && *(_DWORD *)(v1 + 4))
    return 1;
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 4))
      return 1;
  }
  v3 = *((_QWORD *)this + 7);
  return v3 && *(_DWORD *)(v3 + 4) != 0;
}

void WebCore::LinkHeaderSet::~LinkHeaderSet(WebCore::LinkHeader **this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::LinkHeader *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    v4 = *this;
    v5 = 96 * v3;
    do
    {
      WebCore::LinkHeader::~LinkHeader(v4, a2);
      v4 = (WebCore::LinkHeader *)(v6 + 96);
      v5 -= 96;
    }
    while (v5);
  }
  v7 = *this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v7, a2);
  }
}

void WebCore::LinkLoader::prefetchIfNeeded(WebCore::LinkLoader *this, const WebCore::LinkLoadParameters *a2, WebCore::Document *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  WebCore::CachedResource *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _QWORD *v16;
  WebCore::CachedResourceLoader *v17;
  WTF::StringImpl *v18;
  char v19;
  _DWORD *v20;
  __int128 v21;
  CFTypeRef v22;
  WebCore::CachedResource *v23;
  void *v24;
  WTF::StringImpl *v25;
  void *v26;
  CFTypeRef v27;
  WebCore::FormData *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  void *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[7];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  char v53;
  __int128 v54;
  WebCore::FormData *v55;
  uint64_t v56;
  char v57;
  CFTypeRef cf;
  unsigned int *v59;
  char v60;
  unsigned int *v61[19];
  __int128 v62;
  WebCore::FormData *v63;
  uint64_t v64;
  char v65;
  CFTypeRef v66;
  uint64_t v67;
  _WORD v68[76];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int16 v72;
  WTF::StringImpl *v73[10];
  unsigned int v74;
  _BYTE v75[7];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  char v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  _DWORD *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_QWORD *)a3 + 66);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v8 = (uint64_t *)((char *)this + 24);
        v7 = *((_QWORD *)this + 3);
        if (v7)
        {
          v9 = *(WebCore::CachedResource **)(v7 + 8);
          if (v9)
          {
            WebCore::CachedResource::removeClient(v9, (unsigned int **)this);
            WebCore::CachedResourceHandleBase::setResource(v8, 0);
          }
        }
        {
          WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
        }
        *(_DWORD *)v75 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
        *(_DWORD *)&v75[3] = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                    + 3);
        v10 = qword_1ECE90818;
        if (qword_1ECE90818)
          *(_DWORD *)qword_1ECE90818 += 2;
        v76 = v10;
        v77 = xmmword_1ECE90820;
        v78 = *(_OWORD *)algn_1ECE90830;
        v11 = dword_1ECE90854;
        v80 = 0;
        v81 = 0;
        v79 = qword_1ECE90840;
        v82 = dword_1ECE90854;
        if (dword_1ECE90854)
        {
          if (dword_1ECE90854 >> 28)
          {
            __break(0xC471u);
            return;
          }
          v38 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
          v81 = v11;
          v80 = v38;
          if (dword_1ECE90854)
          {
            v39 = qword_1ECE90848;
            v40 = qword_1ECE90848 + 16 * dword_1ECE90854;
            do
            {
              v41 = *(_DWORD **)v39;
              if (*(_QWORD *)v39)
                *v41 += 2;
              *(_QWORD *)v38 = v41;
              *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
              v39 += 16;
              v38 += 16;
            }
            while (v39 != v40);
          }
        }
        v83 = dword_1ECE90858;
        v84 = byte_1ECE9085C;
        LOBYTE(v85) = 0;
        v88 = 0;
        if (byte_1ECE90878)
        {
          v85 = word_1ECE90860;
          v12 = qword_1ECE90868;
          if (qword_1ECE90868)
            *(_DWORD *)qword_1ECE90868 += 2;
          v86 = v12;
          v13 = qword_1ECE90870;
          if (qword_1ECE90870)
            *(_DWORD *)qword_1ECE90870 += 2;
          v87 = v13;
          v88 = 1;
        }
        v89 = xmmword_1ECE90880;
        v14 = (WTF::StringImpl *)qword_1ECE90890;
        if (qword_1ECE90890)
          *(_DWORD *)qword_1ECE90890 += 2;
        v75[4] = 2;
        *(_WORD *)&v75[1] = 256;
        *(_DWORD *)((char *)&v89 + 2) = *(_DWORD *)((_BYTE *)&v89 + 2) & 0xFFFCFA7F | 0x10500;
        v75[5] = *((_BYTE *)a2 + 104);
        v15 = (_DWORD *)*((_QWORD *)a2 + 12);
        if (v15)
          *v15 += 2;
        v16 = (_QWORD *)((char *)a2 + 8);
        v90 = v15;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        v17 = (WebCore::CachedResourceLoader *)*((_QWORD *)a3 + 90);
        if (!v17)
          v17 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(a3, a2);
        ++*(_DWORD *)v17;
        WebCore::Document::completeURL(a3, v16, (uint64_t)a3 + 848, 0, (WTF::URL *)&v42);
        v18 = v42;
        if (v42)
          *(_DWORD *)v42 += 2;
        v45 = v18;
        v46 = v43;
        v47 = v44;
        v48[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v48);
        v48[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v48[6] = v61[0];
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0x10000;
        v19 = v53 & 0x80 | 4;
        v53 = v19;
        *(_QWORD *)&v54 = 0;
        v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
        {
          *v20 += 2;
          v19 = v53;
        }
        *((_QWORD *)&v54 + 1) = v20;
        v55 = 0;
        LOBYTE(v56) = 0;
        BYTE4(v56) = 0;
        v57 = v57 & 0xE0 | 5;
        v53 = v19 | 2;
        cf = 0;
        WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v61, (uint64_t *)&v45);
        v21 = v54;
        v54 = 0u;
        v62 = v21;
        v63 = v55;
        v64 = v56;
        v65 = v57;
        v22 = cf;
        v55 = 0;
        cf = 0;
        v66 = v22;
        v67 = 0;
        WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v68, (const WebCore::ResourceLoaderOptions *)v75);
        v68[72] = 0;
        v69 = 0;
        v70 = 0u;
        WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v61, &v71);
        v72 = 0;
        WebCore::CachedResourceLoader::requestResource(v73, (WebCore::ResourceRequest *)v61, v17, (WTF::StringImpl *)0xD, 0, 0);
        if (v74)
        {
          v23 = 0;
          v59 = 0;
        }
        else
        {
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v59, (const WebCore::CachedResourceHandleBase *)v73);
          if (v59)
            v23 = (WebCore::CachedResource *)*((_QWORD *)v59 + 1);
          else
            v23 = 0;
        }
        WebCore::CachedResourceHandleBase::setResource(v8, v23);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v59, v24);
        if (v74 != -1)
          (*(&off_1E33F6210 + v74))((int)&v60, (WebCore::CachedResourceHandleBase *)v73);
        v74 = -1;
        WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v61, v25);
        v27 = cf;
        cf = 0;
        if (v27)
          CFRelease(v27);
        v28 = v55;
        v55 = 0;
        if (v28)
          WTF::RefCounted<WebCore::FormData>::deref(v28, v26);
        v29 = (WTF::StringImpl *)*((_QWORD *)&v54 + 1);
        *((_QWORD *)&v54 + 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = (WTF::StringImpl *)v54;
        *(_QWORD *)&v54 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
          else
            *(_DWORD *)v30 -= 2;
        }
        WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v45, (WTF::StringImpl *)v26);
        v32 = v42;
        v42 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::CachedResourceLoader::~CachedResourceLoader(v17, v31);
          WTF::fastFree(v36, v37);
        }
        else
        {
          --*(_DWORD *)v17;
        }
        WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)v61, (const WebCore::CachedResourceHandleBase *)v8);
        if (v61[0])
        {
          v34 = *((_QWORD *)v61[0] + 1);
          if (v34)
          {
            if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v61[0] + 1), this))
              (*(void (**)(uint64_t, WebCore::LinkLoader *))(*(_QWORD *)v34 + 88))(v34, this);
          }
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v61, v33);
        WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v75, v35);
      }
    }
  }
}

uint64_t WebCore::rejectPromises(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  objc_class *v24;

  v3 = *(WTF **)result;
  v4 = *(unsigned int *)(result + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    if (a3)
    {
      if (a3 != 1)
      {
        v6 = 8 * v4;
        v7 = (uint64_t *)v3;
        while (1)
        {
          v8 = *v7;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v9 = v22;
          v24 = 0;
          LOBYTE(v22) = 22;
          if (v9)
            *(_DWORD *)v9 += 2;
          v23 = v9;
          WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v22, 0, &v24);
          v10 = v23;
          v23 = 0;
          if (!v10)
            goto LABEL_10;
          if (*(_DWORD *)v10 != 2)
            break;
          WTF::StringImpl::destroy(v10, a2);
          if (v9)
          {
LABEL_11:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
LABEL_13:
          ++v7;
          v6 -= 8;
          if (!v6)
            goto LABEL_35;
        }
        *(_DWORD *)v10 -= 2;
LABEL_10:
        if (v9)
          goto LABEL_11;
        goto LABEL_13;
      }
      v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v16 = *MEMORY[0x1E0CBEF70];
      v17 = v5;
      v18 = (uint64_t *)v3;
      do
      {
        v19 = *v18;
        v23 = v15;
        v24 = 0;
        LOBYTE(v22) = 22;
        *(_DWORD *)v15 = v16 + 4;
        WebCore::DeferredPromise::reject(v19, (unsigned __int8 *)&v22, 0, &v24);
        v20 = v23;
        v23 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v16 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy(v15, a2);
          v16 = *(_DWORD *)v15;
        }
        else
        {
          *(_DWORD *)v15 = v16;
        }
        ++v18;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
      v11 = 8 * v4;
      v12 = (uint64_t *)v3;
      do
      {
        v13 = *v12;
        v23 = 0;
        v24 = 0;
        LOBYTE(v22) = 22;
        WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v22, 0, &v24);
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
LABEL_35:
    v21 = (uint64_t *)v3;
    do
    {
      result = *v21;
      *v21 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      ++v21;
      v5 -= 8;
    }
    while (v5);
  }
  if (v3)
    return WTF::fastFree(v3, a2);
  return result;
}

uint64_t WebCore::resolvePromises(uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _BYTE v12[8];

  v2 = *(WTF **)result;
  v3 = *(unsigned int *)(result + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = 8 * v3;
    v6 = (uint64_t *)v2;
    do
    {
      v7 = *v6;
      v8 = *(_QWORD *)(*v6 + 24);
      if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
      {
        v9 = *(_QWORD *)(v7 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(uint64_t **)v9;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v7, v10, 0, (objc_class *)0xA);
        MEMORY[0x19AEA32A0](v12);
      }
      ++v6;
      v5 -= 8;
    }
    while (v5);
    v11 = (uint64_t *)v2;
    do
    {
      result = *v11;
      *v11 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      ++v11;
      v4 -= 8;
    }
    while (v4);
  }
  if (v2)
    return WTF::fastFree(v2, a2);
  return result;
}

unint64_t WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::LinkHeader,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 96 * a2;
      result = WTF::fastMalloc((WTF *)(96 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v7 = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 8) = v9;
          v10 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          v11 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(v7 + 24) = v11;
          v12 = *(_QWORD *)(result + 32);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(v7 + 32) = v12;
          v13 = *(_QWORD *)(result + 40);
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(v7 + 40) = v13;
          v14 = *(_QWORD *)(result + 48);
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(v7 + 48) = v14;
          v15 = *(_QWORD *)(result + 56);
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(v7 + 56) = v15;
          v16 = *(_QWORD *)(result + 64);
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(v7 + 64) = v16;
          v17 = *(_QWORD *)(result + 72);
          *(_QWORD *)(result + 72) = 0;
          *(_QWORD *)(v7 + 72) = v17;
          v18 = *(_QWORD *)(result + 80);
          *(_QWORD *)(result + 80) = 0;
          *(_QWORD *)(v7 + 80) = v18;
          *(_BYTE *)(v7 + 88) = *(_BYTE *)(result + 88);
          WebCore::LinkHeader::~LinkHeader((WebCore::LinkHeader *)result, v6);
          result = v19 + 96;
          v7 += 96;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 96 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::parameterNameFromString(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (a2 == 3)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) != 0x52 || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x45)
        goto LABEL_133;
      v4 = *(unsigned __int8 *)(a1 + 2);
    }
    else
    {
      if ((*(_WORD *)a1 & 0xFFDF) != 0x52 || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x45)
        goto LABEL_133;
      v4 = *(unsigned __int16 *)(a1 + 4);
    }
    if ((v4 & 0xFFFFFFDF) == 0x4C)
      return 0;
LABEL_133:
    if ((_DWORD)a2 != 5)
    {
      if ((_DWORD)a2 != 4)
      {
        if (a2 == 3)
        {
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) != 0x52 || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x45)
              return 7;
            v14 = *(unsigned __int8 *)(a1 + 2);
          }
          else
          {
            if ((*(_WORD *)a1 & 0xFFDF) != 0x52 || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x45)
              return 7;
            v14 = *(unsigned __int16 *)(a1 + 4);
          }
          if ((v14 & 0xFFFFFFDF) == 0x56)
            return 5;
          return 7;
        }
LABEL_3:
        if ((_DWORD)a2 == 8)
        {
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) != 0x48
              || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x52
              || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x45
              || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x46
              || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x4C
              || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x41
              || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x4E)
            {
              return 7;
            }
            v8 = *(unsigned __int8 *)(a1 + 7);
          }
          else
          {
            if ((*(_WORD *)a1 & 0xFFDF) != 0x48
              || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x52
              || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x45
              || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x46
              || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x4C
              || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x41
              || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x4E)
            {
              return 7;
            }
            v8 = *(unsigned __int16 *)(a1 + 14);
          }
          if ((v8 & 0xFFFFFFDF) == 0x47)
            return 6;
          return 7;
        }
        if ((_DWORD)a2 != 2)
          goto LABEL_5;
        if ((a2 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a1 & 0xDF) == 0x41)
          {
            v9 = *(unsigned __int8 *)(a1 + 1);
            goto LABEL_54;
          }
        }
        else if ((*(_WORD *)a1 & 0xFFDF) == 0x41)
        {
          v9 = *(unsigned __int16 *)(a1 + 2);
LABEL_54:
          if ((v9 & 0xFFFFFFDF) == 0x53)
            return 9;
        }
LABEL_5:
        v2 = 0;
        goto LABEL_6;
      }
LABEL_149:
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a1 & 0xDF) != 0x54 || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x59 || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x50)
          goto LABEL_5;
        v15 = *(unsigned __int8 *)(a1 + 3);
      }
      else
      {
        if ((*(_WORD *)a1 & 0xFFDF) != 0x54
          || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x59
          || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x50)
        {
          goto LABEL_5;
        }
        v15 = *(unsigned __int16 *)(a1 + 6);
      }
      if ((v15 & 0xFFFFFFDF) == 0x45)
        return 4;
      goto LABEL_5;
    }
LABEL_142:
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) == 0x54
        && (*(_BYTE *)(a1 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(a1 + 2) & 0xDF) == 0x54
        && (*(_BYTE *)(a1 + 3) & 0xDF) == 0x4C
        && (*(_BYTE *)(a1 + 4) & 0xDF) == 0x45)
      {
        return 2;
      }
      if ((*(_BYTE *)a1 & 0xDF) == 0x4D
        && (*(_BYTE *)(a1 + 1) & 0xDF) == 0x45
        && (*(_BYTE *)(a1 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(a1 + 3) & 0xDF) == 0x49)
      {
        v16 = *(unsigned __int8 *)(a1 + 4);
        goto LABEL_161;
      }
    }
    else
    {
      v18 = *(_WORD *)a1 & 0xFFDF;
      if (v18 == 84)
      {
        if ((*(_WORD *)(a1 + 2) & 0xFFDF) == 0x49
          && (*(_WORD *)(a1 + 4) & 0xFFDF) == 0x54
          && (*(_WORD *)(a1 + 6) & 0xFFDF) == 0x4C
          && (*(_WORD *)(a1 + 8) & 0xFFDF) == 0x45)
        {
          return 2;
        }
      }
      else if (v18 == 77
             && (*(_WORD *)(a1 + 2) & 0xFFDF) == 0x45
             && (*(_WORD *)(a1 + 4) & 0xFFDF) == 0x44
             && (*(_WORD *)(a1 + 6) & 0xFFDF) == 0x49)
      {
        v16 = *(unsigned __int16 *)(a1 + 8);
LABEL_161:
        if ((v16 & 0xFFFFFFDF) == 0x41)
          return 3;
      }
    }
    v2 = 1;
LABEL_6:
    if (a2 != 10)
      goto LABEL_7;
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) == 0x49)
      {
        if ((*(_BYTE *)(a1 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x47
          || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x53
          || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x49
          || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x5A
          || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x53)
        {
          if ((v2 & 1) == 0)
            return 7;
LABEL_102:
          if ((*(_BYTE *)a1 & 0xDF) != 0x4E
            || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x43)
          {
            goto LABEL_8;
          }
          v12 = *(unsigned __int8 *)(a1 + 4);
          goto LABEL_107;
        }
        return 11;
      }
    }
    else if ((*(_WORD *)a1 & 0xFFDF) == 0x49)
    {
      if ((*(_WORD *)(a1 + 2) & 0xFFDF) != 0x4D
        || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x47
        || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x53
        || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x49
        || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x5A
        || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x53)
      {
        if ((v2 & 1) == 0)
          return 7;
        goto LABEL_205;
      }
      return 11;
    }
LABEL_7:
    if (!v2)
      goto LABEL_8;
    if ((a2 & 0xFF00000000) != 0)
      goto LABEL_102;
LABEL_205:
    if ((*(_WORD *)a1 & 0xFFDF) != 0x4E
      || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x4E
      || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x43)
    {
      goto LABEL_8;
    }
    v12 = *(unsigned __int16 *)(a1 + 8);
LABEL_107:
    if ((v12 & 0xFFFFFFDF) == 0x45)
      return 12;
LABEL_8:
    if ((_DWORD)a2 == 14)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a1 & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x50
          || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x4F
          || (*(_BYTE *)(a1 + 10) & 0xDF) != 0x4C
          || (*(_BYTE *)(a1 + 11) & 0xDF) != 0x49
          || (*(_BYTE *)(a1 + 12) & 0xDF) != 0x43)
        {
          return 7;
        }
        v10 = *(unsigned __int8 *)(a1 + 13);
      }
      else
      {
        if ((*(_WORD *)a1 & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x50
          || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a1 + 20) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a1 + 22) & 0xFFDF) != 0x49
          || (*(_WORD *)(a1 + 24) & 0xFFDF) != 0x43)
        {
          return 7;
        }
        v10 = *(unsigned __int16 *)(a1 + 26);
      }
      if ((v10 & 0xFFFFFFDF) == 0x59)
        return 13;
    }
    else if ((_DWORD)a2 == 13)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a1 & 0xDF) != 0x46
          || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x43
          || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x48
          || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x50
          || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x49
          || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x4F
          || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 10) & 0xDF) != 0x49
          || (*(_BYTE *)(a1 + 11) & 0xDF) != 0x54)
        {
          return 7;
        }
        v11 = *(unsigned __int8 *)(a1 + 12);
      }
      else
      {
        if ((*(_WORD *)a1 & 0xFFDF) != 0x46
          || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x43
          || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x48
          || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x50
          || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x49
          || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 20) & 0xFFDF) != 0x49
          || (*(_WORD *)(a1 + 22) & 0xFFDF) != 0x54)
        {
          return 7;
        }
        v11 = *(unsigned __int16 *)(a1 + 24);
      }
      if ((v11 & 0xFFFFFFDF) == 0x59)
        return 14;
    }
    return 7;
  }
  switch((int)a2)
  {
    case 4:
      goto LABEL_149;
    case 5:
      goto LABEL_142;
    case 6:
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a1 & 0xDF) != 0x41
          || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x4E
          || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x43
          || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x48
          || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x4F)
        {
          goto LABEL_133;
        }
        v5 = *(unsigned __int8 *)(a1 + 5);
      }
      else
      {
        if ((*(_WORD *)a1 & 0xFFDF) != 0x41
          || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x43
          || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x48
          || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x4F)
        {
          goto LABEL_133;
        }
        v5 = *(unsigned __int16 *)(a1 + 10);
      }
      if ((v5 & 0xFFFFFFDF) != 0x52)
        goto LABEL_133;
      return 1;
    case 11:
      if ((a2 & 0xFF00000000) != 0)
      {
        v6 = *(_BYTE *)a1 & 0xDF;
        if (v6 == 67)
        {
          if ((*(_BYTE *)(a1 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x4F
            || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x53
            || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x53
            || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x4F
            || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x49
            || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x47
            || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x49)
          {
            goto LABEL_5;
          }
          v7 = *(unsigned __int8 *)(a1 + 10);
LABEL_38:
          if ((v7 & 0xFFFFFFDF) != 0x4E)
            goto LABEL_5;
          return 8;
        }
        if (v6 != 73
          || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x47
          || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x53
          || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x52
          || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x43
          || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x53
          || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x45)
        {
          goto LABEL_5;
        }
        v13 = *(unsigned __int8 *)(a1 + 10);
      }
      else
      {
        v17 = *(_WORD *)a1 & 0xFFDF;
        if (v17 == 67)
        {
          if ((*(_WORD *)(a1 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x53
            || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x53
            || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x52
            || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x49
            || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x47
            || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x49)
          {
            goto LABEL_5;
          }
          v7 = *(unsigned __int16 *)(a1 + 20);
          goto LABEL_38;
        }
        if (v17 != 73
          || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x4D
          || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x41
          || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x47
          || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x53
          || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x52
          || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x43
          || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x53
          || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x45)
        {
          goto LABEL_5;
        }
        v13 = *(unsigned __int16 *)(a1 + 20);
      }
      if ((v13 & 0xFFFFFFDF) != 0x54)
        goto LABEL_5;
      result = 10;
      break;
    default:
      goto LABEL_3;
  }
  return result;
}

void WebCore::LinkHeader::~LinkHeader(WebCore::LinkHeader *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

_QWORD *WebCore::LinkPreloadImageResourceClient::LinkPreloadImageResourceClient(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::CachedResourceClient *v10;
  WebCore::CachedResource *v11;
  void *v14;
  WTF *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;

  *a1 = off_1E33F61B0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    goto LABEL_2;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v15 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (!v15)
    goto LABEL_2;
  if (*(_DWORD *)v15 != 1)
  {
    --*(_DWORD *)v15;
LABEL_2:
    ++*(_DWORD *)v5;
    goto LABEL_3;
  }
  WTF::fastFree(v15, v14);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    goto LABEL_2;
LABEL_3:
  a1[1] = v5;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
    goto LABEL_30;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3;
  v17 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v6;
  if (!v17)
    goto LABEL_30;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
LABEL_30:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    a1[2] = v6;
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v21 = a1 + 2;
      ++*(_DWORD *)(v8 + 548);
      v9 = *(_QWORD *)(v8 + 488);
      if (v9 && *(_QWORD *)(v9 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v21, (uint64_t)&v20);
        v6 = a1[2];
        a1[3] = &unk_1E33F6268;
        v10 = (WebCore::CachedResourceClient *)(a1 + 3);
        a1[4] = 0;
        *a1 = off_1E33F6230;
        if (!v6)
        {
          v11 = 0;
          goto LABEL_10;
        }
      }
      else
      {
        a1[3] = &unk_1E33F6268;
        v10 = (WebCore::CachedResourceClient *)(a1 + 3);
        a1[4] = 0;
        *a1 = off_1E33F6230;
      }
      v11 = *(WebCore::CachedResource **)(v6 + 8);
      goto LABEL_10;
    }
    v11 = 0;
  }
  else
  {
    v11 = 0;
    a1[2] = 0;
  }
  a1[3] = &unk_1E33F6268;
  v10 = (WebCore::CachedResourceClient *)(a1 + 3);
  a1[4] = 0;
  *a1 = off_1E33F6230;
LABEL_10:
  if (WebCore::CachedResource::addClientToSet(v11, v10))
    (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v11 + 88))(v11, v10);
  return a1;
}

void WebCore::LinkPreloadImageResourceClient::~LinkPreloadImageResourceClient(WebCore::LinkPreloadImageResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  WTF::fastFree(this, v5);
}

uint64_t *WebCore::LinkPreloadImageResourceClient::clear(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;

  v2 = this + 2;
  v1 = this[2];
  if (v1)
  {
    this = *(uint64_t **)(v1 + 8);
    if (this)
    {
      WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, (unsigned int **)v2 + 1);
      return WebCore::CachedResourceHandleBase::setResource(v2, 0);
    }
  }
  return this;
}

uint64_t WebCore::LinkPreloadImageResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

uint64_t WebCore::LinkPreloadImageResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadImageResourceClient *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LinkPreloadImageResourceClient::~LinkPreloadImageResourceClient(WebCore::LinkPreloadImageResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v6 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = (WebCore::LinkPreloadImageResourceClient *)((char *)this - 24);
  *(_QWORD *)this = &off_1E33F87C8;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v7 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  WTF::fastFree(v3, v6);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadImageResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result - 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadImageResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadImageResourceClient *this)
{
  return 0;
}

uint64_t *WebCore::LinkPreloadResourceClient::clearResource(uint64_t *this, unsigned int **a2)
{
  uint64_t v2;
  uint64_t *v3;

  v3 = this + 2;
  v2 = this[2];
  if (v2)
  {
    this = *(uint64_t **)(v2 + 8);
    if (this)
    {
      WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, a2);
      return WebCore::CachedResourceHandleBase::setResource(v3, 0);
    }
  }
  return this;
}

void WebCore::LinkPreloadDefaultResourceClient::~LinkPreloadDefaultResourceClient(WebCore::LinkPreloadDefaultResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  WTF::fastFree(this, v5);
}

uint64_t *WebCore::LinkPreloadDefaultResourceClient::clear(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;

  v2 = this + 2;
  v1 = this[2];
  if (v1)
  {
    this = *(uint64_t **)(v1 + 8);
    if (this)
    {
      WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, (unsigned int **)v2 + 1);
      return WebCore::CachedResourceHandleBase::setResource(v2, 0);
    }
  }
  return this;
}

uint64_t WebCore::LinkPreloadDefaultResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

uint64_t WebCore::LinkPreloadDefaultResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadDefaultResourceClient *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LinkPreloadDefaultResourceClient::~LinkPreloadDefaultResourceClient(WebCore::LinkPreloadDefaultResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v6 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = (WebCore::LinkPreloadDefaultResourceClient *)((char *)this - 24);
  *(_QWORD *)this = &off_1E33F87C8;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v7 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  WTF::fastFree(v3, v6);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadDefaultResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result - 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

void WebCore::LinkPreloadStyleResourceClient::~LinkPreloadStyleResourceClient(WebCore::LinkPreloadStyleResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  WTF::fastFree(this, v5);
}

uint64_t *WebCore::LinkPreloadStyleResourceClient::clear(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;

  v2 = this + 2;
  v1 = this[2];
  if (v1)
  {
    this = *(uint64_t **)(v1 + 8);
    if (this)
    {
      WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, (unsigned int **)v2 + 1);
      return WebCore::CachedResourceHandleBase::setResource(v2, 0);
    }
  }
  return this;
}

uint64_t WebCore::LinkPreloadStyleResourceClient::setCSSStyleSheet(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = **(_QWORD **)(*(_QWORD *)(v6 + 16) + 8);
      v8 = 24;
      if ((*(_WORD *)(a5 + 557) >> 5) - 3 < 2)
        v8 = 32;
      return (*(uint64_t (**)(void))(v7 + v8))();
    }
  }
  return result;
}

uint64_t WebCore::LinkPreloadStyleResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadStyleResourceClient *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LinkPreloadStyleResourceClient::~LinkPreloadStyleResourceClient(WebCore::LinkPreloadStyleResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v6 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = (WebCore::LinkPreloadStyleResourceClient *)((char *)this - 24);
  *(_QWORD *)this = &off_1E33F87C8;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v7 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  WTF::fastFree(v3, v6);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadStyleResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadStyleResourceClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadStyleResourceClient::setCSSStyleSheet(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(result - 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = **(_QWORD **)(*(_QWORD *)(v6 + 16) + 8);
      v8 = 24;
      if ((*(_WORD *)(a5 + 557) >> 5) - 3 < 2)
        v8 = 32;
      return (*(uint64_t (**)(void))(v7 + v8))();
    }
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::LinkPreloadFontResourceClient,WebCore::LinkLoader &,WebCore::CachedFont &>(_QWORD *a1, uint64_t a2, WebCore::CachedResource *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  WebCore::CachedResourceClient *v8;
  uint64_t v9;
  WebCore::CachedResource *v10;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v7 = WebCore::LinkPreloadResourceClient::LinkPreloadResourceClient(v6, a2, a3);
  v7[3] = &unk_1E33F6418;
  v8 = (WebCore::CachedResourceClient *)(v7 + 3);
  v7[4] = 0;
  *v7 = off_1E33F63E0;
  v9 = v7[2];
  if (v9)
    v10 = *(WebCore::CachedResource **)(v9 + 8);
  else
    v10 = 0;
  result = WebCore::CachedResource::addClientToSet(v10, v8);
  if ((_DWORD)result)
    result = (*(uint64_t (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v10 + 88))(v10, v8);
  *a1 = v6;
  return result;
}

void WebCore::LinkPreloadFontResourceClient::~LinkPreloadFontResourceClient(WebCore::LinkPreloadFontResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  WTF::fastFree(this, v5);
}

uint64_t *WebCore::LinkPreloadFontResourceClient::clear(WebCore::LinkPreloadFontResourceClient *this)
{
  return WebCore::LinkPreloadResourceClient::clearResource((uint64_t *)this, (unsigned int **)this + 3);
}

uint64_t WebCore::LinkPreloadFontResourceClient::fontLoaded(uint64_t this, WebCore::CachedFont *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)((char *)a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return this;
}

uint64_t WebCore::LinkPreloadFontResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadFontResourceClient *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LinkPreloadFontResourceClient::~LinkPreloadFontResourceClient(WebCore::LinkPreloadFontResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v6 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = (WebCore::LinkPreloadFontResourceClient *)((char *)this - 24);
  *(_QWORD *)this = &off_1E33F87C8;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v7 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  WTF::fastFree(v3, v6);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadFontResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadFontResourceClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadFontResourceClient::fontLoaded(uint64_t this, WebCore::CachedFont *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this - 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)((char *)a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return this;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::LinkPreloadRawResourceClient,WebCore::LinkLoader &,WebCore::CachedRawResource &>(_QWORD *a1, uint64_t a2, WebCore::CachedResource *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  WebCore::CachedResourceClient *v8;
  uint64_t v9;
  WebCore::CachedResource *v10;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v7 = WebCore::LinkPreloadResourceClient::LinkPreloadResourceClient(v6, a2, a3);
  v7[3] = &unk_1E33F6498;
  v8 = (WebCore::CachedResourceClient *)(v7 + 3);
  v7[4] = 0;
  *v7 = off_1E33F6460;
  v9 = v7[2];
  if (v9)
    v10 = *(WebCore::CachedResource **)(v9 + 8);
  else
    v10 = 0;
  result = WebCore::CachedResource::addClientToSet(v10, v8);
  if ((_DWORD)result)
    result = (*(uint64_t (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v10 + 88))(v10, v8);
  *a1 = v6;
  return result;
}

void WebCore::LinkPreloadRawResourceClient::~LinkPreloadRawResourceClient(WebCore::LinkPreloadRawResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *((_QWORD *)this + 3) = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 2, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  WTF::fastFree(this, v5);
}

uint64_t *WebCore::LinkPreloadRawResourceClient::clear(WebCore::LinkPreloadRawResourceClient *this)
{
  return WebCore::LinkPreloadResourceClient::clearResource((uint64_t *)this, (unsigned int **)this + 3);
}

uint64_t WebCore::LinkPreloadRawResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

uint64_t WebCore::LinkPreloadRawResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadRawResourceClient *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LinkPreloadRawResourceClient::~LinkPreloadRawResourceClient(WebCore::LinkPreloadRawResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v6 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;

  v3 = (WebCore::LinkPreloadRawResourceClient *)((char *)this - 24);
  *(_QWORD *)this = &off_1E33F87C8;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this - 3) = off_1E33F61B0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this - 1, a2);
  v7 = (WTF *)*((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  WTF::fastFree(v3, v6);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadRawResourceClient::notifyFinished(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result - 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = **(_QWORD **)(*(_QWORD *)(v3 + 16) + 8);
      v5 = 24;
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 < 2)
        v5 = 32;
      return (*(uint64_t (**)(void))(v4 + v5))();
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::CachedImage *>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WebCore::CachedResource **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  _QWORD *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (_QWORD *)(v8 + 16 * v14);
    v16 = (WTF *)*v15;
    if (*v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    result = WebCore::CachedResourceHandleBase::setResource(v15 + 1, *a4);
    v19 = *a2;
    if (*a2)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
        goto LABEL_33;
    }
    else if (3 * v24 <= 4 * v23)
    {
      if (!(_DWORD)v24)
      {
        v25 = 8;
        goto LABEL_26;
      }
LABEL_33:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_26:
      result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v25, (uint64_t)v15);
      v15 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v21 + 16 * v24;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v26 = *a2;
  if (*a2)
    v27 = *(unsigned int *)(v26 - 4);
  else
    v27 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v26 + 16 * v27;
  *(_BYTE *)(a1 + 16) = 0;
  return WebCore::CachedResourceHandleBase::setResource((uint64_t *)(v8 + 16 * v14 + 8), *a4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageLoader::decode(void)::$_0,void,WebCore::DecodingStatus>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E33F6538;
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v6 = *(_DWORD ***)(a1 + 8);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[4];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageLoader::decode(void)::$_0,void,WebCore::DecodingStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E33F6538;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 1);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[4];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageLoader::decode(void)::$_0,void,WebCore::DecodingStatus>::call(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = a1 + 8;
  if ((_DWORD)a2)
    return WebCore::resolvePromises(v2, a2);
  else
    return WebCore::rejectPromises(v2, (WTF::StringImpl *)"Decoding error.", 16);
}

WTF *WTF::VectorTypeOperations<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask>::destruct(WTF *result, WTF::StringImpl *a2)
{
  WTF **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 += 2;
    }
    while (v3 != (WTF **)a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LinkLoader::preconnectIfNeeded(WebCore::LinkLoadParameters const&,WebCore::Document &)::$_0,void,WebCore::ResourceError const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_1E33F6560;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LinkLoader::preconnectIfNeeded(WebCore::LinkLoadParameters const&,WebCore::Document &)::$_0,void,WebCore::ResourceError const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E33F6560;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LinkLoader::preconnectIfNeeded(WebCore::LinkLoadParameters const&,WebCore::Document &)::$_0,void,WebCore::ResourceError const&>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  int v30;
  __int16 v31;
  CFTypeRef cf;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38[2];

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v25 = v4;
  v5 = *(WTF::StringImpl **)(a2 + 8);
  if (v5)
    *(_DWORD *)v5 += 2;
  v26 = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v27 = *(_OWORD *)(a2 + 16);
  v28 = v6;
  v7 = *(WTF::StringImpl **)(a2 + 48);
  if (v7)
    *(_DWORD *)v7 += 2;
  v29 = v7;
  v30 = *(_DWORD *)(a2 + 56);
  v31 = *(_WORD *)(a2 + 60);
  v8 = *(const void **)(a2 + 64);
  cf = v8;
  if (v8)
    CFRetain(v8);
  v33 = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      *(_DWORD *)(v10 + 24) += 2;
      if ((_BYTE)v31)
      {
        v11 = *(WTF::StringImpl **)(a1 + 16);
        if (v11)
          *(_DWORD *)v11 += 2;
        v35 = v11;
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)&v25);
        v12 = v29;
        if (v29)
          *(_DWORD *)v29 += 2;
        v34 = v12;
        v38[0] = (WTF::StringImpl *)"Failed to preconnect to ";
        v38[1] = (WTF::StringImpl *)25;
        v37[0] = ". Error: ";
        v37[1] = 10;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)v38, (uint64_t *)&v35, (uint64_t)v37, (uint64_t *)&v34, &v36);
        if (v36)
        {
          WebCore::Document::addConsoleMessage((_QWORD *)v10, 2, 2, &v36, 0);
          v13 = v36;
          v36 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v34;
          v34 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v35;
          v35 = 0;
          if (!v15)
            goto LABEL_37;
          if (*(_DWORD *)v15 != 2)
          {
            *(_DWORD *)v15 -= 2;
            goto LABEL_37;
          }
LABEL_61:
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          goto LABEL_37;
        }
        __break(0xC471u);
LABEL_66:
        JUMPOUT(0x195EFBDFCLL);
      }
      v16 = *(_QWORD *)(a1 + 16);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 + 4);
        *(_DWORD *)v16 += 2;
        if (v17 < 0 || (v18 = (v17 + 29), __OFADD__(v17, 29)))
        {
          v38[0] = 0;
          goto LABEL_64;
        }
        v19 = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
      }
      else
      {
        v19 = 1;
        v18 = 29;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, (int8x16_t *)"Successfully preconnected to ", 0x1Du, v16, v38);
      if (v38[0])
      {
        WebCore::Document::addConsoleMessage((_QWORD *)v10, 2, 4, v38, 0);
        v20 = v38[0];
        v38[0] = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            if (!v16)
            {
LABEL_37:
              if (*(_DWORD *)(v10 + 24) == 2)
              {
                if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v10, (void *)a2);
              }
              else
              {
                *(_DWORD *)(v10 + 24) -= 2;
              }
              goto LABEL_39;
            }
            goto LABEL_35;
          }
          *(_DWORD *)v20 -= 2;
        }
        if (!v16)
          goto LABEL_37;
LABEL_35:
        if (*(_DWORD *)v16 != 2)
        {
          *(_DWORD *)v16 -= 2;
          goto LABEL_37;
        }
        v15 = (WTF::StringImpl *)v16;
        goto LABEL_61;
      }
LABEL_64:
      __break(0xC471u);
      goto LABEL_66;
    }
  }
LABEL_39:
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  v22 = v29;
  v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v26;
  v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int64x2_t WebCore::LoaderStrategy::responseFromResourceLoadIdentifier@<Q0>(uint64_t a1@<X8>)
{
  char v2;
  int64x2_t result;

  *(_QWORD *)a1 = 0;
  WTF::URL::invalidate((WTF::URL *)a1);
  *(_BYTE *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = *(_BYTE *)(a1 + 138);
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(int64x2_t *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 224) &= 0xF0u;
  *(_WORD *)(a1 + 232) &= 0xC000u;
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a1 + 234) & 0xF8 | 2;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 138) = v2 & 0xC0 | 5;
  return result;
}

double WebCore::LoaderStrategy::networkMetricsFromResourceLoadIdentifier@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = -1;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void WebCore::LoaderStrategy::intermediateLoadInformationFromResourceLoadIdentifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::MediaResourceLoader::recordResponsesForTesting(WebCore::MediaResourceLoader *this)
{
  _MergedGlobals_206 = 1;
}

uint64_t WebCore::MediaResourceLoader::MediaResourceLoader(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, char a5)
{
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33F68F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  v10 = (_QWORD *)(a1 + 24);
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), (WebCore::ScriptExecutionContext *)(a2 + 192));
  *(_QWORD *)a1 = off_1E33F6588;
  *v10 = &unk_1E33F65C8;
  v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 40) = v11;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 48) = v13;
  v15 = *a4;
  if (*a4)
    *v15 += 2;
  *(_QWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = a5;
  return a1;
}

{
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33F68F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  v10 = (_QWORD *)(a1 + 24);
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), (WebCore::ScriptExecutionContext *)(a2 + 192));
  *(_QWORD *)a1 = off_1E33F6588;
  *v10 = &unk_1E33F65C8;
  v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 40) = v11;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 48) = v13;
  v15 = *a4;
  if (*a4)
    *v15 += 2;
  *(_QWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = a5;
  return a1;
}

void WebCore::MediaResourceLoader::~MediaResourceLoader(WebCore::MediaResourceLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::ResourceResponseBase *)*((_QWORD *)this + 10);
    v5 = v3 << 8;
    do
    {
      v6 = (const void *)*((_QWORD *)v4 + 30);
      *((_QWORD *)v4 + 30) = 0;
      if (v6)
        CFRelease(v6);
      WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
      v4 = (WebCore::ResourceResponseBase *)((char *)v4 + 256);
      v5 -= 256;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 8);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)*((_QWORD *)this + 8);
      do
      {
        v11 = *v10;
        if (*v10 != (WTF *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree(v11, a2);
            else
              --*(_DWORD *)v11;
          }
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v24 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v24)
      {
        v30 = v13;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v24));
        v13 = v30;
      }
      v25 = *(WTF **)(v13 + 16);
      if (v25)
      {
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        v28 = v13;
        WTF::fastFree(v25, a2);
        v13 = v28;
      }
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v26 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v26)
      {
        v31 = v16;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v26));
        v16 = v31;
      }
      v27 = *(WTF **)(v16 + 16);
      if (v27)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        v29 = v16;
        WTF::fastFree(v27, a2);
        v16 = v29;
      }
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::MediaResourceLoader *)((char *)this + 24), a2);
  v20 = *((_QWORD *)this + 2);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v19);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaResourceLoader::~MediaResourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::MediaResourceLoader::~MediaResourceLoader(WebCore::MediaResourceLoader *this, WTF::StringImpl *a2)
{
  WebCore::MediaResourceLoader::~MediaResourceLoader((WebCore::MediaResourceLoader *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaResourceLoader::~MediaResourceLoader((WebCore::MediaResourceLoader *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaResourceLoader::contextDestroyed(WebCore::MediaResourceLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v12)
      {
        v19 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v12));
        v6 = v19;
      }
      v13 = *(WTF **)(v6 + 16);
      if (v13)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v18 = v6;
        WTF::fastFree(v13, a2);
        v6 = v18;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  result = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      v14 = *(unsigned int *)(result + 28);
      if ((_DWORD)v14)
      {
        v17 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v14));
        result = v17;
      }
      v15 = *(WTF **)(result + 16);
      if (v15)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v16 = result;
        WTF::fastFree(v15, a2);
        result = v16;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaResourceLoader::contextDestroyed(WebCore::MediaResourceLoader *this, void *a2)
{
  return WebCore::MediaResourceLoader::contextDestroyed((WebCore::MediaResourceLoader *)((char *)this - 24), a2);
}

WTF::StringImpl *WebCore::MediaResourceLoader::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *result;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[2];
  __int128 v24;
  __int128 v25;
  WTF::StringImpl *v26;
  int v27;
  __int16 v28;
  CFTypeRef cf;
  char v30;
  char v31;
  _OWORD v32[3];
  WTF::StringImpl *v33;
  int v34;
  __int16 v35;
  CFTypeRef v36;
  char v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 528)) != 0 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(v7 + 280);
    ++*(_DWORD *)v10;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v10 + 16) + 1112))(*(_QWORD *)(v10 + 16), a2, a3);
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x195EFC728);
    }
    --*(_DWORD *)v10;
    do
    {
      v12 = __ldaxr(v8);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v8));
    if (!v13)
    {
      atomic_store(1u, v8);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v8;
      *(_QWORD *)&v32[0] = v14;
      WTF::ensureOnMainThread();
      result = *(WTF::StringImpl **)&v32[0];
      *(_QWORD *)&v32[0] = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    WebCore::createInternalError(a2, (uint64_t)v23);
    v15 = v26;
    v35 = v28;
    v34 = v27;
    v16 = cf;
    v26 = 0;
    cf = 0;
    v17 = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    v32[0] = v17;
    v32[1] = v24;
    LODWORD(v24) = v24 & 0xFFFFFFFE;
    v32[2] = v25;
    v33 = v15;
    v36 = v16;
    v37 = v30;
    v38 = 1;
    v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v18 + 16))(v18, v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v38 != -1)
      ((void (*)(char *, _OWORD *))off_1E33F6920[v38])(&v31, v32);
    v38 = -1;
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    v21 = v26;
    v26 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v23[1];
    v23[1] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::MediaResourceLoader::requestResource(WebCore::ResourceRequest *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Document *v21;
  WebCore::CachedResourceLoader *v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  WTF *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::CachedResource *v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v61;
  WTF *v62;
  WTF *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  void *v66;
  WTF *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int *v76;
  unsigned int **v77;
  WTF *v78[10];
  int v79;
  WTF::StringImpl *v80[26];
  char v81;
  WebCore::Node *v82;
  _BYTE v83[2];
  int v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  char v91;
  char v92;
  char v93;
  __int16 v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98[10];
  unsigned int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *a4 = 0;
    return;
  }
  *((_BYTE *)this + 147) = 4;
  v9 = *(_QWORD *)(a2 + 48);
  if (!v9)
    goto LABEL_15;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_8;
  *(_DWORD *)(v10 + 24) += 2;
  LODWORD(v11) = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  if ((_DWORD)v11)
  {
    v69 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
    v70 = *(_QWORD *)(v69 + 528);
    if (v70)
    {
      v71 = *(_QWORD *)(v70 + 8);
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 24);
        if (v72)
        {
          v73 = *(_QWORD *)(v72 + 8);
          if (v73)
            goto LABEL_130;
        }
      }
    }
    v11 = *(_QWORD **)(v69 + 2632);
    if (!v11)
      goto LABEL_6;
    v11 = (_QWORD *)v11[1];
    if (!v11)
      goto LABEL_6;
    v11 = (_QWORD *)v11[66];
    if (!v11)
      goto LABEL_6;
    v11 = (_QWORD *)v11[1];
    if (!v11)
      goto LABEL_6;
    v11 = (_QWORD *)v11[3];
    if (!v11)
      goto LABEL_6;
    v73 = v11[1];
    if (v73)
    {
LABEL_130:
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 80) + 8) + 40);
      if (v74)
      {
        v80[0] = 0;
        v75 = WebCore::InspectorDOMAgent::pushNodePathToFrontend(v74, (WebCore::Node *)v80, (WebCore::InspectorDOMAgent *)v10);
        if (v80[0])
        {
          if (*(_DWORD *)v80[0] == 2)
            WTF::StringImpl::destroy(v80[0], this);
          else
            *(_DWORD *)v80[0] -= 2;
        }
        LODWORD(v11) = v75;
        goto LABEL_6;
      }
    }
    LODWORD(v11) = 0;
  }
LABEL_6:
  *((_DWORD *)this + 44) = (_DWORD)v11;
  *((_BYTE *)this + 180) = 1;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, this);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_8:
  v12 = *(_QWORD *)(a2 + 48);
  if (!v12
    || (v13 = *(_QWORD *)(v12 + 8)) == 0
    || ((v14 = **(_QWORD **)(v13 + 40)) != 0 ? (v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0) : (v15 = 1), v15))
  {
LABEL_15:
    v68 = 256;
    goto LABEL_16;
  }
  v68 = (*(_BYTE *)(v14 + 193) != 0) << 8;
LABEL_16:
  v84 = 2;
  v85 = 0;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  v91 = 1;
  v92 = 0;
  v93 = 0;
  v94 = 20;
  v97 = 0;
  v96 = 0;
  v83[1] = 2;
  v95 = ((a3 << 9) & 0x400 | (8 * (a3 & 1)) | v68 | v95 & 0xF0000000) ^ 0xC0800DA;
  v83[0] = *(_BYTE *)(a2 + 96);
  WebCore::createPotentialAccessControlRequest(this, (WTF::StringImpl *)v83, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), (uint64_t *)(a2 + 56), 0, (uint64_t)v80);
  v17 = *(_QWORD *)(a2 + 48);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      *(_DWORD *)(v18 + 24) += 4;
      v19 = v82;
      v82 = (WebCore::Node *)v18;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v16);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v16);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
  }
  v20 = *(_QWORD *)(a2 + 40);
  if (v20)
    v21 = *(WebCore::Document **)(v20 + 8);
  else
    v21 = 0;
  v22 = (WebCore::CachedResourceLoader *)*((_QWORD *)v21 + 90);
  if (!v22)
    v22 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v21, v16);
  ++*(_DWORD *)v22;
  if (v81 == 9)
    v23 = 7;
  else
    v23 = 6;
  WebCore::CachedResourceLoader::requestResource(v98, (WebCore::ResourceRequest *)v80, v22, (WTF::StringImpl *)v23, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v78, v98);
  if (v99 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v99))((int)&v77, (WebCore::CachedResourceHandleBase *)v98);
  v25 = v79;
  if (v79)
  {
    v76 = 0;
  }
  else
  {
    v26 = v78[0];
    if (v78[0])
    {
      do
        v27 = __ldaxr((unsigned int *)v26);
      while (__stlxr(v27 + 1, (unsigned int *)v26));
      v76 = (unsigned int *)v26;
      v28 = *((_QWORD *)v26 + 1);
      if (v28)
      {
        v77 = &v76;
        ++*(_DWORD *)(v28 + 548);
        v29 = *(_QWORD *)(v28 + 488);
        if (v29)
        {
          if (*(_QWORD *)(v29 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v28 + 464), (uint64_t *)&v77, (uint64_t)v98);
        }
      }
    }
    else
    {
      v76 = 0;
    }
    v25 = v79;
  }
  if (v25 != -1)
    (*(&off_1E33F6930 + v25))((int)v98, (WebCore::CachedResourceHandleBase *)v78);
  v79 = -1;
  if (*(_DWORD *)v22 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v22, v24);
    WTF::fastFree(v55, v56);
  }
  else
  {
    --*(_DWORD *)v22;
  }
  if (v76 && *((_QWORD *)v76 + 1))
  {
    v30 = WTF::fastMalloc((WTF *)0x48);
    v31 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v31 = 0;
    *(_OWORD *)(v31 + 8) = xmmword_19689B170;
    *(_QWORD *)(v31 + 24) = v30;
    *(_QWORD *)(v30 + 32) = &unk_1E33F6650;
    *(_QWORD *)(v30 + 8) = v31;
    *(_QWORD *)(v30 + 16) = 0;
    *(_BYTE *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 40) = 0;
    *(_QWORD *)v30 = &off_1E33F65F0;
    v32 = (unsigned int *)(a2 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    *(_QWORD *)(v30 + 48) = a2;
    *(_BYTE *)(v30 + 56) = 0;
    v34 = (unsigned int **)(v30 + 64);
    v35 = v76;
    if (v76)
    {
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
      *v34 = v35;
      v37 = *((_QWORD *)v35 + 1);
      if (!v37
        || (v78[0] = (WTF *)(v30 + 64), ++*(_DWORD *)(v37 + 548), (v38 = *(_QWORD *)(v37 + 488)) == 0)
        || !*(_QWORD *)(v38 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v37 + 464), (uint64_t *)v78, (uint64_t)v98), (v35 = *v34) != 0))
      {
        do
          v39 = __ldaxr(v35);
        while (__stlxr(v39 + 1, v35));
        v77 = (unsigned int **)v35;
        v40 = *((_QWORD *)v35 + 1);
        if (v40
          && ((v78[0] = (WTF *)&v77, ++*(_DWORD *)(v40 + 548), (v41 = *(_QWORD *)(v40 + 488)) == 0)
           || !*(_QWORD *)(v41 + 8)
           || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v40 + 464), (uint64_t *)v78, (uint64_t)v98), (v35 = (unsigned int *)v77) != 0)))
        {
          v42 = (WebCore::CachedResource *)*((_QWORD *)v35 + 1);
        }
        else
        {
          v42 = 0;
        }
        goto LABEL_60;
      }
    }
    else
    {
      *v34 = 0;
    }
    v42 = 0;
    v77 = 0;
LABEL_60:
    if (WebCore::CachedResource::addClientToSet(v42, (WebCore::CachedResourceClient *)(v30 + 32)))
      (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v42 + 88))(v42, v30 + 32);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v77, v43);
    v45 = (uint64_t *)(a2 + 64);
    v46 = *(_DWORD *)(a2 + 76);
    v47 = *(_DWORD *)(a2 + 72) + 1;
    *(_DWORD *)(a2 + 72) = v47;
    if (v47 <= v46)
      goto LABEL_98;
    v48 = *v45;
    if (!*v45)
      goto LABEL_64;
    v50 = *(_DWORD *)(v48 - 4);
    if (!v50)
      goto LABEL_93;
    v51 = 0;
    v52 = v50 - 1;
    do
    {
      v53 = v52;
      v54 = *(WTF **)(v48 + 8 * v52);
      if ((unint64_t)v54 + 1 >= 2 && !*((_QWORD *)v54 + 1))
      {
        *(_QWORD *)(v48 + 8 * v52) = 0;
        if (*(_DWORD *)v54 == 1)
          WTF::fastFree(v54, v44);
        else
          --*(_DWORD *)v54;
        *(_QWORD *)(v48 + 8 * v52) = -1;
        ++v51;
      }
      --v52;
    }
    while (v53);
    v48 = *v45;
    if (v51)
    {
      *(_DWORD *)(v48 - 16) += v51;
      v57 = *v45;
      if (*v45)
        v58 = *(_DWORD *)(v57 - 12);
      else
        v58 = 0;
      *(_DWORD *)(v57 - 12) = v58 - v51;
      v48 = *v45;
    }
    if (!v48)
    {
LABEL_64:
      v49 = 0;
      *(_DWORD *)(a2 + 72) = 0;
      goto LABEL_96;
    }
    v59 = *(_DWORD *)(v48 - 4);
    if (v59 < 9 || 6 * *(_DWORD *)(v48 - 12) >= v59)
    {
LABEL_93:
      *(_DWORD *)(a2 + 72) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a2 + 64));
      v48 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 72) = 0;
      if (!v48)
      {
        v49 = 0;
        goto LABEL_96;
      }
    }
    v49 = *(_DWORD *)(v48 - 12);
    v61 = 0x7FFFFFFF;
    if (v49 >= 0x7FFFFFFF)
    {
LABEL_97:
      *(_DWORD *)(a2 + 76) = 2 * v61;
LABEL_98:
      v62 = *(WTF **)(v30 + 40);
      if (!v62)
      {
        v62 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v62 = 1;
        *((_QWORD *)v62 + 1) = v30 + 32;
        v67 = *(WTF **)(v30 + 40);
        *(_QWORD *)(v30 + 40) = v62;
        if (v67)
        {
          if (*(_DWORD *)v67 == 1)
          {
            WTF::fastFree(v67, v66);
            v62 = *(WTF **)(v30 + 40);
          }
          else
          {
            --*(_DWORD *)v67;
          }
        }
      }
      *(_DWORD *)v62 += 2;
      v78[0] = v62;
      WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add(v45, v78, (uint64_t)v98);
      v63 = v78[0];
      v78[0] = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
          WTF::fastFree(v63, v24);
        else
          --*(_DWORD *)v63;
      }
      if (*(_DWORD *)v62 == 1)
        WTF::fastFree(v62, v24);
      else
        --*(_DWORD *)v62;
      goto LABEL_102;
    }
LABEL_96:
    v61 = v49;
    goto LABEL_97;
  }
  v30 = 0;
LABEL_102:
  *a4 = v30;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v76, v24);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v80, v64);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v83, v65);
}

unsigned int *WebCore::MediaResourceLoader::responsesForTesting@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this[23];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v2;
  if ((_DWORD)v2)
  {
    if (BYTE3(v2))
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = (unsigned int *)WTF::fastMalloc((WTF *)(v2 << 8));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = v4[23];
      if ((_DWORD)v5)
      {
        v6 = (uint64_t)this;
        v7 = *((_QWORD *)v4 + 10);
        v8 = v5 << 8;
        do
        {
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v6, (const WebCore::ResourceResponseBase *)v7);
          this = *(unsigned int **)(v7 + 240);
          *(_QWORD *)(v6 + 240) = this;
          if (this)
            this = (unsigned int *)CFRetain(this);
          *(_BYTE *)(v6 + 248) = *(_BYTE *)(v7 + 248);
          v6 += 256;
          v7 += 256;
          v8 -= 256;
        }
        while (v8);
      }
    }
  }
  return this;
}

void WebCore::MediaResource::~MediaResource(WebCore::MediaResource *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  *(_QWORD *)this = &off_1E33F65F0;
  *((_QWORD *)this + 4) = &unk_1E33F6650;
  v3 = *((_QWORD *)this + 6);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (uint64_t *)(v3 + 64);
  v7 = *(_DWORD *)(v3 + 76);
  v8 = *(_DWORD *)(v3 + 72) + 1;
  *(_DWORD *)(v3 + 72) = v8;
  if (v8 > v7)
  {
    v9 = *v6;
    if (!*v6)
    {
LABEL_5:
      v10 = 0;
      *(_DWORD *)(v3 + 72) = 0;
      goto LABEL_30;
    }
    v11 = *(_DWORD *)(v9 - 4);
    if (!v11)
      goto LABEL_27;
    v12 = 0;
    v13 = v11 - 1;
    do
    {
      v14 = v13;
      v15 = *(WTF **)(v9 + 8 * v13);
      if ((unint64_t)v15 + 1 >= 2 && !*((_QWORD *)v15 + 1))
      {
        *(_QWORD *)(v9 + 8 * v13) = 0;
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, a2);
        else
          --*(_DWORD *)v15;
        *(_QWORD *)(v9 + 8 * v13) = -1;
        ++v12;
      }
      --v13;
    }
    while (v14);
    v9 = *v6;
    if (v12)
    {
      *(_DWORD *)(v9 - 16) += v12;
      v16 = *v6;
      if (*v6)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v12;
      v9 = *v6;
    }
    if (!v9)
      goto LABEL_5;
    v18 = *(_DWORD *)(v9 - 4);
    if (v18 < 9 || 6 * *(_DWORD *)(v9 - 12) >= v18)
    {
LABEL_27:
      *(_DWORD *)(v3 + 72) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v3 + 64));
      v9 = *(_QWORD *)(v3 + 64);
      *(_DWORD *)(v3 + 72) = 0;
      if (!v9)
      {
        v10 = 0;
        goto LABEL_30;
      }
    }
    v10 = *(_DWORD *)(v9 - 12);
    v20 = 0x7FFFFFFF;
    if (v10 >= 0x7FFFFFFF)
    {
LABEL_31:
      *(_DWORD *)(v3 + 76) = 2 * v20;
      goto LABEL_32;
    }
LABEL_30:
    v20 = v10;
    goto LABEL_31;
  }
LABEL_32:
  v21 = (WTF *)*((_QWORD *)this + 5);
  if (v21 && *((_QWORD *)v21 + 1))
    WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)(v3 + 64), v21);
  do
  {
    v22 = __ldaxr(v4);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v4));
  if (!v23)
  {
    atomic_store(1u, v4);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E32051E8;
    v35[1] = v4;
    v37 = v35;
    WTF::ensureOnMainThread();
    if (v37)
      (*(void (**)(_QWORD *))(*v37 + 8))(v37);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 8, v21);
  v25 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E32051E8;
      v36[1] = v26;
      v38 = v36;
      WTF::ensureOnMainThread();
      if (v38)
        (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    }
  }
  *((_QWORD *)this + 4) = &off_1E33F87C8;
  v29 = *((_QWORD *)this + 5);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 0;
    v30 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v24);
      else
        --*(_DWORD *)v30;
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *(_QWORD *)this = &off_1E33F6960;
  v31 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaResource::~MediaResource(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::MediaResource::~MediaResource(WebCore::MediaResource *this, void *a2)
{
  WebCore::MediaResource::~MediaResource((WebCore::MediaResource *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaResource::~MediaResource((WebCore::MediaResource *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::MediaResource::shutdown(WebCore::MediaResource *this)
{
  unsigned __int8 *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::CachedResource *v14;
  unsigned int *v15;
  _BYTE v16[24];
  unsigned int **v17;

  v2 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v2))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v15 = (unsigned int *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v17 = &v15;
      ++*(_DWORD *)(v11 + 548);
      v12 = *(_QWORD *)(v11 + 488);
      if (v12)
      {
        if (*(_QWORD *)(v12 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)&v17, (uint64_t)v16);
      }
    }
  }
  else
  {
    v15 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 8, 0);
  if (v15)
  {
    v14 = (WebCore::CachedResource *)*((_QWORD *)v15 + 1);
    if (v14)
      WebCore::CachedResource::removeClient(v14, (unsigned int **)this + 4);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v15, v13);
}

void WebCore::MediaResource::responseReceived(uint64_t a1, void *a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ResourceResponseBase *v6;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v18;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  __int128 v72;
  __int128 v73;
  WTF::StringImpl *v74;
  int v75;
  __int16 v76;
  CFTypeRef cf;
  char v78;

  v4 = *a4;
  *a4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    goto LABEL_127;
  v6 = a3;
  v8 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_7:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 400);
  if (v11)
  {
    v12 = (uint64_t *)(v11 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v70);
    v12 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v12 + 60) == 2)
  {
    if ((byte_1ECE83801 & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      qword_1ECE83808 = (uint64_t)v70;
      byte_1ECE83801 = 1;
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
    if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
    {
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::Document::addConsoleMessage((_QWORD *)v14, 8, 2, (WTF::StringImpl **)&qword_1ECE83808, 0);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::addConsoleMessage(0, 8, 2, (WTF::StringImpl **)&qword_1ECE83808, 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 56));
    v16 = (unsigned __int8 *)(a1 + 24);
    if (__ldaxr((unsigned __int8 *)(a1 + 24)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](a1 + 24);
LABEL_27:
    v20 = *(unsigned int **)(a1 + 16);
    if (v20)
    {
      v21 = v20 + 2;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = __ldxr(v16);
    if (v23 == 1)
    {
      if (!__stlxr(0, v16))
      {
        if (!v20)
          goto LABEL_60;
LABEL_36:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v24 = v70;
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
        if (v24)
          *(_DWORD *)v24 += 2;
        v70 = v24;
        v25 = *(WTF::StringImpl **)v6;
        if (*(_QWORD *)v6)
          *(_DWORD *)v25 += 2;
        v71 = v25;
        v26 = *(_OWORD *)((char *)v6 + 24);
        v72 = *(_OWORD *)((char *)v6 + 8);
        v73 = v26;
        v27 = (WTF::StringImpl *)qword_1ECE83808;
        if (qword_1ECE83808)
          *(_DWORD *)qword_1ECE83808 += 2;
        v74 = v27;
        v75 = 0;
        v76 = 1;
        cf = 0;
        v78 = 1;
        (*(void (**)(unsigned int *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 56))(v20, a1, &v70);
        v29 = cf;
        cf = 0;
        if (v29)
          CFRelease(v29);
        v30 = v74;
        v74 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v28);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v71;
        v71 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v28);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v70;
        v70 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::destroy(v32, v28);
            if (!v24)
              goto LABEL_56;
LABEL_54:
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v28);
            else
              *(_DWORD *)v24 -= 2;
LABEL_56:
            v33 = v20 + 2;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v20 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
            }
LABEL_60:
            v36 = *(_QWORD *)(a1 + 8);
            if (__ldaxr((unsigned __int8 *)v36))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v36))
            {
              goto LABEL_77;
            }
            MEMORY[0x19AEA534C](v36);
LABEL_77:
            ++*(_QWORD *)(v36 + 8);
            v44 = __ldxr((unsigned __int8 *)v36);
            if (v44 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v36))
                goto LABEL_82;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_82:
            v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v45 = &off_1E33F6BF8;
            *((_QWORD *)v45 + 1) = a1;
            goto LABEL_83;
          }
          *(_DWORD *)v32 -= 2;
        }
        if (!v24)
          goto LABEL_56;
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 24));
    if (!v20)
      goto LABEL_60;
    goto LABEL_36;
  }
  atomic_store(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 17) == 3, (unsigned __int8 *)(a1 + 56));
  v18 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_64;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_64:
  v38 = *(unsigned int **)(a1 + 16);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  v41 = __ldxr(v18);
  if (v41 == 1)
  {
    if (!__stlxr(0, v18))
    {
      if (!v38)
        goto LABEL_99;
      goto LABEL_73;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 24));
  if (!v38)
    goto LABEL_99;
LABEL_73:
  v42 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v42))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v42))
  {
    goto LABEL_87;
  }
  MEMORY[0x19AEA534C](v42);
LABEL_87:
  ++*(_QWORD *)(v42 + 8);
  v47 = __ldxr((unsigned __int8 *)v42);
  if (v47 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v42))
      goto LABEL_92;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v42);
LABEL_92:
  v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v48 = &off_1E33F6BD0;
  *((_QWORD *)v48 + 1) = a1;
  *((_QWORD *)v48 + 2) = a1;
  *((_QWORD *)v48 + 3) = v4;
  v70 = v48;
  (*(void (**)(unsigned int *, uint64_t, WebCore::ResourceResponseBase *, WTF::StringImpl **))(*(_QWORD *)v38 + 16))(v38, a1, v6, &v70);
  v49 = v70;
  v70 = 0;
  if (v49)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
  v50 = v38 + 2;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (v51 == 1)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
  }
  v4 = 0;
LABEL_99:
  v52 = *(_QWORD *)(a1 + 48);
  v53 = (unsigned int *)(v52 + 8);
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 + 1, v53));
  if (_MergedGlobals_206 == 1)
  {
    v55 = *(unsigned int *)(v52 + 92);
    if (v55 <= 5)
    {
      v56 = (uint64_t *)(v52 + 80);
      if ((_DWORD)v55 == *(_DWORD *)(v52 + 88))
      {
        v6 = (WebCore::ResourceResponseBase *)WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v55 + 1, (unint64_t)v6);
        v55 = *(unsigned int *)(v52 + 92);
        v57 = *(_QWORD *)(v52 + 80);
      }
      else
      {
        v57 = *v56;
      }
      v58 = v57 + (v55 << 8);
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v58, v6);
      v59 = (const void *)*((_QWORD *)v6 + 30);
      *(_QWORD *)(v58 + 240) = v59;
      if (v59)
        CFRetain(v59);
      *(_BYTE *)(v58 + 248) = *((_BYTE *)v6 + 248);
      ++*(_DWORD *)(v52 + 92);
    }
  }
  else if (!v52)
  {
    goto LABEL_111;
  }
  do
  {
    v60 = __ldaxr(v53);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v53));
  if (!v61)
  {
    atomic_store(1u, v53);
    v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v45 = off_1E32051E8;
    *((_QWORD *)v45 + 1) = v53;
LABEL_83:
    v70 = v45;
    WTF::ensureOnMainThread();
    v46 = v70;
    v70 = 0;
    if (v46)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
  }
LABEL_111:
  v62 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v62))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v62))
  {
    goto LABEL_115;
  }
  MEMORY[0x19AEA534C](v62);
LABEL_115:
  v64 = *(_QWORD *)(v62 + 8);
  v65 = v64 - 1;
  *(_QWORD *)(v62 + 8) = v64 - 1;
  if (v64 == 1)
  {
    v69 = *(_QWORD *)(v62 + 16);
    v66 = *(_QWORD *)(v62 + 24);
    *(_QWORD *)(v62 + 24) = 0;
    v67 = v69 != 0;
  }
  else
  {
    v66 = 0;
    v67 = 1;
  }
  v68 = __ldxr((unsigned __int8 *)v62);
  if (v68 != 1)
  {
    __clrex();
LABEL_122:
    WTF::Lock::unlockSlow((WTF::Lock *)v62);
    if (v65)
      goto LABEL_127;
    goto LABEL_123;
  }
  if (__stlxr(0, (unsigned __int8 *)v62))
    goto LABEL_122;
  if (v65)
    goto LABEL_127;
LABEL_123:
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
  if (!v67)
    WTF::fastFree((WTF *)v62, a2);
LABEL_127:
  if (v4)
  {
    (*(void (**)(uint64_t, void *, WebCore::ResourceResponseBase *))(*(_QWORD *)v4 + 16))(v4, a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void `non-virtual thunk to'WebCore::MediaResource::responseReceived(uint64_t a1, void *a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  WebCore::MediaResource::responseReceived(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::MediaResource::shouldCacheResponse(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  unsigned __int8 *v8;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_14:
  v10 = *(unsigned int **)(a1 + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 24));
    if (v10)
      goto LABEL_20;
LABEL_26:
    v15 = 1;
    goto LABEL_27;
  }
  if (__stlxr(0, v8))
    goto LABEL_25;
  if (!v10)
    goto LABEL_26;
LABEL_20:
  v14 = v10 + 2;
  v15 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a1, a3);
  do
  {
    v16 = __ldaxr(v14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v14));
  if (!v17)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_27:
  v18 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_31:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v26 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v26 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
    {
      if (v21)
        return v15;
      goto LABEL_39;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (v21)
    return v15;
LABEL_39:
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  if (!v23)
    WTF::fastFree((WTF *)v18, a2);
  return v15;
}

uint64_t `non-virtual thunk to'WebCore::MediaResource::shouldCacheResponse(uint64_t a1, void *a2, uint64_t a3)
{
  return WebCore::MediaResource::shouldCacheResponse(a1 - 32, a2, a3);
}

uint64_t WebCore::MediaResource::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  uint64_t result;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  v9 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_5:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_14:
  v14 = *(unsigned int **)(a1 + 16);
  if (v14)
  {
    v15 = v14 + 2;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = __ldxr(v12);
  if (v17 != 1)
  {
    __clrex();
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 24));
    if (v14)
      goto LABEL_20;
LABEL_26:
    v14 = *a5;
    *a5 = 0;
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v14 + 16))(v14, a3);
    goto LABEL_27;
  }
  if (__stlxr(0, v12))
    goto LABEL_25;
  if (!v14)
    goto LABEL_26;
LABEL_20:
  v18 = v14 + 2;
  result = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v14 + 24))(v14, a1, a3, a4, a5);
  do
  {
    v21 = __ldaxr(v18);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v18));
  if (!v22)
  {
    atomic_store(1u, v18);
LABEL_27:
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_32;
  }
  result = MEMORY[0x19AEA534C](v23);
LABEL_32:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v30 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v30 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
LABEL_39:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      return result;
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
    goto LABEL_39;
  if (v26)
    return result;
LABEL_40:
  if (v27)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  if (!v28)
    return WTF::fastFree((WTF *)v23, v20);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaResource::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  return WebCore::MediaResource::redirectReceived(a1 - 32, a2, a3, a4, a5);
}

uint64_t WebCore::MediaResource::dataSent(uint64_t this, WebCore::CachedResource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned __int8 *v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;

  v6 = this;
  v7 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v7, a2);
LABEL_5:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_9:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v10 = (unsigned __int8 *)(v6 + 24);
  if (__ldaxr((unsigned __int8 *)(v6 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  this = MEMORY[0x19AEA534C](v6 + 24, a2);
LABEL_14:
  v12 = *(unsigned int **)(v6 + 16);
  if (v12)
  {
    v13 = v12 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = __ldxr(v10);
  if (v15 == 1)
  {
    if (!__stlxr(0, v10))
    {
      if (!v12)
        goto LABEL_27;
      goto LABEL_23;
    }
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 24));
  if (!v12)
    goto LABEL_27;
LABEL_23:
  v16 = v12 + 2;
  this = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v6, a3, a4);
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v12 + 2);
    this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_27:
  v19 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_31;
  }
  this = MEMORY[0x19AEA534C](v19, a2);
LABEL_31:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v26 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v26 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_38:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      return this;
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_38;
  if (v22)
    return this;
LABEL_39:
  if (v23)
    this = (*(uint64_t (**)(uint64_t, WebCore::CachedResource *))(*(_QWORD *)v23 + 16))(v23, a2);
  if (!v24)
    return WTF::fastFree((WTF *)v19, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaResource::dataSent(WebCore::MediaResource *this, WebCore::CachedResource *a2, uint64_t a3, uint64_t a4)
{
  return WebCore::MediaResource::dataSent((uint64_t)this - 32, a2, a3, a4);
}

uint64_t WebCore::MediaResource::dataReceived(uint64_t this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned __int8 *v8;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;

  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v5, a2);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (unsigned __int8 *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)(v4 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_14;
  }
  this = MEMORY[0x19AEA534C](v4 + 24, a2);
LABEL_14:
  v10 = *(unsigned int **)(v4 + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = __ldxr(v8);
  if (v13 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (!v10)
        goto LABEL_27;
      goto LABEL_23;
    }
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 24));
  if (!v10)
    goto LABEL_27;
LABEL_23:
  v14 = v10 + 2;
  this = (*(uint64_t (**)(unsigned int *, uint64_t, const WebCore::SharedBuffer *))(*(_QWORD *)v10 + 48))(v10, v4, a3);
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v10 + 2);
    this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_27:
  v17 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_31;
  }
  this = MEMORY[0x19AEA534C](v17, a2);
LABEL_31:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_38:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return this;
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_38;
  if (v20)
    return this;
LABEL_39:
  if (v21)
    this = (*(uint64_t (**)(uint64_t, WebCore::CachedResource *))(*(_QWORD *)v21 + 16))(v21, a2);
  if (!v22)
    return WTF::fastFree((WTF *)v17, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaResource::dataReceived(WebCore::MediaResource *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  return WebCore::MediaResource::dataReceived((uint64_t)this - 32, a2, a3);
}

uint64_t WebCore::MediaResource::notifyFinished(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  unsigned __int8 *v8;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v23;
  _QWORD *v24;
  void *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  char v37;

  v5 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_14:
  v10 = *(unsigned int **)(a1 + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = __ldxr(v8);
  if (v13 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (!v10)
        goto LABEL_34;
      goto LABEL_23;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 24));
  if (!v10)
    goto LABEL_34;
LABEL_23:
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 400);
  if (v14)
  {
    v15 = (uint64_t *)(v14 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v36);
    v15 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v15 + 60))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 400);
    if (v16)
    {
      v17 = (uint64_t *)(v16 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v37);
      v17 = &WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    (*(void (**)(unsigned int *, uint64_t, uint64_t *))(*(_QWORD *)v10 + 64))(v10, a1, v17);
  }
  else
  {
    (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, a1, a3);
  }
  v18 = v10 + 2;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_34:
  v21 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_38:
  ++*(_QWORD *)(v21 + 8);
  v23 = __ldxr((unsigned __int8 *)v21);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = &off_1E33F6BF8;
  v24[1] = a1;
  v35 = v24;
  WTF::ensureOnMainThread();
  result = (uint64_t)v35;
  if (v35)
    result = (*(uint64_t (**)(_QWORD *))(*v35 + 8))(v35);
  v27 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_49;
  }
  result = MEMORY[0x19AEA534C](v27);
LABEL_49:
  v29 = *(_QWORD *)(v27 + 8);
  v30 = v29 - 1;
  *(_QWORD *)(v27 + 8) = v29 - 1;
  if (v29 == 1)
  {
    v34 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    v32 = v34 != 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  v33 = __ldxr((unsigned __int8 *)v27);
  if (v33 != 1)
  {
    __clrex();
LABEL_56:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v27);
    if (v30)
      return result;
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
    goto LABEL_56;
  if (v30)
    return result;
LABEL_57:
  if (v31)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  if (!v32)
    return WTF::fastFree((WTF *)v27, v25);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaResource::notifyFinished(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::MediaResource::notifyFinished(a1 - 32, a2, a3);
}

uint64_t WebCore::isUpgradeMixedContentEnabled(WebCore *this, WebCore::Document *a2)
{
  int v3;
  WebCore *v4;

  {
    if (WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent)
      return (*(_QWORD *)(*((_QWORD *)this + 85) + 696) >> 62) & 1;
  }
  else
  {
    v4 = this;
    v3 = WTF::linkedOnOrAfterSDKWithBehavior();
    this = v4;
    WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent = v3;
    if (v3)
      return (*(_QWORD *)(*((_QWORD *)this + 85) + 696) >> 62) & 1;
  }
  return 0;
}

WTF::StringImpl *WebCore::logConsoleWarning(uint64_t a1, int a2, int8x16_t *a3, uint64_t a4, WTF::URL *a5)
{
  uint64_t v8;
  int8x16_t *v9;
  char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned int v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  if (a2)
    v8 = 17;
  else
    v8 = 21;
  if (a2)
    v9 = (int8x16_t *)" was allowed to ";
  else
    v9 = (int8x16_t *)" was not allowed to ";
  if (a2)
    v10 = "";
  else
    v10 = "[blocked] ";
  if (a2)
    v11 = 1;
  else
    v11 = 11;
  WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(*(_QWORD *)(a1 + 296) + 736));
  WTF::URL::stringCenterEllipsizedToLength(a5);
  v40 = v11 - 1;
  if ((unint64_t)(v11 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195EFEAC0);
  }
  v41 = v8 - 1;
  if ((unint64_t)(v8 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195EFEAECLL);
  }
  if (a4)
  {
    if ((unint64_t)--a4 >> 31)
    {
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x195EFEA94);
    }
  }
  if (v44)
  {
    v13 = *((_DWORD *)v44 + 1);
    if (v43)
      goto LABEL_18;
LABEL_63:
    v14 = 0;
    goto LABEL_19;
  }
  v13 = 0;
  if (!v43)
    goto LABEL_63;
LABEL_18:
  v14 = *((_DWORD *)v43 + 1);
  if (v14 < 0)
    goto LABEL_77;
LABEL_19:
  v15 = __OFADD__(v14, 2);
  v16 = v14 + 2;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__(v16, 23);
  v17 = v16 + 23;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__((_DWORD)a4, v17);
  v18 = a4 + v17;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__(v41, v18);
  v19 = v41 + v18;
  v20 = v15;
  if (v13 < 0)
    goto LABEL_77;
  if (v20)
    goto LABEL_77;
  v15 = __OFADD__(v13, v19);
  v21 = v13 + v19;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__(v21, 12);
  v22 = v21 + 12;
  if (v15)
    goto LABEL_77;
  v23 = (v40 + v22);
  if (__OFADD__((_DWORD)v40, v22))
    goto LABEL_77;
  if (v44 && (*((_BYTE *)v44 + 16) & 4) == 0 || v43 && (*((_BYTE *)v43 + 16) & 4) == 0)
  {
    if ((_DWORD)v23)
    {
      if (v23 > 0x7FFFFFEF)
        goto LABEL_77;
      WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
      v24 = v45;
      if (!v45)
        goto LABEL_77;
      v25 = (char *)v45 + 20;
      *(_DWORD *)v45 = 2;
      *((_DWORD *)v24 + 1) = v23;
      *((_QWORD *)v24 + 1) = (char *)v24 + 20;
      *((_DWORD *)v24 + 4) = 0;
      v26 = (char *)v24 + 2 * v40 + 20;
      if ((v40 & 0x7FFFFFC0) != 0)
      {
        v32 = &v25[2 * (v40 & 0x7FFFFFC0)];
        v33 = 0uLL;
        do
        {
          v46.val[0] = *(int8x16_t *)v10;
          v34 = *((int8x16_t *)v10 + 1);
          v47.val[0] = (int8x16_t)*((_OWORD *)v10 + 2);
          v35 = *((_OWORD *)v10 + 3);
          v10 += 64;
          v36 = v35;
          v47.val[1] = 0uLL;
          v48.val[0] = v34;
          v46.val[1] = 0uLL;
          v37 = v25;
          vst2q_s8(v37, v46);
          v37 += 32;
          v48.val[1] = 0uLL;
          vst2q_s8(v37, v48);
          v38 = v25 + 64;
          vst2q_s8(v38, v47);
          v39 = v25 + 96;
          vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
          v25 += 128;
        }
        while (v25 != v32);
        v25 = v32;
      }
      while (v25 != v26)
      {
        v27 = *v10++;
        *(_WORD *)v25 = v27;
        v25 += 2;
      }
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v26, (int8x16_t *)"The page at ", 12, (uint64_t)v44, v9, v41, a3, a4, (int8x16_t *)" insecure content from ", 23, (uint64_t)v43, (int8x16_t *)".\n", 2);
      goto LABEL_46;
    }
LABEL_70:
    v24 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_46;
  }
  if (!(_DWORD)v23)
    goto LABEL_70;
  if ((v23 & 0x80000000) != 0)
    goto LABEL_77;
  WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
  v24 = v45;
  if (!v45)
    goto LABEL_77;
  v28 = (char *)v45 + 20;
  *(_DWORD *)v45 = 2;
  *((_DWORD *)v24 + 1) = v23;
  *((_QWORD *)v24 + 1) = (char *)v24 + 20;
  *((_DWORD *)v24 + 4) = 4;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v28, v10, v40, "The page at ", 0xCu, (uint64_t)v44, v9->i8, v41, a3->i8, a4, " insecure content from ", 23, (uint64_t)v43, ".\n", 2);
LABEL_46:
  v45 = v24;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v12);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v12);
    else
      *(_DWORD *)v44 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 296);
  if (v29)
  {
    *(_DWORD *)(v29 + 24) += 2;
    WebCore::Document::addConsoleMessage((_QWORD *)v29, 8, 1, &v45, 0);
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::addConsoleMessage(0, 8, 1, &v45, 0);
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MixedContentChecker::shouldUpgradeInsecureContent(WebCore **a1, int a2, WebCore::LocalFrame *a3, int a4, unsigned int a5, int a6)
{
  WebCore *v6;
  int v12;
  uint64_t v13;
  unint64_t v15;
  WebCore::Quirks *v16;
  int v17;

  v6 = a1[37];
  if (!v6)
    return 0;
  *((_DWORD *)v6 + 6) += 2;
  {
    v12 = WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent;
  }
  else
  {
    v17 = a2;
    v12 = WTF::linkedOnOrAfterSDKWithBehavior();
    a2 = v17;
    WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent = v12;
  }
  if (!v12)
    goto LABEL_8;
  v13 = 0;
  if ((*(_QWORD *)(*((_QWORD *)v6 + 85) + 696) & 0x4000000000000000) != 0 && a2)
  {
    if (!WebCore::foundMixedContentInFrameTree(a1[37], a3, a3))
      goto LABEL_8;
    v15 = *(_QWORD *)(*((_QWORD *)v6 + 85) + 680);
    if ((WTF::URL::protocolIs() & 1) != 0)
      goto LABEL_8;
    if ((v15 & 0x200000) == 0)
    {
      WTF::URL::host(a3);
      if ((WTF::URL::hostIsIPAddress() & 1) != 0)
        goto LABEL_8;
    }
    v13 = 0;
    if (a5 <= 0x12 && ((1 << a5) & 0x40042) != 0)
    {
      if (a5 != 6 || a6 != 2)
      {
        if (a4 != 3)
        {
LABEL_27:
          WebCore::logConsoleWarningForUpgrade((WebCore *)a1, 0, a3, (const WTF::URL *)((v15 >> 21) & 1));
          v13 = 1;
          goto LABEL_9;
        }
        v16 = (WebCore::Quirks *)*((_QWORD *)v6 + 86);
        if (!v16)
          v16 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v6);
        if (WebCore::Quirks::needsRelaxedCorsMixedContentCheckQuirk(v16))
        {
          v13 = 0;
          if (((1 << a5) & 0x40042) == 0)
            goto LABEL_9;
          goto LABEL_27;
        }
      }
LABEL_8:
      v13 = 0;
    }
  }
LABEL_9:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return v13;
}

WTF::StringImpl *WebCore::logConsoleWarningForUpgrade(WebCore *this, const WebCore::LocalFrame *a2, WTF::URL *a3, const WTF::URL *a4)
{
  char v5;
  int isLocalhostAddress;
  uint64_t v8;
  int8x16_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  int8x16_t *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  int8x16_t *i;
  uint64_t v50;
  char *v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  char *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int16 v67;
  char *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  unsigned __int128 *v71;
  unsigned __int128 *v72;
  unsigned __int128 *v73;
  unsigned __int128 v74;
  unsigned __int128 *v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  char v79;
  char v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int8x16_t *__src;
  int8x16_t *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;

  v5 = (char)a2;
  if ((a4 & 1) == 0)
  {
    v12 = WTF::URL::host(a3);
    isLocalhostAddress = WebCore::SecurityOrigin::isLocalhostAddress(v12, v13);
    if ((v5 & 1) == 0)
      goto LABEL_3;
LABEL_11:
    v10 = "[blocked] ";
    v11 = 11;
    v8 = 17;
    v9 = (int8x16_t *)"blocked and must";
    goto LABEL_12;
  }
  isLocalhostAddress = 0;
  if ((a2 & 1) != 0)
    goto LABEL_11;
LABEL_3:
  if (isLocalhostAddress)
    v8 = 62;
  else
    v8 = 34;
  if (isLocalhostAddress)
    v9 = (int8x16_t *)"not upgraded to HTTPS and must be served from the local host.";
  else
    v9 = (int8x16_t *)"automatically upgraded and should";
  v10 = "";
  v11 = 1;
LABEL_12:
  WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(*((_QWORD *)this + 37) + 736));
  WTF::URL::stringCenterEllipsizedToLength(a3);
  v15 = 24;
  if (isLocalhostAddress)
    v15 = 2;
  v16 = "\n";
  if (!isLocalhostAddress)
    v16 = " be served over HTTPS.\n";
  v85 = (int8x16_t *)v16;
  v81 = v11 - 1;
  if (v81 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195EFF370);
  }
  v82 = v8 - 1;
  if ((unint64_t)(v8 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195EFF39CLL);
  }
  v83 = v15 - 1;
  if ((unint64_t)(v15 - 1) >> 31)
  {
LABEL_133:
    __break(0xC471u);
    JUMPOUT(0x195EFF344);
  }
  if (v87)
  {
    v17 = *((_DWORD *)v87 + 1);
    if (v86)
    {
LABEL_21:
      v18 = *((_DWORD *)v86 + 1);
      goto LABEL_22;
    }
  }
  else
  {
    v17 = 0;
    if (v86)
      goto LABEL_21;
  }
  v18 = 0;
LABEL_22:
  v19 = v82 + v83;
  if (__OFADD__((_DWORD)v82, (_DWORD)v83))
    goto LABEL_133;
  v20 = __OFADD__(v19, 19);
  v21 = v19 + 19;
  if (v20)
    goto LABEL_133;
  if (v18 < 0)
    goto LABEL_133;
  v20 = __OFADD__(v18, v21);
  v22 = v18 + v21;
  if (v20)
    goto LABEL_133;
  v20 = __OFADD__(v22, 33);
  v23 = v22 + 33;
  v24 = v20;
  if (v17 < 0)
    goto LABEL_133;
  if (v24)
    goto LABEL_133;
  v20 = __OFADD__(v17, v23);
  v25 = v17 + v23;
  if (v20)
    goto LABEL_133;
  v20 = __OFADD__(v25, 12);
  v26 = v25 + 12;
  if (v20)
    goto LABEL_133;
  v27 = (v81 + v26);
  if (__OFADD__((_DWORD)v81, v26))
    goto LABEL_133;
  if ((!v87 || (*((_BYTE *)v87 + 16) & 4) != 0) && (!v86 || (*((_BYTE *)v86 + 16) & 4) != 0))
  {
    if (!(_DWORD)v27)
      goto LABEL_110;
    if ((v27 & 0x80000000) != 0)
      goto LABEL_133;
    WTF::tryFastCompactMalloc((WTF *)(v27 + 20));
    v28 = v89;
    if (!v89)
      goto LABEL_133;
    __src = v9;
    v45 = (char *)(v89 + 5);
    *v89 = 2;
    v28[1] = v27;
    *((_QWORD *)v28 + 1) = v28 + 5;
    v28[4] = 4;
    if ((_DWORD)v81)
    {
      if ((_DWORD)v81 == 1)
        *v45 = *v10;
      else
        memcpy(v28 + 5, v10, v81);
    }
    v46 = &v45[v81];
    *(_QWORD *)v46 = *(_QWORD *)"The page at ";
    *((_DWORD *)v46 + 2) = 544497952;
    v47 = &v45[v81 + 12];
    if (v87)
    {
      v14 = (char *)*((_QWORD *)v87 + 1);
      v48 = *((unsigned int *)v87 + 1);
      if ((*((_BYTE *)v87 + 16) & 4) != 0)
      {
        i = __src;
        if ((_DWORD)v48)
        {
          if ((_DWORD)v48 == 1)
            *v47 = *v14;
          else
            memcpy(&v45[v81 + 12], v14, v48);
        }
      }
      else
      {
        v71 = (unsigned __int128 *)&v47[v48];
        if (v48 < 0x10)
        {
          v72 = (unsigned __int128 *)&v45[v81 + 12];
        }
        else
        {
          v72 = (unsigned __int128 *)&v47[v48 & 0xFFFFFFF0];
          v73 = (unsigned __int128 *)&v45[v81 + 12];
          do
          {
            v74 = (unsigned __int128)vld2q_s8(v14);
            v14 += 32;
            *v73++ = v74;
          }
          while (v73 != v72);
        }
        for (i = __src; v72 != v71; v72 = (unsigned __int128 *)((char *)v72 + 1))
        {
          v79 = *v14;
          v14 += 2;
          *(_BYTE *)v72 = v79;
        }
      }
      v50 = *((unsigned int *)v87 + 1);
    }
    else
    {
      v50 = 0;
      i = __src;
    }
    v51 = &v47[v50];
    qmemcpy(v51, " requested insecure content from ", 33);
    v52 = v51 + 33;
    if (v86)
    {
      v14 = (char *)*((_QWORD *)v86 + 1);
      v53 = *((unsigned int *)v86 + 1);
      if ((*((_BYTE *)v86 + 16) & 4) != 0)
      {
        if ((_DWORD)v53)
        {
          if ((_DWORD)v53 == 1)
            *v52 = *v14;
          else
            memcpy(v52, v14, v53);
        }
      }
      else
      {
        v75 = (unsigned __int128 *)&v52[v53];
        if (v53 < 0x10)
        {
          v76 = (unsigned __int128 *)v52;
        }
        else
        {
          v76 = (unsigned __int128 *)&v52[v53 & 0xFFFFFFF0];
          v77 = (unsigned __int128 *)v52;
          do
          {
            v78 = (unsigned __int128)vld2q_s8(v14);
            v14 += 32;
            *v77++ = v78;
          }
          while (v77 != v76);
        }
        for (i = __src; v76 != v75; v76 = (unsigned __int128 *)((char *)v76 + 1))
        {
          v80 = *v14;
          v14 += 2;
          *(_BYTE *)v76 = v80;
        }
      }
      v54 = *((unsigned int *)v86 + 1);
    }
    else
    {
      v54 = 0;
    }
    v55 = &v52[v54];
    *(_OWORD *)v55 = *(_OWORD *)". This content was ";
    *(_DWORD *)(v55 + 15) = 544432503;
    v56 = v55 + 19;
    if ((_DWORD)v82)
    {
      if ((_DWORD)v82 == 1)
      {
        *v56 = i->i8[0];
        if (!(_DWORD)v83)
          goto LABEL_95;
        goto LABEL_75;
      }
      memcpy(v55 + 19, i, v82);
    }
    if (!(_DWORD)v83)
      goto LABEL_95;
LABEL_75:
    v57 = &v56[v82];
    if ((_DWORD)v83 == 1)
      *v57 = v85->i8[0];
    else
      memcpy(v57, v85, v83);
    goto LABEL_95;
  }
  if (!(_DWORD)v27)
  {
LABEL_110:
    v28 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_95;
  }
  if (v27 > 0x7FFFFFEF)
    goto LABEL_133;
  WTF::tryFastCompactMalloc((WTF *)(2 * v27 + 20));
  v28 = v89;
  if (!v89)
    goto LABEL_133;
  v29 = (char *)(v89 + 5);
  *v89 = 2;
  v28[1] = v27;
  *((_QWORD *)v28 + 1) = v28 + 5;
  v28[4] = 0;
  v30 = (uint64_t)v28 + 2 * v81 + 20;
  if ((v81 & 0x7FFFFFC0) != 0)
  {
    v31 = &v29[2 * (v81 & 0x7FFFFFC0)];
    v32 = 0uLL;
    do
    {
      v90.val[0] = *(int8x16_t *)v10;
      v33 = *((int8x16_t *)v10 + 1);
      v92.val[0] = (int8x16_t)*((_OWORD *)v10 + 2);
      v34 = *((_OWORD *)v10 + 3);
      v10 += 64;
      v35 = v34;
      v92.val[1] = 0uLL;
      v94.val[0] = v33;
      v90.val[1] = 0uLL;
      v36 = v29;
      vst2q_s8(v36, v90);
      v36 += 32;
      v94.val[1] = 0uLL;
      vst2q_s8(v36, v94);
      v37 = v29 + 64;
      vst2q_s8(v37, v92);
      v38 = v29 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v29 += 128;
    }
    while (v29 != v31);
    v29 = v31;
  }
  while (v29 != (char *)v30)
  {
    v39 = *(unsigned __int8 *)v10++;
    *(_WORD *)v29 = v39;
    v29 += 2;
  }
  *(_OWORD *)v30 = xmmword_1969F2850;
  *(_QWORD *)(v30 + 16) = 0x20007400610020;
  v40 = (char *)(v30 + 24);
  if (v87)
  {
    v41 = (int8x16_t *)*((_QWORD *)v87 + 1);
    v42 = *((unsigned int *)v87 + 1);
    if ((*((_BYTE *)v87 + 16) & 4) != 0)
    {
      v43 = &v40[2 * v42];
      if (v42 >= 0x40)
      {
        v44 = &v40[2 * (v42 & 0xFFFFFFC0)];
        v59 = 0uLL;
        v60 = v40;
        do
        {
          v91.val[0] = *v41;
          v61 = v41[1];
          v93.val[0] = v41[2];
          v62 = v41[3];
          v41 += 4;
          v63 = v62;
          v93.val[1] = 0uLL;
          v95.val[0] = v61;
          v91.val[1] = 0uLL;
          v64 = v60;
          vst2q_s8(v64, v91);
          v64 += 32;
          v95.val[1] = 0uLL;
          vst2q_s8(v64, v95);
          v65 = v60 + 64;
          vst2q_s8(v65, v93);
          v66 = v60 + 96;
          vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
          v60 += 128;
        }
        while (v60 != v44);
      }
      else
      {
        v44 = v40;
      }
      while (v44 != v43)
      {
        v67 = v41->u8[0];
        v41 = (int8x16_t *)((char *)v41 + 1);
        *(_WORD *)v44 = v67;
        v44 += 2;
      }
    }
    else if ((_DWORD)v42 == 1)
    {
      *(_WORD *)v40 = v41->i16[0];
    }
    else if ((_DWORD)v42)
    {
      memcpy(v40, v41, 2 * v42);
    }
    v58 = *((unsigned int *)v87 + 1);
  }
  else
  {
    v58 = 0;
  }
  v68 = &v40[2 * v58];
  *(_OWORD *)v68 = xmmword_1969F2860;
  *((_OWORD *)v68 + 1) = xmmword_1969F2870;
  *((_OWORD *)v68 + 2) = xmmword_1969F2880;
  *((_OWORD *)v68 + 3) = xmmword_1969F2890;
  *((_WORD *)v68 + 32) = 32;
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_WORD *)v68 + 33, (uint64_t)v86, (int8x16_t *)". This content was ", 19, v9, v82, v85, v83);
LABEL_95:
  v88 = (WTF::StringImpl *)v28;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v86 -= 2;
  }
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v87 -= 2;
  }
  WebCore::Document::addConsoleMessage(*((_QWORD **)this + 37), 8, 1, &v88, 0);
  result = v88;
  v88 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MixedContentChecker::shouldBlockRequestForDisplayableContent(uint64_t a1, const WebCore::LocalFrame *a2, int a3, const WTF::URL *a4)
{
  const WTF::URL *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  WTF::URL *v23;
  uint64_t v24;

  if ((WebCore::shouldBlockInsecureContent((WebCore **)a1, a2, a4) & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 296);
    if (!v8
        ? (v24 = *(_QWORD *)(a1 + 296),
           v9 = WTF::linkedOnOrAfterSDKWithBehavior(),
           v8 = v24,
           WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent = v9,
        : (v9 = WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent),
          v9 && (*(_QWORD *)(*(_QWORD *)(v8 + 680) + 696) & 0x4000000000000000) != 0
       || (v22 = a3, v23 = a2, !WebCore::foundMixedContentInFrameTree(*(WebCore **)(a1 + 296), a2, v7))))
    {
      v10 = 1;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 296);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v12 + 192));
      if (v13)
      {
        v14 = v13;
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 + 1, v13));
        v16 = WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent((WebCore::ContentSecurityPolicy *)v13, v23);
        if (!atomic_load(v14))
          goto LABEL_34;
        do
          v18 = __ldaxr(v14);
        while (__stlxr(v18 - 1, v14));
        if (v16)
          goto LABEL_19;
      }
      else if ((WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent(0, v23) & 1) != 0)
      {
LABEL_19:
        if (!*(_BYTE *)(v12 + 277) && (v22 == 1 || (*(_QWORD *)(*(_QWORD *)(a1 + 136) + 664) & 0x4000) != 0))
        {
          v19 = *(_QWORD *)(a1 + 296);
          v20 = *(unsigned __int8 *)(v19 + 275);
          WebCore::logConsoleWarning(a1, *(_BYTE *)(v19 + 275) == 0, (int8x16_t *)"display", 8, v23);
          if (!v20)
          {
            *(_BYTE *)(v12 + 273) |= 1u;
            v21 = *(_QWORD *)(a1 + 280);
            ++*(_DWORD *)v21;
            (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 16) + 552))(*(_QWORD *)(v21 + 16));
            if (*(_DWORD *)v21)
            {
              --*(_DWORD *)v21;
              v10 = 1;
              goto LABEL_30;
            }
LABEL_34:
            __break(0xC471u);
            JUMPOUT(0x195EFF5F4);
          }
        }
        else
        {
          WebCore::logConsoleWarning(a1, 0, (int8x16_t *)"display", 8, v23);
        }
        v10 = 0;
        goto LABEL_30;
      }
      v10 = 0;
      if (v12)
      {
LABEL_30:
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
    }
    return v10 ^ 1u;
  }
  return 1;
}

uint64_t WebCore::shouldBlockInsecureContent(WebCore **a1, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  WebCore *v3;
  char v4;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1[37];
  if (!v3)
    return 0;
  v4 = (char)a3;
  *((_DWORD *)v3 + 6) += 2;
  {
    v7 = WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent;
  }
  else
  {
    v7 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebCore::isUpgradeMixedContentEnabled(WebCore::Document &)::shouldBlockOptionallyBlockableMixedContent = v7;
  }
  if (!v7
    || (*(_QWORD *)(*((_QWORD *)v3 + 85) + 696) & 0x4000000000000000) == 0
    || !WebCore::foundMixedContentInFrameTree(a1[37], a2, a3)
    || ((v10 = WTF::URL::protocol(a2), WebCore::LegacySchemeRegistry::schemeIsHandledBySchemeHandler(v10, v11))
     || (v12 = WTF::URL::host(a2), WebCore::SecurityOrigin::isLocalhostAddress(v12, v13)))
    && (v4 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v8 = 1;
    WebCore::logConsoleWarningForUpgrade((WebCore *)a1, (const WebCore::LocalFrame *)1, a2, (const WTF::URL *)((*(_QWORD *)(*((_QWORD *)v3 + 85) + 680) >> 21) & 1));
  }
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return v8;
}

uint64_t WebCore::MixedContentChecker::shouldBlockRequestForRunnableContent(WebCore **a1, WebCore::Document *a2, WebCore::LocalFrame *a3, int a4)
{
  if ((WebCore::shouldBlockInsecureContent(a1, a3, 0) & 1) != 0)
    return 1;
  else
    return WebCore::MixedContentChecker::frameAndAncestorsCanRunInsecureContent((uint64_t)a1, a2, a3, a4) ^ 1;
}

uint64_t WebCore::MixedContentChecker::checkFormForMixedContent(WebCore **this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  uint64_t result;
  const WTF::URL *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore *v10;
  void *v11;
  WebCore *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  result = WTF::URL::protocolIsJavaScript(a2);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WebCore::isMixedContent(this[37], a2, v6);
    if ((_DWORD)result)
    {
      WTF::URL::stringCenterEllipsizedToLength((WebCore *)((char *)this[37] + 736));
      WTF::URL::stringCenterEllipsizedToLength(a2);
      v19[0] = "The page at ";
      v19[1] = 13;
      v18[0] = " contains a form which targets an insecure URL ";
      v18[1] = 48;
      v17[0] = ".\n";
      v17[1] = 3;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v19, (uint64_t *)&v15, (uint64_t)v18, (uint64_t *)&v14, (uint64_t)v17, &v16);
      if (!v16)
        goto LABEL_24;
      v8 = v14;
      v14 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v15;
      v15 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = this[37];
      if (v10)
      {
        *((_DWORD *)v10 + 6) += 2;
        WebCore::Document::addConsoleMessage(v10, 8, 1, &v16, 0);
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v11);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      else
      {
        WebCore::Document::addConsoleMessage(0, 8, 1, &v16, 0);
      }
      v12 = this[35];
      ++*(_DWORD *)v12;
      (*(void (**)(_QWORD))(**((_QWORD **)v12 + 2) + 552))(*((_QWORD *)v12 + 2));
      if (!*(_DWORD *)v12)
      {
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x195EFF970);
      }
      --*(_DWORD *)v12;
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WebCore::NavigationAction::MouseEventData *WebCore::isMixedContent(WebCore *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  WebCore::SecurityContext *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const WTF::URL *v8;
  uint64_t v9;
  WebCore::NavigationAction::MouseEventData *result;
  WebCore::NavigationAction::MouseEventData *v11;
  const WebCore::MouseEvent *v12;
  char v13;
  char *v14;

  v4 = (WebCore *)((char *)this + 192);
  WebCore::SecurityContext::securityOrigin((WebCore *)((char *)this + 192), a2);
  v6 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v6 == -1)
  {
    v11 = (WebCore::NavigationAction::MouseEventData *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::NavigationAction::MouseEventData::MouseEventData(v11, v12);
  }
  v14 = &v13;
  v7 = (_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E33F6980[v6])(&v14, v5 + 8);
  if ((MEMORY[0x19AEA53F4](*v7, "https", 5) & 1) != 0)
    return (WebCore::NavigationAction::MouseEventData *)(WebCore::SecurityOrigin::isSecure(a2, v8) ^ 1);
  WebCore::SecurityContext::securityOrigin(v4, v8);
  if (*(_DWORD *)(v9 + 32) != 1)
    return 0;
  result = (WebCore::NavigationAction::MouseEventData *)WTF::URL::protocolIs();
  if ((_DWORD)result)
    return (WebCore::NavigationAction::MouseEventData *)(WebCore::SecurityOrigin::isSecure(a2, v8) ^ 1);
  return result;
}

WebCore::NavigationAction::MouseEventData *WebCore::NavigationAction::MouseEventData::MouseEventData(WebCore::NavigationAction::MouseEventData *this, const WebCore::MouseEvent *a2)
{
  int v4;
  __int16 v5;

  *(_BYTE *)this = (*((_DWORD *)a2 + 5) & 0x200) != 0;
  *((_BYTE *)this + 1) = (*((_BYTE *)a2 + 84) & 8) != 0;
  *((_BYTE *)this + 2) = (*((_BYTE *)a2 + 84) & 2) != 0;
  *((_BYTE *)this + 3) = *((_BYTE *)a2 + 84) & 1;
  *((_BYTE *)this + 4) = (*((_BYTE *)a2 + 84) & 4) != 0;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 18);
  *((float *)this + 4) = WebCore::MouseRelatedEvent::locationInRootViewCoordinates(a2, a2);
  *((_DWORD *)this + 5) = v4;
  v5 = *((_WORD *)a2 + 77);
  if ((unsigned __int16)(v5 + 2) >= 5u)
    LOBYTE(v5) = 3;
  *((_BYTE *)this + 24) = v5;
  *(_WORD *)((char *)this + 25) = *((_WORD *)a2 + 79);
  return this;
}

WebCore::NavigationAction *WebCore::NavigationAction::copyWithShouldOpenExternalURLsPolicy@<X0>(WebCore::NavigationAction *a1@<X0>, char a2@<W1>, WebCore::NavigationAction *a3@<X8>)
{
  WebCore::NavigationAction *result;

  result = WebCore::NavigationAction::NavigationAction(a3, a1);
  *((_BYTE *)result + 871) = a2;
  return result;
}

WTF::StringImpl *WebCore::NavigationScheduler::timerFired(WTF::StringImpl *this, WebCore::Frame *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  v3 = v2 + 2;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *((_QWORD *)v2 + 3);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 339))
      {
        this = WebCore::InspectorInstrumentation::frameClearedScheduledNavigation((WTF::StringImpl *)v2, a2);
      }
      else
      {
        v7 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = 0;
        (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v7 + 16))(v7, v2);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v12 = *((_QWORD *)v2 + 3);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
              WebCore::InspectorInstrumentation::frameClearedScheduledNavigationImpl(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8), (WebCore::Frame *)v2);
          }
        }
        this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    atomic_store(1u, v3);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v3;
    v14 = (uint64_t)v11;
    WTF::ensureOnMainThread();
    this = (WTF::StringImpl *)v14;
    if (v14)
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return this;
}

void WebCore::NavigationScheduler::~NavigationScheduler(WebCore::NavigationScheduler *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = off_1E31F7378;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase((WebCore::NavigationScheduler *)((char *)this + 16));
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameClearedScheduledNavigation(WTF::StringImpl *this, WebCore::Frame *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return WebCore::InspectorInstrumentation::frameClearedScheduledNavigationImpl(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8), this);
    }
  }
  return this;
}

uint64_t WebCore::NavigationScheduler::scheduleRedirect(uint64_t result, WebCore::Document *a2, WTF::URL *this, char a4, double a5)
{
  uint64_t v5;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WebCore::UserGestureToken *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  _DWORD *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 24);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return result;
  v10 = (_QWORD *)result;
  result = WTF::URL::protocolIsJavaScript(this);
  if ((result & 1) != 0)
    goto LABEL_15;
  v12 = *(_QWORD *)(v10[1] + 8);
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
  if (v15)
    v16 = *(_BYTE *)(v15 + 144) == 0;
  else
    v16 = 0;
  if (v16)
  {
    v17 = (*(_DWORD *)(v15 + 608) | WebCore::NavigationDisabler::s_globalNavigationDisableCount) == 0;
    do
    {
      v18 = __ldaxr(v13);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v13));
    if (v19)
    {
      if (!v17)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    do
      v35 = __ldaxr(v13);
    while (__stlxr(v35 - 1, v13));
    if (v35 != 1)
    {
LABEL_15:
      if (a5 >= 0.0 && a5 <= 2147483.0)
      {
        if (*(_QWORD *)this)
        {
          if (*(_DWORD *)(*(_QWORD *)this + 4))
          {
            v20 = v10[9];
            if (!v20 || *(double *)(v20 + 8) >= a5)
            {
              v21 = *(_QWORD *)(v10[1] + 8);
              if (*(_BYTE *)(v21 + 144))
              {
                __break(0xC471u);
                JUMPOUT(0x195F00008);
              }
              WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v21 + 296) + 192), v11);
              v23 = v22;
              if (v22)
              {
                do
                  v24 = __ldaxr(v22);
                while (__stlxr(v24 + 1, v22));
              }
              v25 = WTF::fastMalloc((WTF *)0x90);
              v40 = 0;
              v26 = WebCore::ScheduledURLNavigation::ScheduledURLNavigation(v25, a2, v23, (uint64_t)this, &v40, 1, a5 <= 1.0, 0, a5, 0);
              *(_QWORD *)v26 = off_1E33F69A0;
              *(_BYTE *)(v26 + 137) = a4;
              v28 = *(WebCore::UserGestureToken **)(v26 + 24);
              *(_QWORD *)(v25 + 24) = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                {
                  WebCore::UserGestureToken::~UserGestureToken(v28, v27);
                  WTF::fastFree(v37, v38);
                }
                else
                {
                  --*(_DWORD *)v28;
                }
              }
              v39 = v25;
              WebCore::NavigationScheduler::schedule(v10, &v39);
              result = v39;
              v39 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              if (v23)
              {
                do
                {
                  v30 = __ldaxr(v23);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v23));
                if (!v31)
                {
                  atomic_store(1u, v23);
                  v32 = (WTF::StringImpl *)*((_QWORD *)v23 + 6);
                  *((_QWORD *)v23 + 6) = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, v29);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v33 = (WTF::StringImpl *)*((_QWORD *)v23 + 5);
                  *((_QWORD *)v23 + 5) = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, v29);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v34 = v23[8];
                  if ((_DWORD)v34 != -1)
                    ((void (*)(_DWORD **, unsigned int *))off_1E33F6940[v34])(&v40, v23 + 2);
                  v23[8] = -1;
                  return WTF::fastFree((WTF *)v23, v29);
                }
              }
            }
          }
        }
      }
      return result;
    }
    LOBYTE(v17) = 1;
  }
  atomic_store(1u, v13);
  v36 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = off_1E31FE290;
  *(_QWORD *)(v36 + 8) = v13;
  v40 = (_DWORD *)v36;
  WTF::ensureOnMainThread();
  result = (uint64_t)v40;
  v40 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v17)
    goto LABEL_15;
  return result;
}

void WebCore::NavigationScheduler::schedule(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FrameLoader *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::DocumentLoader *v15;
  WebCore::FrameLoader *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(a1[1] + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*(_BYTE *)(v4 + 144))
    v7 = 0;
  else
    v7 = v4;
  if (*(_BYTE *)(*a2 + 18))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v15 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v7 + 280) + 96);
    if (v15)
    {
      ++*((_DWORD *)v15 + 6);
      WebCore::DocumentLoader::stopLoading(v15);
      if (*((_DWORD *)v15 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v15 + 24))(v15);
      else
        --*((_DWORD *)v15 + 6);
    }
    v16 = *(WebCore::FrameLoader **)(v7 + 280);
    ++*(_DWORD *)v16;
    WebCore::FrameLoader::stopLoading(v16, 2);
    if (!*(_DWORD *)v16)
      goto LABEL_32;
    --*(_DWORD *)v16;
  }
  WebCore::NavigationScheduler::cancel(a1, 0);
  v9 = *a2;
  *a2 = 0;
  v10 = a1[9];
  a1[9] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v7)
  {
    v11 = *(WebCore::FrameLoader **)(v7 + 280);
    if (!*((_BYTE *)v11 + 216))
    {
      if (*(_BYTE *)(a1[9] + 19))
      {
        ++*(_DWORD *)v11;
        WebCore::FrameLoader::completed(v11);
        if (*(_DWORD *)v11)
        {
          --*(_DWORD *)v11;
          goto LABEL_15;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x195F00208);
      }
    }
  }
LABEL_15:
  v12 = *(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 24);
  if (v12 && *(_QWORD *)(v12 + 8))
    WebCore::NavigationScheduler::startTimer((uint64_t)a1);
  do
  {
    v13 = __ldaxr(v5);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v5));
  if (!v14)
  {
    atomic_store(1u, v5);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E31FE290;
    v17[1] = v5;
    v18 = v17;
    WTF::ensureOnMainThread();
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
}

uint64_t WebCore::NavigationScheduler::mustLockBackForwardList(WebCore::NavigationScheduler *this, WebCore::Frame *a2)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *((unsigned __int8 *)this + 144);
  if (*((_BYTE *)this + 144))
  {
    WebCore::UserGestureIndicator::processingUserGesture(0, a2);
    goto LABEL_9;
  }
  v4 = (unsigned int *)((char *)this + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (WTF::isMainThread(this))
  {
    {
      if (WebCore::currentToken(void)::token
        && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
        && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
      {
        goto LABEL_9;
      }
    }
    else
    {
      WebCore::currentToken(void)::token = 0;
    }
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 35) + 88);
  if (v6 && !*(_BYTE *)(v6 + 3545))
  {
    v8 = 1;
LABEL_12:
    v9 = (unsigned int *)((char *)this + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E31FE290;
      v22[1] = v9;
      v24 = v22;
      WTF::ensureOnMainThread();
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    }
    return v8;
  }
LABEL_9:
  v7 = *((_QWORD *)this + 7);
  if (v7 && (v13 = *(_QWORD *)(v7 + 8)) != 0)
  {
    while (1)
    {
      if (!*(_BYTE *)(v13 + 144))
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v16 = *(_QWORD *)(v13 + 296);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = v17 + 2;
          v18 = *(_BYTE *)(*(_QWORD *)(v13 + 280) + 216) ? *(unsigned __int8 *)(v16 + 3386) : 1;
          if (v17)
          {
            *(_DWORD *)(v16 + 24) = v17;
          }
          else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v16);
          }
        }
        else
        {
          v18 = *(_BYTE *)(*(_QWORD *)(v13 + 280) + 216) == 0;
        }
        do
        {
          v19 = __ldaxr(v14);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v14));
        if (!v20)
        {
          atomic_store(1u, v14);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v23 = off_1E31FE290;
          v23[1] = v14;
          v25 = v23;
          WTF::ensureOnMainThread();
          if (v25)
            (*(void (**)(_QWORD *))(*v25 + 8))(v25);
        }
        if (v18)
          break;
      }
      v21 = *(_QWORD *)(v13 + 56);
      if (!v21)
        goto LABEL_10;
      v8 = 0;
      v13 = *(_QWORD *)(v21 + 8);
      if (!v13)
        goto LABEL_11;
    }
    v8 = 1;
  }
  else
  {
LABEL_10:
    v8 = 0;
  }
LABEL_11:
  if (!v3)
    goto LABEL_12;
  return v8;
}

void WebCore::NavigationScheduler::scheduleLocationChange(_QWORD *a1, WebCore::Document *a2, unsigned int *a3, WTF::URL *this, WTF::StringImpl **a5, char a6, char a7, char a8, uint64_t *a9)
{
  uint64_t v9;
  WebCore::Frame *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  char mustLockBackForwardList;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  WebCore::FrameLoader *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;
  _DWORD *v34;
  WebCore::Document *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *Ref;
  uint64_t v38;
  char v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  void *v46;
  unsigned int *v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  char v64;
  char v65;
  WebCore::FrameLoader *v67;
  uint64_t v68;
  WebCore::Node *v69[39];
  char v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  char v76;
  char v77;
  char v78;
  char shouldOpenExternalURLsPolicyToPropagate;
  char v80;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[7];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  int v88;
  char v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;

  v9 = *(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 24);
  if (!v9 || !*(_QWORD *)(v9 + 8))
    goto LABEL_78;
  if ((WTF::URL::protocolIsJavaScript(this) & 1) != 0)
    goto LABEL_15;
  v18 = *(_QWORD *)(a1[1] + 8);
  v19 = (unsigned int *)(v18 + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
  if (v21)
    v22 = *(_BYTE *)(v21 + 144) == 0;
  else
    v22 = 0;
  if (v22)
  {
    v23 = (*(_DWORD *)(v21 + 608) | WebCore::NavigationDisabler::s_globalNavigationDisableCount) == 0;
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (v25)
      goto LABEL_14;
    goto LABEL_70;
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (v57 == 1)
  {
    v23 = 1;
LABEL_70:
    atomic_store(1u, v19);
    v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v58 = off_1E31FE290;
    *((_QWORD *)v58 + 1) = v19;
    v73 = v58;
    WTF::ensureOnMainThread();
    v59 = v73;
    v73 = 0;
    if (v59)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v59 + 8))(v59);
LABEL_14:
    if (v23)
      goto LABEL_15;
LABEL_78:
    v60 = *a9;
    *a9 = 0;
    (*(void (**)(uint64_t, _QWORD, unsigned int *, WTF::URL *))(*(_QWORD *)v60 + 16))(v60, 0, a3, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    return;
  }
LABEL_15:
  if ((a7 & 1) != 0)
    mustLockBackForwardList = 1;
  else
    mustLockBackForwardList = WebCore::NavigationScheduler::mustLockBackForwardList(*(WebCore::NavigationScheduler **)(a1[1] + 8), v17);
  if (*(_BYTE *)(*(_QWORD *)(a1[1] + 8) + 144))
    v27 = 0;
  else
    v27 = *(_QWORD *)(a1[1] + 8);
  v64 = mustLockBackForwardList;
  if (v27)
  {
    v28 = (unsigned int *)(v27 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v30 = *(WebCore::FrameLoader **)(v27 + 280);
    if (v30)
    {
      v65 = 0;
      ++*(_DWORD *)v30;
      goto LABEL_25;
    }
  }
  else
  {
    v30 = 0;
  }
  v65 = 1;
LABEL_25:
  v67 = v30;
  if ((*((_BYTE *)this + 8) & 1) != 0
    && *(_QWORD *)this
    && v27
    && *(_DWORD *)(*(_QWORD *)this + 4) > *((_DWORD *)this + 9)
    && WTF::equalIgnoringFragmentIdentifier())
  {
    v31 = *(_QWORD *)(v27 + 296);
    if (v31)
      *(_DWORD *)(v31 + 24) += 2;
    WebCore::Document::completeURL((WebCore::Document *)v31, this, v31 + 848, 0, (WTF::URL *)&v73);
    v32 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v82 = v74;
    v83 = v75;
    v81 = v32;
    v84[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v84);
    v84[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v84[6] = v69[0];
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0x10000;
    v33 = v89 & 0x80 | 4;
    v89 = v33;
    v90 = 0;
    v34 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v34 += 2;
      v33 = v89;
    }
    v35 = a2;
    v91 = v34;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = v95 & 0xE0 | 5;
    v89 = v33 | 2;
    v96 = 0;
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v81, a5);
    Ref = v73;
    v73 = 0;
    if (Ref)
    {
      if (*(_DWORD *)Ref == 2)
        Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v36);
      else
        *(_DWORD *)Ref -= 2;
    }
    if (v31)
    {
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v31);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
    }
    v38 = WebCore::lexicalFrameFromCommonVM(Ref);
    if (v38)
      v39 = *(_QWORD *)(*(_QWORD *)(v38 + 128) + 8) != v38;
    else
      v39 = 1;
    v40 = v65;
    *((_DWORD *)v35 + 6) += 2;
    v69[0] = v35;
    WTF::AtomStringImpl::add();
    v41 = v73;
    v71 = 0;
    v72 = v73;
    WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)&v73, (uint64_t *)v69, a3, (uint64_t)&v81, (_DWORD **)&v72, v39, &v71);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v42);
      else
        *(_DWORD *)v41 -= 2;
    }
    if (v69[0])
    {
      if (*((_DWORD *)v69[0] + 6) == 2)
      {
        if ((*((_WORD *)v69[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v69[0]);
      }
      else
      {
        *((_DWORD *)v69[0] + 6) -= 2;
      }
    }
    v76 = a6;
    v77 = v64;
    v78 = 0;
    shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(v35, v42);
    v80 = a8;
    if (v67)
    {
      LOBYTE(v69[0]) = 0;
      v70 = 0;
      WebCore::FrameLoader::changeLocation(v67, (uint64_t)&v73, 0, (const WebCore::Document *)v69);
      if (v70)
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v69, v43);
    }
    v44 = *a9;
    *a9 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v73, v45);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v81, v46);
  }
  else
  {
    v47 = a3;
    v63 = v27;
    v48 = a8;
    if (v30)
      v49 = *((_DWORD *)v30 + 16) < 2;
    else
      v49 = 0;
    v50 = *a9;
    *a9 = 0;
    v51 = WTF::fastMalloc((WTF *)0xA0);
    v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v52 = &off_1E33F6A88;
    v52[1] = v50;
    WebCore::ScheduledURLNavigation::ScheduledURLNavigation(v51, a2, v47, (uint64_t)this, (_DWORD **)a5, a6, v64, v49, 0.0, 1);
    *(_QWORD *)v51 = off_1E33F6AB0;
    *(_QWORD *)(v51 + 144) = v52;
    *(_BYTE *)(v51 + 152) = v48;
    v68 = v51;
    WebCore::NavigationScheduler::schedule(a1, &v68);
    v53 = v68;
    v68 = 0;
    v27 = v63;
    v40 = v65;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  if ((v40 & 1) == 0)
  {
    if (!*(_DWORD *)v67)
    {
      __break(0xC471u);
      JUMPOUT(0x195F00A54);
    }
    --*(_DWORD *)v67;
  }
  if (v27)
  {
    v54 = (unsigned int *)(v27 + 8);
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      v61 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = off_1E31FE290;
      *((_QWORD *)v61 + 1) = v54;
      v73 = v61;
      WTF::ensureOnMainThread();
      v62 = v73;
      v73 = 0;
      if (v62)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v62 + 8))(v62);
    }
  }
}

uint64_t WebCore::NavigationScheduler::scheduleFormSubmission(_QWORD *a1, WebCore::Frame *a2)
{
  uint64_t v3;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  char mustLockBackForwardList;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  char v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  int IsJavaScript;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  char shouldOpenExternalURLsPolicyToPropagate;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::FormSubmission *v32;
  WebCore::UserGestureToken *v33;
  uint64_t result;
  WTF *v35;
  void *v36;
  WTF *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44[5];

  v3 = *(_QWORD *)(a1[1] + 8);
  if (*(_BYTE *)(v3 + 144))
  {
    __break(0xC471u);
    JUMPOUT(0x195F00D70);
  }
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 280) + 64);
  v6 = (unsigned int *)(v3 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  mustLockBackForwardList = WebCore::NavigationScheduler::mustLockBackForwardList((WebCore::NavigationScheduler *)v3, a2);
  do
  {
    v9 = __ldaxr(v6);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v6));
  if (!v10)
  {
    atomic_store(1u, v6);
    v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v39 = off_1E31FE290;
    *((_QWORD *)v39 + 1) = v6;
    v44[0] = v39;
    WTF::ensureOnMainThread();
    v40 = v44[0];
    v44[0] = 0;
    if (v40)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
  }
  v11 = *(WTF **)a2;
  if ((mustLockBackForwardList & 1) != 0)
  {
    v12 = 1;
    goto LABEL_17;
  }
  if (!*(_DWORD *)(*((_QWORD *)v11 + 10) + 64))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 56);
    if (v13)
    {
      if (*(_QWORD *)(v13 + 8))
      {
        if (WTF::isMainThread(v11))
        {
          {
            v14 = 0;
            WebCore::currentToken(void)::token = 0;
            goto LABEL_15;
          }
          v14 = WebCore::currentToken(void)::token;
          if (!WebCore::currentToken(void)::token)
          {
LABEL_15:
            v12 = v14 ^ 1;
            v11 = *(WTF **)a2;
            goto LABEL_17;
          }
          if (!*(_DWORD *)(WebCore::currentToken(void)::token + 68))
          {
            v14 = *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1;
            goto LABEL_15;
          }
        }
        v14 = 0;
        goto LABEL_15;
      }
    }
  }
  v12 = 0;
LABEL_17:
  WebCore::FormSubmission::requestURL((uint64_t)v11, (uint64_t)v44);
  IsJavaScript = WTF::URL::protocolIsJavaScript((WTF::URL *)v44);
  v17 = v44[0];
  v44[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = WTF::fastMalloc((WTF *)0x38);
  v19 = *(_BYTE *)(*(_QWORD *)a2 + 104);
  shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 80) + 56), v20);
  v22 = (WTF *)WebCore::ScheduledNavigation::ScheduledNavigation(v18, v19, v12, v5 < 2, shouldOpenExternalURLsPolicyToPropagate);
  *(_QWORD *)v18 = off_1E33F6AF8;
  v24 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v18 + 40) = v24;
  *(_WORD *)(v18 + 48) = 256;
  v25 = *(_QWORD *)(*((_QWORD *)v24 + 10) + 56);
  *(_DWORD *)(v25 + 24) += 2;
  if (!*(_BYTE *)(v25 + 3387))
  {
    if (WTF::isMainThread(v22))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          goto LABEL_25;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    *(_BYTE *)(v18 + 49) = 2;
  }
LABEL_25:
  if (*(_DWORD *)(v25 + 24) == 2)
  {
    if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v25, v23);
  }
  else
  {
    *(_DWORD *)(v25 + 24) -= 2;
  }
  if (IsJavaScript)
  {
    v26 = *(unsigned int **)(a1[1] + 8);
    v27 = v26 + 2;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    if (*((_BYTE *)v26 + 144))
    {
      __break(0xC471u);
      JUMPOUT(0x195F00DD4);
    }
    WebCore::ScheduledFormSubmission::fire((WebCore::ScheduledFormSubmission *)v18, (WebCore::Frame *)v26);
    do
    {
      v30 = __ldaxr(v27);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v27));
    if (!v31)
    {
      atomic_store(1u, v27);
      v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v41 = off_1E31FE290;
      *((_QWORD *)v41 + 1) = v27;
      v44[0] = v41;
      WTF::ensureOnMainThread();
      v42 = v44[0];
      v44[0] = 0;
      if (v42)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
    }
    v32 = *(WebCore::FormSubmission **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WebCore::FormSubmission::~FormSubmission(v32, v29);
        WTF::fastFree(v37, v38);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
    *(_QWORD *)v18 = off_1E33F6A30;
    v33 = *(WebCore::UserGestureToken **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v33, v29);
        WTF::fastFree(v35, v36);
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
    return WTF::fastFree((WTF *)v18, v29);
  }
  else
  {
    v43 = v18;
    WebCore::NavigationScheduler::schedule(a1, &v43);
    result = v43;
    if (v43)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  return result;
}

void WebCore::ScheduledFormSubmission::fire(WebCore::ScheduledFormSubmission *this, WebCore::Frame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WebCore::UserGestureToken *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL4 canNavigate;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  char v22;
  void *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  _DWORD *v28;
  const WebCore::MouseEvent *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[7];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  _DWORD *v61;
  WebCore::Node *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  __int16 v66;
  char v67;
  char v68;
  int v69;
  char v70;
  char v71;
  WebCore::UserGestureToken *v72;
  _BYTE v73[8];
  _DWORD *v74;

  if (*((_BYTE *)a2 + 144))
    return;
  v4 = (unsigned int *)((char *)a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)this + 5);
  v7 = (*(_DWORD *)v6)++;
  if (!*(_BYTE *)(v6 + 17))
  {
    v8 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
    if (v8)
    {
      ++*(_DWORD *)v8;
      v72 = v8;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v73, (uint64_t *)&v72, 0, 0);
      v72 = 0;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v8, v9);
        WTF::fastFree(v37, v38);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    else
    {
      v72 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v73, (uint64_t *)&v72, 0, 0);
      v72 = 0;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 56);
    *(_DWORD *)(v10 + 24) += 2;
    v63 = 0;
    WTF::URL::invalidate((WTF::URL *)&v63);
    canNavigate = WebCore::Document::canNavigate((WebCore::Document *)v10, a2, (const WTF::URL *)&v63);
    v13 = v63;
    v63 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (canNavigate)
        {
LABEL_12:
          *(_DWORD *)(v10 + 24) += 2;
          v62 = (WebCore::Node *)v10;
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), v11);
          v15 = v14;
          if (v14)
          {
            do
              v16 = __ldaxr(v14);
            while (__stlxr(v16 + 1, v14));
          }
          v63 = 0;
          WTF::URL::invalidate((WTF::URL *)&v63);
          v17 = v63;
          if (v63)
            *(_DWORD *)v63 += 2;
          v44 = v17;
          v45 = v64;
          v46 = v65;
          v47[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v47);
          v47[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v47[6] = v74;
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v51 = 0x10000;
          v19 = v52 & 0x80 | 4;
          v52 = v19;
          v53 = 0;
          v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *v20 += 2;
            v19 = v52;
          }
          v54 = v20;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = v58 & 0xE0 | 5;
          v52 = v19 | 2;
          v21 = v63;
          v63 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v18);
            else
              *(_DWORD *)v21 -= 2;
          }
          v59 = 0;
          v74 = 0;
          v22 = *((_BYTE *)this + 33);
          v61 = 0;
          WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)&v63, (uint64_t *)&v62, v15, (uint64_t)&v44, &v74, v22, &v61);
          WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v44, v23);
          do
          {
            v25 = __ldaxr(v15);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v15));
          if (!v26)
          {
            atomic_store(1u, v15);
            v41 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
            *((_QWORD *)v15 + 6) = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v24);
              else
                *(_DWORD *)v41 -= 2;
            }
            v42 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
            *((_QWORD *)v15 + 5) = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
                WTF::StringImpl::destroy(v42, v24);
              else
                *(_DWORD *)v42 -= 2;
            }
            v43 = v15[8];
            if ((_DWORD)v43 != -1)
              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F6940[v43])(&v44, v15 + 2);
            v15[8] = -1;
            WTF::fastFree((WTF *)v15, v24);
          }
          if (v62)
          {
            if (*((_DWORD *)v62 + 6) == 2)
            {
              if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v62, v24);
            }
            else
            {
              *((_DWORD *)v62 + 6) -= 2;
            }
          }
          v66 = *((_WORD *)this + 8);
          v67 = *(_BYTE *)(v6 + 145);
          v68 = *(_BYTE *)(v6 + 144);
          v70 = *((_BYTE *)this + 32);
          v69 = 1;
          WebCore::FormSubmission::populateFrameLoadRequest((WebCore::FormSubmission *)v6, (WebCore::FrameLoadRequest *)&v63);
          v27 = *((_BYTE *)this + 49);
          if (*((_QWORD *)a2 + 37) != v10)
            v27 = 1;
          v71 = v27;
          v28 = (_DWORD *)*((_QWORD *)a2 + 35);
          ++*v28;
          v29 = *(const WebCore::MouseEvent **)(v6 + 112);
          if (v29)
            ++*((_DWORD *)v29 + 4);
          v30 = *(_DWORD **)(v6 + 80);
          *(_QWORD *)(v6 + 80) = 0;
          v74 = v30;
          LOBYTE(v44) = 0;
          v60 = 0;
          WebCore::FrameLoader::loadFrameRequest((uint64_t)v28, (uint64_t)&v63, v29, (uint64_t *)&v74, (const WebCore::Document *)&v44);
          if (v60)
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v44, v31);
          v32 = v74;
          v74 = 0;
          if (v32)
          {
            if (v32[6] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 24))(v32);
              if (v29)
              {
LABEL_37:
                if (*((_DWORD *)v29 + 4) == 1)
                  (*(void (**)(const WebCore::MouseEvent *))(*(_QWORD *)v29 + 8))(v29);
                else
                  --*((_DWORD *)v29 + 4);
              }
LABEL_39:
              if (!*v28)
              {
                __break(0xC471u);
                JUMPOUT(0x195F013B8);
              }
              --*v28;
              WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v63, v31);
              goto LABEL_41;
            }
            --v32[6];
          }
          if (v29)
            goto LABEL_37;
          goto LABEL_39;
        }
LABEL_41:
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v73);
        v7 = *(_DWORD *)v6 - 1;
        goto LABEL_44;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (canNavigate)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_44:
  if (v7)
  {
    *(_DWORD *)v6 = v7;
  }
  else
  {
    WebCore::FormSubmission::~FormSubmission((WebCore::FormSubmission *)v6, a2);
    WTF::fastFree(v35, v36);
  }
  do
  {
    v33 = __ldaxr(v4);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v4));
  if (!v34)
  {
    atomic_store(1u, v4);
    v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v39 = off_1E31FE290;
    *((_QWORD *)v39 + 1) = v4;
    v63 = v39;
    WTF::ensureOnMainThread();
    v40 = v63;
    v63 = 0;
    if (v40)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
  }
}

_QWORD *WebCore::NavigationScheduler::scheduleRefresh(_QWORD *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = *(_QWORD *)(this[1] + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return this;
  if (*(_BYTE *)(v2 + 144))
  {
    __break(0xC471u);
    JUMPOUT(0x195F01608);
  }
  v5 = this;
  v6 = (unsigned int *)(v2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v2 + 296);
  v9 = *(_QWORD *)(v8 + 736);
  if (!v9 || !*(_DWORD *)(v9 + 4))
    goto LABEL_7;
  v12 = v8 + 736;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 + 192), a2);
  v14 = v13;
  if (v13)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(v2 + 280), &v36);
  v16 = v36;
  if (v36)
  {
    v17 = *(WTF::StringImpl **)(*(_QWORD *)(v36 + 280) + 160);
    if (v17)
      *(_DWORD *)v17 += 2;
    v34 = v17;
    v36 = 0;
    v18 = (unsigned int *)(v16 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E31FE290;
      v32[1] = v18;
      v37 = v32;
      WTF::ensureOnMainThread();
      v33 = v37;
      v37 = 0;
      if (v33)
        (*(void (**)(_QWORD *))(*v33 + 8))(v33);
    }
  }
  else
  {
    v31 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v31 += 2;
    v34 = v31;
  }
  v21 = WTF::fastMalloc((WTF *)0x90);
  v22 = (_QWORD *)WebCore::ScheduledURLNavigation::ScheduledURLNavigation(v21, a2, v14, v12, (_DWORD **)&v34, 1, 1, 0, 0.0, 1);
  *v22 = off_1E33F6B40;
  v35 = v22;
  WebCore::NavigationScheduler::schedule(v5, (uint64_t *)&v35);
  v24 = (uint64_t)v35;
  v35 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  this = v34;
  if (!v34)
    goto LABEL_24;
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
LABEL_24:
    if (v14)
      goto LABEL_25;
    goto LABEL_7;
  }
  this = (_QWORD *)WTF::StringImpl::destroy(v34, v23);
  if (v14)
  {
    do
    {
LABEL_25:
      v25 = __ldaxr(v14);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v14));
    if (!v26)
    {
      atomic_store(1u, v14);
      v27 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
      *((_QWORD *)v14 + 6) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v23);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
      *((_QWORD *)v14 + 5) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v23);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v14[8];
      if ((_DWORD)v29 != -1)
        ((void (*)(_QWORD **, unsigned int *))off_1E33F6940[v29])(&v37, v14 + 2);
      v14[8] = -1;
      this = (_QWORD *)WTF::fastFree((WTF *)v14, v23);
    }
    goto LABEL_7;
  }
  do
  {
LABEL_7:
    v10 = __ldaxr(v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v6));
  if (!v11)
  {
    atomic_store(1u, v6);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E31FE290;
    v30[1] = v6;
    v37 = v30;
    WTF::ensureOnMainThread();
    this = v37;
    v37 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *WebCore::NavigationScheduler::scheduleHistoryNavigation(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  WebCore::HistoryItem *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WebCore::HistoryItem *v22;

  v2 = *(_QWORD *)(*(_QWORD *)(this[1] + 8) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = this;
      ++*(_DWORD *)v3;
      v6 = *(_QWORD *)(v3 + 136);
      if ((int)a2 < 1)
      {
        if ((a2 & 0x80000000) != 0)
        {
          v9 = -(int)a2;
          v10 = *(_DWORD **)(v6 + 16);
          ++v10[2];
          v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
          if (v11 < v9)
            goto LABEL_7;
        }
      }
      else
      {
        v7 = *(_DWORD **)(v6 + 16);
        ++v7[2];
        v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 48))(v7);
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
        if (v8 < a2)
        {
LABEL_7:
          this = WebCore::NavigationScheduler::cancel(v5, 0);
LABEL_25:
          if (*(_DWORD *)v3 == 1)
          {
            WebCore::Page::~Page(v3);
            return (_QWORD *)WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)v3;
          }
          return this;
        }
      }
      v12 = *(_DWORD **)(v6 + 16);
      ++v12[2];
      (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v12 + 32))(&v22, v12, a2);
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
      v13 = v22;
      if (v22)
      {
        v22 = 0;
        v14 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v14 = off_1E33F6A30;
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 15) = 0;
        *(_BYTE *)(v14 + 19) = 1;
        if (WTF::isMainThread((WTF *)v14))
        {
          {
            v15 = WebCore::currentToken(void)::token;
            if (WebCore::currentToken(void)::token)
              ++*(_DWORD *)WebCore::currentToken(void)::token;
          }
          else
          {
            v15 = 0;
            WebCore::currentToken(void)::token = 0;
          }
        }
        else
        {
          v15 = 0;
        }
        *(_QWORD *)(v14 + 24) = v15;
        *(_WORD *)(v14 + 32) = 256;
        *(_QWORD *)v14 = off_1E33F6B88;
        *(_QWORD *)(v14 + 40) = v13;
        v21 = v14;
        WebCore::NavigationScheduler::schedule(v5, &v21);
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        WebCore::NavigationScheduler::cancel(v5, 0);
      }
      this = v22;
      v22 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)this, v16);
          this = (_QWORD *)WTF::fastFree(v19, v20);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
      goto LABEL_25;
    }
  }
  return this;
}

_QWORD *WebCore::NavigationScheduler::cancel(_QWORD *result, WebCore::Frame *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  if ((result[6] & 0xFFFFFFFFFFFFLL) != 0)
  {
    v6 = result;
    if (*(double *)((result[6] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      goto LABEL_10;
    v7 = *(WTF::StringImpl **)(result[1] + 8);
    v8 = (unsigned int *)((char *)v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = (uint64_t)v7;
    WebCore::InspectorInstrumentation::frameClearedScheduledNavigation(v7, a2);
    WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v10);
    result = v6;
    if ((v6[6] & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_10:
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 2));
      result = v6;
    }
  }
  v2 = result[9];
  result[9] = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result[1] + 8);
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v10 = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v10);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

void WebCore::NetscapePlugInStreamLoader::~NetscapePlugInStreamLoader(WebCore::NetscapePlugInStreamLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::ResourceLoader::~ResourceLoader(this, (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::ResourceLoader::~ResourceLoader(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::NetscapePlugInStreamLoader::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  char v27;
  char v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = WTF::fastMalloc((WTF *)0x480);
  LOWORD(v20) = 512;
  BYTE6(v20) = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 20;
  v30 = 201853336;
  v31 = 0;
  v32 = 0;
  *(_DWORD *)((char *)&v20 + 2) = 2;
  WebCore::ResourceLoader::ResourceLoader(v8, a1, (const WebCore::ResourceLoaderOptions *)&v20);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v20, v9);
  *(_QWORD *)v8 = off_1E33F66C8;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
    goto LABEL_15;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a2;
  v12 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10;
  if (!v12)
    goto LABEL_15;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
LABEL_15:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
  }
  *(_QWORD *)(v8 + 1128) = v10;
  *(_BYTE *)(v8 + 1136) = 0;
  *(_DWORD *)(v8 + 1120) = 2048;
  ++*(_DWORD *)(v8 + 16);
  v16 = *a4;
  *a4 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = &off_1E33F6C48;
  v17[1] = v8;
  v17[2] = v16;
  ++*(_DWORD *)(v8 + 16);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = &off_1E33F6C70;
  v18[1] = v8;
  v18[2] = v8;
  v18[3] = v17;
  v20 = v18;
  WebCore::ResourceLoader::init(v8, a3, (uint64_t *)&v20);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_DWORD *)(v8 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  --*(_DWORD *)(v8 + 16);
  return result;
}

uint64_t WebCore::NetscapePlugInStreamLoader::init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  ++*(_DWORD *)(a1 + 16);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E33F6C70;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WebCore::ResourceLoader::init(a1, a2, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::NetscapePlugInStreamLoader::isDone(WebCore::NetscapePlugInStreamLoader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 141);
  return !v1 || *(_QWORD *)(v1 + 8) == 0;
}

void WebCore::NetscapePlugInStreamLoader::releaseResources(WebCore::NetscapePlugInStreamLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::ResourceLoader::releaseResources(this);
}

uint64_t WebCore::NetscapePlugInStreamLoader::willSendRequest(uint64_t result, uint64_t a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v4;
  void (***v5)(_QWORD, uint64_t, uint64_t, WebCore::ResourceResponseBase *, uint64_t *);
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  _BYTE v20[240];
  CFTypeRef cf;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(result + 1128);
  if (v4)
  {
    v5 = *(void (****)(_QWORD, uint64_t, uint64_t, WebCore::ResourceResponseBase *, uint64_t *))(v4 + 8);
    if (v5)
    {
      v9 = result;
      ++*(_DWORD *)(result + 16);
      v19 = result;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v20, a3);
      v10 = (const void *)*((_QWORD *)a3 + 30);
      cf = v10;
      if (v10)
        CFRetain(v10);
      v22 = *((_BYTE *)a3 + 248);
      v11 = *a4;
      *a4 = 0;
      v23 = v11;
      v12 = WTF::fastMalloc((WTF *)0x118);
      *(_QWORD *)v12 = off_1E33F6C98;
      *(_QWORD *)(v12 + 8) = v19;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v12 + 16), (const WebCore::ResourceResponseBase *)v20);
      v13 = cf;
      *(_QWORD *)(v12 + 256) = cf;
      if (v13)
        CFRetain(v13);
      *(_BYTE *)(v12 + 264) = v22;
      v14 = v23;
      v23 = 0;
      *(_QWORD *)(v12 + 272) = v14;
      v24 = v12;
      (**v5)(v5, v9, a2, a3, &v24);
      v16 = v24;
      v24 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v23;
      v23 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = cf;
      cf = 0;
      if (v18)
        CFRelease(v18);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v20, v15);
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::NetscapePlugInStreamLoader::didReceiveResponse(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  _BYTE v17[240];
  CFTypeRef cf;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  ++*(_DWORD *)(result + 16);
  v4 = *a3;
  *a3 = 0;
  v5 = *(_QWORD *)(result + 1128);
  if (v5
    && (result = *(_QWORD *)(v5 + 8)) != 0
    && (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, v3, a2),
        (v7 = *(_QWORD *)(v3 + 1128)) != 0)
    && *(_QWORD *)(v7 + 8))
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v17, (const WebCore::ResourceResponseBase *)a2);
    v8 = *(const void **)(a2 + 240);
    cf = v8;
    if (v8)
      CFRetain(v8);
    v19 = *(_BYTE *)(a2 + 248);
    v20 = v4;
    v9 = WTF::fastMalloc((WTF *)0x120);
    *(_QWORD *)v9 = off_1E33F6CC0;
    *(_QWORD *)(v9 + 8) = v3;
    *(_QWORD *)(v9 + 16) = v3;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v9 + 24), (const WebCore::ResourceResponseBase *)v17);
    v10 = cf;
    *(_QWORD *)(v9 + 264) = cf;
    if (v10)
      CFRetain(v10);
    *(_BYTE *)(v9 + 272) = v19;
    v11 = v20;
    v20 = 0;
    *(_QWORD *)(v9 + 280) = v11;
    v21 = v9;
    WebCore::ResourceLoader::didReceiveResponse(v3, a2, &v21);
    v13 = v21;
    v21 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v20;
      v20 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    v16 = cf;
    cf = 0;
    if (v16)
      CFRelease(v16);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v17, v12);
    return 0;
  }
  else
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    if (*(_DWORD *)(v3 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    else
      --*(_DWORD *)(v3 + 16);
  }
  return result;
}

uint64_t WebCore::NetscapePlugInStreamLoader::didReceiveData(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  ++a1[4];
  v8 = *((_QWORD *)a1 + 141);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v9 + 16))(v9, a1, a2);
  }
  result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a3, a4);
  if (a1[4] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  --a1[4];
  return result;
}

void WebCore::NetscapePlugInStreamLoader::didFinishLoading(WebCore::NetscapePlugInStreamLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ++*((_DWORD *)this + 4);
  if (*((_BYTE *)this + 1136))
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 24);
      v7 = *((_QWORD *)this + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(v4 + 104), &v7);
      WebCore::DocumentLoader::checkLoadComplete((_DWORD *)v4);
      if (*(_DWORD *)(v4 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    else
    {
      v7 = *((_QWORD *)this + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)0x68, &v7);
      WebCore::DocumentLoader::checkLoadComplete(0);
    }
  }
  v5 = *((_QWORD *)this + 141);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      (*(void (**)(uint64_t, WebCore::NetscapePlugInStreamLoader *))(*(_QWORD *)v6 + 32))(v6, this);
  }
  WebCore::ResourceLoader::didFinishLoading(this, a2);
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebCore::NetscapePlugInStreamLoader *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 4);
}

void WebCore::NetscapePlugInStreamLoader::didFail(WebCore::NetscapePlugInStreamLoader *this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ++*((_DWORD *)this + 4);
  if (*((_BYTE *)this + 1136))
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 24);
      v7 = *((_QWORD *)this + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(v4 + 104), &v7);
      WebCore::DocumentLoader::checkLoadComplete((_DWORD *)v4);
      if (*(_DWORD *)(v4 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    else
    {
      v7 = *((_QWORD *)this + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)0x68, &v7);
      WebCore::DocumentLoader::checkLoadComplete(0);
    }
  }
  v5 = *((_QWORD *)this + 141);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      (*(void (**)(uint64_t, WebCore::NetscapePlugInStreamLoader *, const WebCore::ResourceError *))(*(_QWORD *)v6 + 24))(v6, this, a2);
  }
  WebCore::ResourceLoader::didFail(this, a2);
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebCore::NetscapePlugInStreamLoader *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 4);
}

_QWORD *WebCore::NetscapePlugInStreamLoader::willCancel(_QWORD *this, const WebCore::ResourceError *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = this[141];
  if (v2)
  {
    v4 = this;
    this = *(_QWORD **)(v2 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, const WebCore::ResourceError *))(*this + 24))(this, v4, a2);
  }
  return this;
}

_DWORD *WebCore::NetscapePlugInStreamLoader::didCancel(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)result + 1136))
  {
    v1 = *((_QWORD *)result + 5);
    if (v1)
    {
      ++*(_DWORD *)(v1 + 24);
      v2 = *((_QWORD *)result + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(v1 + 104), &v2);
      result = WebCore::DocumentLoader::checkLoadComplete((_DWORD *)v1);
      if (*(_DWORD *)(v1 + 24) == 1)
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      else
        --*(_DWORD *)(v1 + 24);
    }
    else
    {
      v2 = *((_QWORD *)result + 93);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)0x68, &v2);
      return WebCore::DocumentLoader::checkLoadComplete(0);
    }
  }
  return result;
}

void WebCore::PingLoader::loadImage(WebCore::PingLoader *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  char canDisplay;
  WTF::StringImpl *v10;
  const WTF::String *v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  const WTF::URL *v15;
  _DWORD *v16;
  __int128 v17;
  char v18;
  _DWORD *v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47[5];
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD *v52;
  int v53;
  int v54;
  _DWORD *v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[7];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  char v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;

  v5 = *((_QWORD *)this + 37);
  *(_DWORD *)(v5 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 + 192), a2);
  v7 = v6;
  if (v6)
  {
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v6, a2, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  v12 = canDisplay;
  if (v7)
  {
    do
    {
      v13 = __ldaxr(v7);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v7));
    if (!v14)
    {
      atomic_store(1u, v7);
      v44 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v10);
        else
          *(_DWORD *)v44 -= 2;
      }
      v45 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v10);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = v7[8];
      if ((_DWORD)v46 != -1)
        ((void (*)(_DWORD **, unsigned int *))off_1E33F6940[v46])(&v55, v7 + 2);
      v7[8] = -1;
      WTF::fastFree((WTF *)v7, v10);
      if ((v12 & 1) != 0)
        goto LABEL_9;
LABEL_71:
      WebCore::FrameLoader::reportLocalLoadFailed((uint64_t)this, a2, v11);
      goto LABEL_72;
    }
  }
  if ((canDisplay & 1) == 0)
    goto LABEL_71;
LABEL_9:
  if ((WTF::portAllowed() & 1) != 0)
  {
    v16 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v16 += 2;
    v55 = v16;
    v17 = *(_OWORD *)((char *)a2 + 24);
    v56 = *(_OWORD *)((char *)a2 + 8);
    v57 = v17;
    v58[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v58);
    v58[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58[6] = v47[0];
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0x10000;
    v18 = v63 & 0x80 | 4;
    v63 = v18;
    v64 = 0;
    v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v19 += 2;
      v18 = v63;
    }
    v65 = v19;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = v69 & 0xE0 | 5;
    v63 = v18 | 2;
    v70 = 0;
    if (WebCore::processContentRuleListsForLoad(*((_QWORD *)this + 3), *(_DWORD **)(*((_QWORD *)this + 35) + 88), (WebCore::ResourceRequest *)&v55, 2))
    {
      goto LABEL_47;
    }
    v21 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v5 + 192));
    if (v21)
    {
      v22 = v21;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 + 1, v21));
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v21, (WebCore::ResourceRequest *)&v55, 0, 0);
      if (!atomic_load(v22))
      {
        __break(0xC471u);
        JUMPOUT(0x195F02A88);
      }
      do
        v25 = __ldaxr(v22);
      while (__stlxr(v25 - 1, v22));
    }
    else
    {
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)&v55, 0, 0);
    }
    {
      WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl += 2;
      WebCore::HTTPHeaderValues::maxAge0(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl;
    }
    if ((v69 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v55);
      v69 |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v59, (WTF::StringImpl *)0xF, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::maxAge0(void)::value);
    v26 = v69;
    v69 &= ~2u;
    if ((v26 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v55);
      v69 |= 1u;
    }
    v27 = HIDWORD(v59);
    v49 = 0;
    v50 = 0;
    v51 = HIDWORD(v59);
    if (HIDWORD(v59))
    {
      if (HIDWORD(v59) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195F02B54);
      }
      v28 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v59)));
      v50 = v27;
      v49 = v28;
      if (HIDWORD(v59))
      {
        v29 = v59;
        v30 = v59 + 16 * HIDWORD(v59);
        do
        {
          *(_WORD *)v28 = *(_WORD *)v29;
          v31 = *(_DWORD **)(v29 + 8);
          if (v31)
            *v31 += 2;
          *(_QWORD *)(v28 + 8) = v31;
          v29 += 16;
          v28 += 16;
        }
        while (v29 != v30);
      }
    }
    v32 = HIDWORD(v60);
    v52 = 0;
    v53 = 0;
    v54 = HIDWORD(v60);
    if (HIDWORD(v60))
    {
      if (HIDWORD(v60) >> 28)
      {
        __break(0xC471u);
        goto LABEL_84;
      }
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v60)));
      v53 = v32;
      v52 = v39;
      if (HIDWORD(v60))
      {
        v40 = v60;
        v41 = v60 + 16 * HIDWORD(v60);
        do
        {
          v42 = *(_DWORD **)v40;
          if (*(_QWORD *)v40)
            *v42 += 2;
          *v39 = v42;
          v43 = *(_DWORD **)(v40 + 8);
          if (v43)
            *v43 += 2;
          v39[1] = v43;
          v40 += 16;
          v39 += 2;
        }
        while (v40 != v41);
      }
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 192) + 8))(v5 + 192);
    if ((v69 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v55);
      v69 |= 1u;
    }
    WebCore::FrameLoader::outgoingReferrerURL(*((WebCore::FrameLoader **)this + 35), (uint64_t)v47);
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    WebCore::SecurityPolicy::generateReferrerHeader((WebCore::SecurityPolicy *)&v55, (WTF::StringImpl ***)v47, v33, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, (WTF::StringImpl ***)&v48);
    v35 = v47[0];
    v47[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    if (v48 && *((_DWORD *)v48 + 1))
      WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v55, &v48);
    v36 = *((_QWORD *)this + 35);
    ++*(_DWORD *)v36;
    WebCore::FrameLoader::updateRequestAndAddExtraFields(v36, *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8), (WebCore::FrameLoader *)&v55, 0, 0, 1, 0, 0, 0);
    if (*(_DWORD *)v36)
    {
      --*(_DWORD *)v36;
      WebCore::PingLoader::startPingLoad(this, (uint64_t)&v55, (uint64_t)&v49, 1, 1, 0, 0);
      v38 = v48;
      v48 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v49, v37);
LABEL_47:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v55, v20);
      goto LABEL_72;
    }
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x195F02A68);
  }
  WebCore::FrameLoader::reportBlockedLoadFailed(this, a2, v15);
LABEL_72:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

BOOL WebCore::processContentRuleListsForLoad(uint64_t a1, _DWORD *a2, WebCore::ResourceRequest *this, int a4)
{
  WebCore::Page *v5;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16[5];
  _BYTE v17[56];

  if (!a2)
    return 0;
  ++a2[6];
  if (a1 && (v5 = *(WebCore::Page **)(a1 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    v8 = (_DWORD *)*((_QWORD *)v5 + 117);
    ++v8[2];
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v16[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v16);
    WebCore::UserContentProvider::processContentRuleListsForLoad((uint64_t)v8, (uint64_t)v5, (const WTF::StringImpl **)this, a4, (uint64_t)a2, (WTF::URL *)v16, (uint64_t)v17);
    v10 = v16[0];
    v16[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
    v11 = v17[0] != 0;
    WebCore::ContentExtensions::applyResultsToRequest((uint64_t)v17, (uint64_t)v5, this);
    WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v17, v12);
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v11 = 0;
  }
  if (a2[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  else
    --a2[6];
  return v11;
}

void WebCore::PingLoader::startPingLoad(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, __int16 a7)
{
  Inspector::IdentifiersFactory *IdentifierInternal;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _DWORD *v44;
  const void *v45;
  void *v46;
  void *v47;
  WebCore::Document *v48;
  WebCore::CachedResourceLoader *v49;
  void *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Inspector::InspectorDebuggerAgent **v57;
  char v58;
  _BYTE v59[80];
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  __int128 v76;
  _DWORD *v77;
  uint64_t v78;
  char v79;
  const void *v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  __int128 v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  const void *v100;
  uint64_t v101;
  _WORD v102[76];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int16 v106;
  __int16 v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  char v118;
  char v119;
  char v120;
  __int16 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195F031F8);
  }
  IdentifierInternal = (Inspector::IdentifiersFactory *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v15 = a1[35];
  ++*(_DWORD *)v15;
  v16 = 88;
  if (!*(_BYTE *)(v15 + 80))
    v16 = 96;
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, Inspector::IdentifiersFactory *))(**(_QWORD **)(v15 + 16) + 104))(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + v16), IdentifierInternal);
  if (!*(_DWORD *)v15)
  {
    __break(0xC471u);
    JUMPOUT(0x195F03218);
  }
  --*(_DWORD *)v15;
  v107 = 512;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0;
  v118 = 1;
  v119 = 0;
  v120 = 0;
  v121 = 20;
  v123 = 0;
  v124 = 0;
  if (v17)
    v18 = 2;
  else
    v18 = 0;
  v108 = v18;
  v110 = a4 ^ 1;
  v112 = 1;
  v111 = a6;
  v19 = v122 & 0xF0000000 | ((a5 & 1) << 8);
  v122 = v19 | 0xC0008C2;
  v109 = 3;
  if ((a7 & 0xFF00) != 0 && a7 != 2)
  {
    v108 = 1;
    v122 = v19 | 0xC0108C2;
    v107 = 780;
  }
  v20 = WebCore::s_platformStrategies;
  v21 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v21)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v20 + 8) = v21;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21))
  {
    v22 = a1[35];
    v23 = 88;
    if (!*(_BYTE *)(v22 + 80))
      v23 = 96;
    v24 = *(_DWORD **)(v22 + v23);
    if (v24)
      ++v24[6];
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v53 = a1[3];
      if (v53)
      {
        v54 = *(_QWORD *)(v53 + 8);
        if (v54)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v54 + 80) + 8);
          v56 = *(_QWORD *)(v55 + 192);
          if (v56)
            WebCore::InspectorNetworkAgent::willSendRequestOfType(v56, IdentifierInternal, (uint64_t)v24, a2, 0);
          v57 = *(Inspector::InspectorDebuggerAgent ***)(v55 + 144);
          if (v57 && (*(_BYTE *)(a2 + 147) & 0xFE) != 2)
          {
            if ((*(_BYTE *)(a2 + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
              *(_BYTE *)(a2 + 184) |= 1u;
            }
            WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v57, (const WTF::String *)a2);
          }
        }
      }
    }
    if (v24)
    {
      if (v24[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 24))(v24);
      else
        --v24[6];
    }
    v26 = WebCore::s_platformStrategies;
    v27 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v27)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v26 + 8) = v27;
    }
    v28 = (unsigned int *)(a1 + 1);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v30 = &off_1E33F6CE8;
    v30[1] = a1;
    v30[2] = IdentifierInternal;
    v81 = v30;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, __int16 *, uint64_t, _QWORD **))(*(_QWORD *)v27 + 104))(v27, a1, a2, a3, &v107, a5, &v81);
    v32 = v81;
    v81 = 0;
    if (v32)
      (*(void (**)(_QWORD *))(*v32 + 8))(v32);
  }
  else
  {
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v61, (const WebCore::ResourceRequestBase::RequestData *)a2);
    v33 = *(_DWORD **)(a2 + 152);
    if (v33)
      *v33 += 2;
    *(_QWORD *)&v76 = v33;
    v34 = *(_DWORD **)(a2 + 160);
    if (v34)
      *v34 += 2;
    *((_QWORD *)&v76 + 1) = v34;
    v35 = *(_DWORD **)(a2 + 168);
    if (v35)
      ++*v35;
    v36 = *(_QWORD *)(a2 + 176);
    v77 = v35;
    v78 = v36;
    v79 = *(_BYTE *)(a2 + 184);
    v37 = *(const void **)(a2 + 192);
    v80 = v37;
    if (v37)
      CFRetain(v37);
    v38 = v61;
    v61 = 0;
    v82 = v62;
    v83 = v63;
    LODWORD(v62) = v62 & 0xFFFFFFFE;
    v39 = v64;
    v64 = 0;
    v84 = v39;
    v85 = v65;
    v86 = v66;
    LODWORD(v65) = v65 & 0xFFFFFFFE;
    v87 = v67;
    v40 = v68;
    v68 = 0u;
    v88 = v40;
    *(_QWORD *)&v40 = v69;
    v69 = 0;
    v89 = v40;
    v41 = v70;
    v70 = 0;
    v90 = v41;
    *(_QWORD *)&v40 = v71;
    v71 = 0;
    v91 = v40;
    v42 = v72;
    v72 = 0;
    v92 = v42;
    *(_QWORD *)&v40 = v73;
    v73 = 0;
    v93 = v40;
    v95 = v75;
    v94 = v74;
    v43 = v76;
    v76 = 0u;
    v96 = v43;
    v99 = v79;
    v44 = v77;
    v77 = 0;
    v97 = v44;
    v98 = v78;
    v45 = v80;
    v80 = 0;
    v81 = (_QWORD *)v38;
    v100 = v45;
    v101 = 0;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v102, (const WebCore::ResourceLoaderOptions *)&v107);
    v102[72] = 0;
    v103 = 0;
    v104 = 0u;
    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v81, &v105);
    v106 = 0;
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v61, v46);
    v48 = (WebCore::Document *)a1[37];
    v49 = (WebCore::CachedResourceLoader *)*((_QWORD *)v48 + 90);
    if (!v49)
      v49 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v48, v47);
    ++*(_DWORD *)v49;
    WebCore::CachedResourceLoader::requestResource(&v61, (int)v49, 11, (WebCore::ResourceRequest *)&v81);
    WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v59, &v61);
    if ((_DWORD)v67 != -1)
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
       + v67))((int)&v58, (WebCore::CachedResourceHandleBase *)&v61);
    if (v60 != -1)
      (*(&off_1E33F6930 + v60))((int)&v61, (WebCore::CachedResourceHandleBase *)v59);
    v60 = -1;
    if (*(_DWORD *)v49 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v49, v50);
      WTF::fastFree(v51, v52);
    }
    else
    {
      --*(_DWORD *)v49;
    }
    WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v81, (WTF::StringImpl *)v50);
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v107, v31);
}

void WebCore::PingLoader::sendPing(WebCore::PingLoader *this, WebCore::LocalFrame *a2, WTF::StringImpl **a3, const WTF::URL *a4)
{
  WTF *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  WebCore::FormData *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  char v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  const WTF::String *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WebCore::SecurityOrigin *v45;
  WebCore::SecurityOrigin *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  bmalloc::api *v65;
  void *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unsigned int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF *v77;
  int v78;
  int v79;
  _QWORD *v80;
  int v81;
  int v82;
  WTF::StringImpl *v83;
  WTF *v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[7];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int16 v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  _DWORD *v96;
  WebCore::FormData *v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  char v102;

  if ((*((_BYTE *)a2 + 8) & 2) != 0)
  {
    v7 = *(WTF **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v7 += 2;
    v84 = v7;
    v8 = *(_OWORD *)((char *)a2 + 24);
    v85 = *(_OWORD *)((char *)a2 + 8);
    v86 = v8;
    v87[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v87);
    v87[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v87[6] = v77;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0;
    v92 = 1;
    v9 = v94 & 0x80 | 4;
    v94 = v9;
    v95 = 0;
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v10 += 2;
      v9 = v94;
    }
    v96 = v10;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = v100 & 0xE0 | 5;
    v94 = v9 | 2;
    v101 = 0;
    v93 = 7;
    if (WebCore::processContentRuleListsForLoad(*((_QWORD *)this + 3), *(_DWORD **)(*((_QWORD *)this + 35) + 88), (WebCore::ResourceRequest *)&v84, 256))
    {
      goto LABEL_108;
    }
    v12 = *((_QWORD *)this + 37);
    *(_DWORD *)(v12 + 24) += 2;
    v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v12 + 192));
    if (v13)
    {
      v14 = v13;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v13, (WebCore::ResourceRequest *)&v84, 0, 0);
      if (!atomic_load(v14))
      {
        __break(0xC471u);
        JUMPOUT(0x195F03918);
      }
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 - 1, v14));
    }
    else
    {
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)&v84, 0, 0);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v83 = v77;
    WebCore::ResourceRequestBase::setHTTPMethod(&v84, &v83);
    v19 = v83;
    v83 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v83 = v77;
    if ((v100 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v100 |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v88, (WTF::StringImpl *)0x1A, &v83);
    v100 &= ~2u;
    v21 = v83;
    v83 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    WTF::CString::CString((WTF::CString *)&v77, "PING");
    if (v77)
    {
      v22 = (char *)v77 + 16;
      v23 = *((_QWORD *)v77 + 1);
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v24 = bmalloc::api::isoAllocate();
    *(_DWORD *)v24 = 1;
    *(_BYTE *)(v24 + 64) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 48) = 0;
    *(_BYTE *)(v24 + 56) = 0;
    WebCore::FormData::appendData(v24, v22, v23);
    if ((v100 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v100 |= 1u;
    }
    v26 = v97;
    v97 = (WebCore::FormData *)v24;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::FormData::~FormData(v26, v25);
        bmalloc::api::isoDeallocate(v65, v66);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    v100 = v100 & 0xF3 | 4;
    v27 = v77;
    v77 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        WTF::fastFree(v27, v25);
      else
        --*(_DWORD *)v27;
    }
    {
      WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl += 2;
      WebCore::HTTPHeaderValues::maxAge0(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl;
    }
    if ((v100 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v100 |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v88, (WTF::StringImpl *)0xF, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::maxAge0(void)::value);
    v29 = v100;
    v100 &= ~2u;
    if ((v29 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v100 |= 1u;
    }
    v30 = HIDWORD(v88);
    v77 = 0;
    v78 = 0;
    v79 = HIDWORD(v88);
    if (HIDWORD(v88))
    {
      if (HIDWORD(v88) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195F03C18);
      }
      v31 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v88)));
      v78 = v30;
      v77 = v31;
      if (HIDWORD(v88))
      {
        v32 = v88;
        v33 = v88 + 16 * HIDWORD(v88);
        do
        {
          *(_WORD *)v31 = *(_WORD *)v32;
          v34 = *(_DWORD **)(v32 + 8);
          if (v34)
            *v34 += 2;
          *((_QWORD *)v31 + 1) = v34;
          v32 += 16;
          v31 = (WTF *)((char *)v31 + 16);
        }
        while (v32 != v33);
      }
    }
    v35 = HIDWORD(v89);
    v80 = 0;
    v81 = 0;
    v82 = HIDWORD(v89);
    if (HIDWORD(v89))
    {
      if (HIDWORD(v89) >> 28)
        goto LABEL_129;
      v60 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v89)));
      v81 = v35;
      v80 = v60;
      if (HIDWORD(v89))
      {
        v61 = v89;
        v62 = v89 + 16 * HIDWORD(v89);
        do
        {
          v63 = *(_DWORD **)v61;
          if (*(_QWORD *)v61)
            *v63 += 2;
          *v60 = v63;
          v64 = *(_DWORD **)(v61 + 8);
          if (v64)
            *v64 += 2;
          v60[1] = v64;
          v61 += 16;
          v60 += 2;
        }
        while (v61 != v62);
      }
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v28);
    v37 = (uint64_t)v36;
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 + 1, v36));
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 192) + 8))(v12 + 192);
    if ((v100 & 1) == 0)
    {
      v67 = v39;
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v39 = v67;
      v100 |= 1u;
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    WebCore::SecurityPolicy::generateOriginHeader(v39, (WebCore::ThreadableBlobRegistry *)&v84, v37, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, &v83);
    WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)&v84, (WebCore::ResourceRequest *)&v83, v40);
    v42 = v83;
    v83 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = *((_QWORD *)this + 35);
    ++*(_DWORD *)v43;
    WebCore::FrameLoader::updateRequestAndAddExtraFields(v43, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8), (WebCore::FrameLoader *)&v84, 0, 0, 1, 0, 0, 0);
    if (*(_DWORD *)v43)
    {
      --*(_DWORD *)v43;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v44);
      v46 = v45;
      WebCore::SecurityOrigin::create(a2, (uint64_t *)&v83);
      v47 = v83;
      if (WebCore::SecurityOrigin::isSameOriginAs(v46, v83))
      {
        v83 = 0;
        do
        {
          v49 = __ldaxr((unsigned int *)v47);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, (unsigned int *)v47));
        if (!v50)
        {
          atomic_store(1u, (unsigned int *)v47);
          v51 = (WTF::StringImpl *)*((_QWORD *)v47 + 6);
          *((_QWORD *)v47 + 6) = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v48);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = (WTF::StringImpl *)*((_QWORD *)v47 + 5);
          *((_QWORD *)v47 + 5) = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v48);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = *((unsigned int *)v47 + 8);
          if ((_DWORD)v53 != -1)
            ((void (*)(char *, char *))off_1E33F6940[v53])(&v102, (char *)v47 + 8);
          *((_DWORD *)v47 + 8) = -1;
          WTF::fastFree(v47, v48);
        }
        goto LABEL_98;
      }
      v54 = WTF::URL::protocolIs();
      v56 = v54;
      v83 = 0;
      do
      {
        v57 = __ldaxr((unsigned int *)v47);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, (unsigned int *)v47));
      if (v58)
      {
        if (!v54)
        {
LABEL_98:
          if ((v100 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
            v100 |= 1u;
          }
          WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v88, (WTF::StringImpl *)0x36, (WTF::StringImpl **)(v12 + 736));
          v59 = v100 & 0xFD;
          v100 &= ~2u;
          goto LABEL_101;
        }
      }
      else
      {
        atomic_store(1u, (unsigned int *)v47);
        v68 = (WTF::StringImpl *)*((_QWORD *)v47 + 6);
        *((_QWORD *)v47 + 6) = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v55);
          else
            *(_DWORD *)v68 -= 2;
        }
        v69 = (WTF::StringImpl *)*((_QWORD *)v47 + 5);
        *((_QWORD *)v47 + 5) = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v55);
          else
            *(_DWORD *)v69 -= 2;
        }
        v70 = *((unsigned int *)v47 + 8);
        if ((_DWORD)v70 != -1)
          ((void (*)(char *, char *))off_1E33F6940[v70])(&v102, (char *)v47 + 8);
        *((_DWORD *)v47 + 8) = -1;
        WTF::fastFree(v47, v55);
        if (!v56)
          goto LABEL_98;
      }
      v59 = v100;
LABEL_101:
      if ((v59 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
        v100 |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v88, (WTF::StringImpl *)0x37, a3);
      v100 &= ~2u;
      WebCore::PingLoader::startPingLoad(this, (uint64_t)&v84, (uint64_t)&v77, 1, 1, 1, 0);
      do
      {
        v72 = __ldaxr((unsigned int *)v37);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, (unsigned int *)v37));
      if (!v73)
      {
        atomic_store(1u, (unsigned int *)v37);
        v74 = *(WTF::StringImpl **)(v37 + 48);
        *(_QWORD *)(v37 + 48) = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v71);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = *(WTF::StringImpl **)(v37 + 40);
        *(_QWORD *)(v37 + 40) = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v71);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = *(unsigned int *)(v37 + 32);
        if ((_DWORD)v76 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F6940[v76])(&v83, v37 + 8);
        *(_DWORD *)(v37 + 32) = -1;
        WTF::fastFree((WTF *)v37, v71);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v77, v71);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
LABEL_108:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v84, v11);
      return;
    }
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x195F038F8);
  }
}

void WebCore::PingLoader::sendViolationReport(_QWORD *a1, uint64_t a2, WebCore::FormData **a3, unsigned int a4)
{
  WTF *v8;
  __int128 v9;
  char v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::FormData *v21;
  WebCore::FormData *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  BOOL isSameSchemeHostPort;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  bmalloc::api *v52;
  void *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60[5];
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  int v64;
  _QWORD *v65;
  int v66;
  int v67;
  WTF *v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[7];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  char v76;
  uint64_t v77;
  _DWORD *v78;
  WebCore::FormData *v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;

  if (a4 != 3 || WebCore::gNonUtilityPageCount >= 2)
  {
    v8 = *(WTF **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v8 += 2;
    v68 = v8;
    v9 = *(_OWORD *)(a2 + 24);
    v69 = *(_OWORD *)(a2 + 8);
    v70 = v9;
    v71[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v71);
    v71[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v71[6] = v60[0];
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0x10000;
    v10 = v76 & 0x80 | 4;
    v76 = v10;
    v77 = 0;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v11 += 2;
      v10 = v76;
    }
    v78 = v11;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = v82 & 0xE0 | 5;
    v76 = v10 | 2;
    v83 = 0;
    if (WebCore::processContentRuleListsForLoad(a1[3], *(_DWORD **)(a1[35] + 88), (WebCore::ResourceRequest *)&v68, 0x10000))
    {
      goto LABEL_62;
    }
    v13 = a1[37];
    *(_DWORD *)(v13 + 24) += 2;
    v14 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v13 + 192));
    if (v14)
    {
      v15 = v14;
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 + 1, v14));
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v14, (WebCore::ResourceRequest *)&v68, 0, 0);
      if (!atomic_load(v15))
      {
        __break(0xC471u);
        goto LABEL_112;
      }
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
    }
    else
    {
      WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::ResourceRequest *)&v68, 0, 0);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v62 = v60[0];
    WebCore::ResourceRequestBase::setHTTPMethod(&v68, &v62);
    v20 = v62;
    v62 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *a3;
    *a3 = 0;
    if ((v82 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
      v82 |= 1u;
    }
    v22 = v79;
    v79 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WebCore::FormData::~FormData(v22, v19);
        bmalloc::api::isoDeallocate(v52, v53);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    v82 = v82 & 0xF3 | 4;
    if (a4 <= 6)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v62 = v60[0];
      if ((v82 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
        v82 |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v72, (WTF::StringImpl *)0x1A, &v62);
      v82 &= ~2u;
      v23 = v62;
      v62 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v19);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13 + 192), v19);
    v25 = (uint64_t)v24;
    if (v24)
    {
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 + 1, v24));
    }
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a2, (uint64_t *)v60);
    v27 = v60[0];
    isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(v25, (uint64_t)v60[0]);
    v60[0] = 0;
    do
    {
      v30 = __ldaxr((unsigned int *)v27);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v27));
    if (v31)
    {
      if (!v25)
        goto LABEL_35;
    }
    else
    {
      atomic_store(1u, (unsigned int *)v27);
      v54 = (WTF::StringImpl *)*((_QWORD *)v27 + 6);
      *((_QWORD *)v27 + 6) = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v28);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = (WTF::StringImpl *)*((_QWORD *)v27 + 5);
      *((_QWORD *)v27 + 5) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v28);
        else
          *(_DWORD *)v55 -= 2;
      }
      v56 = *((unsigned int *)v27 + 8);
      if ((_DWORD)v56 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F6940[v56])(&v62, (char *)v27 + 8);
      *((_DWORD *)v27 + 8) = -1;
      WTF::fastFree(v27, v28);
      if (!v25)
      {
LABEL_35:
        v34 = v82;
        if (isSameSchemeHostPort)
          goto LABEL_39;
        if ((v82 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
          v34 = v82 | 1;
          v82 |= 1u;
        }
        if ((v76 & 2) != 0)
        {
          v76 &= ~2u;
          v82 = v34 & 0xFD;
          if ((v34 & 1) != 0)
            goto LABEL_40;
        }
        else
        {
LABEL_39:
          if ((v34 & 1) != 0)
          {
LABEL_40:
            v35 = HIDWORD(v72);
            v62 = 0;
            v63 = 0;
            v64 = HIDWORD(v72);
            if (HIDWORD(v72))
            {
              if (HIDWORD(v72) >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x195F043C8);
              }
              v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v72)));
              v63 = v35;
              v62 = v36;
              if (HIDWORD(v72))
              {
                v37 = v72;
                v38 = v72 + 16 * HIDWORD(v72);
                do
                {
                  *(_WORD *)v36 = *(_WORD *)v37;
                  v39 = *(_DWORD **)(v37 + 8);
                  if (v39)
                    *v39 += 2;
                  *((_QWORD *)v36 + 1) = v39;
                  v37 += 16;
                  v36 = (WTF::StringImpl *)((char *)v36 + 16);
                }
                while (v37 != v38);
              }
            }
            v40 = HIDWORD(v73);
            v65 = 0;
            v66 = 0;
            v67 = HIDWORD(v73);
            if (!HIDWORD(v73))
              goto LABEL_48;
            if (!(HIDWORD(v73) >> 28))
            {
              v47 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v73)));
              v66 = v40;
              v65 = v47;
              if (HIDWORD(v73))
              {
                v48 = v73;
                v49 = v73 + 16 * HIDWORD(v73);
                do
                {
                  v50 = *(_DWORD **)v48;
                  if (*(_QWORD *)v48)
                    *v50 += 2;
                  *v47 = v50;
                  v51 = *(_DWORD **)(v48 + 8);
                  if (v51)
                    *v51 += 2;
                  v47[1] = v51;
                  v48 += 16;
                  v47 += 2;
                }
                while (v48 != v49);
              }
LABEL_48:
              if (a4 == 2)
              {
                v41 = a1[35];
                ++*(_DWORD *)v41;
                WebCore::FrameLoader::updateRequestAndAddExtraFields(v41, *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8), (WebCore::FrameLoader *)&v68, 0, 0, 1, 0, 0, 0);
                if (!*(_DWORD *)v41)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F04324);
                }
                --*(_DWORD *)v41;
              }
              v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 192) + 8))(v13 + 192);
              WebCore::FrameLoader::outgoingReferrerURL((WebCore::FrameLoader *)a1[35], (uint64_t)v60);
              {
                WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
              }
              WebCore::SecurityPolicy::generateReferrerHeader((WebCore::SecurityPolicy *)a2, (WTF::StringImpl ***)v60, v42, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, (WTF::StringImpl ***)&v61);
              v44 = v60[0];
              v60[0] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v43);
                else
                  *(_DWORD *)v44 -= 2;
              }
              if (v61 && *((_DWORD *)v61 + 1))
                WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v68, &v61);
              WebCore::PingLoader::startPingLoad(a1, (uint64_t)&v68, (uint64_t)&v62, 0, 0, 0, a4 | 0x100);
              v46 = v61;
              v61 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v45);
                else
                  *(_DWORD *)v46 -= 2;
              }
              WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v62, v45);
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v13, v12);
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
LABEL_62:
              WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v68, v12);
              return;
            }
            __break(0xC471u);
LABEL_112:
            JUMPOUT(0x195F04274);
          }
        }
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v68);
        v82 |= 1u;
        goto LABEL_40;
      }
    }
    do
    {
      v32 = __ldaxr((unsigned int *)v25);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v25));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v25);
      v57 = *(WTF::StringImpl **)(v25 + 48);
      *(_QWORD *)(v25 + 48) = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v28);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = *(WTF::StringImpl **)(v25 + 40);
      *(_QWORD *)(v25 + 40) = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v28);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *(unsigned int *)(v25 + 32);
      if ((_DWORD)v59 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F6940[v59])(v60, v25 + 8);
      *(_DWORD *)(v25 + 32) = -1;
      WTF::fastFree((WTF *)v25, v28);
    }
    goto LABEL_35;
  }
}

uint64_t WebCore::LoaderStrategy::usePingLoad(WebCore::LoaderStrategy *this)
{
  return 1;
}

uint64_t WebCore::LoaderStrategy::shouldPerformSecurityChecks(WebCore::LoaderStrategy *this)
{
  return 0;
}

uint64_t WebCore::LoaderStrategy::havePerformedSecurityChecks()
{
  return 0;
}

void WebCore::LoaderStrategy::ongoingLoads(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::PlatformMediaResourceLoader::targetDispatcher@<X0>(WebCore::PlatformMediaResourceLoader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = WTF::MainThreadDispatcher::singleton(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  *a2 = v3;
  return result;
}

uint64_t WebCore::MediaResource::didPassAccessControlCheck(WebCore::MediaResource *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 56);
  return v1 & 1;
}

uint64_t WebCore::ResourceHandleClient::loadingSynchronousXHR(WebCore::ResourceHandleClient *this)
{
  return 0;
}

uint64_t WebCore::ResourceLoader::shouldUseCredentialStorage(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2)
{
  return (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 248))(this);
}

uint64_t WebCore::ResourceLoader::receivedCancellation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(a1, a3);
}

uint64_t WebCore::ResourceLoader::iOSOriginalRequest(WebCore::ResourceLoader *this)
{
  return (uint64_t)this + 336;
}

uint64_t WebCore::ResourceLoader::cachedResource(WebCore::ResourceLoader *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaResource::didPassAccessControlCheck(WebCore::PlatformMediaResource *this)
{
  return 0;
}

void WebCore::PlatformMediaResource::~PlatformMediaResource(WebCore::PlatformMediaResource *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33F6960;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebCore::PlatformMediaResource::~PlatformMediaResource(WebCore::PlatformMediaResource *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33F6960;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, char *__src, unsigned int a5, uint64_t a6, char *a7, unsigned int a8, char *a9, uint64_t a10, _BYTE *a11, uint64_t a12, uint64_t a13, _BYTE *a14, uint64_t a15)
{
  char *v21;
  char *v22;
  char *v23;
  size_t v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE *i;
  uint64_t v28;
  char *v29;
  char *v30;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  char v36;

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v21 = &__dst[a3];
  if (a5)
  {
    if (a5 == 1)
      *v21 = *__src;
    else
      memcpy(v21, __src, a5);
  }
  v22 = &v21[a5];
  if (a6)
  {
    v23 = *(char **)(a6 + 8);
    v24 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v25 = a12;
      v26 = a15;
      i = a11;
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 == 1)
          *v22 = *v23;
        else
          memcpy(v22, v23, v24);
      }
    }
    else
    {
      v32 = (unsigned __int128 *)&v22[v24];
      if (v24 < 0x10)
      {
        v33 = (unsigned __int128 *)v22;
      }
      else
      {
        v33 = (unsigned __int128 *)&v22[v24 & 0xFFFFFFF0];
        v34 = (unsigned __int128 *)v22;
        do
        {
          v35 = (unsigned __int128)vld2q_s8(v23);
          v23 += 32;
          *v34++ = v35;
        }
        while (v34 != v33);
      }
      v25 = a12;
      v26 = a15;
      for (i = a11; v33 != v32; v33 = (unsigned __int128 *)((char *)v33 + 1))
      {
        v36 = *v23;
        v23 += 2;
        *(_BYTE *)v33 = v36;
      }
    }
    v28 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v28 = 0;
    v25 = a12;
    v26 = a15;
    i = a11;
  }
  v29 = &v22[v28];
  if (a8)
  {
    if (a8 == 1)
      *v29 = *a7;
    else
      memcpy(&v22[v28], a7, a8);
  }
  v30 = &v29[a8];
  if ((_DWORD)a10)
  {
    if ((_DWORD)a10 == 1)
      *v30 = *a9;
    else
      memcpy(v30, a9, a10);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v30[a10], i, v25, a13, a14, v26);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, int8x16_t *a7, int a8, int8x16_t *a9, int a10, uint64_t a11, int8x16_t *a12, int a13)
{
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  int v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;

  v17 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v18 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v19 = 0uLL;
    do
    {
      v54.val[0] = *a2;
      v20 = a2[1];
      v57.val[0] = a2[2];
      v21 = a2[3];
      a2 += 4;
      v22 = v21;
      v57.val[1] = 0uLL;
      v60.val[0] = v20;
      v54.val[1] = 0uLL;
      v23 = a1;
      vst2q_s8(v23, v54);
      v23 += 32;
      v60.val[1] = 0uLL;
      vst2q_s8(v23, v60);
      v24 = a1 + 64;
      vst2q_s8(v24, v57);
      v25 = a1 + 96;
      vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
      a1 += 128;
    }
    while (a1 != v18);
    a1 = v18;
  }
  while (a1 != v17)
  {
    v26 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v26;
    a1 += 2;
  }
  if (a4)
  {
    v27 = *(int8x16_t **)(a4 + 8);
    v28 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v29 = &v17[2 * v28];
      if (v28 >= 0x40)
      {
        v30 = &v17[2 * (v28 & 0xFFFFFFC0)];
        v32 = 0uLL;
        v33 = v17;
        do
        {
          v55.val[0] = *v27;
          v34 = v27[1];
          v58.val[0] = v27[2];
          v35 = v27[3];
          v27 += 4;
          v36 = v35;
          v58.val[1] = 0uLL;
          v61.val[0] = v34;
          v55.val[1] = 0uLL;
          v37 = v33;
          vst2q_s8(v37, v55);
          v37 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v37, v61);
          v38 = v33 + 64;
          vst2q_s8(v38, v58);
          v39 = v33 + 96;
          vst2q_s8(v39, *(int8x16x2_t *)(&v32 - 1));
          v33 += 128;
        }
        while (v33 != v30);
      }
      else
      {
        v30 = v17;
      }
      while (v30 != v29)
      {
        v40 = v27->u8[0];
        v27 = (int8x16_t *)((char *)v27 + 1);
        *(_WORD *)v30 = v40;
        v30 += 2;
      }
    }
    else if ((_DWORD)v28 == 1)
    {
      *(_WORD *)v17 = v27->i16[0];
    }
    else if ((_DWORD)v28)
    {
      v53 = a8;
      memcpy(v17, v27, 2 * v28);
      a8 = v53;
    }
    v31 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v31 = 0;
  }
  v41 = &v17[2 * v31];
  v42 = &v41[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v43 = &v41[2 * (a6 & 0xFFFFFFC0)];
    v44 = 0uLL;
    do
    {
      v56.val[0] = *a5;
      v45 = a5[1];
      v59.val[0] = a5[2];
      v46 = a5[3];
      a5 += 4;
      v47 = v46;
      v59.val[1] = 0uLL;
      v62.val[0] = v45;
      v56.val[1] = 0uLL;
      v48 = v41;
      vst2q_s8(v48, v56);
      v48 += 32;
      v62.val[1] = 0uLL;
      vst2q_s8(v48, v62);
      v49 = v41 + 64;
      vst2q_s8(v49, v59);
      v50 = v41 + 96;
      vst2q_s8(v50, *(int8x16x2_t *)(&v44 - 1));
      v41 += 128;
    }
    while (v41 != v43);
    v41 = v43;
  }
  while (v41 != v42)
  {
    v51 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v41 = v51;
    v41 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v42, a7, a8, a9, a10, a11, a12, a13);
}

__n128 std::__optional_copy_assign_base<WebCore::NavigationRequester,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v2;
    v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(a1 + 8) = v3;
    v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v4;
    v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v5;
    v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    v7 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *(_DWORD *)(a1 + 64) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *(_DWORD *)(a1 + 68) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_DWORD *)(a1 + 72) = v9;
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v10 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(a1 + 88) = v10;
    v11 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(a1 + 96) = v11;
    *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
    v12 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(a1 + 112) = v12;
    v13 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v13;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    result = *(__n128 *)(a2 + 19);
    v15 = *(_OWORD *)(a2 + 21);
    v16 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 196) = *(_OWORD *)((char *)a2 + 196);
    *(_OWORD *)(a1 + 184) = v16;
    *(_OWORD *)(a1 + 168) = v15;
    *(__n128 *)(a1 + 152) = result;
    *(_BYTE *)(a1 + 224) = 1;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result)
  {
    v3 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v5;
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 33);
    *(_BYTE *)(result + 56) = 0;
    v8 = result + 56;
    *(_OWORD *)(v8 - 23) = v7;
    *(_OWORD *)(v8 - 32) = v6;
    *(_BYTE *)(v8 + 128) = 0;
    if (*(_BYTE *)(a2 + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
      *(_BYTE *)(v3 + 184) = 1;
    }
    v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 208) = v9;
    *(_BYTE *)(v3 + 224) = 0;
    *(_BYTE *)(v3 + 232) = 0;
    if (*(_BYTE *)(a2 + 232))
    {
      v10 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(v3 + 224) = v10;
      *(_BYTE *)(v3 + 232) = 1;
    }
    v11 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v3 + 240) = v11;
    v12 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(v3 + 248) = v12;
    v13 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(v3 + 256) = v13;
    v14 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(v3 + 264) = v14;
    *(_BYTE *)(v3 + 272) = 0;
    *(_BYTE *)(v3 + 296) = 0;
    if (*(_BYTE *)(a2 + 296))
    {
      v15 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(v3 + 272) = v15;
      v16 = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(v3 + 280) = v16;
      v17 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a2 + 288) = 0;
      *(_QWORD *)(v3 + 288) = v17;
      *(_BYTE *)(v3 + 296) = 1;
    }
    v18 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(v3 + 304) = v18;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(const void **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
        CFRelease(v5);
      v6 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v7 = *(const void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      if (v7)
        CFRelease(v7);
      v8 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      v9 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;
      if (v9)
        CFRelease(v9);
      v10 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      v11 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v12 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v14)
      CFRelease(v14);
    v15 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      CFRelease(v15);
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v16;
    v17 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v17;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v18;
    v19 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v19;
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v7 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      result = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v8;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    v9 = *(WTF::StringImpl **)(result + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v11;
    v12 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(result + 8) = v12;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(result + 16) = v13;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

__n128 std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(a1 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(a1 + 68) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v9;
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  v10 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v11;
  *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
  v12 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v12;
  v13 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v13;
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  result = *(__n128 *)(a2 + 19);
  v15 = *(_OWORD *)(a2 + 21);
  v16 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)((char *)a2 + 196);
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(__n128 *)(a1 + 152) = result;
  *(_BYTE *)(a1 + 224) = 1;
  return result;
}

uint64_t WebCore::ScheduledURLNavigation::ScheduledURLNavigation(uint64_t a1, WebCore::Document *this, unsigned int *a3, uint64_t a4, _DWORD **a5, char a6, char a7, char a8, double a9, char a10)
{
  WTF *shouldOpenExternalURLsPolicyToPropagate;
  char v20;
  WebCore *isMainThread;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  char v30;
  _BYTE v31[24];
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  shouldOpenExternalURLsPolicyToPropagate = (WTF *)WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(this, this);
  v20 = (char)shouldOpenExternalURLsPolicyToPropagate;
  *(_QWORD *)a1 = off_1E33F6A30;
  *(double *)(a1 + 8) = a9;
  *(_BYTE *)(a1 + 16) = a6;
  *(_BYTE *)(a1 + 17) = a7;
  *(_BYTE *)(a1 + 18) = a8;
  *(_BYTE *)(a1 + 19) = a10;
  isMainThread = (WebCore *)WTF::isMainThread(shouldOpenExternalURLsPolicyToPropagate);
  if ((_DWORD)isMainThread)
  {
    {
      v22 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v22 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(a1 + 24) = v22;
  *(_BYTE *)(a1 + 32) = v20;
  *(_BYTE *)(a1 + 33) = 1;
  v23 = WebCore::lexicalFrameFromCommonVM(isMainThread);
  if (v23 && *(_QWORD *)(*(_QWORD *)(v23 + 128) + 8) == v23)
    *(_BYTE *)(a1 + 33) = 0;
  *(_QWORD *)a1 = off_1E33F69E8;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(a1 + 40) = this;
  if (a3)
  {
    do
      v25 = __ldaxr(a3);
    while (__stlxr(v25 + 1, a3));
  }
  *(_QWORD *)(a1 + 48) = a3;
  WebCore::Document::topOrigin(this, v24);
  v31[0] = 0;
  v32 = -1;
  v27 = *(unsigned int *)(v26 + 32);
  if ((_DWORD)v27 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E33F6A68[v27])(&v30, v31, v26 + 8);
    v32 = v27;
  }
  v33 = 1;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(a1 + 56, a4, (uint64_t)v31);
  if (v33 && v32 != -1)
    ((void (*)(char *, _BYTE *))off_1E33F6940[v32])(&v30, v31);
  v28 = *a5;
  if (*a5)
    *v28 += 2;
  *(_QWORD *)(a1 + 128) = v28;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void WebCore::ScheduledRedirect::~ScheduledRedirect(WebCore::ScheduledRedirect *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScheduledURLNavigation::~ScheduledURLNavigation(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::ScheduledRedirect::fire(WebCore::ScheduledRedirect *this, WebCore::Frame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WebCore::UserGestureToken *v8;
  void *v9;
  _DWORD **v10;
  char v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  __int128 v14;
  char v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::FrameLoader *v26;
  WTF::StringImpl *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40[39];
  char v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[68];
  __int16 v45;
  char v46;
  char v47;
  _DWORD *v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[7];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int16 v56;
  char v57;
  char v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  WebCore::UserGestureToken *v66;
  _BYTE v67[8];

  if (*((_BYTE *)a2 + 144))
    return;
  v4 = (unsigned int *)((char *)a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*((_BYTE *)this + 137))
  {
    v6 = *((_QWORD *)a2 + 37);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v7 + 2;
      if ((*(_BYTE *)(v6 + 268) & 0x80) != 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage((_QWORD *)v6, 8, 2, v44, 0);
        v30 = v44[0];
        v44[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, v29);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
        goto LABEL_42;
      }
      if (v7)
      {
        *(_DWORD *)(v6 + 24) = v7;
      }
      else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
    }
  }
  v8 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  if (v8)
  {
    ++*(_DWORD *)v8;
    v66 = v8;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v67, (uint64_t *)&v66, 0, 0);
    v66 = 0;
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v8, v9);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  else
  {
    v66 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v67, (uint64_t *)&v66, 0, 0);
    v66 = 0;
  }
  v10 = (_DWORD **)((char *)this + 56);
  v11 = WTF::equalIgnoringFragmentIdentifier();
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  if (v12)
    *(_DWORD *)v12 += 2;
  v40[0] = v12;
  v13 = *v10;
  if (*v10)
    *v13 += 2;
  v14 = *((_OWORD *)this + 5);
  v49 = *((_OWORD *)this + 4);
  v50 = v14;
  v48 = v13;
  v51[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v51);
  v51[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v51[6] = v44[0];
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = v11;
  v56 = 256;
  v57 = 0;
  v15 = v58 & 0x80 | 4;
  v58 = v15;
  v59 = 0;
  v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v16 += 2;
    v15 = v58;
  }
  v60 = v16;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = v64 & 0xE0 | 5;
  v58 = v15 | 2;
  v65 = 0;
  WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v48, v40);
  v18 = v40[0];
  v40[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (!*((_BYTE *)this + 33))
    v57 = 1;
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_DWORD *)v19 + 6) += 2;
  v40[0] = v19;
  v20 = *((_QWORD *)this + 6);
  if (v20)
  {
    do
      v21 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v21 + 1, (unsigned int *)v20));
  }
  WTF::AtomStringImpl::add();
  v22 = v44[0];
  v42 = 0;
  v43 = v44[0];
  WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v44, (uint64_t *)v40, (unsigned int *)v20, (uint64_t)&v48, (_DWORD **)&v43, *((_BYTE *)this + 33), &v42);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v20);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v20));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v20);
    v37 = *(WTF::StringImpl **)(v20 + 48);
    *(_QWORD *)(v20 + 48) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v23);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = *(WTF::StringImpl **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v23);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = *(unsigned int *)(v20 + 32);
    if ((_DWORD)v39 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F6940[v39])(&v43, v20 + 8);
    *(_DWORD *)(v20 + 32) = -1;
    WTF::fastFree((WTF *)v20, v23);
  }
  if (v40[0])
  {
    if (*((_DWORD *)v40[0] + 6) == 2)
    {
      if ((*((_WORD *)v40[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40[0], v23);
    }
    else
    {
      *((_DWORD *)v40[0] + 6) -= 2;
    }
  }
  v45 = *((_WORD *)this + 8);
  v46 = 0;
  v47 = *((_BYTE *)this + 32);
  v26 = (WebCore::FrameLoader *)*((_QWORD *)a2 + 35);
  ++*(_DWORD *)v26;
  LOBYTE(v40[0]) = 0;
  v41 = 0;
  WebCore::FrameLoader::changeLocation(v26, (uint64_t)v44, 0, (const WebCore::Document *)v40);
  if (v41)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v40, v27);
  if (!*(_DWORD *)v26)
  {
    __break(0xC471u);
    JUMPOUT(0x195F058E8);
  }
  --*(_DWORD *)v26;
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v44, v27);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v48, v28);
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v67);
  do
  {
LABEL_42:
    v31 = __ldaxr(v4);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v4));
  if (!v32)
  {
    atomic_store(1u, v4);
    v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v35 = off_1E31FE290;
    *((_QWORD *)v35 + 1) = v4;
    v44[0] = v35;
    WTF::ensureOnMainThread();
    v36 = v44[0];
    v44[0] = 0;
    if (v36)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v36 + 8))(v36);
  }
}

uint64_t WebCore::ScheduledRedirect::shouldStartTimer(WebCore::ScheduledRedirect *this, WebCore::Frame *a2)
{
  unsigned int *v2;
  unsigned int v3;
  WebCore::FrameLoader *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  if (*((_BYTE *)a2 + 144))
    return 0;
  v2 = (unsigned int *)((char *)a2 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = (WebCore::FrameLoader *)*((_QWORD *)a2 + 35);
  ++*(_DWORD *)v4;
  v5 = WebCore::FrameLoader::allAncestorsAreComplete(v4);
  if (!*(_DWORD *)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195F059A8);
  }
  v6 = v5;
  --*(_DWORD *)v4;
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v6;
}

void WebCore::ScheduledURLNavigation::didStartTimer(WebCore::ScheduledURLNavigation *this, WebCore::Frame *a2, WebCore::Timer *a3)
{
  WebCore::UserGestureToken *v5;
  WTF::WallTime *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::MonotonicTime *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WebCore::UserGestureToken *v30;
  _BYTE v31[8];

  if (!*((_BYTE *)this + 136))
  {
    *((_BYTE *)this + 136) = 1;
    v5 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
    if (v5)
    {
      ++*(_DWORD *)v5;
      v30 = v5;
      v6 = WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v31, (uint64_t *)&v30, 0, 0);
      v30 = 0;
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v5, v7);
        v6 = (WTF::WallTime *)WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
    else
    {
      v30 = 0;
      v6 = WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v31, (uint64_t *)&v30, 0, 0);
      v30 = 0;
    }
    v8 = (unsigned int *)((char *)a2 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!*((_BYTE *)a2 + 144))
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      v11 = (_DWORD *)*((_QWORD *)a2 + 35);
      ++*v11;
      v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      if (v12)
        *(_DWORD *)v12 += 2;
      v27 = v12;
      v13 = *((_OWORD *)this + 5);
      v28 = *((_OWORD *)this + 4);
      v29 = v13;
      v14 = (WTF::MonotonicTime *)WTF::WallTime::now(v6);
      WTF::MonotonicTime::now(v14);
      WebCore::FrameLoader::clientRedirected((uint64_t)v11, (uint64_t)&v27, *((_BYTE *)this + 17));
      v16 = v27;
      v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (!*v11)
      {
        __break(0xC471u);
        JUMPOUT(0x195F05BD4);
      }
      --*v11;
      do
      {
        v17 = __ldaxr(v8);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v8));
      if (!v18)
      {
        atomic_store(1u, v8);
        v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v25 = off_1E31FE290;
        *((_QWORD *)v25 + 1) = v8;
        v27 = v25;
        WTF::ensureOnMainThread();
        v26 = v27;
        v27 = 0;
        if (v26)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
      }
    }
    do
    {
      v19 = __ldaxr(v8);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v8));
    if (!v20)
    {
      atomic_store(1u, v8);
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v23 = off_1E31FE290;
      *((_QWORD *)v23 + 1) = v8;
      v27 = v23;
      WTF::ensureOnMainThread();
      v24 = v27;
      v27 = 0;
      if (v24)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    }
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v31);
  }
}

uint64_t WebCore::ScheduledURLNavigation::didStopTimer(uint64_t result, uint64_t a2, char a3)
{
  BOOL v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_BYTE *)(result + 136))
    v3 = *(_BYTE *)(a2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v5 = (unsigned int *)(a2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_QWORD *)(a2 + 280);
    ++*(_DWORD *)v7;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 200))(*(_QWORD *)(v7 + 16));
    if ((a3 & 1) == 0)
      *(_BYTE *)(v7 + 152) = 0;
    *(_BYTE *)(v7 + 153) = 0;
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195F05D28);
    }
    --*(_DWORD *)v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, v5);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E31FE290;
      v10[1] = v5;
      v11 = v10;
      WTF::ensureOnMainThread();
      result = (uint64_t)v11;
      if (v11)
        return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return result;
}

uint64_t WebCore::ScheduledNavigation::targetIsCurrentFrame(WebCore::ScheduledNavigation *this)
{
  return 1;
}

uint64_t WebCore::ScheduledNavigation::ScheduledNavigation(uint64_t a1, char a2, char a3, char a4, char a5)
{
  WebCore *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33F6A30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 17) = a3;
  *(_BYTE *)(a1 + 18) = a4;
  *(_BYTE *)(a1 + 19) = 1;
  v7 = (WebCore *)WebCore::UserGestureIndicator::currentUserGesture((WebCore::UserGestureIndicator *)a1, (uint64_t *)(a1 + 24));
  *(_BYTE *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 33) = 1;
  v8 = WebCore::lexicalFrameFromCommonVM(v7);
  if (v8 && *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8)
    *(_BYTE *)(a1 + 33) = 0;
  return a1;
}

uint64_t WebCore::ScheduledNavigation::shouldStartTimer(WebCore::ScheduledNavigation *this, WebCore::Frame *a2)
{
  return 1;
}

void WebCore::ScheduledURLNavigation::~ScheduledURLNavigation(WebCore::ScheduledURLNavigation *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::UserGestureToken *v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)this = off_1E33F69E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::ScheduledURLNavigation *)((char *)this + 56));
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v12 = *(WTF::StringImpl **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v4);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(WTF::StringImpl **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v4);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(unsigned int *)(v5 + 32);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, uint64_t))off_1E33F6940[v14])(&v15, v5 + 8);
      *(_DWORD *)(v5 + 32) = -1;
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33F6A30;
  v9 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v9, v4);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NavigationScheduler::scheduleLocationChange(WebCore::Document &,WebCore::SecurityOrigin &,WTF::URL const&,WTF::String const&,WebCore::LockHistory,WebCore::LockBackForwardList,WebCore::NavigationHistoryBehavior,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33F6A88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigationScheduler::scheduleLocationChange(WebCore::Document &,WebCore::SecurityOrigin &,WTF::URL const&,WTF::String const&,WebCore::LockHistory,WebCore::LockBackForwardList,WebCore::NavigationHistoryBehavior,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F6A88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigationScheduler::scheduleLocationChange(WebCore::Document &,WebCore::SecurityOrigin &,WTF::URL const&,WTF::String const&,WebCore::LockHistory,WebCore::LockBackForwardList,WebCore::NavigationHistoryBehavior,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
    v3 = 2;
  else
    v3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::ScheduledLocationChange::~ScheduledLocationChange(WebCore::ScheduledLocationChange *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33F6AB0;
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  WebCore::ScheduledURLNavigation::~ScheduledURLNavigation(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E33F6AB0;
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v6 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  WebCore::ScheduledURLNavigation::~ScheduledURLNavigation(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::ScheduledLocationChange::fire(WebCore::ScheduledLocationChange *this, WebCore::Frame *a2)
{
  WebCore::UserGestureToken *v4;
  void *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _QWORD v30[54];
  __int16 v31;
  char v32;
  char v33;
  char v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[7];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  char v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  WebCore::UserGestureToken *v52;
  _BYTE v53[8];

  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  if (v4)
  {
    ++*(_DWORD *)v4;
    v52 = v4;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v53, (uint64_t *)&v52, 0, 0);
    v52 = 0;
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, v5);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    v52 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v53, (uint64_t *)&v52, 0, 0);
    v52 = 0;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  if (v6)
    *(_DWORD *)v6 += 2;
  v35 = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 7);
  if (v7)
    *v7 += 2;
  v8 = *((_OWORD *)this + 5);
  v37 = *((_OWORD *)this + 4);
  v38 = v8;
  v36 = v7;
  v39[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v39);
  v39[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39[6] = v30[0];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0x10000;
  v9 = v44 & 0x80 | 4;
  v44 = v9;
  v45 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v9 = v44;
  }
  v46 = v10;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = v50 & 0xE0 | 5;
  v44 = v9 | 2;
  v51 = 0;
  WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v36, &v35);
  v12 = v35;
  v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_DWORD *)v13 + 6) += 2;
  v35 = v13;
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  WTF::AtomStringImpl::add();
  v16 = (WTF::StringImpl *)v30[0];
  v28 = 0;
  v29 = (_DWORD *)v30[0];
  WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v30, (uint64_t *)&v35, (unsigned int *)v14, (uint64_t)&v36, &v29, *((_BYTE *)this + 33), &v28);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v14));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v14);
    v25 = *(WTF::StringImpl **)(v14 + 48);
    *(_QWORD *)(v14 + 48) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(WTF::StringImpl **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v17);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = *(unsigned int *)(v14 + 32);
    if ((_DWORD)v27 != -1)
      ((void (*)(_DWORD **, uint64_t))off_1E33F6940[v27])(&v29, v14 + 8);
    *(_DWORD *)(v14 + 32) = -1;
    WTF::fastFree((WTF *)v14, v17);
  }
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v17);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  v31 = *((_WORD *)this + 8);
  v32 = 0;
  v33 = *((_BYTE *)this + 32);
  v34 = *((_BYTE *)this + 152);
  v20 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  (*(void (**)(WebCore::Frame *, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v30, v21);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v36, v22);
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v53);
}

void WebCore::ScheduledFormSubmission::~ScheduledFormSubmission(WebCore::ScheduledFormSubmission *this, WTF::StringImpl *a2)
{
  WebCore::FormSubmission *v3;
  WebCore::UserGestureToken *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::FormSubmission *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormSubmission::~FormSubmission(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33F6A30;
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

{
  WebCore::FormSubmission *v3;
  WebCore::UserGestureToken *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::FormSubmission *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormSubmission::~FormSubmission(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33F6A30;
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::ScheduledFormSubmission::didStartTimer(WebCore::ScheduledFormSubmission *this, WebCore::Frame *a2, WebCore::Timer *a3)
{
  unsigned int *v5;
  unsigned int v6;
  WebCore::UserGestureToken *v7;
  void *v8;
  _DWORD *v9;
  WTF::WallTime *v10;
  WTF::MonotonicTime *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[5];
  WebCore::UserGestureToken *v21;
  _BYTE v22[8];

  if (!*((_BYTE *)a2 + 144))
  {
    v5 = (unsigned int *)((char *)a2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    if (!*((_BYTE *)this + 48))
    {
      *((_BYTE *)this + 48) = 1;
      v7 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
      if (v7)
      {
        ++*(_DWORD *)v7;
        v21 = v7;
        WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v22, (uint64_t *)&v21, 0, 0);
        v21 = 0;
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::UserGestureToken::~UserGestureToken(v7, v8);
          WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      else
      {
        v21 = 0;
        WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v22, (uint64_t *)&v21, 0, 0);
        v21 = 0;
      }
      v9 = (_DWORD *)*((_QWORD *)a2 + 35);
      ++*v9;
      v10 = (WTF::WallTime *)WebCore::FormSubmission::requestURL(*((_QWORD *)this + 5), (uint64_t)v20);
      v11 = (WTF::MonotonicTime *)WTF::WallTime::now(v10);
      WTF::MonotonicTime::now(v11);
      WebCore::FrameLoader::clientRedirected((uint64_t)v9, (uint64_t)v20, *((_BYTE *)this + 17));
      v13 = v20[0];
      v20[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (!*v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195F067C0);
      }
      --*v9;
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v22);
    }
    do
    {
      v14 = __ldaxr(v5);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v5));
    if (!v15)
    {
      atomic_store(1u, v5);
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v18 = off_1E31FE290;
      *((_QWORD *)v18 + 1) = v5;
      v20[0] = v18;
      WTF::ensureOnMainThread();
      v19 = v20[0];
      v20[0] = 0;
      if (v19)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t WebCore::ScheduledFormSubmission::didStopTimer(uint64_t result, uint64_t a2, char a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;

  if (!*(_BYTE *)(a2 + 144))
  {
    v4 = (unsigned int *)(a2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (*(_BYTE *)(result + 48))
    {
      v6 = *(_QWORD *)(a2 + 280);
      ++*(_DWORD *)v6;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 200))(*(_QWORD *)(v6 + 16));
      if ((a3 & 1) == 0)
        *(_BYTE *)(v6 + 152) = 0;
      *(_BYTE *)(v6 + 153) = 0;
      if (!*(_DWORD *)v6)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v6;
    }
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      result = (uint64_t)v10;
      if (v10)
        return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return result;
}

BOOL WebCore::ScheduledFormSubmission::targetIsCurrentFrame(WebCore::ScheduledFormSubmission *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 64);
  if (v1)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    v3 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  return !WebCore::isBlankTargetFrameName(v2, v3);
}

void WebCore::ScheduledRefresh::~ScheduledRefresh(WebCore::ScheduledRefresh *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScheduledURLNavigation::~ScheduledURLNavigation(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::ScheduledRefresh::fire(WebCore::ScheduledRefresh *this, WebCore::Frame *a2)
{
  WebCore::UserGestureToken *v4;
  void *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD v29[54];
  __int16 v30;
  char v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[7];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  char v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  WebCore::UserGestureToken *v49;
  _BYTE v50[8];

  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  if (v4)
  {
    ++*(_DWORD *)v4;
    v49 = v4;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v50, (uint64_t *)&v49, 0, 0);
    v49 = 0;
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, v5);
      WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    v49 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v50, (uint64_t *)&v49, 0, 0);
    v49 = 0;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  if (v6)
    *(_DWORD *)v6 += 2;
  v32 = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 7);
  if (v7)
    *v7 += 2;
  v8 = *((_OWORD *)this + 5);
  v34 = *((_OWORD *)this + 4);
  v35 = v8;
  v33 = v7;
  v36[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v36);
  v36[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36[6] = v29[0];
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 65537;
  v9 = v41 & 0x80 | 4;
  v41 = v9;
  v42 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v9 = v41;
  }
  v43 = v10;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = v47 & 0xE0 | 5;
  v41 = v9 | 2;
  v48 = 0;
  WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v33, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_DWORD *)v13 + 6) += 2;
  v32 = v13;
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  WTF::AtomStringImpl::add();
  v16 = (WTF::StringImpl *)v29[0];
  v27 = 0;
  v28 = (_DWORD *)v29[0];
  WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v29, (uint64_t *)&v32, (unsigned int *)v14, (uint64_t)&v33, &v28, *((_BYTE *)this + 33), &v27);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v14));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v14);
    v24 = *(WTF::StringImpl **)(v14 + 48);
    *(_QWORD *)(v14 + 48) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(WTF::StringImpl **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(unsigned int *)(v14 + 32);
    if ((_DWORD)v26 != -1)
      ((void (*)(_DWORD **, uint64_t))off_1E33F6940[v26])(&v28, v14 + 8);
    *(_DWORD *)(v14 + 32) = -1;
    WTF::fastFree((WTF *)v14, v17);
  }
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v17);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  v30 = *((_WORD *)this + 8);
  v31 = *((_BYTE *)this + 32);
  (*(void (**)(WebCore::Frame *, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v29);
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v20);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v33, v21);
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v50);
}

void WebCore::ScheduledHistoryNavigation::~ScheduledHistoryNavigation(WebCore::ScheduledHistoryNavigation *this, WTF::StringImpl *a2)
{
  WebCore::HistoryItem *v3;
  WebCore::UserGestureToken *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33F6B88;
  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33F6A30;
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

{
  WebCore::HistoryItem *v3;
  WebCore::UserGestureToken *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33F6B88;
  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33F6A30;
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::ScheduledHistoryNavigation::fire(WebCore::ScheduledHistoryNavigation *this, WebCore::Frame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  WebCore::UserGestureToken *v10;
  void *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WebCore::HistoryItem *v14;
  WebCore::HistoryItem *v15;
  unsigned int *v16;
  unsigned int v17;
  WebCore *v18;
  uint64_t v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  void *v30;
  WebCore::HistoryItem *v31;
  WebCore::HistoryItem *v32;
  WebCore::HistoryItem *v33[39];
  char v34;
  char v35;
  WTF::StringImpl *v36;
  WebCore::UserGestureToken *v37;
  _BYTE v38[8];

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)v3;
      v6 = *((_QWORD *)this + 5);
      v7 = *(_DWORD **)(*(_QWORD *)(v3 + 136) + 16);
      ++v7[2];
      v8 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 56))(v7, v6);
      v9 = v8;
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        if (v9)
          goto LABEL_5;
      }
      else
      {
        --v7[2];
        if (v8)
        {
LABEL_5:
          v10 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
          if (v10)
          {
            ++*(_DWORD *)v10;
            v37 = v10;
            WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v38, (uint64_t *)&v37, 0, 0);
            v37 = 0;
            if (*(_DWORD *)v10 == 1)
            {
              WebCore::UserGestureToken::~UserGestureToken(v10, v11);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v10;
            }
          }
          else
          {
            v37 = 0;
            WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v38, (uint64_t *)&v37, 0, 0);
            v37 = 0;
          }
          v12 = *(_DWORD **)(*(_QWORD *)(v3 + 136) + 16);
          ++v12[2];
          (*(void (**)(WebCore::HistoryItem **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v12 + 32))(v33, v12, 0);
          if (v12[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          else
            --v12[2];
          v14 = (WebCore::HistoryItem *)*((_QWORD *)this + 5);
          v15 = v33[0];
          v33[0] = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v15, v13);
              WTF::fastFree(v29, v30);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
          if (v15 == v14)
          {
            if (!*((_BYTE *)a2 + 144))
            {
              v16 = (unsigned int *)((char *)a2 + 8);
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 + 1, v16));
              v18 = (WebCore *)*((_QWORD *)a2 + 35);
              ++*(_DWORD *)v18;
              v19 = *((_QWORD *)a2 + 37) + 736;
              WTF::AtomStringImpl::add();
              v35 = 0;
              v20 = *((_BYTE *)this + 32);
              LOBYTE(v33[0]) = 0;
              v34 = 0;
              WebCore::FrameLoader::changeLocation(v18, v19, (_DWORD **)&v36, 0, &v35, v20, 0, MEMORY[0x1E0CBF2F8], (const WebCore::Document *)v33);
              if (v34)
                WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v33, v21);
              v22 = v36;
              v36 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v21);
                else
                  *(_DWORD *)v22 -= 2;
              }
              if (!*(_DWORD *)v18)
              {
                __break(0xC471u);
                JUMPOUT(0x195F07080);
              }
              --*(_DWORD *)v18;
              do
              {
                v23 = __ldaxr(v16);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v16));
              if (!v24)
              {
                atomic_store(1u, v16);
                v31 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v31 = off_1E31FE290;
                *((_QWORD *)v31 + 1) = v16;
                v33[0] = v31;
                WTF::ensureOnMainThread();
                v32 = v33[0];
                v33[0] = 0;
                if (v32)
                  (*(void (**)(WebCore::HistoryItem *))(*(_QWORD *)v32 + 8))(v32);
              }
            }
          }
          else
          {
            WebCore::Page::goToItem(v3, *(_QWORD *)(v3 + 160), *((WebCore::HistoryItem **)this + 5), 3, 0);
          }
          WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v38);
        }
      }
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::Page::~Page(v3);
        WTF::fastFree(v25, v26);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaResource::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  *a1 = &off_1E33F6BD0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v13 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return a1;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return a1;
LABEL_16:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaResource::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  *(_QWORD *)this = &off_1E33F6BD0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v13 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return WTF::fastFree(this, a2);
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return WTF::fastFree(this, a2);
LABEL_16:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaResource::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::call(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 24);
  if (v4)
  {
    *(_QWORD *)(result + 24) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    ++*(_QWORD *)(v5 + 8);
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_13:
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v8 = &off_1E33F6BF8;
        v8[1] = v3;
        v9 = v8;
        WTF::ensureOnMainThread();
        result = (uint64_t)v9;
        if (v9)
          return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_13;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaResource::ensureShutdown(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E33F6BF8;
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaResource::ensureShutdown(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F6BF8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaResource::ensureShutdown(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::NavigationScheduler::*&)(void),WebCore::NavigationScheduler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::create(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33F6C48;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::create(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F6C48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::create(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  _DWORD *result;
  _DWORD *v4;

  if ((a2 & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v4 = *(_DWORD **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v4 = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v2 + 16))(v2, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33F6C70;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F6C70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];
  _DWORD *v10;
  uint64_t v11;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 40);
    if (v4)
      ++*(_DWORD *)(v4 + 24);
    v5 = *(_QWORD *)(v3 + 744);
    v10 = (_DWORD *)v3;
    v11 = v5;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::add<WebCore::ResourceLoader*>((uint64_t *)(v4 + 104), &v11, &v10, (uint64_t)v9);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    *(_BYTE *)(v3 + 1136) = 1;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  _DWORD *v6;

  *a1 = off_1E33F6C98;
  v3 = a1[34];
  a1[34] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  v5 = (const void *)a1[32];
  a1[32] = 0;
  if (v5)
  {
    CFRelease(v5);
    v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;

  *a1 = off_1E33F6C98;
  v3 = a1[34];
  a1[34] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  v5 = (const void *)a1[32];
  a1[32] = 0;
  if (v5)
  {
    CFRelease(v5);
    v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
  v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *this)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  char v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[7];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v11 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v11;
    if ((v11 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
  }
  if (*(_QWORD *)this)
  {
    WebCore::ResourceLoader::willSendRequestInternal(*(_QWORD *)(a1 + 8), (CFTypeRef *)this, a1 + 16, (uint64_t *)(a1 + 272));
  }
  else
  {
    v28 = 0;
    WTF::URL::invalidate((WTF::URL *)&v28);
    v4 = v28;
    if (v28)
      *(_DWORD *)v28 += 2;
    v12 = v4;
    v13 = v29;
    v14 = v30;
    v15[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v15);
    v15[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15[6] = v31;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0x10000;
    v6 = v20 & 0x80 | 4;
    v20 = v6;
    v21 = 0;
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v7 += 2;
      v6 = v20;
    }
    v22 = v7;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v26 & 0xE0 | 5;
    v20 = v6 | 2;
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v27 = 0;
    v9 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v12, v10);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  _DWORD *v6;

  *a1 = off_1E33F6CC0;
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[35];
    a1[35] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), a2);
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  _DWORD *v7;

  *a1 = off_1E33F6CC0;
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[35];
    a1[35] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), a2);
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebCore::NetscapePlugInStreamLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef cf;

  v1 = *(WTF::StringImpl **)(a1 + 8);
  v2 = *((_QWORD *)v1 + 141);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v4 = a1 + 24;
      WebCore::ResourceResponse::platformLazyInit(a1 + 24, 1);
      if ((*(_BYTE *)(a1 + 32) & 2) != 0
        && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 141) + 8) + 40))(*(_QWORD *)(*((_QWORD *)v1 + 141) + 8)) & 1) == 0)
      {
        WebCore::ResourceResponse::platformLazyInit(v4, 1);
        if (*(_WORD *)(a1 + 160))
        {
          WebCore::ResourceResponse::platformLazyInit(v4, 1);
          if (*(__int16 *)(a1 + 160) < 100
            || (WebCore::ResourceResponse::platformLazyInit(v4, 1), *(__int16 *)(a1 + 160) >= 400))
          {
            v5 = *((_QWORD *)v1 + 4);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 280);
              if (v6)
                ++*(_DWORD *)v6;
            }
            else
            {
              v6 = 0;
            }
            (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 16) + 624))(&v12, *(_QWORD *)(v6 + 16), v4);
            WebCore::ResourceLoader::cancel(v1, (uint64_t)&v12, 0);
            v8 = cf;
            cf = 0;
            if (v8)
              CFRelease(v8);
            v9 = v14;
            v14 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v7);
              else
                *(_DWORD *)v9 -= 2;
            }
            v10 = v13;
            v13 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v7);
              else
                *(_DWORD *)v10 -= 2;
            }
            v11 = v12;
            v12 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v7);
              else
                *(_DWORD *)v11 -= 2;
            }
            if (!*(_DWORD *)v6)
            {
              __break(0xC471u);
              JUMPOUT(0x195F07F2CLL);
            }
            --*(_DWORD *)v6;
          }
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PingLoader::startPingLoad(WebCore::LocalFrame &,WebCore::ResourceRequest &,WebCore::HTTPHeaderMap &&,WebCore::PingLoader::ShouldFollowRedirects,WebCore::ContentSecurityPolicyImposition,WebCore::ReferrerPolicy,std::optional<WebCore::ViolationReportType>)::$_0,void,WebCore::ResourceError const&,WebCore::ResourceResponse const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E33F6CE8;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PingLoader::startPingLoad(WebCore::LocalFrame &,WebCore::ResourceRequest &,WebCore::HTTPHeaderMap &&,WebCore::PingLoader::ShouldFollowRedirects,WebCore::ContentSecurityPolicyImposition,WebCore::ReferrerPolicy,std::optional<WebCore::ViolationReportType>)::$_0,void,WebCore::ResourceError const&,WebCore::ResourceResponse const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F6CE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PingLoader::startPingLoad(WebCore::LocalFrame &,WebCore::ResourceRequest &,WebCore::HTTPHeaderMap &&,WebCore::PingLoader::ShouldFollowRedirects,WebCore::ContentSecurityPolicyImposition,WebCore::ReferrerPolicy,std::optional<WebCore::ViolationReportType>)::$_0,void,WebCore::ResourceError const&,WebCore::ResourceResponse const&>::call(uint64_t a1, WebCore::ResourceError *a2, uint64_t a3)
{
  uint64_t v6;
  Inspector::IdentifiersFactory *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  Inspector::IdentifiersFactory *v21;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _OWORD v30[5];
  WTF::StringImpl *v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  if ((*(_BYTE *)(a3 + 138) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(Inspector::IdentifiersFactory **)(a1 + 16);
    v8 = *(_QWORD *)(v6 + 280);
    v9 = 88;
    if (!*(_BYTE *)(v8 + 80))
      v9 = 96;
    v10 = *(_DWORD **)(v8 + v9);
    if (v10)
      ++v10[6];
    v11 = *(_QWORD *)(v6 + 24);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8)))
        {
          v28 = *(WTF::StringImpl **)(v13 + 192);
          if (v28)
            WebCore::InspectorNetworkAgent::didReceiveResponse(v28, v7, (uint64_t)v10, a3, 0);
          v29 = *(_QWORD *)(v13 + 16);
          if (v29)
            WebCore::WebConsoleAgent::didReceiveResponse(v29, (uint64_t)v7, a3);
        }
      }
    }
    if (v10)
    {
      if (v10[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
      else
        --v10[6];
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 280);
  v16 = 88;
  if (!*(_BYTE *)(v15 + 80))
    v16 = 96;
  v17 = *(_DWORD **)(v15 + v16);
  if (!*((_BYTE *)a2 + 60))
  {
    if (v17)
      ++v17[6];
    v21 = *(Inspector::IdentifiersFactory **)(a1 + 16);
    v32 = 0;
    *(_OWORD *)v31 = 0u;
    memset(v30, 0, sizeof(v30));
    v33 = -1;
    v34 = -1;
    v35 = 0;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v25 = *(_QWORD *)(v14 + 24);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 80) + 8) + 192);
          if (v27)
            WebCore::InspectorNetworkAgent::didFinishLoading(v27, v21, (uint64_t)v17, (uint64_t)v30);
        }
      }
    }
    v23 = v35;
    v35 = 0;
    if (v23)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v23, v21);
    v24 = v31[1];
    v31[1] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v21);
        if (!v17)
          return;
LABEL_32:
        v20 = v17[6] - 1;
        if (v17[6] == 1)
        {
          (*(void (**)(_DWORD *, Inspector::IdentifiersFactory *))(*(_QWORD *)v17 + 24))(v17, v21);
          return;
        }
        goto LABEL_33;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v17)
      return;
    goto LABEL_32;
  }
  if (v17)
    ++v17[6];
  v18 = *(_QWORD *)(v14 + 24);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
      WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v19 + 80) + 8), *(Inspector::IdentifiersFactory **)(a1 + 16), (uint64_t)v17, a2);
  }
  if (v17)
  {
    v20 = v17[6] - 1;
    if (v17[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 24))(v17);
      return;
    }
LABEL_33:
    v17[6] = v20;
  }
}

_DWORD *WebCore::PolicyChecker::checkNavigationPolicy(WebCore::NavigationAction *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 280);
  v5 = 88;
  if (!*(_BYTE *)(v4 + 80))
    v5 = 96;
  v6 = *(_DWORD **)(v4 + v5);
  if (v6)
    ++v6[6];
  v8 = 0;
  WebCore::PolicyChecker::checkNavigationPolicy(a1, a2, a3, (uint64_t)v6, (uint64_t *)&v8, a4, 1);
  result = v8;
  if (v8)
  {
    if (v8[6] == 1)
    {
      result = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 24))();
      if (!v6)
        return result;
      goto LABEL_9;
    }
    --v8[6];
  }
  if (!v6)
    return result;
LABEL_9:
  if (v6[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
  --v6[6];
  return result;
}

void WebCore::PolicyChecker::checkNavigationPolicy(WebCore::NavigationAction *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, int a7)
{
  uint64_t v11;
  WTF::StringImpl *v12;
  const WebCore::ResourceRequestBase *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD **v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WebCore::SecurityOrigin *v26;
  WebCore::SecurityOrigin *v27;
  WTF::StringImpl *v28;
  const WebCore::SecurityOrigin *v29;
  _BOOL4 isSameOriginAs;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  const WebCore::SubstituteData *v46;
  char v47;
  WTF *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  WTF *v54;
  const WTF::StringImpl **v55;
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  WTF::StringImpl *Ref;
  char v73;
  unsigned int v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  _DWORD *v79;
  void *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  void *v89;
  unsigned int *v90;
  unsigned int v91;
  BOOL v92;
  uint64_t v93;
  WebCore::SecurityOrigin *v94;
  WebCore::SecurityOrigin *v95;
  WTF::StringImpl *v96;
  const WebCore::SecurityOrigin *v97;
  char v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  WTF::StringImpl **v108;
  unsigned int v109;
  uint64_t (***v110)();
  uint64_t (***v111)();
  uint64_t v112;
  uint64_t v113;
  WebCore::ContentFilter *v114;
  int v115;
  WebCore::NavigationAction *v116;
  NSObject *v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  __int128 v128;
  __int128 v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  char v139;
  _DWORD *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  void *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  const void *v156;
  uint64_t *v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  int IsJavaScript;
  uint64_t (*v163)();
  WTF::StringImpl *v164;
  WTF::StringImpl **v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  void *v171;
  unsigned int v172;
  WebCore::Navigation *v173;
  uint64_t v174;
  WebCore::NavigationDestination *v175;
  WTF *v176;
  __int128 v177;
  void *v178;
  char v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  const void *v187;
  int v188;
  _DWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  const void *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  _DWORD *v206;
  void *v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  const WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  int v216;
  WTF::StringImpl *v217;
  const WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  char v221;
  _DWORD *v222;
  WTF::StringImpl *v223;
  uint64_t v224;
  void *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  WTF::StringImpl *v229;
  void *v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  int v241;
  bmalloc::api *v242;
  void *v243;
  bmalloc::api *v244;
  void *v245;
  void *v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  bmalloc::api *v250;
  void *v251;
  unsigned int v252;
  WTF::StringImpl *v253;
  char v254;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  _DWORD *v275;
  _DWORD *v276;
  uint64_t v277;
  _DWORD *v278;
  uint64_t v279;
  void *v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  const void *v284;
  void *v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  WTF::StringImpl *v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  void (***v295)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD);
  _DWORD *v296;
  BOOL v297;
  _QWORD *v298;
  void *v299;
  _QWORD *v300;
  WTF::StringImpl *v301;
  void *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  unsigned int v305;
  unsigned int v306;
  _QWORD *v307;
  uint64_t v308;
  void *v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  _DWORD *v316;
  BOOL v317;
  uint64_t v318;
  _BOOL4 v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  char v322;
  char v323;
  _QWORD *v324;
  uint64_t v325;
  WebCore::NavigationAction *v329;
  _QWORD *v330;
  WTF::StringImpl *v331;
  __int128 v332;
  __int128 v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  __int128 v336;
  __int128 v337;
  uint64_t (**v338[3])();
  uint64_t (***v339)();
  _BYTE buf[112];
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  _DWORD *v344;
  _DWORD *v345;
  _DWORD *v346;
  __int128 v347;
  _DWORD *v348;
  uint64_t v349;
  char v350;
  const void *v351;
  char v352;
  _DWORD *v353;
  WTF::StringImpl *v354;
  uint64_t v355[9];
  __int16 v356;
  _QWORD v357[28];
  char v358;
  uint64_t v359[23];
  char v360;
  WTF::StringImpl *v361[48];
  char v362;
  char v363;
  uint64_t v364;

  v364 = *MEMORY[0x1E0C80C00];
  v11 = a4 + 1632;
  WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)v357, (const WebCore::NavigationAction *)(a4 + 1632));
  v14 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 8);
  v15 = (unsigned int *)(v14 + 1);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v329 = a1;
  if (!v358 || !v357[0] || !*(_DWORD *)(v357[0] + 4))
    goto LABEL_9;
  if ((v360 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v359);
    v360 |= 1u;
  }
  if (!v359[0] || !*(_DWORD *)(v359[0] + 4))
  {
LABEL_9:
    v17 = v14[37];
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    v18 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    v19 = *(unsigned __int8 *)(a4 + 3532);
    v20 = *(_QWORD *)(a4 + 16);
    if (!v20)
      goto LABEL_154;
    v21 = *(_QWORD **)(v20 + 8);
    if (!v21)
      goto LABEL_154;
    if (*(_QWORD **)(v21[16] + 8) == v21)
    {
LABEL_17:
      v31 = *(_BYTE *)(a4 + 3530);
LABEL_18:
      WebCore::NavigationAction::NavigationAction((uint64_t)buf, (WebCore::NavigationRequester *)v17, (const WebCore::ResourceRequest *)a2, 1, v19 != 0, 5, v31, 0, v18);
      WebCore::NavigationAction::operator=((uint64_t)v357, (uint64_t *)buf);
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v32);
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
      WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)buf, (const WebCore::NavigationAction *)v357);
      WebCore::NavigationAction::operator=(v11, (uint64_t *)buf);
      v34 = *(_QWORD *)(a4 + 16);
      if (!v34
        || (v35 = *(_QWORD **)(v34 + 8)) == 0
        || *(_QWORD **)(v35[16] + 8) == v35
        || *(_QWORD *)(v35[35] + 88) == a4
        && (v93 = v35[37]) != 0
        && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v93 + 192), v33),
            v95 = v94,
            WebCore::Document::topOrigin((WebCore::Document *)v93, v96),
            WebCore::SecurityOrigin::isSameOriginAs(v95, v97)))
      {
        v36 = *(_BYTE *)(a4 + 3530);
      }
      else
      {
        v36 = 0;
      }
      *(_BYTE *)(a4 + 2503) = v36;
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v33);
      goto LABEL_24;
    }
    v22 = a2;
    v23 = v14;
    if (*(_QWORD *)(v21[35] + 88) == a4)
    {
      v24 = a6;
      v25 = v21[37];
      if (v25)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v25 + 192), v12);
        v27 = v26;
        WebCore::Document::topOrigin((WebCore::Document *)v25, v28);
        isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v27, v29);
        a6 = v24;
        v14 = v23;
        a2 = v22;
        v18 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        if (isSameOriginAs)
          goto LABEL_17;
LABEL_154:
        v31 = 0;
        goto LABEL_18;
      }
      v31 = 0;
    }
    else
    {
      v31 = 0;
    }
    v14 = v23;
    a2 = v22;
    goto LABEL_18;
  }
LABEL_24:
  v37 = v14[35];
  ++*(_DWORD *)v37;
  v38 = v14[3];
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
    {
      if (*(_BYTE *)(v39 + 337))
        v363 = 1;
    }
  }
  v40 = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8);
  v43 = *(_QWORD *)(v40 + 168);
  v42 = (uint64_t *)(v40 + 168);
  v41 = v43;
  if (v43)
  {
    LODWORD(v41) = *(_DWORD *)(v41 - 12);
    if ((_DWORD)v41)
    {
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v42, (uint64_t **)buf);
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v42, (uint64_t **)&v335);
      LOBYTE(v41) = *(_QWORD *)&buf[8] != (_QWORD)v336;
    }
  }
  v362 = v41;
  v44 = a4 + 1072;
  v45 = WebCore::equalIgnoringHeaderFields((WTF **)a2, (const WTF::StringImpl **)(a4 + 1072), v13);
  v47 = *(_BYTE *)(a2 + 184);
  if ((v45 & 1) != 0)
    goto LABEL_499;
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v47 = *(_BYTE *)(a2 + 184) | 1;
    *(_BYTE *)(a2 + 184) = v47;
    if ((v47 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v47 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v47;
    }
  }
  v54 = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    if ((v47 & 1) == 0
      && (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2),
          v47 = *(_BYTE *)(a2 + 184) | 1,
          *(_BYTE *)(a2 + 184) = v47,
          (v54 = *(WTF **)a2) == 0)
      || !*((_DWORD *)v54 + 1))
    {
LABEL_499:
      if ((v47 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        v47 = *(_BYTE *)(a2 + 184) | 1;
        *(_BYTE *)(a2 + 184) = v47;
        if ((v47 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
          v47 = *(_BYTE *)(a2 + 184) | 1;
          *(_BYTE *)(a2 + 184) = v47;
        }
      }
      v48 = *(WTF **)a2;
      if (!*(_QWORD *)a2
        || ((v47 & 1) != 0
         || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2),
             *(_BYTE *)(a2 + 184) |= 1u,
             (v48 = *(WTF **)a2) != 0))
        && *((_DWORD *)v48 + 1))
      {
        v49 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v50 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
          v51 = *(_QWORD *)(v50 + 24);
          if (v51)
          {
            v51 = *(_QWORD *)(v51 + 8);
            if (v51)
            {
              if (*(_BYTE *)(v51 + 40))
                v51 = *(_QWORD *)(v51 + 32);
              else
                v51 = 0;
            }
          }
          v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v329;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v51;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v52;
          v53 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because the URL is the"
                " same as the last request";
LABEL_396:
          _os_log_impl(&dword_1940B8000, v49, OS_LOG_TYPE_DEFAULT, v53, buf, 0x20u);
        }
      }
      else
      {
        v49 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v271 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
          v272 = *(_QWORD *)(v271 + 24);
          if (v272)
          {
            v272 = *(_QWORD *)(v272 + 8);
            if (v272)
            {
              if (*(_BYTE *)(v272 + 40))
                v272 = *(_QWORD *)(v272 + 32);
              else
                v272 = 0;
            }
          }
          v273 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v271 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v329;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v272;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v273;
          v53 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because the URL is empty";
          goto LABEL_396;
        }
      }
      WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)buf, (const WebCore::ResourceRequestBase::RequestData *)a2);
      v274 = *(_DWORD **)(a2 + 152);
      if (v274)
        *v274 += 2;
      v344 = v274;
      v275 = *(_DWORD **)(a2 + 160);
      if (v275)
        *v275 += 2;
      v345 = v275;
      v276 = *(_DWORD **)(a2 + 168);
      if (v276)
        ++*v276;
      v277 = *(_QWORD *)(a2 + 176);
      v346 = v276;
      *(_QWORD *)&v347 = v277;
      BYTE8(v347) = *(_BYTE *)(a2 + 184);
      v278 = *(_DWORD **)(a2 + 192);
      v348 = v278;
      if (v278)
        CFRetain(v278);
      v335 = 0;
      v279 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v279 + 16))(v279, buf, &v335, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
      v281 = (unsigned int *)v335;
      v335 = 0;
      if (v281)
      {
        do
        {
          v282 = __ldaxr(v281);
          v283 = v282 - 1;
        }
        while (__stlxr(v283, v281));
        if (!v283)
        {
          atomic_store(1u, v281);
          WTF::fastFree((WTF *)v281, v280);
        }
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v280);
      WebCore::ResourceRequest::operator=(v44, a2);
      goto LABEL_455;
    }
  }
  v55 = (const WTF::StringImpl **)(a4 + 360);
  if (*(_QWORD *)(a4 + 360))
    v56 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v56 = 0;
  if (v56)
  {
    v57 = *(_QWORD *)(a4 + 368);
    if (v57)
    {
      if (*(_DWORD *)(v57 + 4))
      {
        v113 = 88;
        if (!*(_BYTE *)(v37 + 80))
          v113 = 96;
        v114 = *(WebCore::ContentFilter **)(v37 + v113);
        if (v114)
        {
          ++*((_DWORD *)v114 + 6);
          v115 = WebCore::ContentFilter::continueAfterSubstituteDataRequest(v114, v55, v46);
          v116 = v329;
          if (*((_DWORD *)v114 + 6) == 1)
            (*(void (**)(WebCore::ContentFilter *))(*(_QWORD *)v114 + 24))(v114);
          else
            --*((_DWORD *)v114 + 6);
        }
        else
        {
          v115 = 1;
          v116 = v329;
        }
        if (*((unsigned __int8 *)v116 + 26) - 1 <= 2)
          *((_BYTE *)v116 + 26) = 4;
        v117 = qword_1ECE7C478;
        v118 = os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT);
        if (v115)
        {
          if (v118)
          {
            v119 = *(_QWORD *)(*((_QWORD *)v116 + 1) + 8);
            v120 = *(_QWORD *)(v119 + 24);
            if (v120)
            {
              v120 = *(_QWORD *)(v120 + 8);
              if (v120)
              {
                if (*(_BYTE *)(v120 + 40))
                  v120 = *(_QWORD *)(v120 + 32);
                else
                  v120 = 0;
              }
            }
            v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v119 + 280) + 8) + 8) + 32);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v116;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v120;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v121;
            v122 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because we have val"
                   "id substitute data";
LABEL_187:
            _os_log_impl(&dword_1940B8000, v117, OS_LOG_TYPE_DEFAULT, v122, buf, 0x20u);
          }
        }
        else if (v118)
        {
          v147 = *(_QWORD *)(*((_QWORD *)v116 + 1) + 8);
          v148 = *(_QWORD *)(v147 + 24);
          if (v148)
          {
            v148 = *(_QWORD *)(v148 + 8);
            if (v148)
            {
              if (*(_BYTE *)(v148 + 40))
                v148 = *(_QWORD *)(v148 + 32);
              else
                v148 = 0;
            }
          }
          v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v116;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v148;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v149;
          v122 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: not continuing with substitute d"
                 "ata because the content filter told us not to";
          goto LABEL_187;
        }
        *(_QWORD *)buf = 0;
        v150 = v115 ^ 1u;
        v151 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v151 + 16))(v151, a2, buf, v150);
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
        v152 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v152)
        {
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (!v154)
          {
            atomic_store(1u, v152);
            WTF::fastFree((WTF *)v152, v89);
          }
        }
        goto LABEL_455;
      }
    }
  }
  v58 = v14[15];
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 8);
    if (v59)
    {
      v60 = 0;
      *(_DWORD *)(v59 + 24) += 2;
      v47 = *(_BYTE *)(a2 + 184);
      goto LABEL_52;
    }
  }
  else
  {
    v59 = 0;
  }
  v60 = 1;
LABEL_52:
  v320 = (WTF::StringImpl *)v55;
  if ((v47 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  v323 = v60;
  if ((v60 & 1) != 0
    || (v61 = *(_BYTE *)(a3 + 138), (v62 = **(_QWORD **)(v59 + 40)) != 0)
    && (*(_WORD *)(v62 + 28) & 0x80) != 0
    && !*(_BYTE *)(v62 + 193))
  {
LABEL_66:
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)buf, (const WebCore::ResourceRequestBase::RequestData *)a2);
    v75 = *(_DWORD **)(a2 + 152);
    if (v75)
      *v75 += 2;
    v344 = v75;
    v76 = *(_DWORD **)(a2 + 160);
    if (v76)
      *v76 += 2;
    v345 = v76;
    v77 = *(_DWORD **)(a2 + 168);
    if (v77)
      ++*v77;
    v78 = *(_QWORD *)(a2 + 176);
    v346 = v77;
    *(_QWORD *)&v347 = v78;
    BYTE8(v347) = *(_BYTE *)(a2 + 184);
    v79 = *(_DWORD **)(a2 + 192);
    v348 = v79;
    if (v79)
      CFRetain(v79);
    WebCore::ResourceRequest::operator=(v44, (uint64_t)buf);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v80);
    if (v59 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 40) + 8) + 3358) & 0x200) != 0)
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      if (WTF::URL::protocolIs())
      {
        v81 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v82 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
          v83 = *(_QWORD *)(v82 + 24);
          if (v83)
          {
            v83 = *(_QWORD *)(v83 + 8);
            if (v83)
            {
              if (*(_BYTE *)(v83 + 40))
                v83 = *(_QWORD *)(v83 + 32);
              else
                v83 = 0;
            }
          }
          v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v329;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v83;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v84;
          _os_log_impl(&dword_1940B8000, v81, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because PDFJS URL", buf, 0x20u);
        }
        v85 = (_DWORD *)*a5;
        if (*a5)
        {
          v86 = *((_QWORD *)v85 + 1);
          if (v86)
            goto LABEL_500;
          v86 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v86 = 1;
          *(_QWORD *)(v86 + 8) = v85;
          v310 = (unsigned int *)*((_QWORD *)v85 + 1);
          *((_QWORD *)v85 + 1) = v86;
          if (!v310)
            goto LABEL_500;
          do
          {
            v311 = __ldaxr(v310);
            v312 = v311 - 1;
          }
          while (__stlxr(v312, v310));
          if (!v312)
          {
            atomic_store(1u, v310);
            WTF::fastFree((WTF *)v310, v309);
          }
          v86 = *((_QWORD *)v85 + 1);
          if (v86)
          {
LABEL_500:
            do
              v313 = __ldaxr((unsigned int *)v86);
            while (__stlxr(v313 + 1, (unsigned int *)v86));
          }
        }
        else
        {
          v86 = 0;
        }
        v87 = v323;
        *(_QWORD *)buf = v86;
        v88 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v88 + 16))(v88, a2, buf, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
        v90 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v90)
        {
          do
          {
            v91 = __ldaxr(v90);
            v92 = --v91 == 0;
          }
          while (__stlxr(v91, v90));
          goto LABEL_115;
        }
        goto LABEL_452;
      }
    }
    v98 = *(_BYTE *)(a2 + 184);
    if ((v98 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v98 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v98;
    }
    if ((v98 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v98 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v98;
    }
    if (*(_QWORD *)a2)
    {
      if ((v98 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      if (WTF::URL::protocolIs())
      {
        v99 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v100 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
          v101 = *(_QWORD *)(v100 + 24);
          if (v101)
          {
            v101 = *(_QWORD *)(v101 + 8);
            if (v101)
            {
              if (*(_BYTE *)(v101 + 40))
                v101 = *(_QWORD *)(v101 + 32);
              else
                v101 = 0;
            }
          }
          v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v329;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v101;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v102;
          _os_log_impl(&dword_1940B8000, v99, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because quicklook-generated URL", buf, 0x20u);
        }
        v103 = *a5;
        if (*a5)
        {
          v104 = *(_QWORD *)(v103 + 8);
          if (v104)
            goto LABEL_501;
          v104 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v104 = 1;
          *(_QWORD *)(v104 + 8) = v103;
          v286 = *(unsigned int **)(v103 + 8);
          *(_QWORD *)(v103 + 8) = v104;
          if (!v286)
            goto LABEL_501;
          do
          {
            v287 = __ldaxr(v286);
            v288 = v287 - 1;
          }
          while (__stlxr(v288, v286));
          if (!v288)
          {
            atomic_store(1u, v286);
            WTF::fastFree((WTF *)v286, v285);
          }
          v104 = *(_QWORD *)(v103 + 8);
          if (v104)
          {
LABEL_501:
            do
              v289 = __ldaxr((unsigned int *)v104);
            while (__stlxr(v289 + 1, (unsigned int *)v104));
          }
        }
        else
        {
          v104 = 0;
        }
        v87 = v323;
        *(_QWORD *)buf = v104;
        v105 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v105 + 16))(v105, a2, buf, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
        v90 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v90)
        {
          do
          {
            v106 = __ldaxr(v90);
            v92 = --v106 == 0;
          }
          while (__stlxr(v106, v90));
LABEL_115:
          if (v92)
          {
            atomic_store(1u, v90);
            WTF::fastFree((WTF *)v90, v89);
          }
        }
LABEL_452:
        if ((v87 & 1) != 0)
          goto LABEL_455;
        goto LABEL_453;
      }
    }
    v107 = a6;
    v108 = (WTF::StringImpl **)((char *)v329 + 32);
    if (WebCore::ContentFilterUnblockHandler::canHandleRequest((WebCore::NavigationAction *)((char *)v329 + 32), (const WebCore::ResourceRequest *)a2))
    {
      v87 = v323;
      do
        v109 = __ldaxr(v15);
      while (__stlxr(v109 + 1, v15));
      v110 = (uint64_t (***)())operator new(0x10uLL);
      *v110 = off_1E33F6D40;
      v110[1] = (uint64_t (**)())v14;
      v339 = v110;
      WebCore::ContentFilterUnblockHandler::requestUnblockAsync((uint64_t)v329 + 32, v338);
      v111 = v339;
      if (v339 == v338)
      {
        v112 = 4;
        v111 = v338;
      }
      else
      {
        if (!v339)
        {
LABEL_157:
          v133 = qword_1ECE7C478;
          if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
          {
            v134 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
            v135 = *(_QWORD *)(v134 + 24);
            if (v135)
            {
              v135 = *(_QWORD *)(v135 + 8);
              if (v135)
              {
                if (*(_BYTE *)(v135 + 40))
                  v135 = *(_QWORD *)(v135 + 32);
                else
                  v135 = 0;
              }
            }
            v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v134 + 280) + 8) + 8) + 32);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v329;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v135;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v136;
            _os_log_impl(&dword_1940B8000, v133, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: ignoring because ContentFilterUnblockHandler can handle the request", buf, 0x20u);
          }
          v335 = 0;
          WTF::URL::invalidate((WTF::URL *)&v335);
          v137 = v335;
          if (v335)
            *(_DWORD *)v335 += 2;
          *(_OWORD *)&buf[8] = v336;
          *(_OWORD *)&buf[24] = v337;
          *(_QWORD *)buf = v137;
          *(_QWORD *)&buf[40] = 0;
          WTF::URL::invalidate((WTF::URL *)&buf[40]);
          *(_QWORD *)&buf[80] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&buf[88] = v331;
          *(_OWORD *)&buf[96] = 0u;
          v341 = 0u;
          v342 = 0u;
          LODWORD(v343) = 0x10000;
          v139 = BYTE4(v343) & 0x80 | 4;
          BYTE4(v343) = v139;
          v344 = 0;
          v140 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *v140 += 2;
            v139 = BYTE4(v343);
          }
          v345 = v140;
          v346 = 0;
          LOBYTE(v347) = 0;
          BYTE4(v347) = 0;
          BYTE8(v347) = BYTE8(v347) & 0xE0 | 5;
          BYTE4(v343) = v139 | 2;
          v141 = v335;
          v335 = 0;
          if (v141)
          {
            if (*(_DWORD *)v141 == 2)
              WTF::StringImpl::destroy(v141, v138);
            else
              *(_DWORD *)v141 -= 2;
          }
          v348 = 0;
          v335 = 0;
          v142 = *v107;
          *v107 = 0;
          (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v142 + 16))(v142, buf, &v335, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
          v144 = (unsigned int *)v335;
          v335 = 0;
          if (v144)
          {
            do
            {
              v145 = __ldaxr(v144);
              v146 = v145 - 1;
            }
            while (__stlxr(v146, v144));
            if (!v146)
            {
              atomic_store(1u, v144);
              WTF::fastFree((WTF *)v144, v143);
            }
          }
          WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v143);
          goto LABEL_452;
        }
        v112 = 5;
      }
      (*v111)[v112]();
      goto LABEL_157;
    }
    memset(buf, 0, 96);
    WTF::URL::invalidate((WTF::URL *)&buf[8]);
    memset(&buf[72], 0, 17);
    v124 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v125 = *v108;
    *v108 = v124;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WTF::StringImpl::destroy(v125, v123);
      else
        *(_DWORD *)v125 -= 2;
    }
    v126 = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    v127 = (WTF::StringImpl *)*((_QWORD *)v329 + 5);
    *((_QWORD *)v329 + 5) = v126;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2)
        WTF::StringImpl::destroy(v127, v123);
      else
        *(_DWORD *)v127 -= 2;
    }
    v325 = v59;
    v128 = *(_OWORD *)&buf[16];
    v129 = *(_OWORD *)&buf[32];
    *(_DWORD *)&buf[16] &= ~1u;
    *((_OWORD *)v329 + 3) = v128;
    *((_OWORD *)v329 + 4) = v129;
    v130 = &buf[48];
    v131 = (_QWORD *)*((_QWORD *)v329 + 13);
    *((_QWORD *)v329 + 13) = 0;
    if (v131 == (_QWORD *)((char *)v329 + 80))
    {
      v132 = 4;
      v131 = (_QWORD *)((char *)v329 + 80);
    }
    else
    {
      if (!v131)
        goto LABEL_177;
      v132 = 5;
    }
    (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_177:
    if (*(_QWORD *)&buf[72])
    {
      if (*(_BYTE **)&buf[72] == &buf[48])
      {
        *((_QWORD *)v329 + 13) = (char *)v329 + 80;
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)&buf[48] + 24))(&buf[48], (uint64_t)v329 + 80);
      }
      else
      {
        *((_QWORD *)v329 + 13) = *(_QWORD *)&buf[72];
        *(_QWORD *)&buf[72] = 0;
      }
    }
    else
    {
      *((_QWORD *)v329 + 13) = 0;
    }
    v155 = *(_QWORD *)&buf[80];
    *(_QWORD *)&buf[80] = 0;
    v156 = (const void *)*((_QWORD *)v329 + 14);
    *((_QWORD *)v329 + 14) = v155;
    v157 = v107;
    if (v156)
    {
      CFRelease(v156);
      v284 = *(const void **)&buf[80];
      *((_BYTE *)v329 + 120) = buf[88];
      *(_QWORD *)&buf[80] = 0;
      if (v284)
        CFRelease(v284);
    }
    else
    {
      *((_BYTE *)v329 + 120) = buf[88];
      *(_QWORD *)&buf[80] = 0;
    }
    if (*(_BYTE **)&buf[72] == &buf[48])
    {
      v158 = 4;
    }
    else
    {
      if (!*(_QWORD *)&buf[72])
        goto LABEL_202;
      v158 = 5;
      v130 = *(_QWORD **)&buf[72];
    }
    (*(void (**)(_QWORD *))(*v130 + 8 * v158))(v130);
LABEL_202:
    v159 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v159)
    {
      if (*(_DWORD *)v159 == 2)
        WTF::StringImpl::destroy(v159, v123);
      else
        *(_DWORD *)v159 -= 2;
    }
    v160 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v160)
    {
      if (*(_DWORD *)v160 == 2)
        WTF::StringImpl::destroy(v160, v123);
      else
        *(_DWORD *)v160 -= 2;
    }
    WebCore::FrameLoader::clearProvisionalLoadForPolicyCheck(v37);
    v161 = v14[37];
    if (v161)
      *(_DWORD *)(v161 + 24) += 2;
    WebCore::PolicyChecker::extendBlobURLLifetimeIfNecessary((WTF::URL *)&v335, (uint64_t)v329, (WebCore::ResourceRequest *)a2, (WebCore::Document *)v161, a7);
    if (*(_DWORD *)(v161 + 24) == 2)
    {
      if ((*(_WORD *)(v161 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v161);
    }
    else
    {
      *(_DWORD *)(v161 + 24) -= 2;
    }
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    IsJavaScript = WTF::URL::protocolIsJavaScript((WTF::URL *)a2);
    if (*(int *)(v37 + 64) > 1)
      goto LABEL_221;
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    if (WTF::URL::protocolIs())
    {
      v163 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
      if (!*(_QWORD *)v320)
        v163 = 0;
      v319 = v163 == 0;
    }
    else
    {
LABEL_221:
      v319 = 0;
    }
    *((_BYTE *)v329 + 24) = 1;
    v164 = v361[0];
    v165 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    if (v361[0] && *((_DWORD *)v361[0] + 1))
      v165 = v361;
    v166 = *v165;
    if (*v165)
      *(_DWORD *)v166 += 2;
    v321 = v166;
    v317 = v164 != 0;
    if (v164)
    {
      v167 = v14[37];
      if (v167)
      {
        *(_DWORD *)(v167 + 24) += 2;
        if ((*(_QWORD *)(*(_QWORD *)(v167 + 680) + 688) & 0x4000) != 0)
        {
          v168 = *(_QWORD *)(v167 + 696);
          if (v168)
          {
            v315 = IsJavaScript;
            ++*(_DWORD *)(v168 + 24);
            v169 = *(_QWORD *)(v168 + 216);
            if (!v169)
            {
              v169 = bmalloc::api::isoAllocate();
              *(_DWORD *)(v169 + 24) = 1;
              *(_QWORD *)(v169 + 8) = 0;
              *(_QWORD *)(v169 + 16) = 0;
              *(_QWORD *)v169 = &unk_1E33A4FC0;
              v170 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v168);
              if (v170)
              {
                do
                  v172 = __ldaxr(v170);
                while (__stlxr(v172 + 1, v170));
              }
              *(_QWORD *)(v169 + 32) = v170;
              *(_QWORD *)v169 = off_1E33FFF20;
              *(_BYTE *)(v169 + 40) = 0;
              *(_BYTE *)(v169 + 48) = 0;
              *(_OWORD *)(v169 + 56) = 0u;
              *(_OWORD *)(v169 + 72) = 0u;
              *(_OWORD *)(v169 + 82) = 0u;
              *(_QWORD *)(v169 + 112) = 0;
              *(_QWORD *)(v169 + 120) = 0;
              *(_QWORD *)(v169 + 104) = 0;
              v173 = *(WebCore::Navigation **)(v168 + 216);
              *(_QWORD *)(v168 + 216) = v169;
              if (v173)
              {
                if (*((_DWORD *)v173 + 6) == 1)
                {
                  WebCore::Navigation::~Navigation(v173, v171);
                  bmalloc::api::isoDeallocate(v250, v251);
                  v169 = *(_QWORD *)(v168 + 216);
                }
                else
                {
                  --*((_DWORD *)v173 + 6);
                }
              }
            }
            ++*(_DWORD *)(v169 + 24);
            if ((*(_BYTE *)(a2 + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
              *(_BYTE *)(a2 + 184) |= 1u;
            }
            v316 = (_DWORD *)v168;
            v174 = bmalloc::api::isoAllocate();
            v175 = (WebCore::NavigationDestination *)v174;
            *(_DWORD *)v174 = 1;
            *(_QWORD *)(v174 + 8) = 0;
            *(_QWORD *)(v174 + 16) = 0;
            v176 = *(WTF **)a2;
            if (*(_QWORD *)a2)
              *(_DWORD *)v176 += 2;
            *(_QWORD *)(v174 + 24) = v176;
            v177 = *(_OWORD *)(a2 + 24);
            *(_OWORD *)(v174 + 32) = *(_OWORD *)(a2 + 8);
            *(_OWORD *)(v174 + 48) = v177;
            *(_BYTE *)(v174 + 64) = 0;
            *(_QWORD *)(v174 + 72) = 0;
            *(_QWORD *)buf = v174;
            v179 = WebCore::Navigation::innerDispatchNavigateEvent(v169, 0, (WebCore::NavigationDestination **)buf, v361, 0, 0);
            if (*(_DWORD *)v175 == 1)
            {
              WebCore::NavigationDestination::~NavigationDestination(v175, v178);
              bmalloc::api::isoDeallocate(v242, v243);
            }
            else
            {
              --*(_DWORD *)v175;
            }
            v157 = v107;
            if (*(_DWORD *)(v169 + 24) == 1)
            {
              WebCore::Navigation::~Navigation((WebCore::Navigation *)v169, v178);
              bmalloc::api::isoDeallocate(v244, v245);
            }
            else
            {
              --*(_DWORD *)(v169 + 24);
            }
            v59 = v325;
            if ((v179 & 1) == 0)
            {
              v331 = 0;
              WTF::URL::invalidate((WTF::URL *)&v331);
              v219 = v331;
              if (v331)
                *(_DWORD *)v331 += 2;
              *(_OWORD *)&buf[8] = v332;
              *(_OWORD *)&buf[24] = v333;
              *(_QWORD *)buf = v219;
              *(_QWORD *)&buf[40] = 0;
              WTF::URL::invalidate((WTF::URL *)&buf[40]);
              *(_QWORD *)&buf[80] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              *(_QWORD *)&buf[88] = v334;
              *(_OWORD *)&buf[96] = 0u;
              v341 = 0u;
              v342 = 0u;
              LODWORD(v343) = 0x10000;
              v221 = BYTE4(v343) & 0x80 | 4;
              BYTE4(v343) = v221;
              v344 = 0;
              v222 = (_DWORD *)*MEMORY[0x1E0CBF738];
              v87 = v323;
              if (*MEMORY[0x1E0CBF738])
              {
                *v222 += 2;
                v221 = BYTE4(v343);
              }
              v345 = v222;
              v346 = 0;
              LOBYTE(v347) = 0;
              BYTE4(v347) = 0;
              BYTE8(v347) = BYTE8(v347) & 0xE0 | 5;
              BYTE4(v343) = v221 | 2;
              v223 = v331;
              v331 = 0;
              if (v223)
              {
                if (*(_DWORD *)v223 == 2)
                  WTF::StringImpl::destroy(v223, v220);
                else
                  *(_DWORD *)v223 -= 2;
              }
              v348 = 0;
              v331 = 0;
              v224 = *v107;
              *v107 = 0;
              (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v224 + 16))(v224, buf, &v331, 1);
              (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
              v226 = (unsigned int *)v331;
              v331 = 0;
              if (v226)
              {
                do
                {
                  v227 = __ldaxr(v226);
                  v228 = v227 - 1;
                }
                while (__stlxr(v228, v226));
                if (!v228)
                {
                  atomic_store(1u, v226);
                  WTF::fastFree((WTF *)v226, v225);
                }
              }
              WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v225);
              if (v316[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v316 + 72))(v316);
              else
                --v316[6];
              if (*(_DWORD *)(v167 + 24) == 2)
              {
                if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v167);
              }
              else
              {
                *(_DWORD *)(v167 + 24) -= 2;
              }
              if (v321)
              {
                if (*(_DWORD *)v321 == 2)
                  WTF::StringImpl::destroy(v321, v229);
                else
                  *(_DWORD *)v321 -= 2;
              }
              goto LABEL_451;
            }
            if (v316[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v316 + 72))(v316);
            else
              --v316[6];
            IsJavaScript = v315;
          }
        }
        if (*(_DWORD *)(v167 + 24) == 2)
        {
          if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v167);
        }
        else
        {
          *(_DWORD *)(v167 + 24) -= 2;
        }
      }
    }
    *(_QWORD *)buf = v329;
    v180 = *(_QWORD *)v329;
    if (*(_QWORD *)v329)
      goto LABEL_502;
    v180 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v180 = 1;
    *(_QWORD *)(v180 + 8) = v329;
    v231 = *(unsigned int **)v329;
    *(_QWORD *)v329 = v180;
    if (!v231)
      goto LABEL_502;
    do
    {
      v232 = __ldaxr(v231);
      v233 = v232 - 1;
    }
    while (__stlxr(v233, v231));
    if (!v233)
    {
      atomic_store(1u, v231);
      WTF::fastFree((WTF *)v231, v230);
    }
    v180 = *(_QWORD *)v329;
    if (*(_QWORD *)v329)
    {
LABEL_502:
      do
        v181 = __ldaxr((unsigned int *)v180);
      while (__stlxr(v181 + 1, (unsigned int *)v180));
    }
    v182 = *v157;
    *v157 = 0;
    *(_QWORD *)&buf[8] = v180;
    *(_QWORD *)&buf[16] = v182;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&buf[24], (const WebCore::ResourceRequestBase::RequestData *)a2);
    v183 = *(_DWORD **)(a2 + 152);
    if (v183)
      *v183 += 2;
    *(_QWORD *)&v347 = v183;
    v184 = *(_DWORD **)(a2 + 160);
    if (v184)
      *v184 += 2;
    *((_QWORD *)&v347 + 1) = v184;
    v185 = *(_DWORD **)(a2 + 168);
    if (v185)
      ++*v185;
    v186 = *(_QWORD *)(a2 + 176);
    v348 = v185;
    v349 = v186;
    v350 = *(_BYTE *)(a2 + 184);
    v187 = *(const void **)(a2 + 192);
    v351 = v187;
    if (v187)
      CFRetain(v187);
    v188 = IsJavaScript;
    v352 = IsJavaScript;
    v189 = (_DWORD *)*a5;
    *a5 = 0;
    v353 = v189;
    v354 = v321;
    WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)v355, (uint64_t *)&v335);
    LOBYTE(v356) = v319;
    HIBYTE(v356) = v317;
    v190 = WTF::fastMalloc((WTF *)0x150);
    *(_QWORD *)v190 = off_1E33F6D88;
    *(_QWORD *)(v190 + 8) = *(_QWORD *)buf;
    *(_QWORD *)(v190 + 16) = *(_QWORD *)&buf[8];
    v191 = *(_QWORD *)&buf[16];
    *(_OWORD *)&buf[8] = 0u;
    *(_QWORD *)(v190 + 24) = v191;
    v192 = *(_QWORD *)&buf[24];
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)(v190 + 32) = v192;
    LODWORD(v192) = *(_DWORD *)&buf[32];
    *(_DWORD *)(v190 + 40) = *(_DWORD *)&buf[32];
    *(_OWORD *)(v190 + 44) = *(_OWORD *)&buf[36];
    *(_QWORD *)(v190 + 60) = *(_QWORD *)&buf[52];
    *(_DWORD *)(v190 + 68) = *(_DWORD *)&buf[60];
    *(_DWORD *)&buf[32] = v192 & 0xFFFFFFFE;
    v193 = *(_QWORD *)&buf[64];
    *(_QWORD *)&buf[64] = 0;
    *(_QWORD *)(v190 + 72) = v193;
    LODWORD(v193) = *(_DWORD *)&buf[72];
    *(_DWORD *)(v190 + 80) = *(_DWORD *)&buf[72];
    *(_OWORD *)(v190 + 84) = *(_OWORD *)&buf[76];
    *(_QWORD *)(v190 + 100) = *(_QWORD *)&buf[92];
    *(_DWORD *)(v190 + 108) = *(_DWORD *)&buf[100];
    *(_DWORD *)&buf[72] = v193 & 0xFFFFFFFE;
    *(_QWORD *)(v190 + 112) = *(_QWORD *)&buf[104];
    *(_QWORD *)(v190 + 120) = v341;
    v194 = *((_QWORD *)&v341 + 1);
    v341 = 0u;
    *(_QWORD *)(v190 + 128) = v194;
    v195 = v342;
    *(_QWORD *)&v342 = 0;
    *(_QWORD *)(v190 + 136) = v195;
    v196 = *((_QWORD *)&v342 + 1);
    *((_QWORD *)&v342 + 1) = 0;
    *(_QWORD *)(v190 + 144) = v196;
    v197 = v343;
    v343 = 0;
    *(_QWORD *)(v190 + 152) = v197;
    v198 = v344;
    v344 = 0;
    *(_QWORD *)(v190 + 160) = v198;
    v199 = v345;
    v345 = 0;
    *(_QWORD *)(v190 + 168) = v199;
    LODWORD(v198) = (_DWORD)v346;
    *(_BYTE *)(v190 + 180) = BYTE4(v346);
    *(_DWORD *)(v190 + 176) = (_DWORD)v198;
    *(_QWORD *)(v190 + 184) = v347;
    v200 = *((_QWORD *)&v347 + 1);
    v347 = 0u;
    *(_QWORD *)(v190 + 192) = v200;
    *(_QWORD *)(v190 + 200) = v348;
    v201 = v349;
    *(_BYTE *)(v190 + 216) = v350;
    *(_QWORD *)(v190 + 208) = v201;
    v202 = v351;
    v348 = 0;
    v351 = 0;
    *(_QWORD *)(v190 + 224) = v202;
    *(_BYTE *)(v190 + 232) = v352;
    *(_QWORD *)(v190 + 240) = v353;
    v203 = v354;
    v353 = 0;
    v354 = 0;
    *(_QWORD *)(v190 + 248) = v203;
    WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v190 + 256, v355);
    *(_WORD *)(v190 + 328) = v356;
    v331 = (WTF::StringImpl *)v190;
    WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v355);
    v205 = v354;
    v354 = 0;
    v59 = v325;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2)
        WTF::StringImpl::destroy(v205, v204);
      else
        *(_DWORD *)v205 -= 2;
    }
    v206 = v353;
    v353 = 0;
    if (v206)
    {
      if (v206[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v206 + 24))(v206);
      else
        --v206[6];
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&buf[24], v204);
    v208 = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    if (v208)
      (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
    v209 = *(unsigned int **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (!v209)
      goto LABEL_272;
    do
    {
      v210 = __ldaxr(v209);
      v211 = v210 - 1;
    }
    while (__stlxr(v211, v209));
    if (!v211)
    {
      atomic_store(1u, v209);
      WTF::fastFree((WTF *)v209, v207);
      if (v188)
      {
LABEL_273:
        v212 = v14[37];
        if (!v212)
        {
          (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v331 + 16))(v331, 2);
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v331 + 8))(v331);
          v87 = v323;
LABEL_451:
          WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v335);
          goto LABEL_452;
        }
        *(_DWORD *)(v212 + 24) += 2;
        if ((*(_BYTE *)(a2 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
          *(_BYTE *)(a2 + 184) |= 1u;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v213 = *(WTF::StringImpl **)buf;
        if ((WTF::equal(*(WTF **)a2, *(const WTF::StringImpl **)buf, v214) & 1) != 0)
        {
          v216 = 1;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v217 = *(WTF::StringImpl **)buf;
          v216 = WTF::equal(*(WTF **)a2, *(const WTF::StringImpl **)buf, v218);
          if (v217)
          {
            if (*(_DWORD *)v217 == 2)
              WTF::StringImpl::destroy(v217, v215);
            else
              *(_DWORD *)v217 -= 2;
          }
          v59 = v325;
        }
        if (v213)
        {
          if (*(_DWORD *)v213 == 2)
          {
            WTF::StringImpl::destroy(v213, v215);
            if (v216)
              goto LABEL_286;
            goto LABEL_324;
          }
          *(_DWORD *)v213 -= 2;
        }
        if (v216)
        {
LABEL_286:
          (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v331 + 16))(v331, 0);
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v331 + 8))(v331);
          v87 = v323;
LABEL_330:
          if (*(_DWORD *)(v212 + 24) == 2)
          {
            if ((*(_WORD *)(v212 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v212);
          }
          else
          {
            *(_DWORD *)(v212 + 24) -= 2;
          }
          goto LABEL_451;
        }
LABEL_324:
        v234 = WebCore::Document::eventLoop((WebCore::Document *)v212, v215);
        ++*(_DWORD *)(v234 + 8);
        v235 = *(_QWORD *)v329;
        if (*(_QWORD *)v329)
          goto LABEL_503;
        v235 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v235 = 1;
        *(_QWORD *)(v235 + 8) = v329;
        v247 = *(unsigned int **)v329;
        *(_QWORD *)v329 = v235;
        if (!v247)
          goto LABEL_503;
        do
        {
          v248 = __ldaxr(v247);
          v249 = v248 - 1;
        }
        while (__stlxr(v249, v247));
        if (!v249)
        {
          atomic_store(1u, v247);
          WTF::fastFree((WTF *)v247, v246);
        }
        v235 = *(_QWORD *)v329;
        if (*(_QWORD *)v329)
        {
LABEL_503:
          do
            v236 = __ldaxr((unsigned int *)v235);
          while (__stlxr(v236 + 1, (unsigned int *)v235));
        }
        v237 = v331;
        v331 = 0;
        v238 = *((_QWORD *)v329 + 2);
        v239 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v239 = &off_1E33F6DB0;
        v239[1] = v235;
        v239[2] = v237;
        v239[3] = v238;
        *(_QWORD *)buf = v239;
        WebCore::EventLoopTaskGroup::queueTask(v234, 0, (uint64_t *)buf);
        v240 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v240)
          (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
        v241 = *(_DWORD *)(v234 + 8);
        v59 = v325;
        v87 = v323;
        if (!v241)
        {
          __break(0xC471u);
          JUMPOUT(0x195F0A688);
        }
        *(_DWORD *)(v234 + 8) = v241 - 1;
        goto LABEL_330;
      }
    }
    else
    {
LABEL_272:
      if (v188)
        goto LABEL_273;
    }
    v290 = *(_QWORD *)(v37 + 104);
    if (v290 || (v290 = *(_QWORD *)(v37 + 96)) != 0 || (v290 = *(_QWORD *)(v37 + 88)) != 0)
    {
      ++*(_DWORD *)(v290 + 24);
      v291 = *(WTF::StringImpl **)(v290 + 2720);
      if (v291)
        *(_DWORD *)v291 += 2;
      v322 = 0;
      v334 = v291;
      v318 = *(_QWORD *)(v290 + 2528);
    }
    else
    {
      v318 = 0;
      v334 = 0;
      v322 = 1;
    }
    v292 = v14[20];
    if (v292)
      v293 = *(_QWORD *)(v292 + 8);
    else
      v293 = 0;
    v294 = WebCore::FrameLoader::effectiveSandboxFlags((WebCore::FrameLoader *)v37);
    v295 = *(void (****)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(v37 + 16);
    v296 = (_DWORD *)*a5;
    v297 = v293 != 0;
    if (v319)
    {
      WebCore::PolicyChecker::hitTestResult((uint64_t)buf, v329, (uint64_t)v357);
      v298 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v298 = off_1E33F6DD8;
      v330 = v298;
      HIDWORD(v314) = v294;
      LOBYTE(v314) = v297;
      (**v295)(v295, v357, a2, a3, v296, &v334, v318, buf, v314, a7, &v330);
      v300 = v330;
      v330 = 0;
      if (v300)
        (*(void (**)(_QWORD *))(*v300 + 8))(v300);
      v87 = v323;
      if (BYTE8(v342))
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)buf, v299);
      v301 = v331;
      v331 = 0;
      (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v301 + 16))(v301, 0);
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v301 + 8))(v301);
    }
    else
    {
      WebCore::PolicyChecker::hitTestResult((uint64_t)buf, v329, (uint64_t)v357);
      HIDWORD(v314) = v294;
      LOBYTE(v314) = v297;
      (**v295)(v295, v357, a2, a3, v296, &v334, v318, buf, v314, a7, &v331);
      if (BYTE8(v342))
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)buf, v302);
      v87 = v323;
    }
    v303 = v334;
    v334 = 0;
    if (v303)
    {
      if (*(_DWORD *)v303 == 2)
        WTF::StringImpl::destroy(v303, (WTF::StringImpl *)v302);
      else
        *(_DWORD *)v303 -= 2;
    }
    if ((v322 & 1) == 0)
    {
      if (*(_DWORD *)(v290 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v290 + 24))(v290);
      else
        --*(_DWORD *)(v290 + 24);
    }
    v304 = v331;
    v331 = 0;
    v59 = v325;
    if (v304)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v304 + 8))(v304);
    goto LABEL_451;
  }
  v324 = v14;
  v63 = v37;
  v64 = a6;
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 200))(v59);
  v66 = v59;
  v67 = *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8);
  *(_DWORD *)(v67 + 24) += 2;
  v68 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v67 + 192));
  v69 = v68;
  if (!v65)
  {
    if (v68)
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 + 1, v68));
      Ref = (WTF::StringImpl *)WebCore::ContentSecurityPolicy::allowChildFrameFromSource((uint64_t)v68, (WTF::URL *)a2, (v61 & 1) == 0);
      if (!atomic_load(v69))
      {
        __break(0xC471u);
        JUMPOUT(0x195F09ECCLL);
      }
      v73 = (char)Ref;
      do
        v74 = __ldaxr(v69);
      while (__stlxr(v74 - 1, v69));
    }
    else
    {
      Ref = (WTF::StringImpl *)WebCore::ContentSecurityPolicy::allowChildFrameFromSource(0, (WTF::URL *)a2, (v61 & 1) == 0);
      v73 = (char)Ref;
    }
    a6 = v64;
    if (*(_DWORD *)(v67 + 24) == 2)
    {
      if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
        Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v67);
    }
    else
    {
      *(_DWORD *)(v67 + 24) -= 2;
    }
    v59 = v66;
    v37 = v63;
    v14 = v324;
    if ((v73 & 1) != 0)
      goto LABEL_66;
    goto LABEL_361;
  }
  if (v68)
  {
    do
      v252 = __ldaxr(v68);
    while (__stlxr(v252 + 1, v68));
  }
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  v254 = WebCore::ContentSecurityPolicy::allowObjectFromSource((uint64_t)v69, (WTF::URL *)a2, (v61 & 1) == 0, (WTF::URL *)buf);
  Ref = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (Ref)
  {
    if (*(_DWORD *)Ref == 2)
    {
      Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v253);
      if (!v69)
        goto LABEL_358;
      goto LABEL_356;
    }
    *(_DWORD *)Ref -= 2;
  }
  if (!v69)
    goto LABEL_358;
LABEL_356:
  if (!atomic_load(v69))
  {
    __break(0xC471u);
    JUMPOUT(0x195F0A728);
  }
  do
    v256 = __ldaxr(v69);
  while (__stlxr(v256 - 1, v69));
LABEL_358:
  if (*(_DWORD *)(v67 + 24) == 2)
  {
    a6 = v64;
    if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
      Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v67);
  }
  else
  {
    *(_DWORD *)(v67 + 24) -= 2;
    a6 = v64;
  }
  v59 = v66;
  v37 = v63;
  v14 = v324;
  if ((v254 & 1) != 0)
    goto LABEL_66;
LABEL_361:
  v257 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v257 || (v258 = *(_QWORD *)(v257 + 96)) == 0)
    v258 = WebCore::threadGlobalDataSlow(Ref);
  v259 = *(_QWORD *)(v258 + 40);
  if (!v259)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v258);
    v259 = *(_QWORD *)(v258 + 40);
  }
  v260 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v260);
  *(_DWORD *)(v260 + 16) = 1;
  *(_QWORD *)v260 = off_1E33A4B48;
  *(_QWORD *)(v260 + 8) = 0;
  *(_DWORD *)(v260 + 20) = *(_DWORD *)(v260 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v259 + 1104) != 0);
  v262 = *(_DWORD **)(v259 + 1104);
  if (v262)
    *v262 += 2;
  *(_QWORD *)(v260 + 24) = v262;
  *(_QWORD *)(v260 + 32) = 0;
  *(_QWORD *)(v260 + 40) = 0;
  *(_QWORD *)(v260 + 48) = 0;
  *(_QWORD *)(v260 + 56) = v261;
  *(_QWORD *)(v260 + 64) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 48))(v59, v260);
  if (*(_DWORD *)(v260 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  else
    --*(_DWORD *)(v260 + 16);
  v263 = qword_1ECE7C478;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
  {
    v264 = *(_QWORD *)(*((_QWORD *)v329 + 1) + 8);
    v265 = *(_QWORD *)(v264 + 24);
    if (v265)
    {
      v265 = *(_QWORD *)(v265 + 8);
      if (v265)
      {
        if (*(_BYTE *)(v265 + 40))
          v265 = *(_QWORD *)(v265 + 32);
        else
          v265 = 0;
      }
    }
    v266 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v264 + 280) + 8) + 8) + 32);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v329;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v265;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v266;
    _os_log_impl(&dword_1940B8000, v263, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: ignoring because disallowed by content security policy", buf, 0x20u);
  }
  *(_QWORD *)buf = 0;
  v267 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v267 + 16))(v267, a2, buf, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (v268)
  {
    do
    {
      v269 = __ldaxr(v268);
      v270 = v269 - 1;
    }
    while (__stlxr(v270, v268));
    if (!v270)
    {
      atomic_store(1u, v268);
      WTF::fastFree((WTF *)v268, v89);
    }
  }
LABEL_453:
  if (*(_DWORD *)(v59 + 24) == 2)
  {
    if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v59);
  }
  else
  {
    *(_DWORD *)(v59 + 24) -= 2;
  }
LABEL_455:
  if (!*(_DWORD *)v37)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0A4F4);
  }
  --*(_DWORD *)v37;
  if (v14)
  {
    do
    {
      v305 = __ldaxr(v15);
      v306 = v305 - 1;
    }
    while (__stlxr(v306, v15));
    if (!v306)
    {
      atomic_store(1u, v15);
      v307 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v307 = off_1E31FE290;
      v307[1] = v15;
      *(_QWORD *)buf = v307;
      WTF::ensureOnMainThread();
      v308 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v308)
        (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
    }
  }
  WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v357, (WTF::StringImpl *)v89);
}

uint64_t WebCore::PolicyChecker::extendBlobURLLifetimeIfNecessary(WTF::URL *this, uint64_t a2, WebCore::ResourceRequest *a3, WebCore::Document *a4, int a5)
{
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[24];
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a5 != 1)
    goto LABEL_5;
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 280) + 104);
    if (v11
      && !WebCore::NavigationAction::isEmpty((WebCore::NavigationAction *)(v11 + 1632))
      && (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 280) + 104), *(_BYTE *)(v15 + 1856)))
    {
      v13 = *(_QWORD *)(v15 + 1680);
    }
    else
    {
      WebCore::Document::topOrigin(a4, v9);
      v13 = v12;
    }
    if ((*((_BYTE *)a3 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a3);
      *((_BYTE *)a3 + 184) |= 1u;
    }
    v17[0] = 0;
    v18 = -1;
    v14 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E33F6D10[v14])(&v16, v17, v13 + 8);
      v18 = v14;
    }
    v19 = 1;
    result = WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(this, a3, v17);
    if (v19)
    {
      if (v18 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E33F6D00[v18])(&v16, v17);
    }
  }
  else
  {
LABEL_5:
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    result = WTF::URL::invalidate(this);
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  return result;
}

BOOL WebCore::NavigationAction::isEmpty(WebCore::NavigationAction *this)
{
  uint64_t *v2;
  uint64_t v3;
  char *v5;

  if (!*((_BYTE *)this + 224) || !*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 1;
  v2 = (uint64_t *)((char *)this + 240);
  if ((*((_BYTE *)this + 424) & 1) == 0)
  {
    v5 = (char *)this + 240;
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::NavigationAction *)((char *)this + 240));
    v2 = (uint64_t *)v5;
    *((_BYTE *)this + 424) |= 1u;
  }
  v3 = *v2;
  return !v3 || *(_DWORD *)(v3 + 4) == 0;
}

uint64_t WebCore::PolicyChecker::hitTestResult(uint64_t this, const WebCore::NavigationAction *a2, uint64_t a3)
{
  WebCore::HitTestResult *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _BYTE v12[136];

  v3 = (WebCore::HitTestResult *)this;
  if (*(_BYTE *)(a3 + 476))
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v10 = v5;
    WebCore::LocalFrame::checkedEventHandler(v5, &v11);
    if (*(_BYTE *)(a3 + 476))
    {
      WebCore::EventHandler::hitTestResultAtPoint((uint64_t)v11, (int *)(a3 + 456), 0x903u, (uint64_t)v12);
      WebCore::HitTestResult::HitTestResult(v3, (const WebCore::HitTestResult *)v12);
      *((_BYTE *)v3 + 136) = 1;
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v12, v8);
      v9 = v11;
      v11 = 0;
      if (!v9)
        return (uint64_t)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v10);
      if (*v9)
      {
        --*v9;
        return (uint64_t)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v10);
      }
    }
    else
    {
      __break(1u);
    }
    this = 286;
    __break(0xC471u);
    return this;
  }
  *(_BYTE *)this = 0;
  *(_BYTE *)(this + 136) = 0;
  return this;
}

void WebCore::PolicyChecker::checkNewWindowPolicy(const WebCore::NavigationAction *a1, const WebCore::NavigationAction *a2, uint64_t a3, uint64_t *a4, _DWORD **a5, uint64_t *a6)
{
  char v6;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _DWORD *v52;
  uint64_t v53;
  __int128 v54;
  _DWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  void *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  char v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[5];
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  char v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  _BYTE v103[48];
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char v115;
  __int128 v116;
  _DWORD *v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  _DWORD *v121;
  uint64_t v122[30];
  uint64_t v123[19];
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  __int128 v129;
  _BYTE v130[21];
  __int128 v131;
  __int128 v132;
  _OWORD v133[2];
  _BYTE v134[320];
  __int128 v135;
  char v136;
  uint64_t v137;
  uint64_t v138[9];
  uint64_t v139[12];

  v139[9] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 8);
  v14 = v13[37];
  if (v14 && (*(_BYTE *)(v14 + 268) & 0x40) != 0)
  {
    *(_QWORD *)v103 = 0;
    WTF::URL::invalidate((WTF::URL *)v103);
    v19 = *(_QWORD *)v103;
    if (*(_QWORD *)v103)
      **(_DWORD **)v103 += 2;
    v85 = v19;
    v86 = *(_OWORD *)&v103[8];
    v87 = *(_OWORD *)&v103[24];
    v88[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v88);
    v89 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v90 = v139[0];
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0x10000;
    v21 = v95 & 0x80 | 4;
    v95 = v21;
    v96 = 0;
    v22 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v22 += 2;
      v21 = v95;
    }
    v97 = v22;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = v101 & 0xE0 | 5;
    v95 = v21 | 2;
    v23 = *(WTF::StringImpl **)v103;
    *(_QWORD *)v103 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v102 = 0;
    v139[0] = 0;
    v84 = 0;
    WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)v103);
    v24 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, WTF::StringImpl **, _BYTE *, _QWORD))(*(_QWORD *)v24 + 16))(v24, &v85, v139, &v84, v103, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v103, v25);
    v27 = v84;
    v84 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = (unsigned int *)v139[0];
    v139[0] = 0;
    if (!v28)
      goto LABEL_71;
    do
    {
      v29 = __ldaxr(v28);
      v30 = --v29 == 0;
    }
    while (__stlxr(v29, v28));
    goto LABEL_69;
  }
  v15 = *(WTF **)(v13[35] + 88);
  if (!v15)
    goto LABEL_10;
  v16 = *((_DWORD *)v15 + 6);
  *((_DWORD *)v15 + 6) = v16 + 1;
  v17 = *((unsigned __int8 *)v15 + 3522);
  v18 = 1;
  if (v17 != 1)
  {
    if (v17 != 2)
      goto LABEL_8;
    LOBYTE(v18) = 0;
  }
  v6 = v18;
  v18 = 0;
LABEL_8:
  if (!v16)
  {
    v15 = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v15 + 24))(v15);
    if (!v18)
      goto LABEL_29;
LABEL_10:
    if (WTF::isMainThread(v15))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          goto LABEL_30;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    if ((*(_QWORD *)(v13[17] + 680) & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_30;
  }
  *((_DWORD *)v15 + 6) = v16;
  if (v18)
    goto LABEL_10;
LABEL_29:
  if ((v6 & 1) == 0)
  {
LABEL_57:
    *(_QWORD *)v103 = 0;
    WTF::URL::invalidate((WTF::URL *)v103);
    v71 = *(_QWORD *)v103;
    if (*(_QWORD *)v103)
      **(_DWORD **)v103 += 2;
    v85 = v71;
    v86 = *(_OWORD *)&v103[8];
    v87 = *(_OWORD *)&v103[24];
    v88[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v88);
    v89 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v90 = v139[0];
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0x10000;
    v73 = v95 & 0x80 | 4;
    v95 = v73;
    v96 = 0;
    v74 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v74 += 2;
      v73 = v95;
    }
    v97 = v74;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = v101 & 0xE0 | 5;
    v95 = v73 | 2;
    v75 = *(WTF::StringImpl **)v103;
    *(_QWORD *)v103 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v72);
      else
        *(_DWORD *)v75 -= 2;
    }
    v102 = 0;
    v139[0] = 0;
    v84 = 0;
    WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)v103);
    v76 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, WTF::StringImpl **, _BYTE *, _QWORD))(*(_QWORD *)v76 + 16))(v76, &v85, v139, &v84, v103, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)v103, v77);
    v78 = v84;
    v84 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v26);
      else
        *(_DWORD *)v78 -= 2;
    }
    v28 = (unsigned int *)v139[0];
    v139[0] = 0;
    if (!v28)
      goto LABEL_71;
    do
    {
      v79 = __ldaxr(v28);
      v30 = --v79 == 0;
    }
    while (__stlxr(v79, v28));
LABEL_69:
    if (v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v26);
    }
LABEL_71:
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v85, v26);
    return;
  }
LABEL_30:
  WebCore::PolicyChecker::extendBlobURLLifetimeIfNecessary((WTF::URL *)v139, (uint64_t)a1, (WebCore::ResourceRequest *)a3, *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296), 1);
  v31 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  v32 = (unsigned int *)(v31 + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  v34 = *(_QWORD *)(v31 + 280);
  ++*(_DWORD *)v34;
  v82 = *a4;
  v83 = *(_QWORD *)(v34 + 16);
  WebCore::PolicyChecker::hitTestResult((uint64_t)&v85, a1, (uint64_t)a2);
  do
    v35 = __ldaxr(v32);
  while (__stlxr(v35 + 1, v32));
  *(_QWORD *)v103 = v31;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v103[8], (const WebCore::ResourceRequestBase::RequestData *)a3);
  v36 = *(_DWORD **)(a3 + 152);
  if (v36)
    *v36 += 2;
  *(_QWORD *)&v116 = v36;
  v37 = *(_DWORD **)(a3 + 160);
  if (v37)
    *v37 += 2;
  *((_QWORD *)&v116 + 1) = v37;
  v38 = *(_DWORD **)(a3 + 168);
  if (v38)
    ++*v38;
  v39 = *(_QWORD *)(a3 + 176);
  v117 = v38;
  v118 = v39;
  v119 = *(_BYTE *)(a3 + 184);
  v40 = *(const void **)(a3 + 192);
  *(_QWORD *)&v120 = v40;
  if (v40)
    CFRetain(v40);
  v41 = *a4;
  *a4 = 0;
  *((_QWORD *)&v120 + 1) = v41;
  v42 = *a5;
  if (*a5)
    *v42 += 2;
  v121 = v42;
  WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)v122, a2);
  v43 = *a6;
  *a6 = 0;
  v137 = v43;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)v138, v139);
  v44 = WTF::fastMalloc((WTF *)0x4C0);
  v45 = v44;
  *(_QWORD *)v44 = off_1E33F6E00;
  v46 = *(_OWORD *)v103;
  *(_OWORD *)v103 = 0u;
  *(_OWORD *)(v44 + 16) = v46;
  LODWORD(v46) = *(_DWORD *)&v103[16];
  *(_OWORD *)(v44 + 32) = *(_OWORD *)&v103[16];
  *(_OWORD *)(v44 + 48) = *(_OWORD *)&v103[32];
  *(_DWORD *)&v103[16] = v46 & 0xFFFFFFFE;
  v47 = v104;
  v104 = 0;
  *(_QWORD *)(v44 + 64) = v47;
  LODWORD(v46) = v105;
  *(_OWORD *)(v44 + 72) = v105;
  *(_OWORD *)(v44 + 88) = v106;
  LODWORD(v105) = v46 & 0xFFFFFFFE;
  *(_QWORD *)(v44 + 104) = v107;
  v48 = v108;
  v108 = 0u;
  *(_OWORD *)(v44 + 112) = v48;
  *(_QWORD *)&v48 = v109;
  v109 = 0;
  *(_QWORD *)(v44 + 128) = v48;
  v49 = v110;
  v110 = 0;
  *(_QWORD *)(v44 + 136) = v49;
  *(_QWORD *)&v48 = v111;
  v111 = 0;
  *(_QWORD *)(v44 + 144) = v48;
  v50 = v112;
  v112 = 0;
  *(_QWORD *)(v44 + 152) = v50;
  *(_QWORD *)&v48 = v113;
  v113 = 0;
  *(_QWORD *)(v44 + 160) = v48;
  LODWORD(v50) = v114;
  *(_BYTE *)(v44 + 172) = v115;
  *(_DWORD *)(v44 + 168) = v50;
  v51 = v116;
  v116 = 0u;
  *(_OWORD *)(v44 + 176) = v51;
  v52 = v117;
  v117 = 0;
  v53 = v118;
  *(_QWORD *)(v44 + 192) = v52;
  *(_QWORD *)(v44 + 200) = v53;
  *(_BYTE *)(v44 + 208) = v119;
  v54 = v120;
  v120 = 0u;
  *(_OWORD *)(v44 + 216) = v54;
  v55 = v121;
  if (v121)
    *v121 += 2;
  *(_QWORD *)(v44 + 232) = v55;
  std::__optional_copy_assign_base<WebCore::NavigationRequester,false>::__optional_copy_assign_base[abi:sn180100](v44 + 240, v122);
  WebCore::ResourceRequestBase::RequestData::RequestData(v45 + 480, v123);
  v56 = v124;
  v124 = 0u;
  *(_OWORD *)(v57 + 152) = v56;
  v58 = v125;
  v125 = 0;
  *(_QWORD *)(v45 + 648) = v58;
  *(_QWORD *)(v45 + 656) = v126;
  *(_BYTE *)(v45 + 664) = v127;
  v59 = v128;
  v128 = 0;
  *(_QWORD *)(v45 + 672) = v59;
  v60 = *(_QWORD *)&v130[13];
  v61 = *(_OWORD *)v130;
  *(_OWORD *)(v45 + 680) = v129;
  *(_OWORD *)(v45 + 696) = v61;
  *(_QWORD *)(v45 + 709) = v60;
  v62 = v131;
  v131 = 0u;
  *(_OWORD *)(v45 + 720) = v62;
  v63 = v132;
  v64 = v133[0];
  *(_OWORD *)(v45 + 761) = *(_OWORD *)((char *)v133 + 9);
  *(_OWORD *)(v45 + 736) = v63;
  *(_OWORD *)(v45 + 752) = v64;
  *(_BYTE *)(v45 + 784) = 0;
  *(_BYTE *)(v45 + 1096) = 0;
  if (v134[312])
  {
    std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(v45 + 784, (uint64_t)v134);
    *(_BYTE *)(v45 + 1096) = 1;
  }
  v65 = v136;
  *(_OWORD *)(v45 + 1104) = v135;
  *(_BYTE *)(v45 + 1120) = v65;
  v66 = v137;
  v137 = 0;
  *(_QWORD *)(v45 + 1136) = v66;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v45 + 1144, v138);
  v84 = (WTF::StringImpl *)v45;
  (*(void (**)(uint64_t, const WebCore::NavigationAction *, uint64_t, uint64_t, _DWORD **, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v83 + 408))(v83, a2, a3, v82, a5, &v85, &v84);
  v67 = v84;
  v84 = 0;
  if (v67)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
  WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::ResourceRequest &::AtomString const&,WebCore::ResourceRequest &::CompletionHandler<void ()(WebCore::NavigationAction && const&,WebCore::ResourceRequest &::WeakPtr<WTF,WebCore::ResourceRequest &::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0::~$_0((uint64_t *)v103);
  if (BYTE8(v93))
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v85, v68);
  if (!*(_DWORD *)v34)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0B2F4);
  }
  --*(_DWORD *)v34;
  do
  {
    v69 = __ldaxr(v32);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v32));
  if (!v70)
  {
    atomic_store(1u, v32);
    v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v80 = off_1E31FE290;
    v80[1] = v32;
    *(_QWORD *)v103 = v80;
    WTF::ensureOnMainThread();
    v81 = *(_QWORD *)v103;
    *(_QWORD *)v103 = 0;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v139);
}

uint64_t *WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::ResourceRequest &::AtomString const&,WebCore::ResourceRequest &::CompletionHandler<void ()(WebCore::NavigationAction && const&,WebCore::ResourceRequest &::WeakPtr<WTF,WebCore::ResourceRequest &::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0::~$_0(uint64_t *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)(a1 + 141));
  v3 = a1[140];
  a1[140] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)(a1 + 28), v2);
  v5 = (WTF::StringImpl *)a1[27];
  a1[27] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)a1[26];
  a1[26] = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    else
      --v6[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 1), v4);
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v8;
      v13 = v12;
      WTF::ensureOnMainThread();
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return a1;
}

uint64_t WebCore::PolicyChecker::stopCheck(WebCore::PolicyChecker *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 1);
  ++*((_QWORD *)this + 2);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v2 + 280);
  ++*(_DWORD *)v5;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 416))(*(_QWORD *)(v5 + 16));
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0B51CLL);
  }
  --*(_DWORD *)v5;
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v3;
    v10 = (uint64_t)v9;
    WTF::ensureOnMainThread();
    result = v10;
    if (v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

WTF::StringImpl *WebCore::PolicyChecker::cannotShowMIMEType(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  WTF::StringImpl *v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v2 + 280);
  ++*(_DWORD *)v5;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v5 + 16) + 616))(&v22);
  *(_BYTE *)(a1 + 25) = 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v6 + 280);
  ++*(_DWORD *)v9;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v9 + 16) + 424))(*(_QWORD *)(v9 + 16), &v22);
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0B700);
  }
  --*(_DWORD *)v9;
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, v7);
    v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = off_1E31FE290;
    *((_QWORD *)v19 + 1) = v7;
    v26 = v19;
    WTF::ensureOnMainThread();
    v20 = v26;
    v26 = 0;
    if (v20)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  }
  *(_BYTE *)(a1 + 25) = 0;
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0B764);
  }
  --*(_DWORD *)v5;
  do
  {
    v17 = __ldaxr(v3);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v3));
  if (!v18)
  {
    atomic_store(1u, v3);
    v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v21 = off_1E31FE290;
    *((_QWORD *)v21 + 1) = v3;
    v26 = v21;
    WTF::ensureOnMainThread();
    result = v26;
    v26 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::PolicyChecker::handleUnimplementablePolicy(WebCore::PolicyChecker *this, const WebCore::ResourceError *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  *((_BYTE *)this + 25) = 1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 280);
  ++*(_DWORD *)v6;
  result = (*(uint64_t (**)(_QWORD, const WebCore::ResourceError *))(**(_QWORD **)(v6 + 16) + 424))(*(_QWORD *)(v6 + 16), a2);
  if (!*(_DWORD *)v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0B868);
  }
  --*(_DWORD *)v6;
  do
  {
    v8 = __ldaxr(v4);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v4));
  if (!v9)
  {
    atomic_store(1u, v4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v4;
    v11 = (uint64_t)v10;
    WTF::ensureOnMainThread();
    result = v11;
    if (v11)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  *((_BYTE *)this + 25) = 0;
  return result;
}

WTF::StringImpl *WebCore::addPolicyContainerHeaders(WebCore *this, WebCore::ResourceResponse *a2, const WebCore::PolicyContainer *a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v10 = *(_QWORD *)a2;
    v11 = 16 * v5;
    do
    {
      if (*(_BYTE *)(v10 + 8))
        v12 = 24;
      else
        v12 = 25;
      WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)this, (WTF::StringImpl *)v12, (WTF::StringImpl **)v10);
      v10 += 16;
      v11 -= 16;
    }
    while (v11);
  }
  WebCore::CrossOriginOpenerPolicy::addPolicyHeadersTo((_QWORD *)a2 + 6, this);
  WebCore::CrossOriginEmbedderPolicy::addPolicyHeadersTo((_QWORD *)a2 + 3, this);
  v6 = *((unsigned __int8 *)a2 + 72);
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[0] = (uint64_t)v13;
    unk_1EE2F45C0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl;
    qword_1EE2F45C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl;
    unk_1EE2F45D0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl;
    qword_1EE2F45D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl;
    unk_1EE2F45E0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F45E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl;
    unk_1EE2F45F0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F45F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl;
  }
  v7 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[v6];
  if (v7)
    *(_DWORD *)v7 += 2;
  v14 = v7;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  WebCore::HTTPHeaderMap::set((WebCore *)((char *)this + 80), (WTF::StringImpl *)0x3D, &v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::PrivateClickMeasurement::maxAge(WebCore::PrivateClickMeasurement *this)
{
  return 604800.0;
}

WTF::StringImpl *WebCore::PrivateClickMeasurement::isolatedCopy@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WebCore::PCM::AttributionTriggerData *v18;
  __int128 v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const void *v34;
  const void *v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *result;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43[2];
  WTF::StringImpl *v44;
  uint64_t v45;

  v4 = *a1;
  WTF::String::isolatedCopy();
  v5 = v43[0];
  if (!v43[0] || !*((_DWORD *)v43[0] + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v43[0];
    v43[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v5 = v42;
  }
  WTF::String::isolatedCopy();
  v8 = v43[0];
  if (!v43[0] || !*((_DWORD *)v43[0] + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v43[0];
    v43[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = v42;
  }
  WTF::String::isolatedCopy();
  v12 = *((_QWORD *)a1 + 3);
  v13 = a1[32];
  *(_BYTE *)a2 = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  *(_QWORD *)(a2 + 8) = v5;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  v14 = (WTF::StringImpl **)(a2 + 240);
  *(_BYTE *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_BYTE *)(a2 + 272) = 0;
  v15 = v43[0];
  if (v43[0])
  {
    v16 = *(_DWORD *)v43[0];
    *(_DWORD *)v43[0] += 2;
    *(_QWORD *)(a2 + 304) = v15;
    v43[0] = 0;
    if (v16)
      *(_DWORD *)v15 = v16;
    else
      WTF::StringImpl::destroy(v15, v11);
  }
  else
  {
    *(_QWORD *)(a2 + 304) = 0;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v11);
      if (!v5)
        goto LABEL_26;
      goto LABEL_24;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v5)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v11);
  else
    *(_DWORD *)v5 -= 2;
LABEL_26:
  v17 = (WTF::StringImpl *)(a1 + 56);
  if (*(unsigned __int8 *)(a2 + 184) == a1[184])
  {
    if (*(_BYTE *)(a2 + 184))
      WebCore::PCM::AttributionTriggerData::operator=(a2 + 56, (uint64_t)v17);
  }
  else
  {
    v18 = (WebCore::PCM::AttributionTriggerData *)(a2 + 56);
    if (*(_BYTE *)(a2 + 184))
    {
      WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(v18, v17);
      *(_BYTE *)(a2 + 184) = 0;
    }
    else
    {
      WebCore::PCM::AttributionTriggerData::AttributionTriggerData((uint64_t)v18, (uint64_t)v17);
      *(_BYTE *)(a2 + 184) = 1;
    }
  }
  v19 = *((_OWORD *)a1 + 13);
  *(_OWORD *)(a2 + 192) = *((_OWORD *)a1 + 12);
  *(_OWORD *)(a2 + 208) = v19;
  v20 = a1[232];
  if (a1[232])
  {
    WTF::String::isolatedCopy();
    v20 = 1;
  }
  else
  {
    LOBYTE(v43[0]) = 0;
  }
  LOBYTE(v43[1]) = v20;
  if (*(unsigned __int8 *)(a2 + 232) != v20)
  {
    if (*(_BYTE *)(a2 + 232))
    {
      v23 = *(WTF::StringImpl **)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v17);
        else
          *(_DWORD *)v23 -= 2;
      }
      *(_BYTE *)(a2 + 232) = 0;
    }
    else
    {
      v24 = v43[0];
      v43[0] = 0;
      *(_QWORD *)(a2 + 224) = v24;
      *(_BYTE *)(a2 + 232) = 1;
    }
    goto LABEL_46;
  }
  if (*(_BYTE *)(a2 + 232))
  {
    v21 = v43[0];
    v43[0] = 0;
    v22 = *(WTF::StringImpl **)(a2 + 224);
    *(_QWORD *)(a2 + 224) = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
LABEL_46:
    v20 = LOBYTE(v43[1]);
  }
  if (v20)
  {
    v25 = v43[0];
    v43[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)a1 + 30);
  v43[0] = v26;
  if (v26)
    CFRetain(v26);
  v27 = (WTF::StringImpl *)*((_QWORD *)a1 + 31);
  v43[1] = v27;
  if (v27)
    CFRetain(v27);
  v28 = (WTF::StringImpl *)*((_QWORD *)a1 + 32);
  v44 = v28;
  if (v28)
    CFRetain(v28);
  WTF::String::isolatedCopy();
  v30 = v43[1];
  v32 = v44;
  v31 = v45;
  v33 = *v14;
  *v14 = v43[0];
  if (v33)
    CFRelease(v33);
  v34 = *(const void **)(a2 + 248);
  *(_QWORD *)(a2 + 248) = v30;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(a2 + 256);
  *(_QWORD *)(a2 + 256) = v32;
  if (v35)
    CFRelease(v35);
  v36 = *(WTF::StringImpl **)(a2 + 264);
  *(_QWORD *)(a2 + 264) = v31;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v29);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = a1[296];
  if (v37)
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v37 = 1;
  }
  else
  {
    LOBYTE(v43[0]) = 0;
  }
  LOBYTE(v45) = v37;
  result = (WTF::StringImpl *)std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(a2 + 272, (WTF::StringImpl *)v43);
  if ((_BYTE)v45)
  {
    v40 = v44;
    v44 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v43[1];
    v43[1] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v39);
      else
        *(_DWORD *)v41 -= 2;
    }
    result = v43[0];
    v43[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

{
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WebCore::PCM::AttributionTriggerData *v18;
  __int128 v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const void *v34;
  const void *v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *result;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43[2];
  WTF::StringImpl *v44;
  uint64_t v45;

  v4 = *a1;
  WTF::String::isolatedCopy();
  v5 = v43[0];
  if (!v43[0] || !*((_DWORD *)v43[0] + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v43[0];
    v43[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v5 = v42;
  }
  WTF::String::isolatedCopy();
  v8 = v43[0];
  if (!v43[0] || !*((_DWORD *)v43[0] + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v43[0];
    v43[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = v42;
  }
  WTF::String::isolatedCopy();
  v12 = *((_QWORD *)a1 + 3);
  v13 = a1[32];
  *(_BYTE *)a2 = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  *(_QWORD *)(a2 + 8) = v5;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  v14 = (WTF::StringImpl **)(a2 + 240);
  *(_BYTE *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_BYTE *)(a2 + 272) = 0;
  v15 = v43[0];
  if (v43[0])
  {
    v16 = *(_DWORD *)v43[0];
    *(_DWORD *)v43[0] += 2;
    *(_QWORD *)(a2 + 304) = v15;
    v43[0] = 0;
    if (v16)
      *(_DWORD *)v15 = v16;
    else
      WTF::StringImpl::destroy(v15, v11);
  }
  else
  {
    *(_QWORD *)(a2 + 304) = 0;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v11);
      if (!v5)
        goto LABEL_26;
      goto LABEL_24;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v5)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v11);
  else
    *(_DWORD *)v5 -= 2;
LABEL_26:
  v17 = (WTF::StringImpl *)(a1 + 56);
  if (*(unsigned __int8 *)(a2 + 184) == a1[184])
  {
    if (*(_BYTE *)(a2 + 184))
      WebCore::PCM::AttributionTriggerData::operator=(a2 + 56, (uint64_t)v17);
  }
  else
  {
    v18 = (WebCore::PCM::AttributionTriggerData *)(a2 + 56);
    if (*(_BYTE *)(a2 + 184))
    {
      WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(v18, v17);
      *(_BYTE *)(a2 + 184) = 0;
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v18, (uint64_t)v17);
      *(_BYTE *)(a2 + 184) = 1;
    }
  }
  v19 = *((_OWORD *)a1 + 13);
  *(_OWORD *)(a2 + 192) = *((_OWORD *)a1 + 12);
  *(_OWORD *)(a2 + 208) = v19;
  v20 = a1[232];
  if (a1[232])
  {
    WTF::String::isolatedCopy();
    v20 = 1;
  }
  else
  {
    LOBYTE(v43[0]) = 0;
  }
  LOBYTE(v43[1]) = v20;
  if (*(unsigned __int8 *)(a2 + 232) != v20)
  {
    if (*(_BYTE *)(a2 + 232))
    {
      v23 = *(WTF::StringImpl **)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v17);
        else
          *(_DWORD *)v23 -= 2;
      }
      *(_BYTE *)(a2 + 232) = 0;
    }
    else
    {
      v24 = v43[0];
      v43[0] = 0;
      *(_QWORD *)(a2 + 224) = v24;
      *(_BYTE *)(a2 + 232) = 1;
    }
    goto LABEL_46;
  }
  if (*(_BYTE *)(a2 + 232))
  {
    v21 = v43[0];
    v43[0] = 0;
    v22 = *(WTF::StringImpl **)(a2 + 224);
    *(_QWORD *)(a2 + 224) = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
LABEL_46:
    v20 = LOBYTE(v43[1]);
  }
  if (v20)
  {
    v25 = v43[0];
    v43[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)a1 + 30);
  v43[0] = v26;
  if (v26)
    CFRetain(v26);
  v27 = (WTF::StringImpl *)*((_QWORD *)a1 + 31);
  v43[1] = v27;
  if (v27)
    CFRetain(v27);
  v28 = (WTF::StringImpl *)*((_QWORD *)a1 + 32);
  v44 = v28;
  if (v28)
    CFRetain(v28);
  WTF::String::isolatedCopy();
  v30 = v43[1];
  v32 = v44;
  v31 = v45;
  v33 = *v14;
  *v14 = v43[0];
  if (v33)
    CFRelease(v33);
  v34 = *(const void **)(a2 + 248);
  *(_QWORD *)(a2 + 248) = v30;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(a2 + 256);
  *(_QWORD *)(a2 + 256) = v32;
  if (v35)
    CFRelease(v35);
  v36 = *(WTF::StringImpl **)(a2 + 264);
  *(_QWORD *)(a2 + 264) = v31;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v29);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = a1[296];
  if (v37)
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v37 = 1;
  }
  else
  {
    LOBYTE(v43[0]) = 0;
  }
  LOBYTE(v45) = v37;
  result = (WTF::StringImpl *)std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(a2 + 272, (WTF::StringImpl *)v43);
  if ((_BYTE)v45)
  {
    v40 = v44;
    v44 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v43[1];
    v43[1] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v39);
      else
        *(_DWORD *)v41 -= 2;
    }
    result = v43[0];
    v43[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebCore::PrivateClickMeasurement::isNeitherSameSiteNorCrossSiteTriggeringEvent(uint64_t a1, const WTF::StringImpl **a2, WTF::URL *this, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;

  v7 = WTF::URL::host(this);
  if (WebCore::RegistrableDomain::matches(a2, v7, v8) && *(_BYTE *)(a4 + 16))
    return 0;
  if (WTF::equal(*(WTF **)(a1 + 8), *a2, v9))
    return *(_BYTE *)(a4 + 16) != 0;
  return 1;
}

void WebCore::PrivateClickMeasurement::parseAttributionRequest(WebCore::PrivateClickMeasurement *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl **v3;
  WebCore::PrivateClickMeasurement *v4;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::PrivateClickMeasurement *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  int v69;
  unsigned __int8 v70;
  WTF *v71;
  int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  char v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  char v91;
  WTF::StringImpl *v92;
  char v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;

  v4 = this;
  v103 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v7 = *(char **)(v6 + 8);
    v8 = *(_DWORD *)(v6 + 4);
    v9 = ((unint64_t)*(unsigned int *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 1;
  }
  v10 = (WTF::StringImpl *)WTF::URL::pathStart(this);
  v11 = *((_DWORD *)v4 + 8);
  v12 = WTF::URL::pathStart(v4);
  if (v8 <= v10)
  {
    v66 = (char *)&str_60_15;
    v67 = 0x100000000;
    goto LABEL_82;
  }
  LODWORD(v13) = v11 - v12;
  if (v8 - v10 <= v11 - v12)
  {
    if (!(_DWORD)v10)
    {
      v13 = v8 | (v9 << 32);
      goto LABEL_12;
    }
    LODWORD(v13) = v8 - (_DWORD)v10;
  }
  v13 = v13;
  v14 = v8 - (unint64_t)v10;
  if (v9)
  {
    if (v14 < v13)
      goto LABEL_173;
    v7 += v10;
    v13 = v13 | 0x100000000;
  }
  else
  {
    if (v14 < v13)
      goto LABEL_173;
    v7 += 2 * v10;
  }
LABEL_12:
  v66 = v7;
  v67 = v13;
  if (!(_DWORD)v13 || (WTF::StringView::startsWith() & 1) == 0)
  {
LABEL_82:
    v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v16 += 2;
    goto LABEL_84;
  }
  if (!WTF::URL::protocolIs()
    || *((_DWORD *)v4 + 5) > *((_DWORD *)v4 + 3)
    || (*((_BYTE *)v4 + 8) & 1) != 0 && *(_QWORD *)v4 && *(_DWORD *)(*(_QWORD *)v4 + 4) > *((_DWORD *)v4 + 9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = v89;
LABEL_84:
    *(_QWORD *)a2 = v16;
    *(_DWORD *)(a2 + 128) = 1;
    return;
  }
  v3 = &v74;
  if (*((_DWORD *)v4 + 9) <= *((_DWORD *)v4 + 8))
  {
    LOWORD(v74) = 0;
    BYTE2(v74) = 0;
    LOBYTE(v75) = 0;
    v76 = 0;
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    LOBYTE(v81) = 0;
    v82 = 0;
    LOBYTE(v83) = 0;
    v85 = 0;
    LOBYTE(v86) = 0;
    v88 = 0;
    LOWORD(v89) = 0;
    BYTE2(v89) = 0;
    LOBYTE(v90) = 0;
    v91 = 0;
    LOBYTE(v92) = 0;
    v93 = 0;
    LOBYTE(v94) = 0;
    v95 = 0;
    LOBYTE(v96) = 0;
    v98 = 0;
    LOBYTE(v99) = 0;
    v101 = 0;
    v102 = 0;
    WebCore::PCM::AttributionTriggerData::~AttributionTriggerData((WebCore::PCM::AttributionTriggerData *)&v74, v15);
    goto LABEL_99;
  }
  WTF::queryParameters();
  if (v73 && v73 < 3)
  {
    v4 = 0;
    v10 = 0;
    v18 = (WTF::StringImpl **)((char *)v71 + 8);
    v19 = 16 * v73;
    do
    {
      if (MEMORY[0x19AEA53F4](*(v18 - 1), "attributionSource", 17))
      {
        v20 = *v18;
        if (!*v18 || !*((_DWORD *)v20 + 1))
          goto LABEL_76;
        if (!v10 || !*((_DWORD *)v10 + 1))
          goto LABEL_36;
        if ((MEMORY[0x19AEA53F4](v10, "nullOrigin", 10) & 1) == 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v102 = 1;
          goto LABEL_91;
        }
        v20 = *v18;
        if (*v18)
LABEL_36:
          *(_DWORD *)v20 += 2;
        v89 = v20;
        MEMORY[0x19AEA52D4](&v74, &v89, 0);
        v22 = v89;
        v89 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
        if ((v75 & 1) == 0)
          goto LABEL_87;
        v23 = v79;
        if (v23 > WTF::URL::pathStart((WTF::URL *)&v74))
        {
          WTF::URL::path((WTF::URL *)&v74);
          if ((v24 & 0xFFFFFFFE) != 0)
            goto LABEL_87;
        }
        if (v77 > HIDWORD(v75) || v80 > v79 || (v75 & 1) != 0 && v74 && *((_DWORD *)v74 + 1) > v80)
          goto LABEL_87;
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v89, (const WTF::URL *)&v74);
        v26 = v89;
        v89 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::destroy(v10, v25);
            v31 = v89;
            v89 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v30);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
        if (!v26)
        {
          v10 = 0;
LABEL_87:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v102 = 1;
          v32 = v74;
          v74 = 0;
          v3 = &v74;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v17);
              if (!v10)
                goto LABEL_93;
              goto LABEL_91;
            }
            *(_DWORD *)v32 -= 2;
          }
          if (!v10)
            goto LABEL_93;
          goto LABEL_91;
        }
        if (!*((_DWORD *)v26 + 1) || (MEMORY[0x19AEA53F4](v26, "nullOrigin", 10) & 1) != 0)
        {
          v10 = v26;
          goto LABEL_87;
        }
        v28 = v74;
        v74 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v27);
          else
            *(_DWORD *)v28 -= 2;
        }
        v10 = v26;
      }
      else
      {
        if (!MEMORY[0x19AEA53F4](*(v18 - 1), "attributionDestinationNonce", 27))
          goto LABEL_76;
        v29 = *v18;
        if (!*v18 || !*((_DWORD *)v29 + 1))
        {
LABEL_78:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v102 = 1;
          goto LABEL_79;
        }
        if (v4)
        {
          if (*((_DWORD *)v4 + 1))
            goto LABEL_78;
          *(_DWORD *)v29 += 2;
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v27);
          else
            *(_DWORD *)v4 -= 2;
        }
        else
        {
          *(_DWORD *)v29 += 2;
        }
        v4 = v29;
      }
      v18 += 2;
      v19 -= 16;
      v3 = &v74;
    }
    while (v19);
    LOBYTE(v74) = 0;
    BYTE2(v74) = 0;
    LOBYTE(v75) = 0;
    v76 = 0;
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    LOBYTE(v81) = 0;
    v82 = 0;
    LOBYTE(v83) = 0;
    v85 = 0;
    LOBYTE(v86) = 0;
    v88 = 0;
    if (v10 && *((_DWORD *)v10 + 1) && (MEMORY[0x19AEA53F4](v10, "nullOrigin", 10) & 1) == 0)
    {
      if (v76)
      {
        v63 = v75;
        v75 = v10;
        if (v63)
        {
          if (*(_DWORD *)v63 != 2)
          {
            v10 = 0;
            *(_DWORD *)v63 -= 2;
            goto LABEL_178;
          }
          WTF::StringImpl::destroy(v63, v27);
        }
      }
      else
      {
        v75 = v10;
        v76 = 1;
      }
      v10 = 0;
    }
LABEL_178:
    if (!v4 || !*((_DWORD *)v4 + 1))
      goto LABEL_179;
    if ((_BYTE)v79)
    {
      v64 = v78;
      v78 = v4;
      if (v64)
      {
        if (*(_DWORD *)v64 != 2)
        {
          v4 = 0;
          *(_DWORD *)v64 -= 2;
LABEL_179:
          LOWORD(v89) = (_WORD)v74;
          BYTE2(v89) = BYTE2(v74);
          LOBYTE(v90) = 0;
          v91 = 0;
          if (v76)
          {
            v56 = v75;
            v75 = 0;
            v90 = v56;
            v91 = 1;
          }
          LOBYTE(v92) = 0;
          v93 = 0;
          if ((_BYTE)v79)
          {
            v57 = v78;
            v78 = 0;
            v92 = v57;
            v93 = 1;
          }
          LOBYTE(v94) = 0;
          v95 = 0;
          if (v82)
          {
            v58 = v81;
            v81 = 0;
            v94 = v58;
            v95 = 1;
          }
          LOBYTE(v96) = 0;
          v98 = 0;
          if (v85)
          {
            v59 = v83;
            v83 = 0u;
            v96 = v59;
            v60 = v84;
            v84 = 0u;
            v97 = v60;
            v98 = 1;
          }
          LOBYTE(v99) = 0;
          v101 = 0;
          if (v88)
          {
            v61 = v86;
            v86 = 0uLL;
            v99 = v61;
            v62 = v87;
            v87 = 0;
            v100 = v62;
            v101 = 1;
          }
          v102 = 0;
          WebCore::PCM::AttributionTriggerData::~AttributionTriggerData((WebCore::PCM::AttributionTriggerData *)&v74, v27);
LABEL_79:
          v3 = &v74;
          if (!v10)
            goto LABEL_93;
          goto LABEL_91;
        }
        WTF::StringImpl::destroy(v64, v27);
      }
    }
    else
    {
      v78 = v4;
      LOBYTE(v79) = 1;
    }
    v4 = 0;
    goto LABEL_179;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v102 = 1;
  while (1)
  {
    if (v73)
    {
      v41 = 16 * v73;
      v10 = (WTF *)((char *)v71 + 8);
      do
      {
        v42 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v17);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = (WTF::StringImpl *)*((_QWORD *)v10 - 1);
        *((_QWORD *)v10 - 1) = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v17);
          else
            *(_DWORD *)v43 -= 2;
        }
        v10 = (WTF::StringImpl *)((char *)v10 + 16);
        v41 -= 16;
      }
      while (v41);
    }
    v33 = v71;
    if (v71)
    {
      v71 = 0;
      v72 = 0;
      WTF::fastFree(v33, v17);
    }
LABEL_99:
    if (v102)
    {
      if (v102 == 1)
      {
        v34 = v89;
        if (v89 && *((_DWORD *)v89 + 1))
        {
          v89 = 0;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v34 = v74;
        }
        *(_QWORD *)a2 = v34;
        *(_DWORD *)(a2 + 128) = 1;
        goto LABEL_169;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_211:
      __break(0xC471u);
      JUMPOUT(0x195F0CBDCLL);
    }
    WebCore::PCM::AttributionTriggerData::AttributionTriggerData((uint64_t)&v74, (uint64_t)&v89);
    if ((_DWORD)v67 != 64)
    {
      if ((_DWORD)v67 != 61)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_QWORD *)a2 = v71;
        *(_DWORD *)(a2 + 128) = 1;
        goto LABEL_168;
      }
      if (BYTE4(v67))
        v35 = (uint64_t)(v66 + 59);
      else
        v35 = (uint64_t)(v66 + 118);
      if (BYTE4(v67))
        v36 = WTF::parseInteger<unsigned long long,unsigned char>(v35, 2, 0xAu, 0);
      else
        v36 = WTF::parseInteger<unsigned long long,char16_t>(v35, 2, 0xAu, 0);
      if (!(_BYTE)v37 || v36 >= 0x10)
      {
        v71 = (WTF *)"[Private Click Measurement] Triggering event was not accepted because the conversion data could not"
                     " be parsed or was higher than the allowed maximum of ";
        v72 = 152;
        v70 = 15;
        v68 = ".";
        v69 = 1;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v71, &v70, (uint64_t)&v68, &v65);
        v44 = v65;
        if (v65)
          goto LABEL_167;
        goto LABEL_211;
      }
      LOWORD(v74) = v36;
      goto LABEL_155;
    }
    v38 = (uint64_t)(BYTE4(v67) ? v66 + 59 : v66 + 118);
    v39 = BYTE4(v67)
        ? WTF::parseInteger<unsigned long long,unsigned char>(v38, 2, 0xAu, 0)
        : WTF::parseInteger<unsigned long long,char16_t>(v38, 2, 0xAu, 0);
    v4 = (WebCore::PrivateClickMeasurement *)v39;
    if (!v40 || v39 >= 0x10)
      break;
    LODWORD(v45) = v67 - 62;
    if ((v67 - 62) >= 2)
      v45 = 2;
    else
      v45 = v45;
    v46 = v67 - 62;
    if (BYTE4(v67))
    {
      if (v46 >= v45)
      {
        v47 = (uint64_t)(v66 + 62);
        v45 |= 0x100000000uLL;
LABEL_149:
        if ((v45 & 0x100000000) != 0)
          v48 = WTF::parseInteger<unsigned long long,unsigned char>(v47, v45, 0xAu, 0);
        else
          v48 = WTF::parseInteger<unsigned long long,char16_t>(v47, v45, 0xAu, 0);
        if (!(_BYTE)v37 || v48 >= 0x40)
        {
          v71 = (WTF *)"[Private Click Measurement] Triggering event was not accepted because the priority could not be p"
                       "arsed or was higher than the allowed maximum of ";
          v72 = 145;
          v70 = 63;
          v68 = ".";
          v69 = 1;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v71, &v70, (uint64_t)&v68, &v65);
          v44 = v65;
          if (v65)
            goto LABEL_167;
          goto LABEL_211;
        }
        LOBYTE(v74) = (_BYTE)v4;
        BYTE1(v74) = v48;
LABEL_155:
        *(_BYTE *)(a2 + 2) = BYTE2(v74);
        *(_WORD *)a2 = (_WORD)v74;
        *(_BYTE *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        if (v76)
        {
          v49 = v75;
          v75 = 0;
          *(_QWORD *)(a2 + 8) = v49;
          *(_BYTE *)(a2 + 16) = 1;
        }
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if ((_BYTE)v79)
        {
          v50 = v78;
          v78 = 0;
          *(_QWORD *)(a2 + 24) = v50;
          *(_BYTE *)(a2 + 32) = 1;
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_BYTE *)(a2 + 48) = 0;
        if (v82)
        {
          v51 = v81;
          v81 = 0;
          *(_QWORD *)(a2 + 40) = v51;
          *(_BYTE *)(a2 + 48) = 1;
        }
        *(_BYTE *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 88) = 0;
        if (v85)
        {
          v52 = v83;
          v83 = 0u;
          *(_OWORD *)(a2 + 56) = v52;
          v53 = *(_OWORD *)(v3 + 9);
          *(_OWORD *)(v3 + 9) = 0u;
          *(_OWORD *)(a2 + 72) = v53;
          *(_BYTE *)(a2 + 88) = 1;
        }
        *(_BYTE *)(a2 + 96) = 0;
        *(_BYTE *)(a2 + 120) = 0;
        if (v88)
        {
          v54 = v86;
          v86 = 0uLL;
          *(_OWORD *)(a2 + 96) = v54;
          v55 = v87;
          v87 = 0;
          *(_QWORD *)(a2 + 112) = v55;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_DWORD *)(a2 + 128) = 0;
        goto LABEL_168;
      }
    }
    else if (v46 >= v45)
    {
      v47 = (uint64_t)(v66 + 124);
      goto LABEL_149;
    }
LABEL_173:
    __break(1u);
LABEL_76:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v102 = 1;
    if (v10)
    {
LABEL_91:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v17);
      else
        *(_DWORD *)v10 -= 2;
    }
LABEL_93:
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v17);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v71 = (WTF *)"[Private Click Measurement] Triggering event was not accepted because the conversion data could not be pa"
               "rsed or was higher than the allowed maximum of ";
  v72 = 152;
  v70 = 15;
  v68 = ".";
  v69 = 1;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v71, &v70, (uint64_t)&v68, &v65);
  v44 = v65;
  if (!v65)
  {
    __break(0xC471u);
    JUMPOUT(0x195F0CC88);
  }
LABEL_167:
  *(_QWORD *)a2 = v44;
  *(_DWORD *)(a2 + 128) = 1;
LABEL_168:
  WebCore::PCM::AttributionTriggerData::~AttributionTriggerData((WebCore::PCM::AttributionTriggerData *)&v74, v37);
LABEL_169:
  if (v102 != -1)
    (*(&off_1E33F6D20 + v102))((int)&v74, (WebCore::PCM::AttributionTriggerData *)&v89);
}

BOOL WebCore::PrivateClickMeasurement::hasPreviouslyBeenReported(WebCore::PrivateClickMeasurement *this)
{
  return !*((_BYTE *)this + 200) || *((_BYTE *)this + 216) == 0;
}

WTF::StringImpl *WebCore::PrivateClickMeasurement::setSourceApplicationBundleIDForTesting(WebCore::PrivateClickMeasurement *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  char v9;
  double v10;
  double v11;
  WTF *v12;
  double v13;
  double v14;
  WTF::WallTime *v15;
  double v16;
  double v17;
  double v18;

  if (*a2 > 0xFu)
    goto LABEL_6;
  v5 = a2[1];
  if (v5 > 0x3F)
    goto LABEL_6;
  v7 = result;
  result += 56;
  if (!*(_BYTE *)(v7 + 184))
  {
    v8 = (WTF *)std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(result, (uint64_t)a2);
    *(_BYTE *)(v7 + 184) = 1;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v7 + 57) >= v5)
  {
LABEL_6:
    v9 = 0;
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 8) = 0;
    *((_BYTE *)a4 + 16) = 0;
    goto LABEL_11;
  }
  v8 = (WTF *)WebCore::PCM::AttributionTriggerData::operator=(result, (uint64_t)a2);
LABEL_8:
  v10 = 1.0;
  v11 = 1.0;
  if ((a3 & 1) == 0)
  {
    v12 = (WTF *)WTF::cryptographicallyRandomUnitInterval(v8);
    v10 = v13 * 86400.0 + 86400.0;
    v8 = (WTF *)WTF::cryptographicallyRandomUnitInterval(v12);
    v11 = v14 * 86400.0 + 86400.0;
  }
  v15 = (WTF::WallTime *)WTF::WallTime::now(v8);
  v17 = v10 + v16;
  result = WTF::WallTime::now(v15);
  *(double *)(v7 + 192) = v17;
  v9 = 1;
  *(_BYTE *)(v7 + 200) = 1;
  *(double *)(v7 + 208) = v11 + v18;
  *(_BYTE *)(v7 + 216) = 1;
  *a4 = v10;
  *((_BYTE *)a4 + 8) = 1;
  a4[2] = v11;
LABEL_11:
  *((_BYTE *)a4 + 24) = v9;
  return result;
}

BOOL WebCore::PrivateClickMeasurement::hasHigherPriorityThan(WebCore::PrivateClickMeasurement *this, const WebCore::PrivateClickMeasurement *a2)
{
  if (!*((_BYTE *)a2 + 184))
    return 1;
  if (*((_BYTE *)this + 184))
    return *((unsigned __int8 *)this + 57) > *((unsigned __int8 *)a2 + 57);
  return 0;
}

WTF::StringImpl *WebCore::PrivateClickMeasurement::attributionReportClickSourceURL@<X0>(WebCore::PrivateClickMeasurement *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  if (*((_BYTE *)this + 184))
  {
    if (*((unsigned __int8 *)this + 56) <= 0xFu && *((unsigned __int8 *)this + 57) <= 0x3Fu)
    {
      v4 = *((_QWORD *)this + 1);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 4))
        {
          if ((MEMORY[0x19AEA53F4]() & 1) == 0)
          {
            v6 = *((_QWORD *)this + 2);
            if (v6)
            {
              if (*(_DWORD *)(v6 + 4)
                && (MEMORY[0x19AEA53F4]() & 1) == 0
                && (*((_BYTE *)this + 200) || *((_BYTE *)this + 216)))
              {
                return WebCore::makeValidURL((uint64_t)a2, *((_QWORD *)this + 1), "/.well-known/private-click-measurement/report-attribution/");
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = 0;
  return (WTF::StringImpl *)WTF::URL::invalidate(a2);
}

WTF::StringImpl *WebCore::PrivateClickMeasurement::attributionReportClickDestinationURL@<X0>(WebCore::PrivateClickMeasurement *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  if (*((_BYTE *)this + 184))
  {
    if (*((unsigned __int8 *)this + 56) <= 0xFu && *((unsigned __int8 *)this + 57) <= 0x3Fu)
    {
      v4 = *((_QWORD *)this + 1);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 4))
        {
          if ((MEMORY[0x19AEA53F4]() & 1) == 0)
          {
            v6 = *((_QWORD *)this + 2);
            if (v6)
            {
              if (*(_DWORD *)(v6 + 4)
                && (MEMORY[0x19AEA53F4]() & 1) == 0
                && (*((_BYTE *)this + 200) || *((_BYTE *)this + 216)))
              {
                return WebCore::makeValidURL((uint64_t)a2, *((_QWORD *)this + 2), "/.well-known/private-click-measurement/report-attribution/");
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = 0;
  return (WTF::StringImpl *)WTF::URL::invalidate(a2);
}

uint64_t WebCore::PrivateClickMeasurement::attributionReportJSON@<X0>(WebCore::PrivateClickMeasurement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  const WTF::String *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  const WTF::String *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  const WTF::String *v62;
  WTF::StringImpl *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  const WTF::String *v69;
  WTF::StringImpl *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  const WTF::String *v77;
  WTF::StringImpl *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  _DWORD *v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD **v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD **v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD **v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD **v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD **v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD **v111;
  uint64_t v112;
  _DWORD *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  _DWORD *v116;
  _QWORD v117[2];
  char v118;

  result = WTF::JSONImpl::Object::create(this);
  if (*((_BYTE *)this + 184))
  {
    if (*((unsigned __int8 *)this + 56) <= 0xFu && *((unsigned __int8 *)this + 57) <= 0x3Fu)
    {
      result = *((_QWORD *)this + 1);
      if (result)
      {
        if (*(_DWORD *)(result + 4))
        {
          result = MEMORY[0x19AEA53F4]();
          if ((result & 1) == 0)
          {
            result = *((_QWORD *)this + 2);
            if (result)
            {
              if (*(_DWORD *)(result + 4))
              {
                result = MEMORY[0x19AEA53F4]();
                if ((result & 1) == 0 && (*((_BYTE *)this + 200) || *((_BYTE *)this + 216)))
                {
                  v5 = (uint64_t *)*a2;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v114 = (WTF::StringImpl *)v117[0];
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v114, v6);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v5 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v8 = v5 + 3;
                    v9 = *((unsigned int *)v5 + 9);
                    if ((_DWORD)v9 == *((_DWORD *)v5 + 8))
                    {
                      v84 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v115);
                      v9 = *((unsigned int *)v5 + 9);
                      v85 = v5[3];
                      v86 = *v84;
                      if (*v84)
                        *v86 += 2;
                      *(_QWORD *)(v85 + 8 * v9) = v86;
                    }
                    else
                    {
                      v10 = *v8;
                      v11 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v10 + 8 * v9) = v11;
                    }
                    *((_DWORD *)v5 + 9) = v9 + 1;
                  }
                  v12 = v116;
                  v116 = 0;
                  if (v12)
                  {
                    if (*v12 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v12;
                  }
                  v13 = v114;
                  v114 = 0;
                  if (v13)
                  {
                    if (*(_DWORD *)v13 == 2)
                      WTF::StringImpl::destroy(v13, v7);
                    else
                      *(_DWORD *)v13 -= 2;
                  }
                  v14 = v115;
                  v115 = 0;
                  if (v14)
                  {
                    if (*(_DWORD *)v14 == 2)
                      WTF::StringImpl::destroy(v14, v7);
                    else
                      *(_DWORD *)v14 -= 2;
                  }
                  v15 = (uint64_t *)*a2;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 8), v16);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v15 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v18 = v15 + 3;
                    v19 = *((unsigned int *)v15 + 9);
                    if ((_DWORD)v19 == *((_DWORD *)v15 + 8))
                    {
                      v87 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v115);
                      v19 = *((unsigned int *)v15 + 9);
                      v88 = v15[3];
                      v89 = *v87;
                      if (*v87)
                        *v89 += 2;
                      *(_QWORD *)(v88 + 8 * v19) = v89;
                    }
                    else
                    {
                      v20 = *v18;
                      v21 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v20 + 8 * v19) = v21;
                    }
                    *((_DWORD *)v15 + 9) = v19 + 1;
                  }
                  v22 = v116;
                  v116 = 0;
                  if (v22)
                  {
                    if (*v22 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v22;
                  }
                  v23 = v115;
                  v115 = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, v17);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                  v24 = (uint64_t *)*a2;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned __int8 *)this);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v24 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v26 = v24 + 3;
                    v27 = *((unsigned int *)v24 + 9);
                    if ((_DWORD)v27 == *((_DWORD *)v24 + 8))
                    {
                      v90 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v115);
                      v27 = *((unsigned int *)v24 + 9);
                      v91 = v24[3];
                      v92 = *v90;
                      if (*v90)
                        *v92 += 2;
                      *(_QWORD *)(v91 + 8 * v27) = v92;
                    }
                    else
                    {
                      v28 = *v26;
                      v29 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v28 + 8 * v27) = v29;
                    }
                    *((_DWORD *)v24 + 9) = v27 + 1;
                  }
                  v30 = v116;
                  v116 = 0;
                  if (v30)
                  {
                    if (*v30 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v30;
                  }
                  v31 = v115;
                  v115 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, v25);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v32 = (uint64_t *)*a2;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 16), v33);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v32 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v35 = v32 + 3;
                    v36 = *((unsigned int *)v32 + 9);
                    if ((_DWORD)v36 == *((_DWORD *)v32 + 8))
                    {
                      v93 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v115);
                      v36 = *((unsigned int *)v32 + 9);
                      v94 = v32[3];
                      v95 = *v93;
                      if (*v93)
                        *v95 += 2;
                      *(_QWORD *)(v94 + 8 * v36) = v95;
                    }
                    else
                    {
                      v37 = *v35;
                      v38 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v37 + 8 * v36) = v38;
                    }
                    *((_DWORD *)v32 + 9) = v36 + 1;
                  }
                  v39 = v116;
                  v116 = 0;
                  if (v39)
                  {
                    if (*v39 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v39;
                  }
                  v40 = v115;
                  v115 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, v34);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v41 = (uint64_t *)*a2;
                  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  v42 = *((unsigned __int8 *)this + 184);
                  if (!*((_BYTE *)this + 184))
                    goto LABEL_185;
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 56));
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v41 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v44 = v41 + 3;
                    v45 = *((unsigned int *)v41 + 9);
                    if ((_DWORD)v45 == *((_DWORD *)v41 + 8))
                    {
                      v96 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v115);
                      v45 = *((unsigned int *)v41 + 9);
                      v97 = v41[3];
                      v98 = *v96;
                      if (*v96)
                        *v98 += 2;
                      *(_QWORD *)(v97 + 8 * v45) = v98;
                    }
                    else
                    {
                      v46 = *v44;
                      v47 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v46 + 8 * v45) = v47;
                    }
                    *((_DWORD *)v41 + 9) = v45 + 1;
                  }
                  v48 = v116;
                  v116 = 0;
                  if (v48)
                  {
                    if (*v48 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v48;
                  }
                  v49 = v115;
                  v115 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, v43);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v41 = (uint64_t *)*a2;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)3);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v41 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v51 = v41 + 3;
                    v52 = *((unsigned int *)v41 + 9);
                    if ((_DWORD)v52 == *((_DWORD *)v41 + 8))
                    {
                      v99 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v115);
                      v52 = *((unsigned int *)v41 + 9);
                      v100 = v41[3];
                      v101 = *v99;
                      if (*v99)
                        *v101 += 2;
                      *(_QWORD *)(v100 + 8 * v52) = v101;
                    }
                    else
                    {
                      v53 = *v51;
                      v54 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v53 + 8 * v52) = v54;
                    }
                    *((_DWORD *)v41 + 9) = v52 + 1;
                  }
                  v55 = v116;
                  v116 = 0;
                  if (v55)
                  {
                    if (*v55 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v55;
                  }
                  result = (uint64_t)v115;
                  v115 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v50);
                    else
                      *(_DWORD *)result -= 2;
                  }
                  if (!*((_BYTE *)this + 296))
                    goto LABEL_116;
                  v41 = (uint64_t *)*a2;
                  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v115 = (WTF::StringImpl *)v117[0];
                  v42 = *((unsigned __int8 *)this + 296);
                  if (!*((_BYTE *)this + 296))
                    goto LABEL_185;
                  WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 272), v56);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v41 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (!v118)
                    goto LABEL_97;
                  result = (uint64_t)(v41 + 3);
                  v42 = *((unsigned int *)v41 + 9);
                  if ((_DWORD)v42 == *((_DWORD *)v41 + 8))
                    goto LABEL_186;
                  v58 = *(_QWORD *)result;
                  v59 = v115;
                  if (v115)
                    *(_DWORD *)v115 += 2;
                  *(_QWORD *)(v58 + 8 * v42) = v59;
                  while (1)
                  {
                    *((_DWORD *)v41 + 9) = v42 + 1;
LABEL_97:
                    v60 = v116;
                    v116 = 0;
                    if (v60)
                    {
                      if (*v60 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v60;
                    }
                    v61 = v115;
                    v115 = 0;
                    if (v61)
                    {
                      if (*(_DWORD *)v61 == 2)
                        WTF::StringImpl::destroy(v61, v57);
                      else
                        *(_DWORD *)v61 -= 2;
                    }
                    v41 = (uint64_t *)*a2;
                    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v115 = (WTF::StringImpl *)v117[0];
                    v42 = *((unsigned __int8 *)this + 296);
                    if (*((_BYTE *)this + 296))
                    {
                      WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 280), v62);
                      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v41 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                      if (v118)
                      {
                        v64 = v41 + 3;
                        v65 = *((unsigned int *)v41 + 9);
                        if ((_DWORD)v65 == *((_DWORD *)v41 + 8))
                        {
                          v105 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v115);
                          v65 = *((unsigned int *)v41 + 9);
                          v106 = v41[3];
                          v107 = *v105;
                          if (*v105)
                            *v107 += 2;
                          *(_QWORD *)(v106 + 8 * v65) = v107;
                        }
                        else
                        {
                          v66 = *v64;
                          v67 = v115;
                          if (v115)
                            *(_DWORD *)v115 += 2;
                          *(_QWORD *)(v66 + 8 * v65) = v67;
                        }
                        *((_DWORD *)v41 + 9) = v65 + 1;
                      }
                      v68 = v116;
                      v116 = 0;
                      if (v68)
                      {
                        if (*v68 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*v68;
                      }
                      result = (uint64_t)v115;
                      v115 = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v63);
                        else
                          *(_DWORD *)result -= 2;
                      }
LABEL_116:
                      v42 = *((unsigned __int8 *)this + 184);
                      if (*((_BYTE *)this + 184))
                      {
                        if (!*((_BYTE *)this + 176))
                          return result;
                        v41 = (uint64_t *)*a2;
                        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v115 = (WTF::StringImpl *)v117[0];
                        v42 = *((unsigned __int8 *)this + 184);
                        if (*((_BYTE *)this + 184))
                        {
                          v42 = *((unsigned __int8 *)this + 176);
                          if (*((_BYTE *)this + 176))
                          {
                            WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 152), v69);
                            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v41 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                            if (v118)
                            {
                              v71 = v41 + 3;
                              v72 = *((unsigned int *)v41 + 9);
                              if ((_DWORD)v72 == *((_DWORD *)v41 + 8))
                              {
                                v108 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v115);
                                v72 = *((unsigned int *)v41 + 9);
                                v109 = v41[3];
                                v110 = *v108;
                                if (*v108)
                                  *v110 += 2;
                                *(_QWORD *)(v109 + 8 * v72) = v110;
                              }
                              else
                              {
                                v73 = *v71;
                                v74 = v115;
                                if (v115)
                                  *(_DWORD *)v115 += 2;
                                *(_QWORD *)(v73 + 8 * v72) = v74;
                              }
                              *((_DWORD *)v41 + 9) = v72 + 1;
                            }
                            v75 = v116;
                            v116 = 0;
                            if (v75)
                            {
                              if (*v75 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v75;
                            }
                            v76 = v115;
                            v115 = 0;
                            if (v76)
                            {
                              if (*(_DWORD *)v76 == 2)
                                WTF::StringImpl::destroy(v76, v70);
                              else
                                *(_DWORD *)v76 -= 2;
                            }
                            a2 = (uint64_t *)*a2;
                            result = WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v42 = *((unsigned __int8 *)this + 184);
                            if (*((_BYTE *)this + 184))
                            {
                              v42 = *((unsigned __int8 *)this + 176);
                              if (*((_BYTE *)this + 176))
                                break;
                            }
                          }
                        }
                      }
                    }
LABEL_185:
                    __break(1u);
LABEL_186:
                    v102 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v42 + 1, (unint64_t)&v115);
                    v42 = *((unsigned int *)v41 + 9);
                    v103 = v41[3];
                    v104 = *v102;
                    if (*v102)
                      *v104 += 2;
                    *(_QWORD *)(v103 + 8 * v42) = v104;
                  }
                  WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 160), v77);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(a2 + 2, &v115, (const WTF::StringImpl *)&v116, (uint64_t)v117);
                  if (v118)
                  {
                    v79 = a2 + 3;
                    v80 = *((unsigned int *)a2 + 9);
                    if ((_DWORD)v80 == *((_DWORD *)a2 + 8))
                    {
                      v111 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v80 + 1, (unint64_t)&v115);
                      v80 = *((unsigned int *)a2 + 9);
                      v112 = a2[3];
                      v113 = *v111;
                      if (*v111)
                        *v113 += 2;
                      *(_QWORD *)(v112 + 8 * v80) = v113;
                    }
                    else
                    {
                      v81 = *v79;
                      v82 = v115;
                      if (v115)
                        *(_DWORD *)v115 += 2;
                      *(_QWORD *)(v81 + 8 * v80) = v82;
                    }
                    *((_DWORD *)a2 + 9) = v80 + 1;
                  }
                  v83 = v116;
                  v116 = 0;
                  if (v83)
                  {
                    if (*v83 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v83;
                  }
                  result = (uint64_t)v115;
                  v115 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v78);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::PCM::EphemeralNonce::isValid(WebCore::PCM::EphemeralNonce *this)
{
  void *v1;
  _BOOL8 v2;
  WTF *v4;
  int v5;
  char v6;

  WTF::base64Decode();
  if (!v6)
    return 0;
  v2 = v5 == 16;
  if (v4)
    WTF::fastFree(v4, v1);
  return v2;
}

WTF::StringImpl *WebCore::PrivateClickMeasurement::setEphemeralSourceNonce(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  void *v5;
  int v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  char v10;

  result = (WTF::StringImpl *)WTF::base64Decode();
  if (v10)
  {
    result = v8;
    if (v8)
      result = (WTF::StringImpl *)WTF::fastFree(v8, v5);
    if (v9 == 16)
    {
      v6 = *(unsigned __int8 *)(a1 + 232);
      v7 = *a2;
      *a2 = 0;
      if (v6)
      {
        result = *(WTF::StringImpl **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = v7;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 224) = v7;
        *(_BYTE *)(a1 + 232) = 1;
      }
    }
  }
  return result;
}

double WebCore::PrivateClickMeasurement::tokenPublicKeyURL@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *a1;
  if (v4 && *(_DWORD *)(v4 + 4) && !MEMORY[0x19AEA53F4]())
  {
    WebCore::makeValidURL((uint64_t)&v6, *a1, "/.well-known/private-click-measurement/get-token-public-key/");
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    result = *(double *)&v8;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::makeValidURL(uint64_t a1, uint64_t a2, char *__s)
{
  char *v3;
  size_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _WORD *v12;
  int8x16_t *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  __int128 v45;
  unsigned __int128 *v46;
  unsigned __int128 *v47;
  unsigned __int128 v48;
  char v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v3 = __s;
  if (a2)
    *(_DWORD *)a2 += 2;
  if (!__s)
  {
    v6 = 0;
    if (a2)
      goto LABEL_6;
LABEL_35:
    v7 = 0;
    goto LABEL_7;
  }
  v6 = strlen(__s);
  if (v6 >> 31)
    goto LABEL_78;
  if (!a2)
    goto LABEL_35;
LABEL_6:
  v7 = *(_DWORD *)(a2 + 4);
  if (v7 < 0)
    goto LABEL_78;
LABEL_7:
  v8 = __OFADD__(v7, (_DWORD)v6);
  v9 = v7 + v6;
  if (v8)
    goto LABEL_78;
  v10 = (v9 + 8);
  if (__OFADD__(v9, 8))
    goto LABEL_78;
  if (a2 && (*(_BYTE *)(a2 + 16) & 4) == 0)
  {
    if (v9 != -8)
    {
      if (v10 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v10 + 20));
        v11 = v51;
        if (v51)
        {
          *(_DWORD *)v51 = 2;
          *((_DWORD *)v11 + 1) = v10;
          *(_OWORD *)((char *)v11 + 20) = xmmword_1969F28C0;
          *((_QWORD *)v11 + 1) = (char *)v11 + 20;
          *((_DWORD *)v11 + 4) = 0;
          v12 = (_WORD *)((char *)v11 + 36);
          v13 = *(int8x16_t **)(a2 + 8);
          v14 = *(unsigned int *)(a2 + 4);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          {
            v20 = (char *)&v12[v14];
            if (v14 >= 0x40)
            {
              v21 = (char *)&v12[v14 & 0xFFFFFFC0];
              v22 = 0uLL;
              v23 = (char *)v11 + 36;
              do
              {
                v54.val[0] = *v13;
                v24 = v13[1];
                v56.val[0] = v13[2];
                v25 = v13[3];
                v13 += 4;
                v26 = v25;
                v56.val[1] = 0uLL;
                v58.val[0] = v24;
                v54.val[1] = 0uLL;
                v27 = v23;
                vst2q_s8(v27, v54);
                v27 += 32;
                v58.val[1] = 0uLL;
                vst2q_s8(v27, v58);
                v28 = v23 + 64;
                vst2q_s8(v28, v56);
                v29 = v23 + 96;
                vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
                v23 += 128;
              }
              while (v23 != v21);
            }
            else
            {
              v21 = (char *)v11 + 36;
            }
            while (v21 != v20)
            {
              v30 = v13->u8[0];
              v13 = (int8x16_t *)((char *)v13 + 1);
              *(_WORD *)v21 = v30;
              v21 += 2;
            }
          }
          else if ((_DWORD)v14 == 1)
          {
            *v12 = v13->i16[0];
          }
          else if ((_DWORD)v14)
          {
            memcpy((char *)v11 + 36, v13, 2 * v14);
          }
          v31 = (char *)&v12[*(unsigned int *)(a2 + 4)];
          v32 = &v31[2 * v6];
          if ((v6 & 0x7FFFFFC0) != 0)
          {
            v33 = &v31[2 * (v6 & 0x7FFFFFC0)];
            v34 = 0uLL;
            do
            {
              v55.val[0] = *(int8x16_t *)v3;
              v35 = *((int8x16_t *)v3 + 1);
              v57.val[0] = (int8x16_t)*((_OWORD *)v3 + 2);
              v36 = *((_OWORD *)v3 + 3);
              v3 += 64;
              v37 = v36;
              v57.val[1] = 0uLL;
              v59.val[0] = v35;
              v55.val[1] = 0uLL;
              v38 = v31;
              vst2q_s8(v38, v55);
              v38 += 32;
              v59.val[1] = 0uLL;
              vst2q_s8(v38, v59);
              v39 = v31 + 64;
              vst2q_s8(v39, v57);
              v40 = v31 + 96;
              vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
              v31 += 128;
            }
            while (v31 != v33);
            v31 = v33;
          }
          while (v31 != v32)
          {
            v41 = *v3++;
            *(_WORD *)v31 = v41;
            v31 += 2;
          }
          goto LABEL_50;
        }
      }
LABEL_78:
      __break(0xC471u);
      JUMPOUT(0x195F0E268);
    }
LABEL_69:
    v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_50;
  }
  if (v9 == -8)
    goto LABEL_69;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_78;
  WTF::tryFastCompactMalloc((WTF *)(v10 + 20));
  v11 = v51;
  if (!v51)
    goto LABEL_78;
  *(_DWORD *)v51 = 2;
  *((_DWORD *)v11 + 1) = v10;
  *(_QWORD *)((char *)v11 + 20) = 0x2F2F3A7370747468;
  *((_QWORD *)v11 + 1) = (char *)v11 + 20;
  *((_DWORD *)v11 + 4) = 4;
  v15 = (char *)v11 + 28;
  if (!a2)
  {
    v18 = 0;
    if (!(_DWORD)v6)
      goto LABEL_50;
    goto LABEL_26;
  }
  v16 = *(_BYTE **)(a2 + 8);
  v17 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
        *v15 = *v16;
      else
        memcpy((char *)v11 + 28, v16, v17);
    }
  }
  else
  {
    if (v17 < 0x10)
    {
      v46 = (unsigned __int128 *)((char *)v11 + 28);
    }
    else
    {
      v46 = (unsigned __int128 *)&v15[v17 & 0xFFFFFFF0];
      v47 = (unsigned __int128 *)((char *)v11 + 28);
      do
      {
        v48 = (unsigned __int128)vld2q_s8(v16);
        v16 += 32;
        *v47++ = v48;
      }
      while (v47 != v46);
    }
    while (v46 != (unsigned __int128 *)&v15[v17])
    {
      v49 = *v16;
      v16 += 2;
      *(_BYTE *)v46 = v49;
      v46 = (unsigned __int128 *)((char *)v46 + 1);
    }
  }
  v18 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v6)
  {
LABEL_26:
    v19 = &v15[v18];
    if ((_DWORD)v6 == 1)
      *v19 = *v3;
    else
      memcpy(v19, v3, v6);
  }
LABEL_50:
  v50 = v11;
  MEMORY[0x19AEA52D4](&v51, &v50, 0);
  v43 = v50;
  v50 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v42);
      if (!a2)
        goto LABEL_56;
      goto LABEL_54;
    }
    *(_DWORD *)v43 -= 2;
  }
  if (!a2)
    goto LABEL_56;
LABEL_54:
  if (*(_DWORD *)a2 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)a2, v42);
  else
    *(_DWORD *)a2 -= 2;
LABEL_56:
  if ((v52 & 1) != 0)
  {
    result = v51;
    if (v51)
      *(_DWORD *)v51 += 2;
    *(_QWORD *)a1 = result;
    v45 = v53;
    *(_OWORD *)(a1 + 8) = v52;
    *(_OWORD *)(a1 + 24) = v45;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    WTF::URL::invalidate((WTF::URL *)a1);
    result = v51;
  }
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::PrivateClickMeasurement::tokenPublicKeyURL@<D0>(WebCore::PrivateClickMeasurement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)this + 1);
  if (v4 && *(_DWORD *)(v4 + 4) && !MEMORY[0x19AEA53F4]())
  {
    WebCore::makeValidURL((uint64_t)&v6, *((_QWORD *)this + 1), "/.well-known/private-click-measurement/get-token-public-key/");
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    result = *(double *)&v8;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

double WebCore::PrivateClickMeasurement::tokenSignatureURL@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *a1;
  if (v4 && *(_DWORD *)(v4 + 4) && !MEMORY[0x19AEA53F4]())
  {
    WebCore::makeValidURL((uint64_t)&v6, *a1, "/.well-known/private-click-measurement/sign-unlinkable-token/");
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    result = *(double *)&v8;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

double WebCore::PrivateClickMeasurement::tokenSignatureURL@<D0>(WebCore::PrivateClickMeasurement *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  double result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;

  if (!*((_BYTE *)this + 232))
    goto LABEL_7;
  WTF::base64Decode();
  if (!BYTE8(v9))
    goto LABEL_7;
  v6 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v4);
  }
  if (DWORD1(v9) == 16
    && (v7 = *((_QWORD *)this + 1)) != 0
    && *(_DWORD *)(v7 + 4)
    && !MEMORY[0x19AEA53F4]())
  {
    WebCore::makeValidURL((uint64_t)&v8, *((_QWORD *)this + 1), "/.well-known/private-click-measurement/sign-unlinkable-token/");
    *(_QWORD *)a2 = v8;
    *(_OWORD *)(a2 + 8) = v9;
    result = *(double *)&v10;
    *(_OWORD *)(a2 + 24) = v10;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
LABEL_7:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

WTF *WebCore::PrivateClickMeasurement::tokenSignatureJSON@<X0>(WebCore::PrivateClickMeasurement *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::JSONImpl::Value *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  _DWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD **v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD **v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF *v58;
  int v59;
  int v60;
  char v61;

  result = (WTF *)WTF::JSONImpl::Object::create(this);
  if (*((_BYTE *)this + 232))
  {
    result = (WTF *)WTF::base64Decode();
    if (v61)
    {
      result = v58;
      if (v58)
      {
        v58 = 0;
        v59 = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
      if (v60 == 16)
      {
        v6 = *((_QWORD *)this + 33);
        if (v6)
        {
          if (*(_DWORD *)(v6 + 4))
          {
            v7 = *a2;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v56 = v58;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v55 = v58;
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v55, v8);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v7 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)&v58);
            if (v61)
            {
              v10 = (uint64_t *)(v7 + 24);
              v11 = *(unsigned int *)(v7 + 36);
              if ((_DWORD)v11 == *(_DWORD *)(v7 + 32))
              {
                v43 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v56);
                v11 = *(unsigned int *)(v7 + 36);
                v44 = *(_QWORD *)(v7 + 24);
                v45 = *v43;
                if (*v43)
                  *v45 += 2;
                *(_QWORD *)(v44 + 8 * v11) = v45;
              }
              else
              {
                v12 = *v10;
                v13 = v56;
                if (v56)
                  *(_DWORD *)v56 += 2;
                *(_QWORD *)(v12 + 8 * v11) = v13;
              }
              *(_DWORD *)(v7 + 36) = v11 + 1;
            }
            v14 = v57;
            v57 = 0;
            if (v14)
            {
              if (*v14 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v14;
            }
            v15 = v55;
            v55 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v9);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v56;
            v56 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v9);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = *a2;
            result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v56 = v58;
            if (*((_BYTE *)this + 232))
            {
              WTF::JSONImpl::Value::create((WebCore::PrivateClickMeasurement *)((char *)this + 224), v18);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)&v58);
              if (v61)
              {
                v20 = (uint64_t *)(v17 + 24);
                v21 = *(unsigned int *)(v17 + 36);
                if ((_DWORD)v21 == *(_DWORD *)(v17 + 32))
                {
                  v46 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v56);
                  v21 = *(unsigned int *)(v17 + 36);
                  v47 = *(_QWORD *)(v17 + 24);
                  v48 = *v46;
                  if (*v46)
                    *v48 += 2;
                  *(_QWORD *)(v47 + 8 * v21) = v48;
                }
                else
                {
                  v22 = *v20;
                  v23 = v56;
                  if (v56)
                    *(_DWORD *)v56 += 2;
                  *(_QWORD *)(v22 + 8 * v21) = v23;
                }
                *(_DWORD *)(v17 + 36) = v21 + 1;
              }
              v24 = (WebCore::PrivateClickMeasurement *)((char *)this + 264);
              v25 = v57;
              v57 = 0;
              if (v25)
              {
                if (*v25 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v25;
              }
              v26 = v56;
              v56 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v19);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = *a2;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v56 = v58;
              WTF::JSONImpl::Value::create(v24, v28);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v27 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)&v58);
              if (v61)
              {
                v30 = (uint64_t *)(v27 + 24);
                v31 = *(unsigned int *)(v27 + 36);
                if ((_DWORD)v31 == *(_DWORD *)(v27 + 32))
                {
                  v49 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v56);
                  v31 = *(unsigned int *)(v27 + 36);
                  v50 = *(_QWORD *)(v27 + 24);
                  v51 = *v49;
                  if (*v49)
                    *v51 += 2;
                  *(_QWORD *)(v50 + 8 * v31) = v51;
                }
                else
                {
                  v32 = *v30;
                  v33 = v56;
                  if (v56)
                    *(_DWORD *)v56 += 2;
                  *(_QWORD *)(v32 + 8 * v31) = v33;
                }
                *(_DWORD *)(v27 + 36) = v31 + 1;
              }
              v34 = v57;
              v57 = 0;
              if (v34)
              {
                if (*v34 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v34;
              }
              v35 = v56;
              v56 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v29);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *a2;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)3);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v36 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)&v58);
              if (v61)
              {
                v38 = (uint64_t *)(v36 + 24);
                v39 = *(unsigned int *)(v36 + 36);
                if ((_DWORD)v39 == *(_DWORD *)(v36 + 32))
                {
                  v52 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v56);
                  v39 = *(unsigned int *)(v36 + 36);
                  v53 = *(_QWORD *)(v36 + 24);
                  v54 = *v52;
                  if (*v52)
                    *v54 += 2;
                  *(_QWORD *)(v53 + 8 * v39) = v54;
                }
                else
                {
                  v40 = *v38;
                  v41 = v56;
                  if (v56)
                    *(_DWORD *)v56 += 2;
                  *(_QWORD *)(v40 + 8 * v39) = v41;
                }
                *(_DWORD *)(v36 + 36) = v39 + 1;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*v42 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v42;
              }
              result = v56;
              v56 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  return (WTF *)WTF::StringImpl::destroy(result, v37);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            else
            {
              __break(1u);
            }
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::PCM::AttributionTriggerData::tokenSignatureJSON@<X0>(WebCore::PCM::AttributionTriggerData *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  _DWORD **v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _DWORD *v56;
  WTF *v57;
  int v58;
  int v59;
  char v60;

  result = (WTF *)WTF::JSONImpl::Object::create(this);
  if (*((_BYTE *)this + 32))
  {
    result = (WTF *)WTF::base64Decode();
    if (v60)
    {
      result = v57;
      if (v57)
      {
        v57 = 0;
        v58 = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
      if (v59 == 16)
      {
        if (*((_BYTE *)this + 88))
        {
          v6 = *((_QWORD *)this + 10);
          if (v6)
          {
            if (*(_DWORD *)(v6 + 4))
            {
              v7 = *a2;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v55 = v57;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v54 = v57;
              WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v54, v8);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v7 + 16), &v55, (const WTF::StringImpl *)&v56, (uint64_t)&v57);
              if (v60)
              {
                v10 = (uint64_t *)(v7 + 24);
                v11 = *(unsigned int *)(v7 + 36);
                if ((_DWORD)v11 == *(_DWORD *)(v7 + 32))
                {
                  v42 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v55);
                  v11 = *(unsigned int *)(v7 + 36);
                  v43 = *(_QWORD *)(v7 + 24);
                  v44 = *v42;
                  if (*v42)
                    *v44 += 2;
                  *(_QWORD *)(v43 + 8 * v11) = v44;
                }
                else
                {
                  v12 = *v10;
                  v13 = v55;
                  if (v55)
                    *(_DWORD *)v55 += 2;
                  *(_QWORD *)(v12 + 8 * v11) = v13;
                }
                *(_DWORD *)(v7 + 36) = v11 + 1;
              }
              v14 = v56;
              v56 = 0;
              if (v14)
              {
                if (*v14 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v14;
              }
              v15 = v54;
              v54 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, v9);
                else
                  *(_DWORD *)v15 -= 2;
              }
              v16 = v55;
              v55 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WTF::StringImpl::destroy(v16, v9);
                else
                  *(_DWORD *)v16 -= 2;
              }
              v17 = *a2;
              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              v55 = v57;
              if (!*((_BYTE *)this + 32))
                goto LABEL_84;
              WTF::JSONImpl::Value::create((WebCore::PCM::AttributionTriggerData *)((char *)this + 24), v18);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), &v55, (const WTF::StringImpl *)&v56, (uint64_t)&v57);
              if (v60)
              {
                v20 = (uint64_t *)(v17 + 24);
                v21 = *(unsigned int *)(v17 + 36);
                if ((_DWORD)v21 == *(_DWORD *)(v17 + 32))
                {
                  v45 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v55);
                  v21 = *(unsigned int *)(v17 + 36);
                  v46 = *(_QWORD *)(v17 + 24);
                  v47 = *v45;
                  if (*v45)
                    *v47 += 2;
                  *(_QWORD *)(v46 + 8 * v21) = v47;
                }
                else
                {
                  v22 = *v20;
                  v23 = v55;
                  if (v55)
                    *(_DWORD *)v55 += 2;
                  *(_QWORD *)(v22 + 8 * v21) = v23;
                }
                *(_DWORD *)(v17 + 36) = v21 + 1;
              }
              v24 = v56;
              v56 = 0;
              if (v24)
              {
                if (*v24 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v24;
              }
              v25 = v55;
              v55 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v19);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v26 = *a2;
              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              v55 = v57;
              if (*((_BYTE *)this + 88))
              {
                WTF::JSONImpl::Value::create((WebCore::PCM::AttributionTriggerData *)((char *)this + 80), v27);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), &v55, (const WTF::StringImpl *)&v56, (uint64_t)&v57);
                if (v60)
                {
                  v29 = (uint64_t *)(v26 + 24);
                  v30 = *(unsigned int *)(v26 + 36);
                  if ((_DWORD)v30 == *(_DWORD *)(v26 + 32))
                  {
                    v48 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v55);
                    v30 = *(unsigned int *)(v26 + 36);
                    v49 = *(_QWORD *)(v26 + 24);
                    v50 = *v48;
                    if (*v48)
                      *v50 += 2;
                    *(_QWORD *)(v49 + 8 * v30) = v50;
                  }
                  else
                  {
                    v31 = *v29;
                    v32 = v55;
                    if (v55)
                      *(_DWORD *)v55 += 2;
                    *(_QWORD *)(v31 + 8 * v30) = v32;
                  }
                  *(_DWORD *)(v26 + 36) = v30 + 1;
                }
                v33 = v56;
                v56 = 0;
                if (v33)
                {
                  if (*v33 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v33;
                }
                v34 = v55;
                v55 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v28);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                v35 = *a2;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)3);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v55, (const WTF::StringImpl *)&v56, (uint64_t)&v57);
                if (v60)
                {
                  v37 = (uint64_t *)(v35 + 24);
                  v38 = *(unsigned int *)(v35 + 36);
                  if ((_DWORD)v38 == *(_DWORD *)(v35 + 32))
                  {
                    v51 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v55);
                    v38 = *(unsigned int *)(v35 + 36);
                    v52 = *(_QWORD *)(v35 + 24);
                    v53 = *v51;
                    if (*v51)
                      *v53 += 2;
                    *(_QWORD *)(v52 + 8 * v38) = v53;
                  }
                  else
                  {
                    v39 = *v37;
                    v40 = v55;
                    if (v55)
                      *(_DWORD *)v55 += 2;
                    *(_QWORD *)(v39 + 8 * v38) = v40;
                  }
                  *(_DWORD *)(v35 + 36) = v38 + 1;
                }
                v41 = v56;
                v56 = 0;
                if (v41)
                {
                  if (*v41 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v41;
                }
                result = v55;
                v55 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    return (WTF *)WTF::StringImpl::destroy(result, v36);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
              else
              {
LABEL_84:
                __break(1u);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PrivateClickMeasurement::setSourceSecretToken(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(v2 + 4))
    {
      v4 = *((_QWORD *)a2 + 1);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 4))
        {
          v5 = *((_QWORD *)a2 + 2);
          if (v5)
          {
            if (*(_DWORD *)(v5 + 4))
            {
              v6 = (_QWORD *)result;
              v7 = *(unsigned __int8 *)(result + 296);
              *(_QWORD *)a2 = 0;
              if (v7)
              {
                v8 = *(WTF::StringImpl **)(result + 272);
                v6[34] = v2;
                if (v8)
                {
                  if (*(_DWORD *)v8 == 2)
                    WTF::StringImpl::destroy(v8, a2);
                  else
                    *(_DWORD *)v8 -= 2;
                }
                v9 = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = 0;
                v10 = (WTF::StringImpl *)v6[35];
                v6[35] = v9;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy(v10, a2);
                  else
                    *(_DWORD *)v10 -= 2;
                }
                v11 = *((_QWORD *)a2 + 2);
                *((_QWORD *)a2 + 2) = 0;
                result = v6[36];
                v6[36] = v11;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
              else
              {
                *(_QWORD *)(result + 272) = v2;
                v12 = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = 0;
                *(_QWORD *)(result + 280) = v12;
                v13 = *((_QWORD *)a2 + 2);
                *((_QWORD *)a2 + 2) = 0;
                *(_QWORD *)(result + 288) = v13;
                *(_BYTE *)(result + 296) = 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PrivateClickMeasurement::setDestinationSecretToken(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(v2 + 4))
    {
      v4 = *((_QWORD *)a2 + 1);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 4))
        {
          v5 = *((_QWORD *)a2 + 2);
          if (v5)
          {
            if (*(_DWORD *)(v5 + 4))
            {
              v6 = (_QWORD *)result;
              if (*(_BYTE *)(result + 184))
              {
                v7 = *(unsigned __int8 *)(result + 176);
                *(_QWORD *)a2 = 0;
                if (v7)
                {
                  v8 = *(WTF::StringImpl **)(result + 152);
                  v6[19] = v2;
                  if (v8)
                  {
                    if (*(_DWORD *)v8 == 2)
                      WTF::StringImpl::destroy(v8, a2);
                    else
                      *(_DWORD *)v8 -= 2;
                  }
                  v9 = *((_QWORD *)a2 + 1);
                  *((_QWORD *)a2 + 1) = 0;
                  v10 = (WTF::StringImpl *)v6[20];
                  v6[20] = v9;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                      WTF::StringImpl::destroy(v10, a2);
                    else
                      *(_DWORD *)v10 -= 2;
                  }
                  v11 = *((_QWORD *)a2 + 2);
                  *((_QWORD *)a2 + 2) = 0;
                  result = v6[21];
                  v6[21] = v11;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
                else
                {
                  *(_QWORD *)(result + 152) = v2;
                  v12 = *((_QWORD *)a2 + 1);
                  *((_QWORD *)a2 + 1) = 0;
                  *(_QWORD *)(result + 160) = v12;
                  v13 = *((_QWORD *)a2 + 2);
                  *((_QWORD *)a2 + 2) = 0;
                  *(_QWORD *)(result + 168) = v13;
                  *(_BYTE *)(result + 176) = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PrivateClickMeasurement::appStoreURLAdamID(WebCore::PrivateClickMeasurement *this, const WTF::URL *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;

  v11 = 0;
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = *(_QWORD *)(v2 + 8);
    LODWORD(v2) = *(_DWORD *)(v2 + 4);
    v11 = v4;
    v5 = (v3 >> 2) & 1;
  }
  else
  {
    LOBYTE(v5) = 1;
  }
  v12 = v2;
  v13 = v5;
  result = WTF::StringView::startsWith();
  if (!(_DWORD)result)
    return 0;
  if (v12 < 0x1E)
  {
    v10 = 0;
    v9 = &str_60_15;
    return WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v9, v10, 0xAu, 0);
  }
  v8 = v12 - 29;
  v7 = v8;
  if (!v13)
  {
    if (v8 >= v8)
    {
      v9 = (void *)(v11 + 58);
      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    return result;
  }
  if (v8 < v8)
    goto LABEL_16;
  v9 = (void *)(v11 + 29);
  v7 = v8 | 0x100000000;
LABEL_11:
  v10 = v7;
  if ((v7 & 0x100000000) != 0)
    return WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v9, v10, 0xAu, 0);
  return WTF::parseInteger<unsigned long long,char16_t>((uint64_t)v9, v7, 0xAu, 0);
}

uint64_t WebCore::ProgressTracker::ProgressTracker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = 0;
  WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)(a1 + 8), a2);
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  WebCore::Timer::Timer<WebCore::ProgressTracker,WebCore::ProgressTracker>((WebCore::TimerBase *)(a1 + 40), a1);
  *(_WORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void WebCore::ProgressTracker::~ProgressTracker(WebCore::ProgressTracker *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  *((_QWORD *)this + 5) = off_1E31F7378;
  v2 = (WebCore::ProgressTracker *)((char *)this + 40);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF **)(v5 + 8);
      do
      {
        if (*(v7 - 1) != (WTF *)-1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
            WTF::fastFree(v8, v4);
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v10;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v4);
    }
  }
}

uint64_t WebCore::ProgressTracker::reset(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = this;
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    *(_QWORD *)(this + 32) = 0;
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF **)(v3 + 8);
      do
      {
        if (*(v9 - 1) != (WTF *)-1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            WTF::fastFree(v10, a2);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_QWORD *)(v2 + 144) = 0;
  *(_BYTE *)(v2 + 160) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E31FE290;
      v11[1] = v5;
      v12 = (uint64_t)v11;
      WTF::ensureOnMainThread();
      this = v12;
      if (v12)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  *(_DWORD *)(v2 + 156) = 0;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 40));
  return this;
}

BOOL WebCore::ProgressTracker::isMainLoadProgressing(WebCore::ProgressTracker *this)
{
  _BOOL8 result;
  double v3;

  if (!*((_QWORD *)this + 3) || !*((_BYTE *)this + 161))
    return 0;
  result = 0;
  v3 = *((double *)this + 16);
  if (v3 != 0.0 && v3 < 0.9)
    return *((_DWORD *)this + 39) < 4u;
  return result;
}

uint64_t WebCore::ProgressTracker::incrementProgress(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::FrameLoader **v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  WTF::MonotonicTime *v20;
  double v21;
  double v22;
  double v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  WebCore::Page *v28;
  int v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    v5 = result;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v3 + 16 * v10);
    if (v11 == a2)
    {
LABEL_4:
      v12 = *(_QWORD **)(v3 + 16 * v10 + 8);
      if (v12)
      {
        v13 = *(WebCore::FrameLoader ***)(result + 24);
        if (v13)
        {
          v14 = (unsigned int *)(v13 + 1);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
        v16 = v12[1];
        v17 = *v12 + a3;
        *v12 = v17;
        if (v17 > v16)
        {
          v32 = 2 * v17;
          *(_QWORD *)(v5 + 96) += v32 - v16;
          v12[1] = v32;
        }
        v18 = *(_QWORD *)(v5 + 96)
            + ((uint64_t)(int)WebCore::FrameLoader::numPendingOrLoadingRequests(v13[35], (void *)1) << 14)
            - *(_QWORD *)(v5 + 104);
        if (v18 < 1)
          v19 = 1.0;
        else
          v19 = (double)a3 / (double)v18;
        v20 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v13[35] + 2) + 24))(*((_QWORD *)v13[35] + 2));
        if ((_DWORD)v20)
        {
          v21 = 0.9;
          if (*((_DWORD *)v13[35] + 16) != 4)
            v21 = 0.5;
        }
        else
        {
          v21 = 0.9;
        }
        if (v21 >= *(double *)(v5 + 128) + v19 * (v21 - *(double *)(v5 + 128)))
          v21 = *(double *)(v5 + 128) + v19 * (v21 - *(double *)(v5 + 128));
        *(double *)(v5 + 128) = v21;
        *(_QWORD *)(v5 + 104) += a3;
        WTF::MonotonicTime::now(v20);
        v23 = v22;
        if ((v22 - *(double *)(v5 + 144) >= 0.2 || *(double *)(v5 + 128) == 1.0)
          && *(int *)(v5 + 152) >= 1
          && !*(_BYTE *)(v5 + 160))
        {
          if (*(double *)(v5 + 128) == 1.0)
            *(_BYTE *)(v5 + 160) = 1;
          (*(void (**)(_QWORD, WebCore::FrameLoader **))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v13);
          v28 = *(WebCore::Page **)(*(_QWORD *)(v5 + 8) + 8);
          ++*(_DWORD *)v28;
          WebCore::Page::progressEstimateChanged(v28, (WebCore::LocalFrame *)v13);
          if (*(_DWORD *)v28 == 1)
          {
            WebCore::Page::~Page((uint64_t)v28);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v28;
          }
          *(_QWORD *)(v5 + 120) = *(_QWORD *)(v5 + 128);
          *(double *)(v5 + 144) = v23;
        }
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 24))(*(_QWORD *)(v5 + 16));
        v24 = (unsigned int *)(v13 + 1);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v27 = off_1E31FE290;
          v27[1] = v24;
          v33 = v27;
          WTF::ensureOnMainThread();
          result = (uint64_t)v33;
          if (v33)
            return (*(uint64_t (**)(_QWORD *))(*v33 + 8))(v33);
        }
      }
    }
    else
    {
      v29 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v29) & v6;
        v11 = *(_QWORD *)(v3 + 16 * v10);
        ++v29;
        if (v11 == a2)
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t *WebCore::ProgressTracker::completeProgress(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v19;

  v3 = result + 4;
  v2 = result[4];
  if (v2)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(void **)(v2 + 16 * v9);
    if (v10 != a2)
    {
      v19 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v19) & v5;
        v10 = *(void **)(v2 + 16 * v9);
        ++v19;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v2 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v2 - 4))
    {
      v11 = (_QWORD *)(v2 + 16 * v9);
      v12 = (WTF *)v11[1];
      v4[12] += *(_QWORD *)v12 - *((_QWORD *)v12 + 1);
      *v11 = -1;
      v11[1] = 0;
      result = (uint64_t *)WTF::fastFree(v12, a2);
      ++*(_DWORD *)(v4[4] - 16);
      v13 = v4[4];
      v14 = v13 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *v3;
      if (*v3)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ProgressItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v17 >> 1, 0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::parseEncodedCryptographicDigest@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  _WORD *v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if (result[1])
  {
    v3 = result;
    result = (_QWORD *)WebCore::parseHashAlgorithmAdvancingPosition<char16_t>(result);
    if ((unsigned __int16)result > 0xFFu)
    {
      v4 = v3[1];
      if (v4)
      {
        v5 = (_WORD *)*v3;
        if (*(_WORD *)*v3 == 45)
        {
          *v3 = v5 + 1;
          v3[1] = v4 - 1;
          if (v4 != 1)
          {
            v6 = 0;
            v7 = v5 + 2;
            v8 = v5 + 2;
            while (1)
            {
              v9 = *(v8 - 1);
              if ((v9 - 48) >= 0xA && (v9 | 0x20u) - 97 >= 0x1A)
              {
                v11 = (v9 - 43);
                if (v11 > 0x34)
                  goto LABEL_22;
                if (((1 << (v9 - 43)) & 0x10000000000015) == 0)
                  break;
              }
              *v3 = v7;
              v3[1] = v4 + v6-- - 2;
              ++v8;
              ++v7;
              if (v4 + v6 == 1)
                goto LABEL_21;
            }
            if (v11 == 18)
            {
              v12 = v4 + v6;
              v13 = 2 - v6;
              v14 = v12 - 2;
              *v3 = v7;
              v3[1] = v12 - 2;
              if (v12 == 2)
              {
LABEL_21:
                v16 = (char)result;
                result = (_QWORD *)WTF::String::String();
                *(_BYTE *)a2 = v16;
                *(_QWORD *)(a2 + 8) = v17;
                *(_BYTE *)(a2 + 16) = 1;
                return result;
              }
              v9 = *v8;
            }
            else
            {
LABEL_22:
              v15 = 1 - v6;
              v14 = v4 + v6 - 1;
              v13 = v15;
            }
            if (v9 == 61)
            {
              *v3 = &v5[v13 + 1];
              v3[1] = v14 - 1;
              goto LABEL_21;
            }
            if (v13 != 1)
              goto LABEL_21;
          }
        }
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;

  if (result[1]
    && (v3 = result,
        result = (_QWORD *)WebCore::parseHashAlgorithmAdvancingPosition<unsigned char>(result),
        (unsigned __int16)result > 0xFFu)
    && (v4 = v3[1]) != 0
    && (v5 = (_BYTE *)*v3, *(_BYTE *)*v3 == 45)
    && (*v3 = v5 + 1, v3[1] = v4 - 1, v4 != 1))
  {
    v6 = -2;
    v7 = 1;
    while (1)
    {
      v8 = v5[v7];
      if ((v8 - 48) >= 0xA && (v8 | 0x20u) - 97 >= 0x1A)
      {
        v10 = (v8 - 43);
        if (v10 > 0x34)
          goto LABEL_19;
        if (((1 << (v8 - 43)) & 0x10000000000015) == 0)
          break;
      }
      *v3 = &v5[v7 + 1];
      v3[1] = v4 + v6--;
      if (v4 == ++v7)
        goto LABEL_25;
    }
    if (v10 == 18)
    {
      v11 = v4 + v6;
      v12 = v7 - v4;
      v13 = v7 + 1;
      v14 = &v5[v7];
      *v3 = v14 + 1;
      v3[1] = v11;
      if (v12 == -1)
      {
LABEL_22:
        v15 = (char)result;
        goto LABEL_26;
      }
      v8 = v14[1];
      v7 = v13;
    }
    else
    {
LABEL_19:
      v11 = v4 - v7;
    }
    if (v8 == 61)
    {
      *v3 = &v5[v7 + 1];
      v3[1] = v11 - 1;
      goto LABEL_22;
    }
    if (v7 == 1)
      goto LABEL_24;
LABEL_25:
    v15 = (char)result;
LABEL_26:
    result = (_QWORD *)WTF::String::String();
    *(_BYTE *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v16;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
LABEL_24:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::decodeEncodedResourceCryptographicDigest@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = WTF::base64Decode();
  if (v7)
  {
    *(_BYTE *)a2 = *a1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    result = WTF::base64Decode();
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t WebCore::cryptographicDigestForBytes@<X0>(char a1@<W0>, const void *a2@<X1>, CC_LONG a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  WTF *v9;
  uint64_t result;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  WTF *v14;
  char v15;

  if ((a1 - 1) > 3u)
    v8 = 4;
  else
    v8 = dword_1969F2940[(char)(a1 - 1)];
  PAL::CryptoDigest::create(v8, (uint64_t *)&v14);
  v9 = v14;
  PAL::CryptoDigest::addBytes((uint64_t)v14, a2, a3);
  *(_BYTE *)a4 = a1;
  result = PAL::CryptoDigest::computeHash((uint64_t)v9, (unsigned __int8 **)(a4 + 8));
  if (v9)
  {
    v12 = *(unsigned int **)v9;
    *(_QWORD *)v9 = 0;
    if (v12)
    {
      v13 = v12[4];
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v15, v12 + 2);
      v12[4] = -1;
      WTF::fastFree((WTF *)v12, v11);
    }
    return WTF::fastFree(v9, v11);
  }
  return result;
}

uint64_t WebCore::cryptographicDigestForSharedBuffer@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  void *v10;
  WTF *v11;
  unsigned int *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF *v15;

  if ((a1 - 1) > 3u)
    v6 = 4;
  else
    v6 = dword_1969F2940[(char)(a1 - 1)];
  PAL::CryptoDigest::create(v6, (uint64_t *)&v15);
  if (a2)
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E33F6E50;
    v7[1] = &v15;
    v14 = v7;
    WebCore::FragmentedSharedBuffer::forEachSegment(a2, &v14);
    v8 = v14;
    v14 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  *(_BYTE *)a3 = a1;
  result = PAL::CryptoDigest::computeHash((uint64_t)v15, (unsigned __int8 **)(a3 + 8));
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    v12 = *(unsigned int **)v11;
    *(_QWORD *)v11 = 0;
    if (v12)
    {
      v13 = v12[4];
      if ((_DWORD)v13 != -1)
        ((void (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v14, v12 + 2);
      v12[4] = -1;
      WTF::fastFree((WTF *)v12, v10);
    }
    return WTF::fastFree(v11, v10);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::readResourceType(const char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  _BOOL4 v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  _BOOL4 v12;
  char v14;
  char v16;
  BOOL v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  char v21;
  char v22;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v28;
  uint16x8_t v29;

  if (a1 != "document" && (_DWORD)a2 == 8)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 100 && *(_DWORD *)(a1 + 1) == 1836409711)
      {
        v3 = 1;
        if (*((_DWORD *)a1 + 1) == 1953391981)
          goto LABEL_10;
        v5 = 0;
        v6 = 1;
        goto LABEL_30;
      }
    }
    else if (*(_WORD *)a1 == 100)
    {
      v5 = 0;
      v6 = 1;
      if (*(_QWORD *)(a1 + 2) == 0x6D00750063006FLL && *((_QWORD *)a1 + 1) == 0x74006E0065006DLL)
        goto LABEL_13;
      goto LABEL_30;
    }
    v5 = 0;
    v6 = 1;
LABEL_30:
    v7 = 0;
    v8 = a1 == "script";
    goto LABEL_31;
  }
  if (a1 == "document" && (_DWORD)a2 == 8)
  {
LABEL_13:
    v4 = 0x100000000;
    v3 = 1;
    return v3 | v4;
  }
  v5 = (_DWORD)a2 == 5;
  v6 = (_DWORD)a2 != 5;
  if (a1 != "image" && (_DWORD)a2 == 5)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 105 && *(_WORD *)(a1 + 1) == 24941 && *(_WORD *)(a1 + 3) == 25959)
      {
LABEL_21:
        v4 = 0x100000000;
        v3 = 2;
        return v3 | v4;
      }
    }
    else if (*(_WORD *)a1 == 105 && *(_QWORD *)(a1 + 2) == 0x6500670061006DLL)
    {
      goto LABEL_21;
    }
    v6 = 0;
    goto LABEL_30;
  }
  if (a1 == "image" && (_DWORD)a2 == 5)
    goto LABEL_21;
  if (a1 != "style-sheet" && (_DWORD)a2 == 11)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 115 && *(_QWORD *)(a1 + 1) == 0x6568732D656C7974)
      {
        if (*(_QWORD *)(a1 + 3) == 0x74656568732D656CLL)
        {
LABEL_202:
          v4 = 0x100000000;
          v3 = 4;
          return v3 | v4;
        }
LABEL_222:
        v9 = 0;
        v10 = 1;
        goto LABEL_41;
      }
      goto LABEL_207;
    }
    if (*(_WORD *)a1 != 115)
    {
LABEL_207:
      v9 = 0;
      goto LABEL_208;
    }
    v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F28D0);
    v28.i16[0] = vminvq_u16(v28);
    v9 = v28.i8[0];
    if (!v28.i32[0])
    {
LABEL_208:
      v10 = 1;
      goto LABEL_63;
    }
    v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1969F28E0);
    v29.i16[0] = vminvq_u16(v29);
    if (v29.i32[0])
      goto LABEL_202;
    goto LABEL_30;
  }
  if (a1 == "style-sheet" && (_DWORD)a2 == 11)
    goto LABEL_202;
  v7 = (_DWORD)a2 == 6;
  v8 = a1 == "script";
  if (a1 != "script" && (_DWORD)a2 == 6)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 115 && *(_DWORD *)(a1 + 1) == 1885958755 && *(_DWORD *)(a1 + 2) == 1953524082)
        goto LABEL_33;
    }
    else if (*(_WORD *)a1 == 115)
    {
      v9 = 0;
      v10 = 1;
      if (*(_QWORD *)(a1 + 2) == 0x70006900720063 && *(_QWORD *)(a1 + 4) == 0x74007000690072)
        goto LABEL_33;
      goto LABEL_41;
    }
    goto LABEL_222;
  }
LABEL_31:
  if (v8 && v7)
  {
LABEL_33:
    v4 = 0x100000000;
    v3 = 8;
    return v3 | v4;
  }
  v9 = (_DWORD)a2 == 4;
  v10 = (_DWORD)a2 != 4;
  if (a1 != "font" && (_DWORD)a2 == 4)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 102 || *(_WORD *)(a1 + 1) != 28271 || *((_WORD *)a1 + 1) != 29806)
        goto LABEL_40;
    }
    else
    {
      if (*(_WORD *)a1 != 102)
      {
LABEL_40:
        v10 = 0;
LABEL_41:
        v11 = 0;
        v12 = a1 == "websocket";
        goto LABEL_42;
      }
      v10 = 0;
      if (*(_DWORD *)(a1 + 2) != 7209071 || *((_DWORD *)a1 + 1) != 7602286)
        goto LABEL_41;
    }
LABEL_47:
    v4 = 0x100000000;
    v3 = 16;
    return v3 | v4;
  }
  if (a1 == "font" && (_DWORD)a2 == 4)
    goto LABEL_47;
  if (a1 != "raw" && (_DWORD)a2 == 3)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 114 || *(_WORD *)(a1 + 1) != 30561)
        goto LABEL_63;
    }
    else if (*(_WORD *)a1 != 114 || *(_DWORD *)(a1 + 2) != 7798881)
    {
      goto LABEL_63;
    }
LABEL_56:
    v4 = 0x100000000;
    v3 = 3840;
    return v3 | v4;
  }
  if (a1 == "raw" && (_DWORD)a2 == 3)
    goto LABEL_56;
  v11 = (_DWORD)a2 == 9;
  v12 = a1 == "websocket";
  if (a1 != "websocket" && (_DWORD)a2 == 9)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 119 && *(_DWORD *)(a1 + 1) == 1869832805 && *(_DWORD *)(a1 + 5) == 1952803683)
        goto LABEL_44;
    }
    else if (*(_WORD *)a1 == 119)
    {
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F28F0);
      v18.i16[0] = vminvq_u16(v18);
      if (v18.i32[0])
        goto LABEL_44;
    }
    goto LABEL_63;
  }
LABEL_42:
  if (v12 && v11)
  {
LABEL_44:
    v4 = 0x100000000;
    v3 = 1024;
    return v3 | v4;
  }
LABEL_63:
  if (a1 != "fetch" && !v6)
  {
    if ((_DWORD)a2)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 != 102 || *(_WORD *)(a1 + 1) != 29797 || *(_WORD *)(a1 + 3) != 26723)
          goto LABEL_82;
      }
      else if (*(_WORD *)a1 != 102 || *(_QWORD *)(a1 + 2) != 0x68006300740065)
      {
        goto LABEL_82;
      }
    }
LABEL_75:
    v4 = 0x100000000;
    v3 = 512;
    return v3 | v4;
  }
  if (a1 == "fetch" && v5)
    goto LABEL_75;
LABEL_82:
  v3 = 67840;
  v14 = a1 == "other" || v6;
  if ((v14 & 1) != 0)
  {
    if (a1 == "other" && v5)
      goto LABEL_10;
    goto LABEL_96;
  }
  if (!(_DWORD)a2)
    goto LABEL_10;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 == 111 && *(_QWORD *)(a1 + 2) == 0x72006500680074)
      goto LABEL_10;
LABEL_96:
    if (a1 == "svg-document" || (_DWORD)a2 != 12)
    {
      if (a1 == "svg-document" && (_DWORD)a2 == 12)
        goto LABEL_112;
    }
    else if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 115 && *(_QWORD *)(a1 + 1) == 0x6D75636F642D6776)
      {
        if (*(_QWORD *)(a1 + 4) != 0x746E656D75636F64)
        {
          v16 = a1 == "media" || v6;
          v17 = a1 == "media" && v5;
          if ((v16 & 1) != 0)
            goto LABEL_138;
          goto LABEL_134;
        }
LABEL_112:
        v4 = 0x100000000;
        v3 = 32;
        return v3 | v4;
      }
    }
    else if (*(_WORD *)a1 == 115)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F2900);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969F2910);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
          goto LABEL_112;
      }
    }
    v21 = a1 == "media" || v6;
    v17 = a1 == "media" && v5;
    if ((v21 & 1) != 0)
    {
LABEL_138:
      if (v17)
        goto LABEL_139;
LABEL_142:
      if (a1 == "popup")
        v6 = 1;
      if (v6)
      {
        if (a1 != "popup")
          v5 = 0;
        if (!v5)
        {
LABEL_157:
          v22 = a1 == "ping" || v10;
          if ((v22 & 1) != 0)
          {
            if (a1 == "ping" && v9)
              goto LABEL_171;
          }
          else
          {
            if (!(_DWORD)a2)
              goto LABEL_171;
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 != 112 || *(_WORD *)(a1 + 1) != 28265 || *((_WORD *)a1 + 1) != 26478)
                goto LABEL_175;
LABEL_171:
              v4 = 0x100000000;
              v3 = 256;
              return v3 | v4;
            }
            if (*(_WORD *)a1 == 112 && *(_DWORD *)(a1 + 2) == 7209065 && *((_DWORD *)a1 + 1) == 6750318)
              goto LABEL_171;
          }
LABEL_175:
          if (a1 == "csp-report" || (_DWORD)a2 != 10)
          {
            if ((_DWORD)a2 != 10 || a1 != "csp-report")
              goto LABEL_191;
          }
          else if ((a2 & 0xFF00000000) != 0)
          {
            if (*a1 != 99 || *(_QWORD *)(a1 + 1) != 0x726F7065722D7073 || *(_QWORD *)(a1 + 2) != 0x74726F7065722D70)
            {
LABEL_191:
              v4 = 0;
              goto LABEL_192;
            }
          }
          else
          {
            if (*(_WORD *)a1 != 99)
              goto LABEL_191;
            v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F2920);
            v25.i16[0] = vminvq_u16(v25);
            if (!v25.i32[0])
              goto LABEL_191;
            v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F2930);
            v26.i16[0] = vminvq_u16(v26);
            if (!v26.i32[0])
              goto LABEL_191;
          }
          v4 = 0x100000000;
LABEL_192:
          v3 = 0x10000;
          return v3 | v4;
        }
      }
      else if ((_DWORD)a2)
      {
        if ((a2 & 0xFF00000000) != 0)
        {
          if (*a1 != 112 || *(_WORD *)(a1 + 1) != 28783 || *(_WORD *)(a1 + 3) != 28789)
            goto LABEL_157;
        }
        else if (*(_WORD *)a1 != 112 || *(_QWORD *)(a1 + 2) != 0x7000750070006FLL)
        {
          goto LABEL_157;
        }
      }
      v4 = 0x100000000;
      v3 = 128;
      return v3 | v4;
    }
    if (!(_DWORD)a2)
    {
LABEL_139:
      v4 = 0x100000000;
      v3 = 64;
      return v3 | v4;
    }
    if ((a2 & 0xFF00000000) == 0)
    {
      if (*(_WORD *)a1 == 109 && *(_QWORD *)(a1 + 2) == 0x61006900640065)
        goto LABEL_139;
      goto LABEL_142;
    }
LABEL_134:
    if (*a1 == 109 && *(_WORD *)(a1 + 1) == 25701 && *(_WORD *)(a1 + 3) == 24937)
      goto LABEL_139;
    goto LABEL_142;
  }
  if (*a1 != 111 || *(_WORD *)(a1 + 1) != 26740 || *(_WORD *)(a1 + 3) != 29285)
    goto LABEL_96;
LABEL_10:
  v4 = 0x100000000;
  return v3 | v4;
}

uint64_t WebCore::ResourceLoadNotifier::didReceiveAuthenticationChallenge(WebCore::ResourceLoadNotifier *this, WebCore::ResourceLoader *a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = *((_QWORD *)a2 + 93);
  v5 = *((_QWORD *)a2 + 5);
  v6 = *(_QWORD *)(*(_QWORD *)this + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v6 + 280);
  ++*(_DWORD *)v9;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const WebCore::AuthenticationChallenge *))(**(_QWORD **)(v9 + 16) + 112))(*(_QWORD *)(v9 + 16), v5, v4, a3);
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195F10C58);
  }
  --*(_DWORD *)v9;
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, v7);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v7;
    v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    result = v14;
    if (v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

void WebCore::ResourceLoadNotifier::willSendRequest(WebCore::ResourceLoadNotifier *this, WebCore::ResourceLoader *a2, WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FrameLoader *v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::InspectorPageAgent *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  _QWORD *v32;
  unsigned int **v33;

  v8 = *(_QWORD *)(*(_QWORD *)this + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(WebCore::FrameLoader **)(v8 + 280);
  ++*(_DWORD *)v11;
  WebCore::FrameLoader::applyUserAgentIfNeeded(v11, a3);
  if (!*(_DWORD *)v11)
  {
    __break(0xC471u);
    JUMPOUT(0x195F10DE0);
  }
  --*(_DWORD *)v11;
  do
  {
    v12 = __ldaxr(v9);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v9));
  if (!v13)
  {
    atomic_store(1u, v9);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v9;
    v32 = v19;
    WTF::ensureOnMainThread();
    v20 = v32;
    v32 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  v14 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v14)
    ++v14[6];
  v15 = (const WTF::StringImpl *)*((_QWORD *)a2 + 93);
  v16 = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 280))(a2);
  if (!v16)
    goto LABEL_10;
  v21 = v16;
  v22 = *(unsigned int **)(v16 + 8);
  if (v22)
    goto LABEL_36;
  v26 = v21;
  v22 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v22 = 1;
  *((_QWORD *)v22 + 1) = v26;
  v28 = *(unsigned int **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v22;
  if (!v28)
    goto LABEL_36;
  do
  {
    v29 = __ldaxr(v28);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v28));
  if (!v30)
  {
    atomic_store(1u, v28);
    WTF::fastFree((WTF *)v28, v27);
  }
  v22 = *(unsigned int **)(v26 + 8);
  if (v22)
  {
LABEL_36:
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    v31 = v22;
    v24 = *((_QWORD *)v22 + 1);
    if (v24
      && ((v33 = &v31, ++*(_DWORD *)(v24 + 548), (v25 = *(_QWORD *)(v24 + 488)) == 0)
       || !*(_QWORD *)(v25 + 8)
       || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v24 + 464), (uint64_t *)&v33, (uint64_t)&v32), (v22 = v31) != 0)))
    {
      v17 = (WebCore::InspectorPageAgent *)*((_QWORD *)v22 + 1);
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
LABEL_10:
    v17 = 0;
    v31 = 0;
  }
  WebCore::ResourceLoadNotifier::dispatchWillSendRequest((uint64_t)this, (uint64_t)v14, v15, a3, a4, v17, (WTF::StringImpl **)a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v31, v18);
  if (v14)
  {
    if (v14[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
    else
      --v14[6];
  }
}

uint64_t WebCore::ResourceLoadNotifier::dispatchWillSendRequest(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, WebCore::ResourceRequest *this, WebCore::ResourceLoader *a5, WebCore::InspectorPageAgent *a6, WTF::StringImpl **a7)
{
  char v14;
  uint64_t result;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  char v23;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  _DWORD *v26;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Inspector::InspectorDebuggerAgent **v33;
  _QWORD *v34;
  WTF::StringImpl **v35;
  _QWORD v36[3];

  v14 = *((_BYTE *)this + 184);
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v14 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v14;
    if ((v14 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v14 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v14;
    }
  }
  if (!*(_QWORD *)this)
    goto LABEL_7;
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WTF::URL::protocolIs();
  if ((result & 1) == 0)
  {
    v14 = *((_BYTE *)this + 184);
LABEL_7:
    v35 = a7;
    if ((v14 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v16 = *(WTF **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v16 += 2;
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 280) + 88);
    if (v20)
    {
      ++v20[6];
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)(v20 + 670), (WTF::StringImpl **)this, a3, (uint64_t)v36);
      if (v20[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 24))(v20);
      else
        --v20[6];
    }
    v21 = *(_QWORD *)(v17 + 280);
    ++*(_DWORD *)v21;
    result = (*(uint64_t (**)(_QWORD, uint64_t, const WTF::StringImpl *, WebCore::ResourceRequest *, WebCore::ResourceLoader *))(**(_QWORD **)(v21 + 16) + 96))(*(_QWORD *)(v21 + 16), a2, a3, this, a5);
    if (!*(_DWORD *)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195F11164);
    }
    --*(_DWORD *)v21;
    v23 = *((_BYTE *)this + 184);
    if ((v23 & 1) == 0)
    {
      result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v23 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v23;
      if ((v23 & 1) == 0)
      {
        result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v23 = *((_BYTE *)this + 184) | 1;
        *((_BYTE *)this + 184) = v23;
      }
    }
    v24 = *(const WTF::StringImpl **)this;
    if (*(_QWORD *)this)
    {
      if ((v23 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
        v24 = *(const WTF::StringImpl **)this;
      }
      result = WTF::equal(v16, v24, v22);
      if ((result & 1) == 0)
      {
        v26 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 280) + 88);
        if (v26)
        {
          ++v26[6];
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
            result = (uint64_t)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)(v26 + 670), (WTF::StringImpl **)this, v25, (uint64_t)v36);
          if (v26[6] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 24))(v26);
          else
            --v26[6];
        }
      }
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v30 = *(_QWORD *)(v17 + 24);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v31 + 80) + 8);
          result = *(_QWORD *)(v32 + 192);
          if (result)
            result = WebCore::InspectorNetworkAgent::willSendRequest(result, a3, a2, this, a5, a6, v35);
          v33 = *(Inspector::InspectorDebuggerAgent ***)(v32 + 144);
          if (v33 && (*((_BYTE *)this + 147) & 0xFE) != 2)
          {
            if ((*((_BYTE *)this + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest(this);
              *((_BYTE *)this + 184) |= 1u;
            }
            result = (uint64_t)WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v33, this);
          }
        }
      }
    }
    do
    {
      v28 = __ldaxr(v18);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v18));
    if (!v29)
    {
      atomic_store(1u, v18);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E31FE290;
      v34[1] = v18;
      v36[0] = v34;
      WTF::ensureOnMainThread();
      result = v36[0];
      v36[0] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        return WTF::StringImpl::destroy(v16, v24);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return result;
}

void WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;

  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(v9 + 280);
  ++*(_DWORD *)v12;
  (*(void (**)(_QWORD, uint64_t, Inspector::IdentifiersFactory *, uint64_t))(**(_QWORD **)(v12 + 16) + 136))(*(_QWORD *)(v12 + 16), a2, a3, a4);
  if (!*(_DWORD *)v12)
  {
    __break(0xC471u);
    JUMPOUT(0x195F11408);
  }
  --*(_DWORD *)v12;
  v13 = *(_QWORD *)(v9 + 24);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 80) + 8);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 8) + 16))(*(_QWORD *)(v15 + 8)))
      {
        v19 = *(WTF::StringImpl **)(v15 + 192);
        if (v19)
          WebCore::InspectorNetworkAgent::didReceiveResponse(v19, a3, a2, a4, a5);
        v20 = *(_QWORD *)(v15 + 16);
        if (v20)
          WebCore::WebConsoleAgent::didReceiveResponse(v20, (uint64_t)a3, a4);
      }
    }
  }
  do
  {
    v16 = __ldaxr(v10);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v10));
  if (!v17)
  {
    atomic_store(1u, v10);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v10;
    v21 = v18;
    WTF::ensureOnMainThread();
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  }
}

uint64_t WebCore::ResourceLoadNotifier::didReceiveData(WebCore::ResourceLoadNotifier *this, WebCore::ResourceLoader *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t result;
  WTF *v11;
  void *v12;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v8 = *(_DWORD **)(v7 + 128);
      ++*v8;
      WebCore::ProgressTracker::incrementProgress((uint64_t)v8, *((_QWORD *)a2 + 93), *((_DWORD *)a3 + 12));
      if (!*v8)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*v8;
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  v9 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (!v9)
    return (uint64_t)WebCore::ResourceLoadNotifier::dispatchDidReceiveData((uint64_t)this, 0, *((Inspector::IdentifiersFactory **)a2 + 93), (uint64_t)a3, *((unsigned int *)a3 + 12));
  ++v9[6];
  result = (uint64_t)WebCore::ResourceLoadNotifier::dispatchDidReceiveData((uint64_t)this, (uint64_t)v9, *((Inspector::IdentifiersFactory **)a2 + 93), (uint64_t)a3, *((unsigned int *)a3 + 12));
  if (v9[6] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
  --v9[6];
  return result;
}

WTF::StringImpl *WebCore::ResourceLoadNotifier::dispatchDidReceiveData(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 280);
  ++*(_DWORD *)v10;
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, Inspector::IdentifiersFactory *, uint64_t))(**(_QWORD **)(v10 + 16) + 144))(*(_QWORD *)(v10 + 16), a2, a3, a5);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195F116ACLL);
  }
  --*(_DWORD *)v10;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v15 = *(_QWORD *)(v7 + 24);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        result = WebCore::InspectorInstrumentation::didReceiveDataImpl(*(_QWORD *)(*(_QWORD *)(v16 + 80) + 8), a3, a4);
    }
  }
  do
  {
    v13 = __ldaxr(v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v8));
  if (!v14)
  {
    atomic_store(1u, v8);
    v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v17 = off_1E31FE290;
    *((_QWORD *)v17 + 1) = v8;
    v18 = v17;
    WTF::ensureOnMainThread();
    result = v18;
    if (v18)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

uint64_t WebCore::ResourceLoadNotifier::didFinishLoad(WebCore::ResourceLoadNotifier *this, void **a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t result;
  WTF *v11;
  void *v12;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v8 = *(uint64_t **)(v7 + 128);
      ++*(_DWORD *)v8;
      WebCore::ProgressTracker::completeProgress(v8, a2[93]);
      if (!*(_DWORD *)v8)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v8;
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  v9 = a2[5];
  if (!v9)
    return (uint64_t)WebCore::ResourceLoadNotifier::dispatchDidFinishLoading((uint64_t)this, 0, (Inspector::IdentifiersFactory *)a2[93], (uint64_t)a3);
  ++v9[6];
  result = (uint64_t)WebCore::ResourceLoadNotifier::dispatchDidFinishLoading((uint64_t)this, (uint64_t)v9, (Inspector::IdentifiersFactory *)a2[93], (uint64_t)a3);
  if (v9[6] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
  --v9[6];
  return result;
}

uint64_t *WebCore::ResourceLoadNotifier::dispatchDidFinishLoading(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 280);
  ++*(_DWORD *)v10;
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, Inspector::IdentifiersFactory *))(**(_QWORD **)(v10 + 16)
                                                                                                  + 152))(*(_QWORD *)(v10 + 16), a2, a3);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195F11944);
  }
  --*(_DWORD *)v10;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v15 = *(_QWORD *)(v7 + 24);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        result = WebCore::InspectorInstrumentation::didFinishLoadingImpl(*(_QWORD *)(*(_QWORD *)(v16 + 80) + 8), a3, a2, a4);
    }
  }
  do
  {
    v13 = __ldaxr(v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v8));
  if (!v14)
  {
    atomic_store(1u, v8);
    v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v17 = (uint64_t)off_1E31FE290;
    v17[1] = (uint64_t)v8;
    v18 = v17;
    WTF::ensureOnMainThread();
    result = v18;
    if (v18)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v18 + 8))(v18);
  }
  return result;
}

uint64_t *WebCore::ResourceLoadNotifier::didFailToLoad(WebCore::ResourceLoadNotifier *this, void **a2, const WebCore::ResourceError *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)this + 8);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    v7 = *(WebCore::Page **)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v9 = (uint64_t *)*((_QWORD *)v7 + 16);
      ++*(_DWORD *)v9;
      WebCore::ProgressTracker::completeProgress(v9, a2[93]);
      if (!*(_DWORD *)v9)
        goto LABEL_26;
      --*(_DWORD *)v9;
      WTF::RefCounted<WebCore::Page>::deref(v7);
      v5 = *(_QWORD *)(*(_QWORD *)this + 8);
    }
  }
  v10 = (unsigned int *)(v5 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v19 = v5;
  if (*((_BYTE *)a3 + 60))
  {
    v12 = *(_QWORD *)(v5 + 280);
    ++*(_DWORD *)v12;
    v13 = *(_QWORD *)(v12 + 16);
    v14 = a2[5];
    if (v14)
    {
      ++v14[6];
      (*(void (**)(uint64_t, _DWORD *, void *, const WebCore::ResourceError *))(*(_QWORD *)v13 + 160))(v13, v14, a2[93], a3);
      if (v14[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
      else
        --v14[6];
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, void *, const WebCore::ResourceError *))(*(_QWORD *)v13 + 160))(v13, 0, a2[93], a3);
    }
    if (*(_DWORD *)v12)
    {
      --*(_DWORD *)v12;
      goto LABEL_13;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x195F11B94);
  }
LABEL_13:
  v15 = a2[5];
  if (v15)
    ++v15[6];
  if (v5)
  {
    v16 = *(_QWORD *)(v5 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v17 + 80) + 8), (Inspector::IdentifiersFactory *)a2[93], (uint64_t)v15, a3);
    }
  }
  if (v15)
  {
    if (v15[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 24))(v15);
    else
      --v15[6];
  }
  return WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v19);
}

uint64_t WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest(uint64_t a1, uint64_t a2, WebCore::DocumentLoader *this, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  WebCore::DocumentLoader *v18;
  uint64_t v19;

  if (this)
  {
    v16 = WebCore::DocumentLoader::frameLoader(this);
    if (v16)
    {
      v17 = (*(_DWORD *)v16)++;
      if (v17 == -1)
        goto LABEL_18;
      v18 = *(WebCore::DocumentLoader **)(v16 + 96);
      *(_DWORD *)v16 = v17;
      if (v18 == this)
      {
        if (!*(_BYTE *)(a1 + 16))
          *(_BYTE *)(a1 + 16) = 1;
        *(_QWORD *)(a1 + 8) = a2;
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(_QWORD *)(v8 + 280);
  ++*(_DWORD *)v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, WebCore::DocumentLoader *, uint64_t))(**(_QWORD **)(v11 + 16)
                                                                                          + 88))(*(_QWORD *)(v11 + 16), a2, this, a4);
  if (!*(_DWORD *)v11)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x195F11C84);
  }
  --*(_DWORD *)v11;
  do
  {
    v13 = __ldaxr(v9);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v9));
  if (!v14)
  {
    atomic_store(1u, v9);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v9;
    v19 = (uint64_t)v15;
    WTF::ensureOnMainThread();
    result = v19;
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

uint64_t WebCore::ResourceLoadNotifier::dispatchDidFailLoading(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *a3, WebCore::ResourceError *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 280);
  ++*(_DWORD *)v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t, Inspector::IdentifiersFactory *, WebCore::ResourceError *))(**(_QWORD **)(v10 + 16) + 160))(*(_QWORD *)(v10 + 16), a2, a3, a4);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195F11E1CLL);
  }
  --*(_DWORD *)v10;
  v12 = *(_QWORD *)(v7 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      result = WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8), a3, a2, a4);
  }
  do
  {
    v14 = __ldaxr(v8);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v8));
  if (!v15)
  {
    atomic_store(1u, v8);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v8;
    v17 = v16;
    WTF::ensureOnMainThread();
    result = (uint64_t)v17;
    if (v17)
      return (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *a3, WebCore::ResourceRequest *this, uint64_t a5, uint64_t a6, uint64_t a7, int a8, WebCore::ResourceError *a9)
{
  char v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *result;
  _OWORD v20[5];
  WTF::StringImpl *v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v16 = *((_BYTE *)this + 184);
  if ((v16 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v16 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v16;
  }
  if ((v16 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (!*(_QWORD *)this)
    return (WTF::StringImpl *)WebCore::ResourceLoadNotifier::dispatchDidFailLoading(a1, a2, a3, a9);
  if ((*(_BYTE *)(a5 + 138) & 1) == 0)
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse(a1, a2, a3, a5, 0);
  if ((int)a7 >= 1)
    WebCore::ResourceLoadNotifier::dispatchDidReceiveData(a1, a2, a3, a6, a7);
  if (*((_BYTE *)a9 + 60))
    return (WTF::StringImpl *)WebCore::ResourceLoadNotifier::dispatchDidFailLoading(a1, a2, a3, a9);
  v22 = 0;
  *(_OWORD *)v21 = 0u;
  memset(v20, 0, sizeof(v20));
  v23 = -1;
  v24 = -1;
  v25 = 0;
  WebCore::ResourceLoadNotifier::dispatchDidFinishLoading(a1, a2, a3, (uint64_t)v20);
  v18 = v25;
  v25 = 0;
  if (v18)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v18, v17);
  result = v21[1];
  v21[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(int a1, WebCore::PCM::AttributionTriggerData *this)
{
  WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = off_1E33F6D40;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = off_1E33F6D40;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return MEMORY[0x19AEA7644](a1, 0xA1C40BD48D6D6);
}

_QWORD *std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E33F6D40;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E33F6D40;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 8);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E31FE290;
      v5[1] = v2;
      v6 = v5;
      WTF::ensureOnMainThread();
      result = (uint64_t)v6;
      if (v6)
        return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = __p[1];
  __p[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E31FE290;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  operator delete(__p);
}

void std::__function::__func<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WebCore::DocumentLoader *::RawPtrTraits<WTF::RefPtr>,WebCore::DocumentLoader *::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_0,std::allocator<WebCore::DocumentLoader *::CompletionHandler<void ()(WebCore::ResourceRequest &,WebCore::DocumentLoader *::WeakPtr<WTF::RefPtr,WebCore::DocumentLoader *::DefaultWeakPtrImpl,WebCore::FormState<WebCore::DocumentLoader *::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)>>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  const WTF::URL *v2;

  if (*a2)
  {
    v2 = *(const WTF::URL **)(*(_QWORD *)(a1 + 8) + 280);
    ++*(_DWORD *)v2;
    WebCore::FrameLoader::reload(v2, 0);
    if (*(_DWORD *)v2)
      --*(_DWORD *)v2;
    else
      __break(0xC471u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = off_1E33F6D88;
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)(a1 + 32));
  v3 = (WTF::StringImpl *)a1[31];
  a1[31] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[30];
  a1[30] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
    else
      --v4[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 4), v2);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = off_1E33F6D88;
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)(a1 + 32));
  v3 = (WTF::StringImpl *)a1[31];
  a1[31] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[30];
  a1[30] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
    else
      --v4[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 4), v2);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_1,void,WebCore::PolicyAction>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FrameLoader *v8;
  int v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  WebCore::Frame *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  WebCore::Frame *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  NSObject *v61;
  WebCore::Frame *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  WTF *v71;
  _BYTE buf[12];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v4 + 24) = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(WebCore::FrameLoader **)(v5 + 280);
    v9 = *(_DWORD *)v8 + 1;
    *(_DWORD *)v8 = v9;
    if (a2)
    {
      if (a2 == 3)
      {
        v34 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *(WebCore::Frame **)(*(_QWORD *)(v4 + 8) + 8);
          WebCore::Frame::pageID(v35);
          if (v37)
            v38 = v36;
          else
            v38 = 0;
          v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 35) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v4;
          v73 = 2048;
          v74 = v38;
          v75 = 2048;
          v76 = v39;
          _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: stopping because policyAction from dispatchDecidePolicyForNavigationAction is LoadWillContinueInAnotherProcess", buf, 0x20u);
        }
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
        v71 = 0;
        v40 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, _BYTE *, WTF **, uint64_t))(*(_QWORD *)v40 + 16))(v40, buf, &v71, 2);
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        v42 = (unsigned int *)v71;
        v71 = 0;
        if (!v42)
          goto LABEL_82;
        do
        {
          v43 = __ldaxr(v42);
          v44 = --v43 == 0;
        }
        while (__stlxr(v43, v42));
      }
      else
      {
        if (a2 != 2)
        {
          if (a2 != 1)
            goto LABEL_23;
          if ((WebCore::FrameLoader::effectiveSandboxFlags(v8) & 0x8000) != 0)
          {
            v58 = *(_QWORD *)(v5 + 296);
            if (v58)
            {
              *(_DWORD *)(v58 + 24) += 2;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::Document::addConsoleMessage((_QWORD *)v58, 8, 2, (WTF::StringImpl **)buf, 0);
              v60 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, v59);
                else
                  *(_DWORD *)v60 -= 2;
              }
              if (*(_DWORD *)(v58 + 24) == 2)
              {
                if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v58, v59);
              }
              else
              {
                *(_DWORD *)(v58 + 24) -= 2;
              }
            }
          }
          else
          {
            WebCore::FrameLoader::setOriginalURLForDownloadRequest(v8, (WebCore::ResourceRequest *)(a1 + 32));
            (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(**((_QWORD **)v8 + 2) + 472))(*((_QWORD **)v8 + 2), a1 + 32, a1 + 248, *(unsigned __int8 *)(a1 + 329));
          }
        }
        v61 = qword_1ECE7C478;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
        {
          v62 = *(WebCore::Frame **)(*(_QWORD *)(v4 + 8) + 8);
          WebCore::Frame::pageID(v62);
          if (v64)
            v65 = v63;
          else
            v65 = 0;
          v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62 + 35) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v4;
          v73 = 2048;
          v74 = v65;
          v75 = 2048;
          v76 = v66;
          _os_log_impl(&dword_1940B8000, v61, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: ignoring because policyAction from dispatchDecidePolicyForNavigationAction is Ignore", buf, 0x20u);
        }
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
        v71 = 0;
        v67 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, _BYTE *, WTF **, uint64_t))(*(_QWORD *)v67 + 16))(v67, buf, &v71, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        v42 = (unsigned int *)v71;
        v71 = 0;
        if (!v42)
          goto LABEL_82;
        do
        {
          v68 = __ldaxr(v42);
          v44 = --v68 == 0;
        }
        while (__stlxr(v68, v42));
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 232)
        || ((*(uint64_t (**)(_QWORD *, uint64_t))(**((_QWORD **)v8 + 2) + 672))(*((_QWORD **)v8 + 2), a1 + 32) & 1) != 0)
      {
        v10 = *(unsigned __int8 *)(a1 + 328);
        v11 = qword_1ECE7C478;
        v12 = os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT);
        if (v10)
        {
          if (!v12)
            goto LABEL_16;
          v26 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
          v27 = *(_QWORD *)(v26 + 24);
          if (v27)
          {
            v27 = *(_QWORD *)(v27 + 8);
            if (v27)
            {
              if (*(_BYTE *)(v27 + 40))
                v27 = *(_QWORD *)(v27 + 32);
              else
                v27 = 0;
            }
          }
          v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v4;
          v73 = 2048;
          v74 = v27;
          v75 = 2048;
          v76 = v28;
          v16 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because this is an ini"
                "tial empty document";
        }
        else
        {
          if (!v12)
          {
LABEL_16:
            v17 = *(_QWORD *)(a1 + 240);
            if (v17)
            {
              v18 = *(_QWORD *)(v17 + 8);
              if (v18)
                goto LABEL_94;
              v18 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v18 = 1;
              *(_QWORD *)(v18 + 8) = v17;
              v54 = *(unsigned int **)(v17 + 8);
              *(_QWORD *)(v17 + 8) = v18;
              if (!v54)
                goto LABEL_94;
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                atomic_store(1u, v54);
                WTF::fastFree((WTF *)v54, v53);
              }
              v18 = *(_QWORD *)(v17 + 8);
              if (v18)
              {
LABEL_94:
                do
                  v57 = __ldaxr((unsigned int *)v18);
                while (__stlxr(v57 + 1, (unsigned int *)v18));
              }
            }
            else
            {
              v18 = 0;
            }
            *(_QWORD *)buf = v18;
            v19 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = 0;
            (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v19 + 16))(v19, a1 + 32, buf, 0);
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v21 = *(unsigned int **)buf;
            *(_QWORD *)buf = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                WTF::fastFree((WTF *)v21, v20);
              }
            }
            goto LABEL_22;
          }
          v13 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v14 = *(_QWORD *)(v14 + 8);
            if (v14)
            {
              if (*(_BYTE *)(v14 + 40))
                v14 = *(_QWORD *)(v14 + 32);
              else
                v14 = 0;
            }
          }
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 280) + 8) + 8) + 32);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v4;
          v73 = 2048;
          v74 = v14;
          v75 = 2048;
          v76 = v15;
          v16 = "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: continuing because this policyAct"
                "ion from dispatchDecidePolicyForNavigationAction is Use";
        }
        _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, v16, buf, 0x20u);
        goto LABEL_16;
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(**((_QWORD **)v8 + 2) + 592))(buf, *((_QWORD **)v8 + 2), a1 + 32);
      WebCore::PolicyChecker::handleUnimplementablePolicy((WebCore::PolicyChecker *)v4, (const WebCore::ResourceError *)buf);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v45);
      v46 = qword_1ECE7C478;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
      {
        v47 = *(WebCore::Frame **)(*(_QWORD *)(v4 + 8) + 8);
        WebCore::Frame::pageID(v47);
        if (!v49)
          v48 = 0;
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v47 + 35) + 8) + 8) + 32);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v4;
        v73 = 2048;
        v74 = v48;
        v75 = 2048;
        v76 = v50;
        _os_log_impl(&dword_1940B8000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] PolicyChecker::checkNavigationPolicy: ignoring because frame loader client can't handle the request", buf, 0x20u);
      }
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
      v71 = 0;
      v51 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, _BYTE *, WTF **, uint64_t))(*(_QWORD *)v51 + 16))(v51, buf, &v71, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v42 = (unsigned int *)v71;
      v71 = 0;
      if (!v42)
      {
LABEL_82:
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v41);
LABEL_22:
        v9 = *(_DWORD *)v8;
LABEL_23:
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195F12C1CLL);
        }
        *(_DWORD *)v8 = v9 - 1;
        do
        {
          v24 = __ldaxr(v6);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v6));
        if (!v25)
        {
          atomic_store(1u, v6);
          v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v69 = off_1E31FE290;
          v69[1] = v6;
          *(_QWORD *)buf = v69;
          WTF::ensureOnMainThread();
          v70 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
        }
        return;
      }
      do
      {
        v52 = __ldaxr(v42);
        v44 = --v52 == 0;
      }
      while (__stlxr(v52, v42));
    }
    if (v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v41);
    }
    goto LABEL_82;
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
  v71 = 0;
  v29 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *, WTF **, uint64_t))(*(_QWORD *)v29 + 16))(v29, buf, &v71, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v31 = (unsigned int *)v71;
  v71 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v30);
    }
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v30);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33F6DB0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33F6DB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNavigationPolicy(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WebCore::DocumentLoader *,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,WTF::WeakPtr<WTF::RefPtr,WTF::DefaultWeakPtrImpl,WebCore::FormState<WTF::CompletionHandler>> &&,WebCore::NavigationPolicyDecision)> &&,WebCore::PolicyDecisionMode)::$_2,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v1 = a1[1];
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v5 = a1[2];
    a1[2] = 0;
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16);
    goto LABEL_6;
  }
  v3 = *(_QWORD *)(v2 + 16);
  v5 = a1[2];
  v4 = a1[3];
  a1[2] = 0;
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16);
  if (v3 != v4)
  {
LABEL_6:
    v7 = v5;
    v8 = 2;
    goto LABEL_7;
  }
  v7 = v5;
  v8 = 0;
LABEL_7:
  v6(v7, v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WTF::AtomString const&,WTF::CompletionHandler<void ()(WebCore::NavigationAction && const&,WTF::WeakPtr<WebCore::ResourceRequest &&,WTF::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E33F6E00;
  WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::ResourceRequest &::AtomString const&,WebCore::ResourceRequest &::CompletionHandler<void ()(WebCore::NavigationAction && const&,WebCore::ResourceRequest &::WeakPtr<WTF,WebCore::ResourceRequest &::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0::~$_0(a1 + 2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WTF::AtomString const&,WTF::CompletionHandler<void ()(WebCore::NavigationAction && const&,WTF::WeakPtr<WebCore::ResourceRequest &&,WTF::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E33F6E00;
  WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::ResourceRequest &::AtomString const&,WebCore::ResourceRequest &::CompletionHandler<void ()(WebCore::NavigationAction && const&,WebCore::ResourceRequest &::WeakPtr<WTF,WebCore::ResourceRequest &::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WebCore::ResourceRequest &::RawPtrTraits<WTF>,WebCore::ResourceRequest &::DefaultRefDerefTraits<WTF>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0::~$_0(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebCore::PolicyChecker::checkNewWindowPolicy(WebCore::NavigationAction &&,WebCore::ResourceRequest &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WTF::AtomString const&,WTF::CompletionHandler<void ()(WebCore::NavigationAction && const&,WTF::WeakPtr<WebCore::ResourceRequest &&,WTF::DefaultWeakPtrImpl,WTF::RefPtr<WebCore::NavigationAction && const>> &&,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::ResourceRequest &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceRequest &&>> &&,WebCore::NavigationAction const&,WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::PolicyAction>::call(_QWORD *a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[5];
  uint64_t v51;
  WTF *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  char v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  WTF *v65;
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      v3 = a1 + 3;
      v4 = a1[28];
      if (!v4)
      {
        v5 = 0;
        goto LABEL_4;
      }
      v41 = a1 + 3;
      v5 = *(_QWORD *)(v4 + 8);
      if (v5
        || (v5 = WTF::fastCompactMalloc((WTF *)0x10),
            *(_DWORD *)v5 = 1,
            *(_QWORD *)(v5 + 8) = v4,
            v42 = *(unsigned int **)(v4 + 8),
            *(_QWORD *)(v4 + 8) = v5,
            !v42))
      {
        v3 = v41;
        do
LABEL_63:
          v45 = __ldaxr((unsigned int *)v5);
        while (__stlxr(v45 + 1, (unsigned int *)v5));
        goto LABEL_4;
      }
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      v3 = v41;
      if (!v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v41);
        v3 = v41;
      }
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        goto LABEL_63;
LABEL_4:
      v66 = (WTF::StringImpl *)v5;
      v6 = a1[142];
      a1[142] = 0;
      (*(void (**)(uint64_t, _QWORD *, WTF::StringImpl **, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v3, &v66, a1 + 29, a1 + 30, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v8 = (unsigned int *)v66;
      v66 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v7);
        }
      }
      return;
    case 1:
      v11 = WebCore::FrameLoader::effectiveSandboxFlags(*(WebCore::FrameLoader **)(a1[2] + 280));
      v12 = a1[2];
      if (v11 < 0)
      {
        v29 = *(_QWORD *)(v12 + 296);
        if (v29)
        {
          *(_DWORD *)(v29 + 24) += 2;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WebCore::Document::addConsoleMessage((_QWORD *)v29, 8, 2, &v66, 0);
          v31 = v66;
          v66 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(v12 + 280);
        ++*(_DWORD *)v13;
        v14 = *(_QWORD *)(v13 + 16);
        v66 = 0;
        (*(void (**)(uint64_t, _QWORD *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v14 + 472))(v14, a1 + 3, &v66, 0);
        v16 = v66;
        v66 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (!*(_DWORD *)v13)
        {
          __break(0xC471u);
          JUMPOUT(0x195F1346CLL);
        }
        --*(_DWORD *)v13;
      }
      goto LABEL_33;
    case 2:
LABEL_33:
      v66 = 0;
      WTF::URL::invalidate((WTF::URL *)&v66);
      v32 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      v47 = v32;
      v48 = v67;
      v49 = v68;
      v50[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v50);
      v51 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v52 = v65;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0x10000;
      v34 = v57 & 0x80 | 4;
      v57 = v34;
      v58 = 0;
      v35 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v35 += 2;
        v34 = v57;
      }
      v59 = v35;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = v63 & 0xE0 | 5;
      v57 = v34 | 2;
      v36 = v66;
      v66 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v33);
        else
          *(_DWORD *)v36 -= 2;
      }
      v64 = 0;
      v65 = 0;
      v46 = 0;
      WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)&v66);
      v37 = a1[142];
      a1[142] = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v37 + 16))(v37, &v47, &v65, &v46, &v66, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)&v66, v38);
      v39 = v46;
      v46 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v24);
        else
          *(_DWORD *)v39 -= 2;
      }
      v26 = (unsigned int *)v65;
      v65 = 0;
      if (!v26)
        goto LABEL_47;
      do
      {
        v40 = __ldaxr(v26);
        v28 = --v40 == 0;
      }
      while (__stlxr(v40, v26));
      goto LABEL_45;
    case 3:
      v66 = 0;
      WTF::URL::invalidate((WTF::URL *)&v66);
      v17 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      v47 = v17;
      v48 = v67;
      v49 = v68;
      v50[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v50);
      v51 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v52 = v65;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0x10000;
      v19 = v57 & 0x80 | 4;
      v57 = v19;
      v58 = 0;
      v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v20 += 2;
        v19 = v57;
      }
      v59 = v20;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = v63 & 0xE0 | 5;
      v57 = v19 | 2;
      v21 = v66;
      v66 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      v64 = 0;
      v65 = 0;
      v46 = 0;
      WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)&v66);
      v22 = a1[142];
      a1[142] = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v22 + 16))(v22, &v47, &v65, &v46, &v66, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)&v66, v23);
      v25 = v46;
      v46 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = (unsigned int *)v65;
      v65 = 0;
      if (!v26)
        goto LABEL_47;
      do
      {
        v27 = __ldaxr(v26);
        v28 = --v27 == 0;
      }
      while (__stlxr(v27, v26));
LABEL_45:
      if (v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v24);
      }
LABEL_47:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v47, v24);
      return;
    default:
      return;
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ProgressItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t *result;
  int v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          if (*(_QWORD *)(v17 + 16 * v22))
          {
            v29 = 1;
            do
              v22 = ((_DWORD)v22 + v29++) & v18;
            while (*(_QWORD *)(v17 + 16 * v22));
          }
          v23 = (uint64_t *)(v17 + 16 * v22);
          v24 = (WTF *)v23[1];
          v23[1] = 0;
          if (v24)
            WTF::fastFree(v24, v10);
          *v23 = *v13;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v27 = *(WTF **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
            WTF::fastFree(v27, v10);
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::fastFree(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::parseHashAlgorithmAdvancingPosition<char16_t>(_QWORD *a1)
{
  unint64_t v1;
  _WORD *v2;
  unint64_t v3;
  int v4;
  int v5;

  v1 = a1[1];
  if (v1 < 6)
    goto LABEL_20;
  v2 = (_WORD *)*a1;
  v3 = v1 - 6;
  if ((*(_WORD *)*a1 & 0xFFDF) != 0x53 || (v2[1] & 0xFFDF) != 0x48)
    goto LABEL_20;
  if ((v2[2] & 0xFFDF) != 0x41 || (v2[3] & 0xFFDF) != 0x12 || (v2[4] & 0xFFDF) != 0x15 || (v2[5] & 0xFFDF) != 0x16)
  {
    if ((v2[2] & 0xFFDF) == 0x41 && (v2[3] & 0xFFDF) == 0x13 && (v2[4] & 0xFFDF) == 0x18 && (v2[5] & 0xFFDF) == 0x14)
    {
      v4 = 2;
      goto LABEL_19;
    }
    if ((v2[2] & 0xFFDF) == 0x41 && (v2[3] & 0xFFDF) == 0x15 && (v2[4] & 0xFFDF) == 0x11 && (v2[5] & 0xFFDF) == 0x12)
    {
      v4 = 4;
      goto LABEL_19;
    }
LABEL_20:
    v4 = 0;
    v5 = 0;
    return v4 | (v5 << 8);
  }
  v4 = 1;
LABEL_19:
  *a1 = v2 + 6;
  a1[1] = v3;
  v5 = 1;
  return v4 | (v5 << 8);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::cryptographicDigestForSharedBuffer(WebCore::ResourceCryptographicDigest::Algorithm,WebCore::FragmentedSharedBuffer const*)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1, const void *a2, CC_LONG a3)
{
  return PAL::CryptoDigest::addBytes(**(_QWORD **)(a1 + 8), a2, a3);
}

void WebCore::ResourceLoadObserver::statisticsForURL(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ResourceLoadObserver::updateCentralStatisticsStore(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::ResourceLoadObserver::hasStatistics(WebCore::ResourceLoadObserver *this)
{
  return 0;
}

uint64_t WebCore::ResourceLoadObserver::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::ResourceLoadObserver::hasCrossPageStorageAccess()
{
  return 0;
}

uint64_t WebCore::ResourceLoadObserver::hasHadUserInteraction()
{
  return 0;
}

WTF::StringImpl *WebCore::ResourceLoadStatistics::encode(WebCore::ResourceLoadStatistics *this, WebCore::KeyedEncoder *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  _QWORD *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *result;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, WebCore::ResourceLoadStatistics *))(*(_QWORD *)a2 + 80))(a2, &v79, this);
  v5 = v79;
  v79 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, double))(*(_QWORD *)a2 + 72))(a2, &v78, *((double *)this + 1));
  v7 = v78;
  v78 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v78, *((unsigned __int8 *)this + 16));
  v9 = v78;
  v78 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, double))(*(_QWORD *)a2 + 72))(a2, &v78, *((double *)this + 3));
  v11 = v78;
  v78 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v78, *((unsigned __int8 *)this + 32));
  v13 = v78;
  v78 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 5);
  v15 = v77;
  v77 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v78;
  v78 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 6);
  v18 = v77;
  v77 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v78;
  v78 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 8);
  v21 = v77;
  v77 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v78;
  v78 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 9);
  v24 = v77;
  v77 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v78;
  v78 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v78, *((unsigned __int8 *)this + 80));
  v27 = v78;
  v78 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 11);
  v29 = v77;
  v77 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v78;
  v78 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 12);
  v32 = v77;
  v77 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v78;
  v78 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 13);
  v35 = v77;
  v77 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v78;
  v78 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v34);
    else
      *(_DWORD *)v36 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 14);
  v38 = v77;
  v77 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v78;
  v78 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v37);
    else
      *(_DWORD *)v39 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 15);
  v41 = v77;
  v77 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v78;
  v78 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v78, *((unsigned __int8 *)this + 128));
  v44 = v78;
  v78 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v78, *((unsigned __int8 *)this + 129));
  v46 = v78;
  v78 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v78, *((unsigned int *)this + 33));
  v48 = v78;
  v78 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v78, *((unsigned int *)this + 34));
  v50 = v78;
  v78 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v78, *((unsigned int *)this + 35));
  v52 = v78;
  v78 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v51);
    else
      *(_DWORD *)v52 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WebCore::encodeFontHashSet((uint64_t)a2, (uint64_t)&v78, (_QWORD **)this + 19);
  v54 = v78;
  v78 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WebCore::encodeFontHashSet((uint64_t)a2, (uint64_t)&v78, (_QWORD **)this + 20);
  v56 = v78;
  v78 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v55);
    else
      *(_DWORD *)v56 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v79;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  WebCore::encodeHashSet((uint64_t)a2, (uint64_t)&v78, (const WTF::StringImpl *)&v77, (WTF ***)this + 18);
  v58 = v77;
  v77 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v57);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v78;
  v78 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v57);
    else
      *(_DWORD *)v59 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v77 = v79;
  v60 = (_QWORD *)((char *)this + 168);
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **))(*(_QWORD *)a2 + 96))(a2, &v77);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 24))(a2, &v79, *((unsigned __int8 *)this + 176));
  v62 = v79;
  v79 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 21);
  v65 = v64;
  if (*v60)
    v66 = *v60 + 8 * *(unsigned int *)(*v60 - 4);
  else
    v66 = 0;
  (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **))(*(_QWORD *)a2 + 112))(a2, &v78);
  if ((_QWORD *)v66 != v63)
  {
    do
    {
      (*(void (**)(WebCore::KeyedEncoder *))(*(_QWORD *)a2 + 120))(a2);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **, _QWORD *))(*(_QWORD *)a2 + 80))(a2, &v79, v63);
      v68 = v79;
      v79 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v67);
        else
          *(_DWORD *)v68 -= 2;
      }
      (*(void (**)(WebCore::KeyedEncoder *))(*(_QWORD *)a2 + 128))(a2);
      while (++v63 != v65)
      {
        if ((unint64_t)(*v63 + 1) > 1)
          goto LABEL_114;
      }
      v63 = v65;
LABEL_114:
      ;
    }
    while (v63 != (_QWORD *)v66);
  }
  (*(void (**)(WebCore::KeyedEncoder *))(*(_QWORD *)a2 + 136))(a2);
  v70 = v78;
  v78 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v69);
    else
      *(_DWORD *)v70 -= 2;
  }
  (*(void (**)(WebCore::KeyedEncoder *))(*(_QWORD *)a2 + 104))(a2);
  v72 = v77;
  v77 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v71);
    else
      *(_DWORD *)v72 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v74 = v79;
  v78 = v79;
  if (*((_QWORD *)this + 23))
  {
    (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v78);
    v74 = v78;
  }
  v78 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = v79;
  v78 = v79;
  if (*((_QWORD *)this + 24))
  {
    (*(void (**)(WebCore::KeyedEncoder *, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v78);
    result = v78;
  }
  v78 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v75);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::encodeHashSet(uint64_t result, uint64_t a2, const WTF::StringImpl *a3, WTF ***a4)
{
  WTF **v4;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF **v14;
  const WTF::StringImpl *v15;
  WTF **v16;

  v4 = *a4;
  if (!*a4 || !*((_DWORD *)v4 - 3))
    return result;
  v7 = result;
  v8 = *((unsigned int *)v4 - 1);
  v9 = &v4[v8];
  if (!(_DWORD)v8)
  {
    v13 = 0;
    v12 = *a4;
    goto LABEL_13;
  }
  v11 = 8 * v8;
  while ((WTF::equal(*v4, 0, a3) & 1) != 0 || *v4 == (WTF *)-1)
  {
    ++v4;
    v11 -= 8;
    if (!v11)
    {
      v4 = v9;
      break;
    }
  }
  v12 = *a4;
  if (*a4)
  {
    v13 = *((unsigned int *)v12 - 1);
LABEL_13:
    v14 = &v12[v13];
    goto LABEL_15;
  }
  v14 = 0;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 112))(v7, a2);
LABEL_16:
  while (v4 != v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
    (*(void (**)(uint64_t, const WTF::StringImpl *, WTF **))(*(_QWORD *)v7 + 80))(v7, a3, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7);
    v16 = v4 + 1;
    v4 = v9;
    if (v16 != v9)
    {
      v4 = v16;
      while ((WTF::equal(*v4, 0, v15) & 1) != 0 || *v4 == (WTF *)-1)
      {
        if (++v4 == v9)
        {
          v4 = v9;
          goto LABEL_16;
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
}

WTF::StringImpl *WebCore::encodeFontHashSet(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = v13;
  v12 = v13;
  if (*a3 && *((_DWORD *)*a3 - 3))
  {
    v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a3);
    v10 = v9;
    if (*a3)
      v11 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    else
      v11 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2);
    if ((_QWORD *)v11 != v8)
    {
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
        (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)a1 + 80))(a1, &v12, v8);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
        while (++v8 != v10)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_15;
        }
        v8 = v10;
LABEL_15:
        ;
      }
      while (v8 != (_QWORD *)v11);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    result = v12;
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ResourceLoadStatistics::decode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF **v33;
  WTF **v34;
  uint64_t v35;
  WTF **v36;
  const WTF::StringImpl *v37;
  WTF **v38;
  WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF **v44;
  WTF **v45;
  uint64_t v46;
  WTF **v47;
  const WTF::StringImpl *v48;
  WTF **v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF **v66;
  WTF **v67;
  uint64_t v68;
  WTF **v69;
  const WTF::StringImpl *v70;
  WTF **v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  const WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF **v92;
  WTF **v93;
  uint64_t v94;
  WTF **v95;
  const WTF::StringImpl *v96;
  WTF **v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  const WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF **v106;
  WTF **v107;
  uint64_t v108;
  WTF **v109;
  const WTF::StringImpl *v110;
  WTF **v111;
  WTF::StringImpl *v112;
  const WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  WTF **v118;
  uint64_t v119;
  WTF **v120;
  const WTF::StringImpl *v121;
  WTF **v122;
  const WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF **v127;
  WTF **v128;
  uint64_t v129;
  WTF **v130;
  const WTF::StringImpl *v131;
  WTF **v132;
  uint64_t v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  char v151;
  WTF::StringImpl *v152;
  char v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  const WTF::StringImpl *v168;
  int v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  uint64_t *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197[3];

  v192 = 0;
  if (a3 < 0xF)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 80))(a2, &v194, &v192);
    v10 = v194;
    v194 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v6);
        if (!(_DWORD)v9)
          goto LABEL_489;
        goto LABEL_11;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_11;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 80))(a2, &v194, &v192);
  v8 = v194;
  v194 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      if ((v7 & 1) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
    *(_DWORD *)v8 -= 2;
  }
  if ((v7 & 1) == 0)
  {
LABEL_6:
    v9 = 0;
    goto LABEL_489;
  }
LABEL_11:
  v11 = v192;
  if (v192)
  {
    v12 = *((_DWORD *)v192 + 1);
    *(_DWORD *)v192 += 2;
    if (v12)
    {
      v13 = v11;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = v197[0];
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v197[0];
  }
  v14 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v6);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v194, a1 + 16);
  v15 = v194;
  v194 = 0;
  if (!v15)
  {
LABEL_20:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_21;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v15, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_21:
  if (a3 >= 0xF)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 40));
    v17 = v196;
    v196 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v194;
    v194 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 48));
    v20 = v196;
    v196 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v194;
    v194 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 64));
    v23 = v196;
    v196 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v194;
    v194 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_127;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 40));
  v26 = v196;
  v196 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v194;
  v194 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (a3 < 0xB)
    goto LABEL_251;
  v194 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v196, (uint64_t *)&v194);
  v30 = v196;
  v196 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v194;
  if (!v194)
  {
    v34 = 0;
    v32 = 0;
LABEL_67:
    v33 = (WTF **)((char *)v194 + 16 * v32);
    goto LABEL_68;
  }
  v32 = *((unsigned int *)v194 - 1);
  v33 = (WTF **)((char *)v194 + 16 * v32);
  if (!*((_DWORD *)v194 - 3))
  {
    v34 = (WTF **)((char *)v194 + 16 * v32);
    goto LABEL_67;
  }
  v34 = (WTF **)v194;
  if ((_DWORD)v32)
  {
    v35 = 16 * v32;
    v34 = (WTF **)v194;
    while ((WTF::equal(*v34, 0, v29) & 1) != 0 || *v34 == (WTF *)-1)
    {
      v34 += 2;
      v35 -= 16;
      if (!v35)
      {
        v34 = v33;
        break;
      }
    }
  }
LABEL_68:
  if (v31)
    v36 = (WTF **)((char *)v31 + 16 * *((unsigned int *)v31 - 1));
  else
    v36 = 0;
  while (v34 != v36)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v34, (uint64_t *)(a1 + 48), (uint64_t)v197);
    v38 = v34 + 2;
    v34 = v33;
    if (v38 != v33)
    {
      v34 = v38;
      while ((WTF::equal(*v34, 0, v37) & 1) != 0 || *v34 == (WTF *)-1)
      {
        v34 += 2;
        if (v34 == v33)
        {
          v34 = v33;
          break;
        }
      }
    }
  }
  v196 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v193, (uint64_t *)&v196);
  v41 = v193;
  v193 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v196;
  if (v196)
  {
    v43 = *((unsigned int *)v196 - 1);
    v44 = (WTF **)((char *)v196 + 16 * v43);
    if (*((_DWORD *)v196 - 3))
    {
      v45 = (WTF **)v196;
      if ((_DWORD)v43)
      {
        v46 = 16 * v43;
        v45 = (WTF **)v196;
        while ((WTF::equal(*v45, 0, v40) & 1) != 0 || *v45 == (WTF *)-1)
        {
          v45 += 2;
          v46 -= 16;
          if (!v46)
          {
            v45 = v44;
            goto LABEL_93;
          }
        }
      }
      goto LABEL_93;
    }
    v45 = (WTF **)((char *)v196 + 16 * v43);
  }
  else
  {
    v45 = 0;
    v43 = 0;
  }
  v44 = (WTF **)((char *)v196 + 16 * v43);
LABEL_93:
  if (v42)
    v47 = (WTF **)((char *)v42 + 16 * *((unsigned int *)v42 - 1));
  else
    v47 = 0;
  if (v47 != v45)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v45, (uint64_t *)(a1 + 64), (uint64_t)v197);
      v49 = v45 + 2;
      v45 = v44;
      if (v49 != v44)
      {
        v45 = v49;
        while ((WTF::equal(*v45, 0, v48) & 1) != 0 || *v45 == (WTF *)-1)
        {
          v45 += 2;
          if (v45 == v44)
          {
            v45 = v44;
            break;
          }
        }
      }
    }
    while (v45 != v47);
    v42 = v196;
  }
  if (v42)
  {
    v50 = *((unsigned int *)v42 - 1);
    if ((_DWORD)v50)
    {
      v51 = (WTF::StringImpl **)v42;
      do
      {
        v52 = *v51;
        if (*v51 != (WTF::StringImpl *)-1)
        {
          *v51 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v39);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        v51 += 2;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v42 - 16), v39);
  }
  v53 = v194;
  if (v194)
  {
    v54 = *((unsigned int *)v194 - 1);
    if ((_DWORD)v54)
    {
      v55 = v194;
      do
      {
        v56 = *(WTF::StringImpl **)v55;
        if (*(_QWORD *)v55 != -1)
        {
          *(_QWORD *)v55 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v39);
            else
              *(_DWORD *)v56 -= 2;
          }
        }
        v55 = (WTF::StringImpl *)((char *)v55 + 16);
        --v54;
      }
      while (v54);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v53 - 16), v39);
  }
LABEL_127:
  if (a3 < 0x10)
    goto LABEL_188;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 72));
  v58 = v196;
  v196 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v57);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v194;
  v194 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v57);
    else
      *(_DWORD *)v59 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v194, a1 + 80);
  v60 = v194;
  v194 = 0;
  if (!v60)
    goto LABEL_137;
  if (*(_DWORD *)v60 != 2)
  {
    *(_DWORD *)v60 -= 2;
LABEL_137:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_138;
  }
  WTF::StringImpl::destroy(v60, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_138:
  if (a3 < 0x11)
  {
LABEL_189:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 96));
    v76 = v196;
    v196 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v75);
      else
        *(_DWORD *)v76 -= 2;
    }
    v77 = v194;
    v194 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v75);
      else
        *(_DWORD *)v77 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 104));
    v79 = v196;
    v196 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v78);
      else
        *(_DWORD *)v79 -= 2;
    }
    v80 = v194;
    v194 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v78);
      else
        *(_DWORD *)v80 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 112));
    v82 = v196;
    v196 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v81);
      else
        *(_DWORD *)v82 -= 2;
    }
    v83 = v194;
    v194 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v81);
      else
        *(_DWORD *)v83 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 120));
    v85 = v196;
    v196 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v84);
      else
        *(_DWORD *)v85 -= 2;
    }
    v86 = v194;
    v194 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v84);
      else
        *(_DWORD *)v86 -= 2;
    }
    goto LABEL_361;
  }
  v194 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v196, (uint64_t *)&v194);
  v63 = v196;
  v196 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v61);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v194;
  if (v194)
  {
    v65 = *((unsigned int *)v194 - 1);
    v66 = (WTF **)((char *)v194 + 16 * v65);
    if (*((_DWORD *)v194 - 3))
    {
      v67 = (WTF **)v194;
      if ((_DWORD)v65)
      {
        v68 = 16 * v65;
        v67 = (WTF **)v194;
        while ((WTF::equal(*v67, 0, v62) & 1) != 0 || *v67 == (WTF *)-1)
        {
          v67 += 2;
          v68 -= 16;
          if (!v68)
          {
            v67 = v66;
            goto LABEL_165;
          }
        }
      }
      goto LABEL_165;
    }
    v67 = (WTF **)((char *)v194 + 16 * v65);
  }
  else
  {
    v67 = 0;
    v65 = 0;
  }
  v66 = (WTF **)((char *)v194 + 16 * v65);
LABEL_165:
  if (v64)
    v69 = (WTF **)((char *)v64 + 16 * *((unsigned int *)v64 - 1));
  else
    v69 = 0;
  if (v69 != v67)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v67, (uint64_t *)(a1 + 88), (uint64_t)v197);
      v71 = v67 + 2;
      v67 = v66;
      if (v71 != v66)
      {
        v67 = v71;
        while ((WTF::equal(*v67, 0, v70) & 1) != 0 || *v67 == (WTF *)-1)
        {
          v67 += 2;
          if (v67 == v66)
          {
            v67 = v66;
            break;
          }
        }
      }
    }
    while (v67 != v69);
    v64 = v194;
  }
  if (v64)
  {
    v72 = *((unsigned int *)v64 - 1);
    if ((_DWORD)v72)
    {
      v73 = (WTF::StringImpl **)v64;
      do
      {
        v74 = *v73;
        if (*v73 != (WTF::StringImpl *)-1)
        {
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v61);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
        v73 += 2;
        --v72;
      }
      while (v72);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v64 - 16), v61);
  }
LABEL_188:
  if (a3 >= 0xF)
    goto LABEL_189;
  if (a3 == 14)
  {
    v194 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v196 = v197[0];
    WebCore::decodeHashCountedSet(a2, (uint64_t)&v196, (uint64_t *)&v194);
    v89 = v196;
    v196 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v87);
      else
        *(_DWORD *)v89 -= 2;
    }
    v90 = v194;
    if (v194)
    {
      v91 = *((unsigned int *)v194 - 1);
      v92 = (WTF **)((char *)v194 + 16 * v91);
      if (*((_DWORD *)v194 - 3))
      {
        v93 = (WTF **)v194;
        if ((_DWORD)v91)
        {
          v94 = 16 * v91;
          v93 = (WTF **)v194;
          while ((WTF::equal(*v93, 0, v88) & 1) != 0 || *v93 == (WTF *)-1)
          {
            v93 += 2;
            v94 -= 16;
            if (!v94)
            {
              v93 = v92;
              goto LABEL_228;
            }
          }
        }
        goto LABEL_228;
      }
      v93 = (WTF **)((char *)v194 + 16 * v91);
    }
    else
    {
      v93 = 0;
      v91 = 0;
    }
    v92 = (WTF **)((char *)v194 + 16 * v91);
LABEL_228:
    if (v90)
      v95 = (WTF **)((char *)v90 + 16 * *((unsigned int *)v90 - 1));
    else
      v95 = 0;
    if (v95 != v93)
    {
      do
      {
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v93, (uint64_t *)(a1 + 96), (uint64_t)v197);
        v97 = v93 + 2;
        v93 = v92;
        if (v97 != v92)
        {
          v93 = v97;
          while ((WTF::equal(*v93, 0, v96) & 1) != 0 || *v93 == (WTF *)-1)
          {
            v93 += 2;
            if (v93 == v92)
            {
              v93 = v92;
              break;
            }
          }
        }
      }
      while (v93 != v95);
      v90 = v194;
    }
    if (v90)
    {
      v98 = *((unsigned int *)v90 - 1);
      if ((_DWORD)v98)
      {
        v99 = (WTF::StringImpl **)v90;
        do
        {
          v100 = *v99;
          if (*v99 != (WTF::StringImpl *)-1)
          {
            *v99 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v87);
              else
                *(_DWORD *)v100 -= 2;
            }
          }
          v99 += 2;
          --v98;
        }
        while (v98);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v90 - 16), v87);
    }
  }
LABEL_251:
  v194 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v196, (uint64_t *)&v194);
  v103 = v196;
  v196 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, v101);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = v194;
  if (!v194)
  {
    v107 = 0;
    v105 = 0;
LABEL_264:
    v106 = (WTF **)((char *)v194 + 16 * v105);
    goto LABEL_265;
  }
  v105 = *((unsigned int *)v194 - 1);
  v106 = (WTF **)((char *)v194 + 16 * v105);
  if (!*((_DWORD *)v194 - 3))
  {
    v107 = (WTF **)((char *)v194 + 16 * v105);
    goto LABEL_264;
  }
  v107 = (WTF **)v194;
  if ((_DWORD)v105)
  {
    v108 = 16 * v105;
    v107 = (WTF **)v194;
    while ((WTF::equal(*v107, 0, v102) & 1) != 0 || *v107 == (WTF *)-1)
    {
      v107 += 2;
      v108 -= 16;
      if (!v108)
      {
        v107 = v106;
        break;
      }
    }
  }
LABEL_265:
  if (v104)
    v109 = (WTF **)((char *)v104 + 16 * *((unsigned int *)v104 - 1));
  else
    v109 = 0;
  while (v107 != v109)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v107, (uint64_t *)(a1 + 104), (uint64_t)v197);
    v111 = v107 + 2;
    v107 = v106;
    if (v111 != v106)
    {
      v107 = v111;
      while ((WTF::equal(*v107, 0, v110) & 1) != 0 || *v107 == (WTF *)-1)
      {
        v107 += 2;
        if (v107 == v106)
        {
          v107 = v106;
          break;
        }
      }
    }
  }
  v196 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v193, (uint64_t *)&v196);
  v114 = v193;
  v193 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v112);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = v196;
  if (!v196)
  {
    v118 = 0;
    v116 = 0;
LABEL_289:
    v117 = (WTF **)((char *)v196 + 16 * v116);
    goto LABEL_290;
  }
  v116 = *((unsigned int *)v196 - 1);
  v117 = (WTF **)((char *)v196 + 16 * v116);
  if (!*((_DWORD *)v196 - 3))
  {
    v118 = (WTF **)((char *)v196 + 16 * v116);
    goto LABEL_289;
  }
  v118 = (WTF **)v196;
  if ((_DWORD)v116)
  {
    v119 = 16 * v116;
    v118 = (WTF **)v196;
    while ((WTF::equal(*v118, 0, v113) & 1) != 0 || *v118 == (WTF *)-1)
    {
      v118 += 2;
      v119 -= 16;
      if (!v119)
      {
        v118 = v117;
        break;
      }
    }
  }
LABEL_290:
  if (v115)
    v120 = (WTF **)((char *)v115 + 16 * *((unsigned int *)v115 - 1));
  else
    v120 = 0;
  while (v118 != v120)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v118, (uint64_t *)(a1 + 112), (uint64_t)v197);
    v122 = v118 + 2;
    v118 = v117;
    if (v122 != v117)
    {
      v118 = v122;
      while ((WTF::equal(*v118, 0, v121) & 1) != 0 || *v118 == (WTF *)-1)
      {
        v118 += 2;
        if (v118 == v117)
        {
          v118 = v117;
          break;
        }
      }
    }
  }
  if (a3 <= 0xA)
    goto LABEL_339;
  v193 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v191 = v197[0];
  WebCore::decodeHashCountedSet(a2, (uint64_t)&v191, (uint64_t *)&v193);
  v124 = v191;
  v191 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v112);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = v193;
  if (v193)
  {
    v126 = *((unsigned int *)v193 - 1);
    v127 = (WTF **)((char *)v193 + 16 * v126);
    if (*((_DWORD *)v193 - 3))
    {
      v128 = (WTF **)v193;
      if ((_DWORD)v126)
      {
        v129 = 16 * v126;
        v128 = (WTF **)v193;
        while ((WTF::equal(*v128, 0, v123) & 1) != 0 || *v128 == (WTF *)-1)
        {
          v128 += 2;
          v129 -= 16;
          if (!v129)
          {
            v128 = v127;
            goto LABEL_316;
          }
        }
      }
      goto LABEL_316;
    }
    v128 = (WTF **)((char *)v193 + 16 * v126);
  }
  else
  {
    v128 = 0;
    v126 = 0;
  }
  v127 = (WTF **)((char *)v193 + 16 * v126);
LABEL_316:
  if (v125)
    v130 = (WTF **)((char *)v125 + 16 * *((unsigned int *)v125 - 1));
  else
    v130 = 0;
  if (v130 != v128)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v128, (uint64_t *)(a1 + 120), (uint64_t)v197);
      v132 = v128 + 2;
      v128 = v127;
      if (v132 != v127)
      {
        v128 = v132;
        while ((WTF::equal(*v128, 0, v131) & 1) != 0 || *v128 == (WTF *)-1)
        {
          v128 += 2;
          if (v128 == v127)
          {
            v128 = v127;
            break;
          }
        }
      }
    }
    while (v128 != v130);
    v125 = v193;
  }
  if (v125)
  {
    v133 = *((unsigned int *)v125 - 1);
    if ((_DWORD)v133)
    {
      v134 = (WTF::StringImpl **)v125;
      do
      {
        v135 = *v134;
        if (*v134 != (WTF::StringImpl *)-1)
        {
          *v134 = 0;
          if (v135)
          {
            if (*(_DWORD *)v135 == 2)
              WTF::StringImpl::destroy(v135, v112);
            else
              *(_DWORD *)v135 -= 2;
          }
        }
        v134 += 2;
        --v133;
      }
      while (v133);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v125 - 16), v112);
  }
LABEL_339:
  v136 = v196;
  if (v196)
  {
    v137 = *((unsigned int *)v196 - 1);
    if ((_DWORD)v137)
    {
      v138 = v196;
      do
      {
        v139 = *(WTF::StringImpl **)v138;
        if (*(_QWORD *)v138 != -1)
        {
          *(_QWORD *)v138 = 0;
          if (v139)
          {
            if (*(_DWORD *)v139 == 2)
              WTF::StringImpl::destroy(v139, v112);
            else
              *(_DWORD *)v139 -= 2;
          }
        }
        v138 = (WTF::StringImpl *)((char *)v138 + 16);
        --v137;
      }
      while (v137);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v136 - 16), v112);
  }
  v140 = v194;
  if (v194)
  {
    v141 = *((unsigned int *)v194 - 1);
    if ((_DWORD)v141)
    {
      v142 = v194;
      do
      {
        v143 = *(WTF::StringImpl **)v142;
        if (*(_QWORD *)v142 != -1)
        {
          *(_QWORD *)v142 = 0;
          if (v143)
          {
            if (*(_DWORD *)v143 == 2)
              WTF::StringImpl::destroy(v143, v112);
            else
              *(_DWORD *)v143 -= 2;
          }
        }
        v142 = (WTF::StringImpl *)((char *)v142 + 16);
        --v141;
      }
      while (v141);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v140 - 16), v112);
  }
LABEL_361:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v194, a1 + 128);
  v144 = v194;
  v194 = 0;
  if (!v144)
    goto LABEL_364;
  if (*(_DWORD *)v144 != 2)
  {
    *(_DWORD *)v144 -= 2;
LABEL_364:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_365;
  }
  WTF::StringImpl::destroy(v144, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_365:
  if (a3 >= 0xC)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v194 = v197[0];
    v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v194, a1 + 129);
    v145 = v194;
    v194 = 0;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
      {
        WTF::StringImpl::destroy(v145, v6);
        if (!(_DWORD)v9)
          goto LABEL_489;
LABEL_370:
        if (a3 > 0xD)
          goto LABEL_372;
        goto LABEL_371;
      }
      *(_DWORD *)v145 -= 2;
    }
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_370;
  }
LABEL_371:
  *(_WORD *)(a1 + 128) = 0;
LABEL_372:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v194, a1 + 132);
  v146 = v194;
  v194 = 0;
  if (!v146)
    goto LABEL_375;
  if (*(_DWORD *)v146 != 2)
  {
    *(_DWORD *)v146 -= 2;
LABEL_375:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_376;
  }
  WTF::StringImpl::destroy(v146, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_376:
  v191 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, &v194, &v191);
  v147 = v194;
  v194 = 0;
  if (!v147)
    goto LABEL_379;
  if (*(_DWORD *)v147 != 2)
  {
    *(_DWORD *)v147 -= 2;
LABEL_379:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_380;
  }
  WTF::StringImpl::destroy(v147, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_380:
  *(_QWORD *)(a1 + 24) = v191;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v194, a1 + 32);
  v148 = v194;
  v194 = 0;
  if (!v148)
    goto LABEL_383;
  if (*(_DWORD *)v148 != 2)
  {
    *(_DWORD *)v148 -= 2;
LABEL_383:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_384;
  }
  WTF::StringImpl::destroy(v148, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_384:
  v190 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v194, &v190);
  v149 = v194;
  v194 = 0;
  if (!v149)
    goto LABEL_387;
  if (*(_DWORD *)v149 != 2)
  {
    *(_DWORD *)v149 -= 2;
LABEL_387:
    if (!(_DWORD)v9)
      goto LABEL_489;
    goto LABEL_388;
  }
  WTF::StringImpl::destroy(v149, v6);
  if (!(_DWORD)v9)
    goto LABEL_489;
LABEL_388:
  *(_QWORD *)(a1 + 8) = v190;
  if (a3 < 0xB)
    goto LABEL_489;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v151 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v194, a1 + 136);
  v152 = v194;
  v194 = 0;
  if (!v152)
  {
LABEL_392:
    if ((v151 & 1) != 0)
      goto LABEL_394;
    goto LABEL_393;
  }
  if (*(_DWORD *)v152 != 2)
  {
    *(_DWORD *)v152 -= 2;
    goto LABEL_392;
  }
  WTF::StringImpl::destroy(v152, v150);
  if ((v151 & 1) == 0)
LABEL_393:
    *(_DWORD *)(a1 + 136) = 0;
LABEL_394:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  v153 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v194, a1 + 140);
  v154 = v194;
  v194 = 0;
  if (!v154)
    goto LABEL_397;
  if (*(_DWORD *)v154 != 2)
  {
    *(_DWORD *)v154 -= 2;
LABEL_397:
    if ((v153 & 1) != 0)
      goto LABEL_399;
    goto LABEL_398;
  }
  WTF::StringImpl::destroy(v154, v6);
  if ((v153 & 1) == 0)
LABEL_398:
    *(_DWORD *)(a1 + 140) = 0;
LABEL_399:
  if (a3 < 0xD)
    goto LABEL_489;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  WebCore::decodeFontHashSet(a2, (uint64_t)&v194, (uint64_t *)(a1 + 152));
  v156 = v194;
  v194 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v155);
    else
      *(_DWORD *)v156 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  WebCore::decodeFontHashSet(a2, (uint64_t)&v194, (uint64_t *)(a1 + 160));
  v158 = v194;
  v194 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, v157);
    else
      *(_DWORD *)v158 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v197[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v197[0];
  WebCore::decodeHashSet(a2, (uint64_t)&v194, (uint64_t)&v196, (uint64_t *)(a1 + 144));
  v160 = v196;
  v196 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v159);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = v194;
  v194 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, v159);
    else
      *(_DWORD *)v161 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v189 = v197[0];
  if (!(*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 88))(a2, &v189))
    goto LABEL_476;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v164 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 24))(a2, v197, a1 + 176);
  v165 = v197[0];
  v197[0] = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::destroy(v165, v163);
      if (!v164)
        goto LABEL_475;
      goto LABEL_417;
    }
    *(_DWORD *)v165 -= 2;
  }
  if (!v164)
    goto LABEL_475;
LABEL_417:
  v194 = 0;
  v195 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v197[0];
  if (!(*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 104))(a2, &v193))
    goto LABEL_469;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2))
  {
    v196 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v169 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 80))(a2, v197, &v196);
    v170 = v197[0];
    v197[0] = 0;
    if (!v170)
      goto LABEL_422;
    if (*(_DWORD *)v170 != 2)
    {
      *(_DWORD *)v170 -= 2;
LABEL_422:
      if (v169)
        goto LABEL_423;
      goto LABEL_426;
    }
    WTF::StringImpl::destroy(v170, v167);
    if (v169)
    {
LABEL_423:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 168), &v196, v168, (uint64_t)v197);
      LODWORD(v171) = HIDWORD(v195);
      if (HIDWORD(v195) == (_DWORD)v195)
      {
        v175 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, HIDWORD(v195) + 1, (unint64_t)&v196);
        v171 = HIDWORD(v195);
        v176 = v194;
        v177 = *v175;
        *v175 = 0;
        *((_QWORD *)v176 + v171) = v177;
      }
      else
      {
        v172 = v196;
        v196 = 0;
        *((_QWORD *)v194 + HIDWORD(v195)) = v172;
      }
      HIDWORD(v195) = v171 + 1;
    }
LABEL_426:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
    v174 = v196;
    v196 = 0;
    if (v174)
    {
      if (*(_DWORD *)v174 != 2)
      {
        *(_DWORD *)v174 -= 2;
        goto LABEL_429;
      }
      WTF::StringImpl::destroy(v174, v173);
      if ((v169 & 1) == 0)
        break;
    }
    else
    {
LABEL_429:
      if ((v169 & 1) == 0)
        break;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
LABEL_469:
  v178 = v193;
  v193 = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, v166);
    else
      *(_DWORD *)v178 -= 2;
  }
  if (HIDWORD(v195))
  {
    v186 = v194;
    v187 = 8 * HIDWORD(v195);
    do
    {
      v188 = *(WTF::StringImpl **)v186;
      *(_QWORD *)v186 = 0;
      if (v188)
      {
        if (*(_DWORD *)v188 == 2)
          WTF::StringImpl::destroy(v188, v166);
        else
          *(_DWORD *)v188 -= 2;
      }
      v186 = (WTF::StringImpl *)((char *)v186 + 8);
      v187 -= 8;
    }
    while (v187);
  }
  v179 = v194;
  if (v194)
  {
    v194 = 0;
    LODWORD(v195) = 0;
    WTF::fastFree(v179, v166);
  }
LABEL_475:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
LABEL_476:
  v180 = v189;
  v189 = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, v162);
    else
      *(_DWORD *)v180 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v197[0] = 0;
  if ((*(unsigned int (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v194, v197))
  {
    *(WTF::StringImpl **)(a1 + 184) = v197[0];
  }
  v182 = v194;
  v194 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, v181);
    else
      *(_DWORD *)v182 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v197[0] = 0;
  if ((*(unsigned int (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v194, v197))
  {
    *(WTF::StringImpl **)(a1 + 192) = v197[0];
  }
  v183 = v194;
  v194 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, v6);
    else
      *(_DWORD *)v183 -= 2;
  }
LABEL_489:
  v184 = v192;
  v192 = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, v6);
    else
      *(_DWORD *)v184 -= 2;
  }
  return v9;
}

WTF::StringImpl *WebCore::decodeHashSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *result;
  int v8;
  char v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v26 = 0;
  v27 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (!(_DWORD)result)
    return result;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v28 = 0;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, a3, &v28);
    v9 = v8;
    if (v8)
    {
      v10 = v28;
      if (v28)
      {
        v11 = *((_DWORD *)v28 + 1);
        *(_DWORD *)v28 += 2;
        if (v11)
        {
          v30 = v10;
        }
        else
        {
          v21 = v10;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v30 = v29;
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v22);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v30 = v29;
      }
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)&v30, a4, (uint64_t)&v29);
      v13 = v30;
      v30 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      LODWORD(v14) = HIDWORD(v27);
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v28);
        v14 = HIDWORD(v27);
        v19 = v26;
        v20 = *v18;
        *v18 = 0;
        *((_QWORD *)v19 + v14) = v20;
      }
      else
      {
        v15 = v28;
        v28 = 0;
        *((_QWORD *)v26 + HIDWORD(v27)) = v15;
      }
      HIDWORD(v27) = v14 + 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v17 = v28;
    v28 = 0;
    if (!v17)
      goto LABEL_16;
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v16);
      if ((v9 & 1) == 0)
        break;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
LABEL_16:
      if ((v9 & 1) == 0)
        break;
    }
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v24 = v26;
  if (!HIDWORD(v27))
  {
    if (!v26)
      return result;
LABEL_37:
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v24, v23);
  }
  v25 = 8 * HIDWORD(v27);
  do
  {
    result = *(WTF::StringImpl **)v24;
    *(_QWORD *)v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
    v24 = (WTF *)((char *)v24 + 8);
    v25 -= 8;
  }
  while (v25);
  v24 = v26;
  if (v26)
    goto LABEL_37;
  return result;
}

WTF::StringImpl *WebCore::decodeHashCountedSet(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  _QWORD *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  WTF *v40;
  uint64_t v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;

  v45 = 0;
  v46 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (!(_DWORD)result)
    return result;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v47 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, &v50, &v47);
    v8 = v50;
    v50 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        if (!v7)
          goto LABEL_42;
        goto LABEL_7;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (!v7)
      goto LABEL_42;
LABEL_7:
    v49 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, int *))(*(_QWORD *)a1 + 32))(a1, &v50, &v49);
    v11 = v50;
    v50 = 0;
    if (!v11)
      goto LABEL_10;
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
LABEL_10:
      if (v10)
        goto LABEL_11;
      goto LABEL_42;
    }
    WTF::StringImpl::destroy(v11, v9);
    if (v10)
    {
LABEL_11:
      v12 = v47;
      if (v47)
      {
        v13 = *((_DWORD *)v47 + 1);
        *(_DWORD *)v47 += 2;
        if (v13)
        {
          v48 = v12;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v48 = v50;
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v48 = v50;
      }
      v14 = v49;
      v15 = *a3;
      if (*a3
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned int,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a3, 8u, 0), (v15 = *a3) != 0))
      {
        v16 = *(_DWORD *)(v15 - 8);
      }
      else
      {
        v16 = 0;
      }
      v17 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v48, v9) & v16;
      v18 = v15 + 16 * v17;
      if ((WTF::equal(*(WTF **)v18, 0, v19) & 1) == 0)
      {
        v22 = 0;
        v23 = 1;
        do
        {
          if (*(_QWORD *)v18 == -1)
          {
            v22 = (_QWORD *)v18;
          }
          else if ((WTF::equalIgnoringASCIICase(*(WTF **)v18, v48, v21) & 1) != 0)
          {
            goto LABEL_46;
          }
          v17 = (v17 + v23) & v16;
          v18 = v15 + 16 * v17;
          ++v23;
        }
        while (!WTF::equal(*(WTF **)v18, 0, v21));
        if (v22)
        {
          *v22 = 0;
          v22[1] = 0;
          --*(_DWORD *)(*a3 - 16);
          v18 = (uint64_t)v22;
        }
      }
      v24 = v48;
      v48 = 0;
      v25 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v20);
        else
          *(_DWORD *)v25 -= 2;
      }
      *(_DWORD *)(v18 + 8) = 0;
      v26 = *a3;
      if (*a3)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a3;
      if (*a3)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 <= 2 * v30)
        {
LABEL_38:
          v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
          goto LABEL_45;
        }
      }
      else if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_38;
        v32 = 8;
LABEL_45:
        v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned int,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a3, v32, (WTF **)v18);
      }
LABEL_46:
      *(_DWORD *)(v18 + 8) += v14;
      v34 = v48;
      v48 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v20);
        else
          *(_DWORD *)v34 -= 2;
      }
      LODWORD(v35) = HIDWORD(v46);
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        v39 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&v47);
        v35 = HIDWORD(v46);
        v40 = v45;
        v41 = *v39;
        *v39 = 0;
        *((_QWORD *)v40 + v35) = v41;
      }
      else
      {
        v36 = v47;
        v47 = 0;
        *((_QWORD *)v45 + HIDWORD(v46)) = v36;
      }
      HIDWORD(v46) = v35 + 1;
      v33 = 1;
      goto LABEL_52;
    }
LABEL_42:
    v33 = 0;
LABEL_52:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v38 = v47;
    v47 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 != 2)
      {
        *(_DWORD *)v38 -= 2;
        goto LABEL_55;
      }
      WTF::StringImpl::destroy(v38, v37);
      if ((v33 & 1) == 0)
        break;
    }
    else
    {
LABEL_55:
      if ((v33 & 1) == 0)
        break;
    }
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v43 = v45;
  if (!HIDWORD(v46))
  {
    if (!v45)
      return result;
LABEL_79:
    v45 = 0;
    LODWORD(v46) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v43, v42);
  }
  v44 = 8 * HIDWORD(v46);
  do
  {
    result = *(WTF::StringImpl **)v43;
    *(_QWORD *)v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v42);
      else
        *(_DWORD *)result -= 2;
    }
    v43 = (WTF *)((char *)v43 + 8);
    v44 -= 8;
  }
  while (v44);
  v43 = v45;
  if (v45)
    goto LABEL_79;
  return result;
}

WTF::StringImpl *WebCore::decodeFontHashSet(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  int v7;
  const WTF::StringImpl *v8;
  char v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *result;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _BYTE v25[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = 0;
  v23 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2))
    goto LABEL_17;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v24 = 0;
    v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, &v21, &v24);
    v9 = v7;
    if (v7)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v24, v8, (uint64_t)v25);
      LODWORD(v10) = HIDWORD(v23);
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        v14 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v24);
        v10 = HIDWORD(v23);
        v15 = v22;
        v16 = *v14;
        *v14 = 0;
        *((_QWORD *)v15 + v10) = v16;
      }
      else
      {
        v11 = v24;
        v24 = 0;
        *((_QWORD *)v22 + HIDWORD(v23)) = v11;
      }
      HIDWORD(v23) = v10 + 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v13 = v24;
    v24 = 0;
    if (!v13)
      goto LABEL_10;
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v12);
      if ((v9 & 1) == 0)
        break;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
LABEL_10:
      if ((v9 & 1) == 0)
        break;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v17 = v22;
  if (HIDWORD(v23))
  {
    v19 = 8 * HIDWORD(v23);
    do
    {
      v20 = *(WTF::StringImpl **)v17;
      *(_QWORD *)v17 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v6);
        else
          *(_DWORD *)v20 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v19 -= 8;
    }
    while (v19);
    v17 = v22;
    if (v22)
      goto LABEL_30;
  }
  else
  {
    if (!v22)
      goto LABEL_17;
LABEL_30:
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v17, v6);
  }
LABEL_17:
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceLoadStatistics::toString@<X0>(WebCore::ResourceLoadStatistics *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  int v9;
  int8x16_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _WORD *v54;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t i;
  int8x16_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t j;
  uint64_t v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  char *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *result;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unsigned int v90;
  char v91;
  char v92;
  int8x16_t *v93;
  int v94;
  int8x16_t *v95;
  int v96;
  _BYTE v97[12];

  *(_QWORD *)&v97[4] = *MEMORY[0x1E0C80C00];
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 1;
  v95 = (int8x16_t *)"Registrable domain: ";
  v96 = 20;
  v93 = *(int8x16_t **)this;
  v92 = 10;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v88, &v95, (uint64_t *)&v93, &v92);
  if (*((_BYTE *)this + 16))
    v4 = "Yes";
  else
    v4 = "No";
  v5 = 3;
  if (*((_BYTE *)this + 16))
    v5 = 4;
  v6 = WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "hadUserInteraction", 19, ": ", 3, v4, v5);
  v7 = *((double *)this + 3);
  if (v7 <= 0.0 || (WTF::WallTime::now((WTF::WallTime *)v6), v8 - v7 >= 86400.0))
  {
    v9 = 3;
    v10 = (int8x16_t *)"-1\n";
  }
  else
  {
    v9 = 16;
    v10 = (int8x16_t *)"within 24 hours\n";
  }
  v95 = (int8x16_t *)"\n    mostRecentUserInteraction: ";
  v96 = 32;
  v93 = v10;
  v94 = v9;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v88, &v95, &v93);
  if (*((_BYTE *)this + 32))
    v11 = "Yes";
  else
    v11 = "No";
  v12 = 3;
  if (*((_BYTE *)this + 32))
    v12 = 4;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "grandfathered", 14, ": ", 3, v11, v12);
  LOBYTE(v95) = 10;
  v87 = a2;
  if (!v89 || (v13 = v90, v90 >= *((_DWORD *)v89 + 1)) || v88)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *((_DWORD *)v89 + 4);
    v15 = *((_QWORD *)v89 + 1);
    ++v90;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 10;
    else
      *(_WORD *)(v15 + 2 * v13) = 10;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 5);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 6);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 8);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 9);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_BYTE *)this + 80))
    v24 = "Yes";
  else
    v24 = "No";
  v25 = 3;
  if (*((_BYTE *)this + 80))
    v25 = 4;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "gotLinkDecorationFromPrevalentResource", 39, ": ", 3, v24, v25);
  LOBYTE(v95) = 10;
  if (!v89 || (v26 = v90, v90 >= *((_DWORD *)v89 + 1)) || v88)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v27 = *((_DWORD *)v89 + 4);
    v28 = *((_QWORD *)v89 + 1);
    ++v90;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 10;
    else
      *(_WORD *)(v28 + 2 * v26) = 10;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 11);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 12);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 13);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 14);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 15);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*((_BYTE *)this + 128))
    v39 = "Yes";
  else
    v39 = "No";
  v40 = 3;
  if (*((_BYTE *)this + 128))
    v40 = 4;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "isPrevalentResource", 20, ": ", 3, v39, v40);
  LOBYTE(v95) = 10;
  if (!v89 || (v41 = v90, v90 >= *((_DWORD *)v89 + 1)) || v88)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v42 = *((_DWORD *)v89 + 4);
    v43 = *((_QWORD *)v89 + 1);
    ++v90;
    if ((v42 & 4) != 0)
      *(_BYTE *)(v43 + v41) = 10;
    else
      *(_WORD *)(v43 + 2 * v41) = 10;
  }
  if (*((_BYTE *)this + 129))
    v44 = "Yes";
  else
    v44 = "No";
  v45 = 3;
  if (*((_BYTE *)this + 129))
    v45 = 4;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "isVeryPrevalentResource", 24, ": ", 3, v44, v45);
  v46 = *((_DWORD *)this + 33);
  v47 = 26;
  v48 = v46;
  do
  {
    ++v47;
    v49 = v48 > 9;
    v48 /= 0xAu;
  }
  while (v49);
  v50 = v89;
  if ((v89 || (v50 = v88) != 0) && (*((_BYTE *)v50 + 16) & 4) == 0)
  {
    v51 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v88);
    if (v51)
    {
      v52 = 0;
      *(_OWORD *)v51 = xmmword_1969F2A10;
      *(_OWORD *)(v51 + 16) = xmmword_1969F2A20;
      *(_OWORD *)(v51 + 32) = xmmword_1969F2A30;
      *(_WORD *)(v51 + 48) = 32;
      v53 = v46;
      do
      {
        v97[v52--] = (v53 % 0xA) | 0x30;
        v49 = v53 > 9;
        v53 /= 0xAu;
      }
      while (v49);
      if (v52 + 14 <= 13)
      {
        v54 = (_WORD *)(v51 + 50);
        do
          *v54++ = v97[v52 + 1];
        while (!__CFADD__(v52++, 1));
      }
      v56 = 0;
      do
      {
        ++v56;
        v49 = v46 > 9;
        v46 /= 0xAu;
      }
      while (v49);
      *(_WORD *)(v51 + 50 + 2 * v56) = 10;
    }
  }
  else
  {
    v57 = MEMORY[0x19AEA4824](&v88);
    if (v57)
    {
      v58 = 0;
      qmemcpy((void *)v57, "\n    dataRecordsRemoved: ", 25);
      v59 = v46;
      do
      {
        v97[v58--] = (v59 % 0xA) | 0x30;
        v49 = v59 > 9;
        v59 /= 0xAu;
      }
      while (v49);
      v60 = v57 + 25;
      if (v58 + 14 <= 13)
        memcpy((void *)(v57 + 25), &v97[v58 + 1], -v58);
      v61 = 0;
      do
      {
        ++v61;
        v49 = v46 > 9;
        v46 /= 0xAu;
      }
      while (v49);
      *(_BYTE *)(v60 + v61) = 10;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v62 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((WTF::StringBuilder *)&v88, (uint64_t)v95, (_QWORD **)this + 19);
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v63);
    else
      *(_DWORD *)v62 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v64 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((WTF::StringBuilder *)&v88, (uint64_t)v95, (_QWORD **)this + 20);
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v65);
    else
      *(_DWORD *)v64 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v66 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((uint64_t)&v88, (uint64_t)v95, (WTF ***)this + 18);
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v67);
    else
      *(_DWORD *)v66 -= 2;
  }
  if (*((_QWORD *)this + 23))
  {
    WTF::StringBuilder::append();
    for (i = *((_QWORD *)this + 23); i; i &= i - 1)
    {
      v69 = (int8x16_t *)"mimeTypes";
      v70 = 10;
      switch(i & -i)
      {
        case 1:
          v69 = (int8x16_t *)"appVersion";
          v70 = 11;
          break;
        case 2:
          v69 = (int8x16_t *)"userAgent";
          v70 = 10;
          break;
        case 4:
          v69 = (int8x16_t *)"plugins";
          v70 = 8;
          break;
        case 8:
          break;
        default:
          v69 = (int8x16_t *)"Invalid navigator API";
          v70 = 22;
          break;
      }
      v95 = (int8x16_t *)"        ";
      v96 = 8;
      v71 = v70 - 1;
      v93 = v69;
      if (v71 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x195F174F8);
      }
      v94 = v71;
      v92 = 10;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v88, &v95, &v93, &v92);
    }
  }
  if (*((_QWORD *)this + 24))
  {
    WTF::StringBuilder::append();
    for (j = *((_QWORD *)this + 24); j; j &= j - 1)
    {
      v73 = j & -j;
      if (v73 > 15)
      {
        switch(v73)
        {
          case 16:
            v74 = (int8x16_t *)"availTop";
            v76 = 9;
            break;
          case 32:
            v74 = (int8x16_t *)"availHeight";
            v76 = 12;
            break;
          case 64:
            v74 = (int8x16_t *)"availWidth";
LABEL_129:
            v76 = 11;
            break;
          default:
LABEL_133:
            v74 = (int8x16_t *)"Invalid screen API";
            v76 = 19;
            break;
        }
      }
      else
      {
        v75 = v73 - 1;
        v74 = (int8x16_t *)"height";
        v76 = 7;
        switch(v75)
        {
          case 0:
            break;
          case 1:
            v74 = (int8x16_t *)"width";
            v76 = 6;
            break;
          case 3:
            v74 = (int8x16_t *)"colorDepth";
            goto LABEL_129;
          case 7:
            v74 = (int8x16_t *)"availLeft";
            v76 = 10;
            break;
          default:
            goto LABEL_133;
        }
      }
      v95 = (int8x16_t *)"        ";
      v96 = 8;
      v77 = v76 - 1;
      v93 = v74;
      if (v77 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x195F17668);
      }
      v94 = v77;
      v92 = 10;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v88, &v95, &v93, &v92);
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = (WTF::StringImpl *)v95;
  WebCore::appendHashSet((WTF::StringBuilder *)&v88, (uint64_t)v95, (_QWORD **)this + 21);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v79);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (*((_BYTE *)this + 176))
    v80 = "Yes";
  else
    v80 = "No";
  v81 = 3;
  if (*((_BYTE *)this + 176))
    v81 = 4;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v88, "    ", 5, "canvasReadData", 15, ": ", 3, v80, v81);
  WTF::StringBuilder::append();
  v83 = v88;
  if (v88)
  {
    v84 = v87;
    goto LABEL_151;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v88);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v88);
  v84 = v87;
  v83 = v88;
  if (v88)
LABEL_151:
    *(_DWORD *)v83 += 2;
  *v84 = v83;
  v85 = v89;
  v89 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v82);
    else
      *(_DWORD *)v85 -= 2;
  }
  result = v88;
  v88 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v82);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::appendHashSet(uint64_t result, uint64_t a2, WTF ***a3)
{
  WTF::StringBuilder *v4;
  const WTF::StringImpl *v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF **v10;
  WTF **v11;
  WTF **v12;
  const WTF::StringImpl *v13;
  int8x16_t *v14;
  int v15;
  uint64_t v16;
  int8x16_t *v17;
  int v18;

  if (!*a3 || !*((_DWORD *)*a3 - 3))
    return result;
  v4 = (WTF::StringBuilder *)result;
  v16 = a2;
  v17 = (int8x16_t *)"    ";
  v18 = 4;
  v14 = (int8x16_t *)":\n";
  v15 = 2;
  result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)result, &v17, &v16, &v14);
  v6 = *a3;
  if (!*a3)
  {
    v10 = 0;
    v7 = 0;
    goto LABEL_15;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = &v6[v7];
  if (!*((_DWORD *)v6 - 3))
  {
    v10 = &v6[v7];
LABEL_15:
    v8 = &v6[v7];
    if (v6)
      goto LABEL_16;
    goto LABEL_18;
  }
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    while (1)
    {
      result = WTF::equal(*v6, 0, v5);
      if ((result & 1) == 0 && *v6 != (WTF *)-1)
        break;
      ++v6;
      v9 -= 8;
      if (!v9)
      {
        v6 = v8;
        break;
      }
    }
    v10 = v6;
    v6 = *a3;
    if (!*a3)
      goto LABEL_18;
LABEL_16:
    v11 = &v6[*((unsigned int *)v6 - 1)];
    goto LABEL_19;
  }
  v10 = *a3;
  if (v6)
    goto LABEL_16;
LABEL_18:
  v11 = 0;
LABEL_19:
  while (v10 != v11)
  {
    v17 = (int8x16_t *)"        ";
    v18 = 8;
    v12 = v10 + 1;
    v14 = (int8x16_t *)*v10;
    LOBYTE(v16) = 10;
    result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v4, &v17, (uint64_t *)&v14, (char *)&v16);
    v10 = v8;
    if (v12 != v8)
    {
      v10 = v12;
      while (1)
      {
        result = WTF::equal(*v10, 0, v13);
        if ((result & 1) == 0 && *v10 != (WTF *)-1)
          break;
        if (++v10 == v8)
        {
          v10 = v8;
          break;
        }
      }
    }
  }
  return result;
}

WTF::StringBuilder *WebCore::appendHashSet(WTF::StringBuilder *result, uint64_t a2, _QWORD **a3)
{
  WTF::StringBuilder *v4;
  int8x16_t **v5;
  int8x16_t **v6;
  int8x16_t **v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int v11;
  uint64_t v12;
  int8x16_t *v13;
  int v14;

  if (*a3 && *((_DWORD *)*a3 - 3))
  {
    v4 = result;
    v12 = a2;
    v13 = (int8x16_t *)"    ";
    v14 = 4;
    v10 = (int8x16_t *)":\n";
    v11 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, &v13, &v12, &v10);
    result = (WTF::StringBuilder *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a3);
    v5 = (int8x16_t **)result;
    v7 = v6;
    v8 = *a3 ? (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)] : 0;
    if ((WTF::StringBuilder *)v8 != result)
    {
      do
      {
        v13 = (int8x16_t *)"        ";
        v14 = 8;
        v9 = *v5++;
        v10 = v9;
        LOBYTE(v12) = 10;
        result = (WTF::StringBuilder *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v4, &v13, (uint64_t *)&v10, (char *)&v12);
        while (v5 != v7)
        {
          if ((unint64_t)(*v5)->u64 + 1 > 1)
            goto LABEL_12;
          ++v5;
        }
        v5 = v7;
LABEL_12:
        ;
      }
      while (v5 != (int8x16_t **)v8);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::ResourceLoadStatistics::merge(WebCore::ResourceLoadStatistics *this, const WebCore::ResourceLoadStatistics *a2, const WTF::StringImpl *a3)
{
  double v5;
  double v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **result;
  const WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  _BYTE v38[24];

  v5 = *((double *)a2 + 1);
  if (*((double *)this + 1) < v5)
    *((double *)this + 1) = v5;
  if (*((_BYTE *)a2 + 16))
  {
    *((_BYTE *)this + 16) = 1;
    v6 = *((double *)a2 + 3);
    if (*((double *)this + 3) < v6)
      *((double *)this + 3) = v6;
  }
  else if (*((double *)a2 + 3) == 0.0)
  {
    *((_BYTE *)this + 16) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  *((_BYTE *)this + 32) |= *((_BYTE *)a2 + 32);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 40, (WTF ***)a2 + 5, a3);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 48, (WTF ***)a2 + 6, v7);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 64, (WTF ***)a2 + 8, v8);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 72, (WTF ***)a2 + 9, v9);
  *((_BYTE *)this + 80) |= *((_BYTE *)a2 + 80);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 88, (WTF ***)a2 + 11, v10);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 96, (WTF ***)a2 + 12, v11);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 104, (WTF ***)a2 + 13, v12);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 112, (WTF ***)a2 + 14, v13);
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 120, (WTF ***)a2 + 15, v14);
  *((_BYTE *)this + 128) |= *((_BYTE *)a2 + 128);
  *((_BYTE *)this + 129) |= *((_BYTE *)a2 + 129);
  v15 = *((_DWORD *)this + 33);
  if (v15 <= *((_DWORD *)a2 + 33))
    v15 = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 33) = v15;
  v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2 + 19);
  v18 = v16;
  v20 = v19;
  v21 = *((_QWORD *)a2 + 19);
  if (v21)
    v22 = (WTF::StringImpl **)(v21 + 8 * *(unsigned int *)(v21 - 4));
  else
    v22 = 0;
  if (v22 != v16)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 19, v18, v17, (uint64_t)v38);
      while (++v18 != v20)
      {
        if ((unint64_t)*v18 + 1 > 1)
          goto LABEL_18;
      }
      v18 = v20;
LABEL_18:
      ;
    }
    while (v18 != v22);
  }
  v23 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2 + 20);
  v25 = v23;
  v27 = v26;
  v28 = *((_QWORD *)a2 + 20);
  if (v28)
    v29 = (WTF::StringImpl **)(v28 + 8 * *(unsigned int *)(v28 - 4));
  else
    v29 = 0;
  if (v29 != v23)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 20, v25, v24, (uint64_t)v38);
      while (++v25 != v27)
      {
        if ((unint64_t)*v25 + 1 > 1)
          goto LABEL_27;
      }
      v25 = v27;
LABEL_27:
      ;
    }
    while (v25 != v29);
  }
  WebCore::mergeHashSet<WebCore::RegistrableDomain>((uint64_t)this + 144, (WTF ***)a2 + 18, v24);
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2 + 21);
  v32 = result;
  v34 = v33;
  v35 = *((_QWORD *)a2 + 21);
  if (v35)
    v36 = (WTF::StringImpl **)(v35 + 8 * *(unsigned int *)(v35 - 4));
  else
    v36 = 0;
  if (v36 != result)
  {
    do
    {
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 21, v32, v31, (uint64_t)v38);
      while (++v32 != v34)
      {
        if ((unint64_t)*v32 + 1 > 1)
          goto LABEL_36;
      }
      v32 = v34;
LABEL_36:
      ;
    }
    while (v32 != v36);
  }
  *((_BYTE *)this + 176) |= *((_BYTE *)a2 + 176);
  v37 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 23) |= *((_QWORD *)a2 + 23);
  *((_QWORD *)this + 24) = v37 | *((_QWORD *)a2 + 24);
  return result;
}

uint64_t WebCore::mergeHashSet<WebCore::RegistrableDomain>(uint64_t result, WTF ***a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  WTF **v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v8;
  WTF::ASCIICaseInsensitiveHash *v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  const WTF::StringImpl *v11;
  WTF::ASCIICaseInsensitiveHash *v12;
  _BYTE v13[24];

  v3 = (uint64_t *)result;
  v4 = *a2;
  if (!*a2)
  {
    v9 = 0;
    v5 = 0;
    goto LABEL_13;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3))
  {
    v9 = (WTF::ASCIICaseInsensitiveHash *)&v4[v5];
LABEL_13:
    v6 = &v4[v5];
    if (v4)
      goto LABEL_14;
    goto LABEL_16;
  }
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    while (1)
    {
      result = WTF::equal(*v4, 0, a3);
      if ((result & 1) == 0 && *v4 != (WTF *)-1)
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (WTF::ASCIICaseInsensitiveHash *)v4;
    v4 = *a2;
    if (!*a2)
      goto LABEL_16;
LABEL_14:
    v10 = (WTF::ASCIICaseInsensitiveHash *)&v4[*((unsigned int *)v4 - 1)];
    goto LABEL_17;
  }
  v9 = (WTF::ASCIICaseInsensitiveHash *)*a2;
  if (v4)
    goto LABEL_14;
LABEL_16:
  v10 = 0;
LABEL_17:
  while (v9 != v10)
  {
    result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v9, v3, (uint64_t)v13);
    v12 = (WTF::ASCIICaseInsensitiveHash *)((char *)v9 + 8);
    v9 = (WTF::ASCIICaseInsensitiveHash *)v6;
    if (v12 != (WTF::ASCIICaseInsensitiveHash *)v6)
    {
      v9 = v12;
      while (1)
      {
        result = WTF::equal(*(WTF **)v9, 0, v11);
        if ((result & 1) == 0 && *(_QWORD *)v9 != -1)
          break;
        v9 = (WTF::ASCIICaseInsensitiveHash *)((char *)v9 + 8);
        if (v9 == (WTF::ASCIICaseInsensitiveHash *)v6)
        {
          v9 = (WTF::ASCIICaseInsensitiveHash *)v6;
          break;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceLoader::cancel(WebCore::ResourceLoader *this)
{
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  CFTypeRef cf;
  char v11;

  v7 = 0;
  v8 = 0;
  WTF::URL::invalidate((WTF::URL *)&v8);
  cf = 0;
  v9[0] = 0;
  *(_QWORD *)((char *)v9 + 6) = 0;
  v11 = 1;
  WebCore::ResourceLoader::cancel(this, (uint64_t)&v7, 0);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)v9[0];
  v9[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v3 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v19 = (WTF *)v11;
              v20 = v3;
              atomic_store(1u, v11);
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_4[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v3 = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v21 = v3;
        WTF::fastFree(v15, a2);
        v3 = v21;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return a1;
}

unsigned int **WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=(unsigned int **a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;

  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
  }
  v4 = *a1;
  *a1 = a2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 6);
      *((_QWORD *)v4 + 6) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v4[8];
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, unsigned int *))off_1E33F7728[v10])(&v11, v4 + 2);
      v4[8] = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WebCore::ResourceLoader::setDefersLoading(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(_BYTE *)(this + 1091) & 2) == 0)
  {
    v3 = this;
    *(_BYTE *)(this + 760) = a2;
    v4 = *(_QWORD *)(this + 24);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      v5 = *(_QWORD *)(v4 + 16);
      *(_BYTE *)(v5 + 1037) = a2;
      if ((_DWORD)a2)
      {
        if ((*(_QWORD *)(v5 + 992) & 0xFFFFFFFFFFFFLL) != 0
          && *(double *)((*(_QWORD *)(v5 + 992) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
        {
          WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 960));
        }
      }
      else if (*(_DWORD *)(v5 + 1032))
      {
        v6 = v5 + 960;
        *(_QWORD *)(v5 + 984) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        WebCore::TimerBase::setNextFireTime(v6, v7 + 0.0);
      }
      v8 = *(void **)(*(_QWORD *)(v4 + 16) + 480);
      if (v8)
        objc_msgSend(v8, "setDefersCallbacks:", a2);
      if (*(_DWORD *)(v4 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      else
        --*(_DWORD *)(v4 + 8);
    }
    v9 = WebCore::s_platformStrategies;
    v10 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v10)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v9 + 8) = v10;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v3, a2);
  }
  return this;
}

uint64_t *WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)>::Function<WebCore::ResourceLoader::loadDataURL(void)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E33F7798;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  LODWORD(v5) = *(_DWORD *)(v4 + 32) & 0xFFFFFFFE | a2[3] & 1;
  *(_DWORD *)(v4 + 32) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 6) >> 1) & 1));
  *(_DWORD *)(v4 + 32) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 6) >> 2) & 1));
  *(_DWORD *)(v4 + 32) = v5;
  LODWORD(v5) = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 6) >> 3) & 7));
  *(_DWORD *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 32) = a2[3] & 0xFFFFFFC0 | v5 & 0x3F;
  *(_OWORD *)(v4 + 36) = *(_OWORD *)((char *)a2 + 28);
  *(_QWORD *)(v4 + 52) = *(uint64_t *)((char *)a2 + 44);
  *(_DWORD *)(v4 + 60) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 6) &= ~1u;
  *a1 = v4;
  return a1;
}

uint64_t WebCore::ResourceLoader::loadDataURL(void)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WebCore::ResourceLoader::isSubresourceLoader(WebCore::ResourceLoader *this)
{
  return 0;
}

uint64_t WebCore::ResourceLoader::checkedFrameLoader@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
  {
    v3 = *(_DWORD **)(v2 + 280);
    *a2 = v3;
    if (v3)
      ++*v3;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::ResourceLoader::cannotShowURLError(WebCore::ResourceLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 280);
    if (v2)
      ++*(_DWORD *)v2;
  }
  else
  {
    v2 = 0;
  }
  result = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v2 + 16) + 592))(*(_QWORD *)(v2 + 16), (char *)this + 336);
  if (!*(_DWORD *)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195F18594);
  }
  --*(_DWORD *)v2;
  return result;
}

WTF::StringImpl *WebCore::ResourceLoader::cancel(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  int v28;
  __int16 v29;
  CFTypeRef cf;
  char v31;

  if (!*((_BYTE *)result + 752))
  {
    v5 = (uint64_t)result;
    if (*(_BYTE *)(a2 + 60))
    {
      v6 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v6 += 2;
      v23 = v6;
      v7 = *(WTF::StringImpl **)(a2 + 8);
      if (v7)
        *(_DWORD *)v7 += 2;
      v24 = v7;
      v8 = *(_OWORD *)(a2 + 32);
      v25 = *(_OWORD *)(a2 + 16);
      v26 = v8;
      v9 = *(WTF::StringImpl **)(a2 + 48);
      if (v9)
        *(_DWORD *)v9 += 2;
      v27 = v9;
      v28 = *(_DWORD *)(a2 + 56);
      v29 = *(_WORD *)(a2 + 60);
      v10 = *(const void **)(a2 + 64);
      cf = v10;
      if (v10)
        CFRetain(v10);
      v31 = *(_BYTE *)(a2 + 72);
    }
    else
    {
      v11 = *((_QWORD *)result + 4);
      if (v11 && (v12 = *(_QWORD *)(v11 + 280)) != 0)
      {
        ++*(_DWORD *)v12;
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v12 + 16) + 568))(&v23, *(_QWORD *)(v12 + 16), (uint64_t)result + 336);
        LOBYTE(v29) = 3;
        if (!*(_DWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x195F18928);
        }
        --*(_DWORD *)v12;
      }
      else
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(*MEMORY[0x10] + 568))(&v23, MEMORY[0x10], (uint64_t)result + 336);
        LOBYTE(v29) = 3;
      }
    }
    ++*(_DWORD *)(v5 + 16);
    v13 = *(_DWORD *)(v5 + 756);
    if (!v13)
    {
      *(_DWORD *)(v5 + 756) = 1;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 296))(v5, &v23);
      v13 = *(_DWORD *)(v5 + 756);
    }
    if (v13 == 1)
    {
      *(_DWORD *)(v5 + 756) = 2;
      v14 = *(_QWORD *)(v5 + 24);
      if (v14)
      {
        v15 = *(_DWORD *)(v14 + 8);
        *(_DWORD *)(v14 + 8) = v15 + 1;
        *(_QWORD *)(*(_QWORD *)(v14 + 16) + 504) = 0;
        *(_BYTE *)(*(_QWORD *)(v14 + 16) + 528) = 1;
        if (v15)
          *(_DWORD *)(v14 + 8) = v15;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      }
      v16 = *(_QWORD *)(v5 + 40);
      if (v16)
      {
        ++*(_DWORD *)(v16 + 24);
        v17 = *(_QWORD *)(v16 + 2592);
        if (v17)
        {
          if (*(_DWORD *)(v17 - 12))
          {
            WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>((uint64_t *)(v16 + 2592), v5);
            if ((!*(_QWORD *)(v16 + 2592) || !*(_DWORD *)(*(_QWORD *)(v16 + 2592) - 12))
              && (*(_QWORD *)(v16 + 2632) & 0xFFFFFFFFFFFFLL) != 0)
            {
              WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v16 + 2600));
            }
          }
        }
        if (*(_DWORD *)(v16 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        else
          --*(_DWORD *)(v16 + 24);
      }
      v18 = *(_DWORD **)(v5 + 24);
      if (v18)
      {
        ++v18[2];
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 72))(v18);
        v19 = *(_DWORD **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 48))(v19);
          else
            --v19[2];
        }
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 48))(v18);
        else
          --v18[2];
      }
      WebCore::ResourceLoader::cleanupForError((uint64_t *)v5, (const WebCore::ResourceError *)&v23);
    }
    if (!*(_BYTE *)(v5 + 752))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 304))(v5, a3);
      if (*(_DWORD *)(v5 + 756) != 3)
      {
        *(_DWORD *)(v5 + 756) = 3;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
      }
    }
    if (*(_DWORD *)(v5 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 16);
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ResourceLoader::willSendRequest(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
}

BOOL WebCore::ResourceLoader::shouldAllowResourceToAskForCredentials(WebCore::ResourceLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t canRequest;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 8) + 128) + 8);
  if (*(_BYTE *)(v3 + 144))
    return *((_BYTE *)this + 328) != 0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*((_BYTE *)this + 328))
  {
    canRequest = 1;
  }
  else
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v3 + 296) + 192), a2);
    v7 = v6;
    if ((*((_BYTE *)this + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceLoader *)((char *)this + 336));
      *((_BYTE *)this + 520) |= 1u;
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    canRequest = WebCore::SecurityOrigin::canRequest(v7, (WebCore::ResourceLoader *)((char *)this + 336), (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  }
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v4;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  return canRequest;
}

uint64_t WebCore::ResourceLoader::didBlockAuthenticationChallenge(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ResourceRequest *v4;
  int v5;
  BOOL v6;
  int v7;
  _BOOL4 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  *(_BYTE *)(this + 761) = 1;
  if ((*(_BYTE *)(this + 1092) & 8) != 0)
  {
    v2 = this;
    if (*(_QWORD *)(this + 32))
    {
      this = WebCore::ResourceLoader::shouldAllowResourceToAskForCredentials((WebCore::ResourceLoader *)this, a2);
      if ((this & 1) == 0)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 296);
        if (v3)
          *(_DWORD *)(v3 + 24) += 2;
        v4 = (WebCore::ResourceRequest *)(v2 + 336);
        if ((*(_BYTE *)(v2 + 520) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(v4);
          v4 = (WebCore::ResourceRequest *)(v2 + 336);
          *(_BYTE *)(v2 + 520) |= 1u;
        }
        WTF::URL::stringCenterEllipsizedToLength(v4);
        if (v11)
        {
          v5 = *((_DWORD *)v11 + 1);
          if (v5 < 0)
            goto LABEL_33;
        }
        else
        {
          v5 = 0;
        }
        v6 = __OFADD__(v5, 66);
        v7 = v5 + 66;
        if (!v6 && !__OFADD__(v7, 8))
        {
          v8 = !v11 || (*((_BYTE *)v11 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v7 + 8), v8, (int8x16_t *)"Blocked ", 8u, (uint64_t)v11, (int8x16_t *)" from asking for credentials because it is a cross-origin request.", 0x42u, &v12);
          if (v12)
          {
            WebCore::Document::addConsoleMessage((_QWORD *)v3, 8, 2, &v12, 0);
            v10 = v12;
            v12 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v9);
              else
                *(_DWORD *)v10 -= 2;
            }
            this = (uint64_t)v11;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
              {
                this = WTF::StringImpl::destroy(v11, v9);
                if (!v3)
                  return this;
                goto LABEL_24;
              }
              *(_DWORD *)v11 -= 2;
            }
            if (!v3)
              return this;
LABEL_24:
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, v9);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
LABEL_34:
          __break(0xC471u);
          JUMPOUT(0x195F18C4CLL);
        }
LABEL_33:
        v12 = 0;
        goto LABEL_34;
      }
    }
  }
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  if (a2)
  {
    v9 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195F18D18);
    }
  }
  else
  {
    v9 = 0;
  }
  if (a6)
  {
    v10 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
      goto LABEL_15;
  }
  else
  {
    v10 = 0;
  }
  if ((a4 & 0x80000000) != 0 || (v11 = a4 + v10, __OFADD__((_DWORD)a4, v10)) || __OFADD__(v9, v11))
  {
    *a7 = 0;
    goto LABEL_15;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9 + v11, (a4 & 0xFF00000000) != 0, a1, v9, a3, a4, a5, v10, a7);
  if (!*a7)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x195F18CECLL);
  }
  return result;
}

void WebCore::ResourceLoader::didFinishLoading(WebCore::ResourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::ResourceLoader *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 4);
    if (v5)
    {
      v6 = v5[3];
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 40))
            v6 = *(_QWORD *)(v6 + 32);
          else
            v6 = 0;
        }
      }
      v7 = v5[4];
      v5 = (_QWORD *)v5[35];
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v8 = *((_QWORD *)this + 93);
    v9 = 134219008;
    v10 = this;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v7;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v8;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::didFinishLoading:", (uint8_t *)&v9, 0x34u);
  }
  WebCore::ResourceLoader::didFinishLoadingOnePart(this, a2);
  if (*((int *)this + 189) <= 1)
    (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 176))(this);
}

void WebCore::ResourceLoader::didFail(WebCore::ResourceLoader *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::ResourceLoader *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 4);
    if (v5)
    {
      v6 = v5[3];
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 40))
            v6 = *(_QWORD *)(v6 + 32);
          else
            v6 = 0;
        }
      }
      v7 = v5[4];
      v5 = (_QWORD *)v5[35];
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v8 = *((_QWORD *)this + 93);
    v9 = 134219008;
    v10 = this;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v7;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v8;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::didFail:", (uint8_t *)&v9, 0x34u);
  }
  if (*((int *)this + 189) <= 1)
  {
    ++*((_DWORD *)this + 4);
    WebCore::ResourceLoader::cleanupForError((uint64_t *)this, a2);
    (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 176))(this);
    if (*((_DWORD *)this + 4) == 1)
      (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 4);
  }
}

uint64_t *WebCore::ResourceLoader::cleanupForError(uint64_t *this, const WebCore::ResourceError *a2)
{
  uint64_t v2;
  _DWORD *v3;

  if (!*((_BYTE *)this + 753))
  {
    *((_BYTE *)this + 753) = 1;
    if ((*((_BYTE *)this + 1090) & 1) == 0)
    {
      if (this[93])
      {
        v2 = this[4];
        if (v2 && (v3 = *(_DWORD **)(v2 + 280)) != 0)
        {
          ++*v3;
          this = WebCore::ResourceLoadNotifier::didFailToLoad((WebCore::ResourceLoadNotifier *)(v3 + 8), (void **)this, a2);
          if (!*v3)
          {
            __break(0xC471u);
            JUMPOUT(0x195F19080);
          }
          --*v3;
        }
        else
        {
          return WebCore::ResourceLoadNotifier::didFailToLoad((WebCore::ResourceLoadNotifier *)0x20, (void **)this, a2);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ResourceLoader::cancelledError@<X0>(WebCore::ResourceLoader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *((_QWORD *)this + 4);
  if (v3 && (v4 = *(_QWORD *)(v3 + 280)) != 0)
  {
    ++*(_DWORD *)v4;
    result = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v4 + 16) + 568))(*(_QWORD *)(v4 + 16), (char *)this + 336);
    *(_BYTE *)(a2 + 60) = 3;
    if (!*(_DWORD *)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x195F19118);
    }
    --*(_DWORD *)v4;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, char *))(*MEMORY[0x10] + 568))(MEMORY[0x10], (char *)this + 336);
    *(_BYTE *)(a2 + 60) = 3;
  }
  return result;
}

uint64_t WebCore::ResourceLoader::blockedError(WebCore::ResourceLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 280);
    if (v2)
      ++*(_DWORD *)v2;
  }
  else
  {
    v2 = 0;
  }
  result = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v2 + 16) + 576))(*(_QWORD *)(v2 + 16), (char *)this + 336);
  if (!*(_DWORD *)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195F191BCLL);
  }
  --*(_DWORD *)v2;
  return result;
}

uint64_t WebCore::ResourceLoader::willSendRequestAsync(uint64_t a1, _DWORD *a2, WebCore::ResourceRequest *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  WebCore::ApplicationCacheHost *v11;
  int v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2)
    ++a2[2];
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    ++*(_DWORD *)(v10 + 24);
  if ((*(_BYTE *)(a1 + 1092) & 4) != 0 || (*(_BYTE *)(a4 + 138) & 1) != 0)
    goto LABEL_12;
  v11 = *(WebCore::ApplicationCacheHost **)(v10 + 2872);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if ((WTF::protocolHostAndPortAreEqual() & 1) != 0
    || (WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(v11, (WebCore::ResourceLoader *)a1, 0) & 1) == 0)
  {
LABEL_12:
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  if (*(_DWORD *)(v10 + 24) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    if (v12)
      goto LABEL_15;
LABEL_25:
    result = (*(uint64_t (**)(uint64_t, WebCore::ResourceRequest *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 288))(a1, this, a4, a5);
    goto LABEL_26;
  }
  --*(_DWORD *)(v10 + 24);
  if (!v12)
    goto LABEL_25;
LABEL_15:
  v13 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD **)(a1 + 32);
    if (v14)
    {
      v15 = v14[3];
      if (v15)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (v15)
        {
          if (*(_BYTE *)(v15 + 40))
            v15 = *(_QWORD *)(v15 + 32);
          else
            v15 = 0;
        }
      }
      v16 = v14[4];
      v14 = (_QWORD *)v14[35];
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v17 = *(_QWORD *)(a1 + 744);
    v20 = 134219008;
    v21 = a1;
    v22 = 2048;
    v23 = v15;
    v24 = 2048;
    v25 = v16;
    v26 = 2048;
    v27 = v14;
    v28 = 2048;
    v29 = v17;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestAsync: exiting early because maybeLoadFallbackForRedirect returned false", (uint8_t *)&v20, 0x34u);
  }
  v18 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v18 + 16))(v18, this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_26:
  if (a2)
  {
    if (a2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 48))(a2);
    else
      --a2[2];
  }
  return result;
}

uint64_t WebCore::ResourceLoader::didSendData(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(WebCore::ResourceLoader *, uint64_t, uint64_t))(*(_QWORD *)this + 200))(this, a3, a4);
}

uint64_t WebCore::ResourceLoader::didReceiveResponseAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  WebCore::ApplicationCacheHost *v8;
  _BOOL4 v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    ++*(_DWORD *)(v7 + 24);
  v9 = (*(_BYTE *)(a1 + 1092) & 4) == 0
    && ((v8 = *(WebCore::ApplicationCacheHost **)(v7 + 2872),
         WebCore::ResourceResponse::platformLazyInit(a3, 1),
         (*(__int16 *)(a3 + 136) - 400) < 0x64)
     || (WebCore::ResourceResponse::platformLazyInit(a3, 1), (*(__int16 *)(a3 + 136) - 500) <= 0x63))
    && (WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(v8, (WebCore::ResourceLoader *)a1, 0) & 1) != 0;
  if (*(_DWORD *)(v7 + 24) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v9)
      goto LABEL_11;
  }
  else
  {
    --*(_DWORD *)(v7 + 24);
    if (v9)
    {
LABEL_11:
      v10 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, a3, a4);
}

uint64_t WebCore::ResourceLoader::didReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 216))(a1, a3, a4, 1);
}

uint64_t WebCore::ResourceLoader::didReceiveBuffer(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2, const WebCore::FragmentedSharedBuffer *a3, int a4)
{
  return (*(uint64_t (**)(WebCore::ResourceLoader *, const WebCore::FragmentedSharedBuffer *, _QWORD, uint64_t))(*(_QWORD *)this + 224))(this, a3, a4, 1);
}

uint64_t WebCore::ResourceLoader::didFinishLoading(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2, const WebCore::NetworkLoadMetrics *a3)
{
  return (*(uint64_t (**)(WebCore::ResourceLoader *, const WebCore::NetworkLoadMetrics *))(*(_QWORD *)this + 232))(this, a3);
}

uint64_t WebCore::ResourceLoader::didFail(uint64_t this, WebCore::ResourceHandle *a2, const WebCore::ResourceError *a3)
{
  WebCore::ResourceLoader *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ResourceLoader *v8;
  char v9;

  v4 = (WebCore::ResourceLoader *)this;
  v5 = *(_QWORD *)(this + 40);
  if (v5)
    ++*(_DWORD *)(v5 + 24);
  if ((*(_BYTE *)(this + 1092) & 4) != 0 || *((_BYTE *)a3 + 60) == 3)
    goto LABEL_14;
  this = *(_QWORD *)(v5 + 2872);
  v6 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v7 = v6 ? v6 - 56 : 0;
  v8 = *(WebCore::ResourceLoader **)(v7 + 80);
  if (v8)
  {
    v8 = (WebCore::ResourceLoader *)*((_QWORD *)v8 + 1);
    if (v8)
      v8 = (WebCore::ResourceLoader *)*((_QWORD *)v8 + 48);
  }
  if (v8 == v4
    || (this = WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache((WebCore::ApplicationCacheHost *)this, v4, 0), (this & 1) == 0))
  {
LABEL_14:
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  if (*(_DWORD *)(v5 + 24) != 1)
  {
    --*(_DWORD *)(v5 + 24);
    if ((v9 & 1) != 0)
      return this;
    return (*(uint64_t (**)(WebCore::ResourceLoader *, const WebCore::ResourceError *))(*(_QWORD *)v4 + 240))(v4, a3);
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if ((v9 & 1) == 0)
    return (*(uint64_t (**)(WebCore::ResourceLoader *, const WebCore::ResourceError *))(*(_QWORD *)v4 + 240))(v4, a3);
  return this;
}

WTF::StringImpl *WebCore::ResourceLoader::wasBlocked(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _BYTE v15[22];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  _QWORD v21[2];
  CFTypeRef cf;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    if (v4)
    {
      v5 = v4[3];
      if (v5)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 40))
            v5 = *(_QWORD *)(v5 + 32);
          else
            v5 = 0;
        }
      }
      v6 = v4[4];
      v4 = (_QWORD *)v4[35];
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v7 = *((_QWORD *)this + 93);
    *(_DWORD *)v15 = 134219008;
    *(_QWORD *)&v15[4] = this;
    *(_WORD *)&v15[12] = 2048;
    *(_QWORD *)&v15[14] = v5;
    v16 = 2048;
    v17 = v6;
    v18 = 2048;
    v19 = v4;
    v20 = 2048;
    v21[0] = v7;
    _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::wasBlocked: resource load canceled because of content blocker", v15, 0x34u);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 280);
    if (v9)
      ++*(_DWORD *)v9;
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v9 + 16) + 576))(v15, *(_QWORD *)(v9 + 16), (char *)this + 336);
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195F19860);
  }
  --*(_DWORD *)v9;
  (*(void (**)(WebCore::ResourceLoader *, _BYTE *))(*(_QWORD *)this + 240))(this, v15);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(WTF::StringImpl **)((char *)v21 + 4);
  *(_QWORD *)((char *)v21 + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)&v15[8];
  *(_QWORD *)&v15[8] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = *(WTF::StringImpl **)v15;
  *(_QWORD *)v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceLoader::cannotShowURL(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _BYTE v15[22];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  _QWORD v21[2];
  CFTypeRef cf;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    if (v4)
    {
      v5 = v4[3];
      if (v5)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 40))
            v5 = *(_QWORD *)(v5 + 32);
          else
            v5 = 0;
        }
      }
      v6 = v4[4];
      v4 = (_QWORD *)v4[35];
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v7 = *((_QWORD *)this + 93);
    *(_DWORD *)v15 = 134219008;
    *(_QWORD *)&v15[4] = this;
    *(_WORD *)&v15[12] = 2048;
    *(_QWORD *)&v15[14] = v5;
    v16 = 2048;
    v17 = v6;
    v18 = 2048;
    v19 = v4;
    v20 = 2048;
    v21[0] = v7;
    _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::wasBlocked: resource load canceled because of invalid URL", v15, 0x34u);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 280);
    if (v9)
      ++*(_DWORD *)v9;
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v9 + 16) + 592))(v15, *(_QWORD *)(v9 + 16), (char *)this + 336);
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195F19A68);
  }
  --*(_DWORD *)v9;
  (*(void (**)(WebCore::ResourceLoader *, _BYTE *))(*(_QWORD *)this + 240))(this, v15);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(WTF::StringImpl **)((char *)v21 + 4);
  *(_QWORD *)((char *)v21 + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)&v15[8];
  *(_QWORD *)&v15[8] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = *(WTF::StringImpl **)v15;
  *(_QWORD *)v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ResourceLoader::didReceiveAuthenticationChallenge(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2, id *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  WebCore::ThreadableBlobRegistry *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  ++*((_DWORD *)this + 4);
  v5 = *(_DWORD *)((char *)this + 1090);
  if ((v5 & 0x30) != 0x10)
    goto LABEL_16;
  if ((v5 & 0x80000) == 0 || !WebCore::ResourceLoader::shouldAllowResourceToAskForCredentials(this, a2))
    goto LABEL_15;
  v6 = *((unsigned __int8 *)this + 978);
  if (v6 != 2)
  {
    if (v6 != 1)
      goto LABEL_15;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 4) + 296) + 192), a2);
    v8 = (WebCore::ResourceLoader *)((char *)this + 536);
    if ((*((_BYTE *)this + 720) & 1) == 0)
    {
      v13 = v7;
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceLoader *)((char *)this + 536));
      v8 = (WebCore::ResourceLoader *)((char *)this + 536);
      v7 = v13;
      *((_BYTE *)this + 720) |= 1u;
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    if (!WebCore::SecurityOrigin::canRequest(v7, v8, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance))
    {
LABEL_15:
      WebCore::ResourceLoader::didBlockAuthenticationChallenge((uint64_t)this, a2);
LABEL_16:
      v12 = WebCore::AuthenticationChallenge::authenticationClient(a3);
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v12 + 8))(v12, a3);
      goto LABEL_17;
    }
  }
  v9 = *((_QWORD *)this + 4);
  if (v9 && (v10 = *(_DWORD **)(v9 + 280)) != 0)
  {
    ++*v10;
    result = WebCore::ResourceLoadNotifier::didReceiveAuthenticationChallenge((WebCore::ResourceLoadNotifier *)(v10 + 8), this, (const WebCore::AuthenticationChallenge *)a3);
    if (!*v10)
    {
      __break(0xC471u);
      JUMPOUT(0x195F19BECLL);
    }
    --*v10;
  }
  else
  {
    result = WebCore::ResourceLoadNotifier::didReceiveAuthenticationChallenge((WebCore::ResourceLoadNotifier *)0x20, this, (const WebCore::AuthenticationChallenge *)a3);
  }
LABEL_17:
  if (*((_DWORD *)this + 4) == 1)
    return (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 4);
  return result;
}

uint64_t WebCore::ResourceLoader::canAuthenticateAgainstProtectionSpaceAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a3);
  v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebCore::ResourceLoader::canAuthenticateAgainstProtectionSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  ++*(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 280);
    if (v4)
      ++*(_DWORD *)v4;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_DWORD **)(a1 + 40);
  if (v6)
    ++v6[6];
  v7 = (*(uint64_t (**)(uint64_t, _DWORD *, _QWORD, uint64_t))(*(_QWORD *)v5 + 120))(v5, v6, *(_QWORD *)(a1 + 744), a2);
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    else
      --v6[6];
  }
  if (!*(_DWORD *)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195F19D9CLL);
  }
  --*(_DWORD *)v4;
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v7;
}

uint64_t WebCore::ResourceLoader::connectionProperties(WebCore::ResourceLoader *this, WebCore::ResourceHandle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*MEMORY[0x10] + 128))(MEMORY[0x10], *((_QWORD *)this + 5), *((_QWORD *)this + 93));
  v3 = *(_QWORD *)(v2 + 280);
  if (!v3)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*MEMORY[0x10] + 128))(MEMORY[0x10], *((_QWORD *)this + 5), *((_QWORD *)this + 93));
  ++*(_DWORD *)v3;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 16) + 128))(*(_QWORD *)(v3 + 16), *((_QWORD *)this + 5), *((_QWORD *)this + 93));
  if (!*(_DWORD *)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195F19E24);
  }
  --*(_DWORD *)v3;
  return result;
}

uint64_t WebCore::ResourceTiming::fromSynchronousLoad@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, WebCore::SecurityOrigin *a6@<X5>, uint64_t a7@<X8>)
{
  return WebCore::ResourceTiming::ResourceTiming(a7, a1, a2, a3, a4, a5, a6);
}

uint64_t WebCore::ResourceTiming::populateServerTiming@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (*(_BYTE *)(this + 209))
  {
    v3 = this;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(unsigned int *)(this + 204);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        this = WTF::fastMalloc((WTF *)(8 * v4));
        *(_DWORD *)(a2 + 8) = v4;
        *(_QWORD *)a2 = this;
        v5 = *(unsigned int *)(v3 + 204);
        if ((_DWORD)v5)
        {
          v6 = this;
          v7 = 0;
          v8 = *(_QWORD *)(v3 + 192);
          v9 = v8 + 32 * v5;
          do
          {
            v10 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8)
              *(_DWORD *)v10 += 2;
            v17 = v10;
            v11 = *(double *)(v8 + 8);
            v12 = *(WTF::StringImpl **)(v8 + 16);
            if (v12)
              *(_DWORD *)v12 += 2;
            v16 = v12;
            WebCore::PerformanceServerTiming::create((uint64_t *)&v17, (uint64_t *)&v16, &v15, v11);
            v14 = v16;
            v16 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
            this = (uint64_t)v17;
            v17 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
              else
                *(_DWORD *)this -= 2;
            }
            *(_QWORD *)(v6 + 8 * v7++) = v15;
            *(_DWORD *)(a2 + 12) = v7;
            v8 += 32;
          }
          while (v8 != v9);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return this;
}

double WebCore::ResourceTiming::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  WTF::URL::isolatedCopy();
  WTF::String::isolatedCopy();
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v25 = 0;
  v6 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 64);
  v18 = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 96);
  v20 = v7;
  v21 = *(_OWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 144);
  WTF::String::isolatedCopy();
  *(_DWORD *)v24 = *(_DWORD *)(a1 + 160);
  *(_OWORD *)&v24[8] = *(_OWORD *)(a1 + 168);
  v8 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 184);
  if (v8)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v8, &v15);
    v25 = v15;
  }
  v15 = 0;
  v16 = 0.0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore12ServerTimingELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((uint64_t)&v15, (uint64_t *)(a1 + 192));
  *(_QWORD *)a2 = v27;
  *(_OWORD *)(a2 + 8) = v28;
  *(_OWORD *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 40) = v26;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  v9 = v20;
  *(_OWORD *)(a2 + 96) = v19;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v21;
  v10 = v18;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v10;
  v11 = v23;
  *(_QWORD *)(a2 + 144) = v22;
  *(_QWORD *)(a2 + 152) = v11;
  v12 = *(_QWORD *)&v24[16];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v24;
  v13 = v25;
  *(_QWORD *)(a2 + 176) = v12;
  *(_QWORD *)(a2 + 184) = v13;
  *(_QWORD *)(a2 + 192) = v15;
  result = v16;
  *(double *)(a2 + 200) = v16;
  *(_WORD *)(a2 + 208) = 0;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = v2 + 24 * v3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2 + 24 * v3;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  v6 = a2[1];
  if (!v6)
    return 0;
  if (!*(_QWORD *)(v6 + 8))
    return 0;
  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  for (i = 1; ; v12 = (v12 + i++) & v8)
  {
    v14 = (unsigned int **)(v7 + 24 * v12);
    v15 = *v14;
    if (*v14 == (unsigned int *)-1)
      continue;
    if (!v15)
      break;
    if (v15 == (unsigned int *)v6)
    {
      v16 = *(_DWORD *)(v7 - 4);
      goto LABEL_12;
    }
  }
  v16 = *(_DWORD *)(v7 - 4);
  v14 = (unsigned int **)(v7 + 24 * v16);
LABEL_12:
  if ((unsigned int **)(v7 + 24 * v16) == v14)
    return 0;
  v17 = *v14;
  *v14 = 0;
  if (v17)
  {
    do
    {
      v26 = __ldaxr(v17);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v17));
    if (!v27)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  v18 = (WTF::StringImpl *)v14[1];
  *v14 = (unsigned int *)-1;
  v14[1] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v20 = *(_DWORD *)(v19 - 12) - 1;
  else
    v20 = -1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v22 = 6 * *(_DWORD *)(v21 - 12);
    v23 = *(_DWORD *)(v21 - 4);
    if (v22 < v23 && v23 >= 9)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v23 >> 1, 0);
  }
  return 1;
}

unsigned int *WebCore::SinkDocument::createParser@<X0>(WebCore::SinkDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A3D50;
  *(_WORD *)(v4 + 12) = 0;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v6 = __ldaxr(result);
    while (__stlxr(v6 + 1, result));
  }
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)v4 = off_1E33F7690;
  *a2 = v4;
  return result;
}

unsigned int *WebCore::FrameLoader::SubframeLoader::createFrameIfNecessary(unsigned int *this, WebCore::HTMLFrameOwnerElement *a2, const WTF::AtomString *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;

  v4 = *((_QWORD *)a2 + 14);
  if (v4 && *(_QWORD *)(v4 + 8))
    return this;
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v5 + 280);
  ++*(_DWORD *)v8;
  this = (unsigned int *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, const WTF::AtomString *, WebCore::HTMLFrameOwnerElement *))(**(_QWORD **)(v8 + 16) + 864))(&v21, *(_QWORD *)(v8 + 16), a3, a2);
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v19 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v22 = v19;
      WTF::ensureOnMainThread();
      this = v22;
      v22 = 0;
      if (this)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
    }
  }
  if (!*(_DWORD *)v8)
    goto LABEL_29;
  --*(_DWORD *)v8;
  do
  {
    v13 = __ldaxr(v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v6));
  if (!v14)
  {
    atomic_store(1u, v6);
    v20 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E31FE290;
    *((_QWORD *)v20 + 1) = v6;
    v22 = v20;
    WTF::ensureOnMainThread();
    this = v22;
    v22 = 0;
    if (this)
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  v15 = *((_QWORD *)a2 + 14);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      if (!*(_BYTE *)(v16 + 144))
      {
        v17 = *(_QWORD *)(v16 + 296);
        if (v17)
        {
          *(_DWORD *)(v17 + 24) += 2;
          this = (unsigned int *)(*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *))(*(_QWORD *)a2 + 1264))(a2);
          if ((_DWORD)this)
            *(_BYTE *)(v17 + 272) = (_BYTE)this;
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
        return this;
      }
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x195F1A55CLL);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::FrameLoader::SubframeLoader::completeURL(WebCore::FrameLoader::SubframeLoader *this, const WTF::String *a2, _QWORD *a3)
{
  WTF::StringImpl *result;
  void *v5;

  if (!a2)
    return WebCore::Document::completeURL(0, a3, 848, 0, this);
  *((_DWORD *)a2 + 6) += 2;
  result = WebCore::Document::completeURL(a2, a3, (uint64_t)a2 + 848, 0, this);
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef(a2, v5);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::canLoadJavaScriptURL(WebCore *this, uint64_t (**a2)(), const WTF::URL *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t (**v9)();
  void *v10;
  int v11;
  unsigned int v13;
  uint64_t result;
  uint64_t (*v15)();

  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v5 + 192));
  v7 = v6;
  if (v6)
  {
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
  }
  v9 = (uint64_t (**)())WTF::aboutBlankURL((WTF *)v6);
  LODWORD(v15) = 0;
  v11 = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v7, v9, &v15, a2, (uint64_t)this);
  if (v7)
  {
    if (!atomic_load(v7))
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    do
      v13 = __ldaxr(v7);
    while (__stlxr(v13 - 1, v7));
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (v11)
    return (*(uint64_t (**)(WebCore *, uint64_t (**)()))(*(_QWORD *)this + 1256))(this, a2);
  else
    return 0;
}

uint64_t WebCore::findPluginMIMETypeFromURL(WebCore *this, WebCore::Page *a2, const WTF::URL *a3)
{
  const char *v3;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::PluginData *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t PathComponent;
  unint64_t v58;

  PathComponent = WTF::URL::lastPathComponent(a3);
  v58 = v6;
  result = WTF::StringView::reverseFind((uint64_t)&PathComponent, 0x2Eu, 0xFFFFFFFF);
  if (result == -1)
    goto LABEL_34;
  v9 = (result + 1);
  if (v58 <= v9)
  {
    v10 = 0x100000000;
    v3 = "";
  }
  else
  {
    if ((_DWORD)result == -1)
    {
      v3 = (const char *)PathComponent;
      v10 = v58;
      goto LABEL_5;
    }
    v10 = (v58 - v9);
    v18 = BYTE4(v58);
    v17 = v58 - (unint64_t)v9;
    if (BYTE4(v58))
    {
      if (v17 >= v10)
      {
        v3 = (const char *)(PathComponent + v9);
        v10 |= 0x100000000uLL;
        goto LABEL_5;
      }
LABEL_48:
      __break(1u);
LABEL_49:
      if (!v18)
      {
        do
        {
          v50 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v50)
          {
            v51 = *(uint64_t **)(v9 + 16);
            v52 = 8 * v50;
            do
            {
              v53 = *v51;
              if (*v51)
                LODWORD(v53) = *(_DWORD *)(v53 + 4);
              if ((_DWORD)v53 == (_DWORD)v10)
                goto LABEL_77;
              ++v51;
              v52 -= 8;
            }
            while (v52);
          }
          v9 += 32;
        }
        while (v9 != v17);
        goto LABEL_33;
      }
      v35 = v3 + 2;
      v36 = v18 - 1;
      while (1)
      {
        v37 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v37)
          break;
LABEL_67:
        v9 += 32;
        if (v9 == v17)
          goto LABEL_33;
      }
      v38 = *(uint64_t **)(v9 + 16);
      v39 = &v38[v37];
      while (1)
      {
        v40 = *v38;
        if (*v38 && *(_DWORD *)(v40 + 4) == (_DWORD)v10)
        {
          v41 = *(unsigned __int8 **)(v40 + 8);
          v42 = *(unsigned __int16 *)v3;
          v8 = (v42 - 65) < 0x1A;
          v43 = v42 | (32 * v8);
          if ((*(_BYTE *)(v40 + 16) & 4) != 0)
          {
            if (v43 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v41))
            {
              v45 = 0;
              v48 = v41 + 1;
              do
              {
                if (v36 == v45)
                  goto LABEL_77;
                v49 = *(unsigned __int16 *)&v35[2 * v45] | (32
                                                          * (*(unsigned __int16 *)&v35[2 * v45] - 65 < 0x1A));
                v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v48[v45++]);
              }
              while (v49 == (_DWORD)v8);
LABEL_65:
              if (v45 >= v18)
                goto LABEL_77;
            }
          }
          else
          {
            v44 = *(unsigned __int16 *)v41;
            v8 = (v44 - 65) < 0x1A;
            if (v43 == (v44 | (32 * (_DWORD)v8)))
            {
              v45 = 0;
              v46 = v41 + 2;
              do
              {
                if (v36 == v45)
                  goto LABEL_77;
                v47 = *(unsigned __int16 *)&v35[2 * v45] | (32
                                                          * (*(unsigned __int16 *)&v35[2 * v45] - 65 < 0x1A));
                v8 = *(unsigned __int16 *)&v46[2 * v45] | (32
                                                         * (*(unsigned __int16 *)&v46[2 * v45]
                                                                        - 65 < 0x1A));
                ++v45;
              }
              while (v47 == (_DWORD)v8);
              goto LABEL_65;
            }
          }
        }
        if (++v38 == v39)
          goto LABEL_67;
      }
    }
    if (v17 < v10)
      goto LABEL_48;
    v3 = (const char *)(PathComponent + 2 * v9);
  }
LABEL_5:
  v11 = (WebCore::PluginData *)WebCore::Page::pluginData(a2);
  v55 = 0;
  v56 = 0;
  v13 = WebCore::PluginData::webVisiblePlugins(v11, v12);
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14)
  {
    v15 = 56 * v14;
    v16 = (uint64_t *)(*(_QWORD *)v13 + 24);
    do
    {
      WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unsigned int *)&v55, v16);
      v16 += 7;
      v15 -= 56;
    }
    while (v15);
  }
  if (!HIDWORD(v56))
  {
LABEL_33:
    result = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, (WTF::StringImpl *)v8);
LABEL_34:
    *(_QWORD *)this = 0;
    return result;
  }
  v9 = v55;
  v17 = v55 + 32 * HIDWORD(v56);
  v18 = v10;
  if ((v10 & 0xFF00000000) == 0)
    goto LABEL_49;
  if (!(_DWORD)v10)
  {
    do
    {
      v32 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v9 + 16);
        v34 = 8 * v32;
        do
        {
          if (!*(_QWORD *)v33 || !*(_DWORD *)(*(_QWORD *)v33 + 4))
            goto LABEL_77;
          v33 += 8;
          v34 -= 8;
        }
        while (v34);
      }
      v9 += 32;
    }
    while (v9 != v17);
    goto LABEL_33;
  }
  v19 = v3 + 1;
  v20 = v10 - 1;
  while (1)
  {
    v21 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v21)
      break;
LABEL_30:
    v9 += 32;
    if (v9 == v17)
      goto LABEL_33;
  }
  v22 = *(uint64_t **)(v9 + 16);
  v23 = &v22[v21];
  while (1)
  {
    v24 = *v22;
    if (!*v22 || *(_DWORD *)(v24 + 4) != (_DWORD)v10)
      goto LABEL_22;
    v25 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) == 0)
      break;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v3) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + *v25))
    {
      v26 = 0;
      v27 = v25 + 1;
      while (v20 != v26)
      {
        v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v19[v26]);
        v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[v26++]);
        if (v28 != (_DWORD)v8)
          goto LABEL_21;
      }
      goto LABEL_77;
    }
LABEL_22:
    if (++v22 == v23)
      goto LABEL_30;
  }
  v29 = *(unsigned __int16 *)v25;
  v8 = (v29 - 65) < 0x1A;
  if ((v29 | (32 * (_DWORD)v8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v3))
    goto LABEL_22;
  v26 = 0;
  v30 = v25 + 2;
  while (v20 != v26)
  {
    v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v19[v26]);
    v8 = *(unsigned __int16 *)&v30[2 * v26] | (32
                                             * (*(unsigned __int16 *)&v30[2 * v26] - 65 < 0x1A));
    ++v26;
    if ((_DWORD)v8 != v31)
    {
LABEL_21:
      if (v26 >= v10)
        break;
      goto LABEL_22;
    }
  }
LABEL_77:
  v54 = *(_DWORD **)v9;
  if (v54)
    *v54 += 2;
  *(_QWORD *)this = v54;
  return WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, (WTF::StringImpl *)v8);
}

BOOL WebCore::FrameLoader::SubframeLoader::requestObject(uint64_t a1, WebCore::HTMLObjectElement *a2, _QWORD *a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, uint64_t a7)
{
  _BOOL8 v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v20;
  void *v21;
  int hasFallbackContent;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Page *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  const WTF::String *v46;
  const WTF::URL *v47;
  const WTF::URL *v48;
  WebCore::FrameLoader *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  WebCore **v63;
  unsigned int *v64;
  unsigned int v65;
  char shouldBlockRequestForRunnableContent;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  WTF *v88;
  int v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WebCore::Page *v94;
  WTF::StringImpl *v95;
  WebCore::PluginData *v96;
  void *v97;
  uint64_t v98;
  const WTF::StringImpl *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF **v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v111;
  void *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  __int128 v124;
  __int128 v125;
  WTF::StringImpl *v126;
  __int128 v127;
  __int128 v128;
  WTF::StringImpl *v129;

  if ((!*a3 || !*(_DWORD *)(*a3 + 4)) && (!*a5 || !*((_DWORD *)*a5 + 1)))
    return 0;
  v15 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  v126 = 0;
  WTF::URL::invalidate((WTF::URL *)&v126);
  if (*a3 && *(_DWORD *)(*a3 + 4))
  {
    WebCore::FrameLoader::SubframeLoader::completeURL((WebCore::FrameLoader::SubframeLoader *)&v123, *(const WTF::String **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296), a3);
    v24 = v123;
    v123 = 0;
    v25 = v126;
    v126 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        v26 = v123;
      }
      else
      {
        v26 = 0;
        *(_DWORD *)v25 -= 2;
      }
    }
    else
    {
      v26 = 0;
    }
    v127 = v124;
    LODWORD(v124) = v124 & 0xFFFFFFFE;
    v128 = v125;
    v123 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  v16 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v15 + 192));
  if (v16)
  {
    v17 = v16;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v16, (WebCore::SecurityOriginData *)&v126, 0, 0);
    if (!atomic_load(v17))
    {
      __break(0xC471u);
      JUMPOUT(0x195F1B110);
    }
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::SecurityOriginData *)&v126, 0, 0);
  }
  if ((WTF::URL::protocolIsJavaScript((WTF::URL *)&v126) & 1) == 0)
  {
    v122 = a7;
    if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      hasFallbackContent = WebCore::HTMLObjectElement::hasFallbackContent(a2, v21);
    else
      hasFallbackContent = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v28 = (unsigned int *)(v27 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v30 = *(_QWORD *)(v27 + 280);
    ++*(_DWORD *)v30;
    v31 = (*(uint64_t (**)(_QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(v30 + 16) + 888))(*(_QWORD *)(v30 + 16), &v126, a5);
    if (!*(_DWORD *)v30)
    {
      __break(0xC471u);
      JUMPOUT(0x195F1B130);
    }
    v32 = v31;
    --*(_DWORD *)v30;
    if (v31)
      v33 = 0;
    else
      v33 = hasFallbackContent;
    do
    {
      v34 = __ldaxr(v28);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v28));
    if (!v35)
    {
      atomic_store(1u, v28);
      v73 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v73 = off_1E31FE290;
      *((_QWORD *)v73 + 1) = v28;
      v123 = v73;
      WTF::ensureOnMainThread();
      v74 = v123;
      v123 = 0;
      if (v74)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v74 + 8))(v74);
    }
    if (v32 != 3 && v32)
    {
      v14 = WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(a1, a2, (uint64_t)&v126, a4, 1, 1) != 0;
      goto LABEL_185;
    }
    v36 = *a5;
    if (*a5)
    {
      *(_DWORD *)v36 += 2;
      v129 = v36;
      if (*((_DWORD *)v36 + 1))
        goto LABEL_46;
    }
    else
    {
      v129 = 0;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 24);
        if (v39)
        {
          v40 = *(WebCore::Page **)(v39 + 8);
          if (v40)
          {
            ++*(_DWORD *)v40;
            WebCore::findPluginMIMETypeFromURL((WebCore *)&v123, v40, (const WTF::URL *)&v126);
            v129 = v123;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v21);
              else
                *(_DWORD *)v36 -= 2;
            }
            if (*(_DWORD *)v40 == 1)
            {
              WebCore::Page::~Page((uint64_t)v40);
              WTF::fastFree(v71, v72);
            }
            else
            {
              --*(_DWORD *)v40;
            }
          }
        }
      }
    }
LABEL_46:
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v41 + 136) + 680) & 0x8000000000000) == 0)
    {
      if (!WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)&v129))goto LABEL_77;
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    }
    v42 = *(_QWORD *)(v41 + 296);
    if (v42)
    {
      *(_DWORD *)(v42 + 24) += 2;
      if ((*(_BYTE *)(v42 + 268) & 2) == 0)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v42 + 192), (WTF::StringImpl *)v21);
        v44 = v43;
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 + 1, v43));
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        if ((WebCore::SecurityOrigin::canDisplay((uint64_t)v43, (WTF::URL *)&v126, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) == 0)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          v56 = (unsigned int *)(v55 + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 + 1, v56));
          WebCore::FrameLoader::reportLocalLoadFailed(v55, (WebCore::LocalFrame *)&v126, v46);
          if (v55)
          {
            do
            {
              v58 = __ldaxr(v56);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v56));
            if (!v59)
            {
              atomic_store(1u, v56);
              v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v54 = off_1E31FE290;
              *((_QWORD *)v54 + 1) = v56;
LABEL_216:
              v123 = v54;
              WTF::ensureOnMainThread();
              v116 = v123;
              v123 = 0;
              if (v116)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v116 + 8))(v116);
            }
          }
LABEL_70:
          if (v44)
          {
            do
            {
              v60 = __ldaxr(v44);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v44));
            if (!v61)
            {
              atomic_store(1u, v44);
              v113 = (WTF::StringImpl *)*((_QWORD *)v44 + 6);
              *((_QWORD *)v44 + 6) = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = (WTF::StringImpl *)*((_QWORD *)v44 + 5);
              *((_QWORD *)v44 + 5) = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v115 = v44[8];
              if ((_DWORD)v115 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7728[v115])(&v123, v44 + 2);
              v44[8] = -1;
              WTF::fastFree((WTF *)v44, v21);
            }
          }
          goto LABEL_73;
        }
        if (!WTF::portAllowed() || WebCore::isIPAddressDisallowed((WebCore *)&v126, v47))
        {
          v49 = *(WebCore::FrameLoader **)(*(_QWORD *)(a1 + 8) + 8);
          v50 = (unsigned int *)((char *)v49 + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 + 1, v50));
          WebCore::FrameLoader::reportBlockedLoadFailed(v49, (WebCore::LocalFrame *)&v126, v48);
          do
          {
            v52 = __ldaxr(v50);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v50));
          if (!v53)
          {
            atomic_store(1u, v50);
            v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v54 = off_1E31FE290;
            *((_QWORD *)v54 + 1) = v50;
            goto LABEL_216;
          }
          goto LABEL_70;
        }
        v63 = *(WebCore ***)(*(_QWORD *)(a1 + 8) + 8);
        v64 = (unsigned int *)(v63 + 1);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 + 1, v64));
        shouldBlockRequestForRunnableContent = WebCore::MixedContentChecker::shouldBlockRequestForRunnableContent(v63, (WebCore::Document *)v44, (WebCore::LocalFrame *)&v126, 1);
        do
        {
          v67 = __ldaxr(v64);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v64));
        if (!v68)
        {
          atomic_store(1u, v64);
          v117 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v117 = off_1E31FE290;
          *((_QWORD *)v117 + 1) = v64;
          v123 = v117;
          WTF::ensureOnMainThread();
          v118 = v123;
          v123 = 0;
          if (v118)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v118 + 8))(v118);
        }
        do
        {
          v69 = __ldaxr(v44);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v44));
        if (!v70)
        {
          atomic_store(1u, v44);
          v119 = (WTF::StringImpl *)*((_QWORD *)v44 + 6);
          *((_QWORD *)v44 + 6) = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
              WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v119 -= 2;
          }
          v120 = (WTF::StringImpl *)*((_QWORD *)v44 + 5);
          *((_QWORD *)v44 + 5) = 0;
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
              WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v120 -= 2;
          }
          v121 = v44[8];
          if ((_DWORD)v121 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7728[v121])(&v123, v44 + 2);
          v44[8] = -1;
          WTF::fastFree((WTF *)v44, v21);
          if ((shouldBlockRequestForRunnableContent & 1) != 0)
            goto LABEL_73;
LABEL_86:
          v62 = 0;
LABEL_74:
          if (*(_DWORD *)(v42 + 24) == 2)
          {
            if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v42, v21);
          }
          else
          {
            *(_DWORD *)(v42 + 24) -= 2;
          }
          if (((v33 | v62) & 1) != 0)
            goto LABEL_77;
          goto LABEL_100;
        }
        if ((shouldBlockRequestForRunnableContent & 1) == 0)
          goto LABEL_86;
      }
LABEL_73:
      v62 = 1;
      goto LABEL_74;
    }
    if ((v33 & 1) == 0)
    {
LABEL_100:
      v75 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v75 + 24) += 2;
      v76 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
      if (!v76)
        goto LABEL_147;
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F1B630);
      }
      if (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 7)
        goto LABEL_147;
      v77 = *(WTF **)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 8);
      if (!v77)
      {
        v77 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v77 = 1;
        *((_QWORD *)v77 + 1) = v76;
        v88 = *(WTF **)(v76 + 8);
        *(_QWORD *)(v76 + 8) = v77;
        if (v88)
        {
          if (*(_DWORD *)v88 != 1)
          {
            --*(_DWORD *)v88;
            goto LABEL_104;
          }
          WTF::fastFree(v88, v21);
          v77 = *(WTF **)(v76 + 8);
          if (!v77)
          {
LABEL_147:
            v14 = 0;
            goto LABEL_148;
          }
        }
      }
LABEL_104:
      ++*(_DWORD *)v77;
      if (!*((_QWORD *)v77 + 1))
      {
        v14 = 0;
LABEL_130:
        if (*(_DWORD *)v77 == 1)
          WTF::fastFree(v77, v21);
        else
          --*(_DWORD *)v77;
LABEL_148:
        if (*(_DWORD *)(v75 + 24) == 2)
        {
          if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v75, v21);
        }
        else
        {
          *(_DWORD *)(v75 + 24) -= 2;
        }
LABEL_150:
        v90 = v129;
        v129 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v90 -= 2;
        }
        v91 = *(_QWORD *)(v15 + 528);
        if (!v91)
          goto LABEL_185;
        v92 = *(_QWORD *)(v91 + 8);
        if (!v92)
          goto LABEL_185;
        v93 = *(_QWORD *)(v92 + 24);
        if (!v93)
          goto LABEL_185;
        v94 = *(WebCore::Page **)(v93 + 8);
        if (!v94)
          goto LABEL_185;
        ++*(_DWORD *)v94;
        v95 = *a5;
        if (v95)
        {
          *(_DWORD *)v95 += 2;
        }
        else
        {
          WebCore::findPluginMIMETypeFromURL((WebCore *)&v123, v94, (const WTF::URL *)&v126);
          v95 = v123;
          if (!v123)
          {
LABEL_183:
            if (*(_DWORD *)v94 == 1)
            {
              WebCore::Page::~Page((uint64_t)v94);
              WTF::fastFree(v111, v112);
            }
            else
            {
              --*(_DWORD *)v94;
            }
            goto LABEL_185;
          }
        }
        v96 = (WebCore::PluginData *)WebCore::Page::pluginData(v94);
        v98 = WebCore::PluginData::webVisiblePlugins(v96, v97);
        v100 = *(_DWORD *)(v98 + 12);
        if (v100)
        {
          v101 = *(_QWORD *)v98;
          v102 = *(_QWORD *)v98 + 56 * v100;
          while (1)
          {
            v103 = *(unsigned int *)(v101 + 36);
            if ((_DWORD)v103)
              break;
LABEL_165:
            v101 += 56;
            if (v101 == v102)
              goto LABEL_166;
          }
          v104 = *(WTF ***)(v101 + 24);
          v105 = 32 * v103;
          while (!WTF::equal(*v104, v95, v99))
          {
            v104 += 4;
            v105 -= 32;
            if (!v105)
              goto LABEL_165;
          }
          v106 = *(WTF::StringImpl **)(v101 + 8);
          if (v106)
            *(_DWORD *)v106 += 2;
        }
        else
        {
LABEL_166:
          v106 = 0;
        }
        if (v106)
          v107 = v106;
        else
          v107 = v95;
        if (v107)
          *(_DWORD *)v107 += 2;
        v129 = v107;
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)v94 + 816, &v129, v99, (uint64_t)&v123);
        v108 = v129;
        v129 = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
          {
            WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v21);
            if (!v106)
              goto LABEL_180;
            goto LABEL_178;
          }
          *(_DWORD *)v108 -= 2;
        }
        if (!v106)
          goto LABEL_180;
LABEL_178:
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)v106 -= 2;
LABEL_180:
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v95 -= 2;
        }
        goto LABEL_183;
      }
      v78 = *(_DWORD *)(v75 + 24);
      *(_DWORD *)(v75 + 24) = v78 + 2;
      if ((*(_WORD *)(v75 + 3358) & 8) != 0)
      {
        if (*(_BYTE *)a1)
          v80 = 0;
        else
          v80 = *(_BYTE *)(v75 + 3536) != 0;
        v79 = v75;
      }
      else if (v78)
      {
        v79 = 0;
        v80 = 0;
        *(_DWORD *)(v75 + 24) = v78;
      }
      else
      {
        if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v75, v21);
        v79 = 0;
        v80 = 0;
      }
      v81 = *(_QWORD *)(v75 + 528);
      if (v81)
      {
        v82 = *(_QWORD *)(v81 + 8);
        if (v82)
        {
          v83 = *(_QWORD *)(v82 + 120);
          if (v83)
          {
            if (*(_QWORD *)(v83 + 8))
            {
              if ((*(_QWORD *)(*(_QWORD *)(v75 + 680) + 704) & 2) != 0)
                v80 = 0;
              else
                v80 = v80;
            }
          }
        }
      }
      v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 280) + 16);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WebCore::HTMLObjectElement *, WTF::StringImpl **, uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v84 + 872))(&v123, v84, a2, &v126, a6, v122, a5, v80);
      v85 = *((_QWORD *)v77 + 1);
      v14 = v85 != 0;
      v86 = v123;
      if (v85)
      {
        if (!v123)
        {
          if (*(_BYTE *)(v85 + 256))
          {
            v14 = 0;
          }
          else
          {
            v89 = *(_DWORD *)(v85 + 16);
            *(_DWORD *)(v85 + 16) = v89 + 1;
            if (v89 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x195F1B7FCLL);
            }
            v14 = 0;
            *(_DWORD *)(v85 + 16) = v89;
          }
          goto LABEL_127;
        }
        ++*(_DWORD *)(v85 + 16);
        WebCore::RenderWidget::setWidget(v85, (uint64_t *)&v123);
        v87 = *(_DWORD *)(v85 + 16);
        if (!v87)
        {
          __break(0xC471u);
          JUMPOUT(0x195F1B7CCLL);
        }
        *(_DWORD *)(v85 + 16) = v87 - 1;
        *(_BYTE *)a1 = 1;
        v86 = v123;
      }
      v123 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v86 + 8))(v86);
        else
          --*((_DWORD *)v86 + 2);
      }
LABEL_127:
      if (v79)
      {
        if (*(_DWORD *)(v79 + 24) == 2)
        {
          if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v79, v21);
        }
        else
        {
          *(_DWORD *)(v79 + 24) -= 2;
        }
      }
      goto LABEL_130;
    }
LABEL_77:
    v14 = 0;
    goto LABEL_150;
  }
  v14 = 0;
LABEL_185:
  v109 = v126;
  v126 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v109 -= 2;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v21);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  return v14;
}

void WebCore::SinkDocument::~SinkDocument(WebCore::SinkDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::SinkDocument::~SinkDocument(WebCore::SinkDocument *this, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::SinkDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::SinkDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::SinkDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::SinkDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::SinkDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::SinkDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::SinkDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::SinkDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::SinkDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::SinkDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::SinkDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::SinkDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

WTF::StringImpl *WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add@<X0>(WTF::ASCIICaseInsensitiveHash *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF **v13;
  int v14;
  WTF::StringImpl *result;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v7;
  v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        v13 = v9;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*v9, *(const WTF::StringImpl **)this, v12);
        if ((_DWORD)result)
        {
          v24 = *a2;
          if (*a2)
            v25 = *(unsigned int *)(v24 - 4);
          else
            v25 = 0;
          v27 = 0;
          v26 = v24 + 8 * v25;
          goto LABEL_35;
        }
      }
      v8 = (v8 + v14) & v7;
      v9 = (WTF **)(v6 + 8 * v8);
      ++v14;
    }
    while (!WTF::equal(*v9, 0, v12));
    if (v13)
    {
      *v13 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = v13;
    }
  }
  v16 = *(WTF **)this;
  *(_QWORD *)this = 0;
  result = *v9;
  *v9 = v16;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
      goto LABEL_25;
  }
  else if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
LABEL_30:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, v23, v9);
      v9 = (WTF **)result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_34;
    }
LABEL_25:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_30;
  }
LABEL_34:
  v26 = v19 + 8 * v22;
  v27 = 1;
LABEL_35:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF **v13;
  int v14;
  WTF::StringImpl *result;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v7;
  v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        v13 = v9;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*v9, *(const WTF::StringImpl **)this, v12);
        if ((_DWORD)result)
        {
          v24 = *a2;
          if (*a2)
            v25 = *(unsigned int *)(v24 - 4);
          else
            v25 = 0;
          v27 = 0;
          v26 = v24 + 8 * v25;
          goto LABEL_37;
        }
      }
      v8 = (v8 + v14) & v7;
      v9 = (WTF **)(v6 + 8 * v8);
      ++v14;
    }
    while (!WTF::equal(*v9, 0, v12));
    if (v13)
    {
      *v13 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = v13;
    }
  }
  v16 = *(WTF **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v16 += 2;
  result = *v9;
  *v9 = v16;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
      goto LABEL_27;
  }
  else if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
LABEL_32:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, v23, v9);
      v9 = (WTF **)result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_36;
    }
LABEL_27:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_32;
  }
LABEL_36:
  v26 = v19 + 8 * v22;
  v27 = 1;
LABEL_37:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v5 + 8 * v11);
      if (*v13 != (WTF *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v5 + 8 * v11), v9);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = WTF::equal(*(WTF **)(v15 + 8 * v19), 0, v10);
            v17 = ++v18 + v19;
          }
          while (!v20);
          v21 = (WTF::StringImpl **)(v15 + 8 * v19);
          v22 = *v21;
          *v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v9);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v13;
          *v13 = 0;
          *v21 = v23;
          v24 = *v13;
          *v13 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v9);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned int>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned int,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v5 + 16 * v11);
      if (*v13 != (WTF *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v5 + 16 * v11), v9);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v10);
            v17 = ++v18 + v19;
          }
          while (!v20);
          v21 = v15 + 16 * v19;
          v22 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v9);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v13;
          *v13 = 0;
          *(_QWORD *)v21 = v23;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v5 + 16 * v11 + 8);
          v24 = *v13;
          *v13 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v9);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringBuilder *a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6, uint64_t a7, _OWORD *a8, uint64_t a9)
{
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  char *result;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  char *v49;
  char *v50;
  __int128 v51;
  int8x16_t v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  char *v57;
  __int16 v58;
  char *v59;
  char *v60;
  char *v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;

  if (a3)
  {
    v13 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_64;
  }
  else
  {
    v13 = 0;
  }
  if (a5)
  {
    v14 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195F1C80CLL);
    }
  }
  else
  {
    v14 = 0;
  }
  if (a7)
  {
    v15 = a7 - 1;
    if ((unint64_t)(a7 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195F1C838);
    }
  }
  else
  {
    v15 = 0;
  }
  if (!a9)
  {
    v16 = 0;
    goto LABEL_9;
  }
  v16 = a9 - 1;
  if ((unint64_t)(a9 - 1) >> 31)
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x195F1C7E0);
  }
LABEL_9:
  v17 = *((_QWORD *)a1 + 1);
  if (!v17 && (v17 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v17 + 16) & 4) != 0)
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v59 = result;
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
        *result = *(_BYTE *)a2;
      else
        result = (char *)memcpy(result, a2, v13);
    }
    v60 = &v59[v13];
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        *v60 = *(_BYTE *)a4;
      else
        result = (char *)memcpy(&v59[v13], a4, v14);
    }
    v61 = &v60[v14];
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 1)
      {
        *v61 = *(_BYTE *)a6;
        if (!(_DWORD)v16)
          return result;
LABEL_49:
        result = &v61[v15];
        if ((_DWORD)v16 != 1)
          return (char *)memcpy(result, a8, v16);
        *result = *(_BYTE *)a8;
        return result;
      }
      result = (char *)memcpy(&v60[v14], a6, v15);
    }
    if (!(_DWORD)v16)
      return result;
    goto LABEL_49;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v19 = &result[2 * v13];
    if ((v13 & 0x7FFFFFC0) != 0)
    {
      v20 = &result[2 * (v13 & 0x7FFFFFC0)];
      v21 = 0uLL;
      do
      {
        v62.val[0] = (int8x16_t)*a2;
        v22 = *((int8x16_t *)a2 + 1);
        v66.val[0] = (int8x16_t)a2[2];
        v23 = a2[3];
        a2 += 4;
        v24 = v23;
        v66.val[1] = 0uLL;
        v70.val[0] = v22;
        v62.val[1] = 0uLL;
        v25 = result;
        vst2q_s8(v25, v62);
        v25 += 32;
        v70.val[1] = 0uLL;
        vst2q_s8(v25, v70);
        v26 = result + 64;
        vst2q_s8(v26, v66);
        v27 = result + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        result += 128;
      }
      while (result != v20);
      result = v20;
    }
    while (result != v19)
    {
      v28 = *(unsigned __int8 *)a2;
      a2 = (_OWORD *)((char *)a2 + 1);
      *(_WORD *)result = v28;
      result += 2;
    }
    v29 = &v19[2 * v14];
    if ((v14 & 0x7FFFFFC0) != 0)
    {
      v30 = &v19[2 * (v14 & 0x7FFFFFC0)];
      v31 = 0uLL;
      do
      {
        v63.val[0] = (int8x16_t)*a4;
        v32 = *((int8x16_t *)a4 + 1);
        v67.val[0] = (int8x16_t)a4[2];
        v33 = a4[3];
        a4 += 4;
        v34 = v33;
        v67.val[1] = 0uLL;
        v71.val[0] = v32;
        v63.val[1] = 0uLL;
        v35 = v19;
        vst2q_s8(v35, v63);
        v35 += 32;
        v71.val[1] = 0uLL;
        vst2q_s8(v35, v71);
        v36 = v19 + 64;
        vst2q_s8(v36, v67);
        v37 = v19 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v19 += 128;
      }
      while (v19 != v30);
      v19 = v30;
    }
    while (v19 != v29)
    {
      v38 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v19 = v38;
      v19 += 2;
    }
    v39 = &v29[2 * v15];
    if ((v15 & 0x7FFFFFC0) != 0)
    {
      v40 = &v29[2 * (v15 & 0x7FFFFFC0)];
      v41 = 0uLL;
      do
      {
        v64.val[0] = (int8x16_t)*a6;
        v42 = *((int8x16_t *)a6 + 1);
        v68.val[0] = (int8x16_t)a6[2];
        v43 = a6[3];
        a6 += 4;
        v44 = v43;
        v68.val[1] = 0uLL;
        v72.val[0] = v42;
        v64.val[1] = 0uLL;
        v45 = v29;
        vst2q_s8(v45, v64);
        v45 += 32;
        v72.val[1] = 0uLL;
        vst2q_s8(v45, v72);
        v46 = v29 + 64;
        vst2q_s8(v46, v68);
        v47 = v29 + 96;
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        v29 += 128;
      }
      while (v29 != v40);
      v29 = v40;
    }
    while (v29 != v39)
    {
      v48 = *(unsigned __int8 *)a6;
      a6 = (_OWORD *)((char *)a6 + 1);
      *(_WORD *)v29 = v48;
      v29 += 2;
    }
    v49 = &v39[2 * v16];
    if ((v16 & 0x7FFFFFC0) != 0)
    {
      v50 = &v39[2 * (v16 & 0x7FFFFFC0)];
      v51 = 0uLL;
      do
      {
        v65.val[0] = (int8x16_t)*a8;
        v52 = *((int8x16_t *)a8 + 1);
        v69.val[0] = (int8x16_t)a8[2];
        v53 = a8[3];
        a8 += 4;
        v54 = v53;
        v69.val[1] = 0uLL;
        v73.val[0] = v52;
        v65.val[1] = 0uLL;
        v55 = v39;
        vst2q_s8(v55, v65);
        v55 += 32;
        v73.val[1] = 0uLL;
        vst2q_s8(v55, v73);
        v56 = v39 + 64;
        vst2q_s8(v56, v69);
        v57 = v39 + 96;
        vst2q_s8(v57, *(int8x16x2_t *)(&v51 - 1));
        v39 += 128;
      }
      while (v39 != v50);
      v39 = v50;
    }
    while (v39 != v49)
    {
      v58 = *(unsigned __int8 *)a8;
      a8 = (_OWORD *)((char *)a8 + 1);
      *(_WORD *)v39 = v58;
      v39 += 2;
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3, char *a4)
{
  uint64_t v7;
  char *result;
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  __int16 v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  size_t v39;
  char v40;
  int8x16_t *v41;
  char *v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v7 = *((_QWORD *)a1 + 1);
  if ((v7 || (v7 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v9 = *a2;
      v10 = *a3;
      v11 = *((unsigned int *)a3 + 2);
      v12 = *a4;
      v13 = &result[2 * a2[1]];
      v14 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v14)
      {
        v15 = &result[2 * v14];
        v16 = 0uLL;
        do
        {
          v43.val[0] = *v9;
          v17 = v9[1];
          v45.val[0] = v9[2];
          v18 = v9[3];
          v9 += 4;
          v19 = v18;
          v45.val[1] = 0uLL;
          v47.val[0] = v17;
          v43.val[1] = 0uLL;
          v20 = result;
          vst2q_s8(v20, v43);
          v20 += 32;
          v47.val[1] = 0uLL;
          vst2q_s8(v20, v47);
          v21 = result + 64;
          vst2q_s8(v21, v45);
          v22 = result + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
          result += 128;
        }
        while (result != v15);
        result = v15;
      }
      while (result != v13)
      {
        v23 = v9->u8[0];
        v9 = (int8x16_t *)((char *)v9 + 1);
        *(_WORD *)result = v23;
        result += 2;
      }
      v24 = &v13[2 * v11];
      v25 = v11 & 0xFFFFFFC0;
      if (v25)
      {
        v26 = &v13[2 * v25];
        v27 = 0uLL;
        do
        {
          v44.val[0] = *v10;
          v28 = v10[1];
          v46.val[0] = v10[2];
          v29 = v10[3];
          v10 += 4;
          v30 = v29;
          v46.val[1] = 0uLL;
          v48.val[0] = v28;
          v44.val[1] = 0uLL;
          v31 = v13;
          vst2q_s8(v31, v44);
          v31 += 32;
          v48.val[1] = 0uLL;
          vst2q_s8(v31, v48);
          v32 = v13 + 64;
          vst2q_s8(v32, v46);
          v33 = v13 + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
          v13 += 128;
        }
        while (v13 != v26);
        v13 = v26;
      }
      while (v13 != v24)
      {
        v34 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v13 = v34;
        v13 += 2;
      }
      *(_WORD *)v24 = v12;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v35 = result;
      v36 = a2[1];
      v37 = v36;
      v38 = *a3;
      v39 = *((unsigned int *)a3 + 2);
      v40 = *a4;
      if ((_DWORD)v36)
      {
        v41 = *a2;
        if ((_DWORD)v36 == 1)
          *result = v41->i8[0];
        else
          result = (char *)memcpy(result, v41, a2[1]);
      }
      v42 = &v35[v37];
      if ((_DWORD)v39)
      {
        if ((_DWORD)v39 == 1)
          *v42 = v38->i8[0];
        else
          result = (char *)memcpy(&v35[v37], v38, v39);
      }
      v42[v39] = v40;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore12ServerTimingELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int16 v12;
  uint64_t v13;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = WTF::fastMalloc((WTF *)(32 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(_QWORD *)v4 = result;
      v5 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v5)
      {
        v6 = *a2;
        v7 = *a2 + 32 * v5;
        do
        {
          WTF::String::isolatedCopy();
          v8 = *(_QWORD *)(v6 + 8);
          v9 = v6 + 16;
          WTF::String::isolatedCopy();
          v12 = *(_WORD *)(v6 + 24);
          v10 = *(_QWORD *)v4 + 32 * *(unsigned int *)(v4 + 12);
          *(_QWORD *)v10 = v13;
          *(_QWORD *)(v10 + 8) = v8;
          *(_QWORD *)(v10 + 16) = v11;
          *(_WORD *)(v10 + 24) = v12;
          ++*(_DWORD *)(v4 + 12);
          v11 = 0;
          result = 0;
          v6 += 32;
        }
        while (v9 + 16 != v7);
      }
    }
  }
  return result;
}

void WebCore::SinkDocumentParser::~SinkDocumentParser(WebCore::SinkDocumentParser *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A3D50;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A3D50;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33F7748;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33F7770;
  WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33F7770;
  WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::ResourceLoader::deliverResponseAndData(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&)::$_0,void>::call(uint64_t *result)
{
  _BYTE *v1;
  void *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  _OWORD v5[5];
  WTF::StringImpl *v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v1 = (_BYTE *)result[1];
  if (!v1[752])
  {
    if (!result[3]
      || (*(_QWORD *)&v5[0] = result[3],
          result[3] = 0,
          (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 224))(v1),
          result = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v5, v2), !v1[752]))
    {
      v7 = 0;
      *(_OWORD *)v6 = 0u;
      memset(v5, 0, sizeof(v5));
      v8 = -1;
      v9 = -1;
      v10 = 0;
      (*(void (**)(_BYTE *, _OWORD *))(*(_QWORD *)v1 + 232))(v1, v5);
      v4 = v10;
      v10 = 0;
      if (v4)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4, v3);
      result = (uint64_t *)v6[1];
      v6[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceLoader::loadDataURL(void)::$_0,void,std::optional<WebCore::DataURLDecoder::Result>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E33F7798;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceLoader::loadDataURL(void)::$_0,void,std::optional<WebCore::DataURLDecoder::Result>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F7798;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ResourceLoader::loadDataURL(void)::$_0,void,std::optional<WebCore::DataURLDecoder::Result>>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  const void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  CFTypeRef v37;
  WTF::StringImpl *v38[2];
  WTF::StringImpl *v39;
  WTF *v40;
  int v41;
  int v42;
  char v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE buf[32];
  _BYTE v50[24];
  int v51;
  __int16 v52;
  CFTypeRef cf;
  char v54;
  CFTypeRef v55;
  uint64_t v56;

  v3 = (WTF::StringImpl *)buf;
  v56 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 40))
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v11 + 752))
      return;
    v12 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD **)(v11 + 32);
      if (v13)
      {
        v14 = v13[3];
        if (v14)
        {
          v14 = *(_QWORD *)(v14 + 8);
          if (v14)
          {
            if (*(_BYTE *)(v14 + 40))
              v14 = *(_QWORD *)(v14 + 32);
            else
              v14 = 0;
          }
        }
        v15 = v13[4];
        v13 = (_QWORD *)v13[35];
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      v16 = *(_QWORD *)(v11 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v15;
      *(_WORD *)v50 = 2048;
      *(_QWORD *)&v50[2] = v13;
      *(_WORD *)&v50[10] = 2048;
      *(_QWORD *)&v50[12] = v16;
      _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::loadDataURL: decoding of data failed", buf, 0x34u);
    }
    v17 = *(_QWORD *)(a1 + 16);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *(_QWORD *)buf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = *(WTF::StringImpl **)buf;
    if (v7)
      *(_DWORD *)v7 += 2;
    *(_QWORD *)buf = v7;
    v18 = *(_DWORD **)(a1 + 24);
    if (v18)
      *v18 += 2;
    *(_QWORD *)&buf[8] = v18;
    v19 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&buf[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v50 = v19;
    if (v3)
      *(_DWORD *)v3 += 2;
    *(_QWORD *)&v50[16] = v3;
    v51 = 0;
    v52 = 1;
    cf = 0;
    v54 = 1;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 240))(v17, buf);
    v20 = cf;
    cf = 0;
    if (!v20)
    {
LABEL_30:
      v21 = *(WTF::StringImpl **)&v50[16];
      *(_QWORD *)&v50[16] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
          if (v3)
          {
LABEL_40:
            if (*(_DWORD *)v3 == 2)
              WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v3 -= 2;
          }
LABEL_42:
          if (!v7)
            return;
          if (*(_DWORD *)v7 != 2)
          {
            *(_DWORD *)v7 -= 2;
            return;
          }
          v10 = (WTF::StringImpl *)v7;
          goto LABEL_73;
        }
        *(_DWORD *)v23 -= 2;
      }
      if (v3)
        goto LABEL_40;
      goto LABEL_42;
    }
LABEL_77:
    CFRelease(v20);
    goto LABEL_30;
  }
  *(_OWORD *)v38 = *(_OWORD *)a2;
  v5 = *(WTF::StringImpl **)(a2 + 16);
  v4 = *(WTF **)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v39 = v5;
  v40 = v4;
  LODWORD(v5) = *(_DWORD *)(a2 + 32);
  v6 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)(a2 + 32) = 0;
  v41 = (int)v5;
  v42 = v6;
  v43 = 1;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v7 + 752))
  {
    if (!v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(int *)(v7 + 756) >= 2)
  {
    v24 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD **)(v7 + 32);
      if (v25)
      {
        v26 = v25[3];
        if (v26)
        {
          v26 = *(_QWORD *)(v26 + 8);
          if (v26)
          {
            if (*(_BYTE *)(v26 + 40))
              v26 = *(_QWORD *)(v26 + 32);
            else
              v26 = 0;
          }
        }
        v27 = v25[4];
        v25 = (_QWORD *)v25[35];
      }
      else
      {
        v27 = 0;
        v26 = 0;
      }
      v28 = *(_QWORD *)(v7 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v27;
      *(_WORD *)v50 = 2048;
      *(_QWORD *)&v50[2] = v25;
      *(_WORD *)&v50[10] = 2048;
      *(_QWORD *)&v50[12] = v28;
      _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::loadDataURL: Load was cancelled", buf, 0x34u);
    }
    goto LABEL_63;
  }
  v20 = WebCore::ResourceResponseBase::dataURLResponse((WebCore::ResourceResponseBase *)(a1 + 24), (const WTF::URL *)v38, (uint64_t)buf);
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v44 = v7;
  v46 = v6;
  if (!v43)
  {
    __break(1u);
    goto LABEL_77;
  }
  WebCore::FragmentedSharedBuffer::create(&v40, (uint64_t *)&v48);
  v30 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v30, (uint64_t *)&v48);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v48, v31);
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v32 = off_1E33F77C0;
  v32[1] = v7;
  v32[2] = v29;
  v32[3] = v6;
  v45 = 0;
  v47 = 0;
  v48 = v32;
  v32[4] = v30;
  (*(void (**)(uint64_t, _BYTE *, _QWORD **))(*(_QWORD *)v7 + 208))(v7, buf, &v48);
  v34 = (uint64_t)v48;
  v48 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v47, v33);
  v36 = v45;
  v45 = 0;
  if (v36)
  {
    if (v36[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[4];
  }
  v37 = v55;
  v55 = 0;
  if (v37)
    CFRelease(v37);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v35);
  if (!v43)
    return;
LABEL_63:
  v4 = v40;
  if (v40)
  {
LABEL_4:
    v40 = 0;
    v41 = 0;
    WTF::fastFree(v4, (void *)a2);
  }
LABEL_5:
  v8 = v39;
  v39 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v38[1];
  v38[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v38[0];
  v38[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      return;
    }
LABEL_73:
    WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore14ResourceLoader11loadDataURLEvEN3__0clINSt3__18optionalINS2_14DataURLDecoder6ResultEEEEEDaT_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  *a1 = off_1E33F77C0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore14ResourceLoader11loadDataURLEvEN3__0clINSt3__18optionalINS2_14DataURLDecoder6ResultEEEEEDaT_EUlvE_vJEED0Ev(uint64_t *a1, void *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = (uint64_t)off_1E33F77C0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore14ResourceLoader11loadDataURLEvEN3__0clINSt3__18optionalINS2_14DataURLDecoder6ResultEEEEEDaT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  _OWORD v5[5];
  WTF::StringImpl *v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 752))
  {
    v2 = result;
    if (*(_QWORD *)(result + 24))
    {
      if ((*(_BYTE *)(v1 + 520) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 336));
        *(_BYTE *)(v1 + 520) |= 1u;
      }
      result = MEMORY[0x19AEA53F4](*(_QWORD *)(v1 + 424), "HEAD", 4);
      if ((result & 1) == 0)
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v1 + 224))(v1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 24), 0);
    }
    if (!*(_BYTE *)(v1 + 752))
    {
      v7 = 0;
      *(_OWORD *)v6 = 0u;
      memset(v5, 0, sizeof(v5));
      v8 = -1;
      v9 = -1;
      v10 = 0;
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v1 + 232))(v1, v5);
      v4 = v10;
      v10 = 0;
      if (v4)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4, v3);
      result = (uint64_t)v6[1];
      v6[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::computeBestTableSize(v2);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v3, 0);
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int **v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int **result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  v11 = a1;
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    while (1)
    {
      v16 = (unsigned int **)(v4 + 24 * v12);
      v17 = *v16;
      if (!*v16)
      {
        v39 = v4 + 24 * v12;
        v40 = *(WTF::StringImpl **)(v39 + 8);
        *(_QWORD *)(v39 + 8) = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::destroy(v40, v8);
            v15 = a3;
            v11 = a1;
            v17 = *v16;
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        *v16 = 0;
        if (v17)
        {
          do
          {
            v41 = __ldaxr(v17);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v17));
          if (!v42)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v8);
            v15 = a3;
            v11 = a1;
          }
        }
        goto LABEL_23;
      }
      if (v17 != (unsigned int *)-1)
        break;
LABEL_23:
      if (++v12 == v14)
        goto LABEL_42;
    }
    v18 = *v11;
    if (*v11)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = 1;
    do
    {
      v25 = v23;
      v26 = (unsigned int **)(v18 + 24 * v23);
      v23 = (v23 + v24++) & v19;
    }
    while (*v26);
    v27 = v25;
    v28 = v18 + 24 * v25;
    v31 = *(WTF::StringImpl **)(v28 + 8);
    v30 = (_QWORD *)(v28 + 8);
    v29 = v31;
    *v30 = 0;
    if (v31)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v8);
        v15 = a3;
        v11 = a1;
        v43 = *v26;
        *v26 = 0;
        if (v43)
        {
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v43);
            WTF::fastFree((WTF *)v43, v8);
            v15 = a3;
            v11 = a1;
          }
        }
        goto LABEL_17;
      }
      *(_DWORD *)v29 -= 2;
    }
    *v26 = 0;
LABEL_17:
    v32 = *v16;
    *v16 = 0;
    *v26 = v32;
    v33 = v4 + 24 * v12;
    v34 = *(_QWORD *)(v33 + 8);
    *(_QWORD *)(v33 + 8) = 0;
    *v30 = v34;
    *(_DWORD *)(v18 + 24 * v27 + 16) = *(_DWORD *)(v33 + 16);
    v35 = *(WTF::StringImpl **)(v33 + 8);
    *(_QWORD *)(v33 + 8) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::destroy(v35, v8);
        v15 = a3;
        v11 = a1;
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    v36 = *v16;
    *v16 = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v8);
        v15 = a3;
        v11 = a1;
      }
    }
    if (v16 == v15)
      v13 = v26;
    goto LABEL_23;
  }
  v13 = 0;
  result = 0;
  if (v4)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v13;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(WebCore::HTMLFrameOwnerElement &,WTF::URL const&,WTF::AtomString const&,WebCore::LockHistory,WebCore::LockBackForwardList)::$_1,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33F7820;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(WebCore::HTMLFrameOwnerElement &,WTF::URL const&,WTF::AtomString const&,WebCore::LockHistory,WebCore::LockBackForwardList)::$_1,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7820;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(WebCore::HTMLFrameOwnerElement &,WTF::URL const&,WTF::AtomString const&,WebCore::LockHistory,WebCore::LockBackForwardList)::$_1,void,WebCore::ScheduleLocationChangeResult>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double v6;
  double result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_DWORD *)(v1 + 3328) - 1;
  *(_DWORD *)(v1 + 3328) = v2;
  v3 = *(_QWORD *)(v1 + 528);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4)
    {
      if ((*(_QWORD *)(v1 + 2152) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*(_QWORD *)(v1 + 2152) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        v5 = v1 + 2120;
        *(_QWORD *)(v1 + 2144) = 0;
        WTF::MonotonicTime::now(a1);
        WebCore::TimerBase::setNextFireTime(v5, v6 + 0.0);
      }
    }
  }
  return result;
}

uint64_t WebCore::matchIntegrityMetadataSlow(WebCore *this, const WebCore::CachedResource *a2, const WTF::String *a3)
{
  BOOL isCORSSameOrigin;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  unsigned int v31;
  int v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  void *__s1;
  int v43;
  unsigned int __n;
  size_t __n_4;
  void *__s2;
  int v47;
  unsigned __int8 v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  int v52;
  unsigned int v53;
  char v54;

  WebCore::parseIntegrityMetadata(a2, (uint64_t)&v51);
  if (!v54)
    return 1;
  isCORSSameOrigin = WebCore::CachedResource::isCORSSameOrigin(this);
  v6 = v53;
  if (!isCORSSameOrigin)
  {
    v35 = 0;
    v7 = v51;
    goto LABEL_50;
  }
  v7 = v51;
  if (!v53)
  {
    v35 = 1;
    goto LABEL_58;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v49 = 0;
  v50 = 0;
  v11 = 1;
  v12 = v51;
  v13 = (WTF *)((char *)v51 + 16 * v53);
  do
  {
    v14 = *(unsigned __int8 *)v12;
    if (v10)
    {
      if ((_DWORD)v11 == (_DWORD)v14)
      {
        v15 = v10;
        if (v10 == (_DWORD)v50)
        {
          v16 = WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v49, v10 + 1, (unint64_t)v12);
          v10 = HIDWORD(v50) + 1;
          v8 = v49;
          v17 = (char *)v49 + 16 * HIDWORD(v50);
          *v17 = *(_BYTE *)v16;
          v18 = v17 + 8;
        }
        else
        {
          ++v10;
          v23 = (char *)v8 + 16 * v15;
          *v23 = v11;
          v18 = v23 + 8;
          v16 = (unint64_t)v12;
        }
        v14 = v11;
        goto LABEL_28;
      }
      if (v14 < v11)
        goto LABEL_29;
      v19 = v10;
      if (!(_DWORD)v50)
        goto LABEL_26;
      v20 = 16 * v10;
      v21 = (WTF::StringImpl **)((char *)v9 + 8);
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v5);
          else
            *(_DWORD *)v22 -= 2;
        }
        v21 += 2;
        v20 -= 16;
      }
      while (v20);
      HIDWORD(v50) = 0;
      if (!v8)
      {
        v19 = 0;
        v10 = 0;
LABEL_26:
        ++v10;
        v25 = (char *)v8 + 16 * v19;
        *v25 = *(_BYTE *)v12;
        v18 = v25 + 8;
LABEL_27:
        v16 = (unint64_t)v12;
        goto LABEL_28;
      }
      v49 = 0;
      LODWORD(v50) = 0;
      WTF::fastFree(v8, v5);
    }
    else if ((_DWORD)v50)
    {
      *(_BYTE *)v8 = v14;
      v18 = (_QWORD *)((char *)v8 + 8);
      v10 = 1;
      goto LABEL_27;
    }
    v16 = WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v49, 1uLL, (unint64_t)v12);
    v10 = HIDWORD(v50) + 1;
    v8 = v49;
    v24 = (char *)v49 + 16 * HIDWORD(v50);
    *v24 = *(_BYTE *)v16;
    v18 = v24 + 8;
LABEL_28:
    v26 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = 0;
    *v18 = v26;
    HIDWORD(v50) = v10;
    v9 = v8;
    v11 = v14;
LABEL_29:
    v12 = (WTF *)((char *)v12 + 16);
  }
  while (v12 != v13);
  v27 = v49;
  if (!v10)
  {
    v35 = 0;
    goto LABEL_48;
  }
  v28 = 16 * v10;
  v29 = v28;
  v30 = v49;
  while (2)
  {
    v31 = *(unsigned __int8 *)v30;
    WebCore::decodeEncodedResourceCryptographicDigest(v30, (uint64_t)&__n_4);
    WebCore::CachedResource::cryptographicDigest((uint64_t)this, v31, (uint64_t)&v41);
    v32 = v48;
    if (!v48)
    {
      v33 = (WTF *)__s1;
      if (__s1)
      {
LABEL_36:
        __s1 = 0;
        v43 = 0;
        WTF::fastFree(v33, v5);
      }
LABEL_37:
      if (v32 && __s2)
        WTF::fastFree((WTF *)__s2, v5);
      v30 = (WTF *)((char *)v30 + 16);
      v29 -= 16;
      if (!v29)
      {
        v35 = 0;
        goto LABEL_66;
      }
      continue;
    }
    break;
  }
  v33 = (WTF *)__s1;
  if (__n != v47 || (v34 = (WTF *)__s2, memcmp(__s1, __s2, __n)))
  {
    if (v33)
      goto LABEL_36;
    goto LABEL_37;
  }
  if (v33)
  {
    __s1 = 0;
    v43 = 0;
    WTF::fastFree(v33, v5);
  }
  if (v34)
    WTF::fastFree(v34, v5);
  v35 = 1;
LABEL_66:
  v39 = (WTF::StringImpl **)((char *)v27 + 8);
  do
  {
    v40 = *v39;
    *v39 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v5);
      else
        *(_DWORD *)v40 -= 2;
    }
    v39 += 2;
    v28 -= 16;
  }
  while (v28);
LABEL_48:
  if (v27)
    WTF::fastFree(v27, v5);
LABEL_50:
  if ((_DWORD)v6)
  {
    v36 = 0;
    do
    {
      v37 = *(WTF::StringImpl **)((char *)v7 + v36 + 8);
      *(_QWORD *)((char *)v7 + v36 + 8) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v5);
        else
          *(_DWORD *)v37 -= 2;
      }
      v36 += 16;
    }
    while (16 * v6 != v36);
  }
LABEL_58:
  if (v7)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree(v7, v5);
  }
  return v35;
}

WTF::StringImpl *WebCore::integrityMismatchDescription@<X0>(WebCore *this@<X0>, const WebCore::CachedResource *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::URL *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  int v48;
  char *v49;
  _WORD *v50;
  int8x16_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  char *v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  uint64_t v72;
  _WORD *v73;
  unint64_t v74;
  _WORD *v75;
  _WORD *v76;
  int v77;
  _WORD *v78;
  unsigned int v79;
  unsigned int v80;
  WTF::StringImpl *result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  WTF *v89;
  unint64_t v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  BOOL v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  size_t v106;
  uint64_t v107;
  _BYTE *v108;
  _WORD *v109;
  int8x16_t *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unsigned __int128 *v114;
  unsigned __int128 *v115;
  unsigned __int128 v116;
  char v117;
  uint64_t v118;
  __int128 v119;
  char *v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  char *v124;
  char *v125;
  char *v126;
  __int16 v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  unsigned __int128 *v132;
  unsigned __int128 *v133;
  unsigned __int128 v134;
  char v135;
  WTF::StringImpl *v136;
  char v137;
  _QWORD *v138;
  _QWORD v139[5];
  int8x16x2_t v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;
  int8x16x2_t v147;
  int8x16x2_t v148;
  int8x16x2_t v149;

  v139[4] = *MEMORY[0x1E0C80C00];
  v7 = (WebCore *)((char *)this + 160);
  if ((*((_BYTE *)this + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore *)((char *)this + 160));
    *((_BYTE *)this + 344) |= 1u;
  }
  WTF::URL::stringCenterEllipsizedToLength(v7);
  v8 = *((_QWORD *)this + 49);
  if (!v8)
  {
    if (v136)
      *(_DWORD *)v136 += 2;
    v55 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v55)
    {
      v56 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v56 != -1)
      {
        v139[0] = &v137;
        v138 = v139;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v138, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v55 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v55, 1);
    v57 = v55[6];
    v58 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v58 += 2;
    if (v136)
    {
      v59 = *((_DWORD *)v136 + 1);
      if ((v57 & 0x8000000000000000) == 0)
        goto LABEL_92;
    }
    else
    {
      v59 = 0;
      if ((v57 & 0x8000000000000000) == 0)
      {
LABEL_92:
        v60 = 0;
        v61 = v57;
        do
        {
          ++v60;
          v19 = v61 > 9;
          v61 /= 0xAuLL;
        }
        while (v19);
        goto LABEL_148;
      }
    }
    v91 = -(uint64_t)v57;
    v60 = 1;
    do
    {
      ++v60;
      v23 = v91 >= 0xA;
      v91 /= 0xAuLL;
    }
    while (v23);
LABEL_148:
    if (v58)
    {
      v92 = *(_DWORD *)(v58 + 4);
      if (v92 < 0)
        goto LABEL_190;
    }
    else
    {
      v92 = 0;
    }
    v25 = __OFADD__(v92, 21);
    v93 = v92 + 21;
    v94 = v25;
    if (v60 < 0)
      goto LABEL_190;
    if ((v94 & 1) != 0)
      goto LABEL_190;
    v25 = __OFADD__(v60, v93);
    v95 = v60 + v93;
    if (v25)
      goto LABEL_190;
    v25 = __OFADD__(v95, 90);
    v96 = v95 + 90;
    v97 = v25;
    if (v59 < 0)
      goto LABEL_190;
    if (v97)
      goto LABEL_190;
    v98 = v59 + v96;
    if (__OFADD__(v59, v96))
      goto LABEL_190;
    if (v136)
    {
      v99 = *((_DWORD *)v136 + 4);
      if (!v58 || (v99 & 4) == 0)
      {
        v100 = v98;
        v101 = v98 == 0;
        if ((v99 & 4) != 0)
        {
LABEL_166:
          v102 = v58;
          if (!v101)
          {
            if ((v98 & 0x80000000) != 0)
              goto LABEL_190;
            goto LABEL_168;
          }
          goto LABEL_220;
        }
        goto LABEL_177;
      }
    }
    else if (!v58)
    {
      if (v98)
      {
        v102 = 0;
        v100 = v98;
        if ((v98 & 0x80000000) != 0)
          goto LABEL_190;
LABEL_168:
        WTF::tryFastCompactMalloc((WTF *)(v100 + 20));
        v103 = v139[0];
        if (v139[0])
        {
          v104 = (_BYTE *)(v139[0] + 20);
          *(_DWORD *)v139[0] = 2;
          *(_DWORD *)(v103 + 4) = v98;
          *(_QWORD *)(v103 + 8) = v103 + 20;
          *(_DWORD *)(v103 + 16) = 4;
          if (v136)
          {
            v105 = (_BYTE *)*((_QWORD *)v136 + 1);
            v106 = *((unsigned int *)v136 + 1);
            if ((*((_BYTE *)v136 + 16) & 4) != 0)
            {
              if ((_DWORD)v106)
              {
                if ((_DWORD)v106 == 1)
                  *v104 = *v105;
                else
                  memcpy((void *)(v103 + 20), v105, v106);
              }
            }
            else
            {
              if (v106 < 0x10)
              {
                v132 = (unsigned __int128 *)(v103 + 20);
              }
              else
              {
                v132 = (unsigned __int128 *)&v104[v106 & 0xFFFFFFF0];
                v133 = (unsigned __int128 *)(v103 + 20);
                do
                {
                  v134 = (unsigned __int128)vld2q_s8(v105);
                  v105 += 32;
                  *v133++ = v134;
                }
                while (v133 != v132);
              }
              while (v132 != (unsigned __int128 *)&v104[v106])
              {
                v135 = *v105;
                v105 += 2;
                *(_BYTE *)v132 = v135;
                v132 = (unsigned __int128 *)((char *)v132 + 1);
              }
            }
            v107 = *((unsigned int *)v136 + 1);
          }
          else
          {
            v107 = 0;
          }
          v108 = &v104[v107];
          qmemcpy(v108, ". Failed integrity metadata check. Content length: (no content), Expected content length: ", 90);
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v108 + 90, v57, ", Expected metadata: ", 0x15u, v102);
          goto LABEL_211;
        }
        goto LABEL_190;
      }
LABEL_220:
      v103 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_211;
    }
    v100 = v98;
    v101 = v98 == 0;
    if ((*(_BYTE *)(v58 + 16) & 4) != 0)
      goto LABEL_166;
LABEL_177:
    if (v101)
      goto LABEL_220;
    if (v98 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v100 + 20));
      v103 = v139[0];
      if (v139[0])
      {
        v109 = (_WORD *)(v139[0] + 20);
        *(_DWORD *)v139[0] = 2;
        *(_DWORD *)(v103 + 4) = v98;
        *(_QWORD *)(v103 + 8) = v103 + 20;
        *(_DWORD *)(v103 + 16) = 0;
        if (v136)
        {
          v110 = (int8x16_t *)*((_QWORD *)v136 + 1);
          v111 = *((unsigned int *)v136 + 1);
          if ((*((_BYTE *)v136 + 16) & 4) != 0)
          {
            v112 = (char *)&v109[v111];
            if (v111 >= 0x40)
            {
              v113 = (char *)&v109[v111 & 0xFFFFFFC0];
              v119 = 0uLL;
              v120 = (char *)(v103 + 20);
              do
              {
                v142.val[0] = *v110;
                v121 = v110[1];
                v145.val[0] = v110[2];
                v122 = v110[3];
                v110 += 4;
                v123 = v122;
                v145.val[1] = 0uLL;
                v148.val[0] = v121;
                v142.val[1] = 0uLL;
                v124 = v120;
                vst2q_s8(v124, v142);
                v124 += 32;
                v148.val[1] = 0uLL;
                vst2q_s8(v124, v148);
                v125 = v120 + 64;
                vst2q_s8(v125, v145);
                v126 = v120 + 96;
                vst2q_s8(v126, *(int8x16x2_t *)(&v119 - 1));
                v120 += 128;
              }
              while (v120 != v113);
            }
            else
            {
              v113 = (char *)(v103 + 20);
            }
            while (v113 != v112)
            {
              v127 = v110->u8[0];
              v110 = (int8x16_t *)((char *)v110 + 1);
              *(_WORD *)v113 = v127;
              v113 += 2;
            }
          }
          else if ((_DWORD)v111 == 1)
          {
            *v109 = v110->i16[0];
          }
          else if ((_DWORD)v111)
          {
            memcpy((void *)(v103 + 20), v110, 2 * v111);
          }
          v118 = *((unsigned int *)v136 + 1);
        }
        else
        {
          v118 = 0;
        }
        v140.val[0] = *(int8x16_t *)". Failed integrity metadata check. Content length: (no content), Expected content length: ";
        v143.val[0] = *(int8x16_t *)"k. Content length: (no content), Expected content length: ";
        v128 = (char *)&v109[v118];
        v146.val[1] = 0uLL;
        v146.val[0] = *(int8x16_t *)"h: (no content), Expected content length: ";
        v143.val[1] = 0u;
        v149.val[0] = *(int8x16_t *)"ty metadata check. Content length: (no content), Expected content length: ";
        v140.val[1] = 0u;
        v129 = v128;
        vst2q_s8(v129, v140);
        v129 += 32;
        v149.val[1] = 0u;
        vst2q_s8(v129, v149);
        v130 = v128 + 64;
        vst2q_s8(v130, v143);
        v131 = v128 + 96;
        vst2q_s8(v131, v146);
        *((_OWORD *)v128 + 8) = xmmword_1969F2AC0;
        *((_OWORD *)v128 + 9) = xmmword_1969F2AD0;
        *((_OWORD *)v128 + 10) = xmmword_1969F2AE0;
        *((_DWORD *)v128 + 44) = 2097210;
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((_WORD *)v128 + 90, v57, (int8x16_t *)", Expected metadata: ", 21, v58);
LABEL_211:
        *a3 = v103;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v58, v13);
            if (!v136)
              goto LABEL_120;
            goto LABEL_215;
          }
          *(_DWORD *)v58 -= 2;
        }
        if (!v136)
          goto LABEL_120;
LABEL_215:
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, v13);
        else
          *(_DWORD *)v136 -= 2;
        goto LABEL_120;
      }
    }
LABEL_190:
    *a3 = 0;
    __break(0xC471u);
    JUMPOUT(0x195F1EA40);
  }
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  if (v136)
    *(_DWORD *)v136 += 2;
  v10 = *(_QWORD *)(v8 + 48);
  v11 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v11)
  {
    v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v12 != -1)
    {
      v139[0] = &v137;
      v138 = v139;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v138, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v11 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v11, 1);
  v14 = v11[6];
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  if (v136)
    v16 = *((_DWORD *)v136 + 1);
  else
    v16 = 0;
  v17 = 0;
  v18 = v10;
  do
  {
    ++v17;
    v19 = v18 > 9;
    v18 /= 0xAuLL;
  }
  while (v19);
  if ((v14 & 0x8000000000000000) != 0)
  {
    v22 = -(uint64_t)v14;
    v20 = 1;
    do
    {
      ++v20;
      v23 = v22 >= 0xA;
      v22 /= 0xAuLL;
    }
    while (v23);
  }
  else
  {
    v20 = 0;
    v21 = v14;
    do
    {
      ++v20;
      v19 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v19);
  }
  if (v15)
  {
    v24 = *(_DWORD *)(v15 + 4);
    if (v24 < 0)
      goto LABEL_78;
  }
  else
  {
    v24 = 0;
  }
  v25 = __OFADD__(v24, 21);
  v26 = v24 + 21;
  v27 = v25;
  if (v20 < 0)
    goto LABEL_78;
  if ((v27 & 1) != 0)
    goto LABEL_78;
  v25 = __OFADD__(v20, v26);
  v28 = v20 + v26;
  if (v25)
    goto LABEL_78;
  v25 = __OFADD__(v28, 27);
  v29 = v28 + 27;
  v30 = v25;
  if (v17 < 0
    || v30
    || (v25 = __OFADD__(v17, v29), v31 = v17 + v29, v25)
    || ((v25 = __OFADD__(v31, 51), v32 = v31 + 51, !v25) ? (v33 = 0) : (v33 = 1),
        v16 < 0 || (v33 & 1) != 0 || (v34 = v16 + v32, __OFADD__(v16, v32))))
  {
LABEL_78:
    *a3 = 0;
    __break(0xC471u);
    JUMPOUT(0x195F1E43CLL);
  }
  if (!v136)
  {
    if (!v15)
    {
      if (v34)
      {
        v38 = 0;
        v36 = v34;
        if ((v34 & 0x80000000) != 0)
          goto LABEL_78;
LABEL_49:
        WTF::tryFastCompactMalloc((WTF *)(v36 + 20));
        v39 = v139[0];
        if (v139[0])
        {
          v40 = (_BYTE *)(v139[0] + 20);
          *(_DWORD *)v139[0] = 2;
          *(_DWORD *)(v39 + 4) = v34;
          *(_QWORD *)(v39 + 8) = v39 + 20;
          *(_DWORD *)(v39 + 16) = 4;
          if (v136)
          {
            v41 = (_BYTE *)*((_QWORD *)v136 + 1);
            v42 = *((unsigned int *)v136 + 1);
            if ((*((_BYTE *)v136 + 16) & 4) != 0)
            {
              if ((_DWORD)v42)
              {
                if ((_DWORD)v42 == 1)
                  *v40 = *v41;
                else
                  memcpy((void *)(v39 + 20), v41, v42);
              }
            }
            else
            {
              if (v42 < 0x10)
              {
                v114 = (unsigned __int128 *)(v39 + 20);
              }
              else
              {
                v114 = (unsigned __int128 *)&v40[v42 & 0xFFFFFFF0];
                v115 = (unsigned __int128 *)(v39 + 20);
                do
                {
                  v116 = (unsigned __int128)vld2q_s8(v41);
                  v41 += 32;
                  *v115++ = v116;
                }
                while (v115 != v114);
              }
              while (v114 != (unsigned __int128 *)&v40[v42])
              {
                v117 = *v41;
                v41 += 2;
                *(_BYTE *)v114 = v117;
                v114 = (unsigned __int128 *)((char *)v114 + 1);
              }
            }
            v43 = *((unsigned int *)v136 + 1);
          }
          else
          {
            v43 = 0;
          }
          v44 = 0;
          v45 = &v40[v43];
          qmemcpy(v45, ". Failed integrity metadata check. Content length: ", 51);
          v46 = v10;
          do
          {
            *((_BYTE *)&v139[3] + v44--) = (v46 % 0xA) | 0x30;
            v19 = v46 > 9;
            v46 /= 0xAuLL;
          }
          while (v19);
          v47 = v45 + 51;
          if (v44 + 26 <= 25)
            memcpy(v47, (char *)&v139[3] + v44 + 1, -v44);
          v48 = 0;
          do
          {
            ++v48;
            v19 = v10 > 9;
            v10 /= 0xAuLL;
          }
          while (v19);
          v49 = &v47[v48];
          qmemcpy(v49, ", Expected content length: ", 27);
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v49 + 27, v14, ", Expected metadata: ", 0x15u, v38);
          goto LABEL_112;
        }
        goto LABEL_78;
      }
LABEL_144:
      v39 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_112;
    }
LABEL_46:
    v36 = v34;
    v37 = v34 == 0;
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      goto LABEL_47;
    goto LABEL_64;
  }
  v35 = *((_DWORD *)v136 + 4);
  if (v15 && (v35 & 4) != 0)
    goto LABEL_46;
  v36 = v34;
  v37 = v34 == 0;
  if ((v35 & 4) != 0)
  {
LABEL_47:
    v38 = v15;
    if (!v37)
    {
      if ((v34 & 0x80000000) != 0)
        goto LABEL_78;
      goto LABEL_49;
    }
    goto LABEL_144;
  }
LABEL_64:
  if (v37)
    goto LABEL_144;
  if (v34 > 0x7FFFFFEF)
    goto LABEL_78;
  WTF::tryFastCompactMalloc((WTF *)(2 * v36 + 20));
  v39 = v139[0];
  if (!v139[0])
    goto LABEL_78;
  v50 = (_WORD *)(v139[0] + 20);
  *(_DWORD *)v139[0] = 2;
  *(_DWORD *)(v39 + 4) = v34;
  *(_QWORD *)(v39 + 8) = v39 + 20;
  *(_DWORD *)(v39 + 16) = 0;
  if (v136)
  {
    v51 = (int8x16_t *)*((_QWORD *)v136 + 1);
    v52 = *((unsigned int *)v136 + 1);
    if ((*((_BYTE *)v136 + 16) & 4) != 0)
    {
      v53 = (char *)&v50[v52];
      if (v52 >= 0x40)
      {
        v54 = (char *)&v50[v52 & 0xFFFFFFC0];
        v63 = 0uLL;
        v64 = (char *)(v39 + 20);
        do
        {
          v141.val[0] = *v51;
          v65 = v51[1];
          v144.val[0] = v51[2];
          v66 = v51[3];
          v51 += 4;
          v67 = v66;
          v144.val[1] = 0uLL;
          v147.val[0] = v65;
          v141.val[1] = 0uLL;
          v68 = v64;
          vst2q_s8(v68, v141);
          v68 += 32;
          v147.val[1] = 0uLL;
          vst2q_s8(v68, v147);
          v69 = v64 + 64;
          vst2q_s8(v69, v144);
          v70 = v64 + 96;
          vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
          v64 += 128;
        }
        while (v64 != v54);
      }
      else
      {
        v54 = (char *)(v39 + 20);
      }
      while (v54 != v53)
      {
        v71 = v51->u8[0];
        v51 = (int8x16_t *)((char *)v51 + 1);
        *(_WORD *)v54 = v71;
        v54 += 2;
      }
    }
    else if ((_DWORD)v52 == 1)
    {
      *v50 = v51->i16[0];
    }
    else if ((_DWORD)v52)
    {
      memcpy((void *)(v39 + 20), v51, 2 * v52);
    }
    v62 = *((unsigned int *)v136 + 1);
  }
  else
  {
    v62 = 0;
  }
  v72 = 0;
  v73 = &v50[v62];
  *(_OWORD *)v73 = xmmword_1969F2A40;
  *((_OWORD *)v73 + 1) = xmmword_1969F2A50;
  *((_OWORD *)v73 + 2) = xmmword_1969F2A60;
  *((_OWORD *)v73 + 3) = xmmword_1969F2A70;
  *((_DWORD *)v73 + 24) = 3801192;
  v73[50] = 32;
  v74 = v10;
  *((_OWORD *)v73 + 4) = xmmword_1969F2A80;
  *((_OWORD *)v73 + 5) = xmmword_1969F2A90;
  do
  {
    *((_BYTE *)&v139[3] + v72--) = (v74 % 0xA) | 0x30;
    v19 = v74 > 9;
    v74 /= 0xAuLL;
  }
  while (v19);
  v75 = v73 + 51;
  if (v72 + 26 <= 25)
  {
    v76 = v75;
    do
    {
      *v76++ = *((unsigned __int8 *)&v139[3] + v72 + 1);
      v23 = __CFADD__(v72++, 1);
    }
    while (!v23);
  }
  v77 = 0;
  do
  {
    ++v77;
    v19 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v19);
  v78 = &v75[v77];
  *(_OWORD *)v78 = xmmword_1969F2AA0;
  *((_OWORD *)v78 + 1) = xmmword_1969F2AB0;
  *((_OWORD *)v78 + 2) = xmmword_1969F2A90;
  *((_DWORD *)v78 + 12) = 3801192;
  v78[26] = 32;
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v78 + 27, v14, (int8x16_t *)", Expected metadata: ", 21, v15);
LABEL_112:
  *a3 = v39;
  if (!v15)
    goto LABEL_115;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_115:
    if (v136)
      goto LABEL_116;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v15, v13);
  if (v136)
  {
LABEL_116:
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, v13);
    else
      *(_DWORD *)v136 -= 2;
    goto LABEL_118;
  }
  do
  {
LABEL_118:
    v79 = __ldaxr((unsigned int *)v8);
    v80 = v79 - 1;
  }
  while (__stlxr(v80, (unsigned int *)v8));
  if (!v80)
  {
    atomic_store(1u, (unsigned int *)v8);
    v82 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v82)
    {
      v83 = *(_QWORD *)(v8 + 8);
      v84 = v83 + 16 * v82;
      do
      {
        v85 = *(unsigned int **)(v83 + 8);
        *(_QWORD *)(v83 + 8) = 0;
        if (v85)
        {
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v85);
            v88 = v85[6];
            if ((_DWORD)v88 != -1)
              ((void (*)(_QWORD *, unsigned int *))off_1E33F7AE0[v88])(v139, v85 + 2);
            v85[6] = -1;
            WTF::fastFree((WTF *)v85, v13);
          }
        }
        v83 += 16;
      }
      while (v83 != v84);
    }
    v89 = *(WTF **)(v8 + 8);
    if ((WTF *)(v8 + 24) != v89 && v89 != 0)
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      WTF::fastFree(v89, v13);
    }
    WTF::fastFree((WTF *)v8, v13);
  }
LABEL_120:
  result = v136;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v136, v13);
    else
      *(_DWORD *)v136 -= 2;
  }
  return result;
}

void WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker(WebCore::SubresourceLoader::RequestCountTracker *this, void *a2)
{
  WebCore::CachedResourceLoader *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  _BYTE v30[24];
  unsigned int **v31;

  if (*(_QWORD *)this)
  {
    v3 = *(WebCore::CachedResourceLoader **)(*(_QWORD *)this + 8);
    if (v3)
    {
      v4 = 0;
      ++*(_DWORD *)v3;
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
LABEL_4:
  v5 = *((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_6;
  v21 = *(_QWORD *)(v6 + 8);
  if (v21)
    goto LABEL_46;
  v25 = v6;
  v21 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = v25;
  v26 = *(unsigned int **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v21;
  if (!v26)
    goto LABEL_46;
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, v26);
    WTF::fastFree((WTF *)v26, a2);
  }
  v21 = *(_QWORD *)(v25 + 8);
  if (v21)
  {
LABEL_46:
    do
      v22 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v22 + 1, (unsigned int *)v21));
    v29 = (unsigned int *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    if (v23)
    {
      v31 = &v29;
      ++*(_DWORD *)(v23 + 548);
      v24 = *(_QWORD *)(v23 + 488);
      if (v24)
      {
        if (*(_QWORD *)(v24 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v23 + 464), (uint64_t *)&v31, (uint64_t)v30);
      }
    }
  }
  else
  {
LABEL_6:
    v29 = 0;
  }
  if (v3)
  {
    if (v29)
    {
      v7 = *((_QWORD *)v29 + 1);
      if (v7)
      {
        if ((*(_WORD *)(v7 + 557) & 0x4000) == 0)
        {
          v8 = *(_BYTE *)(v7 + 556) & 0x1F;
          v9 = v8 > 0xD;
          v10 = (1 << v8) & 0x2F01;
          if (v9 || v10 == 0)
            --*((_DWORD *)v3 + 22);
        }
      }
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v29, a2);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v3, v12);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  v16 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v12);
    }
  }
}

uint64_t WebCore::SubresourceLoader::init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  ++*(_DWORD *)(a1 + 16);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E33F7BA8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WebCore::ResourceLoader::init(a1, a2, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::SubresourceLoader::startLoading(WebCore::SubresourceLoader *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WebCore::FormData *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  WebCore::FormData *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[152];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::FormData *v18;
  uint64_t v19;
  char v20;
  CFTypeRef cf;
  _QWORD *v22;

  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v15, (WebCore::SubresourceLoader *)((char *)this + 1128));
  v2 = (WTF::StringImpl *)*((_QWORD *)this + 160);
  if (v2)
    *(_DWORD *)v2 += 2;
  v16 = v2;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 161);
  if (v3)
    *(_DWORD *)v3 += 2;
  v17 = v3;
  v4 = (WebCore::FormData *)*((_QWORD *)this + 162);
  if (v4)
    ++*(_DWORD *)v4;
  v5 = *((_QWORD *)this + 163);
  v18 = v4;
  v19 = v5;
  v20 = *((_BYTE *)this + 1312);
  v6 = (const void *)*((_QWORD *)this + 165);
  cf = v6;
  if (v6)
    CFRetain(v6);
  ++*((_DWORD *)this + 4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E33F7B80;
  v7[1] = this;
  v7[2] = this;
  ++*((_DWORD *)this + 4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E33F7BA8;
  v8[1] = this;
  v8[2] = this;
  v8[3] = v7;
  v22 = v8;
  WebCore::ResourceLoader::init((uint64_t)this, (uint64_t)v15, (uint64_t *)&v22);
  v10 = (uint64_t)v22;
  v22 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v18;
  v18 = 0;
  if (v12)
    WTF::RefCounted<WebCore::FormData>::deref(v12, v9);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)v15, (WTF::StringImpl *)v9);
}

void WebCore::SubresourceLoader::checkRedirectionCrossOriginAccessControl(WebCore::SubresourceLoader *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3, WebCore::ResourceRequest *a4, WebCore::ResourceRequest *a5)
{
  const WebCore::ResourceRequest *v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char canRequest;
  WTF::StringImpl *v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _WORD *v28;
  __int16 v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t IdentifierInternal;
  unsigned int v37;
  int *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned __int16 *v49;
  unint64_t v50;
  unsigned __int16 v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  char v54;
  uint64_t v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  const WTF::String *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90[5];
  unsigned __int8 *v91;
  WTF::StringImpl *v92;

  v8 = a2;
  v10 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)a2 + 166) + 8) + 557) & 3;
  v11 = *((_QWORD *)a2 + 171);
  if (!v11)
    goto LABEL_11;
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  if ((*((_BYTE *)a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a5);
    *((_BYTE *)a5 + 184) |= 1u;
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canRequest = WebCore::SecurityOrigin::canRequest(v11, a5, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  v15 = canRequest;
  do
  {
    v16 = __ldaxr((unsigned int *)v11);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v11));
  if (v17)
  {
    if ((canRequest & 1) != 0)
    {
LABEL_11:
      LOBYTE(v18) = 1;
      goto LABEL_30;
    }
  }
  else
  {
    atomic_store(1u, (unsigned int *)v11);
    v19 = *(WTF::StringImpl **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(WTF::StringImpl **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v21 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F7B38[v21])(v90, v11 + 8);
    *(_DWORD *)(v11 + 32) = -1;
    WTF::fastFree((WTF *)v11, v14);
    if ((v15 & 1) != 0)
      goto LABEL_11;
  }
  v22 = *(_QWORD *)(*((_QWORD *)v8 + 166) + 8);
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23)
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = v22;
    v75 = *(unsigned int **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = v23;
    if (v75)
    {
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v75);
        WTF::fastFree((WTF *)v75, v14);
      }
      v23 = *(_QWORD *)(v22 + 8);
    }
  }
  do
    v24 = __ldaxr((unsigned int *)v23);
  while (__stlxr(v24 + 1, (unsigned int *)v23));
  v25 = *(_QWORD *)(v23 + 8);
  v91 = (unsigned __int8 *)v23;
  v92 = (WTF::StringImpl *)&v91;
  ++*(_DWORD *)(v25 + 548);
  v26 = *(_QWORD *)(v25 + 488);
  if (v26 && *(_QWORD *)(v26 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v25 + 464), (uint64_t *)&v92, (uint64_t)v90);
    v25 = *((_QWORD *)v91 + 1);
  }
  v27 = *(unsigned __int8 *)(v25 + 17);
  v28 = (_WORD *)(v25 + 557);
  if (v27 == 3)
    v29 = 1;
  else
    v29 = 2;
  *v28 = *v28 & 0xFFFC | v29;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v91, v14);
  LOBYTE(v18) = 0;
LABEL_30:
  v30 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)v8 + 166) + 8) + 557) & 3;
  if (*((_BYTE *)v8 + 977) != 3)
    goto LABEL_50;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v8 + 166) + 8) + 557) & 3) == 0)
    goto LABEL_42;
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a4, 52, &v92);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a4, 1);
  MEMORY[0x19AEA52F8](v90, a4, &v92, 0);
  WebCore::validateCrossOriginRedirectionURL((WebCore *)v90, &v91);
  v32 = v90[0];
  v90[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (!v91)
  {
    v34 = v92;
    v92 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v31);
        if (!v10)
          goto LABEL_50;
        goto LABEL_43;
      }
      *(_DWORD *)v34 -= 2;
    }
LABEL_42:
    if (!v10)
      goto LABEL_50;
LABEL_43:
    v35 = (WTF::StringImpl *)((*((unsigned __int8 *)v8 + 1090) >> 4) & 3);
    IdentifierInternal = *((_QWORD *)v8 + 171);
    if (IdentifierInternal)
    {
      do
        v37 = __ldaxr((unsigned int *)IdentifierInternal);
      while (__stlxr(v37 + 1, (unsigned int *)IdentifierInternal));
    }
    v38 = &dword_1ECE90000;
      goto LABEL_184;
    while (1)
    {
      WebCore::passesAccessControlCheck((uint64_t)a4, v35, (WTF::StringImpl *)IdentifierInternal, (uint64_t)&WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler, this);
      do
      {
        v40 = __ldaxr((unsigned int *)IdentifierInternal);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unsigned int *)IdentifierInternal));
      if (!v41)
      {
        atomic_store(1u, (unsigned int *)IdentifierInternal);
        v84 = *(WTF::StringImpl **)(IdentifierInternal + 48);
        *(_QWORD *)(IdentifierInternal + 48) = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
            WTF::StringImpl::destroy(v84, v39);
          else
            *(_DWORD *)v84 -= 2;
        }
        v85 = *(WTF::StringImpl **)(IdentifierInternal + 40);
        *(_QWORD *)(IdentifierInternal + 40) = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v39);
          else
            *(_DWORD *)v85 -= 2;
        }
        v86 = *(unsigned int *)(IdentifierInternal + 32);
        if ((_DWORD)v86 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F7B38[v86])(v90, IdentifierInternal + 8);
        *(_DWORD *)(IdentifierInternal + 32) = -1;
        WTF::fastFree((WTF *)IdentifierInternal, v39);
      }
      if (*((_BYTE *)this + 8))
        return;
LABEL_50:
      if (v30)
      {
        v42 = v18 ^ 1;
        if (v10)
          v42 = 0;
        if ((v42 & 1) != 0)
          goto LABEL_68;
        if ((*((_BYTE *)a3 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(a3);
          *((_BYTE *)a3 + 184) |= 1u;
        }
        if ((*((_BYTE *)a5 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(a5);
          *((_BYTE *)a5 + 184) |= 1u;
        }
        v43 = WTF::protocolHostAndPortAreEqual();
        IdentifierInternal = v43;
        if (v10 && (v43 & 1) == 0)
        {
          v18 = WTF::fastMalloc((WTF *)0x40);
          *(_DWORD *)v18 = 1;
          IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
          v45 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
          if (v45 != -1)
          {
            v90[0] = (WTF::StringImpl *)&v91;
            v92 = (WTF::StringImpl *)v90;
            std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
          }
          v46 = WebCore::Process::globalIdentifier;
          if ((WebCore::Process::globalIdentifier & 1) == 0)
          {
            __break(1u);
            goto LABEL_162;
          }
          v47 = WebCore::Process::globalIdentifier;
          *(_QWORD *)(v18 + 8) = IdentifierInternal;
          *(_QWORD *)(v18 + 16) = v47;
          *(_DWORD *)(v18 + 32) = 1;
          v48 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *v48 += 2;
          *(_QWORD *)(v18 + 40) = v48;
          *(_QWORD *)(v18 + 48) = 0;
          *(_QWORD *)(v18 + 54) = 0;
          *(_WORD *)(v18 + 62) = 1;
          IdentifierInternal = *((_QWORD *)v8 + 171);
          *((_QWORD *)v8 + 171) = v18;
          if (IdentifierInternal)
          {
            do
              v46 = __ldaxr((unsigned int *)IdentifierInternal);
            while (__stlxr(v46 - 1, (unsigned int *)IdentifierInternal));
            if (v46 == 1)
            {
LABEL_162:
              atomic_store(v46, (unsigned int *)IdentifierInternal);
              v87 = *(WTF::StringImpl **)(IdentifierInternal + 48);
              *(_QWORD *)(IdentifierInternal + 48) = 0;
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WTF::StringImpl::destroy(v87, v44);
                else
                  *(_DWORD *)v87 -= 2;
              }
              v88 = *(WTF::StringImpl **)(IdentifierInternal + 40);
              *(_QWORD *)(IdentifierInternal + 40) = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v44);
                else
                  *(_DWORD *)v88 -= 2;
              }
              v89 = *(unsigned int *)(IdentifierInternal + 32);
              if ((_DWORD)v89 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F7B38[v89])(v90, IdentifierInternal + 8);
              *(_DWORD *)(IdentifierInternal + 32) = -1;
              WTF::fastFree((WTF *)IdentifierInternal, v44);
            }
LABEL_68:
            IdentifierInternal = 0;
          }
        }
      }
      else
      {
        IdentifierInternal = 1;
      }
      WebCore::ResourceRequestBase::redirectAsGETIfNeeded((WTF **)a5, a3, a4);
      WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a4, 61, v90);
      if (v90[0])
      {
        v49 = (unsigned __int16 *)*((_QWORD *)v90[0] + 1);
        v50 = *((unsigned int *)v90[0] + 1) | ((unint64_t)((*((_DWORD *)v90[0] + 4) >> 2) & 1) << 32);
      }
      else
      {
        v49 = 0;
        v50 = 0x100000000;
      }
      v51 = WebCore::parseReferrerPolicy(v49, v50, 1);
      if (v51 >= 0x100u)
        *((_BYTE *)v8 + 981) = v51;
      v53 = v90[0];
      v90[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v52);
        else
          *(_DWORD *)v53 -= 2;
      }
      if (*((_BYTE *)v8 + 977) == 3)
        v54 = IdentifierInternal;
      else
        v54 = 1;
      if ((v54 & 1) == 0)
      {
        WebCore::cleanHTTPRequestHeadersForAccessControl(a5, (WTF::StringImpl *)*((unsigned __int8 *)v8 + 1089));
        v55 = *((_QWORD *)v8 + 171);
        if (v55)
        {
          do
            v56 = __ldaxr((unsigned int *)v55);
          while (__stlxr(v56 + 1, (unsigned int *)v55));
        }
        WebCore::updateRequestForAccessControl(a5, v55, (*((unsigned __int8 *)v8 + 1090) >> 4) & 3);
        do
        {
          v58 = __ldaxr((unsigned int *)v55);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, (unsigned int *)v55));
        if (!v59)
        {
          atomic_store(1u, (unsigned int *)v55);
          v81 = *(WTF::StringImpl **)(v55 + 48);
          *(_QWORD *)(v55 + 48) = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v57);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = *(WTF::StringImpl **)(v55 + 40);
          *(_QWORD *)(v55 + 40) = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, v57);
            else
              *(_DWORD *)v82 -= 2;
          }
          v83 = *(unsigned int *)(v55 + 32);
          if ((_DWORD)v83 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F7B38[v83])(v90, v55 + 8);
          *(_DWORD *)(v55 + 32) = -1;
          WTF::fastFree((WTF *)v55, v57);
        }
      }
      a4 = (WebCore::ResourceRequest *)*((unsigned __int8 *)v8 + 981);
      if ((*((_BYTE *)a3 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(a3);
        *((_BYTE *)a3 + 184) |= 1u;
      }
      v60 = *((unsigned int *)a3 + 27);
      if ((_DWORD)v60)
      {
        v61 = 0;
        v62 = (WTF::StringImpl **)(*((_QWORD *)a3 + 12) + 8);
        while (*((_WORD *)v62 - 4) != 60)
        {
          ++v61;
          v62 += 2;
          if (v60 == v61)
            goto LABEL_92;
        }
        if (v61 >= v60)
        {
          __break(0xC471u);
          return;
        }
        v63 = *v62;
        if (*v62)
          *(_DWORD *)v63 += 2;
      }
      else
      {
LABEL_92:
        v63 = 0;
      }
      v92 = v63;
      MEMORY[0x19AEA52D4](v90, &v92, 0);
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      WebCore::updateRequestReferrer(a5, (uint64_t)a4, (WTF::StringImpl ***)v90, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
      v66 = v90[0];
      v90[0] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v64);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = v92;
      v92 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v64);
        else
          *(_DWORD *)v67 -= 2;
      }
      v8 = (const WebCore::ResourceRequest *)*((_QWORD *)v8 + 171);
      if (!v8)
      {
        v90[0] = 0;
        goto LABEL_111;
      }
      do
        v68 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v68 + 1, (unsigned int *)v8));
      v69 = *((unsigned int *)v8 + 8);
      if ((_DWORD)v69 == 1)
        goto LABEL_176;
      if ((_DWORD)v69 != -1)
      {
        v90[0] = (WTF::StringImpl *)&v92;
        v70 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v69])(v90, (char *)v8 + 8);
        if (MEMORY[0x19AEA53F4](*v70, "file", 4) && *((_BYTE *)v8 + 59))
LABEL_176:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        else
          WebCore::SecurityOriginData::toString((const WebCore::ResourceRequest *)((char *)v8 + 8), v90);
LABEL_111:
        WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)a5, (WebCore::ResourceRequest *)v90, v65);
        v72 = v90[0];
        v90[0] = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
            goto LABEL_114;
          }
          WTF::StringImpl::destroy(v72, v71);
          if (!v8)
          {
LABEL_117:
            *(_BYTE *)this = 0;
            *((_BYTE *)this + 8) = 0;
            return;
          }
        }
        else
        {
LABEL_114:
          if (!v8)
            goto LABEL_117;
        }
        do
        {
          v73 = __ldaxr((unsigned int *)v8);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, (unsigned int *)v8));
        if (!v74)
        {
          atomic_store(1u, (unsigned int *)v8);
          v78 = (WTF::StringImpl *)*((_QWORD *)v8 + 6);
          *((_QWORD *)v8 + 6) = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v71);
            else
              *(_DWORD *)v78 -= 2;
          }
          v79 = (WTF::StringImpl *)*((_QWORD *)v8 + 5);
          *((_QWORD *)v8 + 5) = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
              WTF::StringImpl::destroy(v79, v71);
            else
              *(_DWORD *)v79 -= 2;
          }
          v80 = *((unsigned int *)v8 + 8);
          if ((_DWORD)v80 != -1)
            ((void (*)(WTF::StringImpl **, char *))off_1E33F7B38[v80])(&v92, (char *)v8 + 8);
          *((_DWORD *)v8 + 8) = -1;
          WTF::fastFree(v8, v71);
        }
        goto LABEL_117;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_184:
      WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
      unk_1ECE90770 = 1;
      *((_BYTE *)v38 + 1912) = 1;
    }
  }
  *(_QWORD *)this = v91;
  *((_BYTE *)this + 8) = 1;
  v33 = v92;
  v92 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
}

uint64_t WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 16), (const WebCore::ResourceResponseBase *)(a2 + 16));
  v5 = *(const void **)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v5;
  if (v5)
    CFRetain(v5);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  return a1;
}

uint64_t *WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::CompletionHandler<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &,WebCore::ResourceResponse const&,void (&&)(WebCore::ResourceRequest &&))::$_1,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  const void *v9;

  v4 = WTF::fastMalloc((WTF *)0x130);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E33F7BD0;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = *((_OWORD *)a2 + 1);
  a2[2] = 0;
  *(_OWORD *)(v4 + 24) = v7;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(v4 + 40) = v8;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v4 + 48), (const WebCore::ResourceResponseBase *)(a2 + 5));
  v9 = (const void *)a2[35];
  *(_QWORD *)(v4 + 288) = v9;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(v4 + 296) = *((_BYTE *)a2 + 288);
  *a1 = v4;
  return a1;
}

_QWORD *WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_1::~$_1(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  WebCore::ResourceResponseBase *v9;

  v3 = (WebCore::ResourceResponseBase *)(a1 + 5);
  v4 = (const void *)a1[35];
  a1[35] = 0;
  if (v4)
  {
    v9 = v3;
    CFRelease(v4);
    v3 = v9;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return a1;
}

_DWORD *WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()(uint64_t a1, uint64_t *a2, WebCore::ResourceRequest *this)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t v27;
  _DWORD *result;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _BYTE buf[24];
  uint64_t v36;
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  uint64_t v40;
  CFTypeRef cf;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *((_BYTE *)this + 184);
  if ((v7 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v7 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v7;
    if ((v7 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v7 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v7;
    }
  }
  if (!*(_QWORD *)this || *(_BYTE *)(v6 + 752))
  {
    if ((v7 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v33 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v33;
      if ((v33 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
    }
    v8 = *(_QWORD *)this;
    v9 = qword_1ECE7C860;
    v10 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        v11 = *(_QWORD **)(v6 + 32);
        if (v11)
        {
          v12 = v11[3];
          if (v12)
          {
            v12 = *(_QWORD *)(v12 + 8);
            if (v12)
            {
              if (*(_BYTE *)(v12 + 40))
                v12 = *(_QWORD *)(v12 + 32);
              else
                v12 = 0;
            }
          }
          v13 = v11[4];
          v11 = (_QWORD *)v11[35];
        }
        else
        {
          v13 = 0;
          v12 = 0;
        }
        v29 = *(_QWORD *)(v6 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        v36 = v13;
        v37 = 2048;
        v38 = v11;
        v39 = 2048;
        v40 = v29;
        v30 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestIntern"
              "al: resource load canceled because reached terminal state";
LABEL_37:
        _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, v30, buf, 0x34u);
      }
    }
    else if (v10)
    {
      v14 = *(_QWORD **)(v6 + 32);
      if (v14)
      {
        v15 = v14[3];
        if (v15)
        {
          v15 = *(_QWORD *)(v15 + 8);
          if (v15)
          {
            if (*(_BYTE *)(v15 + 40))
              v15 = *(_QWORD *)(v15 + 32);
            else
              v15 = 0;
          }
        }
        v16 = v14[4];
        v14 = (_QWORD *)v14[35];
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      v31 = *(_QWORD *)(v6 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      v36 = v16;
      v37 = 2048;
      v38 = v14;
      v39 = 2048;
      v40 = v31;
      v30 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal"
            ": resource load canceled because new request is NULL (1)";
      goto LABEL_37;
    }
    v32 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v32 + 16))(v32, this);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  v17 = a1 + 16;
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v18;
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)&buf[16] = v19;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v36, (const WebCore::ResourceResponseBase *)(a1 + 16));
  v20 = *(const void **)(a1 + 256);
  cf = v20;
  if (v20)
    CFRetain(v20);
  v42 = *(_BYTE *)(a1 + 264);
  v21 = WTF::fastMalloc((WTF *)0x120);
  *(_QWORD *)v21 = off_1E33F7AC8;
  *(_QWORD *)(v21 + 8) = *(_QWORD *)buf;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)&buf[8];
  v22 = *(_QWORD *)&buf[16];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  *(_QWORD *)(v21 + 24) = v22;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v21 + 32), (const WebCore::ResourceResponseBase *)&v36);
  v23 = cf;
  *(_QWORD *)(v21 + 272) = cf;
  if (v23)
    CFRetain(v23);
  *(_BYTE *)(v21 + 280) = v42;
  v34 = v21;
  WebCore::ResourceLoader::willSendRequestInternal(v6, (CFTypeRef *)this, v17, &v34);
  v25 = v34;
  v34 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = cf;
  cf = 0;
  if (v26)
    CFRelease(v26);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v36, v24);
  v27 = *(_QWORD *)&buf[16];
  *(_QWORD *)&buf[16] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  result = *(_DWORD **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

void WebCore::SubresourceLoader::didReceivePreviewResponse(WebCore::SubresourceLoader *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  _BYTE v14[24];
  unsigned int **v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 166) + 8);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v3;
    v10 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v4;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v4 = *(_QWORD *)(v3 + 8);
    }
  }
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 + 1, (unsigned int *)v4));
  v13 = (unsigned int *)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v15 = &v13;
  ++*(_DWORD *)(v6 + 548);
  v7 = *(_QWORD *)(v6 + 488);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v15, (uint64_t)v14);
    v6 = *((_QWORD *)v13 + 1);
  }
  (*(void (**)(uint64_t, const WebCore::ResourceResponse *))(*(_QWORD *)v6 + 176))(v6, a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, v8);
}

void WebCore::SubresourceLoader::didFail(WebCore::SubresourceLoader *this, WTF::StringImpl **a2)
{
  NSObject *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t Ref;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isMainThread;
  uint64_t v25;
  void *v26;
  WebCore::CachedResource *v27;
  WebCore::CachedResource::ResponseData *v28;
  WTF *v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int **v39;
  uint8_t buf[4];
  WebCore::SubresourceLoader *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 4);
    if (v6)
    {
      v7 = v6[3];
      if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && *(_BYTE *)(v8 + 40))
        v9 = *(_QWORD *)(v8 + 32);
      else
        v9 = 0;
      v10 = v6[4];
      v11 = v6[35];
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v11 = 0;
    }
    v12 = *((_QWORD *)this + 93);
    v13 = *((unsigned __int8 *)a2 + 60);
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
    v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134219520;
    v41 = this;
    v42 = 2048;
    v43 = v9;
    v44 = 2048;
    v45 = v10;
    v46 = 2048;
    v47 = v11;
    v48 = 2048;
    v49 = v12;
    v50 = 1024;
    v51 = v13;
    v52 = 1024;
    v53 = v14;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didFail: (type=%d, code=%d)", buf, 0x40u);
  }
  Ref = *((_QWORD *)this + 40);
  if (Ref)
    Ref = WebCore::LegacyPreviewLoader::didFail(Ref, v5);
  if (*((_DWORD *)this + 334) == 1)
  {
    v16 = *((_QWORD *)this + 166);
    if (!v16)
      goto LABEL_15;
    v17 = *(_QWORD *)(v16 + 8);
    if (!v17)
      goto LABEL_15;
    Ref = *(_QWORD *)(v17 + 8);
    if (Ref)
      goto LABEL_76;
    Ref = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)Ref = 1;
    *(_QWORD *)(Ref + 8) = v17;
    v35 = *(unsigned int **)(v17 + 8);
    *(_QWORD *)(v17 + 8) = Ref;
    if (!v35)
      goto LABEL_76;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
    Ref = *(_QWORD *)(v17 + 8);
    if (Ref)
    {
LABEL_76:
      do
        v31 = __ldaxr((unsigned int *)Ref);
      while (__stlxr(v31 + 1, (unsigned int *)Ref));
      v38 = (unsigned int *)Ref;
      v32 = *(_QWORD *)(Ref + 8);
      if (v32)
      {
        v39 = &v38;
        ++*(_DWORD *)(v32 + 548);
        v33 = *(_QWORD *)(v32 + 488);
        if (v33)
        {
          if (*(_QWORD *)(v33 + 8))
            Ref = (uint64_t)WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v32 + 464), (uint64_t *)&v39, (uint64_t)buf);
        }
      }
    }
    else
    {
LABEL_15:
      v38 = 0;
    }
    if (*(_QWORD *)(*((_QWORD *)this + 4) + 296))
      v18 = *((_BYTE *)a2 + 60) == 2;
    else
      v18 = 0;
    if (v18)
    {
      WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
      Ref = MEMORY[0x19AEA53F4](*a2, "InspectorNetworkAgent", 21);
      if ((Ref & 1) == 0 && (*(_BYTE *)(*((_QWORD *)v38 + 1) + 556) & 0x1F) != 0xB)
      {
        v19 = *(_QWORD *)(*((_QWORD *)this + 4) + 296);
        if (v19)
        {
          *(_DWORD *)(v19 + 24) += 2;
          WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
          Ref = WebCore::Document::addConsoleMessage((_QWORD *)v19, 8, 2, a2 + 6, 0);
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        else
        {
          WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
          Ref = WebCore::Document::addConsoleMessage(0, 8, 2, a2 + 6, 0);
        }
      }
    }
    ++*((_DWORD *)this + 4);
    *((_DWORD *)this + 334) = 2;
    v21 = v38;
    v22 = *((_QWORD *)v38 + 1);
    if ((*(_BYTE *)(v22 + 556) & 0x1F) != 0)
    {
      Ref = kdebug_trace();
      v21 = v38;
      v22 = *((_QWORD *)v38 + 1);
    }
    v23 = *(_QWORD *)(v22 + 488);
    if (!v23 || !*(_QWORD *)(v23 + 8))
      goto LABEL_37;
    isMainThread = WTF::isMainThread((WTF *)Ref);
    if ((isMainThread & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F204D4);
    }
    {
      isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if (v38)
      v25 = *((_QWORD *)v38 + 1);
    else
      v25 = 0;
    if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F204F4);
    }
    WebCore::CachedResource::clearResourceToRevalidate(v25, v26);
    v21 = v38;
    if (!v38)
      v27 = 0;
    else
LABEL_37:
      v27 = (WebCore::CachedResource *)*((_QWORD *)v21 + 1);
    v28 = WebCore::CachedResource::mutableResponseData(v27);
    WebCore::ResourceError::operator=((uint64_t)v28 + 320, (uint64_t)a2);
    v29 = (WTF *)*((_QWORD *)v38 + 1);
    if (!*((_DWORD *)v29 + 138))
    {
      if ((WTF::isMainThread(v29) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F20514);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, *((WebCore::CachedResource **)v38 + 1));
      v29 = (WTF *)*((_QWORD *)v38 + 1);
    }
    (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v29 + 72))(v29, 3);
    WebCore::ResourceLoader::cleanupForError((uint64_t *)this, (const WebCore::ResourceError *)a2);
    WebCore::SubresourceLoader::notifyDone((uint64_t)this, (void *)1);
    if (!*((_BYTE *)this + 752))
      WebCore::SubresourceLoader::releaseResources(this, v30);
    if (*((_DWORD *)this + 4) == 1)
      (*(void (**)(WebCore::SubresourceLoader *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 4);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v38, v30);
  }
}

void WebCore::SubresourceLoader::willCancel(WebCore::SubresourceLoader *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t isMainThread;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WebCore::CachedResource *v23;
  WebCore::CachedResource::ResponseData *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int **v34;
  uint8_t buf[4];
  WebCore::SubresourceLoader *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C860;
  v5 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 4);
    if (v6)
    {
      v7 = v6[3];
      if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && *(_BYTE *)(v8 + 40))
        v9 = *(_QWORD *)(v8 + 32);
      else
        v9 = 0;
      v10 = v6[4];
      v11 = v6[35];
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v11 = 0;
    }
    v12 = *((_QWORD *)this + 93);
    v13 = *((unsigned __int8 *)a2 + 60);
    WebCore::ResourceError::platformLazyInit(a2);
    v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134219520;
    v36 = this;
    v37 = 2048;
    v38 = v9;
    v39 = 2048;
    v40 = v10;
    v41 = 2048;
    v42 = v11;
    v43 = 2048;
    v44 = v12;
    v45 = 1024;
    v46 = v13;
    v47 = 1024;
    v48 = v14;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willCancel: (type=%d, code=%d)", buf, 0x40u);
  }
  if (*((_DWORD *)this + 334) <= 1u)
  {
    ++*((_DWORD *)this + 4);
    v15 = *((_QWORD *)this + 166);
    if (!v15)
      goto LABEL_13;
    v16 = *(_QWORD *)(v15 + 8);
    if (!v16)
      goto LABEL_13;
    v5 = *(_QWORD *)(v16 + 8);
    if (v5)
      goto LABEL_49;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v16;
    v30 = *(unsigned int **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v5;
    if (!v30)
      goto LABEL_49;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
    v5 = *(_QWORD *)(v16 + 8);
    if (v5)
    {
LABEL_49:
      do
        v26 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v26 + 1, (unsigned int *)v5));
      v33 = (unsigned int *)v5;
      v27 = *(_QWORD *)(v5 + 8);
      if (v27)
      {
        v34 = &v33;
        ++*(_DWORD *)(v27 + 548);
        v28 = *(_QWORD *)(v27 + 488);
        if (v28)
        {
          if (*(_QWORD *)(v28 + 8))
            v5 = (uint64_t)WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v27 + 464), (uint64_t *)&v34, (uint64_t)buf);
        }
      }
    }
    else
    {
LABEL_13:
      v33 = 0;
    }
    if (*((_DWORD *)this + 334))
      v17 = 2;
    else
      v17 = 3;
    *((_DWORD *)this + 334) = v17;
    isMainThread = WTF::isMainThread((WTF *)v5);
    if ((isMainThread & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F20864);
    }
    {
      isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    v19 = v33;
    v20 = *((_QWORD *)v33 + 1);
    v21 = *(_QWORD *)(v20 + 488);
    if (!v21 || !*(_QWORD *)(v21 + 8))
      goto LABEL_24;
    if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F20884);
    }
    WebCore::CachedResource::clearResourceToRevalidate(v20, v22);
    v19 = v33;
    if (!v33)
      v23 = 0;
    else
LABEL_24:
      v23 = (WebCore::CachedResource *)*((_QWORD *)v19 + 1);
    v24 = WebCore::CachedResource::mutableResponseData(v23);
    WebCore::ResourceError::operator=((uint64_t)v24 + 320, (uint64_t)a2);
    WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, *((WebCore::CachedResource **)v33 + 1));
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v33, v25);
    if (*((_DWORD *)this + 4) == 1)
      (*(void (**)(WebCore::SubresourceLoader *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 4);
  }
}

void WebCore::SubresourceLoader::didCancel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  _BYTE v15[24];
  unsigned int **v16;

  if (*(_DWORD *)(a1 + 1336) && !*(_BYTE *)(a1 + 752))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1328) + 8);
    v5 = *(unsigned int **)(v4 + 8);
    if (!v5)
    {
      v5 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v5 = 1;
      *((_QWORD *)v5 + 1) = v4;
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = v5;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v10);
        }
        v5 = *(unsigned int **)(v4 + 8);
      }
    }
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v14 = v5;
    v7 = *((_QWORD *)v5 + 1);
    v16 = &v14;
    ++*(_DWORD *)(v7 + 548);
    v8 = *(_QWORD *)(v7 + 488);
    if (v8 && *(_QWORD *)(v8 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), (uint64_t *)&v16, (uint64_t)v15);
      v5 = v14;
      v7 = *((_QWORD *)v14 + 1);
    }
    if ((*(_BYTE *)(v7 + 556) & 0x1F) == 0 || (kdebug_trace(), (v5 = v14) != 0))
      v5 = (unsigned int *)*((_QWORD *)v5 + 1);
    WebCore::CachedResource::cancelLoad((uint64_t)v5, a2);
    WebCore::SubresourceLoader::notifyDone(a1, (void *)1);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v9);
  }
}

__n128 WebCore::TextResourceDecoder::create@<Q0>(WebCore::TextResourceDecoder *this@<X0>, const WTF::String *a2@<X1>, const PAL::TextEncoding *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v8;
  const WTF::String *v9;
  PAL *v10;
  __n128 result;
  uint64_t *v12;

  v4 = (char)a3;
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v8 = 1;
  v10 = (PAL *)WebCore::TextResourceDecoder::determineContentType(this, v9);
  *(_DWORD *)(v8 + 4) = (_DWORD)v10;
  if ((_DWORD)v10 == 2)
  {
    v12 = PAL::UTF8Encoding(v10);
LABEL_6:
    a2 = (const WTF::String *)v12;
    goto LABEL_3;
  }
  if (!*((_QWORD *)a2 + 2))
  {
    v12 = PAL::Latin1Encoding(v10);
    goto LABEL_6;
  }
LABEL_3:
  *(_QWORD *)(v8 + 8) = &off_1E31F4A18;
  result = *(__n128 *)((char *)a2 + 8);
  *(_WORD *)(v8 + 32) = *((_WORD *)a2 + 12);
  *(__n128 *)(v8 + 16) = result;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 85) = 0;
  *(_BYTE *)(v8 + 93) = v4;
  *(_BYTE *)(v8 + 94) = 0;
  *a4 = v8;
  return result;
}

void WebCore::TextResourceDecoder::~TextResourceDecoder(WebCore::TextResourceDecoder *this, void *a2)
{
  WTF *v3;
  WebCore::HTMLMetaCharsetParser *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v4, (WTF::StringImpl *)a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  WTF *v3;
  WebCore::HTMLMetaCharsetParser *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v4, (WTF::StringImpl *)a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebCore::TextResourceDecoder::textFromUTF8@<X0>(const char *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  uint64_t *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  const WTF::String *v13;
  PAL *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  __int128 v17;
  __int16 v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t result;
  void *v24;
  WTF *v25;
  WebCore::HTMLMetaCharsetParser *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  __int16 v32;
  char v33;
  _QWORD v34[2];
  __int16 v35;
  WTF::StringImpl *v36;
  const char *v37[2];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = (const char *)PAL::atomCanonicalTextEncodingName(v7, (PAL *)"UTF-8", v6);
  v10 = v9;
  v34[0] = v8;
  v34[1] = v9;
  v37[0] = v8;
  v37[1] = v9;
  if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v37))
    {
      v11 = 165;
    }
    else
    {
      v11 = 92;
    }
  }
  else
  {
    v11 = 92;
  }
  v35 = v11;
  v12 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v12 = 1;
  v14 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v36, v13);
  *(_DWORD *)(v12 + 4) = (_DWORD)v14;
  if ((_DWORD)v14 == 2)
  {
    v30 = PAL::UTF8Encoding(v14);
  }
  else
  {
    if (v10)
    {
      v16 = v34;
      goto LABEL_11;
    }
    v30 = PAL::Latin1Encoding(v14);
  }
  v16 = v30 + 1;
LABEL_11:
  *(_QWORD *)(v12 + 8) = &off_1E31F4A18;
  v17 = *(_OWORD *)v16;
  v18 = *((_WORD *)v16 + 8);
  *(_QWORD *)(v12 + 40) = 0;
  v19 = (uint64_t *)(v12 + 40);
  *(_WORD *)(v12 + 32) = v18;
  *(_OWORD *)(v12 + 16) = v17;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 87) = 0;
  v20 = v36;
  v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (a2 < 3
    || *(unsigned __int8 *)a1 != 239
    || *((unsigned __int8 *)a1 + 1) != 187
    || *((unsigned __int8 *)a1 + 2) != 191)
  {
    v33 = -65;
    v32 = -17425;
    WebCore::TextResourceDecoder::decode(v12, (const char *)&v32, 3uLL, &v31);
    v22 = v31;
    v31 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  result = WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v12, a1, a2, a3);
  if (*(_DWORD *)v12 == 1)
  {
    v25 = *(WTF **)(v12 + 72);
    if (v25)
    {
      *(_QWORD *)(v12 + 72) = 0;
      *(_DWORD *)(v12 + 80) = 0;
      WTF::fastFree(v25, v24);
    }
    v26 = *(WebCore::HTMLMetaCharsetParser **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = 0;
    if (v26)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v26, (WTF::StringImpl *)v24);
      WTF::fastFree(v27, v28);
    }
    v29 = *v19;
    *v19 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    return WTF::fastFree((WTF *)v12, v24);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  return result;
}

uint64_t WebCore::TextResourceDecoder::decode@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  const char *v5;
  uint64_t v8;
  size_t v9;
  int v10;
  const char *v11;
  size_t v12;
  const char *v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  _BOOL8 v24;
  void *v25;
  int v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  char *v36;
  const char *v37;
  const unsigned __int8 *v38;
  WebCore *v39;
  WebCore::HTMLMetaCharsetParser *v40;
  const char *v41;
  WTF::StringImpl *v42;
  WebCore::HTMLMetaCharsetParser *v43;
  WTF *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  size_t v49;
  size_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  const unsigned __int8 *v61;
  _BYTE *v62;
  _BYTE *v63;
  int XMLEncoding;
  _DWORD *v65;
  unsigned __int8 *v66;
  uint64_t *v67;
  __int128 v68;
  int v69;
  uint64_t *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  const char *v75;
  __int128 v76;
  __int16 v77;
  int v78;

  v5 = a2;
  if (!*(_BYTE *)(a1 + 88))
  {
    v8 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v8)
    {
      v66 = *(unsigned __int8 **)(a1 + 72);
      v10 = *v66;
      if (v8 != 1)
      {
        LODWORD(v9) = v66[1];
        if (v8 != 2)
        {
          v13 = (const char *)(v66 + 2);
LABEL_8:
          if (v10 == 239 && (_DWORD)v9 == 187 && *(unsigned __int8 *)v13 == 191)
          {
            {
              PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
              *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", a2);
              *((_QWORD *)&xmmword_1ECE86C80 + 1) = a2;
              v75 = (const char *)xmmword_1ECE86C80;
              *(_QWORD *)&v76 = a2;
              if (a2 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
              {
                if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v75))
                {
                  v74 = 165;
                }
                else
                {
                  v74 = 92;
                }
              }
              else
              {
                v74 = 92;
              }
              word_1ECE86C90 = v74;
            }
            v15 = 3;
            if (*(_BYTE *)(a1 + 94) || !*((_QWORD *)&xmmword_1ECE86C80 + 1))
              goto LABEL_15;
            v46 = xmmword_1ECE86C80;
            *(_WORD *)(a1 + 32) = word_1ECE86C90;
            *(_OWORD *)(a1 + 16) = v46;
            v47 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = 0;
            v15 = 3;
            if (!v47)
              goto LABEL_65;
            goto LABEL_64;
          }
LABEL_11:
          if (!*(_BYTE *)(a1 + 94))
          {
            if (v10 == 255)
            {
              if ((_DWORD)v9 == 254)
              {
                v67 = PAL::UTF16LittleEndianEncoding((PAL *)a1);
LABEL_118:
                v15 = 2;
                if (*(_BYTE *)(a1 + 94) || !v67[2])
                  goto LABEL_15;
                v68 = *(_OWORD *)(v67 + 1);
                *(_WORD *)(a1 + 32) = *((_WORD *)v67 + 12);
                *(_OWORD *)(a1 + 16) = v68;
                v47 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)(a1 + 40) = 0;
                v15 = 2;
                if (!v47)
                {
LABEL_65:
                  *(_DWORD *)(a1 + 56) = 1;
LABEL_15:
                  *(_BYTE *)(a1 + 88) = 1;
                  goto LABEL_16;
                }
LABEL_64:
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
                goto LABEL_65;
              }
            }
            else if (v10 == 254 && (_DWORD)v9 == 255)
            {
              v67 = PAL::UTF16BigEndianEncoding((PAL *)a1);
              goto LABEL_118;
            }
          }
          v15 = 0;
          if (a3 + v8 <= 2)
            goto LABEL_16;
          goto LABEL_15;
        }
        v13 = a2;
        v12 = a3;
LABEL_7:
        if (!v12)
          goto LABEL_11;
        goto LABEL_8;
      }
      v11 = a2;
      v9 = a3;
    }
    else
    {
      if (!a3)
      {
        v10 = 0;
        LODWORD(v9) = 0;
        goto LABEL_11;
      }
      v9 = a3 - 1;
      v11 = a2 + 1;
      v10 = *(unsigned __int8 *)a2;
    }
    if (!v9)
      goto LABEL_11;
    v12 = v9 - 1;
    v14 = *(unsigned __int8 *)v11;
    v13 = v11 + 1;
    LODWORD(v9) = v14;
    goto LABEL_7;
  }
  v15 = 0;
LABEL_16:
  v16 = *(_DWORD *)(a1 + 4);
  if (v16 == 3)
  {
    if (*(_BYTE *)(a1 + 89))
    {
      v17 = 0;
      goto LABEL_19;
    }
    v48 = *(_DWORD *)(a1 + 56);
    if (!v48 || v48 == 7)
    {
      v49 = *(unsigned int *)(a1 + 80);
      v50 = *(unsigned int *)(a1 + 84);
      v51 = a3 + v50;
      v52 = *(char **)(a1 + 72);
      if (a3 + v50 <= v49)
      {
        v58 = *(char **)(a1 + 72);
      }
      else
      {
        v53 = v49 + (v49 >> 2);
        if (v53 >= 0x10)
          v54 = v53 + 1;
        else
          v54 = 16;
        if (v54 <= v51)
          v55 = a3 + v50;
        else
          v55 = v54;
        if (HIDWORD(v55))
        {
LABEL_165:
          __break(0xC471u);
          JUMPOUT(0x195F2167CLL);
        }
        v56 = (void *)WTF::fastMalloc((WTF *)v55);
        *(_DWORD *)(a1 + 80) = v55;
        *(_QWORD *)(a1 + 72) = v56;
        memcpy(v56, v52, v50);
        v58 = *(char **)(a1 + 72);
        if (v52)
        {
          if (v58 == v52)
          {
            *(_QWORD *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 0;
          }
          WTF::fastFree((WTF *)v52, v57);
          v58 = *(char **)(a1 + 72);
        }
      }
      *(_DWORD *)(a1 + 84) = v51;
      result = (uint64_t)memcpy(&v58[v50], v5, a3);
      v59 = *(unsigned int *)(a1 + 84);
      if (v59 < 0xE)
        goto LABEL_107;
      v60 = *(_BYTE **)(a1 + 72);
      if (*v60 == 64)
      {
        result = WebCore::bytesEqual<char,char,char,char,char,char,char,char>(v60 + 1);
        if ((_DWORD)result)
        {
          v62 = &v60[v59];
          a2 = v60 + 10;
          v63 = v60 + 10;
          do
          {
            if (*v63 == 34)
              break;
            ++v63;
          }
          while (v63 < v62);
          if (v63 == v62 || v63 + 1 == v62)
            goto LABEL_107;
          if (v63[1] == 59)
          {
            WebCore::findTextEncoding((WebCore *)&v75, (const unsigned __int8 *)a2, (_DWORD)v63 - (_DWORD)a2);
            WebCore::TextResourceDecoder::setEncoding((_BYTE *)a1, (PAL::TextEncoding *)&v75, 4);
          }
        }
      }
      v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    *(_BYTE *)(a1 + 89) = 1;
    v16 = *(_DWORD *)(a1 + 4);
  }
  else
  {
    v17 = 0;
  }
  if ((v16 - 1) > 1 || *(_BYTE *)(a1 + 90))
    goto LABEL_19;
  v26 = *(_DWORD *)(a1 + 56);
  if (v26 != 7 && v26)
  {
    *(_BYTE *)(a1 + 90) = 1;
    goto LABEL_19;
  }
  v27 = *(unsigned int *)(a1 + 80);
  v28 = *(unsigned int *)(a1 + 84);
  v29 = a3 + v28;
  v30 = *(char **)(a1 + 72);
  if (a3 + v28 <= v27)
  {
    v36 = *(char **)(a1 + 72);
  }
  else
  {
    v31 = v27 + (v27 >> 2);
    if (v31 >= 0x10)
      v32 = v31 + 1;
    else
      v32 = 16;
    if (v32 <= v29)
      v33 = a3 + v28;
    else
      v33 = v32;
    if (HIDWORD(v33))
    {
      __break(0xC471u);
      goto LABEL_164;
    }
    v34 = (void *)WTF::fastMalloc((WTF *)v33);
    *(_DWORD *)(a1 + 80) = v33;
    *(_QWORD *)(a1 + 72) = v34;
    memcpy(v34, v30, v28);
    v36 = *(char **)(a1 + 72);
    if (v30)
    {
      if (v36 == v30)
      {
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
      }
      WTF::fastFree((WTF *)v30, v35);
      v36 = *(char **)(a1 + 72);
    }
  }
  *(_DWORD *)(a1 + 84) = v29;
  result = (uint64_t)memcpy(&v36[v28], v5, a3);
  if (!*(_QWORD *)(a1 + 48))
  {
    v38 = (const unsigned __int8 *)*(unsigned int *)(a1 + 84);
    if (v38 < 8)
      goto LABEL_107;
    v39 = *(WebCore **)(a1 + 72);
    if (*(_BYTE *)v39 == 60)
    {
      if (*((_BYTE *)v39 + 1) == 63)
      {
        if (*((_BYTE *)v39 + 2) == 120 && *((_BYTE *)v39 + 3) == 109 && *((_BYTE *)v39 + 4) == 108)
        {
          v61 = 0;
          while (v61[(_QWORD)v39] != 62)
          {
            if (v38 == ++v61)
              goto LABEL_107;
          }
          v78 = 0;
          XMLEncoding = WebCore::findXMLEncoding(v39, v61, &v78, v37);
          if (XMLEncoding != -1)
          {
            WebCore::findTextEncoding((WebCore *)&v75, (const unsigned __int8 *)v39 + XMLEncoding, v78);
            WebCore::TextResourceDecoder::setEncoding((_BYTE *)a1, (PAL::TextEncoding *)&v75, 2);
          }
        }
      }
      else if (!*((_BYTE *)v39 + 1)
             && *((_BYTE *)v39 + 2) == 63
             && !*((_BYTE *)v39 + 3)
             && *((_BYTE *)v39 + 4) == 120
             && !*((_BYTE *)v39 + 5))
      {
        v70 = PAL::UTF16LittleEndianEncoding((PAL *)result);
LABEL_132:
        v17 = 1;
        if (!*(_BYTE *)(a1 + 94) && v70[2])
        {
          v71 = *(_OWORD *)(v70 + 1);
          *(_WORD *)(a1 + 32) = *((_WORD *)v70 + 12);
          *(_OWORD *)(a1 + 16) = v71;
          v72 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = 0;
          if (v72)
            (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          *(_DWORD *)(a1 + 56) = 1;
        }
LABEL_19:
        if (*(_BYTE *)(a1 + 93))
        {
          v69 = *(_DWORD *)(a1 + 56);
          if (!v69 || v69 == 7 && *(_QWORD *)(a1 + 64))
          {
            if (PAL::TextEncoding::isJapanese((PAL::TextEncoding *)(a1 + 8)))
            {
              WebCore::TextResourceDecoder::detectJapaneseEncoding(a1, v5, a3);
            }
            else
            {
              v76 = 0uLL;
              v75 = (const char *)&off_1E31F4A18;
              if (PAL::detectTextEncoding((uint64_t)v5, a3, *(PAL **)(a1 + 64), (uint64_t)&v75)
                && !*(_BYTE *)(a1 + 94)
                && *((_QWORD *)&v76 + 1))
              {
                *(_OWORD *)(a1 + 16) = v76;
                *(_WORD *)(a1 + 32) = v77;
                v73 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)(a1 + 40) = 0;
                if (v73)
                  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
                *(_DWORD *)(a1 + 56) = 1;
              }
            }
          }
        }
        if (!*(_QWORD *)(a1 + 40))
        {
          PAL::newTextCodec((PAL *)(a1 + 8), (const PAL::TextEncoding *)a2, &v75);
          v18 = v75;
          v75 = 0;
          v19 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v18;
          if (v19)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v20 = v75;
            v75 = 0;
            if (v20)
              (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
          }
        }
        v21 = *(unsigned int *)(a1 + 84);
        if (!(_DWORD)v21)
        {
          if (a3 >= v15)
            return (*(uint64_t (**)(_QWORD, const char *, size_t, _QWORD, BOOL, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                                  + 24))(*(_QWORD *)(a1 + 40), &v5[v15], a3 - v15, 0, *(_DWORD *)(a1 + 4) == 2, a1 + 92);
          goto LABEL_164;
        }
        v23 = (uint64_t *)(a1 + 72);
        if (!v17)
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 72, (WTF *)(a3 + v21));
          memcpy((void *)(*(_QWORD *)(a1 + 72) + v21), v5, a3);
          LODWORD(v21) = *(_DWORD *)(a1 + 84);
        }
        if (v21 >= v15)
        {
          v24 = *(_DWORD *)(a1 + 4) == 2 && *(_BYTE *)(a1 + 91) == 0;
          result = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, _QWORD, _BOOL8, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72) + v15, v21 - v15, 0, v24, a1 + 92);
          if (*(_DWORD *)(a1 + 80))
          {
            if (*(_DWORD *)(a1 + 84))
              *(_DWORD *)(a1 + 84) = 0;
            result = *v23;
            if (*v23)
            {
              *(_QWORD *)(a1 + 72) = 0;
              *(_DWORD *)(a1 + 80) = 0;
              return WTF::fastFree((WTF *)result, v25);
            }
          }
          return result;
        }
LABEL_164:
        __break(1u);
        goto LABEL_165;
      }
    }
    else if (!*(_BYTE *)v39
           && *((_BYTE *)v39 + 1) == 60
           && !*((_BYTE *)v39 + 2)
           && *((_BYTE *)v39 + 3) == 63
           && !*((_BYTE *)v39 + 4)
           && *((_BYTE *)v39 + 5) == 120)
    {
      v70 = PAL::UTF16BigEndianEncoding((PAL *)result);
      goto LABEL_132;
    }
    if (*(_DWORD *)(a1 + 4) == 2)
    {
LABEL_58:
      v17 = 1;
      goto LABEL_19;
    }
    v40 = (WebCore::HTMLMetaCharsetParser *)WTF::fastMalloc((WTF *)0xC78);
    WebCore::HTMLMetaCharsetParser::HTMLMetaCharsetParser(v40, v41);
    v43 = *(WebCore::HTMLMetaCharsetParser **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v40;
    if (v43)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v43, v42);
      WTF::fastFree(v44, v45);
    }
  }
  result = WebCore::TextResourceDecoder::checkForMetaCharset(a1);
  if ((result & 1) != 0)
    goto LABEL_58;
LABEL_107:
  v65 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v65 += 2;
  *a4 = v65;
  return result;
}

uint64_t WebCore::TextResourceDecoder::decodeAndFlush@<X0>(WebCore::TextResourceDecoder *a1@<X0>, const char *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  WebCore::TextResourceDecoder::decode((uint64_t)a1, a2, a3, &v15);
  v6 = v15;
  if (v15)
  {
    *(_DWORD *)v15 += 2;
    result = (uint64_t)WebCore::TextResourceDecoder::flush((uint64_t *)&v14, a1);
    v8 = *((_DWORD *)v6 + 1);
  }
  else
  {
    result = (uint64_t)WebCore::TextResourceDecoder::flush((uint64_t *)&v14, a1);
    v8 = 0;
  }
  if (v14)
    v9 = *((_DWORD *)v14 + 1);
  else
    v9 = 0;
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    *a4 = 0;
    goto LABEL_30;
  }
  if (v6)
  {
    v10 = *((_DWORD *)v6 + 4);
    v11 = (v10 >> 2) & 1;
    if (v14 && (v10 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v14)
    {
LABEL_10:
      v11 = (*((unsigned __int8 *)v14 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v11 = 1;
  }
LABEL_11:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v6, (uint64_t)v14, a4);
  if (!*a4)
  {
LABEL_30:
    __break(0xC471u);
    return result;
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v12);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

PAL *WebCore::findTextEncoding(WebCore *this, const unsigned __int8 *__src, int a3)
{
  PAL *v6;
  void *v7;
  PAL *result;
  PAL *v9;
  unsigned int v10;
  _BYTE v11[64];

  v9 = (PAL *)v11;
  v10 = a3 + 1;
  v6 = (PAL *)v11;
  if ((a3 + 1) >= 0x41)
  {
    if (a3 <= -2)
      goto LABEL_9;
    v6 = (PAL *)WTF::fastMalloc((WTF *)(a3 + 1));
    v9 = v6;
  }
  memcpy(v6, __src, a3);
  if (v10 <= (unint64_t)a3)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195F218ACLL);
  }
  *((_BYTE *)v9 + a3) = 0;
  PAL::TextEncoding::TextEncoding(this, v9);
  result = v9;
  if (v11 != (_BYTE *)v9)
  {
    if (v9)
      return (PAL *)WTF::fastFree(v9, v7);
  }
  return result;
}

uint64_t WebCore::TextResourceDecoder::checkForMetaCharset(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  _BOOL8 *v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  __int16 v12;
  const char *v13;
  __int128 v14;
  __int16 v15;

  v3 = WebCore::HTMLMetaCharsetParser::checkForMetaCharset(*(_QWORD *)(a1 + 48));
  if ((_DWORD)v3)
  {
    v4 = *(_BOOL8 **)(a1 + 48);
    if (!*(_BYTE *)(a1 + 94))
    {
      v5 = v4[397];
      if (!v5)
      {
        *(_QWORD *)(a1 + 48) = 0;
        goto LABEL_12;
      }
      if (v5 == 15
        && WTF::equalLettersIgnoringASCIICaseWithLength<unsigned char>(v4[396], 0xEuLL, (uint64_t)"x-user-defined", 0xEuLL, 0xEuLL))
      {
        PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)&v13, (PAL *)"windows-1252");
        *(_OWORD *)(a1 + 16) = v14;
        *(_WORD *)(a1 + 32) = v15;
      }
      else
      {
        v6 = (uint64_t *)(v4 + 395);
        if (PAL::TextEncoding::isNonByteBasedEncoding((PAL::TextEncoding *)v6, v2))
        {
          v6 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
          {
            PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
            *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v2);
            *((_QWORD *)&xmmword_1ECE86C80 + 1) = v2;
            v13 = (const char *)xmmword_1ECE86C80;
            *(_QWORD *)&v14 = v2;
            if (v2 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
            {
              if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v13))
              {
                v12 = 165;
              }
              else
              {
                v12 = 92;
              }
            }
            else
            {
              v12 = 92;
            }
            word_1ECE86C90 = v12;
          }
        }
        v7 = *(_OWORD *)(v6 + 1);
        *(_WORD *)(a1 + 32) = *((_WORD *)v6 + 12);
        *(_OWORD *)(a1 + 16) = v7;
      }
      v8 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      *(_DWORD *)(a1 + 56) = 3;
      v4 = *(_BOOL8 **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = 0;
    if (!v4)
    {
LABEL_13:
      *(_BYTE *)(a1 + 90) = 1;
      return v3;
    }
LABEL_12:
    WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser((WebCore::HTMLMetaCharsetParser *)v4, (WTF::StringImpl *)v2);
    WTF::fastFree(v9, v10);
    goto LABEL_13;
  }
  return v3;
}

uint64_t WebCore::findXMLEncoding(WebCore *this, const unsigned __int8 *a2, _DWORD *a3, const char *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v5 = (int)a2;
  v7 = (int)a2;
  v8 = WebCore::find(this, (const unsigned __int8 *)(int)a2, (unint64_t)a3, a4);
  v9 = (v8 + 8);
  if (v8 != -1 && (int)v9 < v5)
  {
    v11 = (int)v9;
    v12 = v9 << 32;
    while (*((unsigned __int8 *)this + v11) <= 0x20u)
    {
      ++v11;
      v12 += 0x100000000;
      result = 0xFFFFFFFFLL;
      if (v5 == (_DWORD)v11)
        return result;
    }
    if (*((_BYTE *)this + (v12 >> 32)) == 61)
    {
      result = v11 + 1;
      while (result < v7)
      {
        v14 = *((unsigned __int8 *)this + result++);
        v12 += 0x100000000;
        if (v14 >= 0x21)
        {
          v15 = *((unsigned __int8 *)this + (v12 >> 32));
          if (v15 != 39 && v15 != 34 || (int)result >= v5)
            return 0xFFFFFFFFLL;
          v16 = 0;
          while (*((unsigned __int8 *)this + (int)result + v16) != (char)v15)
          {
            ++v16;
            if ((int)result + v16 >= v7)
              return 0xFFFFFFFFLL;
          }
          *a3 = v16;
          return result;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::TextResourceDecoder::detectJapaneseEncoding(uint64_t result, const char *a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  __int16 v25;
  const char *v26[2];

  if (!a3)
    return result;
  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    result = (uint64_t)&a2[v8];
    v10 = a2[v8];
    if (v10 != 27)
    {
      result = v8;
      goto LABEL_9;
    }
    if (a3 - v8 < 3)
      goto LABEL_11;
    v11 = *(unsigned __int8 *)(result + 1);
    if (v11 == 36)
    {
LABEL_6:
      if ((*(unsigned __int8 *)(result + 2) | 2) == 0x42)
        goto LABEL_125;
LABEL_97:
      v7 = 0;
      v6 = 0;
      goto LABEL_98;
    }
    if (v11 == 40)
    {
      v16 = *(unsigned __int8 *)(result + 2);
      if (v16 != 73)
      {
        if (v16 == 66 || v16 == 74)
          goto LABEL_125;
        goto LABEL_97;
      }
    }
    else if (v11 != 41 || *(_BYTE *)(result + 2) != 73)
    {
      goto LABEL_97;
    }
    result = v8 + 3;
    if (v8 + 3 >= a3)
      goto LABEL_125;
    v10 = a2[result];
    if (v10 == 27)
      break;
    v6 = 0;
    v7 = 0;
LABEL_117:
    v9 = 1;
LABEL_9:
    if (v10 >= 0x20)
    {
      if (a3 - result >= 2)
      {
        if (v10 <= 163)
        {
          if (v10 != 130)
          {
            if (v10 == 131)
            {
              if (a2[result + 1] - 64 < 0x60)
                ++v5;
              if (v7)
                goto LABEL_38;
              goto LABEL_25;
            }
            goto LABEL_37;
          }
          if (a2[result + 1] > 0x9Fu)
            ++v5;
          if (!v7)
          {
LABEL_25:
            if (v10 != 142)
            {
              if ((v10 + 127) > 0x1Eu)
              {
                if ((v10 + 1) < 0xFEu)
                {
                  v7 = v10 >> 7;
                  if ((v10 & 0x80u) != 0)
                    v6 = 0;
                  goto LABEL_92;
                }
                if (a3 != result)
                {
                  if ((a2[result + 1] + 1) >= 0xA2u)
                    goto LABEL_127;
                  v7 = 0;
                  v9 = 2;
                  goto LABEL_92;
                }
                v7 = 0;
                v9 = 2;
              }
              else
              {
                if (a3 != result)
                {
                  if (a2[result + 1] < -3 || a2[result + 1] - 64 < 0x3F)
                    goto LABEL_124;
                  v7 = 0;
                  v9 = 3;
                  goto LABEL_92;
                }
                v7 = 0;
                v9 = 3;
              }
              v8 = a3;
              goto LABEL_98;
            }
            if (a3 - result >= 2)
            {
              v8 = result + 1;
              if ((a2[result + 1] + 95) > 0x3Eu)
                goto LABEL_124;
              v7 = 0;
              result = (v4 + 100);
              if (v6 == 1)
                v4 += 100;
              ++v6;
              goto LABEL_98;
            }
            v7 = 0;
            goto LABEL_92;
          }
LABEL_38:
          if (result)
          {
            v13 = a2[result - 1];
            if ((v10 - 64) <= 0x60 && (WebCore::KanjiCode::sjisMap[v13] & 1) != 0)
            {
LABEL_124:
              v21 = "Shift_JIS";
              goto LABEL_128;
            }
            if ((v13 + 127) <= 0x1Eu)
            {
              if ((v10 - 64) < 0x3Eu || (v10 - 127) < 0x7Eu)
                goto LABEL_124;
              goto LABEL_59;
            }
            v14 = (v10 + 1);
            if (v14 >= 0xFE && (v13 + 1) > 0xA1u || v14 >= 0xA2 && (v13 + 1) > 0xFDu)
            {
LABEL_127:
              v21 = "EUC-JP";
              goto LABEL_128;
            }
            if ((v10 + 32) <= 0xBFu)
            {
LABEL_59:
              if ((v10 & 0x80) == 0 || (_DWORD)v13 == 142)
                goto LABEL_124;
            }
          }
          else if ((v10 & 0x80) == 0)
          {
            goto LABEL_124;
          }
          v15 = (v10 + 95);
          if (v15 > 5)
          {
            if (v15 < 0x3F)
            {
              v7 = 0;
              v6 = 0;
              goto LABEL_92;
            }
            if ((v10 + 1) < 0xA2u)
            {
              v7 = 0;
              v6 = 0;
              if (v10 == 142)
                ++v4;
              goto LABEL_92;
            }
          }
          v7 = 0;
          v6 = 0;
          ++v4;
LABEL_92:
          v8 = result;
          goto LABEL_98;
        }
        if ((v10 == 164 || v10 == 165) && a2[result + 1] > 0x9Fu)
          ++v4;
      }
LABEL_37:
      if (v7)
        goto LABEL_38;
      goto LABEL_25;
    }
    v8 = result;
LABEL_11:
    if (v8 < 2)
      goto LABEL_97;
    v7 = 0;
    v12 = a2[v8 - 2];
    if (v12 > 0xA0)
    {
      if (v12 == 161)
      {
        v7 = 0;
        v6 = 0;
        result = (a2[v8 - 1] + 94);
        if (result < 9)
        {
          v9 = 2;
          v4 += 100;
        }
      }
      else
      {
        if (v12 != 164)
        {
LABEL_47:
          v6 = 0;
          goto LABEL_98;
        }
        v7 = 0;
        v6 = 0;
        result = a2[v8 - 1];
        if (result > 0x9F)
          v4 += 40;
      }
    }
    else if (v12 == 129)
    {
      v7 = 0;
      v6 = 0;
      result = a2[v8 - 1] - 65;
      if (result < 9)
      {
        v9 = 3;
        v5 += 100;
      }
    }
    else
    {
      if (v12 != 130)
        goto LABEL_47;
      v7 = 0;
      v6 = 0;
      result = a2[v8 - 1];
      if (result > 0x9F)
        v5 += 40;
    }
LABEL_98:
    if (++v8 >= a3)
    {
      switch(v9)
      {
        case 0:
          if (v5 > v4)
            goto LABEL_124;
          if (v5 < v4)
            goto LABEL_127;
          return result;
        case 1:
          goto LABEL_125;
        case 2:
          goto LABEL_127;
        case 3:
          goto LABEL_124;
        default:
          return result;
      }
    }
  }
  v17 = a3 - 3 - v8;
  while (1)
  {
    v18 = v17 >= 3;
    v17 -= 3;
    if (!v18)
    {
      v8 += 3;
      v9 = 1;
      goto LABEL_11;
    }
    v19 = a2[v8 + 4];
    if (v19 == 36)
    {
      v8 += 3;
      result = (uint64_t)&a2[v8];
      v9 = 1;
      goto LABEL_6;
    }
    if (v19 == 40)
      break;
    if (v19 != 41 || a2[v8 + 5] != 73)
      goto LABEL_121;
LABEL_110:
    if (v8 + 6 >= a3)
      goto LABEL_125;
    v10 = a2[v8 + 6];
    v8 += 3;
    if (v10 != 27)
    {
      v6 = 0;
      v7 = 0;
      result = v8 + 3;
      goto LABEL_117;
    }
  }
  v20 = a2[v8 + 5];
  if (v20 == 73)
    goto LABEL_110;
  if (v20 != 66 && v20 != 74)
  {
LABEL_121:
    v7 = 0;
    v6 = 0;
    v8 += 3;
    v9 = 1;
    goto LABEL_98;
  }
LABEL_125:
  v21 = "ISO-2022-JP";
LABEL_128:
  result = PAL::atomCanonicalTextEncodingName((PAL *)v21, a2);
  v22 = result;
  v24 = v23;
  v26[0] = (const char *)result;
  v26[1] = v23;
  if (v23 && (result = PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v26);
    if (result)
      v25 = 165;
    else
      v25 = 92;
  }
  else
  {
    v25 = 92;
  }
  if (v24 && !*(_BYTE *)(v3 + 94))
  {
    *(_QWORD *)(v3 + 16) = v22;
    *(_QWORD *)(v3 + 24) = v24;
    *(_WORD *)(v3 + 32) = v25;
    result = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_DWORD *)(v3 + 56) = 1;
  }
  return result;
}

uint64_t WebCore::TextTrackLoader::TextTrackLoader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;

  *(_QWORD *)a1 = off_1E33F7990;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1E33F79F0;
  if (!*(_QWORD *)(a2 + 8))
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v8 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = *(unsigned int **)(a2 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v16 = *(unsigned int **)(StatusReg + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 56) = off_1E31F7378;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E33F7C70;
  v18[1] = WebCore::TextTrackLoader::cueLoadTimerFired;
  v18[2] = 0;
  v18[3] = a1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

uint64_t WebCore::TextTrackLoader::cueLoadTimerFired(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  if (*(_BYTE *)(this + 120))
  {
    *(_BYTE *)(this + 120) = 0;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(this + 24) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(this + 24) + 8), this);
  }
  v2 = *(_DWORD *)(v1 + 112);
  if (v2 >= 2)
    return (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(*(_QWORD *)(v1 + 24) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8), v1, v2 == 3);
  return this;
}

void WebCore::TextTrackLoader::~TextTrackLoader(WebCore::TextTrackLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WebCore::WebVTTParser *v15;
  WTF *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _BYTE v28[24];
  unsigned int **v29;

  v4 = (unsigned int **)((char *)this + 40);
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v27 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (v6)
    {
      v29 = &v27;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v29, (uint64_t)v28), (v3 = v27) != 0))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v3 + 1);
        if (v8)
          WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
      }
    }
  }
  else
  {
    v27 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v27, a2);
  *((_QWORD *)this + 7) = off_1E31F7378;
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::TextTrackLoader *)((char *)this + 56));
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v23 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v23)
      {
        v26 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v23));
        v11 = v26;
      }
      v24 = *(WTF **)(v11 + 16);
      if (v24)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        v25 = v11;
        WTF::fastFree(v24, v10);
        v11 = v25;
      }
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v10);
  v15 = (WebCore::WebVTTParser *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    WebCore::WebVTTParser::~WebVTTParser(v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v14);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, v14);
      else
        --*(_DWORD *)v22;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::TextTrackLoader::~TextTrackLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::TextTrackLoader::~TextTrackLoader(WebCore::TextTrackLoader *this, void *a2)
{
  WebCore::TextTrackLoader::~TextTrackLoader((WebCore::TextTrackLoader *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextTrackLoader::~TextTrackLoader((WebCore::TextTrackLoader *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::TextTrackLoader::cancelLoad(WebCore::TextTrackLoader *this)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CachedResource *v8;
  unsigned int *v9;
  _BYTE v10[24];
  unsigned int **v11;

  v3 = (uint64_t *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v9 = (unsigned int *)v2;
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
    {
      v11 = &v9;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v11, (uint64_t)v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v3, 0);
  if (v9)
  {
    v8 = (WebCore::CachedResource *)*((_QWORD *)v9 + 1);
    if (v8)
      WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v9, v7);
}

uint64_t *WebCore::TextTrackLoader::processNewCueData(uint64_t *this, WebCore::CachedResource *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::WebVTTParser *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::TextTrackLoader *v25;
  WebCore::CachedResource *v26;
  WTF *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  char v31;
  char *v32;

  if (*((_DWORD *)this + 28) != 3)
  {
    v2 = (uint64_t)this;
    v3 = this[5];
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 392);
      if (v4)
      {
        do
          v5 = __ldaxr((unsigned int *)v4);
        while (__stlxr(v5 + 1, (unsigned int *)v4));
        v30 = v4;
        if (*(_QWORD *)(v4 + 48) == *((_DWORD *)this + 29))
          return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v30, a2);
        if (!this[4])
        {
          v6 = *(_QWORD *)(this[6] + 8);
          *(_DWORD *)(v6 + 24) += 2;
          v7 = WTF::fastMalloc((WTF *)0x158);
          WebCore::WebVTTParser::WebVTTParser(v7, (const char *)(v2 + 16), v6);
          v9 = *(WebCore::WebVTTParser **)(v2 + 32);
          *(_QWORD *)(v2 + 32) = v7;
          if (v9)
          {
            WebCore::WebVTTParser::~WebVTTParser(v9, v8);
            WTF::fastFree(v10, v11);
          }
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        a2 = (WebCore::CachedResource *)*(unsigned int *)(v2 + 116);
        if (*(_QWORD *)(v4 + 48) <= (unint64_t)a2)
        {
          return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v30, a2);
        }
        else
        {
          while (1)
          {
            WebCore::FragmentedSharedBuffer::getSomeData((WebCore::FragmentedSharedBuffer *)v4, (unint64_t)a2, &v27);
            v12 = v27;
            v13 = *((unsigned int *)v27 + 6);
            if ((_DWORD)v13 == -1)
              break;
            v14 = *(uint64_t **)(v2 + 32);
            v32 = &v31;
            v15 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v32, (char *)v27 + 8);
            v16 = *((unsigned int *)v12 + 6);
            if ((_DWORD)v16 == -1)
              break;
            v17 = v15;
            v32 = &v31;
            v18 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v32, (char *)v12 + 8);
            if (v18 < v28)
              goto LABEL_31;
            v19 = v29;
            if (v29 == -1)
            {
              v19 = v18 - v28;
            }
            else if (v18 - v28 < v29)
            {
LABEL_31:
              __break(1u);
              break;
            }
            WebCore::WebVTTParser::parseBytes(v14, (const char *)(v17 + v28), v19);
            *(_DWORD *)(v2 + 116) += v29;
            v21 = (unsigned int *)v27;
            v27 = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                v24 = v21[6];
                if ((_DWORD)v24 != -1)
                  ((void (*)(char **, unsigned int *))off_1E33F7AE0[v24])(&v32, v21 + 2);
                v21[6] = -1;
                WTF::fastFree((WTF *)v21, v20);
              }
            }
            a2 = (WebCore::CachedResource *)*(unsigned int *)(v2 + 116);
            v4 = v30;
            if (*(_QWORD *)(v30 + 48) <= (unint64_t)a2)
              return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v30, a2);
          }
          v25 = (WebCore::TextTrackLoader *)std::__throw_bad_variant_access[abi:sn180100]();
          return (uint64_t *)WebCore::TextTrackLoader::deprecatedDidReceiveCachedResource(v25, v26);
        }
      }
    }
  }
  return this;
}

void WebCore::TextTrackLoader::deprecatedDidReceiveCachedResource(WebCore::TextTrackLoader *this, WebCore::CachedResource *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  _BYTE v14[24];
  unsigned int **v15;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (!*(_QWORD *)(v4 + 392))
      return;
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      goto LABEL_21;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v10 = *(unsigned int **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v5;
    if (!v10)
      goto LABEL_21;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
LABEL_21:
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 + 1, (unsigned int *)v5));
      v13 = (unsigned int *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if (v7)
      {
        v15 = &v13;
        ++*(_DWORD *)(v7 + 548);
        v8 = *(_QWORD *)(v7 + 488);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), (uint64_t *)&v15, (uint64_t)v14);
        }
      }
      goto LABEL_9;
    }
LABEL_12:
    v13 = 0;
LABEL_9:
    WebCore::TextTrackLoader::processNewCueData((uint64_t *)this, a2);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, v9);
    return;
  }
  if (MEMORY[0x188])
    goto LABEL_12;
}

void WebCore::TextTrackLoader::notifyFinished(WebCore::TextTrackLoader *this, void *a2)
{
  WebCore::TextTrackLoader *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::WebVTTParser *v12;
  int v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WebCore::CachedResource *v20;
  unsigned int *v21;
  _BYTE v22[24];
  unsigned int **v23;

  v2 = this;
  v3 = (uint64_t *)((char *)this + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v22);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v5 + 60) == 2)
  {
    if ((_MergedGlobals_207 & 1) == 0)
    {
      WebCore::TextTrackLoader::corsPolicyPreventedLoad(void)::$_0::operator() const(void)::impl += 2;
      qword_1ECE83818 = (uint64_t)&WebCore::TextTrackLoader::corsPolicyPreventedLoad(void)::$_0::operator() const(void)::impl;
      _MergedGlobals_207 = 1;
    }
    v6 = *(_QWORD *)(*((_QWORD *)v2 + 6) + 8);
    *(_DWORD *)(v6 + 24) += 2;
    this = (WebCore::TextTrackLoader *)WebCore::Document::addConsoleMessage((_QWORD *)v6, 8, 2, (WTF::StringImpl **)&qword_1ECE83818, 0);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        this = (WebCore::TextTrackLoader *)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    *((_DWORD *)v2 + 28) = 3;
  }
  v7 = *((_QWORD *)v2 + 5);
  if (*(_QWORD *)(*(_QWORD *)(v7 + 8) + 392))
  {
    if (*((_DWORD *)v2 + 28) != 3)
    {
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
      v21 = (unsigned int *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      if (v9)
      {
        v23 = &v21;
        ++*(_DWORD *)(v9 + 548);
        v10 = *(_QWORD *)(v9 + 488);
        if (v10)
        {
          if (*(_QWORD *)(v10 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v23, (uint64_t)v22);
        }
      }
      WebCore::TextTrackLoader::processNewCueData((uint64_t *)v2, (WebCore::CachedResource *)a2);
      v12 = (WebCore::WebVTTParser *)*((_QWORD *)v2 + 4);
      if (v12)
        WebCore::WebVTTParser::fileFinished(v12);
      if (*((_DWORD *)v2 + 28) != 3)
      {
        if ((*(_WORD *)(*((_QWORD *)v21 + 1) + 557) >> 5) - 3 >= 2)
          v13 = 2;
        else
          v13 = 3;
        *((_DWORD *)v2 + 28) = v13;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, v11);
      if (*((_DWORD *)v2 + 28) == 2)
      {
        this = (WebCore::TextTrackLoader *)*((_QWORD *)v2 + 4);
        if (this)
          this = (WebCore::TextTrackLoader *)WebCore::WebVTTParser::flush((WebCore::TextResourceDecoder **)this);
      }
    }
  }
  else
  {
    *((_DWORD *)v2 + 28) = 3;
  }
  if ((*((_QWORD *)v2 + 11) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)v2 + 11) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v2 + 10) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v2 + 56, v14 + 0.0);
  }
  v15 = *v3;
  if (*v3)
  {
    do
      v16 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v16 + 1, (unsigned int *)v15));
    v21 = (unsigned int *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    if (v17)
    {
      v23 = &v21;
      ++*(_DWORD *)(v17 + 548);
      v18 = *(_QWORD *)(v17 + 488);
      if (v18)
      {
        if (*(_QWORD *)(v18 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v23, (uint64_t)v22);
      }
    }
  }
  else
  {
    v21 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v3, 0);
  if (v21)
  {
    v20 = (WebCore::CachedResource *)*((_QWORD *)v21 + 1);
    if (v20)
      WebCore::CachedResource::removeClient(v20, (unsigned int **)v2);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, v19);
}

void WebCore::TextTrackLoader::load(WebCore::TextTrackLoader *this, const WTF::URL *a2, WebCore::HTMLTrackElement *a3)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::CachedResource *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t *v30;
  void *v31;
  WebCore::CachedResourceLoader *v32;
  WebCore::CachedResource *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  WTF::StringImpl *v47;
  void *v48;
  CFTypeRef v49;
  WebCore::FormData *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  unsigned int *v65;
  unsigned int **v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[7];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  char v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WebCore::FormData *v77;
  int v78;
  char v79;
  char v80;
  CFTypeRef cf;
  uint64_t v82[3];
  unsigned int **v83;
  _QWORD v84[10];
  unsigned int v85;
  WTF::StringImpl *v86;
  __int128 v87;
  __int128 v88;
  unsigned int *v89[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  char v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)((char *)this + 40);
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    do
      v8 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v8 + 1, (unsigned int *)v6));
    v89[0] = (unsigned int *)v6;
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v66 = v89;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v66, (uint64_t)&v86);
      }
    }
  }
  else
  {
    v89[0] = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v7, 0);
  if (v89[0])
  {
    v12 = (WebCore::CachedResource *)*((_QWORD *)v89[0] + 1);
    if (v12)
      WebCore::CachedResource::removeClient(v12, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v89, v11);
  {
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
  }
  LODWORD(v89[0]) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
  *(_DWORD *)((char *)v89 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                        + 3);
  v13 = (unsigned int *)qword_1ECE90818;
  if (qword_1ECE90818)
    *(_DWORD *)qword_1ECE90818 += 2;
  v90 = xmmword_1ECE90820;
  v91 = *(_OWORD *)algn_1ECE90830;
  v89[1] = v13;
  v92 = qword_1ECE90840;
  v93 = 0;
  v14 = dword_1ECE90854;
  v94 = 0;
  v95 = dword_1ECE90854;
  if (dword_1ECE90854)
  {
    if (dword_1ECE90854 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v60 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
    v94 = v14;
    v93 = v60;
    if (dword_1ECE90854)
    {
      v61 = qword_1ECE90848;
      v62 = qword_1ECE90848 + 16 * dword_1ECE90854;
      do
      {
        v63 = *(_DWORD **)v61;
        if (*(_QWORD *)v61)
          *v63 += 2;
        *(_QWORD *)v60 = v63;
        *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
        v61 += 16;
        v60 += 16;
      }
      while (v61 != v62);
    }
  }
  v96 = dword_1ECE90858;
  v97 = byte_1ECE9085C;
  LOBYTE(v98) = 0;
  v101 = 0;
  if (byte_1ECE90878)
  {
    v98 = word_1ECE90860;
    v15 = qword_1ECE90868;
    if (qword_1ECE90868)
      *(_DWORD *)qword_1ECE90868 += 2;
    v99 = v15;
    v16 = qword_1ECE90870;
    if (qword_1ECE90870)
      *(_DWORD *)qword_1ECE90870 += 2;
    v100 = v16;
    v101 = 1;
  }
  v102 = xmmword_1ECE90880;
  v17 = qword_1ECE90890;
  if (qword_1ECE90890)
    *(_DWORD *)qword_1ECE90890 += 2;
  v103 = v17;
  v18 = **((_QWORD **)a3 + 5);
  if (v18 && (*(_WORD *)(v18 + 28) & 0x80) != 0)
  {
    v20 = *(_DWORD *)((char *)&v102 + 2);
    v19 = (*(_BYTE *)(v18 + 193) != 0) << 8;
  }
  else
  {
    v19 = 256;
    v20 = *(_DWORD *)((char *)&v102 + 2);
  }
  *(_DWORD *)((char *)&v102 + 2) = v19 | v20 & 0xFFFFFEFF;
  v21 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  *(_DWORD *)(v21 + 24) += 2;
  WebCore::Document::completeURL((WebCore::Document *)v21, a2, v21 + 848, 0, (WTF::URL *)&v86);
  v22 = v86;
  if (v86)
    *(_DWORD *)v86 += 2;
  v66 = (unsigned int **)v22;
  v67 = v87;
  v68 = v88;
  v69[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v69);
  v69[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69[6] = v84[0];
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0x10000;
  v24 = v74 & 0x80 | 4;
  v74 = v24;
  v75 = 0;
  v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *(_DWORD *)v25 += 2;
    v24 = v74;
  }
  v76 = v25;
  v77 = 0;
  LOBYTE(v78) = 0;
  v79 = 0;
  v80 = v80 & 0xE0 | 5;
  v74 = v24 | 2;
  cf = 0;
  v26 = v86;
  v86 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *((_QWORD *)a3 + 4);
  if (v27
    && (*(_WORD *)(v27 + 28) & 8) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v27 + 824))(*((_QWORD *)a3 + 4)))
  {
    *(_DWORD *)(v27 + 24) += 2;
    LODWORD(v29) = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
    if (!(_DWORD)v29)
      goto LABEL_37;
    v54 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
    v55 = *(_QWORD *)(v54 + 528);
    if (v55)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 24);
        if (v57)
        {
          v58 = *(_QWORD *)(v57 + 8);
          if (v58)
            goto LABEL_99;
        }
      }
    }
    v29 = *(_QWORD **)(v54 + 2632);
    if (!v29
      || (v29 = (_QWORD *)v29[1]) == 0
      || (v29 = (_QWORD *)v29[66]) == 0
      || (v29 = (_QWORD *)v29[1]) == 0
      || (v29 = (_QWORD *)v29[3]) == 0)
    {
LABEL_37:
      v78 = (int)v29;
      v79 = 1;
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, v28);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
      goto LABEL_39;
    }
    v58 = v29[1];
    if (v58)
    {
LABEL_99:
      v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 80) + 8) + 40);
      if (v59)
      {
        v86 = 0;
        v64 = WebCore::InspectorDOMAgent::pushNodePathToFrontend(v59, (WebCore::Node *)&v86, (WebCore::InspectorDOMAgent *)v27);
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
            WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v86 -= 2;
        }
        LODWORD(v29) = v64;
        goto LABEL_37;
      }
    }
    LODWORD(v29) = 0;
    goto LABEL_37;
  }
LABEL_39:
  v30 = (uint64_t *)WebCore::HTMLTrackElement::mediaElementCrossOriginAttribute(a3);
  WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v66, (WTF::StringImpl *)v89, v21, v30, 0, (uint64_t)&v86);
  v32 = *(WebCore::CachedResourceLoader **)(v21 + 720);
  if (!v32)
    v32 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v21, v31);
  ++*(_DWORD *)v32;
  WebCore::CachedResourceLoader::requestTextTrack((WebCore::ResourceRequest *)&v86, v32, (uint64_t)v84);
  if (v85 || (v34 = (unsigned int *)v84[0]) == 0)
  {
    v33 = 0;
    v65 = 0;
  }
  else
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v65 = v34;
    v36 = *((_QWORD *)v34 + 1);
    if (v36
      && ((v83 = &v65, ++*(_DWORD *)(v36 + 548), (v37 = *(_QWORD *)(v36 + 488)) == 0)
       || !*(_QWORD *)(v37 + 8)
       || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v36 + 464), (uint64_t *)&v83, (uint64_t)v82), (v34 = v65) != 0)))
    {
      v33 = (WebCore::CachedResource *)*((_QWORD *)v34 + 1);
    }
    else
    {
      v33 = 0;
    }
  }
  WebCore::CachedResourceHandleBase::setResource(v7, v33);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v65, v38);
  if (v85 != -1)
    (*(&off_1E33F7B00 + v85))((int)v82, (WebCore::CachedResourceHandleBase *)v84);
  v85 = -1;
  if (*(_DWORD *)v32 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v32, v39);
    WTF::fastFree(v45, v46);
  }
  else
  {
    --*(_DWORD *)v32;
  }
  v40 = (unsigned int *)*v7;
  if (*v7)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    v83 = (unsigned int **)v40;
    v42 = *((_QWORD *)v40 + 1);
    if (v42)
    {
      v82[0] = (uint64_t)&v83;
      ++*(_DWORD *)(v42 + 548);
      v43 = *(_QWORD *)(v42 + 488);
      if (!v43
        || !*(_QWORD *)(v43 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v42 + 464), v82, (uint64_t)v84), (v40 = (unsigned int *)v83) != 0))
      {
        v44 = *((_QWORD *)v40 + 1);
        if (v44)
        {
          if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v40 + 1), this))
            (*(void (**)(uint64_t, WebCore::TextTrackLoader *))(*(_QWORD *)v44 + 88))(v44, this);
        }
      }
    }
  }
  else
  {
    v83 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v83, v39);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v86, v47);
  v49 = cf;
  cf = 0;
  if (v49)
    CFRelease(v49);
  v50 = v77;
  v77 = 0;
  if (v50)
    WTF::RefCounted<WebCore::FormData>::deref(v50, v48);
  v51 = v76;
  v76 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v48);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = v75;
  v75 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v48);
    else
      *(_DWORD *)v52 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v66, (WTF::StringImpl *)v48);
  if (*(_DWORD *)(v21 + 24) == 2)
  {
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v53);
  }
  else
  {
    *(_DWORD *)(v21 + 24) -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v89, (WTF::StringImpl *)v53);
}

double WebCore::TextTrackLoader::newCuesParsed(WebCore::TextTrackLoader *this)
{
  char *v1;
  double v2;
  double result;

  if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 56;
    *((_BYTE *)this + 120) = 1;
    *((_QWORD *)this + 10) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

double `non-virtual thunk to'WebCore::TextTrackLoader::newCuesParsed(WebCore::TextTrackLoader *this)
{
  char *v1;
  double v2;
  double result;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 40;
    *((_BYTE *)this + 104) = 1;
    *((_QWORD *)this + 8) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

uint64_t WebCore::TextTrackLoader::newRegionsParsed(WebCore::TextTrackLoader *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::TextTrackLoader *))(**(_QWORD **)(*((_QWORD *)this + 3) + 8)
                                                                       + 32))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), this);
}

uint64_t `non-virtual thunk to'WebCore::TextTrackLoader::newRegionsParsed(WebCore::TextTrackLoader *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), (char *)this - 16);
}

uint64_t WebCore::TextTrackLoader::newStyleSheetsParsed(WebCore::TextTrackLoader *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::TextTrackLoader *))(**(_QWORD **)(*((_QWORD *)this + 3) + 8)
                                                                       + 40))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), this);
}

uint64_t `non-virtual thunk to'WebCore::TextTrackLoader::newStyleSheetsParsed(WebCore::TextTrackLoader *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), (char *)this - 16);
}

void WebCore::TextTrackLoader::fileFailedToParse(WebCore::TextTrackLoader *this)
{
  double v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CachedResource *v8;
  unsigned int *v9;
  _BYTE v10[24];
  unsigned int **v11;

  *((_DWORD *)this + 28) = 3;
  if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 56, v2 + 0.0);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    v9 = (unsigned int *)v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v11 = &v9;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v11, (uint64_t)v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 5, 0);
  if (v9)
  {
    v8 = (WebCore::CachedResource *)*((_QWORD *)v9 + 1);
    if (v8)
      WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v9, v7);
}

void `non-virtual thunk to'WebCore::TextTrackLoader::fileFailedToParse(WebCore::TextTrackLoader *this)
{
  WebCore::TextTrackLoader::fileFailedToParse((WebCore::TextTrackLoader *)((char *)this - 16));
}

WTF::StringImpl **WebCore::TextTrackLoader::getNewCues@<X0>(WTF::StringImpl **this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;

  v4 = this[4];
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 37);
    v6 = *((unsigned int *)v4 + 77);
    *((_QWORD *)v4 + 37) = 0;
    *((_QWORD *)v4 + 38) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v7 = this;
      v8 = 8 * v6;
      v9 = WTF::fastMalloc((WTF *)(8 * v6));
      v10 = 0;
      *(_DWORD *)(a3 + 8) = v6;
      *(_QWORD *)a3 = v9;
      do
      {
        v11 = (_QWORD *)*((_QWORD *)v5 + v10);
        v12 = *((_QWORD *)v7[6] + 1);
        *(_DWORD *)(v12 + 24) += 2;
        v13 = bmalloc::api::isoAllocate();
        v14 = WebCore::VTTCue::VTTCue(v13, v12, v11);
        WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v14 + 32));
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
        *(_QWORD *)(v9 + 8 * v10) = v13;
        *(_DWORD *)(a3 + 12) = ++v10;
      }
      while (v6 != v10);
      v15 = (WTF::StringImpl ***)v5;
      do
      {
        this = *v15;
        *v15 = 0;
        if (this)
          this = WTF::RefCounted<WebCore::WebVTTCueData>::deref(this, (WTF::StringImpl *)a2);
        ++v15;
        v8 -= 8;
      }
      while (v8);
    }
    if (v5)
      return (WTF::StringImpl **)WTF::fastFree(v5, a2);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return this;
}

double WebCore::ThreadableLoaderOptions::ThreadableLoaderOptions(WebCore::ThreadableLoaderOptions *this)
{
  double result;

  *(_BYTE *)this = 0;
  *(_DWORD *)((char *)this + 2) = 0;
  *((_BYTE *)this + 6) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) = 1;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_WORD *)this + 56) = 20;
  *(_DWORD *)((char *)this + 114) = *(_DWORD *)((_BYTE *)this + 114) & 0xF0000000 | 0xC0009C3;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1;
  *((_BYTE *)this + 1) = 1;
  return result;
}

void WebCore::ThreadableLoaderOptions::~ThreadableLoaderOptions(WebCore::ThreadableLoaderOptions *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions(this, a2);
}

WTF::StringImpl *WebCore::ThreadableLoader::loadResourceSynchronously(_BYTE *a1, WebCore::ResourceRequest *this, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v8 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v8 += 2;
  v12 = v8;
  v9 = *(_OWORD *)((char *)this + 24);
  v13 = *(_OWORD *)((char *)this + 8);
  v14 = v9;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1))
  {
    WebCore::WorkerThreadableLoader::loadResourceSynchronously((uint64_t)a1, (uint64_t)this, a3, a4);
  }
  else
  {
    if (a1[274])
    {
      __break(0xC471u);
      JUMPOUT(0x195F238BCLL);
    }
    WebCore::DocumentThreadableLoader::loadResourceSynchronously((uint64_t)(a1 - 192), (uint64_t)this, a3, a4);
  }
  (*(void (**)(_BYTE *, WTF::StringImpl **))(*(_QWORD *)a1 + 296))(a1, &v12);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::WorkerThreadableLoader::loadResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17[2];

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 360) + 48);
  v9 = v8[1] + 1;
  v8[1] = v9;
  v17[0] = (WTF::StringImpl *)"loadResourceSynchronouslyMode";
  v17[1] = (WTF::StringImpl *)30;
  v16 = v9;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v17, (unint64_t *)&v16, &v15);
  if (v15)
  {
    v17[0] = 0;
    v11 = WTF::fastMalloc((WTF *)0x20);
    if (!*(_BYTE *)(*(_QWORD *)(WebCore::WorkerThreadableLoader::WorkerThreadableLoader(v11, a1, a3, (uint64_t)&v15, a2, a4, v17)+ 16)+ 24))
    {
      do
        v13 = (*(uint64_t (**)(_QWORD *, uint64_t, WTF::StringImpl **, _QWORD))(*v8 + 16))(v8, a1, &v15, 0);
      while (!*(_BYTE *)(*(_QWORD *)(v11 + 16) + 24) && (v13 & 1) != 0);
      if (*(_BYTE *)(*(_QWORD *)(v11 + 16) + 24))
        v14 = 1;
      else
        v14 = v13;
      if ((v14 & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    if (*(_DWORD *)(v11 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      --*(_DWORD *)(v11 + 8);
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WebCore::ThreadableLoader::logError(WebCore::ThreadableLoader *this, WTF::StringImpl **a2, WTF **a3, const WTF::String *a4)
{
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  if (*((_BYTE *)a2 + 60) != 3)
  {
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
    if (a2[1])
    {
      WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
      v7 = MEMORY[0x19AEA53F4](*a2, "WebKitInternal", 14);
      if ((v7 & 1) != 0
        || (WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2),
            v7 = MEMORY[0x19AEA53F4](*a2, "WebKitServiceWorker", 19),
            (v7 & 1) != 0)
        || *((_BYTE *)a2 + 60) == 2)
      {
        v8 = WebCore::cachedResourceRequestInitiatorTypes((WebCore *)v7);
        v10 = WTF::equal(*a3, *(const WTF::StringImpl **)(v8 + 8), v9);
        if ((v10 & 1) != 0)
        {
          v11 = "EventSource cannot load ";
          v12 = 25;
        }
        else
        {
          v21 = WebCore::cachedResourceRequestInitiatorTypes((WebCore *)v10);
          v23 = WTF::equal(*a3, *(const WTF::StringImpl **)(v21 + 16), v22);
          if ((v23 & 1) != 0)
          {
            v11 = "Fetch API cannot load ";
            v12 = 23;
          }
          else
          {
            v24 = WebCore::cachedResourceRequestInitiatorTypes((WebCore *)v23);
            v26 = WTF::equal(*a3, *(const WTF::StringImpl **)(v24 + 40), v25);
            if (v26)
              v11 = "XMLHttpRequest cannot load ";
            else
              v11 = "Cannot load ";
            if (v26)
              v12 = 28;
            else
              v12 = 13;
          }
        }
        v13 = *((unsigned __int8 *)a2 + 60);
        if (v13 == 2)
          v14 = " due to access control checks.";
        else
          v14 = ".";
        if (v13 == 2)
          v15 = 31;
        else
          v15 = 2;
        WTF::String::String(&v28, (uint64_t)v14, v15);
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
        v16 = a2[1];
        if (v16)
          *(_DWORD *)v16 += 2;
        v17 = v28;
        if (v28)
          *(_DWORD *)v28 += 2;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::String>(&v27, v11, v12, (uint64_t)v16, (uint64_t)v17);
        (*(void (**)(WebCore::ThreadableLoader *, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)this + 248))(this, 1, 2, &v27, 0);
        v19 = v27;
        v27 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v18);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v18);
          else
            *(_DWORD *)v16 -= 2;
        }
        v20 = v28;
        v28 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
}

uint64_t WebCore::cachedResourceRequestInitiatorTypes(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 96)) == 0)
    v2 = WebCore::threadGlobalDataSlow(this);
  result = *(_QWORD *)(v2 + 32);
  if (!result)
  {
    WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v2);
    return *(_QWORD *)(v2 + 32);
  }
  return result;
}

_QWORD *WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::String>(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  size_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;

  v5 = a5;
  v6 = a4;
  v8 = result;
  if (a3)
  {
    v9 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_42:
      JUMPOUT(0x195F23EC4);
    }
  }
  else
  {
    v9 = 0;
  }
  if (!a4)
  {
    v10 = 0;
    if (a5)
      goto LABEL_5;
LABEL_33:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a4 + 4);
  if (!a5)
    goto LABEL_33;
LABEL_5:
  v11 = *(_DWORD *)(a5 + 4);
LABEL_6:
  if ((v11 | v10) < 0)
    goto LABEL_37;
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  if (v12)
    goto LABEL_37;
  v14 = v9 + v13;
  if (__OFADD__((_DWORD)v9, v13))
    goto LABEL_37;
  if (!a4)
  {
    if (!a5)
    {
      if (v14)
      {
        v6 = 0;
        v5 = 0;
        v16 = v14;
        if ((v14 & 0x80000000) == 0)
        {
LABEL_15:
          WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
          v18 = v31;
          if (v31)
          {
            v19 = (_BYTE *)(v31 + 20);
            *(_DWORD *)v31 = 2;
            *(_DWORD *)(v31 + 4) = v14;
            *(_QWORD *)(v31 + 8) = v31 + 20;
            *(_DWORD *)(v31 + 16) = 4;
            if ((_DWORD)v9)
            {
              if ((_DWORD)v9 == 1)
                *v19 = *(_BYTE *)a2;
              else
                memcpy((void *)(v31 + 20), a2, v9);
            }
            result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v19[v9], v6, v5);
            goto LABEL_31;
          }
        }
LABEL_37:
        *v8 = 0;
        __break(0xC471u);
        goto LABEL_42;
      }
LABEL_39:
      v18 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_31;
    }
LABEL_12:
    v16 = v14;
    v17 = v14 == 0;
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      goto LABEL_13;
    goto LABEL_21;
  }
  v15 = *(_DWORD *)(a4 + 16);
  if (a5 && (v15 & 4) != 0)
    goto LABEL_12;
  v16 = v14;
  v17 = v14 == 0;
  if ((v15 & 4) != 0)
  {
LABEL_13:
    if (!v17)
    {
      if ((v14 & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_37;
    }
    goto LABEL_39;
  }
LABEL_21:
  if (v17)
    goto LABEL_39;
  if (v14 > 0x7FFFFFEF)
    goto LABEL_37;
  WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20));
  v18 = v31;
  if (!v31)
    goto LABEL_37;
  v20 = (char *)(v31 + 20);
  *(_DWORD *)v31 = 2;
  *(_DWORD *)(v31 + 4) = v14;
  *(_QWORD *)(v31 + 8) = v31 + 20;
  *(_DWORD *)(v31 + 16) = 0;
  v21 = (char *)(v31 + 20 + 2 * v9);
  if ((v9 & 0x7FFFFFC0) != 0)
  {
    v22 = &v20[2 * (v9 & 0x7FFFFFC0)];
    v23 = 0uLL;
    do
    {
      v32.val[0] = (int8x16_t)*a2;
      v24 = *((int8x16_t *)a2 + 1);
      v33.val[0] = (int8x16_t)a2[2];
      v25 = a2[3];
      a2 += 4;
      v26 = v25;
      v33.val[1] = 0uLL;
      v34.val[0] = v24;
      v32.val[1] = 0uLL;
      v27 = v20;
      vst2q_s8(v27, v32);
      v27 += 32;
      v34.val[1] = 0uLL;
      vst2q_s8(v27, v34);
      v28 = v20 + 64;
      vst2q_s8(v28, v33);
      v29 = v20 + 96;
      vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
      v20 += 128;
    }
    while (v20 != v22);
    v20 = v22;
  }
  while (v20 != v21)
  {
    v30 = *(unsigned __int8 *)a2;
    a2 = (_OWORD *)((char *)a2 + 1);
    *(_WORD *)v20 = v30;
    v20 += 2;
  }
  result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, v6, v5);
LABEL_31:
  *v8 = v18;
  return result;
}

uint64_t WebCore::WorkerThreadableLoader::WorkerThreadableLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::URL *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _OWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33F7A30;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v14 = 1;
  v15 = *(_QWORD *)(a3 + 8);
  if (v15)
    goto LABEL_25;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = a3;
  v17 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v15;
  if (!v17)
    goto LABEL_25;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v15 = *(_QWORD *)(a3 + 8);
  if (v15)
  {
LABEL_25:
    do
      v20 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v20 + 1, (unsigned int *)v15));
  }
  *(_QWORD *)(v14 + 8) = v15;
  WTF::String::isolatedCopy();
  *(_BYTE *)(v14 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v14;
  v21 = WTF::fastMalloc((WTF *)0xF0);
  v22 = *(unsigned int **)(a1 + 16);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 360) + 48))(*(_QWORD *)(a2 + 360));
  v24 = *(_OWORD *)(a2 + 240);
  v32[0] = *(_OWORD *)(a2 + 224);
  v32[1] = v24;
  v25 = *a7;
  if (v25 && *((_DWORD *)v25 + 1))
  {
    *(_DWORD *)v25 += 2;
    v31 = v25;
    WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(v21, v22, v23, v32, a4, a5, a6, &v31, a2);
    if (*(_DWORD *)v25 != 2)
    {
      *(_DWORD *)v25 -= 2;
      goto LABEL_15;
    }
    v28 = v25;
LABEL_21:
    WTF::StringImpl::destroy(v28, v27);
    goto LABEL_15;
  }
  v26 = (WTF::URL *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  WTF::URL::strippedForUseAsReferrer(v26);
  if (v30)
  {
    *(_DWORD *)v30 += 2;
    v31 = v30;
    WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(v21, v22, v23, v32, a4, a5, a6, &v31, a2);
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v27);
    else
      *(_DWORD *)v30 -= 2;
  }
  else
  {
    v31 = 0;
    WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(v21, v22, v23, v32, a4, a5, a6, &v31, a2);
  }
  v28 = v30;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      goto LABEL_21;
    *(_DWORD *)v30 -= 2;
  }
LABEL_15:
  *(_QWORD *)(a1 + 24) = v21;
  return a1;
}

void WebCore::WorkerThreadableLoader::~WorkerThreadableLoader(WebCore::WorkerThreadableLoader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  char v26;

  *(_QWORD *)this = off_1E33F7A30;
  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
  {
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
  }
  *(_BYTE *)(v4 + 24) = 1;
  v6 = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  do
  {
    v9 = __ldaxr((unsigned int *)v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v4));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v4);
    v17 = *(WTF::StringImpl **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(unsigned int **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  v11 = *(_QWORD *)(v3 + 48);
  if (v11)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E33F7CC0;
    v12[1] = v3;
    v25 = v12;
    v26 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 56))(v11, &v25);
    v13 = v25;
    v25 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v21 = *(WTF::StringImpl **)(v14 + 16);
      *(_QWORD *)(v14 + 16) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(unsigned int **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, a2);
        }
      }
      WTF::fastFree((WTF *)v14, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerThreadableLoader::~WorkerThreadableLoader(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::WorkerThreadableLoader::cancel(WebCore::WorkerThreadableLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  __int16 v26;
  CFTypeRef cf;
  char v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(v1 + 48);
  if (v2)
  {
    v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E33F7CE8;
    *((_QWORD *)v3 + 1) = v1;
    v22 = v3;
    LOBYTE(v23) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 56))(v2, &v22);
    v4 = v22;
    v22 = 0;
    if (v4)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(_QWORD *)(v1 + 40);
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  v22 = 0;
  v23 = 0;
  WTF::URL::invalidate((WTF::URL *)&v23);
  v24 = 0;
  v25 = 0;
  v26 = 3;
  cf = 0;
  v28 = 1;
  *(_QWORD *)&v30 = 0;
  v29 = 0uLL;
  *(_BYTE *)(v5 + 24) = 1;
  v8 = *(_QWORD *)(v5 + 8);
  if (!v8)
  {
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 8) = 0;
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    v31[0] = v29;
    v31[1] = v30;
    (*(void (**)(uint64_t, _OWORD *, WTF::StringImpl **))(*(_QWORD *)v9 + 32))(v9, v31, &v22);
    v8 = *(_QWORD *)(v5 + 8);
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 8) = 0;
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 8) = 0;
  }
  do
  {
    v10 = __ldaxr((unsigned int *)v8);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v8));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, v7);
  }
LABEL_15:
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v16 = __ldaxr((unsigned int *)v5);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v5));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v5);
    v18 = *(WTF::StringImpl **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v7);
      }
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v5, v7);
  }
  return result;
}

_QWORD *WebCore::WorkerThreadableLoader::computeIsDone(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;

  v1 = this[3];
  v2 = *(_QWORD *)(v1 + 48);
  if (v2)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33F7D10;
    v3[1] = v1;
    v4 = v3;
    v5 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 56))(v2, &v4);
    this = v4;
    v4 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(uint64_t a1, unsigned int *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, WTF::StringImpl **a8, uint64_t a9)
{
  unsigned int v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  WebCore::SecurityOrigin *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _DWORD **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  Inspector::IdentifiersFactory *v63;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  void *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  Inspector::InspectorDebuggerAgent **v105;
  CFTypeRef v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WebCore::SecurityOrigin *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  __int128 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  WTF::StringImpl *v136;
  __int16 v137;
  __int128 v138;
  WTF::StringImpl *v139;
  __int16 v140;
  __int128 v141;
  WTF::StringImpl *v142;
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  char v150;
  __int16 v151;
  char v152;
  int64x2_t v153;
  int64x2_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int64x2_t v158;
  uint64_t v159;
  char v160;
  __int16 v161;
  char v162;
  CFTypeRef cf;
  char v164;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E33F7A70;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  do
    v14 = __ldaxr(a2);
  while (__stlxr(v14 + 1, a2));
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  WTF::String::isolatedCopy();
  if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    goto LABEL_143;
  }
  *(_QWORD *)(a1 + 64) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = -1;
  *(_QWORD *)(a1 + 184) = -1;
  *(_QWORD *)(a1 + 192) = 0;
  v15 = a4[1];
  *(_OWORD *)(a1 + 208) = *a4;
  *(_OWORD *)(a1 + 224) = v15;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a9, v16);
  v18 = v17;
  if (v17)
  {
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 + 1, v17));
  }
  v20 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)a9);
  v21 = v20;
  if (v20)
  {
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 + 1, v20));
  }
  v23 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
  WebCore::SecurityOrigin::SecurityOrigin(v23, (const WebCore::SecurityOrigin *)v18);
  v24 = *(_QWORD *)(a1 + 48);
  if (!v24 || (v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24)) == 0)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 64))(a9);
    if (v26)
      v27 = a9;
    else
      v27 = 0;
    v28 = v27 + 440;
    if (v26)
      v25 = v28;
    else
      v25 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a9 + 112))(a9);
  WTF::URL::isolatedCopy();
  v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xF0);
  WebCore::ContentSecurityPolicy::ContentSecurityPolicy((uint64_t)v29, (uint64_t *)&v142, 0, v25);
  v31 = v142;
  v142 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WebCore::ContentSecurityPolicy::copyStateFrom(v29, (uint64_t)v21, 1);
  WebCore::ContentSecurityPolicy::copyUpgradeInsecureRequestStateFrom((uint64_t)v29, (uint64_t)v21, 1);
  v140 = *(_WORD *)(a9 + 24);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  if ((*(_BYTE *)(a6 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
    *(_BYTE *)(a6 + 184) |= 1u;
  }
  v32 = *(unsigned int *)(a6 + 108);
  v110 = v23;
  if (!(_DWORD)v32)
    goto LABEL_25;
  v33 = 0;
  v34 = (WTF::StringImpl **)(*(_QWORD *)(a6 + 96) + 8);
  while (*((_WORD *)v34 - 4) != 60)
  {
    ++v33;
    v34 += 2;
    if (v32 == v33)
      goto LABEL_25;
  }
  if (v33 >= v32)
  {
    __break(0xC471u);
    JUMPOUT(0x195F25160);
  }
  v35 = *v34;
  if (!*v34)
  {
LABEL_25:
    v35 = 0;
    v36 = 0;
    v37 = *a8;
    v38 = 1;
    if (!*a8)
      goto LABEL_36;
    goto LABEL_26;
  }
  *(_DWORD *)v35 += 2;
  if ((*(_BYTE *)(a6 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
    *(_BYTE *)(a6 + 184) |= 1u;
  }
  v39 = *(unsigned int *)(a6 + 108);
  if (!(_DWORD)v39)
  {
LABEL_35:
    v36 = 0;
    v38 = 0;
    goto LABEL_36;
  }
  v40 = 0;
  v41 = (_DWORD **)(*(_QWORD *)(a6 + 96) + 8);
  while (*((_WORD *)v41 - 4) != 60)
  {
    ++v40;
    v41 += 2;
    if (v39 == v40)
      goto LABEL_35;
  }
  if (v40 >= v39)
  {
    __break(0xC471u);
LABEL_143:
    JUMPOUT(0x195F24F04);
  }
  v38 = 0;
  v37 = (WTF::StringImpl *)*v41;
  if (v37)
  {
LABEL_26:
    *(_DWORD *)v37 += 2;
    v36 = v37;
    goto LABEL_36;
  }
  v36 = 0;
LABEL_36:
  v139 = v36;
  v42 = WTF::fastMalloc((WTF *)0xB0);
  WebCore::ThreadableLoaderOptions::ThreadableLoaderOptions((WebCore::ThreadableLoaderOptions *)v42);
  *(_DWORD *)v43 = *(_DWORD *)a7;
  *(_WORD *)(v43 + 4) = *(_WORD *)(a7 + 4);
  WTF::String::isolatedCopy();
  v45 = v142;
  v142 = 0;
  v46 = *(WTF::StringImpl **)(v42 + 8);
  *(_QWORD *)(v42 + 8) = v45;
  if (!v46)
    goto LABEL_39;
  v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 != 2)
    goto LABEL_38;
  WTF::StringImpl::destroy(v46, v44);
  v46 = v142;
  v142 = 0;
  if (v46)
  {
    v47 = *(_DWORD *)v46 - 2;
    if (*(_DWORD *)v46 != 2)
    {
LABEL_38:
      *(_DWORD *)v46 = v47;
      goto LABEL_39;
    }
    WTF::StringImpl::destroy(v46, v97);
  }
LABEL_39:
  *(_BYTE *)(v42 + 6) = *(_BYTE *)(a7 + 6);
  *(_OWORD *)(v42 + 16) = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(a7 + 32);
  v48 = *(_DWORD *)(a7 + 114);
  v49 = *(_DWORD *)(v42 + 114) & 0xF1C70000;
  *(_BYTE *)(v42 + 112) = *(_BYTE *)(a7 + 112);
  *(_QWORD *)(v42 + 120) = *(_QWORD *)(a7 + 120);
  *(_DWORD *)(v42 + 114) = v49 | v48 & 0xE38FFFF;
  *(_DWORD *)(v42 + 136) = *(_DWORD *)(a7 + 136);
  WTF::String::isolatedCopy();
  v51 = v142;
  v142 = 0;
  v52 = *(WTF::StringImpl **)(v42 + 144);
  *(_QWORD *)(v42 + 144) = v51;
  if (!v52)
    goto LABEL_42;
  v53 = *(_DWORD *)v52 - 2;
  if (*(_DWORD *)v52 != 2)
    goto LABEL_41;
  WTF::StringImpl::destroy(v52, v50);
  v52 = v142;
  v142 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 != 2)
    {
LABEL_41:
      *(_DWORD *)v52 = v53;
      goto LABEL_42;
    }
    WTF::StringImpl::destroy(v52, v98);
  }
LABEL_42:
  *(_DWORD *)(v42 + 152) = *(_DWORD *)(a7 + 152);
  v54 = (WTF::StringImpl **)(v42 + 160);
  WTF::String::isolatedCopy();
  *(_QWORD *)(v42 + 168) = v110;
  v56 = v139;
  v139 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::destroy(v56, v55);
      if ((v38 & 1) != 0)
        goto LABEL_48;
      goto LABEL_46;
    }
    *(_DWORD *)v56 -= 2;
  }
  if ((v38 & 1) != 0)
    goto LABEL_48;
LABEL_46:
  if (*(_DWORD *)v35 == 2)
    WTF::StringImpl::destroy(v35, v55);
  else
    *(_DWORD *)v35 -= 2;
LABEL_48:
  v57 = (_QWORD *)(v42 + 16);
  v58 = *(_DWORD *)(v42 + 114);
  *(_DWORD *)(v42 + 114) = v58 | 0x1000;
  if ((v58 & 0x30000) != 0)
    goto LABEL_58;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 64))(a9)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 488))(a9) == 1)
  {
    goto LABEL_56;
  }
  v59 = *(_QWORD *)(a9 + 200);
  if (!v59)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 64))(a9)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 488))(a9))
    {
      goto LABEL_55;
    }
LABEL_56:
    v60 = *(_DWORD *)(v42 + 114) & 0xFFFCFFFF | 0x10000;
    goto LABEL_57;
  }
  *(_QWORD *)(v42 + 48) = *(_QWORD *)(v59 + 64);
LABEL_55:
  v60 = *(_DWORD *)(v42 + 114) & 0xFFFCFFFF;
LABEL_57:
  *(_DWORD *)(v42 + 114) = v60;
LABEL_58:
  if (*(_OWORD *)v57 == 0)
  {
    v61 = *(_QWORD *)(a9 + 232);
    *v57 = *(_QWORD *)(a9 + 224);
    *(_QWORD *)(v42 + 24) = v61;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 64))(a9)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a9 + 488))(a9) == 1)
  {
    ++*(_DWORD *)(a9 + 312);
    v63 = *(Inspector::IdentifiersFactory **)(a1 + 64);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v99 = *(_QWORD *)(*(_QWORD *)(a9 + 384) + 8);
      v142 = 0;
      WTF::URL::invalidate((WTF::URL *)&v142);
      v150 = 0;
      v151 = 0;
      v144 = 0u;
      v145 = 0u;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      v153 = vdupq_n_s64(0x7FF8000000000000uLL);
      v154 = v153;
      v155 = 0;
      v156 = 0;
      v158 = v153;
      v157 = 0x8000000000000000;
      v159 = 0x7FF8000000000000;
      v160 &= 0xF0u;
      v161 &= 0xC000u;
      v162 = v162 & 0xF8 | 2;
      cf = 0;
      v164 = 0;
      v152 = v152 & 0xC0 | 5;
      v101 = *(_QWORD *)(v99 + 192);
      if (v101)
      {
        v102 = 5;
        if (!*(_BYTE *)(v101 + 178))
        {
          v103 = *(unsigned __int8 *)(a6 + 147);
          if (v103 == 3)
            v104 = 6;
          else
            v104 = 12;
          if (v103 == 2)
            v102 = 5;
          else
            v102 = v104;
        }
        WebCore::InspectorNetworkAgent::willSendRequest(v101, v63, 0, a6, (WebCore::ResourceLoader *)&v142, v102, 0);
      }
      v105 = *(Inspector::InspectorDebuggerAgent ***)(v99 + 144);
      if (v105 && (*(_BYTE *)(a6 + 147) & 0xFE) != 2)
      {
        if ((*(_BYTE *)(a6 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
          *(_BYTE *)(a6 + 184) |= 1u;
        }
        WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v105, (const WTF::String *)a6);
      }
      v106 = cf;
      cf = 0;
      if (v106)
        CFRelease(v106);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v142, v100);
    }
    if (*(_DWORD *)(a9 + 312) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
    else
      --*(_DWORD *)(a9 + 312);
  }
  v65 = *(_QWORD *)(a1 + 48);
  if (v65)
  {
    v111 = a1;
    WebCore::ResourceRequestBase::isolatedCopy((WebCore::ResourceRequestBase *)a6, (uint64_t)&v112);
    *((_QWORD *)&v135 + 1) = v42;
    v136 = v29;
    v137 = v140;
    v66 = v141;
    v141 = 0u;
    v138 = v66;
    v67 = WTF::fastMalloc((WTF *)0x100);
    *(_QWORD *)v67 = off_1E33F7C98;
    *(_QWORD *)(v67 + 8) = v111;
    v68 = v112;
    v112 = 0;
    *(_QWORD *)(v67 + 16) = v68;
    LODWORD(v68) = v113;
    *(_DWORD *)(v67 + 24) = v113;
    *(_OWORD *)(v67 + 28) = v114;
    *(_QWORD *)(v67 + 44) = v115;
    *(_DWORD *)(v67 + 52) = v116;
    v113 = v68 & 0xFFFFFFFE;
    v69 = v117;
    v117 = 0;
    *(_QWORD *)(v67 + 56) = v69;
    LODWORD(v69) = v118;
    *(_DWORD *)(v67 + 64) = v118;
    *(_OWORD *)(v67 + 68) = v119;
    *(_QWORD *)(v67 + 84) = v120;
    *(_DWORD *)(v67 + 92) = v121;
    v118 = v69 & 0xFFFFFFFE;
    *(_QWORD *)(v67 + 96) = v122;
    *(_QWORD *)(v67 + 104) = v123;
    v70 = *((_QWORD *)&v123 + 1);
    v123 = 0u;
    *(_QWORD *)(v67 + 112) = v70;
    v71 = v124;
    v124 = 0;
    *(_QWORD *)(v67 + 120) = v71;
    v72 = v125;
    v125 = 0;
    *(_QWORD *)(v67 + 128) = v72;
    v73 = v126;
    v126 = 0;
    *(_QWORD *)(v67 + 136) = v73;
    v74 = v127;
    v127 = 0;
    *(_QWORD *)(v67 + 144) = v74;
    v75 = v128;
    v128 = 0;
    *(_QWORD *)(v67 + 152) = v75;
    LODWORD(v74) = v129;
    *(_BYTE *)(v67 + 164) = v130;
    *(_DWORD *)(v67 + 160) = v74;
    *(_QWORD *)(v67 + 168) = v131;
    v76 = *((_QWORD *)&v131 + 1);
    v131 = 0u;
    *(_QWORD *)(v67 + 176) = v76;
    *(_QWORD *)(v67 + 184) = v132;
    v77 = v133;
    *(_BYTE *)(v67 + 200) = v134;
    *(_QWORD *)(v67 + 192) = v77;
    *(_QWORD *)(v67 + 208) = v135;
    v78 = *((_QWORD *)&v135 + 1);
    v135 = 0u;
    *(_QWORD *)(v67 + 216) = v78;
    v79 = v136;
    v132 = 0;
    v136 = 0;
    *(_QWORD *)(v67 + 224) = v79;
    *(_WORD *)(v67 + 232) = v137;
    *(_QWORD *)(v67 + 240) = v138;
    v80 = *((_QWORD *)&v138 + 1);
    v138 = 0u;
    *(_QWORD *)(v67 + 248) = v80;
    v142 = (WTF::StringImpl *)v67;
    v143 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v65 + 56))(v65, &v142);
    v82 = v142;
    v142 = 0;
    if (v82)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v82 + 8))(v82);
    WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0::~$_0(&v111, v81);
    v29 = 0;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(v42 + 168), v62);
    v85 = *v54;
    *v54 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v84);
      else
        *(_DWORD *)v85 -= 2;
    }
    v86 = *(WTF::StringImpl **)(v42 + 144);
    *(_QWORD *)(v42 + 144) = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v84);
      else
        *(_DWORD *)v86 -= 2;
    }
    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v42, v84);
    WTF::fastFree(v87, v88);
  }
  v89 = (WTF::StringImpl *)*((_QWORD *)&v141 + 1);
  *((_QWORD *)&v141 + 1) = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v83);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = (WTF::StringImpl *)v141;
  *(_QWORD *)&v141 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::destroy(v90, v83);
      if (!v29)
        goto LABEL_85;
      goto LABEL_83;
    }
    *(_DWORD *)v90 -= 2;
  }
  if (!v29)
    goto LABEL_85;
LABEL_83:
  WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v29, v83);
  if (atomic_load((unsigned int *)v29))
  {
    *((_OWORD *)v29 + 13) = 0u;
    *((_OWORD *)v29 + 14) = 0u;
    *((_OWORD *)v29 + 11) = 0u;
    *((_OWORD *)v29 + 12) = 0u;
    *((_OWORD *)v29 + 9) = 0u;
    *((_OWORD *)v29 + 10) = 0u;
    *((_OWORD *)v29 + 7) = 0u;
    *((_OWORD *)v29 + 8) = 0u;
    *((_OWORD *)v29 + 5) = 0u;
    *((_OWORD *)v29 + 6) = 0u;
    *((_OWORD *)v29 + 3) = 0u;
    *((_OWORD *)v29 + 4) = 0u;
    *((_OWORD *)v29 + 1) = 0u;
    *((_OWORD *)v29 + 2) = 0u;
    *(_OWORD *)v29 = 0u;
  }
  else
  {
    WTF::fastFree(v29, v83);
  }
LABEL_85:
  if (!atomic_load(v21))
  {
    __break(0xC471u);
    JUMPOUT(0x195F24F24);
  }
  do
    v93 = __ldaxr(v21);
  while (__stlxr(v93 - 1, v21));
  if (v18)
  {
    do
    {
      v94 = __ldaxr(v18);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v18));
    if (!v95)
    {
      atomic_store(1u, v18);
      v107 = (WTF::StringImpl *)*((_QWORD *)v18 + 6);
      *((_QWORD *)v18 + 6) = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
          WTF::StringImpl::destroy(v107, v83);
        else
          *(_DWORD *)v107 -= 2;
      }
      v108 = (WTF::StringImpl *)*((_QWORD *)v18 + 5);
      *((_QWORD *)v18 + 5) = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v83);
        else
          *(_DWORD *)v108 -= 2;
      }
      v109 = v18[8];
      if ((_DWORD)v109 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7B38[v109])(&v142, v18 + 2);
      v18[8] = -1;
      WTF::fastFree((WTF *)v18, v83);
    }
  }
  return a1;
}

_QWORD *WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore::ContentSecurityPolicy *v5;
  WTF *v6;
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  const void *v14;
  WebCore::FormData *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v3 = (WTF::StringImpl *)a1[30];
  a1[30] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[29];
  a1[29] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::ContentSecurityPolicy *)a1[27];
  a1[27] = 0;
  if (v5)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v5, a2);
    if (atomic_load((unsigned int *)v6))
    {
      *((_OWORD *)v6 + 13) = 0u;
      *((_OWORD *)v6 + 14) = 0u;
      *((_OWORD *)v6 + 11) = 0u;
      *((_OWORD *)v6 + 12) = 0u;
      *((_OWORD *)v6 + 9) = 0u;
      *((_OWORD *)v6 + 10) = 0u;
      *((_OWORD *)v6 + 7) = 0u;
      *((_OWORD *)v6 + 8) = 0u;
      *((_OWORD *)v6 + 5) = 0u;
      *((_OWORD *)v6 + 6) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *((_OWORD *)v6 + 4) = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *(_OWORD *)v6 = 0u;
    }
    else
    {
      WTF::fastFree(v6, a2);
    }
  }
  v8 = (uint64_t *)a1[26];
  a1[26] = 0;
  if (v8)
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v8 + 21, a2);
    v10 = (WTF::StringImpl *)v8[20];
    v8[20] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = (WTF::StringImpl *)v8[18];
    v8[18] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v8, v9);
    WTF::fastFree(v12, v13);
  }
  v14 = (const void *)a1[25];
  a1[25] = 0;
  if (v14)
    CFRelease(v14);
  v15 = (WebCore::FormData *)a1[22];
  a1[22] = 0;
  if (v15)
    WTF::RefCounted<WebCore::FormData>::deref(v15, a2);
  v16 = (WTF::StringImpl *)a1[21];
  a1[21] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)a1[20];
  a1[20] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)(a1 + 1), a2);
  return a1;
}

void WebCore::WorkerThreadableLoader::MainThreadBridge::~MainThreadBridge(WebCore::WorkerThreadableLoader::MainThreadBridge *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(WTF::StringImpl **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v18 = v6;
          WTF::StringImpl::destroy(v11, a2);
          v6 = v18;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v12 = *(unsigned int **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v19 = v6;
          WTF::fastFree((WTF *)v12, a2);
          v6 = v19;
        }
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::WorkerThreadableLoader::MainThreadBridge::~MainThreadBridge(this, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

uint64_t WebCore::WorkerThreadableLoader::MainThreadBridge::notifyIsDone(WebCore::WorkerThreadableLoader::MainThreadBridge *this, char a2)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_OWORD *)this + 14);
  v15[0] = *((_OWORD *)this + 13);
  v15[1] = v4;
  v5 = (unsigned int *)*((_QWORD *)this + 5);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E33F7D38;
  *(_QWORD *)(v7 + 8) = v5;
  *(_BYTE *)(v7 + 16) = a2;
  v13 = v7;
  v14 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
  if (v9)
  {
    v10 = v9[4];
    if (v10)
    {
      if (*(_BYTE *)(v10 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v10 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 360) + 48), &v13, (char *)this + 56);
    }
  }
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WorkerThreadableLoader::MainThreadBridge::didSendData(WebCore::WorkerThreadableLoader::MainThreadBridge *this, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *((_OWORD *)this + 14);
  v17[0] = *((_OWORD *)this + 13);
  v17[1] = v6;
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E33F7D60;
  v9[1] = v7;
  v9[2] = a2;
  v9[3] = a3;
  v15 = (uint64_t)v9;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v11)
  {
    v12 = v11[4];
    if (v12)
    {
      if (*(_BYTE *)(v12 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v12 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v12 + 360) + 48), &v15, (char *)this + 56);
    }
  }
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponseBase *this)
{
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  WTF *v28;
  _BYTE v29[32];
  __int128 v30;
  uint64_t v31[35];
  _OWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 224);
  v32[0] = *(_OWORD *)(a1 + 208);
  v32[1] = v5;
  v6 = *(unsigned int **)(a1 + 40);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(a1 + 64);
  v28 = (WTF *)v6;
  *(_QWORD *)v29 = v8;
  *(_OWORD *)&v29[8] = *(_OWORD *)a2;
  *(_QWORD *)&v29[24] = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v30 + 1) = a3;
  WebCore::ResourceResponseBase::crossThreadData(this, (uint64_t)v31);
  v9 = WTF::fastMalloc((WTF *)0x160);
  *(_QWORD *)v9 = off_1E33F7D88;
  v10 = v28;
  v28 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = v30;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)&v29[16];
  *(_OWORD *)(v9 + 24) = *(_OWORD *)v29;
  *(_OWORD *)(v9 + 56) = v11;
  WebCore::ResourceResponseData::ResourceResponseData(v9 + 72, v31);
  v26 = v9;
  v27 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v32);
  if (v13)
  {
    v15 = v13[4];
    if (v15)
    {
      if (*(_BYTE *)(v15 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v15 + 360) + 48), &v26, a1 + 56);
    }
  }
  v16 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v17 = v26;
  v26 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v31, v14);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v22 = (WTF::StringImpl *)*((_QWORD *)v19 + 2);
      *((_QWORD *)v19 + 2) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = (unsigned int *)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v18);
        }
      }
      WTF::fastFree(v19, v18);
    }
  }
}

void WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveData(WebCore::WorkerThreadableLoader::MainThreadBridge *this, const WebCore::SharedBuffer *a2)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *((_OWORD *)this + 14);
  v20[0] = *((_OWORD *)this + 13);
  v20[1] = v4;
  v5 = (unsigned int *)*((_QWORD *)this + 5);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v15 = (WTF *)v5;
  v16 = *((_QWORD *)this + 8);
  do
    v7 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v7 + 1, (unsigned int *)a2));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33F7DB0;
  v8[1] = v15;
  v8[2] = v16;
  v8[3] = a2;
  v17 = 0;
  v18 = v8;
  v19 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_9:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v20);
  if (v10)
  {
    v12 = v10[4];
    if (v12)
    {
      if (*(_BYTE *)(v12 + 274) == 1)
        (*(void (**)(_QWORD, _QWORD **, char *))(**(_QWORD **)(*(_QWORD *)(v12 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v12 + 360) + 48), &v18, (char *)this + 56);
    }
  }
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)&v17, v11);
}

WTF::StringImpl *WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *result;
  WTF *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  WTF *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _BYTE v52[24];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 32) = 1;
  v8 = *(_OWORD *)(a1 + 224);
  v57[0] = *(_OWORD *)(a1 + 208);
  v57[1] = v8;
  v9 = *(unsigned int **)(a1 + 40);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(_QWORD *)(a1 + 64);
  v43 = (WTF *)v9;
  v44 = v11;
  v53 = 0;
  v12 = a4[1];
  v45 = *a4;
  v46 = v12;
  v13 = a4[3];
  v47 = a4[2];
  v48 = v13;
  v49 = a4[4];
  v50 = *((_QWORD *)a4 + 10);
  WTF::String::isolatedCopy();
  *(_DWORD *)v52 = *((_DWORD *)a4 + 24);
  *(_OWORD *)&v52[8] = *(__int128 *)((char *)a4 + 104);
  v14 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)a4 + 15);
  if (v14)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v14, &v41);
    v53 = v41;
  }
  v54 = *a2;
  *(_QWORD *)&v55 = *((_QWORD *)a2 + 2);
  v56 = a3;
  v15 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v15 = off_1E33F7DD8;
  v16 = v44;
  *(_QWORD *)(v15 + 16) = v43;
  *(_QWORD *)(v15 + 24) = v16;
  v17 = v50;
  v18 = v49;
  v19 = v47;
  *(_OWORD *)(v15 + 80) = v48;
  *(_OWORD *)(v15 + 96) = v18;
  v21 = v45;
  v20 = v46;
  *(_QWORD *)(v15 + 112) = v17;
  *(_OWORD *)(v15 + 32) = v21;
  *(_OWORD *)(v15 + 48) = v20;
  *(_OWORD *)(v15 + 64) = v19;
  v22 = v51;
  v43 = 0;
  v51 = 0;
  *(_QWORD *)(v15 + 120) = v22;
  v23 = *(_OWORD *)v52;
  *(_QWORD *)(v15 + 144) = *(_QWORD *)&v52[16];
  *(_OWORD *)(v15 + 128) = v23;
  v24 = v53;
  v53 = 0;
  *(_QWORD *)(v15 + 152) = v24;
  v25 = v54;
  v26 = v55;
  *(_QWORD *)(v15 + 192) = v56;
  *(_OWORD *)(v15 + 160) = v25;
  *(_OWORD *)(v15 + 176) = v26;
  v41 = v15;
  v42 = 0;
  LODWORD(v24) = __ldaxr(WebCore::allScriptExecutionContextsMapLock);
  if ((_DWORD)v24)
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_9:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v27 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v57);
  if (v27)
  {
    v29 = v27[4];
    if (v29)
    {
      if (*(_BYTE *)(v29 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v29 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v29 + 360) + 48), &v41, a1 + 56);
    }
  }
  v30 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v31 = v41;
  v41 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (_DWORD *)v53;
  v53 = 0;
  if (v32)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v32, v28);
  result = v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  v34 = v43;
  v43 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v34);
      v37 = (WTF::StringImpl *)*((_QWORD *)v34 + 2);
      *((_QWORD *)v34 + 2) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v28);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (unsigned int *)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v28);
        }
      }
      return (WTF::StringImpl *)WTF::fastFree(v34, v28);
    }
  }
  return result;
}

uint64_t *WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_DWORD *)a1[17];
  a1[17] = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3, a2);
  v4 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v13 = v5;
          WTF::StringImpl::destroy(v9, a2);
          v5 = v13;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      v10 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          v14 = v5;
          WTF::fastFree((WTF *)v10, a2);
          v5 = v14;
        }
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t *WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(uint64_t a1, uint64_t a2, WebCore::ResourceErrorBase *this)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  unsigned int *v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 32) = 1;
  v4 = *(_OWORD *)(a1 + 224);
  v30[0] = *(_OWORD *)(a1 + 208);
  v30[1] = v4;
  v5 = *(unsigned int **)(a1 + 40);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(a1 + 64);
  v20 = v5;
  *(_QWORD *)v21 = v7;
  *(_OWORD *)&v21[8] = *(_OWORD *)a2;
  *(_QWORD *)&v21[24] = *(_QWORD *)(a2 + 16);
  WebCore::ResourceErrorBase::isolatedCopy(this, (uint64_t)&v22);
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v8 = off_1E33F7E00;
  *(_QWORD *)(v8 + 16) = v20;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&v21[16];
  *(_OWORD *)(v8 + 24) = *(_OWORD *)v21;
  v9 = v22;
  v22 = 0uLL;
  v20 = 0;
  *(_OWORD *)(v8 + 64) = v9;
  LODWORD(v9) = v23;
  *(_OWORD *)(v8 + 80) = v23;
  *(_OWORD *)(v8 + 96) = v24;
  LODWORD(v23) = v9 & 0xFFFFFFFE;
  *(_QWORD *)(v8 + 112) = v25;
  v10 = v26;
  *(_WORD *)(v8 + 124) = v27;
  *(_DWORD *)(v8 + 120) = v10;
  v11 = v28;
  v25 = 0;
  v28 = 0;
  *(_QWORD *)(v8 + 128) = v11;
  *(_BYTE *)(v8 + 136) = v29;
  v18 = v8;
  v19 = 0;
  LODWORD(v11) = __ldaxr(WebCore::allScriptExecutionContextsMapLock);
  if ((_DWORD)v11)
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v30);
  if (v12)
  {
    v14 = v12[4];
    if (v14)
    {
      if (*(_BYTE *)(v14 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 360) + 48), &v18, a1 + 56);
    }
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v16 = v18;
  v18 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0::~$_0((uint64_t *)&v20, v13);
}

uint64_t *WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (const void *)a1[14];
  a1[14] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[12];
  a1[12] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(WTF::StringImpl **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v15 = v7;
          WTF::StringImpl::destroy(v11, a2);
          v7 = v15;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v12 = *(unsigned int **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v16 = v7;
          WTF::fastFree((WTF *)v12, a2);
          v7 = v16;
        }
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

void WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishTiming(WebCore::WorkerThreadableLoader::MainThreadBridge *this, const WebCore::ResourceTiming *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38[2];
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  char v58;
  _OWORD v59[2];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 72) = v4;
  v5 = *((_OWORD *)a2 + 6);
  v6 = *((_OWORD *)a2 + 7);
  v7 = *((_OWORD *)a2 + 8);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 136) = v7;
  *(_OWORD *)((char *)this + 120) = v6;
  *(_OWORD *)((char *)this + 104) = v5;
  v8 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v8)
    *v8 += 2;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_OWORD *)a2 + 10);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 168) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 23);
  if (v11)
    ++*v11;
  v12 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v11;
  if (v12)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12, a2);
  v13 = *((_OWORD *)this + 14);
  v59[0] = *((_OWORD *)this + 13);
  v59[1] = v13;
  v14 = (unsigned int *)*((_QWORD *)this + 5);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v38[0] = (WTF *)v14;
  WebCore::ResourceTiming::isolatedCopy((uint64_t)a2, (uint64_t)&v38[1]);
  v16 = WTF::fastMalloc((WTF *)0xE8);
  *(_QWORD *)v16 = off_1E33F7E28;
  *(WTF **)(v16 + 8) = v38[0];
  v17 = v38[1];
  *(_OWORD *)v38 = 0u;
  *(_QWORD *)(v16 + 16) = v17;
  LODWORD(v17) = v39;
  *(_DWORD *)(v16 + 24) = v39;
  *(_OWORD *)(v16 + 28) = v40;
  *(_QWORD *)(v16 + 44) = v41;
  *(_DWORD *)(v16 + 52) = v42;
  v39 = v17 & 0xFFFFFFFE;
  *(_QWORD *)(v16 + 56) = v43;
  *(_OWORD *)(v16 + 64) = v44;
  v18 = v46;
  *(_OWORD *)(v16 + 80) = v45;
  *(_OWORD *)(v16 + 96) = v18;
  v19 = v47;
  v20 = v48;
  v21 = v49;
  *(_QWORD *)(v16 + 160) = v50;
  *(_OWORD *)(v16 + 128) = v20;
  *(_OWORD *)(v16 + 144) = v21;
  *(_OWORD *)(v16 + 112) = v19;
  v22 = v51;
  v43 = 0;
  v51 = 0;
  *(_QWORD *)(v16 + 168) = v22;
  v23 = v52;
  *(_QWORD *)(v16 + 192) = v53;
  *(_OWORD *)(v16 + 176) = v23;
  *(_QWORD *)(v16 + 200) = v54;
  v24 = *((_QWORD *)&v54 + 1);
  v54 = 0u;
  *(_QWORD *)(v16 + 208) = v24;
  v25 = v55;
  v55 = 0;
  *(_QWORD *)(v16 + 216) = v25;
  *(_WORD *)(v16 + 224) = v56;
  v57 = v16;
  v58 = 0;
  LODWORD(v24) = __ldaxr(WebCore::allScriptExecutionContextsMapLock);
  if ((_DWORD)v24)
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_16:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v26 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v59);
  if (v26)
  {
    v28 = v26[4];
    if (v28)
    {
      if (*(_BYTE *)(v28 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v28 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v28 + 360) + 48), &v57, (char *)this + 56);
    }
  }
  v29 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v30 = v57;
  v57 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)&v38[1], v27);
  if (v38[0])
  {
    do
    {
      v32 = __ldaxr((unsigned int *)v38[0]);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v38[0]));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v38[0]);
      v34 = (WTF::StringImpl *)*((_QWORD *)v38[0] + 2);
      *((_QWORD *)v38[0] + 2) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v31);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = (unsigned int *)*((_QWORD *)v38[0] + 1);
      *((_QWORD *)v38[0] + 1) = 0;
      if (v35)
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v31);
        }
      }
      WTF::fastFree(v38[0], v31);
    }
  }
}

void WebCore::ApplicationCache::~ApplicationCache(WebCore::ApplicationCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WebCore::ApplicationCache *v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v22 = *(_QWORD *)(v3 + 8);
    if (v22)
    {
      v23 = (uint64_t *)(v22 + 88);
      v24 = *(_QWORD *)(v22 + 88);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 - 8);
        v26 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v25 & ((v28 >> 31) ^ v28);
        v30 = *(WebCore::ApplicationCache **)(v24 + 8 * v29);
        if (v30 != this)
        {
          v31 = 1;
          while (v30)
          {
            v29 = ((_DWORD)v29 + v31) & v25;
            v30 = *(WebCore::ApplicationCache **)(v24 + 8 * v29);
            ++v31;
            if (v30 == this)
              goto LABEL_48;
          }
          v29 = *(unsigned int *)(v24 - 4);
        }
LABEL_48:
        if (v29 != *(_DWORD *)(v24 - 4))
        {
          v32 = v22;
          *(_QWORD *)(v24 + 8 * v29) = -1;
          ++*(_DWORD *)(*v23 - 16);
          v33 = (uint64_t *)(v22 + 88);
          v34 = *v23;
          if (v34)
            v35 = *(_DWORD *)(v34 - 12) - 1;
          else
            v35 = -1;
          *(_DWORD *)(v34 - 12) = v35;
          v36 = *v33;
          v37 = v32;
          if (*v33)
          {
            v38 = *(_DWORD *)(v36 - 12);
            v39 = *(_DWORD *)(v36 - 4);
            if (6 * v38 >= v39 || v39 < 9)
            {
LABEL_60:
              v37 = v32;
              if (v38)
                goto LABEL_2;
              goto LABEL_61;
            }
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v33, v39 >> 1, 0);
            v37 = v32;
            if (*v33)
            {
              v38 = *(_DWORD *)(*v33 - 12);
              goto LABEL_60;
            }
          }
LABEL_61:
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
      }
    }
  }
LABEL_2:
  v4 = *((unsigned int *)this + 17);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v6 = 80 * v4;
    do
    {
      v7 = v5[5];
      v5[5] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *v5;
      *v5 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 10;
      v6 -= 80;
    }
    while (v6);
  }
  v9 = (WTF *)*((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = *((_QWORD *)this + 2);
      do
      {
        v17 = *(WTF::StringImpl **)v16;
        if (*(_QWORD *)v16 != -1)
        {
          v18 = *(_DWORD **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            if (v18[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
              v17 = *(WTF::StringImpl **)v16;
            }
            else
            {
              --v18[2];
            }
          }
          *(_QWORD *)v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        v16 += 16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v10);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v10);
    }
  }
}

uint64_t WebCore::ApplicationCache::isComplete(WebCore::ApplicationCache *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WebCore::ApplicationCache *v9;
  int v10;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v3 = *(_QWORD *)(v1 + 88);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(WebCore::ApplicationCache **)(v3 + 8 * v8);
        if (v9 == this)
        {
          return 1;
        }
        else
        {
          v10 = 1;
          do
          {
            v1 = v9 != 0;
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(WebCore::ApplicationCache **)(v3 + 8 * v8);
            ++v10;
          }
          while (v9 != this);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

WTF::StringImpl **WebCore::ApplicationCache::setManifestResource(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE v15[24];

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 320);
  if (v5)
    goto LABEL_17;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = *(unsigned int **)(v4 + 320);
  *(_QWORD *)(v4 + 320) = v5;
  if (!v6)
    goto LABEL_17;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  v5 = *(_QWORD *)(v4 + 320);
  if (v5)
  {
LABEL_17:
    do
      v9 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v9 + 1, (unsigned int *)v5));
  }
  v10 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *a2;
  if (*(_DWORD *)(a1 + 80))
    WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), (WebCore::ApplicationCacheResource *)*a2, (WebCore::ApplicationCache *)a1);
  *(_QWORD *)(a1 + 72) += WebCore::ApplicationCacheResource::estimatedSizeInStorage((WebCore::ApplicationCacheResource *)*a2, a2);
  return WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)(a1 + 16), (WTF::StringImpl **)(v13 + 16), (const WTF::StringImpl *)a2, (uint64_t)v15);
}

WTF *WebCore::ApplicationCache::resourceForURL(WebCore::ApplicationCache *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

BOOL WebCore::ApplicationCache::requestIsHTTPOrHTTPSGet(WebCore::ApplicationCache *this, const WebCore::ResourceRequest *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  v3 = *((_BYTE *)this + 184);
  if ((v3 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v3 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v3;
  }
  if ((*((_BYTE *)this + 8) & 2) == 0)
    return 0;
  if ((v3 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v4 = *((_QWORD *)this + 11);
  if (!v4 || *(_DWORD *)(v4 + 4) != 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v6 & 0xFFDF) == 0x47 && (*(_WORD *)(v6 + 2) & 0xFFDF) == 0x45)
    {
      v7 = *(unsigned __int16 *)(v6 + 4);
      return (v7 & 0xFFFFFFDF) == 84;
    }
    return 0;
  }
  if ((*(_BYTE *)v6 & 0xDF) != 0x47 || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x45)
    return 0;
  v7 = *(unsigned __int8 *)(v6 + 2);
  return (v7 & 0xFFFFFFDF) == 84;
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;

  if ((unsigned int *)a2 != a1)
  {
    v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
    if (a1[3] > v4)
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    else if (v4 > a1[2])
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF *)a1, v4);
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
    }
    std::copy_n[abi:sn180100]<WTF::URL const*,unsigned long,WTF::URL*,0>(*(_QWORD *)a2, (WTF::StringImpl *)a1[3], *(_QWORD *)a1);
    v5 = a1[3];
    v6 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v5 != v6)
    {
      v8 = *(_QWORD *)a2 + 40 * v6;
      v9 = 5 * v5;
      v10 = *(_QWORD *)a1 + 40 * v5;
      v11 = *(_QWORD *)a2 + 8 * v9;
      do
      {
        v12 = *(_DWORD **)v11;
        if (*(_QWORD *)v11)
          *v12 += 2;
        *(_QWORD *)v10 = v12;
        v13 = *(_OWORD *)(v11 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(v10 + 8) = v13;
        v11 += 40;
        v10 += 40;
      }
      while (v11 != v8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v5;
  }
  return a1;
}

uint64_t WebCore::ApplicationCache::isURLInOnlineAllowlist(WebCore::ApplicationCache *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *((unsigned int *)this + 13);
  if ((_DWORD)v2)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = 40 * v2;
    while (1)
    {
      if (!WTF::protocolHostAndPortAreEqual())
        goto LABEL_7;
      if (!*(_QWORD *)v4)
        break;
      if (*(_QWORD *)a2)
        goto LABEL_6;
      if (!*(_DWORD *)(*(_QWORD *)v4 + 4))
        return 1;
LABEL_7:
      v4 += 40;
      v5 -= 40;
      if (!v5)
        return 0;
    }
    result = 1;
    if (!*(_QWORD *)a2)
      return result;
LABEL_6:
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      return 1;
    goto LABEL_7;
  }
  return 0;
}

void WebCore::ApplicationCache::setFallbackURLs(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  BOOL (*v10)(uint64_t *, uint64_t *);

  WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 56, a2);
  v3 = *(uint64_t **)(a1 + 56);
  v4 = *(unsigned int *)(a1 + 68);
  v10 = WebCore::fallbackURLLongerThan;
  if ((_DWORD)v4)
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = v4;
    while (1)
    {
      v7 = operator new(80 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(v3, &v3[10 * v4], (unsigned int (**)(uint64_t *, uint64_t, __n128))&v10, v4, (uint64_t)v7, v6);
    operator delete(v9);
  }
  else
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(v3, &v3[10 * v4], (unsigned int (**)(uint64_t *, uint64_t, __n128))&v10, v4, 0, 0);
  }
}

uint64_t WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  __int128 v31;
  _DWORD *v32;
  __int128 v33;

  if (a2 != (unsigned int *)a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = a2[3];
    if (v4 <= v5)
    {
      v10 = *(_DWORD *)(a1 + 8);
      if (v5 <= v10)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
      else
      {
        if (v10)
        {
          if ((_DWORD)v4)
          {
            v11 = *(WTF **)a1;
            v12 = 80 * v4;
            do
            {
              v13 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
              *((_QWORD *)v11 + 5) = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v13 -= 2;
              }
              v14 = *(WTF::StringImpl **)v11;
              *(_QWORD *)v11 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v14 -= 2;
              }
              v11 = (WTF *)((char *)v11 + 80);
              v12 -= 80;
            }
            while (v12);
            *(_DWORD *)(a1 + 12) = 0;
          }
          v15 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v15, a2);
          }
        }
        WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v6 = *(_QWORD *)a1 + 80 * v5;
      v7 = 80 * v4 - 80 * v5;
      do
      {
        v8 = *(WTF::StringImpl **)(v6 + 40);
        *(_QWORD *)(v6 + 40) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = *(WTF::StringImpl **)v6;
        *(_QWORD *)v6 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v6 += 80;
        v7 -= 80;
      }
      while (v7);
      *(_DWORD *)(a1 + 12) = v5;
    }
    v16 = *(_QWORD *)a2;
    v17 = *(WTF **)a1;
    if ((_DWORD)v5)
    {
      v18 = v16 + 80 * v5;
      do
      {
        v19 = *(_DWORD **)v16;
        if (*(_QWORD *)v16)
          *v19 += 2;
        v20 = *(WTF::StringImpl **)v17;
        *(_QWORD *)v17 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = *(_OWORD *)(v16 + 8);
        *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)(v16 + 24);
        *(_OWORD *)((char *)v17 + 8) = v21;
        v22 = *(_DWORD **)(v16 + 40);
        if (v22)
          *v22 += 2;
        v23 = (WTF::StringImpl *)*((_QWORD *)v17 + 5);
        *((_QWORD *)v17 + 5) = v22;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *(_OWORD *)(v16 + 64);
        *((_OWORD *)v17 + 3) = *(_OWORD *)(v16 + 48);
        *((_OWORD *)v17 + 4) = v24;
        v16 += 80;
        v17 = (WTF *)((char *)v17 + 80);
      }
      while (v16 != v18);
      v16 = *(_QWORD *)a2;
      v25 = *(_DWORD *)(a1 + 12);
      v17 = *(WTF **)a1;
    }
    else
    {
      v25 = 0;
    }
    v26 = a2[3];
    if (v25 != v26)
    {
      v27 = v16 + 80 * v26;
      v28 = (char *)v17 + 80 * v25;
      v29 = v16 + 80 * v25;
      do
      {
        v30 = *(_DWORD **)v29;
        if (*(_QWORD *)v29)
          *v30 += 2;
        *(_QWORD *)v28 = v30;
        v31 = *(_OWORD *)(v29 + 8);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 8) = v31;
        v32 = *(_DWORD **)(v29 + 40);
        if (v32)
          *v32 += 2;
        *((_QWORD *)v28 + 5) = v32;
        v33 = *(_OWORD *)(v29 + 64);
        *((_OWORD *)v28 + 3) = *(_OWORD *)(v29 + 48);
        *((_OWORD *)v28 + 4) = v33;
        v29 += 80;
        v28 += 80;
      }
      while (v29 != v27);
      v25 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v25;
  }
  return a1;
}

BOOL WebCore::fallbackURLLongerThan(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
    LODWORD(v2) = *(_DWORD *)(v2 + 4);
  v3 = *a2;
  if (*a2)
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
  return v2 > v3;
}

uint64_t WebCore::ApplicationCache::urlMatchesFallbackNamespace(WebCore::ApplicationCache *this, const WTF::URL *a2, WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  __int128 v11;

  v3 = *((unsigned int *)this + 17);
  if (!(_DWORD)v3)
    return 0;
  v6 = *((_QWORD *)this + 7);
  v7 = 80 * v3;
  while (1)
  {
    if (!WTF::protocolHostAndPortAreEqual())
      goto LABEL_7;
    if (!*(_QWORD *)v6)
    {
      if (!*(_QWORD *)a2)
        goto LABEL_12;
      goto LABEL_6;
    }
    if (!*(_QWORD *)a2)
      break;
LABEL_6:
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      goto LABEL_12;
LABEL_7:
    v6 += 80;
    v7 -= 80;
    if (!v7)
      return 0;
  }
  if (*(_DWORD *)(*(_QWORD *)v6 + 4))
    goto LABEL_7;
LABEL_12:
  if (a3)
  {
    v9 = *(_DWORD **)(v6 + 40);
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)((char *)a3 + 8) = v11;
  }
  return 1;
}

WebCore::ApplicationCache *WebCore::ApplicationCacheGroup::stopLoading(WebCore::ApplicationCacheGroup *this, void *a2)
{
  uint64_t *v3;
  WebCore::ApplicationCacheResourceLoader *v4;
  uint64_t *v5;
  WebCore::ApplicationCacheResourceLoader *v6;
  WebCore::ApplicationCache *result;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;

  v3 = (uint64_t *)*((_QWORD *)this + 25);
  if (v3)
  {
    WebCore::ApplicationCacheResourceLoader::cancel(v3, 0);
    v4 = (WebCore::ApplicationCacheResourceLoader *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 4) == 1)
      {
        WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v4, a2);
        WTF::fastFree(v14, v15);
      }
      else
      {
        --*((_DWORD *)v4 + 4);
      }
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 22);
  if (v5)
  {
    WebCore::ApplicationCacheResourceLoader::cancel(v5, 0);
    v6 = (WebCore::ApplicationCacheResourceLoader *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 4) == 1)
      {
        WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v6, a2);
        WTF::fastFree(v16, v17);
      }
      else
      {
        --*((_DWORD *)v6 + 4);
      }
    }
  }
  result = (WebCore::ApplicationCache *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache(result, (WTF::StringImpl *)a2);
      result = (WebCore::ApplicationCache *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 16) = 0;
    v9 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v9)
    {
      v10 = v8;
      do
      {
        v11 = *v10;
        if (*v10 != (WTF::StringImpl *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    return (WebCore::ApplicationCache *)WTF::fastFree((WTF *)(v8 - 2), a2);
  }
  return result;
}

WebCore::ApplicationCache *WebCore::ApplicationCacheGroup::associateDocumentLoaderWithCache(WebCore::ApplicationCacheGroup *this, WebCore::DocumentLoader *a2, WebCore::ApplicationCache *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::ApplicationCache *result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  WebCore::DocumentLoader **v16;
  WebCore::DocumentLoader *v17;
  WebCore::DocumentLoader **v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  WTF *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WebCore::ApplicationCache *v32;

  if (!*((_QWORD *)this + 10) && !*((_QWORD *)this + 12))
  {
    if (a3)
      ++*(_DWORD *)a3;
    *((_QWORD *)this + 10) = a3;
  }
  v5 = *((_QWORD *)a2 + 359);
  if (a3)
    ++*(_DWORD *)a3;
  v6 = *(_QWORD *)(v5 + 48);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      *(_QWORD *)(v5 + 48) = 0;
      do
      {
        v29 = __ldaxr((unsigned int *)v6);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v6));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)v6);
        v31 = v5;
        v32 = a3;
        WTF::fastFree((WTF *)v6, a2);
        v5 = v31;
        a3 = v32;
      }
    }
  }
  result = *(WebCore::ApplicationCache **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = a3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache(result, a2);
      result = (WebCore::ApplicationCache *)WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v10 = *((_QWORD *)this + 15);
  v9 = (uint64_t *)((char *)this + 120);
  v8 = v10;
  if (v10
    || (result = (WebCore::ApplicationCache *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v9, 8u), (v8 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (WebCore::DocumentLoader **)(v8 + 8 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_23:
    *v16 = a2;
    v20 = *v9;
    if (*v9)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v9;
    if (*v9)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return result;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return result;
      if (!(_DWORD)v25)
      {
        v26 = 8;
        return (WebCore::ApplicationCache *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v9, v26);
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    return (WebCore::ApplicationCache *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v9, v26);
  }
  v18 = 0;
  v19 = 1;
  while (v17 != a2)
  {
    if (v17 == (WebCore::DocumentLoader *)-1)
      v18 = v16;
    v15 = (v15 + v19) & v11;
    v16 = (WebCore::DocumentLoader **)(v8 + 8 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        --*(_DWORD *)(*v9 - 16);
        v16 = v18;
      }
      goto LABEL_23;
    }
  }
  return result;
}

void WebCore::ApplicationCacheGroup::update(uint64_t isSameOriginAs, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const WebCore::SecurityOrigin *v30;
  int v31;
  WebCore::SecurityOrigin *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  Inspector::IdentifiersFactory *IdentifierInternal;
  uint64_t v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  CFTypeRef v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  WebCore::ApplicationCacheResourceLoader *v70;
  uint64_t v71;
  CFTypeRef v72;
  WebCore::FormData *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  void *v77;
  WebCore::ApplicationCacheResourceLoader *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  WTF *v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Inspector::InspectorDebuggerAgent **v108;
  _QWORD *v109;
  _QWORD v110[18];
  char v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WebCore::FormData *v114;
  char v115;
  CFTypeRef cf;
  _BYTE v117[40];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  char v124;
  __int16 v125;
  char v126;
  int64x2_t v127;
  int64x2_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int64x2_t v132;
  uint64_t v133;
  char v134;
  __int16 v135;
  char v136;
  CFTypeRef v137;
  char v138;
  uint64_t v139;

  v3 = isSameOriginAs;
  v139 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 35) + 88);
  if ((*(_DWORD *)(isSameOriginAs + 72) - 1) <= 1)
  {
    if (!a3)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v6 = *(_QWORD *)(StatusReg + 736);
      if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      {
        isSameOriginAs = WebCore::threadGlobalDataSlow((WebCore *)isSameOriginAs);
        v7 = isSameOriginAs;
      }
      v8 = *(_QWORD *)(v7 + 40);
      if (!v8)
      {
        isSameOriginAs = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
        v8 = *(_QWORD *)(v7 + 40);
      }
      v9 = *(_QWORD *)(v4 + 16);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = v8 + 392;
          v12 = *(_QWORD *)(v10 + 296);
          *(_DWORD *)(v4 + 24) += 2;
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v13 = &off_1E33F7EA0;
          v13[1] = v4;
          v13[2] = v11;
          v13[3] = 0;
          v14 = *(_OWORD *)(v12 + 432);
          *(_OWORD *)v117 = *(_OWORD *)(v12 + 416);
          *(_OWORD *)&v117[16] = v14;
          v15 = WTF::fastMalloc((WTF *)0x40);
          *(_QWORD *)v15 = &off_1E33A3A20;
          *(_OWORD *)(v15 + 16) = *(_OWORD *)v117;
          *(_OWORD *)(v15 + 32) = *(_OWORD *)&v117[16];
          *(_QWORD *)(v15 + 48) = v13;
          *(_BYTE *)(v15 + 56) = 0;
          v110[0] = v15;
          WTF::callOnMainThread();
          isSameOriginAs = v110[0];
          v110[0] = 0;
          if (isSameOriginAs)
            isSameOriginAs = (*(uint64_t (**)(uint64_t))(*(_QWORD *)isSameOriginAs + 8))(isSameOriginAs);
          if (*(_DWORD *)(v4 + 24) == 1)
            isSameOriginAs = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
          else
            --*(_DWORD *)(v4 + 24);
        }
      }
      if (*(_DWORD *)(v3 + 72) == 2)
      {
        v16 = *(_QWORD *)(StatusReg + 736);
        if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
          v17 = WebCore::threadGlobalDataSlow((WebCore *)isSameOriginAs);
        v18 = *(_QWORD *)(v17 + 40);
        if (!v18)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
          v18 = *(_QWORD *)(v17 + 40);
        }
        v19 = *(_QWORD *)(v4 + 16);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = v18 + 648;
            v22 = *(_QWORD *)(v20 + 296);
            *(_DWORD *)(v4 + 24) += 2;
            v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v23 = &off_1E33F7EA0;
            v23[1] = v4;
            v23[2] = v21;
            v23[3] = 0;
            v24 = *(_OWORD *)(v22 + 432);
            *(_OWORD *)v117 = *(_OWORD *)(v22 + 416);
            *(_OWORD *)&v117[16] = v24;
            v25 = WTF::fastMalloc((WTF *)0x40);
            *(_QWORD *)v25 = &off_1E33A3A20;
LABEL_129:
            *(_OWORD *)(v25 + 16) = *(_OWORD *)v117;
            *(_OWORD *)(v25 + 32) = *(_OWORD *)&v117[16];
            *(_QWORD *)(v25 + 48) = v23;
            *(_BYTE *)(v25 + 56) = 0;
            v110[0] = v25;
            WTF::callOnMainThread();
            v103 = v110[0];
            v110[0] = 0;
            if (v103)
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
            if (*(_DWORD *)(v4 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
            else
              --*(_DWORD *)(v4 + 24);
            return;
          }
        }
      }
    }
    return;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 1008);
  if ((v27 & 0x8000000000000000) == 0 || v27 == -1)
  {
    v28 = *((_QWORD *)a2 + 37);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v28 + 192), a2);
    if (isSameOriginAs)
    {
      v30 = (const WebCore::SecurityOrigin *)isSameOriginAs;
      if (*(_DWORD *)(isSameOriginAs + 32) != 1
        && (!*(_BYTE *)(isSameOriginAs + 63) || *(_BYTE *)(isSameOriginAs + 60) || *(_BYTE *)(isSameOriginAs + 56)))
      {
        v31 = *(unsigned __int8 *)(v28 + 464);
        if (v31 == 1)
        {
          v32 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 192) + 256))(v28 + 192);
          isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v32, v30);
          if ((isSameOriginAs & 1) == 0 && !*((_BYTE *)v30 + 56))
            goto LABEL_110;
        }
        else if (v31 == 2)
        {
          goto LABEL_110;
        }
        v33 = *((_QWORD *)a2 + 2);
        if (v33)
          goto LABEL_149;
        v33 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v33 = 1;
        *(_QWORD *)(v33 + 8) = a2;
        v79 = (unsigned int *)*((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 2) = v33;
        if (!v79)
          goto LABEL_149;
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          atomic_store(1u, v79);
          WTF::fastFree((WTF *)v79, v29);
        }
        v33 = *((_QWORD *)a2 + 2);
        if (v33)
        {
LABEL_149:
          do
            v34 = __ldaxr((unsigned int *)v33);
          while (__stlxr(v34 + 1, (unsigned int *)v33));
        }
        v35 = *(unsigned int **)(v3 + 144);
        *(_QWORD *)(v3 + 144) = v33;
        if (v35)
        {
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            atomic_store(1u, v35);
            v33 = WTF::fastFree((WTF *)v35, v29);
          }
        }
        *(_DWORD *)(v3 + 72) = 1;
        v38 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v39 = *(_QWORD *)(v38 + 736);
        if (!v39 || (v40 = *(_QWORD *)(v39 + 96)) == 0)
          v40 = WebCore::threadGlobalDataSlow((WebCore *)v33);
        v41 = *(_QWORD *)(v40 + 40);
        if (!v41)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v40);
          v41 = *(_QWORD *)(v40 + 40);
        }
        v42 = (WebCore *)WebCore::ApplicationCacheGroup::postListenerTask(v41 + 392, 0, 0, *(_QWORD *)(v3 + 120));
        if (!*(_QWORD *)(v3 + 80))
        {
          v43 = *(_QWORD *)(v38 + 736);
          if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
            v44 = WebCore::threadGlobalDataSlow(v42);
          v45 = *(_QWORD *)(v44 + 40);
          if (!v45)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
            v45 = *(_QWORD *)(v44 + 40);
          }
          v46 = *(_QWORD *)(v4 + 16);
          if (v46)
          {
            v47 = *(_QWORD *)(v46 + 8);
            if (v47)
            {
              v48 = v45 + 392;
              v49 = *(_QWORD *)(v47 + 296);
              *(_DWORD *)(v4 + 24) += 2;
              v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v50 = &off_1E33F7EA0;
              v50[1] = v4;
              v50[2] = v48;
              v50[3] = 0;
              v51 = *(_OWORD *)(v49 + 432);
              *(_OWORD *)v117 = *(_OWORD *)(v49 + 416);
              *(_OWORD *)&v117[16] = v51;
              v52 = WTF::fastMalloc((WTF *)0x40);
              *(_QWORD *)v52 = &off_1E33A3A20;
              *(_OWORD *)(v52 + 16) = *(_OWORD *)v117;
              *(_OWORD *)(v52 + 32) = *(_OWORD *)&v117[16];
              *(_QWORD *)(v52 + 48) = v50;
              *(_BYTE *)(v52 + 56) = 0;
              v110[0] = v52;
              WTF::callOnMainThread();
              v53 = v110[0];
              v110[0] = 0;
              if (v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
              if (*(_DWORD *)(v4 + 24) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
              else
                --*(_DWORD *)(v4 + 24);
            }
          }
        }
        v54 = *(WTF::StringImpl **)(v3 + 24);
        if (v54)
          *(_DWORD *)v54 += 2;
        *(_QWORD *)v117 = v54;
        v55 = *(_OWORD *)(v3 + 48);
        *(_OWORD *)&v117[8] = *(_OWORD *)(v3 + 32);
        *(_OWORD *)&v117[24] = v55;
        v56 = *(_QWORD *)(v3 + 80);
        if (v56 && (v57 = *(_QWORD *)(v56 + 24)) != 0)
          v58 = *(_QWORD *)(v57 + 8);
        else
          v58 = 0;
        WebCore::ApplicationCacheGroup::createRequest((uint64_t)v110, (uint64_t)v117, v58);
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v59);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
        {
          __break(0xC471u);
          JUMPOUT(0x195F27F3CLL);
        }
        IdentifierInternal = (Inspector::IdentifiersFactory *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        *(_QWORD *)(v3 + 184) = IdentifierInternal;
        v61 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 8);
        v62 = *(_DWORD **)(*(_QWORD *)(v61 + 280) + 88);
        if (v62)
          ++v62[6];
        *(_QWORD *)v117 = 0;
        WTF::URL::invalidate((WTF::URL *)v117);
        v124 = 0;
        v125 = 0;
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        v122 = 0u;
        v123 = 0;
        v127 = vdupq_n_s64(0x7FF8000000000000uLL);
        v128 = v127;
        v129 = 0;
        v130 = 0;
        v132 = v127;
        v131 = 0x8000000000000000;
        v133 = 0x7FF8000000000000;
        v134 &= 0xF0u;
        v135 &= 0xC000u;
        v136 = v136 & 0xF8 | 2;
        v137 = 0;
        v138 = 0;
        v126 = v126 & 0xC0 | 5;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v104 = *(_QWORD *)(v61 + 24);
          if (v104)
          {
            v105 = *(_QWORD *)(v104 + 8);
            if (v105)
            {
              v106 = *(_QWORD *)(*(_QWORD *)(v105 + 80) + 8);
              v107 = *(_QWORD *)(v106 + 192);
              if (v107)
                WebCore::InspectorNetworkAgent::willSendRequest(v107, IdentifierInternal, (uint64_t)v62, (WebCore::ResourceRequest *)v110, (WebCore::ResourceLoader *)v117, 0, 0);
              v108 = *(Inspector::InspectorDebuggerAgent ***)(v106 + 144);
              if (v108 && (v111 & 0xFE) != 2)
              {
                if ((v115 & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v110);
                  v115 |= 1u;
                }
                WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v108, (const WTF::String *)v110);
              }
            }
          }
        }
        v65 = v137;
        v137 = 0;
        if (v65)
          CFRelease(v65);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v117, v63);
        if (v62)
        {
          if (v62[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 24))(v62);
          else
            --v62[6];
        }
        v66 = *(_QWORD **)(v4 + 72);
        v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v67 = off_1E33F7E50;
        v67[1] = v3;
        v109 = v67;
        WebCore::ApplicationCacheResourceLoader::create(2, v66, (uint64_t)v110, (uint64_t *)&v109, (uint64_t *)v117);
        v69 = *(_QWORD *)v117;
        *(_QWORD *)v117 = 0;
        v70 = *(WebCore::ApplicationCacheResourceLoader **)(v3 + 200);
        *(_QWORD *)(v3 + 200) = v69;
        if (v70)
        {
          if (*((_DWORD *)v70 + 4) == 1)
          {
            WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v70, v68);
            WTF::fastFree(v76, v77);
            v78 = *(WebCore::ApplicationCacheResourceLoader **)v117;
            *(_QWORD *)v117 = 0;
            if (v78)
            {
              if (*((_DWORD *)v78 + 4) == 1)
              {
                WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v78, v68);
                WTF::fastFree(v82, v83);
              }
              else
              {
                --*((_DWORD *)v78 + 4);
              }
            }
          }
          else
          {
            --*((_DWORD *)v70 + 4);
            *(_QWORD *)v117 = 0;
          }
        }
        v71 = (uint64_t)v109;
        v109 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        v72 = cf;
        cf = 0;
        if (v72)
          CFRelease(v72);
        v73 = v114;
        v114 = 0;
        if (v73)
          WTF::RefCounted<WebCore::FormData>::deref(v73, v68);
        v74 = v113;
        v113 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v68);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = v112;
        v112 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v68);
          else
            *(_DWORD *)v75 -= 2;
        }
        WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)v110, (WTF::StringImpl *)v68);
        return;
      }
    }
  }
LABEL_110:
  v84 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v85 = *(_QWORD *)(v84 + 736);
  if (!v85 || (v86 = *(_QWORD *)(v85 + 96)) == 0)
  {
    isSameOriginAs = WebCore::threadGlobalDataSlow((WebCore *)isSameOriginAs);
    v86 = isSameOriginAs;
  }
  v87 = *(_QWORD *)(v86 + 40);
  if (!v87)
  {
    isSameOriginAs = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v86);
    v87 = *(_QWORD *)(v86 + 40);
  }
  v88 = *(_QWORD *)(v4 + 16);
  if (v88)
  {
    v89 = *(_QWORD *)(v88 + 8);
    if (v89)
    {
      v90 = v87 + 392;
      v91 = *(_QWORD *)(v89 + 296);
      *(_DWORD *)(v4 + 24) += 2;
      v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v92 = &off_1E33F7EA0;
      v92[1] = v4;
      v92[2] = v90;
      v92[3] = 0;
      v93 = *(_OWORD *)(v91 + 432);
      *(_OWORD *)v117 = *(_OWORD *)(v91 + 416);
      *(_OWORD *)&v117[16] = v93;
      v94 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v94 = &off_1E33A3A20;
      *(_OWORD *)(v94 + 16) = *(_OWORD *)v117;
      *(_OWORD *)(v94 + 32) = *(_OWORD *)&v117[16];
      *(_QWORD *)(v94 + 48) = v92;
      *(_BYTE *)(v94 + 56) = 0;
      v110[0] = v94;
      WTF::callOnMainThread();
      isSameOriginAs = v110[0];
      v110[0] = 0;
      if (isSameOriginAs)
        isSameOriginAs = (*(uint64_t (**)(uint64_t))(*(_QWORD *)isSameOriginAs + 8))(isSameOriginAs);
      if (*(_DWORD *)(v4 + 24) == 1)
        isSameOriginAs = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
  }
  v95 = *(_QWORD *)(v84 + 736);
  if (!v95 || (v96 = *(_QWORD *)(v95 + 96)) == 0)
    v96 = WebCore::threadGlobalDataSlow((WebCore *)isSameOriginAs);
  v97 = *(_QWORD *)(v96 + 40);
  if (!v97)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v96);
    v97 = *(_QWORD *)(v96 + 40);
  }
  v98 = *(_QWORD *)(v4 + 16);
  if (v98)
  {
    v99 = *(_QWORD *)(v98 + 8);
    if (v99)
    {
      v100 = v97 + 784;
      v101 = *(_QWORD *)(v99 + 296);
      *(_DWORD *)(v4 + 24) += 2;
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v23 = &off_1E33F7EA0;
      v23[1] = v4;
      v23[2] = v100;
      v23[3] = 0;
      v102 = *(_OWORD *)(v101 + 432);
      *(_OWORD *)v117 = *(_OWORD *)(v101 + 416);
      *(_OWORD *)&v117[16] = v102;
      v25 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v25 = &off_1E33A3A20;
      goto LABEL_129;
    }
  }
}

WTF::StringImpl *WebCore::ApplicationCacheGroup::finishedLoadingMainResource(WebCore::ApplicationCache **this, WebCore::DocumentLoader *a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::ApplicationCache *v16;
  uint64_t *v17;
  WebCore::ApplicationCache *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WebCore::DocumentLoader *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int i;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WebCore::ApplicationCache *v36;
  void *v37;
  WebCore::ApplicationCacheResource *v38;
  WebCore::ApplicationCacheResource *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  int v54;
  WebCore::ApplicationCache *v55;
  void *v56;
  WebCore::ApplicationCacheResource *v57;
  WebCore::ApplicationCacheResource *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  uint64_t v82;
  WebCore::ApplicationCacheResource *v83;
  WTF::StringImpl *result;
  WTF *v85;
  void *v86;
  WTF *v87;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  __int128 v98;
  __int128 v99;
  WebCore::ApplicationCacheResource *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl **)((char *)a2 + 872);
  if ((*((_BYTE *)a2 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)a2 + 872));
    *((_BYTE *)a2 + 1056) |= 1u;
  }
  v5 = *v4;
  if (*v4)
    *(_DWORD *)v5 += 2;
  v97 = v5;
  v6 = *((_OWORD *)a2 + 56);
  v98 = *((_OWORD *)a2 + 55);
  v99 = v6;
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v97);
  switch(*((_DWORD *)this + 40))
  {
    case 0:
      goto LABEL_104;
    case 1:
      WebCore::ApplicationCacheGroup::associateDocumentLoaderWithCache((WebCore::ApplicationCacheGroup *)this, a2, this[10]);
      v10 = *((_QWORD *)this[10] + 2);
      if (!v10)
        goto LABEL_33;
      v11 = *(_DWORD *)(v10 - 8);
      v12 = *((_DWORD *)v97 + 4);
      if (v12 < 0x100)
        v13 = WTF::StringImpl::hashSlowCase(v97);
      else
        v13 = v12 >> 8;
      for (i = 0; ; v13 = i + v33)
      {
        v33 = v13 & v11;
        v34 = *(WTF **)(v10 + 16 * v33);
        if (v34 != (WTF *)-1)
        {
          if (!v34)
            goto LABEL_33;
          if ((WTF::equal(v34, v97, v9) & 1) != 0)
            break;
        }
        ++i;
      }
      v35 = *(_QWORD *)(v10 + 16 * v33 + 8);
      if (v35)
        goto LABEL_61;
LABEL_33:
      v36 = this[10];
      WebCore::DocumentLoader::mainResourceData(a2, &v96);
      v95 = 0;
      WebCore::ApplicationCacheResource::create((WebCore::DocumentLoader *)((char *)a2 + 1272), (uint64_t)&v97, 1, (unsigned int **)&v96, (_DWORD **)&v95, (uint64_t *)&v100);
      v38 = v100;
      if (*((_DWORD *)v36 + 20))
        WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*((_QWORD *)v36 + 1) + 8) + 16), v100, v36);
      *((_QWORD *)v36 + 9) += WebCore::ApplicationCacheResource::estimatedSizeInStorage(v100, v37);
      WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)v36 + 2, (WTF::StringImpl **)v38 + 2, (const WTF::StringImpl *)&v100, (uint64_t)&v101);
      v39 = v100;
      v100 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) == 1)
          (*(void (**)(WebCore::ApplicationCacheResource *))(*(_QWORD *)v39 + 8))(v39);
        else
          --*((_DWORD *)v39 + 2);
      }
      v40 = v95;
      v95 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v7);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v96;
      v96 = 0;
      if (v41)
      {
        do
        {
          v42 = __ldaxr((unsigned int *)v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, (unsigned int *)v41));
        if (!v43)
        {
          atomic_store(1u, (unsigned int *)v41);
          v44 = *((unsigned int *)v41 + 5);
          if ((_DWORD)v44)
          {
            v45 = *((_QWORD *)v41 + 1);
            v46 = v45 + 16 * v44;
            do
            {
              v47 = *(unsigned int **)(v45 + 8);
              *(_QWORD *)(v45 + 8) = 0;
              if (v47)
              {
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  v91 = v45;
                  v93 = v46;
                  atomic_store(1u, v47);
                  v50 = v47[6];
                  if ((_DWORD)v50 != -1)
                    ((void (*)(__int128 *, unsigned int *))off_1E33F7AE0[v50])(&v101, v47 + 2);
                  v47[6] = -1;
                  WTF::fastFree((WTF *)v47, v7);
                  v45 = v91;
                  v46 = v93;
                }
              }
              v45 += 16;
            }
            while (v45 != v46);
          }
          goto LABEL_115;
        }
      }
      goto LABEL_103;
    case 2:
      v14 = *((_QWORD *)a2 + 359);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
      {
        if (*(_QWORD *)(v15 + 8))
        {
          *(_QWORD *)(v14 + 48) = 0;
          do
          {
            v89 = __ldaxr((unsigned int *)v15);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, (unsigned int *)v15));
          if (!v90)
          {
            atomic_store(1u, (unsigned int *)v15);
            WTF::fastFree((WTF *)v15, v7);
          }
        }
      }
      v16 = *(WebCore::ApplicationCache **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::ApplicationCache::~ApplicationCache(v16, v7);
          WTF::fastFree(v85, v86);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      v17 = (uint64_t *)(this + 15);
      v18 = this[15];
      if (!v18)
        goto LABEL_92;
      v19 = *((_DWORD *)v18 - 2);
      v20 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = (WebCore::DocumentLoader *)*((_QWORD *)v18 + v23);
      if (v24 == a2)
        goto LABEL_23;
      v25 = 1;
      break;
    case 3:
      v26 = *((_QWORD *)this[12] + 2);
      if (!v26)
        goto LABEL_63;
      v27 = *(_DWORD *)(v26 - 8);
      v28 = *((_DWORD *)v97 + 4);
      if (v28 < 0x100)
        v29 = WTF::StringImpl::hashSlowCase(v97);
      else
        v29 = v28 >> 8;
      v51 = 0;
      while (2)
      {
        v52 = v29 & v27;
        v53 = *(WTF **)(v26 + 16 * v52);
        if (v53 == (WTF *)-1)
          goto LABEL_59;
        if (!v53)
          goto LABEL_63;
        if ((WTF::equal(v53, v97, v8) & 1) == 0)
        {
LABEL_59:
          v29 = ++v51 + v52;
          continue;
        }
        break;
      }
      v35 = *(_QWORD *)(v26 + 16 * v52 + 8);
      if (v35)
      {
LABEL_61:
        v54 = *(_DWORD *)(v35 + 328);
        if ((v54 & 1) == 0)
          *(_DWORD *)(v35 + 328) = v54 | 1;
      }
      else
      {
LABEL_63:
        v55 = this[12];
        WebCore::DocumentLoader::mainResourceData(a2, &v96);
        v95 = 0;
        WebCore::ApplicationCacheResource::create((WebCore::DocumentLoader *)((char *)a2 + 1272), (uint64_t)&v97, 1, (unsigned int **)&v96, (_DWORD **)&v95, (uint64_t *)&v100);
        v57 = v100;
        if (*((_DWORD *)v55 + 20))
          WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*((_QWORD *)v55 + 1) + 8) + 16), v100, v55);
        *((_QWORD *)v55 + 9) += WebCore::ApplicationCacheResource::estimatedSizeInStorage(v100, v56);
        WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)v55 + 2, (WTF::StringImpl **)v57 + 2, (const WTF::StringImpl *)&v100, (uint64_t)&v101);
        v58 = v100;
        v100 = 0;
        if (v58)
        {
          if (*((_DWORD *)v58 + 2) == 1)
            (*(void (**)(WebCore::ApplicationCacheResource *))(*(_QWORD *)v58 + 8))(v58);
          else
            --*((_DWORD *)v58 + 2);
        }
        v59 = v95;
        v95 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v7);
          else
            *(_DWORD *)v59 -= 2;
        }
        v41 = v96;
        v96 = 0;
        if (v41)
        {
          do
          {
            v60 = __ldaxr((unsigned int *)v41);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, (unsigned int *)v41));
          if (!v61)
          {
            atomic_store(1u, (unsigned int *)v41);
            v62 = *((unsigned int *)v41 + 5);
            if ((_DWORD)v62)
            {
              v63 = *((_QWORD *)v41 + 1);
              v64 = v63 + 16 * v62;
              do
              {
                v65 = *(unsigned int **)(v63 + 8);
                *(_QWORD *)(v63 + 8) = 0;
                if (v65)
                {
                  do
                  {
                    v66 = __ldaxr(v65);
                    v67 = v66 - 1;
                  }
                  while (__stlxr(v67, v65));
                  if (!v67)
                  {
                    v92 = v63;
                    v94 = v64;
                    atomic_store(1u, v65);
                    v68 = v65[6];
                    if ((_DWORD)v68 != -1)
                      ((void (*)(__int128 *, unsigned int *))off_1E33F7AE0[v68])(&v101, v65 + 2);
                    v65[6] = -1;
                    WTF::fastFree((WTF *)v65, v7);
                    v63 = v92;
                    v64 = v94;
                  }
                }
                v63 += 16;
              }
              while (v63 != v64);
            }
LABEL_115:
            v87 = (WTF *)*((_QWORD *)v41 + 1);
            if ((WTF *)((char *)v41 + 24) != v87 && v87 != 0)
            {
              *((_QWORD *)v41 + 1) = 0;
              *((_DWORD *)v41 + 4) = 0;
              WTF::fastFree(v87, v7);
            }
            WTF::fastFree(v41, v7);
          }
        }
      }
      goto LABEL_103;
    default:
      goto LABEL_103;
  }
  while (v24)
  {
    v23 = ((_DWORD)v23 + v25) & v19;
    v24 = (WebCore::DocumentLoader *)*((_QWORD *)v18 + v23);
    ++v25;
    if (v24 == a2)
      goto LABEL_23;
  }
  v23 = *((unsigned int *)v18 - 1);
LABEL_23:
  if (v23 != *((_DWORD *)v18 - 1))
  {
    *((_QWORD *)v18 + v23) = -1;
    ++*(_DWORD *)(*v17 - 16);
    v30 = *v17;
    v31 = *v17 ? *(_DWORD *)(v30 - 12) - 1 : -1;
    *(_DWORD *)(v30 - 12) = v31;
    v69 = *v17;
    if (*v17)
    {
      v70 = 6 * *(_DWORD *)(v69 - 12);
      v71 = *(_DWORD *)(v69 - 4);
      if (v70 < v71 && v71 >= 9)
        v17 = (uint64_t *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v17, v71 >> 1);
    }
  }
LABEL_92:
  v73 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v73 || (v74 = *(_QWORD *)(v73 + 96)) == 0)
    v74 = WebCore::threadGlobalDataSlow((WebCore *)v17);
  v75 = *(_QWORD *)(v74 + 40);
  if (!v75)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v74);
    v75 = *(_QWORD *)(v74 + 40);
  }
  v76 = *((_QWORD *)a2 + 2);
  if (v76)
  {
    v77 = *(_QWORD *)(v76 + 8);
    if (v77)
    {
      v78 = v75 + 784;
      v79 = *(_QWORD *)(v77 + 296);
      *((_DWORD *)a2 + 6) += 2;
      v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v80 = &off_1E33F7EA0;
      v80[1] = a2;
      v80[2] = v78;
      v80[3] = 0;
      v81 = *(_OWORD *)(v79 + 432);
      v101 = *(_OWORD *)(v79 + 416);
      v102 = v81;
      v82 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v82 = &off_1E33A3A20;
      *(_OWORD *)(v82 + 16) = v101;
      *(_OWORD *)(v82 + 32) = v102;
      *(_QWORD *)(v82 + 48) = v80;
      *(_BYTE *)(v82 + 56) = 0;
      v100 = (WebCore::ApplicationCacheResource *)v82;
      WTF::callOnMainThread();
      v83 = v100;
      v100 = 0;
      if (v83)
        (*(void (**)(WebCore::ApplicationCacheResource *))(*(_QWORD *)v83 + 8))(v83);
      if (*((_DWORD *)a2 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)a2 + 24))(a2);
      else
        --*((_DWORD *)a2 + 6);
    }
  }
LABEL_103:
  --*((_DWORD *)this + 28);
  WebCore::ApplicationCacheGroup::checkIfLoadIsComplete((uint64_t)this, v7);
LABEL_104:
  result = v97;
  v97 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ApplicationCacheGroup::checkIfLoadIsComplete(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ApplicationCache *v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ApplicationCache *v14;
  WebCore::ApplicationCache *v15;
  WebCore::ApplicationCache *v16;
  WebCore::ApplicationCacheStorage *v17;
  const WebCore::SecurityOrigin *v18;
  WebCore::ApplicationCache *v19;
  int v20;
  char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  WTF::StringImpl *v25;
  unint64_t StatusReg;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::ApplicationCache *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  double v58;
  WTF *v59;
  void *v60;
  WebCore::ApplicationCache *v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  WebCore::DocumentLoader **v68;
  WebCore::DocumentLoader *v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  void *v76;
  WTF *v77;
  void *v78;
  int v79;
  WTF::StringImpl *v80;
  WebCore::ApplicationCache *v81;

  if (!*(_QWORD *)(this + 200))
  {
    v2 = this;
    if (!*(_QWORD *)(this + 176))
    {
      v3 = *(_QWORD *)(this + 128);
      if ((!v3 || !*(_DWORD *)(v3 - 12)) && !*(_DWORD *)(this + 112))
      {
        v4 = *(WebCore::ApplicationCache **)(this + 80);
        if (v4)
          v5 = WTF::RefPtr<WebCore::ApplicationCache,WTF::RawPtrTraits<WebCore::ApplicationCache>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCache>>::unspecifiedBoolTypeInstance;
        else
          v5 = 0;
        switch(*(_DWORD *)(this + 160))
        {
          case 0:
            return this;
          case 1:
            if (!*(_DWORD *)(this + 152))
              WebCore::ApplicationCacheStorage::storeNewestCache(*(_QWORD *)(this + 16), this, 0, (int *)&v81);
            v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
              v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
            v8 = *(_QWORD *)(v7 + 40);
            if (!v8)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
              v8 = *(_QWORD *)(v7 + 40);
            }
            WebCore::ApplicationCacheGroup::postListenerTask(v8 + 1344, 0, 0, *(_QWORD *)(v2 + 120));
            goto LABEL_118;
          case 2:
            v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
              v10 = WebCore::threadGlobalDataSlow((WebCore *)this);
            v11 = *(_QWORD *)(v10 + 40);
            if (!v11)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
              v11 = *(_QWORD *)(v10 + 40);
            }
            WebCore::ApplicationCacheGroup::postListenerTask(v11 + 784, 0, 0, *(_QWORD *)(v2 + 120));
            v12 = *(_QWORD *)(v2 + 88);
            if (v12 && *(_DWORD *)(v12 - 12))
              goto LABEL_118;
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
          case 3:
            if (*(_QWORD *)(this + 192))
            {
              v13 = *(_QWORD *)(this + 96);
              v81 = *(WebCore::ApplicationCache **)(v2 + 192);
              *(_QWORD *)(v2 + 192) = 0;
              WebCore::ApplicationCache::setManifestResource(v13, (uint64_t *)&v81);
              v14 = v81;
              v81 = 0;
              if (v14)
              {
                if (*((_DWORD *)v14 + 2) == 1)
                  (*(void (**)(WebCore::ApplicationCache *))(*(_QWORD *)v14 + 8))(v14);
                else
                  --*((_DWORD *)v14 + 2);
              }
              v4 = *(WebCore::ApplicationCache **)(v2 + 80);
            }
            v15 = 0;
            v16 = *(WebCore::ApplicationCache **)(v2 + 96);
            if (v4 && v4 != v16)
            {
              ++*(_DWORD *)v4;
              v15 = v4;
            }
            v17 = *(WebCore::ApplicationCacheStorage **)(v2 + 16);
            v81 = 0;
            v18 = *(const WebCore::SecurityOrigin **)(v2 + 64);
            if (WebCore::ApplicationCacheStorage::calculateRemainingSizeForOriginExcludingCache(v17, v18, v15, (uint64_t *)&v81))
            {
              v19 = v81;
              if ((uint64_t)v81 < *((_QWORD *)v16 + 9))
              {
                v80 = 0;
                v20 = WebCore::ApplicationCacheStorage::calculateQuotaForOrigin(v17, v18, (uint64_t *)&v80);
                v21 = 0;
                if (v20)
                  v21 = (char *)(v80 - v19 + *((_QWORD *)v16 + 9));
                v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 24)
                                                        + 8)
                                            + 48)
                                + 16);
                (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v22 + 600))(v22, *(_QWORD *)(v2 + 64), v21);
              }
            }
            v79 = 0;
            v81 = *(WebCore::ApplicationCache **)(v2 + 96);
            *(_QWORD *)(v2 + 96) = 0;
            WebCore::ApplicationCacheGroup::setNewestCache((_QWORD *)v2, (WTF::StringImpl *)&v81);
            if (v81)
            {
              if (*(_DWORD *)v81 == 1)
              {
                WebCore::ApplicationCache::~ApplicationCache(v81, v23);
                WTF::fastFree(v59, v60);
              }
              else
              {
                --*(_DWORD *)v81;
              }
            }
            WebCore::ApplicationCacheStorage::storeNewestCache(*(_QWORD *)(v2 + 16), v2, v15, &v79);
            if ((_DWORD)v24)
            {
              if (v15)
                v24 = (WebCore *)WebCore::ApplicationCacheStorage::remove(*(WebCore::ApplicationCacheStorage **)(v2 + 16), v15);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v27 = *(_QWORD *)(StatusReg + 736);
              if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
                v28 = WebCore::threadGlobalDataSlow(v24);
              v29 = *(_QWORD *)(v28 + 40);
              if (!v29)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v28);
                v29 = *(_QWORD *)(v28 + 40);
              }
              v30 = (WebCore *)WebCore::ApplicationCacheGroup::postListenerTask(v29 + 1584, *(_DWORD *)(v2 + 136), *(_DWORD *)(v2 + 140), *(_QWORD *)(v2 + 120));
              v31 = *(_QWORD *)(StatusReg + 736);
              if (v5)
              {
                if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
                  v32 = WebCore::threadGlobalDataSlow(v30);
                v33 = *(_QWORD *)(v32 + 40);
                if (!v33)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v32);
                  v33 = *(_QWORD *)(v32 + 40);
                }
                v34 = v33 + 2208;
              }
              else
              {
                if (!v31 || (v49 = *(_QWORD *)(v31 + 96)) == 0)
                  v49 = WebCore::threadGlobalDataSlow(v30);
                v50 = *(_QWORD *)(v49 + 40);
                if (!v50)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v49);
                  v50 = *(_QWORD *)(v49 + 40);
                }
                v34 = v50 + 336;
              }
              WebCore::ApplicationCacheGroup::postListenerTask(v34, 0, 0, *(_QWORD *)(v2 + 120));
              *(_BYTE *)(v2 + 216) = 0;
              if (!v15)
                goto LABEL_118;
              if (*(_DWORD *)v15 != 1)
              {
                --*(_DWORD *)v15;
                goto LABEL_118;
              }
              v61 = v15;
              goto LABEL_117;
            }
            v35 = v79;
            if (!v79)
            {
              *(_BYTE *)(v2 + 216) = 1;
              v36 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v80 = v81;
              WebCore::Document::addConsoleMessage(v36, 5, 2, &v80, 0);
              v24 = v80;
              v80 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  v24 = (WebCore *)WTF::StringImpl::destroy(v24, v25);
                else
                  *(_DWORD *)v24 -= 2;
              }
              v35 = v79;
            }
            if (v35 != 1 || *(_BYTE *)(v2 + 164))
            {
              v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
                v38 = WebCore::threadGlobalDataSlow(v24);
              v39 = *(_QWORD *)(v38 + 40);
              if (!v39)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
                v39 = *(_QWORD *)(v38 + 40);
              }
              this = WebCore::ApplicationCacheGroup::postListenerTask(v39 + 784, 0, 0, *(_QWORD *)(v2 + 120));
              v40 = *(_QWORD *)(v2 + 104);
              if (v40)
              {
                v41 = *(unsigned int *)(v40 - 12);
                if ((_DWORD)v41)
                {
                  if (v41 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195F28EC8);
                  }
                  v42 = WTF::fastMalloc((WTF *)(8 * v41));
                  v44 = (WTF *)v42;
                  v45 = *(_QWORD *)(v2 + 104);
                  if (v45 && *(_DWORD *)(v45 - 12))
                  {
                    v46 = *(unsigned int *)(v45 - 4);
                    if ((_DWORD)v46)
                    {
                      v47 = 8 * v46;
                      v48 = *(uint64_t **)(v2 + 104);
                      while ((unint64_t)(*v48 + 1) <= 1)
                      {
                        ++v48;
                        v47 -= 8;
                        if (!v47)
                          goto LABEL_112;
                      }
                    }
                    else
                    {
                      v48 = *(uint64_t **)(v2 + 104);
                    }
                    v62 = (uint64_t *)(v45 + 8 * v46);
                    if (v48 != v62)
                    {
                      v63 = 0;
                      v64 = *v48;
                      v65 = 1;
                      do
                      {
                        v66 = v65;
                        *(_QWORD *)(v42 + 8 * v63++) = v64;
                        do
                        {
                          if (++v48 == v62)
                            goto LABEL_109;
                          v64 = *v48;
                        }
                        while ((unint64_t)(*v48 + 1) <= 1);
                        ++v65;
                      }
                      while (v48 != v62);
LABEL_109:
                      if (v63)
                      {
                        v67 = 8 * v66;
                        v68 = (WebCore::DocumentLoader **)v42;
                        do
                        {
                          v69 = *v68++;
                          WebCore::ApplicationCacheGroup::disassociateDocumentLoader((uint64_t *)v2, v69);
                          v67 -= 8;
                        }
                        while (v67);
                      }
                    }
                  }
LABEL_112:
                  this = WTF::fastFree(v44, v43);
                }
              }
              if (!v15)
                return this;
              v81 = v15;
              WebCore::ApplicationCacheGroup::setNewestCache((_QWORD *)v2, (WTF::StringImpl *)&v81);
              v61 = v81;
              if (!v81)
              {
LABEL_118:
                v72 = *(_QWORD *)(v2 + 104);
                if (v72)
                {
                  *(_QWORD *)(v2 + 104) = 0;
                  WTF::fastFree((WTF *)(v72 - 16), a2);
                }
                *(_DWORD *)(v2 + 160) = 0;
                *(_DWORD *)(v2 + 72) = 0;
                this = *(_QWORD *)(v2 + 144);
                *(_QWORD *)(v2 + 144) = 0;
                if (this)
                {
                  do
                  {
                    v73 = __ldaxr((unsigned int *)this);
                    v74 = v73 - 1;
                  }
                  while (__stlxr(v74, (unsigned int *)this));
                  if (!v74)
                  {
                    atomic_store(1u, (unsigned int *)this);
                    this = WTF::fastFree((WTF *)this, a2);
                  }
                }
                *(_QWORD *)(v2 + 208) = -1;
                *(_BYTE *)(v2 + 164) = 0;
                return this;
              }
              if (*(_DWORD *)v81 != 1)
              {
                --*(_DWORD *)v81;
                goto LABEL_118;
              }
LABEL_117:
              WebCore::ApplicationCache::~ApplicationCache(v61, (WTF::StringImpl *)a2);
              WTF::fastFree(v70, v71);
              goto LABEL_118;
            }
            v51 = *(_QWORD *)(v2 + 80);
            *(_QWORD *)(v2 + 80) = 0;
            v52 = *(WebCore::ApplicationCache **)(v2 + 96);
            *(_QWORD *)(v2 + 96) = v51;
            if (!v52)
              goto LABEL_91;
            if (*(_DWORD *)v52 == 1)
            {
              WebCore::ApplicationCache::~ApplicationCache(v52, v25);
              WTF::fastFree(v75, v76);
              if (!v15)
                goto LABEL_95;
              goto LABEL_92;
            }
            --*(_DWORD *)v52;
LABEL_91:
            if (v15)
            {
LABEL_92:
              v81 = v15;
              WebCore::ApplicationCacheGroup::setNewestCache((_QWORD *)v2, (WTF::StringImpl *)&v81);
              if (v81)
              {
                if (*(_DWORD *)v81 == 1)
                {
                  WebCore::ApplicationCache::~ApplicationCache(v81, v53);
                  WTF::fastFree(v77, v78);
                }
                else
                {
                  --*(_DWORD *)v81;
                }
              }
            }
LABEL_95:
            v54 = WTF::fastMalloc((WTF *)0x38);
            *(_QWORD *)v54 = off_1E3407128;
            v55 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            *(_OWORD *)(v54 + 8) = 0u;
            *(_OWORD *)(v54 + 24) = 0u;
            v56 = *(unsigned int **)(v55 + 736);
            if (!v56)
              v56 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 + 1, v56));
            *(_QWORD *)v54 = off_1E33F7B20;
            *(_QWORD *)(v54 + 40) = v56;
            *(_QWORD *)(v54 + 48) = v2;
            *(_QWORD *)(v54 + 24) = 0;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v56);
            this = WebCore::TimerBase::setNextFireTime(v54, v58 + 0.0);
            break;
          default:
            goto LABEL_118;
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::ApplicationCacheGroup::failedLoadingMainResource(uint64_t *this, WebCore::DocumentLoader *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::ApplicationCache *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::DocumentLoader *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::DocumentLoader *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v2 = (uint64_t)this;
  switch(*((_DWORD *)this + 40))
  {
    case 0:
      return this;
    case 1:
      goto LABEL_47;
    case 2:
      v4 = *((_QWORD *)a2 + 359);
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          *(_QWORD *)(v4 + 48) = 0;
          do
          {
            v51 = __ldaxr((unsigned int *)v5);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, (unsigned int *)v5));
          if (!v52)
          {
            atomic_store(1u, (unsigned int *)v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v6 = *(WebCore::ApplicationCache **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::ApplicationCache::~ApplicationCache(v6, a2);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      this = (uint64_t *)(v2 + 120);
      v7 = *(_QWORD *)(v2 + 120);
      if (!v7)
        goto LABEL_47;
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(WebCore::DocumentLoader **)(v7 + 8 * v12);
      if (v13 == a2)
        goto LABEL_19;
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(WebCore::DocumentLoader **)(v7 + 8 * v12);
        ++v14;
        if (v13 == a2)
          goto LABEL_19;
      }
      v12 = *(unsigned int *)(v7 - 4);
LABEL_19:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        *(_QWORD *)(v7 + 8 * v12) = -1;
        ++*(_DWORD *)(*this - 16);
        v24 = *this;
        v25 = *this ? *(_DWORD *)(v24 - 12) - 1 : -1;
        *(_DWORD *)(v24 - 12) = v25;
        v28 = *this;
        if (*this)
        {
          v29 = 6 * *(_DWORD *)(v28 - 12);
          v30 = *(_DWORD *)(v28 - 4);
          if (v29 < v30 && v30 >= 9)
            this = (uint64_t *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(this, v30 >> 1);
        }
      }
      goto LABEL_47;
    case 3:
      v15 = this + 15;
      v16 = *(_QWORD *)(v2 + 120);
      if (!v16)
        goto LABEL_43;
      v17 = *(_DWORD *)(v16 - 8);
      v18 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(WebCore::DocumentLoader **)(v16 + 8 * v21);
      if (v22 == a2)
        goto LABEL_23;
      v23 = 1;
      break;
    default:
      goto LABEL_58;
  }
  while (v22)
  {
    v21 = ((_DWORD)v21 + v23) & v17;
    v22 = *(WebCore::DocumentLoader **)(v16 + 8 * v21);
    ++v23;
    if (v22 == a2)
      goto LABEL_23;
  }
  v21 = *(unsigned int *)(v16 - 4);
LABEL_23:
  if (v21 != *(_DWORD *)(v16 - 4))
  {
    *(_QWORD *)(v16 + 8 * v21) = -1;
    ++*(_DWORD *)(*v15 - 16);
    v26 = *v15;
    v27 = *v15 ? *(_DWORD *)(v26 - 12) - 1 : -1;
    *(_DWORD *)(v26 - 12) = v27;
    v32 = *v15;
    if (*v15)
    {
      v33 = 6 * *(_DWORD *)(v32 - 12);
      v34 = *(_DWORD *)(v32 - 4);
      if (v33 < v34 && v34 >= 9)
        WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v15, v34 >> 1);
    }
  }
LABEL_43:
  v36 = *((_QWORD *)a2 + 359);
  v37 = *(_QWORD *)(v36 + 48);
  if (v37)
  {
    if (*(_QWORD *)(v37 + 8))
    {
      *(_QWORD *)(v36 + 48) = 0;
      do
      {
        v53 = __ldaxr((unsigned int *)v37);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)v37));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)v37);
        WTF::fastFree((WTF *)v37, a2);
      }
    }
  }
  this = *(uint64_t **)(v36 + 40);
  *(_QWORD *)(v36 + 40) = 0;
  if (this)
  {
    if (*(_DWORD *)this == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache((WebCore::ApplicationCache *)this, a2);
      this = (uint64_t *)WTF::fastFree(v48, v49);
    }
    else
    {
      --*(_DWORD *)this;
    }
  }
LABEL_47:
  v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v38 || (this = *(uint64_t **)(v38 + 96)) == 0)
    this = (uint64_t *)WebCore::threadGlobalDataSlow((WebCore *)this);
  v39 = this[5];
  if (!v39)
  {
    v50 = (uint64_t)this;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
    v39 = *(_QWORD *)(v50 + 40);
  }
  v40 = *((_QWORD *)a2 + 2);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    if (v41)
    {
      v42 = v39 + 784;
      v43 = *(_QWORD *)(v41 + 296);
      *((_DWORD *)a2 + 6) += 2;
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v44 = &off_1E33F7EA0;
      v44[1] = a2;
      v44[2] = v42;
      v44[3] = 0;
      v56 = *(_OWORD *)(v43 + 416);
      v57 = *(_OWORD *)(v43 + 432);
      v45 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v45 = &off_1E33A3A20;
      *(_OWORD *)(v45 + 16) = v56;
      *(_OWORD *)(v45 + 32) = v57;
      *(_QWORD *)(v45 + 48) = v44;
      *(_BYTE *)(v45 + 56) = 0;
      v55 = v45;
      WTF::callOnMainThread();
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      if (*((_DWORD *)a2 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)a2 + 24))(a2);
      else
        --*((_DWORD *)a2 + 6);
    }
  }
LABEL_58:
  --*(_DWORD *)(v2 + 112);
  return (uint64_t *)WebCore::ApplicationCacheGroup::checkIfLoadIsComplete(v2, a2);
}

uint64_t *WebCore::ApplicationCacheGroup::disassociateDocumentLoader(uint64_t *this, WebCore::DocumentLoader *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::DocumentLoader *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WebCore::DocumentLoader *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;

  v3 = this;
  v5 = this + 15;
  v4 = this[15];
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::DocumentLoader **)(v4 + 8 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::DocumentLoader **)(v4 + 8 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 8 * v10) = -1;
      ++*(_DWORD *)(*v5 - 16);
      v13 = *v5;
      v14 = *v5 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *v5;
      if (*v5)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          this = (uint64_t *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(this + 15, v17 >> 1);
      }
    }
  }
  v20 = v3 + 13;
  v19 = v3[13];
  if (v19)
  {
    v21 = *(_DWORD *)(v19 - 8);
    v22 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(WebCore::DocumentLoader **)(v19 + 8 * v25);
    if (v26 != a2)
    {
      v27 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v27) & v21;
        v26 = *(WebCore::DocumentLoader **)(v19 + 8 * v25);
        ++v27;
        if (v26 == a2)
          goto LABEL_26;
      }
      v25 = *(unsigned int *)(v19 - 4);
    }
LABEL_26:
    if (v25 != *(_DWORD *)(v19 - 4))
    {
      *(_QWORD *)(v19 + 8 * v25) = -1;
      ++*(_DWORD *)(*v20 - 16);
      v28 = *v20;
      v29 = *v20 ? *(_DWORD *)(v28 - 12) - 1 : -1;
      *(_DWORD *)(v28 - 12) = v29;
      v30 = *v20;
      if (*v20)
      {
        v31 = 6 * *(_DWORD *)(v30 - 12);
        v32 = *(_DWORD *)(v30 - 4);
        if (v31 < v32 && v32 >= 9)
          this = (uint64_t *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v3 + 13, v32 >> 1);
      }
    }
  }
  v34 = *((_QWORD *)a2 + 359);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 48);
    if (v35)
    {
      if (*(_QWORD *)(v35 + 8))
      {
        *(_QWORD *)(v34 + 48) = 0;
        do
        {
          v41 = __ldaxr((unsigned int *)v35);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, (unsigned int *)v35));
        if (!v42)
        {
          atomic_store(1u, (unsigned int *)v35);
          WTF::fastFree((WTF *)v35, a2);
        }
      }
    }
    this = *(uint64_t **)(v34 + 40);
    *(_QWORD *)(v34 + 40) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::ApplicationCache::~ApplicationCache((WebCore::ApplicationCache *)this, a2);
        this = (uint64_t *)WTF::fastFree(v37, v38);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  if ((!*v5 || !*(_DWORD *)(*v5 - 12)) && (!*v20 || !*(_DWORD *)(*v20 - 12)))
  {
    v36 = v3[11];
    if (v36 && *(_DWORD *)(v36 - 12))
    {
      this = (uint64_t *)v3[10];
      v3[10] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::ApplicationCache::~ApplicationCache((WebCore::ApplicationCache *)this, a2);
          return (uint64_t *)WTF::fastFree(v39, v40);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    else
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v3 + 8))(v3);
    }
  }
  return this;
}

uint64_t *WebCore::ApplicationCacheGroup::stopLoadingInFrame(uint64_t *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  v2 = this[18];
  if (v2 && *(WebCore::LocalFrame **)(v2 + 8) == a2)
  {
    v3 = (uint64_t)this;
    WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)this, a2);
    v5 = *(_DWORD **)(v3 + 192);
    *(_QWORD *)(v3 + 192) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    *(_DWORD *)(v3 + 160) = 2;
    return WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v3, v4);
  }
  return this;
}

uint64_t WebCore::ApplicationCacheGroup::setNewestCache(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ApplicationCache *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = (WebCore::ApplicationCache *)a1[10];
  a1[10] = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache(v4, a2);
      WTF::fastFree(v15, v16);
      v3 = a1[10];
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v18 = v3;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a1 + 11, &v18, (uint64_t)&v17);
  v6 = a1[10];
  result = a1[1];
  if (result)
    goto LABEL_19;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a1;
  v8 = (unsigned int *)a1[1];
  a1[1] = result;
  if (!v8)
    goto LABEL_19;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v5);
  }
  result = a1[1];
  if (result)
  {
LABEL_19:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  v12 = *(unsigned int **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = result;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      return WTF::fastFree((WTF *)v12, v5);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ApplicationCacheGroup::createRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0x10000;
  v6 = *(_BYTE *)(a1 + 148) & 0x80 | 4;
  *(_BYTE *)(a1 + 148) = v6;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v7 += 2;
    v6 = *(_BYTE *)(a1 + 148);
  }
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 184) & 0xE0 | 5;
  *(_BYTE *)(a1 + 148) = v6 | 2;
  *(_QWORD *)(a1 + 192) = 0;
  {
    WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::maxAge0(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl;
  }
  result = WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 96), (WTF::StringImpl *)0xF, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::maxAge0(void)::value);
  *(_BYTE *)(a1 + 184) &= ~2u;
  if (a3)
  {
    v9 = a3 + 56;
    WebCore::ResourceResponseBase::httpHeaderField(v9, 50, &v13);
    if (v13 && *((_DWORD *)v13 + 1))
    {
      if ((*(_BYTE *)(a1 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a1);
        *(_BYTE *)(a1 + 184) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 96), (WTF::StringImpl *)0x2C, &v13);
      *(_BYTE *)(a1 + 184) &= ~2u;
    }
    WebCore::ResourceResponseBase::httpHeaderField(v9, 37, &v12);
    v11 = v12;
    if (!v12)
      goto LABEL_22;
    if (*((_DWORD *)v12 + 1))
    {
      if ((*(_BYTE *)(a1 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a1);
        *(_BYTE *)(a1 + 184) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 96), (WTF::StringImpl *)0x2D, &v12);
      *(_BYTE *)(a1 + 184) &= ~2u;
      v11 = v12;
      v12 = 0;
      if (!v11)
        goto LABEL_22;
    }
    else
    {
      v12 = 0;
    }
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
LABEL_22:
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::ApplicationCacheGroup::abort(uint64_t *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  if (*((_DWORD *)this + 18))
  {
    v2 = (uint64_t)this;
    if (!*((_DWORD *)this + 40))
    {
      v3 = (_QWORD *)*((_QWORD *)a2 + 37);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage(v3, 5, 3, &v8, 0);
      v5 = v8;
      v8 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v2, v4);
      v7 = *(_DWORD **)(v2 + 192);
      *(_QWORD *)(v2 + 192) = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      *(_DWORD *)(v2 + 160) = 2;
      return WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v2, v6);
    }
  }
  return this;
}

void WebCore::ApplicationCacheGroup::startLoadingEntry(WebCore::ApplicationCacheGroup *this, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int i;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  Inspector::IdentifiersFactory *IdentifierInternal;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  CFTypeRef v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl *v41;
  WebCore::ApplicationCacheResourceLoader *v42;
  uint64_t v43;
  CFTypeRef v44;
  WebCore::FormData *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  void *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Inspector::InspectorDebuggerAgent **v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  WTF::StringImpl *v62[5];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  char v69;
  __int16 v70;
  char v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64x2_t v77;
  uint64_t v78;
  char v79;
  __int16 v80;
  char v81;
  CFTypeRef v82;
  char v83;
  WTF::StringImpl *v84;
  __int128 v85;
  __int128 v86;
  char v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WebCore::FormData *v90;
  char v91;
  CFTypeRef cf;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 16);
  if (v3 && *((_DWORD *)v3 - 3))
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      v6 = &v3[2 * v4];
      while (1)
      {
        v7 = *v3;
        if ((unint64_t)*v3 + 1 > 1)
          break;
        v3 += 2;
        v5 -= 16;
        if (!v5)
        {
          v3 = v6;
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      v7 = *v3;
    }
    if (v7)
      *(_DWORD *)v7 += 2;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(this);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    WebCore::ApplicationCacheGroup::postListenerTask(v10 + 1584, *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_QWORD *)this + 15));
    ++*((_DWORD *)this + 35);
    if (v7)
      *(_DWORD *)v7 += 2;
    v84 = v7;
    MEMORY[0x19AEA52D4](v62, &v84, 0);
    v13 = v84;
    v84 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *((_QWORD *)this + 10);
    if (v14 && (v15 = *(_QWORD *)(v14 + 16)) != 0)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = *((_DWORD *)v7 + 4);
      if (v17 < 0x100)
        v18 = WTF::StringImpl::hashSlowCase(v7);
      else
        v18 = v17 >> 8;
      for (i = 0; ; v18 = i + v20)
      {
        v20 = v18 & v16;
        v21 = *(WTF **)(v15 + 16 * v20);
        if (v21 != (WTF *)-1)
        {
          if (!v21)
            goto LABEL_32;
          if ((WTF::equal(v21, v7, v12) & 1) != 0)
            break;
        }
        ++i;
      }
      v22 = *(_QWORD *)(v15 + 16 * v20 + 8);
    }
    else
    {
LABEL_32:
      v22 = 0;
    }
    WebCore::ApplicationCacheGroup::createRequest((uint64_t)&v84, (uint64_t)v62, v22);
    v24 = v62[0];
    v62[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x195F29FC0);
    }
    IdentifierInternal = (Inspector::IdentifiersFactory *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    *((_QWORD *)this + 23) = IdentifierInternal;
    v26 = *(_QWORD *)(*((_QWORD *)this + 18) + 8);
    v27 = *(_DWORD **)(*(_QWORD *)(v26 + 280) + 88);
    if (v27)
      ++v27[6];
    v62[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v62);
    v69 = 0;
    v70 = 0;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0;
    v72 = vdupq_n_s64(0x7FF8000000000000uLL);
    v73 = v72;
    v74 = 0;
    v75 = 0;
    v77 = v72;
    v76 = 0x8000000000000000;
    v78 = 0x7FF8000000000000;
    v79 &= 0xF0u;
    v80 &= 0xC000u;
    v81 = v81 & 0xF8 | 2;
    v82 = 0;
    v83 = 0;
    v71 = v71 & 0xC0 | 5;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v54 = *(_QWORD *)(v26 + 24);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 8);
        if (v55)
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v55 + 80) + 8);
          v57 = *(_QWORD *)(v56 + 192);
          if (v57)
            WebCore::InspectorNetworkAgent::willSendRequest(v57, IdentifierInternal, (uint64_t)v27, (WebCore::ResourceRequest *)&v84, (WebCore::ResourceLoader *)v62, 0, 0);
          v58 = *(Inspector::InspectorDebuggerAgent ***)(v56 + 144);
          if (v58 && (v87 & 0xFE) != 2)
          {
            if ((v91 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
              v91 |= 1u;
            }
            WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v58, (const WTF::String *)&v84);
          }
        }
      }
    }
    v30 = v82;
    v82 = 0;
    if (v30)
      CFRelease(v30);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v62, v28);
    if (v27)
    {
      if (v27[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
      else
        --v27[6];
    }
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 18) + 8) + 280) + 88);
    if ((v91 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v84);
      v91 |= 1u;
    }
    v32 = v84;
    if (v84)
      *(_DWORD *)v84 += 2;
    v33 = *((_QWORD *)this + 16);
    v34 = *(unsigned int *)(v33 - 4);
    v35 = v33 + 16 * v34;
    v59 = v86;
    v60 = v85;
    if (*(_DWORD *)(v33 - 12))
    {
      if ((_DWORD)v34)
      {
        v36 = 16 * v34;
        while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
        {
          v33 += 16;
          v36 -= 16;
          if (!v36)
            goto LABEL_54;
        }
      }
    }
    else
    {
LABEL_54:
      v33 = v35;
    }
    v37 = *(_DWORD *)(v33 + 8);
    v38 = *(_QWORD **)(v31 + 72);
    v39 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v39 = &off_1E33F7E78;
    *(_QWORD *)(v39 + 8) = this;
    *(_QWORD *)(v39 + 16) = v32;
    *(_OWORD *)(v39 + 24) = v60;
    *(_OWORD *)(v39 + 40) = v59;
    *(_DWORD *)(v39 + 56) = v37;
    v61 = v39;
    WebCore::ApplicationCacheResourceLoader::create(v37, v38, (uint64_t)&v84, &v61, (uint64_t *)v62);
    v41 = v62[0];
    v62[0] = 0;
    v42 = (WebCore::ApplicationCacheResourceLoader *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v41;
    if (v42)
    {
      if (*((_DWORD *)v42 + 4) == 1)
      {
        WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v42, v40);
        WTF::fastFree(v49, v50);
        v51 = v62[0];
        v62[0] = 0;
        if (v51)
        {
          if (*((_DWORD *)v51 + 4) == 1)
          {
            WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v51, v40);
            WTF::fastFree(v52, v53);
          }
          else
          {
            --*((_DWORD *)v51 + 4);
          }
        }
      }
      else
      {
        --*((_DWORD *)v42 + 4);
        v62[0] = 0;
      }
    }
    v43 = v61;
    v61 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = cf;
    cf = 0;
    if (v44)
      CFRelease(v44);
    v45 = v90;
    v90 = 0;
    if (v45)
      WTF::RefCounted<WebCore::FormData>::deref(v45, v40);
    v46 = v89;
    v89 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v40);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v88;
    v88 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v40);
      else
        *(_DWORD *)v47 -= 2;
    }
    WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v84, (WTF::StringImpl *)v40);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v48);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    *((_DWORD *)this + 40) = 3;
    WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)this, a2);
  }
}

uint64_t WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = (uint64_t *)result;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      result = *(_QWORD *)(v3 + 16 * v10);
      if (result != -1)
      {
        if (!result)
        {
          v12 = *v5;
          if (!*v5)
            return result;
          v13 = *(unsigned int *)(v12 - 4);
          v11 = (uint64_t *)(v12 + 16 * v13);
          goto LABEL_12;
        }
        result = WTF::equal((WTF *)result, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v11 = (uint64_t *)(v3 + 16 * v10);
    v12 = *v5;
    if (!*v5)
      goto LABEL_13;
    v13 = *(unsigned int *)(v12 - 4);
LABEL_12:
    v12 += 16 * v13;
    if ((uint64_t *)v12 == v11)
      return result;
LABEL_13:
    if ((uint64_t *)v12 != v11)
    {
      result = *v11;
      *v11 = -1;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++*(_DWORD *)(*v5 - 16);
      v14 = *v5;
      if (*v5)
        v15 = *(_DWORD *)(v14 - 12) - 1;
      else
        v15 = -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v5;
      if (*v5)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v18 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t *WebCore::ApplicationCacheGroup::deliverDelayedMainResources(uint64_t *this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::DocumentLoader *v19;

  v2 = this;
  v3 = this[13];
  if (!v3)
    return (uint64_t *)WebCore::ApplicationCacheGroup::checkIfLoadIsComplete((uint64_t)this, a2);
  v4 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v4)
    return (uint64_t *)WebCore::ApplicationCacheGroup::checkIfLoadIsComplete((uint64_t)this, a2);
  if (v4 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    v7 = (WTF *)v5;
    v8 = v2[13];
    if (!v8 || !*(_DWORD *)(v8 - 12))
      goto LABEL_27;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      v11 = (uint64_t *)v2[13];
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        ++v11;
        v10 -= 8;
        if (!v10)
          goto LABEL_27;
      }
    }
    else
    {
      v11 = (uint64_t *)v2[13];
    }
    v12 = (uint64_t *)(v8 + 8 * v9);
    if (v11 == v12)
      goto LABEL_27;
    v13 = 0;
    v14 = *v11;
    v15 = 1;
LABEL_15:
    v16 = v15;
    *(_QWORD *)(v5 + 8 * v13++) = v14;
    while (++v11 != v12)
    {
      v14 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        ++v15;
        if (v11 != v12)
          goto LABEL_15;
        break;
      }
    }
    if (v13)
    {
      v17 = 8 * v16;
      v18 = v5;
      do
      {
        v19 = *(WebCore::DocumentLoader **)v18;
        if (!*(_BYTE *)(*(_QWORD *)v18 + 3548))
        {
          if (*((_BYTE *)v19 + 1588))
            WebCore::ApplicationCacheGroup::failedLoadingMainResource(v2, v19);
          else
            WebCore::ApplicationCacheGroup::finishedLoadingMainResource((WebCore::ApplicationCache **)v2, v19);
        }
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
LABEL_27:
      WebCore::ApplicationCacheGroup::checkIfLoadIsComplete((uint64_t)v2, v6);
    }
    return (uint64_t *)WTF::fastFree(v7, v19);
  }
  return this;
}

WTF *WebCore::ApplicationCacheGroup::addEntry(WebCore::ApplicationCacheGroup *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  WTF *result;
  uint64_t v14;
  const WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  int j;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  v3 = (int)a3;
  v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 16);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = *(WTF **)(v6 + 16 * v11);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
          goto LABEL_11;
        result = (WTF *)WTF::equal(v12, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
    if (v14)
    {
LABEL_13:
      v16 = (_DWORD *)(v14 + 328);
      goto LABEL_39;
    }
  }
LABEL_11:
  result = (WTF *)WTF::equal(*(WTF **)(*((_QWORD *)this + 24) + 16), *a2, a3);
  if ((_DWORD)result)
  {
    v14 = *((_QWORD *)this + 24);
    goto LABEL_13;
  }
  v19 = *((_QWORD *)this + 16);
  v17 = (uint64_t *)((char *)this + 128);
  v18 = v19;
  if (v19
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v17, 0), (v18 = *v17) != 0))
  {
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = *((_DWORD *)*a2 + 4);
  if (v21 < 0x100)
    v22 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v22 = v21 >> 8;
  v23 = 0;
  for (j = 1; ; ++j)
  {
    v25 = v22 & v20;
    v26 = v18 + 16 * (v22 & v20);
    result = *(WTF **)v26;
    if (*(_QWORD *)v26 == -1)
    {
      v23 = (_QWORD *)(v18 + 16 * v25);
      goto LABEL_26;
    }
    if (!result)
      break;
    result = (WTF *)WTF::equal(result, *a2, v15);
    if ((result & 1) != 0)
      goto LABEL_38;
LABEL_26:
    v22 = j + v25;
  }
  if (v23)
  {
    result = 0;
    *v23 = 0;
    v23[1] = 0;
    --*(_DWORD *)(*v17 - 16);
    v26 = (uint64_t)v23;
  }
  v27 = *a2;
  if (*a2)
    *(_DWORD *)v27 += 2;
  *(_QWORD *)v26 = v27;
  *(_DWORD *)(v26 + 8) = v3;
  v28 = *v17;
  if (*v17)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v17;
  if (*v17)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
    {
LABEL_37:
      result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v17, (WTF::StringImpl **)v26);
      v26 = (uint64_t)result;
    }
  }
  else if (3 * v33 <= 4 * v32)
  {
    goto LABEL_37;
  }
LABEL_38:
  v16 = (_DWORD *)(v26 + 8);
LABEL_39:
  *v16 |= v3;
  return result;
}

uint64_t WebCore::ApplicationCacheGroup::postListenerTask(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v6 = result;
  if (a4)
  {
    v7 = *(unsigned int *)(a4 - 4);
    v8 = a4 + 8 * v7;
    if (*(_DWORD *)(a4 - 12))
    {
      v9 = a4;
      if ((_DWORD)v7)
      {
        v10 = 8 * v7;
        v9 = a4;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          v10 -= 8;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v9 = a4 + 8 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = a4 + 8 * v7;
  if (a4)
  {
LABEL_8:
    v11 = a4 + 8 * *(unsigned int *)(a4 - 4);
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  while (v9 != v11)
  {
    v12 = *(_DWORD **)v9;
    v13 = *(_QWORD *)(*(_QWORD *)v9 + 16);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 296);
        v12[6] += 2;
        v16 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v16 = &off_1E33F7EA0;
        *(_QWORD *)(v16 + 8) = v12;
        *(_QWORD *)(v16 + 16) = v6;
        *(_DWORD *)(v16 + 24) = a2;
        *(_DWORD *)(v16 + 28) = a3;
        v20 = *(_OWORD *)(v15 + 416);
        v21 = *(_OWORD *)(v15 + 432);
        v17 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v17 = &off_1E33A3A20;
        *(_OWORD *)(v17 + 16) = v20;
        *(_OWORD *)(v17 + 32) = v21;
        *(_QWORD *)(v17 + 48) = v16;
        *(_BYTE *)(v17 + 56) = 0;
        v19 = v17;
        WTF::callOnMainThread();
        result = v19;
        if (v19)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (v12[6] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
        else
          --v12[6];
      }
    }
    v18 = v9 + 8;
    v9 = v8;
    if (v18 != v8)
    {
      v9 = v18;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ApplicationCacheGroup::clearStorageID(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;

  *(_DWORD *)(this + 152) = 0;
  v1 = *(uint64_t **)(this + 88);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &v1[v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[v2];
    goto LABEL_10;
  }
  v4 = *(uint64_t **)(this + 88);
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    v4 = *(uint64_t **)(this + 88);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += *((unsigned int *)v1 - 1);
  while (v4 != v1)
  {
    v6 = *v4;
    *(_DWORD *)(v6 + 80) = 0;
    v7 = *(_QWORD **)(v6 + 16);
    if (v7)
    {
      v8 = *((unsigned int *)v7 - 1);
      v9 = &v7[2 * v8];
      if (*((_DWORD *)v7 - 3))
      {
        v10 = v7;
        if ((_DWORD)v8)
        {
          v11 = 16 * v8;
          v10 = v7;
          while ((unint64_t)(*v10 + 1) <= 1)
          {
            v10 += 2;
            v11 -= 16;
            if (!v11)
            {
              v10 = v9;
              goto LABEL_24;
            }
          }
        }
        goto LABEL_24;
      }
      v10 = &v7[2 * v8];
    }
    else
    {
      v10 = 0;
      v8 = 0;
    }
    v9 = &v7[2 * v8];
LABEL_24:
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
    while (v10 != v7)
    {
      *(_DWORD *)(v10[1] + 332) = 0;
      v12 = v10 + 2;
      v10 = v9;
      if (v12 != v9)
      {
        v10 = v12;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    v13 = v4 + 1;
    v4 = v3;
    if (v13 != v3)
    {
      v4 = v13;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        if (++v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SubresourceLoader::iOSOriginalRequest(WebCore::SubresourceLoader *this)
{
  return (uint64_t)this + 1128;
}

uint64_t WebCore::WorkerThreadableLoader::refThreadableLoader(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

_DWORD *WebCore::WorkerThreadableLoader::derefThreadableLoader(_DWORD *this)
{
  if (this[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
  --this[2];
  return this;
}

unint64_t WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *(_BYTE *)v10 = *(_BYTE *)v12;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v10 + 1) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)>,WebCore::ResourceRequest &)::{lambda(WebCore::ResourceRequest &)#1},void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  uint64_t v5;
  _DWORD *v6;
  WebCore::ResourceResponseBase *v8;

  *a1 = off_1E33F7AC8;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 4);
  v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    v8 = v3;
    CFRelease(v4);
    v3 = v8;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)>,WebCore::ResourceRequest &)::{lambda(WebCore::ResourceRequest &)#1},void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  _DWORD *v7;
  WebCore::ResourceResponseBase *v9;

  *a1 = off_1E33F7AC8;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 4);
  v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    v9 = v3;
    CFRelease(v4);
    v3 = v9;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)>,WebCore::ResourceRequest &)::{lambda(WebCore::ResourceRequest &)#1},void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  const WTF::StringImpl *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::DocumentLoader *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  kdebug_trace();
  if (*(_BYTE *)(v4 + 752))
  {
    v6 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD **)(v4 + 32);
      if (v7)
      {
        v8 = v7[3];
        if (v8)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (v8)
          {
            if (*(_BYTE *)(v8 + 40))
              v8 = *(_QWORD *)(v8 + 32);
            else
              v8 = 0;
          }
        }
        v9 = v7[4];
        v7 = (_QWORD *)v7[35];
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
      v18 = *(_QWORD *)(v4 + 744);
      v25 = 134219008;
      v26 = v4;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v9;
      v31 = 2048;
      v32 = v7;
      v33 = 2048;
      v34 = v18;
      v19 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal"
            ": reached terminal state; calling completion handler";
LABEL_34:
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v25, 0x34u);
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      v24 = *((_BYTE *)a2 + 184) | 1;
      *((_BYTE *)a2 + 184) = v24;
      if ((v24 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(a2);
        *((_BYTE *)a2 + 184) |= 1u;
      }
    }
    if (*(_QWORD *)a2)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 1328) + 8) + 556) & 0x1F) == 0
        && (*(_BYTE *)(a1 + 170) & 1) == 0)
      {
        v10 = *(WebCore::DocumentLoader **)(v4 + 40);
        if (v10)
        {
          ++*((_DWORD *)v10 + 6);
          WebCore::DocumentLoader::setRequest(v10, a2, v5);
          if (*((_DWORD *)v10 + 6) == 1)
            (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v10 + 24))(v10);
          else
            --*((_DWORD *)v10 + 6);
        }
        else
        {
          WebCore::DocumentLoader::setRequest(0, a2, v5);
        }
      }
      v6 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD **)(v4 + 32);
        if (v11)
        {
          v12 = v11[3];
          if (v12)
          {
            v12 = *(_QWORD *)(v12 + 8);
            if (v12)
            {
              if (*(_BYTE *)(v12 + 40))
                v12 = *(_QWORD *)(v12 + 32);
              else
                v12 = 0;
            }
          }
          v13 = v11[4];
          v11 = (_QWORD *)v11[35];
        }
        else
        {
          v13 = 0;
          v12 = 0;
        }
        v20 = *(_QWORD *)(v4 + 744);
        v25 = 134219008;
        v26 = v4;
        v27 = 2048;
        v28 = v12;
        v29 = 2048;
        v30 = v13;
        v31 = 2048;
        v32 = v11;
        v33 = 2048;
        v34 = v20;
        v19 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestIntern"
              "al: resource load finished; calling completion handler";
        goto LABEL_34;
      }
    }
    else
    {
      v14 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_QWORD **)(v4 + 32);
        if (v15)
        {
          v16 = v15[3];
          if (v16)
          {
            v16 = *(_QWORD *)(v16 + 8);
            if (v16)
            {
              if (*(_BYTE *)(v16 + 40))
                v16 = *(_QWORD *)(v16 + 32);
              else
                v16 = 0;
            }
          }
          v17 = v15[4];
          v15 = (_QWORD *)v15[35];
        }
        else
        {
          v17 = 0;
          v16 = 0;
        }
        v21 = *(_QWORD *)(v4 + 744);
        v25 = 134219008;
        v26 = v4;
        v27 = 2048;
        v28 = v16;
        v29 = 2048;
        v30 = v17;
        v31 = 2048;
        v32 = v15;
        v33 = 2048;
        v34 = v21;
        _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because request is NULL (2)", (uint8_t *)&v25, 0x34u);
      }
      WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)v4);
    }
  }
  v22 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v22 + 16))(v22, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

BOOL WTF::equalLettersIgnoringASCIICaseWithLength<unsigned char>(_BOOL8 result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    if (a2 > a4)
    {
      v5 = 0;
      v7 = 0;
      while (a2 != v7 && a4 != v7)
      {
        if ((*(unsigned __int8 *)(result + v7) | 0x20) == *(unsigned __int8 *)(a3 + v7))
        {
          v5 = ++v7 >= a5;
          if (a5 != v7)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if ((*(unsigned __int8 *)(result + v6) | 0x20) == *(unsigned __int8 *)(a3 + v6))
        {
          v5 = ++v6 >= a5;
          if (a5 != v6)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

void WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(WebCore::HTMLMetaCharsetParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;

  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 383, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)*((_QWORD *)this + 371);
  if ((WebCore::HTMLMetaCharsetParser *)((char *)this + 2984) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 371) = 0;
    *((_DWORD *)this + 744) = 0;
    WTF::fastFree(v6, v3);
  }
  v8 = (WTF *)*((_QWORD *)this + 365);
  if ((WebCore::HTMLMetaCharsetParser *)((char *)this + 2936) != v8 && v8)
  {
    *((_QWORD *)this + 365) = 0;
    *((_DWORD *)this + 732) = 0;
    WTF::fastFree(v8, v3);
  }
  v9 = (WTF *)*((_QWORD *)this + 355);
  if ((WebCore::HTMLMetaCharsetParser *)((char *)this + 2856) != v9 && v9)
  {
    *((_QWORD *)this + 355) = 0;
    *((_DWORD *)this + 712) = 0;
    WTF::fastFree(v9, v3);
  }
  WebCore::HTMLToken::~HTMLToken((WebCore::HTMLMetaCharsetParser *)((char *)this + 8), v3);
}

BOOL WebCore::bytesEqual<char,char,char,char,char,char,char,char>(_BYTE *a1)
{
  return *a1 == 99
      && a1[1] == 104
      && a1[2] == 97
      && a1[3] == 114
      && a1[4] == 115
      && a1[5] == 101
      && a1[6] == 116
      && a1[7] == 32
      && a1[8] == 34;
}

uint64_t WebCore::find(WebCore *this, const unsigned __int8 *a2, unint64_t a3, const char *a4)
{
  uint64_t result;
  char *v6;

  if ((unint64_t)a2 < 8)
    return 0xFFFFFFFFLL;
  result = 0;
  v6 = (char *)this + 3;
  while (v6[result - 3] != 101
       || v6[result - 2] != 110
       || v6[result - 1] != 99
       || v6[result] != 111
       || v6[result + 1] != 100
       || v6[result + 2] != 105
       || v6[result + 3] != 110
       || v6[result + 4] != 103)
  {
    if (++result > (unint64_t)(a2 - 8))
      return 0xFFFFFFFFLL;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_15CachedTextTrackEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_15CachedTextTrackEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ChromeClientCallbackTimer::~ChromeClientCallbackTimer(WebCore::ChromeClientCallbackTimer *this)
{
  WTF *v1;
  void *v2;

  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ChromeClientCallbackTimer::fired(WebCore::ChromeClientCallbackTimer *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SQLiteDatabase *v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  void *v15;
  WTF *v16;
  void *v17;

  v3 = *((_QWORD *)this + 6);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8) + 24) + 8);
  v5 = *(_QWORD *)(v4 + 896);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 16);
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 72);
    v8 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(v5 + 24), a2);
    if (v9)
    {
      v10 = WebCore::ApplicationCacheStorage::flatFileAreaSize((WTF::StringImpl **)v5) + v8;
      v11 = *(_QWORD *)(v5 + 32);
      v12 = (WebCore::SQLiteDatabase *)(v5 + 56);
      if (v11 >= v10)
        v13 = v11 - v10 + WebCore::SQLiteDatabase::freeSpaceSize(v12);
      else
        v13 = WebCore::SQLiteDatabase::freeSpaceSize(v12);
      v14 = v7 - v13;
    }
    else
    {
      v14 = 0;
    }
    (*(void (**)(uint64_t, sqlite3_int64))(*(_QWORD *)v6 + 592))(v6, v14);
    *(_BYTE *)(v3 + 164) = 1;
    WebCore::ApplicationCacheGroup::checkIfLoadIsComplete(v3, v15);
  }
  WebCore::TimerBase::~TimerBase(this);
  return WTF::fastFree(v16, v17);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, unint64_t a2, _BYTE *__src, unsigned int a4, uint64_t a5)
{
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BYTE *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int128 v25;
  char v26;
  _BYTE v27[25];
  uint64_t v28;

  v8 = a2;
  v9 = __dst;
  v28 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  if ((a2 & 0x8000000000000000) != 0)
  {
    v15 = -(uint64_t)a2;
    do
    {
      v27[v10-- + 24] = (v15 % 0xA) | 0x30;
      v12 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v12);
    v16 = v10 + 24;
    v13 = &v27[v10 + 24];
    *v13 = 45;
    if (v10 + 26 > 26)
      goto LABEL_13;
    if (v16 <= 24)
      v16 = 24;
    v14 = v16 - v10 - 23;
  }
  else
  {
    v11 = a2;
    do
    {
      v27[v10-- + 24] = (v11 % 0xA) | 0x30;
      v12 = v11 > 9;
      v11 /= 0xAuLL;
    }
    while (v12);
    if (v10 + 26 > 25)
      goto LABEL_13;
    v13 = &v27[v10 + 25];
    v14 = -v10;
  }
  __dst = memcpy(__dst, v13, v14);
LABEL_13:
  if ((v8 & 0x8000000000000000) != 0)
  {
    v18 = -(uint64_t)v8;
    v17 = 1;
    do
    {
      ++v17;
      v19 = v18 >= 0xA;
      v18 /= 0xAuLL;
    }
    while (v19);
  }
  else
  {
    v17 = 0;
    do
    {
      ++v17;
      v12 = v8 > 9;
      v8 /= 0xAuLL;
    }
    while (v12);
  }
  v20 = &v9[v17];
  if (!a4)
  {
LABEL_22:
    if (!a5)
      return __dst;
    goto LABEL_23;
  }
  if (a4 != 1)
  {
    __dst = memcpy(v20, __src, a4);
    goto LABEL_22;
  }
  *v20 = *__src;
  if (!a5)
    return __dst;
LABEL_23:
  __dst = &v20[a4];
  v21 = *(_BYTE **)(a5 + 8);
  v22 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    if ((_DWORD)v22)
    {
      if ((_DWORD)v22 == 1)
        *__dst = *v21;
      else
        return memcpy(__dst, v21, v22);
    }
  }
  else
  {
    v23 = &__dst[v22];
    if (v22 >= 0x10)
    {
      v24 = &__dst[v22 & 0xFFFFFFF0];
      do
      {
        v25 = (unsigned __int128)vld2q_s8(v21);
        v21 += 32;
        *(_OWORD *)__dst = v25;
        __dst += 16;
      }
      while (__dst != v24);
      __dst = v24;
    }
    while (__dst != v23)
    {
      v26 = *v21;
      v21 += 2;
      *__dst++ = v26;
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *a1, unint64_t a2, int8x16_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  char *result;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  _BYTE v38[25];
  uint64_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  v39 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x8000000000000000) != 0)
  {
    v10 = -(uint64_t)a2;
    v11 = 24;
    do
    {
      v38[v11--] = (v10 % 0xA) | 0x30;
      v7 = v10 > 9;
      v10 /= 0xAuLL;
    }
    while (v7);
    v38[v11] = 45;
    if (v11 + 2 <= 26)
    {
      v12 = a1;
      do
      {
        *v12++ = v38[v11];
        v7 = v11++ < 24;
      }
      while (v7);
    }
  }
  else
  {
    v5 = 0;
    v6 = a2;
    do
    {
      v38[v5-- + 24] = (v6 % 0xA) | 0x30;
      v7 = v6 > 9;
      v6 /= 0xAuLL;
    }
    while (v7);
    if (v5 + 26 <= 25)
    {
      v8 = a1;
      do
      {
        *v8++ = *((unsigned __int8 *)&v39 + v5);
        v9 = __CFADD__(v5++, 1);
      }
      while (!v9);
    }
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    v14 = -(uint64_t)a2;
    v13 = 1;
    do
    {
      ++v13;
      v9 = v14 >= 0xA;
      v14 /= 0xAuLL;
    }
    while (v9);
  }
  else
  {
    v13 = 0;
    do
    {
      ++v13;
      v7 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v7);
  }
  v15 = (char *)&a1[v13];
  result = &v15[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v17 = &v15[2 * (a4 & 0xFFFFFFC0)];
    v18 = 0uLL;
    do
    {
      v40.val[0] = *a3;
      v19 = a3[1];
      v42.val[0] = a3[2];
      v20 = a3[3];
      a3 += 4;
      v21 = v20;
      v42.val[1] = 0uLL;
      v44.val[0] = v19;
      v40.val[1] = 0uLL;
      v22 = v15;
      vst2q_s8(v22, v40);
      v22 += 32;
      v44.val[1] = 0uLL;
      vst2q_s8(v22, v44);
      v23 = v15 + 64;
      vst2q_s8(v23, v42);
      v24 = v15 + 96;
      vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
      v15 += 128;
    }
    while (v15 != v17);
    v15 = v17;
  }
  while (v15 != result)
  {
    v25 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v15 = v25;
    v15 += 2;
  }
  if (a5)
  {
    v26 = *(int8x16_t **)(a5 + 8);
    v27 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v28 = &result[2 * v27];
      if (v27 >= 0x40)
      {
        v29 = &result[2 * (v27 & 0xFFFFFFC0)];
        v30 = 0uLL;
        do
        {
          v41.val[0] = *v26;
          v31 = v26[1];
          v43.val[0] = v26[2];
          v32 = v26[3];
          v26 += 4;
          v33 = v32;
          v43.val[1] = 0uLL;
          v45.val[0] = v31;
          v41.val[1] = 0uLL;
          v34 = result;
          vst2q_s8(v34, v41);
          v34 += 32;
          v45.val[1] = 0uLL;
          vst2q_s8(v34, v45);
          v35 = result + 64;
          vst2q_s8(v35, v43);
          v36 = result + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
          result += 128;
        }
        while (result != v29);
        result = v29;
      }
      while (result != v28)
      {
        v37 = v26->u8[0];
        v26 = (int8x16_t *)((char *)v26 + 1);
        *(_WORD *)result = v37;
        result += 2;
      }
    }
    else if ((_DWORD)v27 == 1)
    {
      *(_WORD *)result = v26->i16[0];
    }
    else if ((_DWORD)v27)
    {
      return (char *)memcpy(result, v26, 2 * v27);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::create(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WebCore::SubresourceLoader>,WTF::DefaultRefDerefTraits<WebCore::SubresourceLoader>> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33F7B58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::create(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WebCore::SubresourceLoader>,WTF::DefaultRefDerefTraits<WebCore::SubresourceLoader>> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F7B58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::create(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WebCore::SubresourceLoader>,WTF::DefaultRefDerefTraits<WebCore::SubresourceLoader>> &&)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  _DWORD *result;
  _DWORD *v4;

  if ((a2 & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v4 = *(_DWORD **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v4 = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v2 + 16))(v2, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::startLoading(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33F7B80;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::startLoading(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33F7B80;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::startLoading(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  CFTypeRef v9;
  WebCore::FormData *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[7];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::FormData *v24;
  char v25;
  char v26;
  char v27;
  CFTypeRef cf;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (a2)
  {
    v2 = (WTF::StringImpl *)*((_QWORD *)result + 1);
    v29 = 0;
    WTF::URL::invalidate((WTF::URL *)&v29);
    v3 = v29;
    if (v29)
      *(_DWORD *)v29 += 2;
    v13 = v3;
    v14 = v30;
    v15 = v31;
    v16[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v16);
    v16[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16[6] = v32;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0x10000;
    v5 = v21 & 0x80 | 4;
    v21 = v5;
    v22 = 0;
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v6 += 2;
      v5 = v21;
    }
    v23 = v6;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = v27 & 0xE0 | 5;
    v21 = v5 | 2;
    v7 = v29;
    v29 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    cf = 0;
    WebCore::ResourceRequest::operator=((uint64_t)v2 + 1128, (uint64_t)&v13);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v24;
    v24 = 0;
    if (v10)
      WTF::RefCounted<WebCore::FormData>::deref(v10, v8);
    v11 = v23;
    v23 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v13, (WTF::StringImpl *)v8);
    return WebCore::ResourceLoader::start(v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33F7BA8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F7BA8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 40);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 24);
      *(_DWORD *)(v3 + 1336) = 1;
      if (*(_BYTE *)(v4 + 3539) && (*(_BYTE *)(v3 + 1092) & 4) == 0)
      {
        v5 = *(_QWORD *)(v3 + 744);
        v23 = v3;
        v24 = v5;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::add<WebCore::SubresourceLoader *>((uint64_t *)(v4 + 88), &v24, &v23, (uint64_t)buf);
      }
      v6 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v3 + 1328) + 8) + 512);
      if (v6)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      v8 = *(_QWORD *)(v3 + 1368);
      *(_QWORD *)(v3 + 1368) = v6;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v16 = *(WTF::StringImpl **)(v8 + 48);
          *(_QWORD *)(v8 + 48) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = *(WTF::StringImpl **)(v8 + 40);
          *(_QWORD *)(v8 + 40) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, a2);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *(unsigned int *)(v8 + 32);
          if ((_DWORD)v18 != -1)
            ((void (*)(uint8_t *, uint64_t))off_1E33F7B38[v18])(buf, v8 + 8);
          *(_DWORD *)(v8 + 32) = -1;
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 1);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (*(_DWORD *)(v4 + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    else
    {
      v14 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD **)(v3 + 32);
        if (v19)
        {
          v21 = v19[3];
          if (v21)
          {
            v21 = *(_QWORD *)(v21 + 8);
            if (v21)
            {
              if (*(_BYTE *)(v21 + 40))
                v21 = *(_QWORD *)(v21 + 32);
              else
                v21 = 0;
            }
          }
          v20 = v19[4];
          v19 = (_QWORD *)v19[35];
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
        v22 = *(_QWORD *)(v3 + 744);
        *(_DWORD *)buf = 134219008;
        v26 = v3;
        v27 = 2048;
        v28 = v21;
        v29 = 2048;
        v30 = v20;
        v31 = 2048;
        v32 = v19;
        v33 = 2048;
        v34 = v22;
        _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::init: resource load canceled because document loader is null", buf, 0x34u);
      }
      v15 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_1,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  WebCore::ResourceResponseBase *v9;

  *a1 = off_1E33F7BD0;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 6);
  v4 = (const void *)a1[36];
  a1[36] = 0;
  if (v4)
  {
    v9 = v3;
    CFRelease(v4);
    v3 = v9;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_1,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WebCore::ResourceResponseBase *v10;

  *a1 = off_1E33F7BD0;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 6);
  v4 = (const void *)a1[36];
  a1[36] = 0;
  if (v4)
  {
    v10 = v3;
    CFRelease(v4);
    v3 = v10;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  return WTF::fastFree((WTF *)a1, v5);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_1,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD **)(v4 + 32);
    if (v6)
    {
      v7 = v6[3];
      if (v7)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 40))
            v7 = *(_QWORD *)(v7 + 32);
          else
            v7 = 0;
        }
      }
      v8 = v6[4];
      v6 = (_QWORD *)v6[35];
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v9 = *(_QWORD *)(v4 + 744);
    v11 = 134219008;
    v12 = v4;
    v13 = 2048;
    v14 = v7;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v6;
    v19 = 2048;
    v20 = v9;
    _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource done notifying clients", (uint8_t *)&v11, 0x34u);
  }
  return WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()(a1 + 32, (uint64_t *)(a1 + 24), a2);
}

