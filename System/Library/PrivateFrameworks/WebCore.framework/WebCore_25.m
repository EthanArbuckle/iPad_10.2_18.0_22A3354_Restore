uint64_t WebCore::JSDOMCacheStorage::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMException>(WebCore::JSDOMException *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSDOMException::s_info + ~((_QWORD)&WebCore::JSDOMException::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMException::s_info + ~((_QWORD)&WebCore::JSDOMException::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSDOMException::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSDOMException::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSDOMException::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSDOMException::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSDOMException::s_info);
}

uint64_t WebCore::JSDOMFormData::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMImplementation>(WebCore::JSDOMImplementation *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMImplementation::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMImplementation::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMImplementation::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMImplementation::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3496);
  *(_QWORD *)(a1 + 3496) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSDOMImplementation::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMImplementation *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSDOMImplementation *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSDOMImplementation>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::DOMImplementation,WebCore::JSDOMImplementation>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE3350C8 & 1) == 0)
  {
    qword_1EE3350C0 = (uint64_t)&off_1E3259C28;
    byte_1EE3350C8 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE3350C0);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE3350C0, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSDOMImplementation>(WebCore::JSDOMImplementation *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSDOMImplementation::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::getCachedWrapper<WebCore::DOMImplementation>(uint64_t a1, _QWORD *a2)
{
  _BYTE *v2;
  _QWORD *v4;

  if (*(_DWORD *)(a1 + 48))
  {
    v4 = a2;
    return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 32), &v4);
  }
  else
  {
    v2 = (_BYTE *)*a2;
    if (!*a2 || (v2[8] & 3) != 0)
      return 0;
    else
      return *(_QWORD *)v2;
  }
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLUnrestrictedDouble>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t this)
{
  JSC::VM *v6;
  unsigned int v7;
  JSC::JSObject *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;
  void *v17;
  JSC::VM *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF *v26;
  unint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF *v30;
  unint64_t v31;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((this & 0xFFFE000000000002) != 0)
  {
    v30 = (WTF *)this;
LABEL_3:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v30, a2);
    goto LABEL_13;
  }
  v7 = *(unsigned __int8 *)(this + 5);
  if (v7 < 0x17)
  {
LABEL_8:
    v30 = (WTF *)this;
    if (v7 != 2)
      goto LABEL_3;
    v9 = *(WTF::StringImpl **)(this + 8);
    if ((v9 & 1) != 0)
    {
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
      if (!v9)
        goto LABEL_12;
    }
    else if (!v9)
    {
LABEL_12:
      v29 = v9;
LABEL_13:
      if (*((_DWORD *)v6 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
        v10 = v29;
        if (hasExceptionsAfterHandlingTraps)
        {
          LODWORD(v27) = 1;
          v29 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v24);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = 1;
          v12 = 1;
          goto LABEL_16;
        }
      }
      else
      {
        v10 = v29;
      }
      v11 = 0;
      v12 = 0;
      LODWORD(v27) = 0;
      v26 = 0;
      *(_QWORD *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_16:
      *(_DWORD *)(a1 + 32) = v11;
      return ((uint64_t (*)(WTF **, WTF **))off_1E325A258[v12])(&v30, &v26);
    }
    *(_DWORD *)v9 += 2;
    goto LABEL_12;
  }
  v8 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)this, (JSC::JSObject *)this);
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 32) = 1;
      return result;
    }
  }
  if (v8 == (JSC::JSObject *)10)
  {
    v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v7 = *(unsigned __int8 *)(this + 5);
    goto LABEL_8;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v29 = v14;
  if (*(_BYTE *)(this + 5) == 36)
  {
    if ((JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this) & 1) != 0)
    {
      v15 = *(_BYTE *)(this + 4);
      if ((v15 & 0xE) != 0)
      {
        v16 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        v30 = 0;
        v31 = 0;
        if ((_DWORD)v16)
        {
          if (v16 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v16)), !v26))
          {
            JSC::throwTypeError();
            goto LABEL_43;
          }
          LODWORD(v31) = v16;
          v30 = v26;
          v15 = *(_BYTE *)(this + 4);
        }
      }
      else
      {
        LODWORD(v16) = 0;
        v30 = 0;
        v31 = 0;
      }
      if ((v15 & 0xC) == 4)
      {
        WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnrestrictedDouble>>::convertArray(this, v16, v15 & 0xE, (uint64_t)&v30, (uint64_t)&v26);
        goto LABEL_35;
      }
      v18 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v26 = (WTF *)&v30;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, this, v8, (uint64_t *)&v26);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = 0;
        v26 = v30;
        v20 = v31;
        v21 = HIDWORD(v31);
        v30 = 0;
        v31 = 0;
        v27 = __PAIR64__(v21, v20);
LABEL_34:
        v28 = v19;
LABEL_35:
        result = (uint64_t)v30;
        if (!v30)
          goto LABEL_37;
        goto LABEL_36;
      }
LABEL_43:
      v19 = 1;
      goto LABEL_34;
    }
    v30 = 0;
    v31 = 0;
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v26 = (WTF *)&v30;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, this, v8, (uint64_t *)&v26);
  if (!*((_DWORD *)v14 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v14), (result & 1) == 0))
  {
    v26 = v30;
    v27 = v31;
    v28 = 0;
    goto LABEL_37;
  }
  result = (uint64_t)v30;
  v28 = 1;
  if (v30)
  {
LABEL_36:
    v30 = 0;
    LODWORD(v31) = 0;
    result = WTF::fastFree((WTF *)result, v17);
  }
LABEL_37:
  v22 = v28;
  if (!v28)
  {
    *(_QWORD *)(a1 + 8) = v26;
    v23 = v27;
    v26 = 0;
    v27 = 0;
    *(_QWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    return ((uint64_t (*)(WTF **, WTF **))off_1E3269618[v22])(&v30, &v26);
  }
  *(_DWORD *)(a1 + 32) = 1;
  if ((_DWORD)v22 != -1)
    return ((uint64_t (*)(WTF **, WTF **))off_1E3269618[v22])(&v30, &v26);
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  double v16;
  uint64_t v17;
  double v18;
  unint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  JSC::VM *v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  double v30;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      result = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      v13 = result;
      if (!result)
      {
        result = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
        v13 = result;
      }
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v14 = *a4;
      v30 = *(double *)&v13;
      v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 >= 0xFFFE000000000000)
      {
        v16 = (double)(int)v13;
      }
      else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, a1);
        v16 = v18;
      }
      else
      {
        *(_QWORD *)&v16 = v13 - 0x2000000000000;
      }
      if (!*((_DWORD *)v15 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v15), !(_DWORD)result))
      {
        v30 = v16;
        v17 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v17 == *(_DWORD *)(v14 + 8))
        {
          result = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v17 + 1, (unint64_t)&v30);
          v17 = *(unsigned int *)(v14 + 12);
          *(_QWORD *)(*(_QWORD *)v14 + 8 * v17) = *(_QWORD *)result;
        }
        else
        {
          *(double *)(*(_QWORD *)v14 + 8 * v17) = v16;
        }
        *(_DWORD *)(v14 + 12) = v17 + 1;
      }
      if (*(_QWORD *)(v8 + 16))
      {
        v28 = JSC::JSArrayIterator::create();
        v29 = i | 0xFFFE000000000000;
        if (i < 0)
          v29 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v28 + 16) = v29;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v20 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v21 = *a4;
        v30 = *(double *)&v20;
        v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v20 >= 0xFFFE000000000000)
        {
          v23 = (double)(int)v20;
        }
        else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, a1);
          v22 = v26;
          v23 = v27;
        }
        else
        {
          *(_QWORD *)&v23 = v20 - 0x2000000000000;
        }
        if (!*((_DWORD *)v22 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v22))
        {
          v30 = v23;
          v24 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v24 == *(_DWORD *)(v21 + 8))
          {
            v25 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v24 + 1, (unint64_t)&v30);
            v24 = *(unsigned int *)(v21 + 12);
            *(_QWORD *)(*(_QWORD *)v21 + 8 * v24) = *v25;
          }
          else
          {
            *(double *)(*(_QWORD *)v21 + 8 * v24) = v23;
          }
          *(_DWORD *)(v21 + 12) = v24 + 1;
        }
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::ConversionResultStorage<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  _BYTE v7[16];
  int v8;
  _BYTE v9[16];
  int v10;
  unsigned __int8 v11;
  char v12;

  if (*(_DWORD *)(a2 + 32))
  {
    *(_DWORD *)(a1 + 40) = 1;
    return a1;
  }
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v9[0] = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    v4 = off_1E325C018[v3];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v4)(v9, v7, a2 + 8);
    v8 = v3;
    v9[0] = 0;
    v10 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v12, v9, v7);
    v10 = v3;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v4)(&v12, a1 + 8, v9);
    *(_DWORD *)(a1 + 24) = v3;
    v5 = v11;
    *(_BYTE *)(a1 + 32) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    if (!v5)
      goto LABEL_9;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))off_1E325C008[v10])(&v12, v9);
  }
  v10 = -1;
LABEL_9:
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E325C008[v8])(&v12, v7);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringENS9_6VectorIdLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E325C008[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::JSDOMMatrix::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMMatrix::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMMatrix *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDOMMatrix *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDOMMatrix::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::DOMMatrix,WebCore::JSDOMMatrix>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v17;
  uint64_t *v18;

  if ((byte_1EE3350D8 & 1) == 0)
  {
    qword_1EE3350D0 = (uint64_t)&off_1E3259C58;
    byte_1EE3350D8 = 1;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    if (a3)
    {
      v11 = a2;
      if ((a3 & 8) != 0)
        v7 = (a3 - 112) | 1;
      else
        v7 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      result = *(_QWORD **)(v8 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *result;
      a2 = v11;
      *result = a3;
      result[1] = &qword_1EE3350D0;
      result[2] = a1;
    }
    else
    {
      result = 0;
    }
    v4 = *a2;
    *a2 = (uint64_t)result;
    if (!v4)
      return result;
LABEL_11:
    *(_QWORD *)(v4 + 8) = 3;
    return result;
  }
  v5 = (uint64_t *)(a1 + 32);
  v18 = a2;
  if (a3)
  {
    v12 = (uint64_t *)(a1 + 32);
    if ((a3 & 8) != 0)
      v9 = (a3 - 112) | 1;
    else
      v9 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    Allocator = *(_QWORD **)(v10 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = &qword_1EE3350D0;
    Allocator[2] = a1;
    v5 = v12;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v5, (uint64_t *)&v18, (uint64_t *)&v17);
  v4 = (uint64_t)v17;
  if (v17)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::JSDOMMatrixReadOnly::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMMatrixReadOnly::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMMatrixReadOnly *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  v5 = (WebCore::JSDOMMatrixReadOnly *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDOMMatrixReadOnly::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::DOMMimeType *WTF::RefCounted<WebCore::DOMMimeType>::deref(WebCore::DOMMimeType *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::DOMMimeType::~DOMMimeType(result);
    return (WebCore::DOMMimeType *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WTF::RefCounted<WebCore::DOMPlugin>::deref(_DWORD *a1)
{
  void *v1;

  if (*a1 == 1)
  {
    WebCore::DOMPlugin::~DOMPlugin((WebCore::DOMPlugin *)(a1 - 2));
    WebCore::MediaQueryList::operator delete(v1);
  }
  else
  {
    --*a1;
  }
}

uint64_t WebCore::JSDOMMimeType::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref(_DWORD *a1)
{
  void *v1;

  if (*a1 == 1)
  {
    WebCore::DOMMimeTypeArray::~DOMMimeTypeArray((WebCore::DOMMimeTypeArray *)(a1 - 2));
    WebCore::MediaQueryList::operator delete(v1);
  }
  else
  {
    --*a1;
  }
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMMimeTypeArray>(WebCore::JSDOMMimeTypeArray *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMMimeTypeArray::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMMimeTypeArray::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMMimeTypeArray::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMMimeTypeArray>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMMimeTypeArray>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMMimeTypeArray>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMMimeTypeArray::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 6120);
  *(_QWORD *)(a1 + 6120) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSDOMMimeTypeArray::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMMimeTypeArray *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSDOMMimeTypeArray *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSDOMMimeTypeArray>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::DOMMimeTypeArray,WebCore::JSDOMMimeTypeArray>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE3350F8 & 1) == 0)
  {
    qword_1EE3350F0 = (uint64_t)&off_1E3259CB8;
    byte_1EE3350F8 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE3350F0);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE3350F0, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSDOMMimeTypeArray>(WebCore::JSDOMMimeTypeArray *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSDOMMimeTypeArray::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMParser>(WebCore::JSDOMParser *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSDOMParser::s_info + ~((_QWORD)&WebCore::JSDOMParser::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMParser::s_info + ~((_QWORD)&WebCore::JSDOMParser::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSDOMParser::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSDOMParser::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSDOMParser::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSDOMParser::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSDOMParser::s_info);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSDOMParser>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSDOMParser>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSDOMParser>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMPlugin>(WebCore::JSDOMPlugin *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMPlugin::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMPlugin::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMPlugin::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPlugin>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPlugin>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPlugin>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

void WTF::RefCounted<WebCore::DOMPluginArray>::deref(_DWORD *a1)
{
  void *v1;

  if (*a1 == 1)
  {
    WebCore::DOMPluginArray::~DOMPluginArray((WebCore::DOMPluginArray *)(a1 - 2));
    WebCore::MediaQueryList::operator delete(v1);
  }
  else
  {
    --*a1;
  }
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPluginArray>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPluginArray>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPluginArray>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMPluginArray::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 6136);
  *(_QWORD *)(a1 + 6136) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSDOMPluginArray::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMPluginArray *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSDOMPluginArray *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSDOMPluginArray>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::DOMPluginArray,WebCore::JSDOMPluginArray>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE335128 & 1) == 0)
  {
    qword_1EE335120 = (uint64_t)&off_1E3259D48;
    byte_1EE335128 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE335120);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE335120, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSDOMPluginArray>(WebCore::JSDOMPluginArray *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSDOMPluginArray::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSDOMPoint::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 3504);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    if (!*(_QWORD *)(v11 + 3504))
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v27, "IsoSpace T");
      v26 = 0;
      MEMORY[0x19AEA3204](v12, &v27, v5 + 192, v5 + 1872, 32, 8, &v26);
      v14 = v26;
      v26 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v27;
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v16 = *(_QWORD *)(v11 + 3504);
      *(_QWORD *)(v11 + 3504) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v7 + 3504);
    *(_QWORD *)(v7 + 3504) = v8;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528](v18, v17);
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_21:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_22:
    v8[3] = SlowCase + 32;
    goto LABEL_23;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v25);
    v8[5] = SlowCase + (int)v25;
    goto LABEL_22;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_23:
  *(_DWORD *)SlowCase = 0;
  v23 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v23;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::DOMPoint,WebCore::JSDOMPoint>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v17;
  uint64_t *v18;

  if ((byte_1EE335138 & 1) == 0)
  {
    qword_1EE335130 = (uint64_t)&off_1E3259D78;
    byte_1EE335138 = 1;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    if (a3)
    {
      v11 = a2;
      if ((a3 & 8) != 0)
        v7 = (a3 - 112) | 1;
      else
        v7 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      result = *(_QWORD **)(v8 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *result;
      a2 = v11;
      *result = a3;
      result[1] = &qword_1EE335130;
      result[2] = a1;
    }
    else
    {
      result = 0;
    }
    v4 = *a2;
    *a2 = (uint64_t)result;
    if (!v4)
      return result;
LABEL_11:
    *(_QWORD *)(v4 + 8) = 3;
    return result;
  }
  v5 = (uint64_t *)(a1 + 32);
  v18 = a2;
  if (a3)
  {
    v12 = (uint64_t *)(a1 + 32);
    if ((a3 & 8) != 0)
      v9 = (a3 - 112) | 1;
    else
      v9 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    Allocator = *(_QWORD **)(v10 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = &qword_1EE335130;
    Allocator[2] = a1;
    v5 = v12;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v5, (uint64_t *)&v18, (uint64_t *)&v17);
  v4 = (uint64_t)v17;
  if (v17)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::JSDOMPointReadOnly::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMPointReadOnly *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  v5 = (WebCore::JSDOMPointReadOnly *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDOMPointReadOnly::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::DOMPointReadOnly,WebCore::JSDOMPointReadOnly>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v17;
  uint64_t *v18;

  if ((byte_1EE335148 & 1) == 0)
  {
    qword_1EE335140 = (uint64_t)&off_1E3259DA8;
    byte_1EE335148 = 1;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    if (a3)
    {
      v11 = a2;
      if ((a3 & 8) != 0)
        v7 = (a3 - 112) | 1;
      else
        v7 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      result = *(_QWORD **)(v8 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *result;
      a2 = v11;
      *result = a3;
      result[1] = &qword_1EE335140;
      result[2] = a1;
    }
    else
    {
      result = 0;
    }
    v4 = *a2;
    *a2 = (uint64_t)result;
    if (!v4)
      return result;
LABEL_11:
    *(_QWORD *)(v4 + 8) = 3;
    return result;
  }
  v5 = (uint64_t *)(a1 + 32);
  v18 = a2;
  if (a3)
  {
    v12 = (uint64_t *)(a1 + 32);
    if ((a3 & 8) != 0)
      v9 = (a3 - 112) | 1;
    else
      v9 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    Allocator = *(_QWORD **)(v10 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = &qword_1EE335140;
    Allocator[2] = a1;
    v5 = v12;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v5, (uint64_t *)&v18, (uint64_t *)&v17);
  v4 = (uint64_t)v17;
  if (v17)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::JSDOMQuad::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMQuad::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  int v22;
  unint64_t SlowCase;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 3520);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    v27 = *(_QWORD *)(v11 + 3520);
    if (!v27)
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v29, "IsoSpace T");
      v28 = 0;
      MEMORY[0x19AEA3204](v12, &v29, v5 + 192, v5 + 1872, 32, 8, &v28);
      v14 = v28;
      v28 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v27 = v12;
      v16 = *(_QWORD *)(v11 + 3520);
      *(_QWORD *)(v11 + 3520) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = *(unsigned int *)(v9 + 2844);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 2840))
      {
        v18 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 2832, v17 + 1, (unint64_t)&v27);
        v17 = *(unsigned int *)(v9 + 2844);
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = *v18;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = v12;
      }
      *(_DWORD *)(v9 + 2844) = v17 + 1;
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v19 = *(_QWORD *)(v7 + 3520);
    *(_QWORD *)(v7 + 3520) = v8;
    if (v19)
    {
      v20 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v20, v21);
    }
    v22 = __ldxr((unsigned __int8 *)v9);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_24:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_25:
    v8[3] = SlowCase + 32;
    goto LABEL_26;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v26);
    v8[5] = SlowCase + (int)v26;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
  *(_DWORD *)SlowCase = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  v25 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v25;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::DOMQuad,WebCore::JSDOMQuad>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v17;
  uint64_t *v18;

  if ((byte_1EE335158 & 1) == 0)
  {
    qword_1EE335150 = (uint64_t)&off_1E3259DD8;
    byte_1EE335158 = 1;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    if (a3)
    {
      v11 = a2;
      if ((a3 & 8) != 0)
        v7 = (a3 - 112) | 1;
      else
        v7 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      result = *(_QWORD **)(v8 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *result;
      a2 = v11;
      *result = a3;
      result[1] = &qword_1EE335150;
      result[2] = a1;
    }
    else
    {
      result = 0;
    }
    v4 = *a2;
    *a2 = (uint64_t)result;
    if (!v4)
      return result;
LABEL_11:
    *(_QWORD *)(v4 + 8) = 3;
    return result;
  }
  v5 = (uint64_t *)(a1 + 32);
  v18 = a2;
  if (a3)
  {
    v12 = (uint64_t *)(a1 + 32);
    if ((a3 & 8) != 0)
      v9 = (a3 - 112) | 1;
    else
      v9 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    Allocator = *(_QWORD **)(v10 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = &qword_1EE335150;
    Allocator[2] = a1;
    v5 = v12;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v5, (uint64_t *)&v18, (uint64_t *)&v17);
  v4 = (uint64_t)v17;
  if (v17)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMRect>(WebCore::JSDOMRect *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t Structure;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMRect::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMRect::createPrototype(a1, a2, v5);
    Structure = WebCore::JSDOMRect::createStructure((uint64_t *)a1, (uint64_t)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSDOMRect::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMRect::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMRect *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDOMRect *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDOMRect::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMRectList>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSDOMRectList::s_info);
  if (!result)
  {
    Structure = WebCore::JSDOMRectListPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSDOMRectListPrototype::create((WebCore::JSDOMRectListPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSDOMRectList::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSDOMRectList::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMRectList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMRectList>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMRectList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMRectList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMRectList::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3536);
  *(_QWORD *)(a1 + 3536) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMRectReadOnly>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSDOMRectReadOnly::s_info);
  if (!result)
  {
    Structure = WebCore::JSDOMRectReadOnlyPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSDOMRectReadOnlyPrototype::create((WebCore::JSDOMRectReadOnlyPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSDOMRectReadOnly::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSDOMRectReadOnly::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMRectReadOnly::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3544);
  *(_QWORD *)(a1 + 3544) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSDOMRectReadOnly::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMRectReadOnly *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSDOMRectReadOnly *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSDOMRectReadOnly>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMSelection>(WebCore::JSDOMSelection *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMSelection::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMSelection::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMSelection::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMSelection::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 5768);
  *(_QWORD *)(a1 + 5768) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSDOMSelection::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDOMSelection *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSDOMSelection *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSDOMSelection>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::DOMSelection,WebCore::JSDOMSelection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  if ((byte_1EE335188 & 1) == 0)
  {
    qword_1EE335180 = (uint64_t)&off_1E3259E68;
    byte_1EE335188 = 1;
  }
  v3 = (uint64_t *)(a1 + 32);
  v6 = a2;
  JSC::Weak<JSC::JSObject>::Weak(&v5, a3, (uint64_t)&qword_1EE335180, a1);
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v3, &v6, &v5);
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSDOMSelection>(WebCore::JSDOMSelection *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSDOMSelection::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMStringList>(WebCore::JSDOMStringList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMStringList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMStringList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMStringList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMStringList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMStringList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMStringList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMStringMap::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMTokenList>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSDOMTokenList::s_info);
  if (!result)
  {
    Structure = WebCore::JSDOMTokenListPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSDOMTokenListPrototype::create((WebCore::JSDOMTokenListPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSDOMTokenList::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSDOMTokenList::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMTokenList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMTokenList>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMTokenList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMTokenList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMURL::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(WTF *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v3)
    {
      if (*v3 == 1)
        WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v3, a2);
      else
        --*v3;
    }
    v4 = (_DWORD *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v4)
    {
      if (*v4 == 1)
        WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v4, a2);
      else
        --*v4;
    }
    v5 = (_DWORD *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v5)
    {
      if (*v5 == 1)
        WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v5, a2);
      else
        --*v5;
    }
    v6 = (_DWORD *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v6)
    {
      if (*v6 == 1)
        WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v6, a2);
      else
        --*v6;
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMWindow>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMWindow>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMWindow>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7HistoryENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore10NavigationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore21CustomElementRegistryENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7BarPropENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore21HTMLFrameOwnerElementENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore9NavigatorENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsDOMWindow_eventGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3, WebCore::Event *a4)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSDOMWindow::event((WebCore::JSDOMWindow *)a2, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HeadersConstructorGetter(WebCore::JSFetchHeaders **this, WebCore::JSFetchHeaders **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSFetchHeaders::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBCursorConstructorGetter(WebCore::JSIDBCursor **this, WebCore::JSIDBCursor **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBCursor::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBDatabaseConstructorGetter(WebCore::JSIDBDatabase **this, WebCore::JSIDBDatabase **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBDatabase::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBIndexConstructorGetter(WebCore::JSIDBIndex **this, WebCore::JSIDBIndex **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBIndex::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBOpenDBRequestConstructorGetter(WebCore::JSIDBOpenDBRequest **this, WebCore::JSIDBOpenDBRequest **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBOpenDBRequest::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBRequestConstructorGetter(WebCore::JSIDBRequest **this, WebCore::JSIDBRequest **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBRequest::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_IDBTransactionConstructorGetter(WebCore::JSIDBTransaction **this, WebCore::JSIDBTransaction **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSIDBTransaction::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SourceBufferListConstructorGetter(WebCore::JSSourceBufferList **this, WebCore::JSSourceBufferList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSourceBufferList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_WebSocketConstructorGetter(WebCore::JSWebSocket **this, WebCore::JSWebSocket **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSWebSocket::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_CSSRuleListConstructorGetter(WebCore::JSCSSRuleList **this, WebCore::JSCSSRuleList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSCSSRuleList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_CSSStyleDeclarationConstructorGetter(WebCore::JSCSSStyleDeclaration **this, WebCore::JSCSSStyleDeclaration **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSCSSStyleDeclaration::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_CSSValueListConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValueList>,(WebCore::DOMConstructorID)365>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_MediaListConstructorGetter(WebCore::JSMediaList **this, WebCore::JSMediaList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSMediaList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_StyleSheetListConstructorGetter(WebCore::JSStyleSheetList **this, WebCore::JSStyleSheetList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSStyleSheetList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_DOMRectListConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMRectList>,(WebCore::DOMConstructorID)432>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_DOMStringListConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMStringList>,(WebCore::DOMConstructorID)434>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_DataTransferItemListConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDataTransferItemList>,(WebCore::DOMConstructorID)438>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_DocumentConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocument>,(WebCore::DOMConstructorID)441>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_EventTargetConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_WebKitMutationObserverConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMutationObserver>,(WebCore::DOMConstructorID)463>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_NamedNodeMapConstructorGetter(WebCore::JSNamedNodeMap **this, WebCore::JSNamedNodeMap **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSNamedNodeMap::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_PromiseRejectionEventConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_ShadowRootConstructorGetter(WebCore::JSShadowRoot **this, WebCore::JSShadowRoot **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSShadowRoot::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_TextDecoderConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_BlobConstructorGetter(WebCore::JSBlob **this, WebCore::JSBlob **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSBlob::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_FileConstructorGetter(WebCore::JSFile **this, WebCore::JSFile **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSFile::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_FileListConstructorGetter(WebCore::JSFileList **this, WebCore::JSFileList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSFileList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_FileReaderConstructorGetter(WebCore::JSFileReader **this, WebCore::JSFileReader **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSFileReader::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_DOMTokenListConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMTokenList>,(WebCore::DOMConstructorID)506>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLAllCollectionConstructorGetter(WebCore::JSHTMLAllCollection **this, WebCore::JSHTMLAllCollection **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLAllCollection::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLBodyElementConstructorGetter(WebCore::JSHTMLBodyElement **this, WebCore::JSHTMLBodyElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLBodyElement::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLCollectionConstructorGetter(WebCore::JSHTMLCollection **this, WebCore::JSHTMLCollection **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLCollection::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLFrameElementConstructorGetter(WebCore::JSHTMLFrameElement **this, WebCore::JSHTMLFrameElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLFrameElement::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLFrameSetElementConstructorGetter(WebCore::JSHTMLFrameSetElement **this, WebCore::JSHTMLFrameSetElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLFrameSetElement::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_ImageConstructorGetter(WebCore::JSHTMLImageElement **this, WebCore::JSHTMLImageElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLImageElement::getLegacyFactoryFunction(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLMarqueeElementConstructorGetter(WebCore::JSHTMLMarqueeElement **this, WebCore::JSHTMLMarqueeElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLMarqueeElement::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_HTMLMediaElementConstructorGetter(WebCore::JSHTMLMediaElement **this, WebCore::JSHTMLMediaElement **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSHTMLMediaElement::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_Path2DConstructorGetter(WebCore::JSPath2D **this, WebCore::JSPath2D **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSPath2D::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_TextTrackCueListConstructorGetter(WebCore::JSTextTrackCueList **this, WebCore::JSTextTrackCueList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSTextTrackCueList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_TextTrackListConstructorGetter(WebCore::JSTextTrackList **this, WebCore::JSTextTrackList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSTextTrackList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_MimeTypeArrayConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMMimeTypeArray>,(WebCore::DOMConstructorID)755>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_PluginConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPlugin>,(WebCore::DOMConstructorID)756>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

unint64_t WebCore::jsDOMWindow_PluginArrayConstructorGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDOMPluginArray>,(WebCore::DOMConstructorID)757>((uint64_t)this[7], (uint64_t)a2);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGLengthListConstructorGetter(WebCore::JSSVGLengthList **this, WebCore::JSSVGLengthList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGLengthList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGNumberListConstructorGetter(WebCore::JSSVGNumberList **this, WebCore::JSSVGNumberList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGNumberList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGPathSegListConstructorGetter(WebCore::JSSVGPathSegList **this, WebCore::JSSVGPathSegList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGPathSegList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGPointListConstructorGetter(WebCore::JSSVGPointList **this, WebCore::JSSVGPointList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGPointList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGStringListConstructorGetter(WebCore::JSSVGStringList **this, WebCore::JSSVGStringList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGStringList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_SVGTransformListConstructorGetter(WebCore::JSSVGTransformList **this, WebCore::JSSVGTransformList **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSSVGTransformList::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

uint64_t WebCore::jsDOMWindow_XMLHttpRequestEventTargetConstructorGetter(WebCore::JSXMLHttpRequestEventTarget **this, WebCore::JSXMLHttpRequestEventTarget **a2, WebCore::JSDOMWindow *a3)
{
  if (this == a2
    || WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return WebCore::JSXMLHttpRequestEventTarget::getConstructor(this[7], (JSC::VM *)a2, a3);
  }
  else
  {
    return 10;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore11CookieStoreENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::setJSDOMWindow_onloadSetter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WebCore::EventTarget *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(result + 56);
  if (result == a2
    || (result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)result, *(WTF::StringImpl **)(a2 + 3408), 2), (_DWORD)result))
  {
    v6 = *(WebCore::EventTarget **)(a2 + 3408);
    ++*((_DWORD *)v6 + 6);
    v7 = WebCore::eventNames((WebCore *)result);
    WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 1104), a3, (_DWORD *)a2);
    if (*((_DWORD *)v6 + 6) == 1)
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v6 + 72))(v6);
    else
      --*((_DWORD *)v6 + 6);
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v5 + 192), (const JSCell *)a2);
    return 1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore6ScreenENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore10StyleMediaENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore14VisualViewportENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::setJSDOMWindow_onhashchangeSetter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WebCore::EventTarget *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(result + 56);
  if (result == a2
    || (result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)result, *(WTF::StringImpl **)(a2 + 3408), 2), (_DWORD)result))
  {
    v6 = *(WebCore::EventTarget **)(a2 + 3408);
    ++*((_DWORD *)v6 + 6);
    v7 = WebCore::eventNames((WebCore *)result);
    WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 960), a3, *(_DWORD **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
    if (*((_DWORD *)v6 + 6) == 1)
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v6 + 72))(v6);
    else
      --*((_DWORD *)v6 + 6);
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v5 + 192), (const JSCell *)a2);
    return 1;
  }
  return result;
}

uint64_t WebCore::jsDOMWindow_localStorageGetter(WTF::StringImpl **this, WTF::StringImpl **a2, WebCore::JSDOMWindow *a3)
{
  uint64_t v5;
  _BYTE v7[16];
  int v8;
  JSC::VM *v9;
  char v10;

  v9 = this[7];
  if (this != a2
    && !WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)this, a2[426], 2))
  {
    return 10;
  }
  WebCore::DOMWindow::localStorage(a2[426], (WTF::StringImpl *)a2, (uint64_t)v7);
  v5 = WebCore::toJS<WebCore::IDLInterface<WebCore::Storage>,WebCore::ExceptionOr<WebCore::Storage*>>((JSC *)this, (WTF::StringImpl *)a2, &v9, (uint64_t)v7);
  if (v8 != -1)
    off_1E32696F8[v8](&v10, v7);
  return v5;
}

uint64_t WebCore::toJS<WebCore::IDLInterface<WebCore::Storage>,WebCore::ExceptionOr<WebCore::Storage*>>(JSC *a1, WTF::StringImpl *a2, JSC::VM **a3, uint64_t a4)
{
  int v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned __int8 v8[8];
  WTF::StringImpl *v9;

  v4 = *(_DWORD *)(a4 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      v8[0] = *(_BYTE *)a4;
      v6 = *(WTF::StringImpl **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      v9 = v6;
      if (!*((_QWORD *)*a3 + 2))
      {
        WebCore::propagateExceptionSlowPath(a1, a3, v8);
        v6 = v9;
      }
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      return 0;
    }
    else
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7StorageENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(v7);
    }
  }
  else if (*(_QWORD *)a4)
  {
    return WebCore::toJS(a1, a2, *(WebCore::JSDOMGlobalObject **)a4, (WebCore::Storage *)a4);
  }
  else
  {
    return 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7StorageENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore15DOMCacheStorageENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore6CryptoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore11PerformanceENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSDataCue::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDataCue *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDataCue *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDataCue::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::DataCue,WebCore::JSDataCue>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner = (uint64_t)&off_1E3394940;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSDataTransfer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDataTransferItem::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDataTransferItemList>(WebCore::JSDataTransferItemList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDataTransferItemList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDataTransferItemList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDataTransferItemList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDataTransferItemList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDataTransferItemList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDataTransferItemList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDatabase::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDecompressionStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::CompressionStreamBuiltinsWrapper::compressionStreamInitializeCompressionStreamCodeExecutable((WebCore::CompressionStreamBuiltinsWrapper *)(*v5 + 192));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSDecompressionStream::s_info
       + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSDecompressionStream::s_info
                                                                     + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSDecompressionStream::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSDecompressionStream::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSDecompressionStreamPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSDecompressionStreamPrototype::create((WebCore::JSDecompressionStreamPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSDecompressionStream::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSDecompressionStream::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSDecompressionStream::s_info
           + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSDecompressionStream::s_info
                                                                         + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSDecompressionStream::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSDecompressionStream::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSDecompressionStreamPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSDecompressionStreamPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSDecompressionStream::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSDecompressionStream::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSDecompressionStream::s_info
         + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSDecompressionStream::s_info
                                                                       + ~((_QWORD)&WebCore::JSDecompressionStream::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSDecompressionStream::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSDecompressionStream::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSDecompressionStreamPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSDecompressionStreamPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSDecompressionStream::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSDecompressionStream::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 528);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 528))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 528);
    *(_QWORD *)(v30 + 528) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 528);
  *(_QWORD *)(v26 + 528) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSDecompressionStreamDecoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::setJSDedicatedWorkerGlobalScope_onmessageSetter(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_DWORD **)(a2 + 3400);
  ++v6[78];
  v7 = WebCore::eventNames((WebCore *)a1);
  result = WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)(v6 + 80), (WTF::StringImpl **)(v7 + 1192), a3, (_DWORD *)a2);
  if (v6[78] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 40))(v6);
  else
    --v6[78];
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && a1[190] >= *(unsigned __int8 *)(a2 + 7))
    return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 48), (const JSCell *)a2);
  return result;
}

uint64_t WebCore::JSDelayNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDelayNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDelayNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDelayNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDelayNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeprecatedCSSOMCounter::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeprecatedCSSOMPrimitiveValue::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeprecatedCSSOMRGBColor::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeprecatedCSSOMRect::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDeprecatedCSSOMValue>(WebCore::JSDeprecatedCSSOMValue *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDeprecatedCSSOMValue::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDeprecatedCSSOMValue::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDeprecatedCSSOMValue::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValue>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValue>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValue>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDeprecatedCSSOMValueList>(WebCore::JSDeprecatedCSSOMValueList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDeprecatedCSSOMValueList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDeprecatedCSSOMValueList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDeprecatedCSSOMValueList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValueList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValueList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSDeprecatedCSSOMValueList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLInterface<WebCore::DOMRectReadOnly>>::convert<WTF::RefPtr<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>>(uint64_t a1, bmalloc::api *a2)
{
  bmalloc::api *v2;
  bmalloc::api *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  bmalloc::api *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  bmalloc::api *v16;
  int v17;
  uint64_t v18;
  bmalloc::api *v19[3];

  if (!a2)
    return 2;
  v19[1] = v2;
  v19[2] = v3;
  v6 = *(_QWORD *)(a1 + 3320);
  if (*(_DWORD *)(v6 + 48))
  {
    v10 = *(_QWORD *)(v6 + 32);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(bmalloc::api **)(v10 + 16 * v15);
      if (v16 == a2)
      {
LABEL_20:
        v7 = *(_QWORD *)(v10 + 16 * v15 + 8);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(bmalloc::api **)(v10 + 16 * v15);
          ++v17;
          if (v16 == a2)
            goto LABEL_20;
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_6:
      if ((*(_BYTE *)(v7 + 8) & 3) == 0)
      {
        v4 = *(_QWORD *)v7;
        if (v4)
          return v4;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v19[0] = a2;
  v4 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(a1, (uint64_t *)v19);
  v9 = v19[0];
  v19[0] = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
    {
      v18 = v4;
      if (*(_QWORD *)v9)
      {
        *(_QWORD *)(*(_QWORD *)v9 + 8) = 3;
        *(_QWORD *)v9 = 0;
      }
      bmalloc::api::isoDeallocate(v9, v8);
      return v18;
    }
    else
    {
      --*((_DWORD *)v9 + 2);
    }
  }
  return v4;
}

uint64_t WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDictionary<WebCore::Point2D>>>::convert<WebCore::Point2D,0ul>(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  double *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v21;
  WTF *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  WTF *v26;
  _OWORD v27[4];
  uint64_t v28;
  JSC::VM *v29;

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v29 = v6;
  v24 = 0;
  v25 = 0x800000000;
  v26 = (WTF *)((char *)v27 + 8);
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v24 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v25) == 1;
    v7 = *(_DWORD *)(a3 + 12);
    if (v7)
    {
LABEL_3:
      v8 = *(double **)a3;
      v9 = 16 * v7;
      do
      {
        v10 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)a1, a2, v8);
        if (*((_DWORD *)v6 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
            goto LABEL_34;
        }
        v11 = v25;
        if ((_DWORD)v25 != HIDWORD(v25) && (v26 != (WTF *)((char *)v27 + 8) ? (v12 = v26 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v26 + v25) = v10;
          LODWORD(v25) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v25, v13) == 1)
            v24 = 1;
        }
        v8 += 2;
        v9 -= 16;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v24)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v22 = v26;
    v23 = v25;
    v15 = *(JSC::VM **)(a2 + 56);
    if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
      v17 = 0;
    else
      v17 = (JSC::JSGlobalObject *)JSC::constructArray();
    if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
    {
      v18 = JSC::objectConstructorFreeze(a1, v17, v16);
      goto LABEL_24;
    }
  }
LABEL_34:
  v18 = 0;
LABEL_24:
  v19 = *(uint64_t **)&v27[0];
  if (*(_QWORD *)&v27[0])
  {
    v22 = (WTF *)&v25;
    v21 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v27[0], (uint64_t *)&v22);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v19, v21);
  }
  if (v26 != (WTF *)((char *)v27 + 8) && v26)
    WTF::fastFree(v26, v14);
  return v18;
}

uint64_t WebCore::JSDigitalCredential::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::IdentityRequestProvider>>::convert(JSC::VM **a1, JSC::JSCell *a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  char v6;
  _QWORD *v7;
  JSC::HandleSet *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  JSC::HandleSet *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  JSC::HandleSet *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  char v41;
  JSC::HandleSet *v42;
  _QWORD *v43;
  JSC::HandleSet *v44;
  uint64_t v45;
  JSC::HandleSet *v46;
  char v47[8];
  _QWORD *v48;
  char v49[8];
  _QWORD *v50;
  int v51;

  result = WebCore::convertDictionary<WebCore::IdentityRequestProvider>(a2, a1, (uint64_t)v49);
  v5 = v51;
  if (!v51)
  {
    v6 = v49[0];
    v47[0] = v49[0];
    v48 = 0;
    v7 = v50;
    if (v50)
    {
      v8 = *(JSC::HandleSet **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v9 = (_QWORD *)*((_QWORD *)v8 + 5);
      if (!v9)
      {
        v44 = *(JSC::HandleSet **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v41 = v49[0];
        result = JSC::HandleSet::grow(v8);
        v6 = v41;
        v8 = v44;
        v9 = (_QWORD *)*((_QWORD *)v44 + 5);
      }
      *((_QWORD *)v8 + 5) = *v9;
      v9[2] = 0;
      v7 = v9 + 2;
      *v9 = 0;
      v9[1] = 0;
      v48 = v9 + 2;
      v10 = v50;
      if (v50)
      {
        v10 = (_QWORD *)*v50;
        if (*v50)
        {
          v33 = *(_QWORD **)(((unint64_t)(v7 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v34 = v33[3];
          v33 += 3;
          *(v7 - 2) = v34;
          *(v7 - 1) = v33;
          *v33 = v7 - 2;
          *(_QWORD *)(v34 + 8) = v7 - 2;
        }
      }
      *v7 = v10;
    }
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(a3 + 8))
    {
      result = (uint64_t)WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)v47);
      v12 = *(unsigned int *)(a3 + 12);
      v13 = *(_QWORD *)a3 + 16 * v12;
      *(_BYTE *)v13 = *(_BYTE *)result;
      *(_QWORD *)(v13 + 8) = 0;
      v14 = (unint64_t *)(v13 + 8);
      v15 = *(_QWORD *)(result + 8);
      if (v15)
      {
        v16 = *(JSC::HandleSet **)(((v15 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v17 = (_QWORD *)*((_QWORD *)v16 + 5);
        if (!v17)
        {
          v42 = v16;
          v45 = result;
          v39 = v14;
          JSC::HandleSet::grow(v16);
          v14 = v39;
          v16 = v42;
          result = v45;
          v17 = (_QWORD *)*((_QWORD *)v42 + 5);
        }
        *((_QWORD *)v16 + 5) = *v17;
        v17[2] = 0;
        v12 = (unint64_t)(v17 + 2);
        *v17 = 0;
        v17[1] = 0;
        *v14 = (unint64_t)(v17 + 2);
        v18 = *(_QWORD **)(result + 8);
        if (v18)
          v18 = (_QWORD *)*v18;
        v19 = v12 - 16;
        if ((v18 != 0) != (*(_QWORD *)v12 != 0))
        {
          if (v18)
          {
            v20 = *(unint64_t **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
            v21 = v20[3];
            v20 += 3;
            *(_QWORD *)v19 = v21;
            *(_QWORD *)(v12 - 8) = v20;
            *v20 = v19;
            *(_QWORD *)(v21 + 8) = v19;
          }
          else
          {
            v36 = *(_QWORD *)v19;
            v35 = *(_QWORD **)(v12 - 8);
            *v35 = *(_QWORD *)v19;
            *(_QWORD *)(v36 + 8) = v35;
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
            v12 = *v14;
          }
        }
        *(_QWORD *)v12 = v18;
        LODWORD(v12) = *(_DWORD *)(a3 + 12);
      }
      *(_DWORD *)(a3 + 12) = v12 + 1;
      v7 = v48;
    }
    else
    {
      v22 = *(_QWORD *)a3 + 16 * v11;
      *(_BYTE *)v22 = v6;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = (_QWORD *)(v22 + 8);
      if (v7)
      {
        v24 = *(JSC::HandleSet **)(((unint64_t)(v7 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v25 = *((_QWORD *)v24 + 5);
        if (!v25)
        {
          v43 = v7;
          v46 = *(JSC::HandleSet **)(((unint64_t)(v7 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v40 = v23;
          result = JSC::HandleSet::grow(v24);
          v23 = v40;
          v7 = v43;
          v24 = v46;
          v25 = *((_QWORD *)v46 + 5);
        }
        *((_QWORD *)v24 + 5) = *(_QWORD *)v25;
        *(_QWORD *)(v25 + 16) = 0;
        v26 = (_QWORD *)(v25 + 16);
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *v23 = v25 + 16;
        v11 = *v7;
        if ((*v7 != 0) != (*(_QWORD *)(v25 + 16) != 0))
        {
          if (v11)
          {
            v27 = *(unint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
            v28 = v27[3];
            v27 += 3;
            *(_QWORD *)v25 = v28;
            *(_QWORD *)(v25 + 8) = v27;
            *v27 = v25;
            *(_QWORD *)(v28 + 8) = v25;
          }
          else
          {
            v38 = *(_QWORD *)v25;
            v37 = *(_QWORD **)(v25 + 8);
            *v37 = *(_QWORD *)v25;
            *(_QWORD *)(v38 + 8) = v37;
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            v26 = (_QWORD *)*v23;
          }
        }
        *v26 = v11;
        LODWORD(v11) = *(_DWORD *)(a3 + 12);
      }
      *(_DWORD *)(a3 + 12) = v11 + 1;
    }
    if (v7)
    {
      v29 = v7 - 2;
      v30 = *(_QWORD *)(((unint64_t)(v7 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v31 = (uint64_t *)*(v7 - 1);
      if (v31)
      {
        v32 = *v29;
        *v31 = *v29;
        *(_QWORD *)(v32 + 8) = v31;
        *v29 = 0;
        v29[1] = 0;
      }
      *v29 = *(_QWORD *)(v30 + 40);
      *(_QWORD *)(v30 + 40) = v29;
    }
    v5 = v51;
  }
  if (v5 != -1)
    return ((uint64_t (*)(char *, char *))off_1E3269738[v5])(v47, v49);
  return result;
}

char *WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 16 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x194A9EEF8);
      }
      v18 = (uint64_t)v5 + 16 * *(unsigned int *)(a1 + 12);
      v19 = WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::IdentityRequestProvider>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x194A9EF00);
      }
      v11 = WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::IdentityRequestProvider>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::IdentityRequestProvider>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (result != a2)
  {
    v4 = result;
    v5 = (_QWORD *)(a3 + 8);
    do
    {
      *((_BYTE *)v5 - 8) = *(_BYTE *)v4;
      *v5 = 0;
      v6 = *(_QWORD *)(v4 + 8);
      if (v6)
      {
        v7 = (v6 - 16) & 0xFFFFFFFFFFFFF000;
        v8 = *(_QWORD *)(v7 + 16);
        v9 = *(_QWORD **)(v8 + 40);
        if (!v9)
        {
          result = JSC::HandleSet::grow(*(JSC::HandleSet **)(v7 + 16));
          v9 = *(_QWORD **)(v8 + 40);
        }
        *(_QWORD *)(v8 + 40) = *v9;
        v9[2] = 0;
        v10 = v9 + 2;
        *v9 = 0;
        v9[1] = 0;
        *v5 = v9 + 2;
        v11 = *(_QWORD **)(v4 + 8);
        if (v11)
          v11 = (_QWORD *)*v11;
        v12 = (unint64_t)(v10 - 2);
        if ((v11 != 0) != (*v10 != 0))
        {
          if (v11)
          {
            v13 = *(unint64_t **)((v12 & 0xFFFFFFFFFFFFF000) + 0x10);
            v14 = v13[3];
            v13 += 3;
            *(_QWORD *)v12 = v14;
            *(v10 - 1) = v13;
            *v13 = v12;
            *(_QWORD *)(v14 + 8) = v12;
          }
          else
          {
            v21 = *(_QWORD *)v12;
            v20 = (_QWORD *)*(v10 - 1);
            *v20 = *(_QWORD *)v12;
            *(_QWORD *)(v21 + 8) = v20;
            *(_QWORD *)v12 = 0;
            *(_QWORD *)(v12 + 8) = 0;
            v10 = (_QWORD *)*v5;
          }
        }
        *v10 = v11;
        v15 = *(_QWORD *)(v4 + 8);
        if (v15)
        {
          v16 = (uint64_t *)(v15 - 16);
          v17 = *(_QWORD *)(((v15 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v18 = *(uint64_t **)(v15 - 8);
          if (v18)
          {
            v19 = *v16;
            *v18 = *v16;
            *(_QWORD *)(v19 + 8) = v18;
            *v16 = 0;
            v16[1] = 0;
          }
          *v16 = *(_QWORD *)(v17 + 40);
          *(_QWORD *)(v17 + 40) = v16;
          *(_QWORD *)(v4 + 8) = 0;
        }
      }
      v4 += 16;
      v5 += 2;
    }
    while (v4 != a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23IdentityRequestProviderENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t WebCore::getDOMStructure<WebCore::JSDocument>(WebCore::JSNode *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  uint64_t v10;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDocument::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSNode::prototype(a1, a2, v5);
    Structure = WebCore::JSDocumentPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSDocumentPrototype::create(a1, a2, Structure, v8);
    v10 = WebCore::JSDocument::createStructure((uint64_t *)a1, (uint64_t)a2, v9);
    return WebCore::cacheDOMStructure((JSCell *)a2, v10, (uint64_t)&WebCore::JSDocument::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSDocument>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSDocument>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSDocument>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::jsDocument_implementationGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDocument *a3)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(16 * (this & 0xFFFFFFFE) + 0x28);
  v4 = (_QWORD *)WebCore::Document::implementation(a2);
  return WebCore::wrap<WebCore::DOMImplementation>(v3, v4);
}

unint64_t WebCore::jsDocument_currentScriptGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDocument *a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v6;

  v4 = *((unsigned int *)a3 + 405);
  if ((_DWORD)v4 && (v6 = *(WebCore::JSDOMGlobalObject **)(*((_QWORD *)a3 + 201) + 8 * v4 - 8)) != 0)
    return WebCore::toJS(this, *(JSC::JSGlobalObject **)(16 * (a2 & 0xFFFFFFFE) + 0x28), v6, a4);
  else
    return 2;
}

unint64_t WebCore::jsDocument_allGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDocument *a3)
{
  int v3;
  JSC::VM *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v8;

  v3 = (int)this;
  v4 = *(JSC::VM **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Document::all(a3, &v8);
  v5 = WebCore::wrap<WebCore::HTMLCollection>(v3, v4, (uint64_t)v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return v5;
}

uint64_t *WebCore::setJSDocument_onkeydownSetter(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  WebCore::EventTarget *v6;
  uint64_t v7;
  uint64_t *result;
  WebCore::EventTarget *v9;

  v6 = *(WebCore::EventTarget **)(a2 + 24);
  *((_DWORD *)v6 + 6) += 2;
  v9 = v6;
  v7 = WebCore::eventNames((WebCore *)a1);
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 1048), a3, (_DWORD *)a2);
  result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v9);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && a1[190] >= *(unsigned __int8 *)(a2 + 7))
    return (uint64_t *)JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 48), (const JSCell *)a2);
  return result;
}

void WebCore::defaultWebCryptoMasterKey(uint64_t a1@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFData *v9;
  void *v10;
  void *v11;
  WTF::StringImpl *v12;
  const __CFString *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const __CFDictionary *v21;
  WTF::StringImpl *v22;
  void *v23;
  char v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  CFTypeRef result;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  const __CFString *v39;
  const __CFString *v40;
  uint64_t v41;
  CFTypeRef v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((WTF::hasProcessPrivilege() & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194A9F7E8);
  }
  v3 = (WTF::StringImpl *)*MEMORY[0x1E0CD6C98];
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CD6CA8];
  v37 = (WTF::StringImpl *)*MEMORY[0x1E0CD6CA8];
  v5 = *MEMORY[0x1E0CD68F8];
  v31 = v3;
  v32 = v5;
  v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if (!v6)
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", *_NSGetProgname(), 1);
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.WebKit.WebCrypto.master+%@"), v6);
  v33 = *MEMORY[0x1E0CD7018];
  v38 = v7;
  v39 = (const __CFString *)MEMORY[0x1E0C9AAB0];
  result = 0;
  v8 = SecItemCopyMatching((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v31, 3), &result);
  if ((_DWORD)v8 == -25300 || (_DWORD)v8 == -128)
    goto LABEL_11;
  if ((_DWORD)v8)
  {
    v26 = v8;
    WTFLogAlways();
LABEL_11:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_12;
  }
  v9 = (const __CFData *)result;
  CFDataGetBytePtr((CFDataRef)result);
  if (CFDataGetLength(v9) < 0)
  {
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x194A9F4ECLL);
  }
  WTF::base64Decode();
  if (v9)
    CFRelease(v9);
LABEL_12:
  if (!*(_BYTE *)(a1 + 16))
  {
    if ((WTF::hasProcessPrivilege() & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194A9F808);
    }
    v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    if (CCRandomGenerateBytes(v10, 0x10uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x194A9F828);
    }
    v11 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    if (!objc_msgSend(v11, "objectForInfoDictionaryKey:", CFSTR("CFBundleDisplayName"))
      && !objc_msgSend(v11, "objectForInfoDictionaryKey:", *MEMORY[0x1E0C9AE88]))
    {
      objc_msgSend(v11, "bundleIdentifier");
    }
    MEMORY[0x19AEA5508](&v31);
    WebCore::webCryptoMasterKeyKeychainLabel((WebCore *)&v31, (uint64_t)&v37);
    if (v37)
    {
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
      v14 = v37;
      v37 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v37 = 0;
      v13 = &stru_1E3487BC0;
    }
    v15 = v31;
    v31 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::base64EncodeToVector();
    v16 = *MEMORY[0x1E0CD6B80];
    v31 = v3;
    v32 = v16;
    v37 = v4;
    v38 = MEMORY[0x1E0C9AAA0];
    v33 = *MEMORY[0x1E0CD6988];
    WebCore::webCryptoMasterKeyKeychainComment((uint64_t)&v27);
    if (v27)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E3487BC0;
    v18 = *MEMORY[0x1E0CD6A90];
    v39 = v17;
    v40 = v13;
    v34 = v18;
    v35 = v5;
    v19 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle", v26), "bundleIdentifier");
    if (!v19)
      v19 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", *_NSGetProgname(), 1);
    v41 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.WebKit.WebCrypto.master+%@"), v19);
    v36 = *MEMORY[0x1E0CD70D8];
    v42 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", result, v30));
    v21 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v31, 6);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (SecItemAdd(v21, 0))
    {
      WTFLogAlways();
      v24 = 0;
      *(_BYTE *)a1 = 0;
    }
    else
    {
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = 0x1000000010;
      v24 = 1;
      v10 = 0;
    }
    *(_BYTE *)(a1 + 16) = v24;
    v25 = (WTF *)result;
    if (result)
    {
      result = 0;
      v29 = 0;
      WTF::fastFree(v25, v23);
      if (!v10)
      {
LABEL_40:
        if (*(_BYTE *)(a1 + 16))
        {
          if (*(_DWORD *)(a1 + 12) != 16)
          {
            __break(0xC471u);
            JUMPOUT(0x194A9F75CLL);
          }
        }
        else
        {
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 16) = 0;
        }
        return;
      }
    }
    else if (!v10)
    {
      goto LABEL_40;
    }
    WTF::fastFree((WTF *)v10, v23);
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 12) != 16)
    goto LABEL_55;
}

void sub_194A9F854(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, int a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  WTF *v20;

  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  WTF::fastFree(v20, a2);
  _Unwind_Resume(a1);
}

BOOL WebCore::deleteDefaultWebCryptoMasterKey(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OSStatus v4;
  OSStatus v5;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  if ((WTF::hasProcessPrivilege() & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194A9FA78);
  }
  v1 = *MEMORY[0x1E0CD6CA8];
  v2 = *MEMORY[0x1E0CD68F8];
  v7[0] = *MEMORY[0x1E0CD6C98];
  v7[1] = v2;
  v8[0] = v1;
  v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if (!v3)
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", *_NSGetProgname(), 1);
  v8[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.WebKit.WebCrypto.master+%@"), v3);
  v4 = SecItemDelete((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2));
  v5 = v4;
  if (v4 && v4 != -25300 && v4 != -128)
    WTFLogAlways();
  return v5 == 0;
}

uint64_t WebCore::wrapSerializedCryptoKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  size_t *wrappedKeyLen;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 12))
    return 0;
  v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  if (CCRandomGenerateBytes(v6, 0x10uLL))
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  v7 = CCSymmetricWrappedSize(1u, 0x10uLL);
  v8 = v7;
  if (v7)
  {
    if (HIDWORD(v7))
    {
      __break(0xC471u);
      JUMPOUT(0x194A9FDD4);
    }
    v9 = (uint8_t *)WTF::fastMalloc((WTF *)v7);
  }
  else
  {
    v9 = 0;
  }
  v30 = v8;
  if (!CCSymmetricKeyWrap(1u, (const uint8_t *)*MEMORY[0x1E0C803C8], *MEMORY[0x1E0C803D0], *(const uint8_t **)a1, *(unsigned int *)(a1 + 12), (const uint8_t *)v6, 0x10uLL, v9, &v30))
  {
    v12 = v30;
    v13 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v13)
    {
      v14 = (WTF *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 12));
      v15 = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v29 = 16;
    v33[0] = 0;
    v33[1] = 0;
    wrappedKeyLen = *(size_t **)a2;
    v28 = v15;
    if (CCCryptorGCM())
      goto LABEL_14;
    v31[0] = CFSTR("version");
    v32[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 1, wrappedKeyLen, v28, v14, v33, &v29);
    v31[1] = CFSTR("wrappedKEK");
    v32[1] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v9, v12));
    v31[2] = CFSTR("encryptedKey");
    v32[2] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v14, v13));
    v31[3] = CFSTR("tag");
    v32[3] = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v33, v29);
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 4);
    v18 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v17, 200, 0, 0);
    v19 = v18;
    if (!v18)
    {
LABEL_14:
      v10 = 0;
      if (!v14)
        goto LABEL_16;
LABEL_15:
      WTF::fastFree(v14, v11);
      goto LABEL_16;
    }
    v20 = objc_msgSend(v18, "bytes");
    v21 = objc_msgSend(v19, "length");
    v22 = v21;
    if (!v21)
    {
      v24 = 0;
      goto LABEL_25;
    }
    if (!HIDWORD(v21))
    {
      v23 = WTF::fastMalloc((WTF *)v21);
      v24 = v23;
      v25 = 0;
      do
      {
        *(_BYTE *)(v23 + v25) = *(_BYTE *)(v20 + v25);
        ++v25;
      }
      while (v22 != v25);
LABEL_25:
      v26 = *(WTF **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        WTF::fastFree(v26, v11);
      }
      *(_QWORD *)a3 = v24;
      v10 = 1;
      *(_DWORD *)(a3 + 8) = v22;
      *(_DWORD *)(a3 + 12) = v22;
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x194A9FDA8);
  }
  v10 = 0;
LABEL_16:
  if (v9)
    WTF::fastFree((WTF *)v9, v11);
  WTF::fastFree((WTF *)v6, v11);
  return v10;
}

void sub_194A9FDE0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;

  if (v5)
  {
    WTF::fastFree(v5, a2);
    if (!v4)
    {
LABEL_3:
      if (!v3)
        goto LABEL_8;
LABEL_7:
      WTF::fastFree(v3, a2);
LABEL_8:
      WTF::fastFree(v2, a2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v4, a2);
  if (!v3)
    goto LABEL_8;
  goto LABEL_7;
}

unint64_t WebCore::readSerializedCryptoKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  _BYTE v18[15];
  _BYTE v19[23];
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)a1, *(unsigned int *)(a1 + 12), 0), 0, 0, 0);
  if (!result)
    goto LABEL_13;
  v4 = (void *)result;
  v5 = (void *)objc_msgSend((id)result, "objectForKey:", CFSTR("version"));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
    goto LABEL_13;
  result = objc_msgSend(v5, "unsignedIntegerValue");
  if (result >= 2)
    goto LABEL_13;
  v6 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("wrappedKEK"));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
    goto LABEL_13;
  result = objc_msgSend(v6, "length");
  if (result != 24)
    goto LABEL_13;
  memset(v20, 0, sizeof(v20));
  objc_msgSend(v6, "getBytes:length:", v20, 24);
  v7 = v20[0];
  *(_OWORD *)v19 = *(_OWORD *)&v20[1];
  *(_QWORD *)&v19[15] = *(_QWORD *)&v20[16];
  v8 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("encryptedKey"));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    if (v8)
    {
      v9 = objc_msgSend(v8, "bytes");
      result = objc_msgSend(v8, "length");
      v10 = result;
      if (result)
      {
        if (HIDWORD(result))
        {
          __break(0xC471u);
          return result;
        }
        v11 = WTF::fastMalloc((WTF *)result);
        v8 = (void *)v11;
        v12 = 0;
        do
        {
          *(_BYTE *)(v11 + v12) = *(_BYTE *)(v9 + v12);
          ++v12;
        }
        while (v10 != v12);
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
      LODWORD(v10) = 0;
    }
    v13 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("tag"));
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
    {
      result = objc_msgSend(v13, "length");
      if (result == 16)
      {
        *(_OWORD *)v20 = 0uLL;
        result = objc_msgSend(v13, "getBytes:length:", v20, 16);
        v15 = v20[0];
        *(_QWORD *)v18 = *(_QWORD *)&v20[1];
        *(_QWORD *)&v18[7] = *(_QWORD *)&v20[8];
        if ((_DWORD)v10)
        {
          v16 = (void *)WTF::fastMalloc((WTF *)v10);
          result = (unint64_t)memcpy(v16, v8, v10);
        }
        else
        {
          v16 = 0;
        }
        *(_QWORD *)(a2 + 41) = *(_QWORD *)v18;
        *(_QWORD *)(a2 + 48) = *(_QWORD *)&v18[7];
        *(_BYTE *)a2 = v7;
        *(_OWORD *)(a2 + 1) = *(_OWORD *)v19;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)&v19[15];
        *(_QWORD *)(a2 + 24) = v16;
        *(_DWORD *)(a2 + 32) = v10;
        *(_DWORD *)(a2 + 36) = v10;
        v17 = 1;
        *(_BYTE *)(a2 + 40) = v15;
      }
      else
      {
        v17 = 0;
        *(_BYTE *)a2 = 0;
      }
      *(_BYTE *)(a2 + 56) = v17;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
    }
    if (v8)
      return WTF::fastFree((WTF *)v8, v14);
  }
  else
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  return result;
}

void sub_194AA0138(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::unwrapCryptoKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF *v5;
  size_t v6;
  size_t v7;
  uint8_t *v8;
  void *v9;
  WTF *v10;
  size_t rawKeyLen;
  _QWORD __b2[2];
  __int128 __b1;
  uint8_t wrappedKey[16];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(result + 12))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v4 = result;
  *(_OWORD *)wrappedKey = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  v5 = (WTF *)*(unsigned int *)(a2 + 36);
  __b1 = *(_OWORD *)(a2 + 40);
  v6 = CCSymmetricUnwrappedSize(1u, 0x18uLL);
  v7 = v6;
  if (v6)
  {
    if (HIDWORD(v6))
    {
      __break(0xC471u);
      JUMPOUT(0x194AA0348);
    }
    v8 = (uint8_t *)WTF::fastMalloc((WTF *)v6);
  }
  else
  {
    v8 = 0;
  }
  rawKeyLen = v7;
  result = CCSymmetricKeyUnwrap(1u, (const uint8_t *)*MEMORY[0x1E0C803C8], *MEMORY[0x1E0C803D0], *(const uint8_t **)v4, *(unsigned int *)(v4 + 12), wrappedKey, 0x18uLL, v8, &rawKeyLen);
  if ((_DWORD)result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (!v8)
      return result;
    return WTF::fastFree((WTF *)v8, v9);
  }
  v10 = 0;
  __b2[0] = 0;
  __b2[1] = 0;
  if ((_DWORD)v5)
    v10 = (WTF *)WTF::fastMalloc(v5);
  result = CCCryptorGCM();
  if ((_DWORD)result || (result = timingsafe_bcmp(&__b1, __b2, 0x10uLL), (_DWORD)result))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v10)
      result = WTF::fastFree(v10, v9);
    if (v8)
      return WTF::fastFree((WTF *)v8, v9);
  }
  else
  {
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = (_DWORD)v5;
    *(_DWORD *)(a3 + 12) = (_DWORD)v5;
    *(_BYTE *)(a3 + 16) = 1;
    if (v8)
      return WTF::fastFree((WTF *)v8, v9);
  }
  return result;
}

void sub_194AA0358(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  JSCell *v8;
  JSC::JSCell *v9;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v11;
  JSC::JSGlobalObject *v12;
  JSC::VM *v13;
  JSC::JSObject *v14;
  JSC::Structure *v15;
  JSC::VM *FunctionRealm;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  JSC::JSCell *v25;
  unint64_t Structure;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  unint64_t SubclassStructure;
  WebCore::Node *v31;
  WebCore::Node *v33;
  JSC::VM *v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v34 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v34, (uint64_t)"DocumentFragment", 17);
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AA05D0);
  }
  WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v6 - 192), (uint64_t *)&v33);
  v8 = (JSCell *)WebCore::toJSNewlyCreated((int)a1, *(JSC::VM **)(v5 + 40), &v33);
  v9 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v9);
    if (Object)
    {
      v12 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v11);
        if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
        {
          v17 = *((_QWORD *)FunctionRealm + 412);
          if (v17)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = ((unint64_t)&WebCore::JSDocumentFragment::s_info
                 + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentFragment::s_info
                                                                            + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) >> 22);
            v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
            v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
            v22 = v18 & ((v21 >> 31) ^ v21);
            v23 = *(char ***)(v17 + 16 * v22);
            if (v23 == &WebCore::JSDocumentFragment::s_info)
            {
LABEL_12:
              v14 = *(JSC::JSObject **)(v17 + 16 * v22 + 8);
              if (v14)
              {
LABEL_14:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v12, v14, v15);
                if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
                  JSC::JSObject::setStructure(v8, v13, SubclassStructure);
                goto LABEL_16;
              }
            }
            else
            {
              v24 = 1;
              while (v23)
              {
                v22 = ((_DWORD)v22 + v24) & v18;
                v23 = *(char ***)(v17 + 16 * v22);
                ++v24;
                if (v23 == &WebCore::JSDocumentFragment::s_info)
                  goto LABEL_12;
              }
            }
          }
          v25 = (JSC::JSCell *)WebCore::JSNode::prototype(v13, FunctionRealm, v14);
          Structure = WebCore::JSDocumentFragmentPrototype::createStructure((uint64_t *)v13, (uint64_t)FunctionRealm, v25);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v28 = (JSC::JSCell *)WebCore::JSDocumentFragmentPrototype::create(v13, FunctionRealm, Structure, v27);
          v29 = WebCore::JSDocumentFragment::createStructure((uint64_t *)v13, (uint64_t)FunctionRealm, v28);
          v14 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v29, (uint64_t)&WebCore::JSDocumentFragment::s_info);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_16:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v8 = 0;
  v31 = v33;
  v33 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v7);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  return v8;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::JSDocumentFragment::prototype((WebCore::JSDocumentFragment *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, v12, 14);
}

uint64_t WebCore::JSDocumentFragment::prototype(WebCore::JSDocumentFragment *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSDocumentFragment::s_info + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentFragment::s_info + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSDocumentFragment::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSDocumentFragment::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
    Structure = WebCore::JSDocumentFragmentPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSDocumentFragmentPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSDocumentFragment::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSDocumentFragment::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSDocumentFragment::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>,(WebCore::DOMConstructorID)442>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3536);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSNode>,(WebCore::DOMConstructorID)466>(a1, a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::createStructure((uint64_t *)a1, a2, v5);
    result = WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3536) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v7 = (JSC::Heap *)(a1 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)a2);
        return v8;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsDocumentFragmentConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSDocumentFragmentPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>,(WebCore::DOMConstructorID)442>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsDocumentFragment_children(int a1, WebCore::ContainerNode **a2)
{
  JSC::VM *v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::ContainerNode::children(a2[3], (WTF::StringImpl *)a2, &v7);
  v4 = WebCore::wrap<WebCore::HTMLCollection>(a1, v3, (uint64_t)v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return v4;
}

unint64_t WebCore::jsDocumentFragment_firstElementChild(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v4)
    return 2;
  while ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

unint64_t WebCore::jsDocumentFragment_lastElementChild(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v4)
    return 2;
  while ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v4)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

uint64_t WebCore::jsDocumentFragment_childElementCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
  {
LABEL_4:
    v3 = 0;
    return v3 | 0xFFFE000000000000;
  }
  while ((*(_WORD *)(v2 + 28) & 8) == 0)
  {
    v2 = *(_QWORD *)(v2 + 56);
    if (!v2)
      goto LABEL_4;
  }
  v3 = 0;
LABEL_6:
  ++v3;
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 56);
    if (!v2)
      break;
    if ((*(_WORD *)(v2 + 28) & 8) != 0)
      goto LABEL_6;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 | 0xFFFE000000000000;
  return COERCE__INT64((double)v3) + 0x2000000000000;
}

unint64_t jsDocumentFragmentPrototypeFunction_getElementByIdWithoutTypeCheck(JSC::JSGlobalObject *a1, WTF::StringImpl *a2, JSC::JSRopeString *this)
{
  uint64_t v5;
  WebCore::DocumentFragment *v6;
  WTF::StringImpl *v7;
  JSC::JSGlobalObject *v8;
  WebCore::Node *ElementById;
  WTF::StringImpl *v10;
  WebCore::Element *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *var28[6];

  v5 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v5 + 40) = var28[5];
  v6 = (WebCore::DocumentFragment *)*((_QWORD *)a2 + 3);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString(this, a1);
  }
  else if ((*((_BYTE *)v7 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v7 += 2;
    var28[0] = v7;
  }
  else
  {
    WTF::AtomStringImpl::lookUpSlowCase(v7, a2);
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
  {
    v12 = 0;
  }
  else
  {
    v8 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    ElementById = WebCore::DocumentFragment::getElementById(v6, (const WTF::AtomString *)var28);
    if (ElementById)
      v12 = WebCore::toJS(a1, v8, ElementById, v11);
    else
      v12 = 2;
  }
  v13 = var28[0];
  var28[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

unint64_t JSC::jsDynamicCast<WebCore::JSDocumentFragment *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSDocumentFragment::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSDocumentFragment::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSDocumentTimeline>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  double v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  uint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  JSCell *v18;
  JSC::JSCell *v19;
  JSC::JSGlobalObject *v20;
  JSC::JSObject *v21;
  JSC::JSGlobalObject *v22;
  JSC::VM *v23;
  JSC::JSObject *v24;
  JSC::Structure *v25;
  JSC::VM *FunctionRealm;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  int v34;
  JSC::JSCell *v35;
  unint64_t Structure;
  JSC::Structure *v37;
  JSC::JSCell *v38;
  uint64_t v39;
  unint64_t SubclassStructure;
  WTF::StringImpl *v41;
  double v43;
  JSC::VM *v44[3];
  WTF::StringImpl *v45;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v44[0] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, v44, (uint64_t)"DocumentTimeline", 17);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AA10F8);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v10 = 0.0;
  }
  else
  {
    v8 = *(JSC::JSCell **)(a2 + 48);
    v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v44[1] = v9;
    v10 = 0.0;
    if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
      {
        JSC::throwTypeError();
        return 0;
      }
      v12 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v14 = (WTF::StringImpl *)JSC::JSObject::get(v12, a1, (unint64_t)v45);
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v13);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        return 0;
      if (v14 != (WTF::StringImpl *)10)
      {
        v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v44[2] = v15;
        v45 = v14;
        if ((unint64_t)v14 >= 0xFFFE000000000000)
        {
          v10 = (double)(int)v14;
        }
        else if ((unint64_t)v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, a1);
          v10 = v43;
        }
        else
        {
          *(_QWORD *)&v10 = (char *)v14 - 0x2000000000000;
        }
        if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
          return 0;
        if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          JSC::throwTypeError();
          return 0;
        }
      }
    }
  }
  v16 = WTF::fastMalloc((WTF *)0xA0);
  v45 = (WTF::StringImpl *)WebCore::DocumentTimeline::DocumentTimeline(v16, (WebCore::Document *)(v7 - 192), v10 / 1000.0);
  if (*(void (***)(WebCore::DocumentTimeline *__hidden))v45 != off_1E338D038)
  {
    __break(0xC471u);
    JUMPOUT(0x194AA1118);
  }
  v18 = (JSCell *)WebCore::createWrapper<WebCore::DocumentTimeline,WebCore::DocumentTimeline>(*(JSC::VM **)(v5 + 40), (uint64_t *)&v45, v17);
  v19 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v19 & 0xFFFE000000000002) == 0)
  {
    v20 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v19);
    if (v20)
    {
      v22 = v20;
      if (v20 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v20, v21);
        if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
        {
          v27 = *((_QWORD *)FunctionRealm + 412);
          if (v27)
          {
            v28 = *(_DWORD *)(v27 - 8);
            v29 = ((unint64_t)&WebCore::JSDocumentTimeline::s_info
                 + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentTimeline::s_info
                                                                            + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) >> 22);
            v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
            v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
            v32 = v28 & ((v31 >> 31) ^ v31);
            v33 = *(char ***)(v27 + 16 * v32);
            if (v33 == &WebCore::JSDocumentTimeline::s_info)
            {
LABEL_29:
              v24 = *(JSC::JSObject **)(v27 + 16 * v32 + 8);
              if (v24)
              {
LABEL_31:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v22, v24, v25);
                if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
                  JSC::JSObject::setStructure(v18, v23, SubclassStructure);
                goto LABEL_33;
              }
            }
            else
            {
              v34 = 1;
              while (v33)
              {
                v32 = ((_DWORD)v32 + v34) & v28;
                v33 = *(char ***)(v27 + 16 * v32);
                ++v34;
                if (v33 == &WebCore::JSDocumentTimeline::s_info)
                  goto LABEL_29;
              }
            }
          }
          v35 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype(v23, FunctionRealm, v24);
          Structure = WebCore::JSDocumentTimelinePrototype::createStructure((uint64_t *)v23, (uint64_t)FunctionRealm, v35);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v38 = (JSC::JSCell *)WebCore::JSDocumentTimelinePrototype::create(v23, FunctionRealm, Structure, v37);
          v39 = WebCore::JSDocumentTimeline::createStructure((uint64_t *)v23, (uint64_t)FunctionRealm, v38);
          v24 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v39, (uint64_t)&WebCore::JSDocumentTimeline::s_info);
          goto LABEL_31;
        }
      }
    }
  }
LABEL_33:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v18 = 0;
  v41 = v45;
  v45 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
    else
      --*((_DWORD *)v41 + 2);
  }
  return v18;
}

uint64_t WebCore::JSDocumentTimeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDocumentTimelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDocumentTimelinePrototype::create(WebCore::JSDocumentTimelinePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  JSC::Structure *v25;
  int v26;
  unint64_t v28;
  WTF::StringImpl *v29[6];
  int v30;
  int v31;
  JSC::Structure *v32;
  int v33;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v28 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v28);
    *((_QWORD *)this + 4865) = SlowCase + (int)v28;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSDocumentTimeline::s_info, &WebCore::JSDocumentTimelinePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AA174CLL);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 704);
  if ((v12 & 0x10000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = v29[0];
    v14 = *v10;
    *v10 = 1;
    LODWORD(v29[0]) = -1;
    WORD2(v29[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v16 && *(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AA176CLL);
  }
  v17 = v16 - 192;
  if (!v16)
    v17 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 704) & 0x20000) != 0)
  {
    if ((v12 & 0x10000) != 0)
      goto LABEL_24;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v18 = v29[0];
    v19 = *v10;
    *v10 = 1;
    LODWORD(v29[0]) = -1;
    WORD2(v29[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_24:
  v21 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = JSC::JSString::create((uint64_t)this, v29);
  v24 = v29[0];
  v29[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v33 = *(_DWORD *)SlowCase;
  v32 = v25;
  v26 = JSC::Structure::outOfLineCapacity(v25);
  v30 = 0;
  v31 = v26;
  v29[0] = (WTF::StringImpl *)&v31;
  v29[1] = (WTF::StringImpl *)SlowCase;
  v29[2] = this;
  v29[3] = (WTF::StringImpl *)&v33;
  v29[4] = (WTF::StringImpl *)&v32;
  v29[5] = (WTF::StringImpl *)&v30;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v25, this, v21, 6, (uint64_t)v29);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v30, v23);
  *((_DWORD *)v25 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocumentTimeline>,(WebCore::DOMConstructorID)324>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2592);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationTimeline>,(WebCore::DOMConstructorID)318>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSDocumentTimeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSDocumentTimeline::s_info + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentTimeline::s_info + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSDocumentTimeline::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSDocumentTimeline::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype((WebCore::JSAnimationTimeline *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSDocumentTimelinePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSDocumentTimelinePrototype::create((WebCore::JSDocumentTimelinePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSDocumentTimeline::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSDocumentTimeline::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2592) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsDocumentTimelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSDocumentTimelinePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocumentTimeline>,(WebCore::DOMConstructorID)324>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsDocumentTimeline_maximumFrameRate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 136);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4)
    return 2;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 2;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 2;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 2;
  v8 = *(_QWORD *)(v7 + 316);
  if ((v8 & 0xFF00000000) == 0)
    return 2;
  if ((v8 & 0x80000000) != 0)
    return COERCE__INT64((double)v8) + 0x2000000000000;
  return v8 | 0xFFFE000000000000;
}

uint64_t WebCore::JSDocumentTimeline::subspaceForImpl(WebCore::JSDocumentTimeline *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2632);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2632))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2632);
    *(_QWORD *)(v8 + 2632) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2632);
  *(_QWORD *)(v3 + 2632) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::DocumentTimeline,WebCore::DocumentTimeline>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAnimationTimeline *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *Allocator;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSDocumentTimeline::s_info + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentTimeline::s_info + ~((_QWORD)&WebCore::JSDocumentTimeline::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSDocumentTimeline::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSDocumentTimeline::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSAnimationTimeline *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype(v15, a1, a3);
  Structure = WebCore::JSDocumentTimelinePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSDocumentTimelinePrototype::create(v15, a1, Structure, v18);
  v20 = WebCore::JSDocumentTimeline::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSDocumentTimeline::s_info);
LABEL_8:
  v21 = WebCore::JSDocumentTimeline::create(v14, a1, a2);
  v22 = v21;
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner = (uint64_t)&unk_1E32268D0;
  }
  v24 = (uint64_t *)(v23 + 32);
  v31 = v5;
  if (v21)
  {
    v27 = v23;
    if ((v21 & 8) != 0)
      v28 = (v21 - 112) | 1;
    else
      v28 = v21 & 0xFFFFFFFFFFFFC000;
    if ((v28 & 1) != 0)
      v29 = v28 + 47;
    else
      v29 = *(_QWORD *)v28 + 32;
    Allocator = *(_QWORD **)(v29 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v29 + 16) = *Allocator;
    *Allocator = v22;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner;
    Allocator[2] = v27;
  }
  else
  {
    Allocator = 0;
  }
  v30 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v24, &v31, (uint64_t *)&v30);
  if (v30)
    v30[1] = 3;
  return v22;
}

uint64_t WebCore::wrap<WebCore::DocumentTimeline>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t result;
  _DWORD *v15;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v15 = (_DWORD *)a3;
  if (*(void (***)(WebCore::DocumentTimeline *__hidden))a3 == off_1E338D038)
  {
    v12 = WebCore::createWrapper<WebCore::DocumentTimeline,WebCore::DocumentTimeline>(a2, (uint64_t *)&v15, (WebCore::JSDOMGlobalObject *)a3);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    return v12;
  }
  result = 303;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDocumentType::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDocumentTypePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDocumentTypePrototype::create(WebCore::JSDocumentTypePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::Structure *v25;
  int v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::Structure *v31;
  int v32;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  JSC::Structure **v39;
  int *v40;
  int v41;
  int v42;
  JSC::Structure *v43;
  int v44;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v34);
    *((_QWORD *)this + 4865) = SlowCase + (int)v34;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSDocumentType::s_info, (uint64_t)&WebCore::JSDocumentTypePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(_QWORD *)(v9 + 56);
  v11 = *(_DWORD *)(v9 + 932);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = 8 * *(unsigned __int8 *)(v12 + 14);
  v14 = JSC::allocateCell<JSC::JSFinalObject>(v10, v13 + 16);
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v14 = v12 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  bzero((void *)(v14 + 16), v13);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v16 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v16, 7, 0, (uint64_t)&v35);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v18, 7, 0, (uint64_t)&v35);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v20, 7, 0, (uint64_t)&v35);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v22 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v22, 7, 0, (uint64_t)&v35);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = *(_QWORD *)(v6[381] + 2784);
  v25 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v44 = *(_DWORD *)SlowCase;
  v43 = v25;
  v26 = JSC::Structure::outOfLineCapacity(v25);
  v41 = 0;
  v42 = v26;
  v35 = (WTF::StringImpl *)&v42;
  v36 = SlowCase;
  v37 = (uint64_t)this;
  v38 = &v44;
  v39 = &v43;
  v40 = &v41;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v25, this, v24, 6, (uint64_t)&v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v41, v14);
  *((_DWORD *)v25 + 4) |= 0x10u;
  v27 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = JSC::JSString::create((uint64_t)this, &v35);
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v44 = *(_DWORD *)SlowCase;
  v43 = v31;
  v32 = JSC::Structure::outOfLineCapacity(v31);
  v41 = 0;
  v42 = v32;
  v35 = (WTF::StringImpl *)&v42;
  v36 = SlowCase;
  v37 = (uint64_t)this;
  v38 = &v44;
  v39 = &v43;
  v40 = &v41;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v31, this, v27, 6, (uint64_t)&v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v41, v29);
  *((_DWORD *)v31 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDocumentType>,(WebCore::DOMConstructorID)443>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3544);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSNode>,(WebCore::DOMConstructorID)466>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSDocumentType>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSDocumentType::s_info + ~((_QWORD)&WebCore::JSDocumentType::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentType::s_info + ~((_QWORD)&WebCore::JSDocumentType::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSDocumentType::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSDocumentType::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSNode::prototype((WebCore::JSNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSDocumentTypePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSDocumentTypePrototype::create((WebCore::JSDocumentTypePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSDocumentType::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSDocumentType::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3544) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsDocumentTypeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSDocumentTypePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSDocumentType>,(WebCore::DOMConstructorID)443>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsDocumentType_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsDocumentType_publicId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsDocumentType_systemId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSDocumentType::subspaceForImpl(WebCore::JSDocumentType *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3624);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v19 = *(_QWORD *)(v9 + 3624);
  if (!v19)
  {
    v17 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v17, JSC::JSCell::numberOfLowerTierCells, &v18);
    v14 = v18;
    v19 = v18;
    v15 = *(_QWORD *)(v9 + 3624);
    *(_QWORD *)(v9 + 3624) = v18;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v16 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v19);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v16) = v14;
      *(_DWORD *)(v7 + 2844) = v16 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3624);
  *(_QWORD *)(v3 + 3624) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::DocumentType,WebCore::DocumentType>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSNode *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDocumentType::s_info + ~((_QWORD)&WebCore::JSDocumentType::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentType::s_info + ~((_QWORD)&WebCore::JSDocumentType::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDocumentType::s_info)
  {
    v22 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v22) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v22;
      if (v12 == &WebCore::JSDocumentType::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_4:
    v14 = (WebCore::JSNode *)*((_QWORD *)a1 + 7);
    v15 = (JSC::JSCell *)WebCore::JSNode::prototype(v14, a1, a3);
    Structure = WebCore::JSDocumentTypePrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSDocumentTypePrototype::create(v14, a1, Structure, v17);
    v19 = WebCore::JSDocumentType::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSDocumentType::s_info);
  }
  v20 = WebCore::JSDocumentType::create(v13, a1, a2);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), v5, v20);
  return v20;
}

uint64_t WebCore::wrap<WebCore::DocumentType>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v7 + 16 * v12);
      if (v13 == a3)
      {
LABEL_11:
        v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == a3)
            goto LABEL_11;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (v5)
          return v5;
      }
    }
  }
  *(_DWORD *)(a3 + 24) += 2;
  v18 = (WebCore::Node *)a3;
  if (*(uint64_t (***)(WebCore::Node *__hidden))a3 != off_1E33A3E18)
  {
    __break(0xC471u);
    JUMPOUT(0x194AA32C0);
  }
  v5 = WebCore::createWrapper<WebCore::DocumentType,WebCore::DocumentType>(a2, (uint64_t *)&v18, (WebCore::JSDOMGlobalObject *)a3);
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      {
        v17 = v5;
        WebCore::Node::removedLastRef(v16, v15);
        return v17;
      }
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  return v5;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSDragEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  JSC::VM *v12;
  __int16 v13;
  __int8 v14;
  BOOL v15;
  BOOL v16;
  int v17;
  WTF *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  double v29;
  double v30;
  uint64_t v31;
  JSC::VM *v32;
  WTF *v33;
  __int128 v34;
  WebCore::MouseRelatedEvent *v35;
  void *v36;
  WebCore::JSDOMGlobalObject *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  JSC::VM *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  int v50;
  unint64_t v51;
  WebCore::JSMouseEvent *v52;
  JSC::JSCell *v53;
  unint64_t Structure;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  JSCell *v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  void (***v81)(WebCore::DragEvent *__hidden);
  JSCell *v82;
  uint64_t Object;
  WTF::StringImpl *v85;
  JSC::VM *v86;
  double v87;
  BOOL v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  JSC::VM *v91;
  double v92;
  BOOL v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  JSC::VM *v96;
  double v97;
  BOOL v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  JSC::VM *v104;
  double v105;
  BOOL v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  JSC::VM *v109;
  double v110;
  BOOL v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  JSC::VM *v114;
  double v115;
  BOOL v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  JSC::VM *v119;
  double v120;
  BOOL v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  JSC::VM *v124;
  double v125;
  BOOL v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  JSC::VM *v129;
  double v130;
  BOOL v131;
  WTF::StringImpl *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  unint64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  JSC::VM *v146;
  WTF::StringImpl *v147;
  JSC::VM *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  void (***v151)(WebCore::DragEvent *__hidden);
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  void (***v154)(WebCore::DragEvent *__hidden);
  WTF::StringImpl *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  void *v158;
  WTF *v159;
  uint64_t *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  JSC::VM *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  unint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  uint64_t *v194;
  unint64_t v195;
  int v196;
  unint64_t v197;
  int v198;
  unint64_t v199;
  int v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v205;
  JSValue v208;
  char hasExceptionsAfterHandlingTraps;
  char v210;
  double v211;
  double v212;
  double v213;
  double v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  BOOL v222;
  int v223;
  uint64_t v224;
  int *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  BOOL v229;
  int v230;
  uint64_t v231;
  int *v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  BOOL v236;
  int v237;
  uint64_t v238;
  int *v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  BOOL v243;
  int v244;
  uint64_t v245;
  int *v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  BOOL v250;
  int v251;
  uint64_t v252;
  int *v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  BOOL v257;
  int v258;
  uint64_t v259;
  int *v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  BOOL v264;
  int v265;
  uint64_t v266;
  int *v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  BOOL v271;
  int v272;
  uint64_t v273;
  int *v274;
  int v275;
  unint64_t v276;
  BOOL v277;
  int v278;
  uint64_t v279;
  int *v280;
  int v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  BOOL v288;
  BOOL v289;
  BOOL v290;
  BOOL v291;
  BOOL v292;
  BOOL v293;
  BOOL v294;
  BOOL v295;
  BOOL v296;
  __int16 v297;
  __int16 v298;
  WTF *v299;
  BOOL v300;
  BOOL v301;
  BOOL v302;
  JSC::VM *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  JSC::VM *v307;
  WTF::StringImpl *v308;
  WTF *v309;
  int v310;
  int v311;
  __int16 v312;
  _BYTE v313[28];
  unint64_t v314;
  int v315;
  __int128 v316;
  __int16 v317;
  __int8 v318;
  WTF *v319;
  int v320;
  int v321;
  __int16 v322;
  _BYTE v323[28];
  unint64_t v324;
  int v325;
  __int128 v326;
  unsigned int v327;
  JSC::VM *v328;
  int v329;
  JSC::VM *v330;
  void (***v331)(WebCore::DragEvent *__hidden);

  v307 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v208.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v307, a1, v208);
  }
  v5 = a2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v7, (uint64_t)&v328);
  v8 = v329;
  if (v329)
  {
    v82 = 0;
    goto LABEL_48;
  }
  v306 = v6;
  if ((unint64_t)(*(int *)(v5 + 32) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v3 = v7;
    v9 = *(_QWORD *)(v5 + 56);
    v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v330 = v10;
    if ((v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v11 = v5;
      v305 = v9;
      v12 = (JSC::VM *)v3;
      LODWORD(v9) = 0;
      LODWORD(v2) = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      LODWORD(v26) = 0;
      v27 = 0;
      LODWORD(v7) = 0;
      v28 = 0;
      v29 = 0.0;
      goto LABEL_7;
    }
    if ((v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject((JSC::JSCell *)v9)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_444;
    }
    v31 = Object;
    WTF::AtomStringImpl::addLiteral();
    v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
    if (v308)
    {
      if (*(_DWORD *)v308 == 2)
        WTF::StringImpl::destroy(v308, v85);
      else
        *(_DWORD *)v308 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
      goto LABEL_444;
    if (v2 == 10)
    {
      v302 = 0;
      goto LABEL_65;
    }
    v86 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v2 >= 0xFFFE000000000000)
      goto LABEL_555;
    *(_QWORD *)&v87 = v2 - 0x2000000000000;
    if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v220 = v9;
      v221 = v3;
      if (v87 <= 0.0)
      {
        v222 = v87 < 0.0;
LABEL_643:
        v302 = v222;
        v3 = v221;
        v9 = v220;
        goto LABEL_64;
      }
    }
    else
    {
      if ((v2 & 0xFFFE000000000002) != 0)
      {
        v88 = v2 == 7;
        goto LABEL_63;
      }
      v220 = v9;
      v221 = v3;
      v223 = *(unsigned __int8 *)(v2 + 5);
      if (v223 == 3)
      {
        v226 = *(_DWORD *)(v2 + 8);
LABEL_637:
        v282 = v226 == 0;
        goto LABEL_638;
      }
      if (v223 == 2)
      {
        v224 = *(_QWORD *)(v2 + 8);
        if ((v224 & 1) != 0)
          v225 = (int *)(v2 + 16);
        else
          v225 = (int *)(v224 + 4);
        v226 = *v225;
        goto LABEL_637;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v282 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_638:
        v222 = !v282;
        goto LABEL_643;
      }
    }
    v222 = 1;
    goto LABEL_643;
  }
  v11 = v5;
  v12 = (JSC::VM *)v7;
  LODWORD(v9) = 0;
  LODWORD(v2) = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LODWORD(v26) = 0;
  v27 = 0;
  LODWORD(v7) = 0;
  v28 = 0;
  v330 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v29 = 0.0;
  v305 = 10;
LABEL_7:
  v30 = 0.0;
LABEL_8:
  LOBYTE(v317) = v16;
  HIBYTE(v317) = v15;
  v318 = v14;
  v319 = v18;
  v320 = v17;
  LOBYTE(v321) = v20;
  BYTE1(v321) = v24;
  BYTE2(v321) = v19;
  HIBYTE(v321) = v21;
  LOBYTE(v322) = v22;
  HIBYTE(v322) = v23;
  *(_DWORD *)v323 = v9;
  *(_DWORD *)&v323[4] = v7;
  *(double *)&v323[12] = v30;
  *(double *)&v323[20] = v29;
  v324 = __PAIR64__(v26, v2);
  LOWORD(v325) = v13;
  HIWORD(v325) = v25;
  *(_QWORD *)&v326 = v27;
  *((_QWORD *)&v326 + 1) = v28;
  v327 = 0;
  v10 = v12;
  v9 = v305;
  v6 = v306;
  v5 = v11;
  while (1)
  {
    v31 = v327;
    if (v327)
      break;
    if (!v329)
    {
      v32 = v328;
      v328 = 0;
      v330 = v32;
      LOWORD(v308) = v317;
      BYTE2(v308) = v318;
      v33 = v319;
      v319 = 0;
      v309 = v33;
      v310 = v320;
      v311 = v321;
      v312 = v322;
      *(_OWORD *)&v313[12] = *(_OWORD *)&v323[12];
      *(_OWORD *)v313 = *(_OWORD *)v323;
      v315 = v325;
      v314 = v324;
      v34 = v326;
      v326 = 0u;
      v316 = v34;
      v35 = (WebCore::MouseRelatedEvent *)bmalloc::api::isoAllocate();
      *(_QWORD *)WebCore::MouseEvent::MouseEvent(v35, 59, &v330, (int32x2_t *)&v308) = off_1E33A3FA0;
      v38 = v316;
      *((_QWORD *)v35 + 22) = *((_QWORD *)&v316 + 1);
      v331 = (void (***)(WebCore::DragEvent *__hidden))v35;
      v316 = 0u;
      if (v38)
      {
        if ((*(_BYTE *)(v38 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v38 + 24) == 2)
          {
            if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v38, v36);
          }
          else
          {
            *(_DWORD *)(v38 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 96))(v38);
        }
      }
      v39 = v309;
      v309 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          v160 = (uint64_t *)*((_QWORD *)v39 + 2);
          *((_QWORD *)v39 + 2) = 0;
          if (v160)
          {
            if (*v160)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v160, (WTF::StringImpl *)v36);
            WTF::fastFree((WTF *)v160, v36);
          }
          v161 = (unsigned int *)*((_QWORD *)v39 + 1);
          *((_QWORD *)v39 + 1) = 0;
          if (v161)
          {
            do
            {
              v162 = __ldaxr(v161);
              v163 = v162 - 1;
            }
            while (__stlxr(v163, v161));
            if (!v163)
            {
              atomic_store(1u, v161);
              WTF::fastFree((WTF *)v161, v36);
            }
          }
          WTF::fastFree(v39, v36);
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
      v40 = v330;
      v330 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = (uint64_t)v331;
      if (*v331 != off_1E33A3FA0)
      {
        __break(0xC471u);
        JUMPOUT(0x194AA4E94);
      }
      v42 = *(JSC::VM **)(v6 + 40);
      v43 = *((_QWORD *)v42 + 412);
      if (!v43)
        goto LABEL_28;
      v44 = *(_DWORD *)(v43 - 8);
      v45 = ((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) >> 22);
      v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
      v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
      v48 = v44 & ((v47 >> 31) ^ v47);
      v49 = *(char ***)(v43 + 16 * v48);
      if (v49 == &WebCore::JSDragEvent::s_info)
      {
LABEL_27:
        v51 = *(_QWORD *)(v43 + 16 * v48 + 8);
        if (!v51)
          goto LABEL_28;
      }
      else
      {
        v50 = 1;
        while (v49)
        {
          v48 = ((_DWORD)v48 + v50) & v44;
          v49 = *(char ***)(v43 + 16 * v48);
          ++v50;
          if (v49 == &WebCore::JSDragEvent::s_info)
            goto LABEL_27;
        }
LABEL_28:
        v52 = (WebCore::JSMouseEvent *)*((_QWORD *)v42 + 7);
        v53 = (JSC::JSCell *)WebCore::JSMouseEvent::prototype(v52, v42, v37);
        Structure = WebCore::JSDragEventPrototype::createStructure((uint64_t *)v52, (uint64_t)v42, v53);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v56 = (JSC::JSCell *)WebCore::JSDragEventPrototype::create(v52, v42, Structure, v55);
        v57 = WebCore::JSDragEvent::createStructure((uint64_t *)v52, (uint64_t)v42, v56);
        v51 = WebCore::cacheDOMStructure((JSCell *)v42, v57, (uint64_t)&WebCore::JSDragEvent::s_info);
      }
      v58 = (JSCell *)WebCore::JSDragEvent::create(v51, v42, (uint64_t *)&v331);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v42 + 415), v41, (uint64_t)v58);
      v59 = *(JSC::JSCell **)(v5 + 40);
      if (((unint64_t)v59 & 0xFFFE000000000002) != 0
        || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
        || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(v5 + 24))
        || (v63 = (JSC::VM *)*((_QWORD *)a1 + 7),
            FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v60, v61),
            *((_DWORD *)v63 + 20))
        && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
      {
LABEL_42:
        if (*((_DWORD *)v307 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v307) & 1) != 0)
          v58 = 0;
        v81 = v331;
        v331 = 0;
        if (v81)
        {
          if (*((_DWORD *)v81 + 4) == 1)
            (*v81)[1]((WebCore::DragEvent *)v81);
          else
            --*((_DWORD *)v81 + 4);
        }
        goto LABEL_46;
      }
      v67 = *((_QWORD *)FunctionRealm + 412);
      if (v67)
      {
        v68 = *(_DWORD *)(v67 - 8);
        v69 = ((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) >> 22);
        v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
        v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
        v72 = v68 & ((v71 >> 31) ^ v71);
        v73 = *(char ***)(v67 + 16 * v72);
        if (v73 != &WebCore::JSDragEvent::s_info)
        {
          v74 = 1;
          while (v73)
          {
            v72 = ((_DWORD)v72 + v74) & v68;
            v73 = *(char ***)(v67 + 16 * v72);
            ++v74;
            if (v73 == &WebCore::JSDragEvent::s_info)
              goto LABEL_38;
          }
          goto LABEL_39;
        }
LABEL_38:
        v64 = *(WebCore::JSDOMGlobalObject **)(v67 + 16 * v72 + 8);
        if (!v64)
          goto LABEL_39;
      }
      else
      {
LABEL_39:
        v75 = (JSC::JSCell *)WebCore::JSMouseEvent::prototype(v63, FunctionRealm, v64);
        v76 = WebCore::JSDragEventPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
        *(_DWORD *)(v76 + 16) |= 0x80000u;
        v78 = (JSC::JSCell *)WebCore::JSDragEventPrototype::create(v63, FunctionRealm, v76, v77);
        v79 = WebCore::JSDragEvent::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
        v64 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSDragEvent::s_info);
      }
      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v62, v64, v65);
      if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
        JSC::JSObject::setStructure(v58, v63, SubclassStructure);
      goto LABEL_42;
    }
    v86 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_555:
    v88 = (_DWORD)v2 != 0;
LABEL_63:
    v302 = v88;
LABEL_64:
    if (*((_DWORD *)v86 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v86))
    {
LABEL_444:
      v327 = 1;
      v10 = (JSC::VM *)v3;
    }
    else
    {
LABEL_65:
      WTF::AtomStringImpl::addLiteral();
      v89 = v308;
      v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v90);
        else
          *(_DWORD *)v89 -= 2;
      }
      if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
        goto LABEL_444;
      if (v2 == 10)
      {
        v301 = 0;
        goto LABEL_77;
      }
      v91 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v2 >= 0xFFFE000000000000)
      {
        v93 = (_DWORD)v2 != 0;
      }
      else
      {
        *(_QWORD *)&v92 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v227 = v9;
          v228 = v3;
          if (v92 <= 0.0)
          {
            v229 = v92 < 0.0;
            goto LABEL_693;
          }
LABEL_647:
          v229 = 1;
          goto LABEL_693;
        }
        if ((v2 & 0xFFFE000000000002) == 0)
        {
          v227 = v9;
          v228 = v3;
          v230 = *(unsigned __int8 *)(v2 + 5);
          if (v230 == 3)
          {
            v233 = *(_DWORD *)(v2 + 8);
            goto LABEL_645;
          }
          if (v230 == 2)
          {
            v231 = *(_QWORD *)(v2 + 8);
            if ((v231 & 1) != 0)
              v232 = (int *)(v2 + 16);
            else
              v232 = (int *)(v231 + 4);
            v233 = *v232;
LABEL_645:
            v283 = v233 == 0;
LABEL_690:
            v229 = !v283;
LABEL_693:
            v301 = v229;
            v3 = v228;
            v9 = v227;
            goto LABEL_76;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v283 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_690;
          }
          goto LABEL_647;
        }
        v93 = v2 == 7;
      }
      v301 = v93;
LABEL_76:
      if (*((_DWORD *)v91 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v91))
        goto LABEL_444;
LABEL_77:
      WTF::AtomStringImpl::addLiteral();
      v94 = v308;
      v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v95);
        else
          *(_DWORD *)v94 -= 2;
      }
      if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
        goto LABEL_444;
      if (v2 != 10)
      {
        v96 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v97 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v234 = v9;
            v235 = v3;
            if (v97 <= 0.0)
            {
              v236 = v97 < 0.0;
              goto LABEL_698;
            }
          }
          else
          {
            if ((v2 & 0xFFFE000000000002) != 0)
            {
              v98 = v2 == 7;
              goto LABEL_87;
            }
            v234 = v9;
            v235 = v3;
            v237 = *(unsigned __int8 *)(v2 + 5);
            if (v237 == 3)
            {
              v240 = *(_DWORD *)(v2 + 8);
              goto LABEL_649;
            }
            if (v237 == 2)
            {
              v238 = *(_QWORD *)(v2 + 8);
              if ((v238 & 1) != 0)
                v239 = (int *)(v2 + 16);
              else
                v239 = (int *)(v238 + 4);
              v240 = *v239;
LABEL_649:
              v284 = v240 == 0;
LABEL_695:
              v236 = !v284;
LABEL_698:
              v300 = v236;
              v3 = v235;
              v9 = v234;
LABEL_88:
              if (*((_DWORD *)v96 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v96))
                goto LABEL_444;
              goto LABEL_89;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v284 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_695;
            }
          }
          v236 = 1;
          goto LABEL_698;
        }
        v98 = (_DWORD)v2 != 0;
LABEL_87:
        v300 = v98;
        goto LABEL_88;
      }
      v300 = 0;
LABEL_89:
      WTF::AtomStringImpl::addLiteral();
      v2 = (unint64_t)v308;
      v304 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
      if (v2)
      {
        if (*(_DWORD *)v2 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v2, v99);
        else
          *(_DWORD *)v2 -= 2;
      }
      if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
        goto LABEL_444;
      if (v304 == 10)
      {
        LODWORD(v304) = 0;
      }
      else
      {
        v308 = (WTF::StringImpl *)v304;
        v2 = *((_QWORD *)a1 + 7);
        if (v304 < 0xFFFE000000000000)
        {
          v174 = v304 - 0x2000000000000;
          if (v304 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
            v174 = v215;
          }
          v175 = (v174 >> 52) & 0x7FF;
          if ((v175 - 1023) <= 0x53)
          {
            v191 = v174 >> (51 - (v174 >> 52));
            if (v175 > 0x433)
              LODWORD(v191) = v174 << ((v174 >> 52) - 51);
            if (v175 >= 0x41F)
              v192 = v191;
            else
              v192 = (((1 << ((v174 >> 52) + 1)) - 1) & v191) + (1 << ((v174 >> 52) + 1));
            if ((v174 & 0x8000000000000000) == 0)
              v193 = v192;
            else
              v193 = -v192;
            LODWORD(v304) = v193;
          }
          else
          {
            LODWORD(v304) = 0;
          }
        }
        if (*(_DWORD *)(v2 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
          goto LABEL_264;
      }
      WTF::AtomStringImpl::addLiteral();
      v100 = v308;
      v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v101);
        else
          *(_DWORD *)v100 -= 2;
      }
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      {
LABEL_264:
        v159 = 0;
        v10 = (JSC::VM *)v3;
LABEL_265:
        v327 = 1;
        if (v159)
          goto LABEL_315;
      }
      else
      {
        if ((v2 | 8) == 0xA)
        {
          v299 = 0;
        }
        else
        {
          v308 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
          if ((v2 & 0xFFFE000000000002) != 0
            || *(unsigned __int8 *)(v2 + 5) < 0x17u
            || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C))
            || (v2 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 3408),
                !(*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 104))(v2))
            || (v185 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 104))(v2),
                (v186 = *(_DWORD **)(v185 + 112)) == 0))
          {
            JSC::throwTypeError();
            goto LABEL_264;
          }
          v299 = *(WTF **)(v185 + 112);
          ++*v186;
        }
        WTF::AtomStringImpl::addLiteral();
        v102 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, v103);
          else
            *(_DWORD *)v102 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        {
LABEL_528:
          v10 = (JSC::VM *)v3;
LABEL_529:
          v159 = v299;
          goto LABEL_265;
        }
        if (v2 == 10)
        {
          v296 = 0;
          goto LABEL_115;
        }
        v104 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
        {
          v106 = (_DWORD)v2 != 0;
        }
        else
        {
          *(_QWORD *)&v105 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v241 = v9;
            v242 = v3;
            if (v105 <= 0.0)
            {
              v243 = v105 < 0.0;
              goto LABEL_703;
            }
LABEL_655:
            v243 = 1;
            goto LABEL_703;
          }
          if ((v2 & 0xFFFE000000000002) == 0)
          {
            v241 = v9;
            v242 = v3;
            v244 = *(unsigned __int8 *)(v2 + 5);
            if (v244 == 3)
            {
              v247 = *(_DWORD *)(v2 + 8);
              goto LABEL_653;
            }
            if (v244 == 2)
            {
              v245 = *(_QWORD *)(v2 + 8);
              if ((v245 & 1) != 0)
                v246 = (int *)(v2 + 16);
              else
                v246 = (int *)(v245 + 4);
              v247 = *v246;
LABEL_653:
              v285 = v247 == 0;
LABEL_700:
              v243 = !v285;
LABEL_703:
              v296 = v243;
              v3 = v242;
              v9 = v241;
              goto LABEL_114;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v285 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_700;
            }
            goto LABEL_655;
          }
          v106 = v2 == 7;
        }
        v296 = v106;
LABEL_114:
        if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
          goto LABEL_528;
LABEL_115:
        WTF::AtomStringImpl::addLiteral();
        v107 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v108);
          else
            *(_DWORD *)v107 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_528;
        if (v2 == 10)
        {
          v295 = 0;
          goto LABEL_127;
        }
        v109 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
        {
          v111 = (_DWORD)v2 != 0;
        }
        else
        {
          *(_QWORD *)&v110 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v248 = v9;
            v249 = v3;
            if (v110 <= 0.0)
            {
              v250 = v110 < 0.0;
              goto LABEL_663;
            }
LABEL_662:
            v250 = 1;
            goto LABEL_663;
          }
          if ((v2 & 0xFFFE000000000002) == 0)
          {
            v248 = v9;
            v249 = v3;
            v251 = *(unsigned __int8 *)(v2 + 5);
            if (v251 == 3)
            {
              v254 = *(_DWORD *)(v2 + 8);
              goto LABEL_657;
            }
            if (v251 == 2)
            {
              v252 = *(_QWORD *)(v2 + 8);
              if ((v252 & 1) != 0)
                v253 = (int *)(v2 + 16);
              else
                v253 = (int *)(v252 + 4);
              v254 = *v253;
LABEL_657:
              v286 = v254 == 0;
LABEL_658:
              v250 = !v286;
LABEL_663:
              v295 = v250;
              v3 = v249;
              v9 = v248;
              goto LABEL_126;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v286 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_658;
            }
            goto LABEL_662;
          }
          v111 = v2 == 7;
        }
        v295 = v111;
LABEL_126:
        if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
          goto LABEL_528;
LABEL_127:
        WTF::AtomStringImpl::addLiteral();
        v112 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
            WTF::StringImpl::destroy(v112, v113);
          else
            *(_DWORD *)v112 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_528;
        if (v2 == 10)
        {
          v294 = 0;
          goto LABEL_139;
        }
        v114 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
        {
          v116 = (_DWORD)v2 != 0;
        }
        else
        {
          *(_QWORD *)&v115 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v255 = v9;
            v256 = v3;
            if (v115 <= 0.0)
            {
              v257 = v115 < 0.0;
              goto LABEL_709;
            }
LABEL_667:
            v257 = 1;
            goto LABEL_709;
          }
          if ((v2 & 0xFFFE000000000002) == 0)
          {
            v255 = v9;
            v256 = v3;
            v258 = *(unsigned __int8 *)(v2 + 5);
            if (v258 == 3)
            {
              v261 = *(_DWORD *)(v2 + 8);
              goto LABEL_665;
            }
            if (v258 == 2)
            {
              v259 = *(_QWORD *)(v2 + 8);
              if ((v259 & 1) != 0)
                v260 = (int *)(v2 + 16);
              else
                v260 = (int *)(v259 + 4);
              v261 = *v260;
LABEL_665:
              v287 = v261 == 0;
LABEL_706:
              v257 = !v287;
LABEL_709:
              v294 = v257;
              v3 = v256;
              v9 = v255;
              goto LABEL_138;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v287 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_706;
            }
            goto LABEL_667;
          }
          v116 = v2 == 7;
        }
        v294 = v116;
LABEL_138:
        if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
          goto LABEL_528;
LABEL_139:
        WTF::AtomStringImpl::addLiteral();
        v117 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, v118);
          else
            *(_DWORD *)v117 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_528;
        if (v2 == 10)
        {
          v293 = 0;
          goto LABEL_151;
        }
        v119 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
        {
          v121 = (_DWORD)v2 != 0;
        }
        else
        {
          *(_QWORD *)&v120 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v262 = v9;
            v263 = v3;
            if (v120 <= 0.0)
            {
              v264 = v120 < 0.0;
              goto LABEL_675;
            }
LABEL_674:
            v264 = 1;
            goto LABEL_675;
          }
          if ((v2 & 0xFFFE000000000002) == 0)
          {
            v262 = v9;
            v263 = v3;
            v265 = *(unsigned __int8 *)(v2 + 5);
            if (v265 == 3)
            {
              v268 = *(_DWORD *)(v2 + 8);
              goto LABEL_669;
            }
            if (v265 == 2)
            {
              v266 = *(_QWORD *)(v2 + 8);
              if ((v266 & 1) != 0)
                v267 = (int *)(v2 + 16);
              else
                v267 = (int *)(v266 + 4);
              v268 = *v267;
LABEL_669:
              v288 = v268 == 0;
LABEL_670:
              v264 = !v288;
LABEL_675:
              v293 = v264;
              v3 = v263;
              v9 = v262;
              goto LABEL_150;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v288 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_670;
            }
            goto LABEL_674;
          }
          v121 = v2 == 7;
        }
        v293 = v121;
LABEL_150:
        if (*((_DWORD *)v119 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v119) & 1) != 0)
          goto LABEL_528;
LABEL_151:
        WTF::AtomStringImpl::addLiteral();
        v122 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, v123);
          else
            *(_DWORD *)v122 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_528;
        if (v2 == 10)
        {
          v292 = 0;
          goto LABEL_163;
        }
        v124 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
        {
          v126 = (_DWORD)v2 != 0;
        }
        else
        {
          *(_QWORD *)&v125 = v2 - 0x2000000000000;
          if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v269 = v9;
            v270 = v3;
            if (v125 <= 0.0)
            {
              v271 = v125 < 0.0;
              goto LABEL_683;
            }
LABEL_682:
            v271 = 1;
            goto LABEL_683;
          }
          if ((v2 & 0xFFFE000000000002) == 0)
          {
            v269 = v9;
            v270 = v3;
            v272 = *(unsigned __int8 *)(v2 + 5);
            if (v272 == 3)
            {
              v275 = *(_DWORD *)(v2 + 8);
              goto LABEL_677;
            }
            if (v272 == 2)
            {
              v273 = *(_QWORD *)(v2 + 8);
              if ((v273 & 1) != 0)
                v274 = (int *)(v2 + 16);
              else
                v274 = (int *)(v273 + 4);
              v275 = *v274;
LABEL_677:
              v289 = v275 == 0;
LABEL_678:
              v271 = !v289;
LABEL_683:
              v292 = v271;
              v3 = v270;
              v9 = v269;
              goto LABEL_162;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v289 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_678;
            }
            goto LABEL_682;
          }
          v126 = v2 == 7;
        }
        v292 = v126;
LABEL_162:
        if (*((_DWORD *)v124 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v124) & 1) != 0)
          goto LABEL_528;
LABEL_163:
        WTF::AtomStringImpl::addLiteral();
        v127 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v127)
        {
          if (*(_DWORD *)v127 == 2)
            WTF::StringImpl::destroy(v127, v128);
          else
            *(_DWORD *)v127 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_528;
        if (v2 != 10)
        {
          v129 = (JSC::VM *)*((_QWORD *)a1 + 7);
          v10 = (JSC::VM *)v3;
          if (v2 < 0xFFFE000000000000)
          {
            *(_QWORD *)&v130 = v2 - 0x2000000000000;
            if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v276 = v9;
              if (v130 <= 0.0)
              {
                v277 = v130 < 0.0;
                goto LABEL_716;
              }
            }
            else
            {
              if ((v2 & 0xFFFE000000000002) != 0)
              {
                v131 = v2 == 7;
                goto LABEL_173;
              }
              v276 = v9;
              v278 = *(unsigned __int8 *)(v2 + 5);
              if (v278 == 3)
              {
                v281 = *(_DWORD *)(v2 + 8);
                goto LABEL_685;
              }
              if (v278 == 2)
              {
                v279 = *(_QWORD *)(v2 + 8);
                if ((v279 & 1) != 0)
                  v280 = (int *)(v2 + 16);
                else
                  v280 = (int *)(v279 + 4);
                v281 = *v280;
LABEL_685:
                v290 = v281 == 0;
LABEL_713:
                v277 = !v290;
LABEL_716:
                v291 = v277;
                v9 = v276;
LABEL_174:
                if (*((_DWORD *)v129 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v129) & 1) != 0)
                  goto LABEL_529;
                goto LABEL_175;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v290 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_713;
              }
            }
            v277 = 1;
            goto LABEL_716;
          }
          v131 = (_DWORD)v2 != 0;
LABEL_173:
          v291 = v131;
          goto LABEL_174;
        }
        v291 = 0;
        v10 = (JSC::VM *)v3;
LABEL_175:
        WTF::AtomStringImpl::addLiteral();
        v2 = (unint64_t)v308;
        v3 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v2)
        {
          if (*(_DWORD *)v2 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v2, v132);
          else
            *(_DWORD *)v2 -= 2;
        }
        v303 = v330;
        if (*((_DWORD *)v330 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v330) & 1) != 0)
          goto LABEL_529;
        v305 = v9;
        if (v3 == 10)
        {
          v3 = 0;
        }
        else
        {
          v308 = (WTF::StringImpl *)v3;
          if (v3 < 0xFFFE000000000000)
          {
            v2 = *((_QWORD *)a1 + 7);
            if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v133 = v213;
            }
            else
            {
              *(_QWORD *)&v133 = v3 - 0x2000000000000;
            }
            if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
              goto LABEL_547;
            v3 = 0;
            if (fabs(v133) != INFINITY && v133 != 0.0)
            {
              v134 = -floor(-v133);
              v135 = floor(v133);
              if (v133 >= 0.0)
                v134 = v135;
              v136 = fmod(v134, 65536.0);
              if (v136 > 32767.0)
                v136 = v136 + -65536.0;
              v3 = (int)v136;
            }
          }
        }
        WTF::AtomStringImpl::addLiteral();
        v137 = v308;
        v139 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v137)
        {
          if (*(_DWORD *)v137 == 2)
          {
            v176 = v137;
            v177 = v139;
            WTF::StringImpl::destroy(v176, v138);
            v139 = v177;
          }
          else
          {
            *(_DWORD *)v137 -= 2;
          }
        }
        if (*((_DWORD *)v303 + 20))
        {
          v2 = v139;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v303);
          v139 = v2;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            goto LABEL_547;
        }
        if (v139 == 10)
        {
          v298 = 0;
        }
        else
        {
          v308 = (WTF::StringImpl *)v139;
          v2 = *((_QWORD *)a1 + 7);
          if (v139 < 0xFFFE000000000000 || (v139 & 0x80000000) != 0)
          {
            if (v139 >= 0xFFFE000000000000)
            {
              v140 = (double)(int)v139;
            }
            else if (v139 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v140 = v214;
            }
            else
            {
              *(_QWORD *)&v140 = v139 - 0x2000000000000;
            }
            if (*(_DWORD *)(v2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
              goto LABEL_547;
            LOWORD(v139) = 0;
            if (fabs(v140) != INFINITY && v140 != 0.0)
            {
              v141 = -floor(-v140);
              v142 = floor(v140);
              if (v140 >= 0.0)
                v141 = v142;
              v143 = fmod(v141, 65536.0);
              if (v143 < 0.0)
                v143 = v143 + 65536.0;
              LODWORD(v139) = (int)v143;
            }
          }
          v298 = v139;
        }
        WTF::AtomStringImpl::addLiteral();
        v144 = v308;
        v2 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v145);
          else
            *(_DWORD *)v144 -= 2;
        }
        if (*((_DWORD *)v303 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) != 0)
        {
LABEL_547:
          v327 = 1;
          goto LABEL_297;
        }
        v297 = v3;
        if (v2 == 10)
        {
          LODWORD(v2) = 0;
        }
        else
        {
          v308 = (WTF::StringImpl *)v2;
          v146 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v2 < 0xFFFE000000000000)
          {
            v181 = v2 - 0x2000000000000;
            if (v2 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v181 = v216;
            }
            v182 = (v181 >> 52) & 0x7FF;
            if ((v182 - 1023) <= 0x53)
            {
              v195 = v181 >> (51 - (v181 >> 52));
              if (v182 > 0x433)
                LODWORD(v195) = v181 << ((v181 >> 52) - 51);
              if (v182 >= 0x41F)
                v196 = v195;
              else
                v196 = (((1 << ((v181 >> 52) + 1)) - 1) & v195) + (1 << ((v181 >> 52) + 1));
              if ((v181 & 0x8000000000000000) == 0)
                LODWORD(v2) = v196;
              else
                LODWORD(v2) = -v196;
            }
            else
            {
              LODWORD(v2) = 0;
            }
          }
          if (*((_DWORD *)v146 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v146))
            goto LABEL_547;
        }
        WTF::AtomStringImpl::addLiteral();
        v3 = (unint64_t)v308;
        v26 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v3, v147);
          else
            *(_DWORD *)v3 -= 2;
        }
        if (*((_DWORD *)v303 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) != 0)
          goto LABEL_547;
        if (v26 == 10)
        {
          LODWORD(v26) = 0;
        }
        else
        {
          v308 = (WTF::StringImpl *)v26;
          v148 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v26 < 0xFFFE000000000000)
          {
            v183 = v26 - 0x2000000000000;
            if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v183 = v217;
            }
            v184 = (v183 >> 52) & 0x7FF;
            if ((v184 - 1023) <= 0x53)
            {
              v197 = v183 >> (51 - (v183 >> 52));
              if (v184 > 0x433)
                LODWORD(v197) = v183 << ((v183 >> 52) - 51);
              if (v184 >= 0x41F)
                v198 = v197;
              else
                v198 = (((1 << ((v183 >> 52) + 1)) - 1) & v197) + (1 << ((v183 >> 52) + 1));
              if ((v183 & 0x8000000000000000) == 0)
                LODWORD(v26) = v198;
              else
                LODWORD(v26) = -v198;
            }
            else
            {
              LODWORD(v26) = 0;
            }
          }
          if (*((_DWORD *)v148 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v148))
            goto LABEL_295;
        }
        WTF::AtomStringImpl::addLiteral();
        v149 = v308;
        v3 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
        if (v149)
        {
          if (*(_DWORD *)v149 == 2)
            WTF::StringImpl::destroy(v149, v150);
          else
            *(_DWORD *)v149 -= 2;
        }
        if (*((_DWORD *)v303 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) != 0)
        {
LABEL_295:
          v327 = 1;
LABEL_296:
          v6 = v306;
LABEL_297:
          v159 = v299;
          if (v299)
            goto LABEL_315;
        }
        else
        {
          v30 = 0.0;
          if (v3 != 10)
          {
            v308 = (WTF::StringImpl *)v3;
            v151 = (void (***)(WebCore::DragEvent *__hidden))*((_QWORD *)a1 + 7);
            v331 = v151;
            if (v3 >= 0xFFFE000000000000)
            {
              v30 = (double)(int)v3;
            }
            else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v30 = v211;
            }
            else
            {
              *(_QWORD *)&v30 = v3 - 0x2000000000000;
            }
            if (*((_DWORD *)v151 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v151) & 1) != 0)
              goto LABEL_295;
            if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              goto LABEL_502;
          }
          WTF::AtomStringImpl::addLiteral();
          v152 = v308;
          v3 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
          if (v152)
          {
            if (*(_DWORD *)v152 == 2)
              WTF::StringImpl::destroy(v152, v153);
            else
              *(_DWORD *)v152 -= 2;
          }
          if (*((_DWORD *)v303 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) != 0)
            goto LABEL_295;
          v29 = 0.0;
          if (v3 != 10)
          {
            v308 = (WTF::StringImpl *)v3;
            v154 = (void (***)(WebCore::DragEvent *__hidden))*((_QWORD *)a1 + 7);
            v331 = v154;
            if (v3 >= 0xFFFE000000000000)
            {
              v29 = (double)(int)v3;
            }
            else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
              v29 = v212;
            }
            else
            {
              *(_QWORD *)&v29 = v3 - 0x2000000000000;
            }
            if (*((_DWORD *)v154 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v154) & 1) != 0)
              goto LABEL_295;
            if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
LABEL_502:
              JSC::throwTypeError();
              goto LABEL_295;
            }
          }
          WTF::AtomStringImpl::addLiteral();
          v3 = (unint64_t)v308;
          v156 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
          if (v3)
          {
            if (*(_DWORD *)v3 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v3, v155);
            else
              *(_DWORD *)v3 -= 2;
          }
          if (*((_DWORD *)v303 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) != 0)
            goto LABEL_295;
          if ((v156 | 8) == 0xA)
          {
            v11 = v5;
            v12 = v10;
            v27 = 0;
            goto LABEL_254;
          }
          v308 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
          if ((v156 & 0xFFFE000000000002) != 0)
            goto LABEL_294;
          v172 = *(unsigned int *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x4C);
          v173 = 16 * v172;
          if ((char **)(16 * v172) == &WebCore::JSWindowProxy::s_info)
          {
            v194 = (uint64_t *)(*(_QWORD *)(v156 + 16) + 3408);
            goto LABEL_429;
          }
          if (!(_DWORD)v172 || (char **)v173 == &WebCore::JSDOMWindow::s_info)
          {
            if (!(_DWORD)v172)
              goto LABEL_294;
LABEL_428:
            v194 = (uint64_t *)(v156 + 3408);
LABEL_429:
            v27 = *v194;
            if (!*v194)
              goto LABEL_294;
            goto LABEL_430;
          }
          v203 = 16 * v172;
          do
            v203 = *(_QWORD *)(v203 + 16);
          while ((char **)v203 != &WebCore::JSDOMWindow::s_info && v203 != 0);
          if (v203)
            goto LABEL_428;
          if ((char **)v173 != &WebCore::JSWorkerGlobalScope::s_info)
          {
            v205 = v173;
            do
              v205 = *(_QWORD *)(v205 + 16);
            while ((char **)v205 != &WebCore::JSWorkerGlobalScope::s_info && v205 != 0);
            if (!v205)
            {
              if ((char **)v173 != &WebCore::JSEventTarget::s_info)
              {
                do
                  v173 = *(_QWORD *)(v173 + 16);
                while ((char **)v173 != &WebCore::JSEventTarget::s_info && v173 != 0);
                if (!v173)
                {
LABEL_294:
                  JSC::throwTypeError();
                  goto LABEL_295;
                }
              }
              v194 = (uint64_t *)(v156 + 24);
              goto LABEL_429;
            }
          }
          v27 = *(_QWORD *)(v156 + 3400) + 320;
LABEL_430:
          v11 = v5;
          v12 = v10;
          if ((*(_BYTE *)(v27 + 22) & 2) != 0)
            *(_DWORD *)(v27 + 24) += 2;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27);
LABEL_254:
          WTF::AtomStringImpl::addLiteral();
          v3 = (unint64_t)v308;
          v9 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
          if (v3)
          {
            if (*(_DWORD *)v3 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v3, v157);
            else
              *(_DWORD *)v3 -= 2;
          }
          if (!*((_DWORD *)v303 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) == 0)
          {
            if (v9 == 10)
            {
              LODWORD(v9) = 0;
            }
            else
            {
              v308 = (WTF::StringImpl *)v9;
              v164 = (JSC::VM *)*((_QWORD *)a1 + 7);
              if (v9 < 0xFFFE000000000000)
              {
                v187 = v9 - 0x2000000000000;
                if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
                  v187 = v218;
                }
                v188 = (v187 >> 52) & 0x7FF;
                if ((v188 - 1023) <= 0x53)
                {
                  v199 = v187 >> (51 - (v187 >> 52));
                  if (v188 > 0x433)
                    LODWORD(v199) = v187 << ((v187 >> 52) - 51);
                  if (v188 >= 0x41F)
                    v200 = v199;
                  else
                    v200 = (((1 << ((v187 >> 52) + 1)) - 1) & v199) + (1 << ((v187 >> 52) + 1));
                  if ((v187 & 0x8000000000000000) == 0)
                    LODWORD(v9) = v200;
                  else
                    LODWORD(v9) = -v200;
                }
                else
                {
                  LODWORD(v9) = 0;
                }
              }
              if (*((_DWORD *)v164 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v164) & 1) != 0)
                goto LABEL_310;
            }
            WTF::AtomStringImpl::addLiteral();
            v3 = (unint64_t)v308;
            v7 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
            if (v3)
            {
              if (*(_DWORD *)v3 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v3, v165);
              else
                *(_DWORD *)v3 -= 2;
            }
            if (!*((_DWORD *)v303 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v303) & 1) == 0)
            {
              if (v7 == 10)
              {
                LODWORD(v7) = 0;
              }
              else
              {
                v308 = (WTF::StringImpl *)v7;
                v3 = *((_QWORD *)a1 + 7);
                if (v7 < 0xFFFE000000000000)
                {
                  v189 = v7 - 0x2000000000000;
                  if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v308, a1);
                    v189 = v219;
                  }
                  v190 = (v189 >> 52) & 0x7FF;
                  if ((v190 - 1023) <= 0x53)
                  {
                    v201 = v189 >> (51 - (v189 >> 52));
                    if (v190 > 0x433)
                      LODWORD(v201) = v189 << ((v189 >> 52) - 51);
                    if (v190 >= 0x41F)
                      v202 = v201;
                    else
                      v202 = (((1 << ((v189 >> 52) + 1)) - 1) & v201) + (1 << ((v189 >> 52) + 1));
                    if ((v189 & 0x8000000000000000) == 0)
                      LODWORD(v7) = v202;
                    else
                      LODWORD(v7) = -v202;
                  }
                  else
                  {
                    LODWORD(v7) = 0;
                  }
                }
                if (*(_DWORD *)(v3 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3))
                  goto LABEL_310;
              }
              WTF::AtomStringImpl::addLiteral();
              v3 = (unint64_t)v308;
              v167 = JSC::JSObject::get((JSC::Structure *)v31, a1, (unint64_t)v308);
              v25 = v298;
              if (v3)
              {
                if (*(_DWORD *)v3 == 2)
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v3, v166);
                  v25 = v298;
                }
                else
                {
                  *(_DWORD *)v3 -= 2;
                }
              }
              if (!*((_DWORD *)v303 + 20)
                || (v210 = JSC::VM::hasExceptionsAfterHandlingTraps(v303), v25 = v298, (v210 & 1) == 0))
              {
                if ((v167 | 8) == 0xA)
                {
                  v28 = 0;
                  v15 = v301;
                  v16 = v302;
                  v14 = v300;
                  v18 = v299;
                  v17 = v304;
                  v20 = v295;
                  v19 = v296;
                  v22 = v293;
                  v21 = v294;
                  v24 = v291;
                  v23 = v292;
                  v13 = v297;
                  goto LABEL_8;
                }
                v308 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
                v17 = v304;
                v13 = v297;
                if ((v167 & 0xFFFE000000000002) == 0)
                {
                  v168 = *(unsigned int *)(16 * (*(_DWORD *)v167 & 0xFFFFFFFE) + 0x4C);
                  v169 = *(_DWORD *)(16 * (*(_DWORD *)v167 & 0xFFFFFFFE) + 0x4C) != 0;
                  if ((_DWORD)v168)
                  {
                    v170 = 16 * v168;
                    if ((char **)v170 != &WebCore::JSDataTransfer::s_info)
                    {
                      do
                      {
                        v170 = *(_QWORD *)(v170 + 16);
                        v169 = v170 != 0;
                      }
                      while ((char **)v170 != &WebCore::JSDataTransfer::s_info && v170 != 0);
                    }
                  }
                  if (v169)
                  {
                    v28 = *(_DWORD **)(v167 + 24);
                    if (v28)
                    {
                      ++*v28;
                      v15 = v301;
                      v16 = v302;
                      v14 = v300;
                      v18 = v299;
                      v20 = v295;
                      v19 = v296;
                      v22 = v293;
                      v21 = v294;
                      v24 = v291;
                      v23 = v292;
                      goto LABEL_8;
                    }
                  }
                }
                JSC::throwTypeError();
              }
            }
          }
LABEL_310:
          v327 = 1;
          if (!v27)
          {
            v10 = v12;
            v9 = v305;
            v5 = v11;
            goto LABEL_296;
          }
          v10 = v12;
          v9 = v305;
          v159 = v299;
          if ((*(_BYTE *)(v27 + 22) & 2) != 0)
          {
            v5 = v11;
            if (*(_DWORD *)(v27 + 24) == 2)
            {
              if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v27, v158);
            }
            else
            {
              *(_DWORD *)(v27 + 24) -= 2;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
            v5 = v11;
          }
          v6 = v306;
          if (v299)
          {
LABEL_315:
            if (*(_DWORD *)v159 == 1)
            {
              v2 = *((_QWORD *)v159 + 2);
              *((_QWORD *)v159 + 2) = 0;
              if (v2)
              {
                if (*(_QWORD *)v2)
                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*(_QWORD *)v2, (WTF::StringImpl *)v158);
                WTF::fastFree((WTF *)v2, v158);
              }
              v178 = (unsigned int *)*((_QWORD *)v159 + 1);
              *((_QWORD *)v159 + 1) = 0;
              if (v178)
              {
                do
                {
                  v179 = __ldaxr(v178);
                  v180 = v179 - 1;
                }
                while (__stlxr(v180, v178));
                if (!v180)
                {
                  atomic_store(1u, v178);
                  WTF::fastFree((WTF *)v178, v158);
                }
              }
              WTF::fastFree(v159, v158);
            }
            else
            {
              --*(_DWORD *)v159;
            }
          }
        }
      }
    }
  }
  v58 = 0;
  v82 = 0;
  if (v327 != -1)
  {
LABEL_46:
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E3271580[v31])(&v308, &v317);
    v82 = v58;
  }
  v8 = v329;
LABEL_48:
  if (v8 != -1)
    ((void (*)(__int16 *, JSC::VM **))off_1E32712B8[v8])(&v317, &v328);
  return v82;
}

uint64_t WebCore::JSDragEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSMouseEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSMouseEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSMouseEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDragEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDragEventPrototype::create(WebCore::JSDragEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSDragEvent::s_info, (uint64_t)&WebCore::JSDragEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDragEvent>,(WebCore::DOMConstructorID)444>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3552);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMouseEvent>,(WebCore::DOMConstructorID)461>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSDragEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSDragEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSDragEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSMouseEvent::prototype((WebCore::JSMouseEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSDragEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSDragEventPrototype::create((WebCore::JSDragEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSDragEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSDragEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3552) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsDragEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSDragEventPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDragEvent>,(WebCore::DOMConstructorID)444>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsDragEvent_dataTransfer(uint64_t a1, uint64_t a2)
{
  WebCore::DataTransfer *v2;

  v2 = *(WebCore::DataTransfer **)(*(_QWORD *)(a2 + 24) + 176);
  if (v2)
    return WebCore::wrap<WebCore::DataTransfer>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSDragEvent::subspaceForImpl(WebCore::JSDragEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3632);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3632))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3632);
    *(_QWORD *)(v8 + 3632) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3632);
  *(_QWORD *)(v3 + 3632) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSDynamicsCompressorNode>::construct(WebCore::AudioNode **a1, uint64_t a2)
{
  WebCore::AudioNode *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  JSCell *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v21;
  JSC::JSCell *v22;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  char v32;
  float v33;
  float v34;
  float v35;
  float v36;
  void *v37;
  float v38;
  WTF::StringImpl *v39;
  WebCore::AudioNode *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WebCore::JSDOMGlobalObject *v43;
  int v44;
  unsigned __int8 v45;
  JSC::VM *v46;
  WebCore::AudioNode *v47;
  WebCore::AudioNode *v48;
  JSC::JSCell *v49;
  JSC::JSGlobalObject *v50;
  JSC::JSObject *v51;
  JSC::JSGlobalObject *v52;
  JSC::VM *v53;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::VM *FunctionRealm;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  int v64;
  JSC::JSCell *v65;
  unint64_t Structure;
  JSC::Structure *v67;
  JSC::JSCell *v68;
  uint64_t v69;
  unint64_t SubclassStructure;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  WebCore::AudioNode *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  WebCore::AudioNode *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WebCore::AudioNode *v82;
  JSC::VM *v83;
  double v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WebCore::AudioNode *v87;
  JSC::VM *v88;
  double v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WebCore::AudioNode *v92;
  JSC::VM *v93;
  double v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WebCore::AudioNode *v97;
  JSC::VM *v98;
  double v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WebCore::AudioNode *v102;
  JSC::VM *v103;
  double v104;
  JSValue v105;
  JSValue v106;
  double v107;
  char hasExceptionsAfterHandlingTraps;
  double v109;
  char v110;
  double v111;
  char v112;
  double v113;
  char v114;
  char v115;
  JSC::VM *v116;
  JSC::VM *v117;
  JSC::VM *v118;
  JSC::VM *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  WebCore::AudioNode *v129;
  WTF::StringImpl *v130;
  int v131;
  char v132;
  __int16 v133;
  char v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  int v142;
  WebCore::AudioNode *v143;
  __int16 v144;
  char v145;
  __int16 v146;
  char v147;
  __int16 v148;
  char v149;
  JSC::VM *v150;
  WTF::StringImpl *v151;
  unsigned __int8 v152;

  v4 = a1[7];
  v143 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AA6E2CLL);
  }
  v10 = v6 - 192;
  if (!v6)
    v10 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v10 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v12 = *(int *)(a2 + 32);
  if ((_DWORD)v12 == 1)
  {
    v105.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v105);
  }
  v13 = 2;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = a1[7];
  v129 = v15;
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v129, 0, "context", 8, "DynamicsCompressorNode", 23, v8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v21 = *(_QWORD *)(v14 + 24);
  v128 = v5;
  if ((unint64_t)(v12 - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v22 = *(JSC::JSCell **)(a2 + 56), v140 = (uint64_t)v15, ((unint64_t)v22 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    LOBYTE(v27) = 0;
    v28 = 0;
    LOBYTE(v29) = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0.25;
    v34 = 30.0;
    v35 = 12.0;
    v36 = -24.0;
    v37 = &unk_1968BF000;
    v38 = 0.003;
    goto LABEL_31;
  }
  v126 = v21;
  if (((unint64_t)v22 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v22)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v24 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v26 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, v25);
    else
      *(_DWORD *)v129 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if (v26 == 10)
  {
    v125 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v26, &v129);
    if (HIDWORD(v129))
      return 0;
    BYTE4(v125) = (_BYTE)v129;
    v121 = v129 >> 8;
    LOBYTE(v125) = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v72 = v129;
  v74 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v73);
    else
      *(_DWORD *)v72 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if (v74 == 10)
  {
    v124 = 0;
    LOBYTE(v29) = 0;
  }
  else
  {
    v129 = a1[7];
    v75 = v129;
    v29 = WebCore::parseEnumeration<WebCore::ChannelCountMode>((JSC::JSGlobalObject *)a1, v74);
    if (*((_DWORD *)v75 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v75) & 1) != 0)
      return 0;
    if ((v29 & 0xFF00000000) == 0)
      goto LABEL_186;
    v122 = v29 >> 8;
    v124 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v76 = v129;
  v78 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v77);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if (v78 == 10)
  {
    v123 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_78;
  }
  v129 = a1[7];
  v79 = v129;
  v27 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>((JSC::JSGlobalObject *)a1, v78);
  if (*((_DWORD *)v79 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
    return 0;
  if ((v27 & 0xFF00000000) == 0)
  {
LABEL_186:
    JSC::throwTypeError();
    return 0;
  }
  v120 = v27 >> 8;
  v123 = 1;
LABEL_78:
  WTF::AtomStringImpl::addLiteral();
  v80 = v129;
  v82 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v81);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if (v82 == (WebCore::AudioNode *)10)
  {
    v38 = 0.003;
  }
  else
  {
    v129 = v82;
    v83 = a1[7];
    v150 = v83;
    if ((unint64_t)v82 >= 0xFFFE000000000000)
    {
      v84 = (double)(int)v82;
    }
    else if ((unint64_t)v82 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v116 = v83;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)a1);
      v83 = v116;
    }
    else
    {
      *(_QWORD *)&v84 = (char *)v82 - 0x2000000000000;
    }
    if (*((_DWORD *)v83 + 20))
    {
      v107 = v84;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v83);
      v84 = v107;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if ((*(_QWORD *)&v84 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v84 < -3.40282347e38 || v84 > 3.40282347e38)
      goto LABEL_174;
    v38 = v84;
  }
  WTF::AtomStringImpl::addLiteral();
  v85 = v129;
  v87 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v86);
    else
      *(_DWORD *)v85 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  v34 = 30.0;
  if (v87 != (WebCore::AudioNode *)10)
  {
    v129 = v87;
    v88 = a1[7];
    v150 = v88;
    if ((unint64_t)v87 >= 0xFFFE000000000000)
    {
      v89 = (double)(int)v87;
    }
    else if ((unint64_t)v87 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v117 = v88;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)a1);
      v88 = v117;
    }
    else
    {
      *(_QWORD *)&v89 = (char *)v87 - 0x2000000000000;
    }
    if (*((_DWORD *)v88 + 20))
    {
      v109 = v89;
      v110 = JSC::VM::hasExceptionsAfterHandlingTraps(v88);
      v89 = v109;
      if ((v110 & 1) != 0)
        return 0;
    }
    if ((*(_QWORD *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v89 < -3.40282347e38 || v89 > 3.40282347e38)
      goto LABEL_174;
    v34 = v89;
  }
  WTF::AtomStringImpl::addLiteral();
  v90 = v129;
  v92 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v91);
    else
      *(_DWORD *)v90 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  v35 = 12.0;
  if (v92 != (WebCore::AudioNode *)10)
  {
    v129 = v92;
    v93 = a1[7];
    v150 = v93;
    if ((unint64_t)v92 >= 0xFFFE000000000000)
    {
      v94 = (double)(int)v92;
    }
    else if ((unint64_t)v92 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v118 = v93;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)a1);
      v93 = v118;
    }
    else
    {
      *(_QWORD *)&v94 = (char *)v92 - 0x2000000000000;
    }
    if (*((_DWORD *)v93 + 20))
    {
      v111 = v94;
      v112 = JSC::VM::hasExceptionsAfterHandlingTraps(v93);
      v94 = v111;
      if ((v112 & 1) != 0)
        return 0;
    }
    if ((*(_QWORD *)&v94 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v94 < -3.40282347e38 || v94 > 3.40282347e38)
      goto LABEL_174;
    v35 = v94;
  }
  WTF::AtomStringImpl::addLiteral();
  v95 = v129;
  v97 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v96);
    else
      *(_DWORD *)v95 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  v33 = 0.25;
  if (v97 != (WebCore::AudioNode *)10)
  {
    v129 = v97;
    v98 = a1[7];
    v150 = v98;
    if ((unint64_t)v97 >= 0xFFFE000000000000)
    {
      v99 = (double)(int)v97;
    }
    else if ((unint64_t)v97 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v119 = v98;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)a1);
      v98 = v119;
    }
    else
    {
      *(_QWORD *)&v99 = (char *)v97 - 0x2000000000000;
    }
    if (*((_DWORD *)v98 + 20))
    {
      v113 = v99;
      v114 = JSC::VM::hasExceptionsAfterHandlingTraps(v98);
      v99 = v113;
      if ((v114 & 1) != 0)
        return 0;
    }
    if ((*(_QWORD *)&v99 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v99 < -3.40282347e38 || v99 > 3.40282347e38)
      goto LABEL_174;
    v33 = v99;
  }
  WTF::AtomStringImpl::addLiteral();
  v100 = v129;
  v102 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v129);
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, v101);
    else
      *(_DWORD *)v100 -= 2;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  v36 = -24.0;
  if (v102 == (WebCore::AudioNode *)10)
  {
    v21 = v126;
    v32 = v125;
    v31 = BYTE4(v125);
    LODWORD(v37) = v121;
    v13 = v122;
    v28 = v123;
    v30 = v124;
    v9 = v120;
    goto LABEL_31;
  }
  v129 = v102;
  v103 = a1[7];
  v150 = v103;
  if ((unint64_t)v102 >= 0xFFFE000000000000)
  {
    v104 = (double)(int)v102;
  }
  else if ((unint64_t)v102 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)a1);
  }
  else
  {
    *(_QWORD *)&v104 = (char *)v102 - 0x2000000000000;
  }
  v21 = v126;
  if (*((_DWORD *)v103 + 20))
  {
    v127 = v104;
    v115 = JSC::VM::hasExceptionsAfterHandlingTraps(v103);
    v104 = v127;
    if ((v115 & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v104 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v32 = v125, v31 = BYTE4(v125), v28 = v123, v30 = v124, v13 = v122, v9 = v120, v104 < -3.40282347e38)
    || v104 > 3.40282347e38)
  {
LABEL_174:
    JSC::throwTypeError();
    return 0;
  }
  v36 = v104;
  LODWORD(v37) = v121;
LABEL_31:
  v39 = (WTF::StringImpl *)(v21 - 32);
  *(_WORD *)((char *)&v129 + 5) = v148;
  HIBYTE(v129) = v149;
  *(_WORD *)((char *)&v130 + 5) = v146;
  HIBYTE(v130) = v147;
  v133 = v144;
  v134 = v145;
  LODWORD(v129) = v31 | ((_DWORD)v37 << 8);
  BYTE4(v129) = v32;
  LODWORD(v130) = v29 | (v13 << 8);
  BYTE4(v130) = v30;
  v131 = v27 | (v9 << 8);
  v132 = v28;
  v135 = v38;
  v136 = v34;
  v137 = v35;
  v138 = v33;
  v139 = v36;
  v40 = (WebCore::AudioNode *)bmalloc::api::isoAllocate();
  v41 = WebCore::DynamicsCompressorNode::DynamicsCompressorNode((uint64_t)v40, (unsigned int *)(v21 - 32), (float *)&v129);
  v140 = 0x100000002;
  LODWORD(v141) = 0;
  WebCore::AudioNode::handleAudioNodeOptions(v41, (unsigned int *)&v129, (unsigned int *)&v140, (uint64_t)&v150);
  v44 = v152;
  if (v152)
  {
    v45 = v150;
    v39 = v151;
    LOBYTE(v140) = (_BYTE)v150;
    v141 = v151;
    v142 = 1;
    if (v40)
      WebCore::AudioNode::deref(v40);
  }
  else
  {
    v140 = (uint64_t)v40;
    v142 = 0;
    v45 = v40;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_173;
  if (v44)
  {
    LOBYTE(v129) = v45;
    v141 = 0;
    v130 = v39;
    if (!*((_QWORD *)v4 + 2))
    {
      v106.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)v45, (JSC::JSGlobalObject *)&v130);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v106);
      v39 = v130;
    }
    v130 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v42);
        v4 = v143;
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    v11 = 0;
  }
  else
  {
    v46 = *(JSC::VM **)(v128 + 40);
    v47 = (WebCore::AudioNode *)v140;
    v140 = 0;
    v129 = v47;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v47 != off_1E336A560)
    {
      __break(0xC471u);
      JUMPOUT(0x194AA6EF4);
    }
    v11 = (JSCell *)WebCore::createWrapper<WebCore::DynamicsCompressorNode,WebCore::DynamicsCompressorNode>(v46, (uint64_t *)&v129, v43);
    v48 = v129;
    v129 = 0;
    if (v48)
      WebCore::AudioNode::deref(v48);
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_173;
  v49 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v49 & 0xFFFE000000000002) != 0)
    goto LABEL_54;
  v50 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v49);
  if (!v50)
    goto LABEL_54;
  v52 = v50;
  if (v50 == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_54;
  v53 = a1[7];
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v50, v51);
  if (*((_DWORD *)v53 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
      goto LABEL_54;
  }
  v57 = *((_QWORD *)FunctionRealm + 412);
  if (!v57)
    goto LABEL_51;
  v58 = *(_DWORD *)(v57 - 8);
  v59 = ((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
       + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
                                                                        + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) >> 22);
  v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
  v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
  v62 = v58 & ((v61 >> 31) ^ v61);
  v63 = *(char ***)(v57 + 16 * v62);
  if (v63 != &WebCore::JSDynamicsCompressorNode::s_info)
  {
    v64 = 1;
    while (v63)
    {
      v62 = ((_DWORD)v62 + v64) & v58;
      v63 = *(char ***)(v57 + 16 * v62);
      ++v64;
      if (v63 == &WebCore::JSDynamicsCompressorNode::s_info)
        goto LABEL_50;
    }
    goto LABEL_51;
  }
LABEL_50:
  v54 = *(WebCore::JSDOMGlobalObject **)(v57 + 16 * v62 + 8);
  if (!v54)
  {
LABEL_51:
    v65 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v53, FunctionRealm, v54);
    Structure = WebCore::JSDynamicsCompressorNodePrototype::createStructure((uint64_t *)v53, (uint64_t)FunctionRealm, v65);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v68 = (JSC::JSCell *)WebCore::JSDynamicsCompressorNodePrototype::create(v53, FunctionRealm, Structure, v67);
    v69 = WebCore::JSDynamicsCompressorNode::createStructure((uint64_t *)v53, (uint64_t)FunctionRealm, v68);
    v54 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v69, (uint64_t)&WebCore::JSDynamicsCompressorNode::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v52, v54, v55);
  if (!*((_DWORD *)v53 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) == 0)
    JSC::JSObject::setStructure(v11, v53, SubclassStructure);
LABEL_54:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
LABEL_173:
    v11 = 0;
  if (v142 != -1)
    ((void (*)(WebCore::AudioNode **, uint64_t *))off_1E32715E0[v142])(&v129, &v140);
  return (uint64_t)v11;
}

uint64_t WebCore::JSDynamicsCompressorNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEventTarget::visitChildren(WebCore::JSEventTarget *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSEventTarget::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDynamicsCompressorNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDynamicsCompressorNodePrototype::create(WebCore::JSDynamicsCompressorNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSDynamicsCompressorNode::s_info, &WebCore::JSDynamicsCompressorNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDynamicsCompressorNode>,(WebCore::DOMConstructorID)253>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2024);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSDynamicsCompressorNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
         + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
                                                                          + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSDynamicsCompressorNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSDynamicsCompressorNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSDynamicsCompressorNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSDynamicsCompressorNodePrototype::create((WebCore::JSDynamicsCompressorNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSDynamicsCompressorNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSDynamicsCompressorNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2024) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsDynamicsCompressorNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSDynamicsCompressorNodePrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDynamicsCompressorNode>,(WebCore::DOMConstructorID)253>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsDynamicsCompressorNode_threshold(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 160));
}

unint64_t WebCore::jsDynamicsCompressorNode_knee(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 168));
}

unint64_t WebCore::jsDynamicsCompressorNode_ratio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsDynamicsCompressorNode_attack(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsDynamicsCompressorNode_release(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsDynamicsCompressorNode_reduction(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 200);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::JSDynamicsCompressorNode::subspaceForImpl(WebCore::JSDynamicsCompressorNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2048);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 2048);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 2048);
    *(_QWORD *)(v8 + 2048) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2048);
  *(_QWORD *)(v3 + 2048) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::DynamicsCompressorNode,WebCore::DynamicsCompressorNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
      + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSDynamicsCompressorNode::s_info
                                                                       + ~((_QWORD)&WebCore::JSDynamicsCompressorNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDynamicsCompressorNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSDynamicsCompressorNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSDynamicsCompressorNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSDynamicsCompressorNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSDynamicsCompressorNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSDynamicsCompressorNode::s_info);
  }
  v21 = WebCore::JSDynamicsCompressorNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::DynamicsCompressorNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336A560)
  {
    v7 = WebCore::createWrapper<WebCore::DynamicsCompressorNode,WebCore::DynamicsCompressorNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 333;
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::JSEXTBlendMinMax::destroy(WebCore::JSEXTBlendMinMax *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTBlendMinMax::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTBlendMinMaxOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTBlendMinMax";
    a5[1] = 32;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AA81C8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTBlendMinMaxOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTBlendMinMax>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTBlendMinMax *__hidden))a3 != off_1E33DC620)
  {
    __break(0xC471u);
    JUMPOUT(0x194AA89B0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTBlendMinMax::s_info + ~((_QWORD)&WebCore::JSEXTBlendMinMax::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTBlendMinMax::s_info + ~((_QWORD)&WebCore::JSEXTBlendMinMax::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTBlendMinMax::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTBlendMinMax::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTBlendMinMaxPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTBlendMinMax::s_info, (uint64_t)&WebCore::JSEXTBlendMinMaxPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTBlendMinMax::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTBlendMinMax::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4928);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4928))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4928);
    *(_QWORD *)(v46 + 4928) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4928);
  *(_QWORD *)(v42 + 4928) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3352C0 & 1) == 0)
  {
    qword_1EE3352B8 = (uint64_t)&off_1E3270C60;
    byte_1EE3352C0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3352B8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTClipControl::destroy(WebCore::JSEXTClipControl *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTClipControl::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTClipControlOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTClipControl";
    a5[1] = 32;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AA8D74);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTClipControlOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTClipControl>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTClipControl *__hidden))a3 != off_1E33DC640)
  {
    __break(0xC471u);
    JUMPOUT(0x194AA955CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTClipControl::s_info + ~((_QWORD)&WebCore::JSEXTClipControl::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTClipControl::s_info + ~((_QWORD)&WebCore::JSEXTClipControl::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTClipControl::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTClipControl::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTClipControlPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTClipControl::s_info, &WebCore::JSEXTClipControlPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTClipControl::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTClipControl::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4936);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4936))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4936);
    *(_QWORD *)(v46 + 4936) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4936);
  *(_QWORD *)(v42 + 4936) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3352D0 & 1) == 0)
  {
    qword_1EE3352C8 = (uint64_t)&off_1E3270C90;
    byte_1EE3352D0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3352C8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTColorBufferFloat::destroy(WebCore::JSEXTColorBufferFloat *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTColorBufferFloat::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTColorBufferFloatOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTColorBufferFloat";
    a5[1] = 37;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AA9920);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTColorBufferFloatOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTColorBufferFloat>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTColorBufferFloat *__hidden))a3 != off_1E33DC9B0)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAA0ECLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTColorBufferFloat::s_info
         + ~((_QWORD)&WebCore::JSEXTColorBufferFloat::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTColorBufferFloat::s_info
                                                                       + ~((_QWORD)&WebCore::JSEXTColorBufferFloat::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTColorBufferFloat::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTColorBufferFloat::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTColorBufferFloatPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTColorBufferFloat::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTColorBufferFloat::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4944);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4944))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4944);
    *(_QWORD *)(v46 + 4944) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4944);
  *(_QWORD *)(v42 + 4944) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3352E0 & 1) == 0)
  {
    qword_1EE3352D8 = (uint64_t)&off_1E3270CC0;
    byte_1EE3352E0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3352D8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTColorBufferHalfFloat::destroy(WebCore::JSEXTColorBufferHalfFloat *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTColorBufferHalfFloat::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTColorBufferHalfFloatOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTColorBufferHalfFloat";
    a5[1] = 41;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAA4B0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTColorBufferHalfFloatOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTColorBufferHalfFloat>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTColorBufferHalfFloat *__hidden))a3 != off_1E33DC9D0)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAAC98);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTColorBufferHalfFloat::s_info
         + ~((_QWORD)&WebCore::JSEXTColorBufferHalfFloat::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTColorBufferHalfFloat::s_info
                                                                           + ~((_QWORD)&WebCore::JSEXTColorBufferHalfFloat::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTColorBufferHalfFloat::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTColorBufferHalfFloat::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTColorBufferHalfFloatPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTColorBufferHalfFloat::s_info, &WebCore::JSEXTColorBufferHalfFloatPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTColorBufferHalfFloat::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTColorBufferHalfFloat::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4952);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4952))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4952);
    *(_QWORD *)(v46 + 4952) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4952);
  *(_QWORD *)(v42 + 4952) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3352F0 & 1) == 0)
  {
    qword_1EE3352E8 = (uint64_t)&off_1E3270CF0;
    byte_1EE3352F0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3352E8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTConservativeDepth::destroy(WebCore::JSEXTConservativeDepth *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTConservativeDepth::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTConservativeDepthOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTConservativeDepth";
    a5[1] = 38;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAB05CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTConservativeDepthOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTConservativeDepth>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTConservativeDepth *__hidden))a3 != off_1E33DC9F0)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAB828);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTConservativeDepth::s_info
         + ~((_QWORD)&WebCore::JSEXTConservativeDepth::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTConservativeDepth::s_info
                                                                        + ~((_QWORD)&WebCore::JSEXTConservativeDepth::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTConservativeDepth::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTConservativeDepth::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTConservativeDepthPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTConservativeDepth::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTConservativeDepth::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4960);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4960))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4960);
    *(_QWORD *)(v46 + 4960) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4960);
  *(_QWORD *)(v42 + 4960) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335300 & 1) == 0)
  {
    qword_1EE3352F8 = (uint64_t)&off_1E3270D20;
    byte_1EE335300 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3352F8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTDepthClamp::destroy(WebCore::JSEXTDepthClamp *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTDepthClamp::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTDepthClampOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTDepthClamp";
    a5[1] = 31;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AABBECLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTDepthClampOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTDepthClamp>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTDepthClamp *__hidden))a3 != off_1E33DCA10)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAC438);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTDepthClamp::s_info + ~((_QWORD)&WebCore::JSEXTDepthClamp::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTDepthClamp::s_info + ~((_QWORD)&WebCore::JSEXTDepthClamp::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTDepthClamp::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_43;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTDepthClamp::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSEXTDepthClampPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTDepthClamp::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSEXTDepthClampPrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_40:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSEXTDepthClamp::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSEXTDepthClamp::s_info);
LABEL_43:
  v42 = *(_QWORD *)(a2 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 4968);
  if (v45)
    goto LABEL_63;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_48:
  v48 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v48 + 4968))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
    v72 = 0;
    MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
    v51 = (uint64_t)v72;
    v72 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v68[0];
    v68[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 4968);
    *(_QWORD *)(v48 + 4968) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v44 + 4968);
  *(_QWORD *)(v44 + 4968) = v45;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v46);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_63:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_65;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_65:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335310 & 1) == 0)
  {
    qword_1EE335308 = (uint64_t)&off_1E3270D50;
    byte_1EE335310 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335308;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTDisjointTimerQuery::destroy(WebCore::JSEXTDisjointTimerQuery *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTDisjointTimerQuery::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTDisjointTimerQueryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTDisjointTimerQuery";
    a5[1] = 39;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAC7FCLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTDisjointTimerQueryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTDisjointTimerQuery>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTDisjointTimerQuery *__hidden))a3 != off_1E33DCA30)
  {
    __break(0xC471u);
    JUMPOUT(0x194AACFE4);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTDisjointTimerQuery::s_info
         + ~((_QWORD)&WebCore::JSEXTDisjointTimerQuery::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTDisjointTimerQuery::s_info
                                                                         + ~((_QWORD)&WebCore::JSEXTDisjointTimerQuery::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTDisjointTimerQuery::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTDisjointTimerQuery::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTDisjointTimerQueryPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTDisjointTimerQuery::s_info, (uint64_t)&WebCore::JSEXTDisjointTimerQueryPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTDisjointTimerQuery::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTDisjointTimerQuery::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4976);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4976))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4976);
    *(_QWORD *)(v46 + 4976) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4976);
  *(_QWORD *)(v42 + 4976) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335320 & 1) == 0)
  {
    qword_1EE335318 = (uint64_t)&off_1E3270D80;
    byte_1EE335320 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335318;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTDisjointTimerQueryWebGL2::destroy(WebCore::JSEXTDisjointTimerQueryWebGL2 *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTDisjointTimerQueryWebGL2::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTDisjointTimerQueryWebGL2Owner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTDisjointTimerQueryWebGL2";
    a5[1] = 45;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAD3A8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTDisjointTimerQueryWebGL2Owner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTDisjointTimerQueryWebGL2>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTDisjointTimerQueryWebGL2 *__hidden))a3 != off_1E33DCA50)
  {
    __break(0xC471u);
    JUMPOUT(0x194AADB90);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info
         + ~((_QWORD)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info
                                                                               + ~((_QWORD)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTDisjointTimerQueryWebGL2::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTDisjointTimerQueryWebGL2::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTDisjointTimerQueryWebGL2Prototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info, &WebCore::JSEXTDisjointTimerQueryWebGL2PrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTDisjointTimerQueryWebGL2::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTDisjointTimerQueryWebGL2::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4984);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4984))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4984);
    *(_QWORD *)(v46 + 4984) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4984);
  *(_QWORD *)(v42 + 4984) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335330 & 1) == 0)
  {
    qword_1EE335328 = (uint64_t)&off_1E3270DB0;
    byte_1EE335330 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335328;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTFloatBlend::destroy(WebCore::JSEXTFloatBlend *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTFloatBlend::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTFloatBlendOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTFloatBlend";
    a5[1] = 31;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AADF54);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTFloatBlendOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTFloatBlend>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTFloatBlend *__hidden))a3 != off_1E33DCA70)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAE720);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTFloatBlend::s_info + ~((_QWORD)&WebCore::JSEXTFloatBlend::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTFloatBlend::s_info + ~((_QWORD)&WebCore::JSEXTFloatBlend::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTFloatBlend::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTFloatBlend::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTFloatBlendPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTFloatBlend::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTFloatBlend::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4992);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4992))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4992);
    *(_QWORD *)(v46 + 4992) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4992);
  *(_QWORD *)(v42 + 4992) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335340 & 1) == 0)
  {
    qword_1EE335338 = (uint64_t)&off_1E3270DE0;
    byte_1EE335340 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335338;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTFragDepth::destroy(WebCore::JSEXTFragDepth *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTFragDepth::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTFragDepthOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTFragDepth";
    a5[1] = 30;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAEAE4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTFragDepthOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTFragDepth>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTFragDepth *__hidden))a3 != off_1E33DCA90)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAF2B0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTFragDepth::s_info + ~((_QWORD)&WebCore::JSEXTFragDepth::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTFragDepth::s_info + ~((_QWORD)&WebCore::JSEXTFragDepth::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTFragDepth::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTFragDepth::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTFragDepthPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTFragDepth::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTFragDepth::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5000);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5000))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5000);
    *(_QWORD *)(v46 + 5000) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5000);
  *(_QWORD *)(v42 + 5000) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335350 & 1) == 0)
  {
    qword_1EE335348 = (uint64_t)&off_1E3270E10;
    byte_1EE335350 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335348;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTPolygonOffsetClamp::destroy(WebCore::JSEXTPolygonOffsetClamp *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTPolygonOffsetClamp::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTPolygonOffsetClampOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTPolygonOffsetClamp";
    a5[1] = 39;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AAF674);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTPolygonOffsetClampOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTPolygonOffsetClamp>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTPolygonOffsetClamp *__hidden))a3 != off_1E33DCBA8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AAFE5CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTPolygonOffsetClamp::s_info
         + ~((_QWORD)&WebCore::JSEXTPolygonOffsetClamp::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTPolygonOffsetClamp::s_info
                                                                         + ~((_QWORD)&WebCore::JSEXTPolygonOffsetClamp::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTPolygonOffsetClamp::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTPolygonOffsetClamp::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTPolygonOffsetClampPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTPolygonOffsetClamp::s_info, (uint64_t)&WebCore::JSEXTPolygonOffsetClampPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTPolygonOffsetClamp::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTPolygonOffsetClamp::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5008);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5008))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5008);
    *(_QWORD *)(v46 + 5008) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5008);
  *(_QWORD *)(v42 + 5008) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335360 & 1) == 0)
  {
    qword_1EE335358 = (uint64_t)&off_1E3270E40;
    byte_1EE335360 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335358;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTRenderSnorm::destroy(WebCore::JSEXTRenderSnorm *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTRenderSnorm::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTRenderSnormOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTRenderSnorm";
    a5[1] = 32;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB0220);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTRenderSnormOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTRenderSnorm>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTRenderSnorm *__hidden))a3 != off_1E33DCBC8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB09ECLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTRenderSnorm::s_info + ~((_QWORD)&WebCore::JSEXTRenderSnorm::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTRenderSnorm::s_info + ~((_QWORD)&WebCore::JSEXTRenderSnorm::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTRenderSnorm::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTRenderSnorm::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTRenderSnormPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTRenderSnorm::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTRenderSnorm::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5016);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5016))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5016);
    *(_QWORD *)(v46 + 5016) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5016);
  *(_QWORD *)(v42 + 5016) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335370 & 1) == 0)
  {
    qword_1EE335368 = (uint64_t)&off_1E3270E70;
    byte_1EE335370 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335368;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTShaderTextureLOD::destroy(WebCore::JSEXTShaderTextureLOD *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTShaderTextureLOD::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTShaderTextureLODOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTShaderTextureLOD";
    a5[1] = 37;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB0DB0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTShaderTextureLODOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTShaderTextureLOD>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTShaderTextureLOD *__hidden))a3 != off_1E33DCBE8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB157CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTShaderTextureLOD::s_info
         + ~((_QWORD)&WebCore::JSEXTShaderTextureLOD::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTShaderTextureLOD::s_info
                                                                       + ~((_QWORD)&WebCore::JSEXTShaderTextureLOD::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTShaderTextureLOD::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTShaderTextureLOD::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTShaderTextureLODPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTShaderTextureLOD::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTShaderTextureLOD::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5024);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5024))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5024);
    *(_QWORD *)(v46 + 5024) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5024);
  *(_QWORD *)(v42 + 5024) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335380 & 1) == 0)
  {
    qword_1EE335378 = (uint64_t)&off_1E3270EA0;
    byte_1EE335380 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335378;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTTextureCompressionBPTC::destroy(WebCore::JSEXTTextureCompressionBPTC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTTextureCompressionBPTC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTTextureCompressionBPTCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTTextureCompressionBPTC";
    a5[1] = 43;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB1940);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTTextureCompressionBPTCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTTextureCompressionBPTC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTTextureCompressionBPTC *__hidden))a3 != off_1E33DCC08)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB2128);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTTextureCompressionBPTC::s_info
         + ~((_QWORD)&WebCore::JSEXTTextureCompressionBPTC::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTTextureCompressionBPTC::s_info
                                                                             + ~((_QWORD)&WebCore::JSEXTTextureCompressionBPTC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTTextureCompressionBPTC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTTextureCompressionBPTC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTTextureCompressionBPTCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTTextureCompressionBPTC::s_info, &WebCore::JSEXTTextureCompressionBPTCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTTextureCompressionBPTC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTTextureCompressionBPTC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5032);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5032))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5032);
    *(_QWORD *)(v46 + 5032) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5032);
  *(_QWORD *)(v42 + 5032) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335390 & 1) == 0)
  {
    qword_1EE335388 = (uint64_t)&off_1E3270ED0;
    byte_1EE335390 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335388;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTTextureCompressionRGTC::destroy(WebCore::JSEXTTextureCompressionRGTC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTTextureCompressionRGTC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTTextureCompressionRGTCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTTextureCompressionRGTC";
    a5[1] = 43;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB24ECLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTTextureCompressionRGTCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTTextureCompressionRGTC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTTextureCompressionRGTC *__hidden))a3 != off_1E33DCC28)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB2CD4);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTTextureCompressionRGTC::s_info
         + ~((_QWORD)&WebCore::JSEXTTextureCompressionRGTC::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTTextureCompressionRGTC::s_info
                                                                             + ~((_QWORD)&WebCore::JSEXTTextureCompressionRGTC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTTextureCompressionRGTC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTTextureCompressionRGTC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTTextureCompressionRGTCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTTextureCompressionRGTC::s_info, &WebCore::JSEXTTextureCompressionRGTCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTTextureCompressionRGTC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTTextureCompressionRGTC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5040);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5040))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5040);
    *(_QWORD *)(v46 + 5040) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5040);
  *(_QWORD *)(v42 + 5040) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3353A0 & 1) == 0)
  {
    qword_1EE335398 = (uint64_t)&off_1E3270F00;
    byte_1EE3353A0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335398;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTTextureFilterAnisotropic::destroy(WebCore::JSEXTTextureFilterAnisotropic *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTTextureFilterAnisotropic::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTTextureFilterAnisotropicOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTTextureFilterAnisotropic";
    a5[1] = 45;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB3098);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTTextureFilterAnisotropicOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTTextureFilterAnisotropic>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTTextureFilterAnisotropic *__hidden))a3 != off_1E33DCC48)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB3880);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTTextureFilterAnisotropic::s_info
         + ~((_QWORD)&WebCore::JSEXTTextureFilterAnisotropic::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTTextureFilterAnisotropic::s_info
                                                                               + ~((_QWORD)&WebCore::JSEXTTextureFilterAnisotropic::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTTextureFilterAnisotropic::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTTextureFilterAnisotropic::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTTextureFilterAnisotropicPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTTextureFilterAnisotropic::s_info, (uint64_t)&WebCore::JSEXTTextureFilterAnisotropicPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTTextureFilterAnisotropic::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTTextureFilterAnisotropic::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5048);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5048))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5048);
    *(_QWORD *)(v46 + 5048) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5048);
  *(_QWORD *)(v42 + 5048) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3353B0 & 1) == 0)
  {
    qword_1EE3353A8 = (uint64_t)&off_1E3270F30;
    byte_1EE3353B0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3353A8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTTextureMirrorClampToEdge::destroy(WebCore::JSEXTTextureMirrorClampToEdge *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTTextureMirrorClampToEdge::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTTextureMirrorClampToEdgeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTTextureMirrorClampToEdge";
    a5[1] = 45;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB3C44);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTTextureMirrorClampToEdgeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTTextureMirrorClampToEdge>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTTextureMirrorClampToEdge *__hidden))a3 != off_1E33DCC68)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB4490);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTTextureMirrorClampToEdge::s_info
         + ~((_QWORD)&WebCore::JSEXTTextureMirrorClampToEdge::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTTextureMirrorClampToEdge::s_info
                                                                               + ~((_QWORD)&WebCore::JSEXTTextureMirrorClampToEdge::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTTextureMirrorClampToEdge::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_43;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTTextureMirrorClampToEdge::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSEXTTextureMirrorClampToEdgePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTTextureMirrorClampToEdge::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSEXTTextureMirrorClampToEdgePrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_40:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSEXTTextureMirrorClampToEdge::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSEXTTextureMirrorClampToEdge::s_info);
LABEL_43:
  v42 = *(_QWORD *)(a2 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 5056);
  if (v45)
    goto LABEL_63;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_48:
  v48 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v48 + 5056))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
    v72 = 0;
    MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
    v51 = (uint64_t)v72;
    v72 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v68[0];
    v68[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 5056);
    *(_QWORD *)(v48 + 5056) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v44 + 5056);
  *(_QWORD *)(v44 + 5056) = v45;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v46);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_63:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_65;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_65:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3353C0 & 1) == 0)
  {
    qword_1EE3353B8 = (uint64_t)&off_1E3270F60;
    byte_1EE3353C0 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3353B8;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTTextureNorm16::destroy(WebCore::JSEXTTextureNorm16 *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTTextureNorm16::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTTextureNorm16Owner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTTextureNorm16";
    a5[1] = 34;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB4854);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTTextureNorm16Owner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTTextureNorm16>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTTextureNorm16 *__hidden))a3 != off_1E33DCC88)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB503CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTTextureNorm16::s_info + ~((_QWORD)&WebCore::JSEXTTextureNorm16::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTTextureNorm16::s_info + ~((_QWORD)&WebCore::JSEXTTextureNorm16::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTTextureNorm16::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTTextureNorm16::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTTextureNorm16Prototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTTextureNorm16::s_info, (uint64_t)&WebCore::JSEXTTextureNorm16PrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTTextureNorm16::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTTextureNorm16::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5064);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5064))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5064);
    *(_QWORD *)(v46 + 5064) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5064);
  *(_QWORD *)(v42 + 5064) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3353D0 & 1) == 0)
  {
    qword_1EE3353C8 = (uint64_t)&off_1E3270F90;
    byte_1EE3353D0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3353C8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSEXTsRGB::destroy(WebCore::JSEXTsRGB *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSEXTsRGB::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEXTsRGBOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsEXTsRGB";
    a5[1] = 25;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194AB5400);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSEXTsRGBOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::EXTsRGB>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::EXTsRGB *__hidden))a3 != off_1E33DCD28)
  {
    __break(0xC471u);
    JUMPOUT(0x194AB5BE8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSEXTsRGB::s_info + ~((_QWORD)&WebCore::JSEXTsRGB::s_info << 32)) ^ (((unint64_t)&WebCore::JSEXTsRGB::s_info + ~((_QWORD)&WebCore::JSEXTsRGB::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSEXTsRGB::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSEXTsRGB::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSEXTsRGBPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSEXTsRGB::s_info, &WebCore::JSEXTsRGBPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSEXTsRGB::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSEXTsRGB::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5072);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5072))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5072);
    *(_QWORD *)(v46 + 5072) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5072);
  *(_QWORD *)(v42 + 5072) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3353E0 & 1) == 0)
  {
    qword_1EE3353D8 = (uint64_t)&off_1E3270FC0;
    byte_1EE3353E0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3353D8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmEcKeyParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v31 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v7);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v31 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v31, "name", 5, "EcKeyParams", 12, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v27 = (WTF::StringImpl *)v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v33 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
    v12 = v33;
    if (hasExceptionsAfterHandlingTraps)
    {
      v16 = 1;
      v30 = 1;
      v33 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v24);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_38;
    }
  }
  else
  {
    v12 = v33;
  }
  v30 = 0;
  v29 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = v27;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v27);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
    goto LABEL_25;
  if (v15 == 10)
  {
    WebCore::throwRequiredMemberTypeError((int)a2, (int)&v31, "namedCurve", 11, "EcKeyParams", 12, "DOMString", 10);
LABEL_25:
    v16 = 0;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_38;
  }
  v33 = (WTF::StringImpl *)v15;
  v17 = a2[7];
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v15 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, (JSC::JSGlobalObject *)a2);
      if (!v18)
        goto LABEL_31;
    }
    else if (!v18)
    {
LABEL_31:
      v32 = v18;
      goto LABEL_32;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, (JSC::JSGlobalObject *)a2);
LABEL_32:
  if (*((_DWORD *)v17 + 20))
  {
    v26 = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v32;
    if (v26)
    {
      v28 = 1;
      v32 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v25);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = 1;
      v21 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v19 = v32;
  }
  v28 = 0;
  v27 = 0;
  if (v12)
    *(_DWORD *)v12 += 2;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)a3 = off_1E3272120;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 24) = v19;
LABEL_37:
  *(_DWORD *)(a3 + 32) = v20;
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v21])(&v33, &v27);
  v16 = 0;
LABEL_38:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v16])(&v27, &v29);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v22);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmEcKeyParams::~CryptoAlgorithmEcKeyParams(WebCore::CryptoAlgorithmEcKeyParams *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmEcdhKeyDeriveParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v27 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v25);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v7);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*((_DWORD *)v27 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v27, "name", 5, "EcdhKeyDeriveParams", 20, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v29 = (WTF::StringImpl *)v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v28 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    v12 = v28;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    {
      v26 = 1;
      v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v24);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      v20 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v12 = v28;
  }
  v26 = 0;
  v25 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = v29;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (uint64_t)v27;
  if (!*((_DWORD *)v27 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v27), (result & 1) == 0))
  {
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v27, "publicKey", 10, "EcdhKeyDeriveParams", 20, "CryptoKey", 10);
    }
    else
    {
      v29 = a2[7];
      if ((v15 & 0xFFFE000000000002) == 0)
      {
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v16)
        {
          v18 = 16 * v16;
          if ((char **)v18 != &WebCore::JSCryptoKey::s_info)
          {
            do
            {
              v18 = *(_QWORD *)(v18 + 16);
              v17 = v18 != 0;
            }
            while ((char **)v18 != &WebCore::JSCryptoKey::s_info && v18 != 0);
          }
        }
        if (v17)
        {
          v21 = *(_QWORD *)(v15 + 24);
          if (v21)
          {
            v22 = (unsigned int *)(v21 + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
            if (v12)
              *(_DWORD *)v12 += 2;
            *(_QWORD *)a3 = off_1E3272158;
            *(_QWORD *)(a3 + 8) = v12;
            *(_QWORD *)(a3 + 24) = v21;
            *(_DWORD *)(a3 + 32) = 0;
            v20 = v26;
            if (v26 == -1)
              goto LABEL_38;
            goto LABEL_37;
          }
        }
      }
      JSC::throwTypeError();
    }
  }
  v20 = 0;
LABEL_36:
  *(_DWORD *)(a3 + 32) = 1;
LABEL_37:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v20])(&v29, &v25);
LABEL_38:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmEcdhKeyDeriveParams::~CryptoAlgorithmEcdhKeyDeriveParams(WebCore::CryptoAlgorithmEcdhKeyDeriveParams *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmEcdsaParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  int v26;
  void (**v27)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  JSC::VM *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v27 = off_1E3272180;
    v28 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 48) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v27 = off_1E3272180;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v35);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v7);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v33 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v33))
    goto LABEL_11;
  if (v8 != 10)
  {
    v35 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v23;
        if (hasExceptionsAfterHandlingTraps)
        {
          v16 = 1;
          v26 = 1;
          v23 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 48) = 1;
          goto LABEL_45;
        }
      }
      else
      {
        v11 = v23;
      }
      v26 = 0;
      v25 = 0;
      v12 = v28;
      v28 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v35;
      v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v35);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (!*((_DWORD *)v33 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v33))
      {
        if (v15 != 10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)a2, v15, (uint64_t)&v35);
          v17 = v38;
          if (v38)
          {
            *(_DWORD *)(a3 + 48) = 1;
          }
          else
          {
            LOBYTE(v23) = 0;
            v24 = -1;
            v18 = v37;
            if (v37 == -1)
            {
              if (v31 != -1)
              {
                ((void (*)(uint64_t **, uint64_t *))off_1E3272198[v31])(&v34, &v30);
                v31 = -1;
              }
            }
            else
            {
              ((void (*)(uint64_t **, WTF::StringImpl **, uint64_t *))off_1E32721A8[v37])(&v34, &v23, &v36);
              v24 = v18;
              v34 = &v30;
              ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32721B8[v18])(&v34, &v30, &v23);
            }
            if (v24 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E3272198[v24])(&v34, &v23);
            v19 = v28;
            if (v28)
              *(_DWORD *)v28 += 2;
            *(_BYTE *)(a3 + 16) = v29;
            *(_QWORD *)a3 = off_1E3272180;
            *(_QWORD *)(a3 + 8) = v19;
            *(_BYTE *)(a3 + 24) = 0;
            *(_DWORD *)(a3 + 32) = -1;
            v20 = v31;
            if (v31 != -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32721A8[v31])(&v23, a3 + 24, &v30);
              *(_DWORD *)(a3 + 32) = v20;
            }
            *(_BYTE *)(a3 + 40) = v32;
            *(_DWORD *)(a3 + 48) = 0;
            v17 = v38;
          }
          if (v17 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32721C8[v17])(&v23, &v36);
          v16 = 0;
          goto LABEL_45;
        }
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v33, "hash", 5, "EcdsaParams", 12, "(object or DOMString)", 22);
      }
      v16 = 0;
      *(_DWORD *)(a3 + 48) = 1;
LABEL_45:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3272138[v16])(&v35, &v25);
      goto LABEL_46;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v23 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v33, "name", 5, "EcdsaParams", 12, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 48) = 1;
LABEL_46:
  if (v31 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3272198[v31])(&v35, &v30);
  v31 = -1;
  result = v28;
  v27 = off_1E3226840;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmEcdsaParams::~CryptoAlgorithmEcdsaParams(WebCore::CryptoAlgorithmEcdsaParams *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3272198[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3272198[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::EffectTiming>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  double v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  unsigned __int16 v38;
  int v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  double v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  JSC::VM *v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *result;
  int v56;
  char hasExceptionsAfterHandlingTraps;
  char v58;
  char v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  int v66;
  __int128 v67;
  __int128 v68;
  WTF::StringImpl *v69;
  __int16 v70;
  JSC::VM *v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v71 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 72) = 1;
    return result;
  }
  v8 = WebCore::autoAtomData;
  if (WebCore::autoAtomData)
    *(_DWORD *)WebCore::autoAtomData += 2;
  v65 = v8;
  v66 = 1;
  v67 = 0uLL;
  *(_QWORD *)&v68 = 0;
  *((_QWORD *)&v68 + 1) = 0x3FF0000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v76;
  v70 = 4;
  if (v6 == 2)
  {
    *(_QWORD *)&v67 = 0;
    goto LABEL_32;
  }
  WTF::AtomStringImpl::addLiteral();
  v10 = (WTF::StringImpl *)JSC::JSObject::get(Object, a2, (unint64_t)v76);
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v9);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
  {
    v11 = 0.0;
    if (v10 == (WTF::StringImpl *)10)
      goto LABEL_19;
    v76 = v10;
    v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v72 = v12;
    if ((unint64_t)v10 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v10;
    }
    else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v76, a2);
    }
    else
    {
      *(_QWORD *)&v11 = (char *)v10 - 0x2000000000000;
    }
    if (*((_DWORD *)v12 + 20))
    {
      v61 = v11;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
      v11 = v61;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        goto LABEL_157;
    }
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
LABEL_19:
      *(double *)&v67 = v11;
      WTF::AtomStringImpl::addLiteral();
      v13 = v76;
      v15 = JSC::JSObject::get(Object, a2, (unint64_t)v76);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_157;
      if (v15 == 10)
      {
        LOBYTE(v16) = 0;
      }
      else
      {
        v76 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        v17 = v76;
        v16 = WebCore::parseEnumeration<WebCore::PlaybackDirection>(a2, v15);
        if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
          goto LABEL_157;
        if (v16 <= 0xFFu)
        {
          JSC::throwTypeError();
          goto LABEL_157;
        }
      }
      HIBYTE(v70) = v16;
      WTF::AtomStringImpl::addLiteral();
      v18 = v76;
      v20 = JSC::JSObject::get(Object, a2, (unint64_t)v76);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
      {
        if (v20 != 10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUnrestrictedDouble,WebCore::IDLDOMString>>::convert(a2, v20, (uint64_t)&v76);
          v39 = v79;
          if (v79)
          {
            *(_DWORD *)(a3 + 72) = 1;
LABEL_102:
            if (v39 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32721E8[v39])(&v72, &v77);
            goto LABEL_104;
          }
          v21 = v78;
          LOBYTE(v72) = 0;
          v73 = -1;
          if (v78 == -1)
          {
            if (v66 == -1)
              goto LABEL_37;
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32713D0[v66])(&v75, &v65);
            v66 = -1;
LABEL_34:
            if (v73 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32713D0[v73])(&v75, &v72);
            if (v6 == 2)
            {
LABEL_42:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v25 = v75;
              goto LABEL_51;
            }
LABEL_37:
            WTF::AtomStringImpl::addLiteral();
            v22 = v72;
            v24 = JSC::JSObject::get(Object, a2, (unint64_t)v72);
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v23);
              else
                *(_DWORD *)v22 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            {
              *(_DWORD *)(a3 + 72) = 1;
              goto LABEL_101;
            }
            if (v24 == 10)
              goto LABEL_42;
            v75 = (WTF::StringImpl *)v24;
            v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v75, a2);
LABEL_49:
              if (*((_DWORD *)v26 + 20))
              {
                v56 = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
                v25 = v74;
                if (v56)
                {
                  v73 = 1;
                  v74 = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, v23);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                  v51 = 1;
                  v52 = 1;
                  goto LABEL_100;
                }
              }
              else
              {
                v25 = v74;
              }
LABEL_51:
              v73 = 0;
              v72 = 0;
              v28 = v69;
              v69 = v25;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v23);
                else
                  *(_DWORD *)v28 -= 2;
              }
              if (v6 == 2)
              {
                LOBYTE(v70) = 4;
                *((_QWORD *)&v67 + 1) = 0;
                *(_QWORD *)&v68 = 0;
                v29 = 1.0;
LABEL_97:
                *((double *)&v68 + 1) = v29;
                *(_BYTE *)(a3 + 8) = 0;
                *(_DWORD *)(a3 + 16) = -1;
                v50 = v66;
                if (v66 != -1)
                {
                  ((void (*)(WTF::StringImpl **))off_1E32713E0[v66])(&v75);
                  *(_DWORD *)(a3 + 16) = v50;
                }
                v51 = 0;
                v52 = 0;
                v53 = v68;
                *(_OWORD *)(a3 + 24) = v67;
                *(_OWORD *)(a3 + 40) = v53;
                v54 = v69;
                v69 = 0;
                *(_QWORD *)(a3 + 56) = v54;
                *(_WORD *)(a3 + 64) = v70;
                goto LABEL_100;
              }
              WTF::AtomStringImpl::addLiteral();
              v30 = v75;
              v32 = JSC::JSObject::get(Object, a2, (unint64_t)v75);
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v31);
                else
                  *(_DWORD *)v30 -= 2;
              }
              if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
              {
                v33 = 0.0;
                if (v32 != 10)
                {
                  v34 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v74 = v34;
                  v75 = (WTF::StringImpl *)v32;
                  if (v32 >= 0xFFFE000000000000)
                  {
                    v33 = (double)(int)v32;
                  }
                  else if (v32 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  {
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v75, a2);
                  }
                  else
                  {
                    *(_QWORD *)&v33 = v32 - 0x2000000000000;
                  }
                  if (*((_DWORD *)v34 + 20))
                  {
                    v62 = v33;
                    v58 = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
                    v33 = v62;
                    if ((v58 & 1) != 0)
                      goto LABEL_166;
                  }
                  if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                    goto LABEL_141;
                }
                *((double *)&v67 + 1) = v33;
                WTF::AtomStringImpl::addLiteral();
                v35 = v75;
                v37 = JSC::JSObject::get(Object, a2, (unint64_t)v75);
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, v36);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  goto LABEL_166;
                if (v37 == 10)
                {
                  LOBYTE(v38) = 4;
                }
                else
                {
                  v75 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v40 = v75;
                  v38 = WebCore::parseEnumeration<WebCore::FillMode>(a2, v37);
                  if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
                    goto LABEL_166;
                  if (v38 <= 0xFFu)
                  {
                    JSC::throwTypeError();
                    goto LABEL_166;
                  }
                }
                LOBYTE(v70) = v38;
                WTF::AtomStringImpl::addLiteral();
                v41 = v75;
                v43 = JSC::JSObject::get(Object, a2, (unint64_t)v75);
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v42);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  goto LABEL_166;
                v44 = 0.0;
                if (v43 == 10)
                  goto LABEL_88;
                v45 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                v74 = v45;
                v75 = (WTF::StringImpl *)v43;
                if (v43 >= 0xFFFE000000000000)
                {
                  v44 = (double)(int)v43;
                }
                else if (v43 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v75, a2);
                }
                else
                {
                  *(_QWORD *)&v44 = v43 - 0x2000000000000;
                }
                if (*((_DWORD *)v45 + 20))
                {
                  v63 = v44;
                  v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
                  v44 = v63;
                  if ((v59 & 1) != 0)
                    goto LABEL_166;
                }
                if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                {
LABEL_88:
                  *(double *)&v68 = v44;
                  WTF::AtomStringImpl::addLiteral();
                  v46 = v75;
                  v48 = JSC::JSObject::get(Object, a2, (unint64_t)v75);
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, v47);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
                  {
                    v29 = 1.0;
                    if (v48 == 10)
                      goto LABEL_97;
                    v75 = (WTF::StringImpl *)v48;
                    v49 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if (v48 >= 0xFFFE000000000000)
                    {
                      v29 = (double)(int)v48;
                    }
                    else if (v48 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v75, a2);
                    }
                    else
                    {
                      *(_QWORD *)&v29 = v48 - 0x2000000000000;
                    }
                    if (!*((_DWORD *)v49 + 20))
                      goto LABEL_97;
                    v64 = v29;
                    v60 = JSC::VM::hasExceptionsAfterHandlingTraps(v49);
                    v29 = v64;
                    if ((v60 & 1) == 0)
                      goto LABEL_97;
                  }
                }
                else
                {
LABEL_141:
                  JSC::throwTypeError();
                }
              }
LABEL_166:
              v52 = 0;
              v51 = 1;
LABEL_100:
              *(_DWORD *)(a3 + 72) = v51;
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v52])(&v75, &v72);
LABEL_101:
              v39 = v79;
              goto LABEL_102;
            }
            v27 = *(WTF::StringImpl **)(v24 + 8);
            if ((v27 & 1) != 0)
            {
              v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, a2);
              if (!v27)
                goto LABEL_48;
            }
            else if (!v27)
            {
LABEL_48:
              v74 = v27;
              goto LABEL_49;
            }
            *(_DWORD *)v27 += 2;
            goto LABEL_48;
          }
LABEL_33:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **, unint64_t *))off_1E32713E0[v21])(&v75, &v72, &v77);
          v73 = v21;
          v75 = (WTF::StringImpl *)&v65;
          ((void (*)(WTF::StringImpl **, uint64_t *, WTF::StringImpl **))off_1E32721D8[v21])(&v75, &v65, &v72);
          goto LABEL_34;
        }
LABEL_32:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v77 = (unint64_t)v72;
        v21 = 1;
        v78 = 1;
        v79 = 0;
        LOBYTE(v72) = 0;
        v73 = -1;
        goto LABEL_33;
      }
    }
    else
    {
      JSC::throwTypeError();
    }
  }
LABEL_157:
  *(_DWORD *)(a3 + 72) = 1;
LABEL_104:
  result = v69;
  v69 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  if (v66 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E32713D0[v66])(&v76, &v65);
  return result;
}

uint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE v52[40];
  uint64_t v53;
  char v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *(double *)(a3 + 16);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v12 = (int)v11, v11 == (double)(int)v12)
    && ((_DWORD)v12 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
  {
    v13 = v12 | 0xFFFE000000000000;
  }
  else
  {
    v13 = *(_QWORD *)&v11 + 0x2000000000000;
  }
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v56;
  v56 = 0;
  v57 = (uint64_t *)v9;
  v58 = 0x1000000FFFFFFFFLL;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v14, v13, 0, (uint64_t)&v56);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = WebCore::convertEnumerationToJS<WebCore::PlaybackDirection>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(a3 + 57));
  if (*(_DWORD *)(v6 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v56;
  v56 = 0;
  v57 = (uint64_t *)v9;
  v58 = 0x1000000FFFFFFFFLL;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v17, v16, 0, (uint64_t)&v56);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*(_DWORD *)(a3 + 8) == -1)
    v19 = -1;
  else
    v19 = *(unsigned int *)(a3 + 8);
  LOBYTE(v53) = 0;
  v54 = 0;
  v55 = v19;
  v56 = (WTF::StringImpl *)&v55;
  v57 = &v53;
  v58 = a1;
  v59 = a2;
  v60 = a3;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_21IDLUnrestrictedDoubleENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdN3WTF6StringEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSL_IlLl1EEEEEET_SO_((uint64_t **)&v56, (uint64_t)v52);
  if (v54)
  {
    v20 = v53;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v21 = v56;
    v56 = 0;
    v57 = (uint64_t *)v9;
    v58 = 0x1000000FFFFFFFFLL;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v21, v20, 0, (uint64_t)&v56);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(a3 + 48);
    if (!v24 || (v25 = *(_DWORD *)(v24 + 4)) == 0)
    {
      v26 = *(_QWORD *)(v23 + 41968);
      goto LABEL_31;
    }
    if (v25 != 1)
      goto LABEL_28;
    v48 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v49 = *v48;
    }
    else
    {
      v50 = *(unsigned __int16 *)v48;
      if (v50 > 0xFF)
      {
LABEL_28:
        v26 = *(_QWORD *)(v23 + 64760);
        if (!v26 || v24 != *(_QWORD *)(v26 + 8))
          v26 = JSC::jsStringWithCacheSlowCase();
LABEL_31:
        if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v27 = v56;
          v56 = 0;
          v57 = (uint64_t *)v9;
          v58 = 0x1000000FFFFFFFFLL;
          v59 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v26, 0, (uint64_t)&v56);
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v28);
            else
              *(_DWORD *)v27 -= 2;
          }
          v29 = *(double *)(a3 + 24);
          if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v30 = (int)v29, v29 == (double)(int)v30)
            && ((_DWORD)v30 || (*(_QWORD *)&v29 & 0x8000000000000000) == 0))
          {
            v31 = v30 | 0xFFFE000000000000;
          }
          else
          {
            v31 = *(_QWORD *)&v29 + 0x2000000000000;
          }
          if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v32 = v56;
            v56 = 0;
            v57 = (uint64_t *)v9;
            v58 = 0x1000000FFFFFFFFLL;
            v59 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v32, v31, 0, (uint64_t)&v56);
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v33);
              else
                *(_DWORD *)v32 -= 2;
            }
            v34 = WebCore::convertEnumerationToJS<WebCore::FillMode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(a3 + 56));
            if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
            {
              WTF::AtomStringImpl::addLiteral();
              v35 = v56;
              v56 = 0;
              v57 = (uint64_t *)v9;
              v58 = 0x1000000FFFFFFFFLL;
              v59 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v35, v34, 0, (uint64_t)&v56);
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v36);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v37 = *(double *)(a3 + 32);
              if ((*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v38 = (int)v37, v37 == (double)(int)v38)
                && ((_DWORD)v38 || (*(_QWORD *)&v37 & 0x8000000000000000) == 0))
              {
                v39 = v38 | 0xFFFE000000000000;
              }
              else
              {
                v39 = *(_QWORD *)&v37 + 0x2000000000000;
              }
              if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
              {
                WTF::AtomStringImpl::addLiteral();
                v40 = v56;
                v56 = 0;
                v57 = (uint64_t *)v9;
                v58 = 0x1000000FFFFFFFFLL;
                v59 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v40, v39, 0, (uint64_t)&v56);
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v41);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v42 = *(double *)(a3 + 40);
                if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (v43 = (int)v42, v42 == (double)(int)v43)
                  && ((_DWORD)v43 || (*(_QWORD *)&v42 & 0x8000000000000000) == 0))
                {
                  v44 = v43 | 0xFFFE000000000000;
                }
                else
                {
                  v44 = *(_QWORD *)&v42 + 0x2000000000000;
                }
                if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
                {
                  WTF::AtomStringImpl::addLiteral();
                  v45 = v56;
                  v56 = 0;
                  v57 = (uint64_t *)v9;
                  v58 = 0x1000000FFFFFFFFLL;
                  v59 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v45, v44, 0, (uint64_t)&v56);
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, v46);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  return v9;
                }
              }
            }
          }
        }
        return 0;
      }
      v49 = v50;
    }
    v26 = *(_QWORD *)(v23 + 8 * v49 + 42216);
    goto LABEL_31;
  }
  v51 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::JSElement::analyzeHeap(v51);
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t result;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  double v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  unint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  unint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  unint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  unint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  unint64_t v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  WTF *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  unint64_t v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  unint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  double v172;
  uint64_t v173;
  unint64_t v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  double v177;
  uint64_t v178;
  unint64_t v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  unint64_t v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  double v186;
  uint64_t v187;
  unint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  unsigned __int8 *v191;
  unsigned int v192;
  unsigned __int8 *v193;
  unsigned int v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  unsigned __int8 *v201;
  unsigned int v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unsigned __int8 *v205;
  unsigned int v206;
  unsigned __int8 *v207;
  unsigned int v208;
  unsigned __int8 *v209;
  unsigned int v210;
  unsigned __int8 *v211;
  unsigned int v212;
  unsigned __int8 *v213;
  unsigned int v214;
  unsigned __int8 *v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  WTF *v227;
  unint64_t v228;
  int v229;
  int v230;
  uint64_t v231;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12 || (v13 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
    goto LABEL_9;
  }
  if (v13 != 1)
    goto LABEL_6;
  v191 = *(unsigned __int8 **)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
    v192 = *v191;
LABEL_378:
    v14 = *(_QWORD *)(v11 + 8 * v192 + 42216);
    goto LABEL_9;
  }
  v217 = *(unsigned __int16 *)v191;
  if (v217 <= 0xFF)
  {
    v192 = v217;
    goto LABEL_378;
  }
LABEL_6:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v12 != *(_QWORD *)(v14 + 8))
    v14 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v227);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = *(double *)a3;
  if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v18 = (int)v17, v17 == (double)(int)v18)
    && ((_DWORD)v18 || (*(_QWORD *)&v17 & 0x8000000000000000) == 0))
  {
    v19 = v18 | 0xFFFE000000000000;
  }
  else
  {
    v19 = *(_QWORD *)&v17 + 0x2000000000000;
  }
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v20 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v20, v19, 0, (uint64_t)&v227);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  v22 = WebCore::JSConverter<WebCore::IDLEnumeration<WebCore::RTCStatsReport::Type>>::convert(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(a3 + 8));
  if (*(_DWORD *)(v6 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v23 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v23, v22, 0, (uint64_t)&v227);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  v25 = *(_QWORD *)(a3 + 48);
  if (!v25)
    goto LABEL_37;
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_DWORD *)(v25 + 4);
  if (v27)
  {
    if (v27 != 1)
    {
LABEL_30:
      v28 = *(_QWORD *)(v26 + 64760);
      if (!v28 || v25 != *(_QWORD *)(v28 + 8))
        v28 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_33;
    }
    v201 = *(unsigned __int8 **)(v25 + 8);
    if ((*(_BYTE *)(v25 + 16) & 4) != 0)
    {
      v202 = *v201;
    }
    else
    {
      v219 = *(unsigned __int16 *)v201;
      if (v219 > 0xFF)
        goto LABEL_30;
      v202 = v219;
    }
    v28 = *(_QWORD *)(v26 + 8 * v202 + 42216);
  }
  else
  {
    v28 = *(_QWORD *)(v26 + 41968);
  }
LABEL_33:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v29 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v29, v28, 0, (uint64_t)&v227);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
LABEL_37:
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a3 + 32);
  if (!v32 || (v33 = *(_DWORD *)(v32 + 4)) == 0)
  {
    v34 = *(_QWORD *)(v31 + 41968);
    goto LABEL_43;
  }
  if (v33 != 1)
    goto LABEL_40;
  v193 = *(unsigned __int8 **)(v32 + 8);
  if ((*(_BYTE *)(v32 + 16) & 4) != 0)
  {
    v194 = *v193;
LABEL_381:
    v34 = *(_QWORD *)(v31 + 8 * v194 + 42216);
    goto LABEL_43;
  }
  v218 = *(unsigned __int16 *)v193;
  if (v218 <= 0xFF)
  {
    v194 = v218;
    goto LABEL_381;
  }
LABEL_40:
  v34 = *(_QWORD *)(v31 + 64760);
  if (!v34 || v32 != *(_QWORD *)(v34 + 8))
    v34 = JSC::jsStringWithCacheSlowCase();
LABEL_43:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v35 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v35, v34, 0, (uint64_t)&v227);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  v37 = *(unsigned int *)(a3 + 24);
  v38 = (v37 & 0x80000000) != 0
      ? COERCE__INT64((double)v37) + 0x2000000000000
      : v37 | 0xFFFE000000000000;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v39 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v39, v38, 0, (uint64_t)&v227);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      result = WTF::StringImpl::destroy(v39, v41);
    else
      *(_DWORD *)v39 -= 2;
  }
  v42 = *(_QWORD *)(a3 + 40);
  if (!v42)
    goto LABEL_63;
  v43 = *(_QWORD *)(a1 + 56);
  v44 = *(_DWORD *)(v42 + 4);
  if (v44)
  {
    if (v44 != 1)
    {
LABEL_56:
      v45 = *(_QWORD *)(v43 + 64760);
      if (!v45 || v42 != *(_QWORD *)(v45 + 8))
        v45 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_59;
    }
    v203 = *(unsigned __int8 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
    {
      v204 = *v203;
    }
    else
    {
      v220 = *(unsigned __int16 *)v203;
      if (v220 > 0xFF)
        goto LABEL_56;
      v204 = v220;
    }
    v45 = *(_QWORD *)(v43 + 8 * v204 + 42216);
  }
  else
  {
    v45 = *(_QWORD *)(v43 + 41968);
  }
LABEL_59:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v46, v45, 0, (uint64_t)&v227);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      result = WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
LABEL_63:
  if (!*(_BYTE *)(a3 + 72))
    goto LABEL_71;
  v48 = *(_QWORD *)(a3 + 64);
  if (HIDWORD(v48))
  {
    v195 = (double)v48;
  }
  else
  {
    if ((v48 & 0x80000000) == 0)
    {
      v49 = v48 | 0xFFFE000000000000;
      goto LABEL_67;
    }
    v195 = (double)v48;
  }
  v49 = *(_QWORD *)&v195 + 0x2000000000000;
LABEL_67:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v50 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v50, v49, 0, (uint64_t)&v227);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      result = WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
LABEL_71:
  if (*(_BYTE *)(a3 + 60))
  {
    v52 = *(unsigned int *)(a3 + 56);
    if ((v52 & 0x80000000) != 0)
      v53 = COERCE__INT64((double)v52) + 0x2000000000000;
    else
      v53 = v52 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v54 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v54, v53, 0, (uint64_t)&v227);
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        result = WTF::StringImpl::destroy(v54, v55);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 377))
  {
    if (*(_BYTE *)(a3 + 376))
      v56 = 7;
    else
      v56 = 6;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v57 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v57, v56, 0, (uint64_t)&v227);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        result = WTF::StringImpl::destroy(v57, v58);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 364))
  {
    v59 = *(unsigned int *)(a3 + 360);
    if ((v59 & 0x80000000) != 0)
      v60 = COERCE__INT64((double)v59) + 0x2000000000000;
    else
      v60 = v59 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v61 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v61, v60, 0, (uint64_t)&v227);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        result = WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 212))
  {
    v63 = *(unsigned int *)(a3 + 208);
    if ((v63 & 0x80000000) != 0)
      v64 = COERCE__INT64((double)v63) + 0x2000000000000;
    else
      v64 = v63 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v65 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v65, v64, 0, (uint64_t)&v227);
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        result = WTF::StringImpl::destroy(v65, v66);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 204))
  {
    v67 = *(unsigned int *)(a3 + 200);
    if ((v67 & 0x80000000) != 0)
      v68 = COERCE__INT64((double)v67) + 0x2000000000000;
    else
      v68 = v67 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v69 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v69, v68, 0, (uint64_t)&v227);
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        result = WTF::StringImpl::destroy(v69, v70);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 252))
  {
    v71 = *(unsigned int *)(a3 + 248);
    if ((v71 & 0x80000000) != 0)
      v72 = COERCE__INT64((double)v71) + 0x2000000000000;
    else
      v72 = v71 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v73 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v73, v72, 0, (uint64_t)&v227);
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        result = WTF::StringImpl::destroy(v73, v74);
      else
        *(_DWORD *)v73 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 224))
  {
    v75 = *(double *)(a3 + 216);
    if ((*(_QWORD *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v76 = (int)v75, v75 == (double)(int)v76)
      && ((_DWORD)v76 || (*(_QWORD *)&v75 & 0x8000000000000000) == 0))
    {
      v77 = v76 | 0xFFFE000000000000;
    }
    else
    {
      v77 = *(_QWORD *)&v75 + 0x2000000000000;
    }
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v78 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v78, v77, 0, (uint64_t)&v227);
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        result = WTF::StringImpl::destroy(v78, v79);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 236))
  {
    v80 = *(unsigned int *)(a3 + 232);
    if ((v80 & 0x80000000) != 0)
      v81 = COERCE__INT64((double)v80) + 0x2000000000000;
    else
      v81 = v80 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v82 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v82, v81, 0, (uint64_t)&v227);
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        result = WTF::StringImpl::destroy(v82, v83);
      else
        *(_DWORD *)v82 -= 2;
    }
  }
  if (!*(_BYTE *)(a3 + 120))
    goto LABEL_140;
  v84 = *(_QWORD *)(a3 + 112);
  if (HIDWORD(v84))
  {
    v196 = (double)v84;
  }
  else
  {
    if ((v84 & 0x80000000) == 0)
    {
      v85 = v84 | 0xFFFE000000000000;
      goto LABEL_136;
    }
    v196 = (double)v84;
  }
  v85 = *(_QWORD *)&v196 + 0x2000000000000;
LABEL_136:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v86 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v86, v85, 0, (uint64_t)&v227);
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      result = WTF::StringImpl::destroy(v86, v87);
    else
      *(_DWORD *)v86 -= 2;
  }
LABEL_140:
  if (*(_BYTE *)(a3 + 244))
  {
    v88 = *(unsigned int *)(a3 + 240);
    if ((v88 & 0x80000000) != 0)
      v89 = COERCE__INT64((double)v88) + 0x2000000000000;
    else
      v89 = v88 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v90 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v90, v89, 0, (uint64_t)&v227);
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        result = WTF::StringImpl::destroy(v90, v91);
      else
        *(_DWORD *)v90 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 260))
  {
    v92 = *(unsigned int *)(a3 + 256);
    if ((v92 & 0x80000000) != 0)
      v93 = COERCE__INT64((double)v92) + 0x2000000000000;
    else
      v93 = v92 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v94 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v94, v93, 0, (uint64_t)&v227);
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        result = WTF::StringImpl::destroy(v94, v95);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  v96 = *(_QWORD *)(a3 + 88);
  if (!v96)
    goto LABEL_164;
  v97 = *(_QWORD *)(a1 + 56);
  v98 = *(_DWORD *)(v96 + 4);
  if (v98)
  {
    if (v98 != 1)
    {
LABEL_157:
      v99 = *(_QWORD *)(v97 + 64760);
      if (!v99 || v96 != *(_QWORD *)(v99 + 8))
        v99 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_160;
    }
    v205 = *(unsigned __int8 **)(v96 + 8);
    if ((*(_BYTE *)(v96 + 16) & 4) != 0)
    {
      v206 = *v205;
    }
    else
    {
      v221 = *(unsigned __int16 *)v205;
      if (v221 > 0xFF)
        goto LABEL_157;
      v206 = v221;
    }
    v99 = *(_QWORD *)(v97 + 8 * v206 + 42216);
  }
  else
  {
    v99 = *(_QWORD *)(v97 + 41968);
  }
LABEL_160:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v100 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v100, v99, 0, (uint64_t)&v227);
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      result = WTF::StringImpl::destroy(v100, v101);
    else
      *(_DWORD *)v100 -= 2;
  }
LABEL_164:
  v102 = *(_QWORD *)(a3 + 80);
  if (!v102)
    goto LABEL_174;
  v103 = *(_QWORD *)(a1 + 56);
  v104 = *(_DWORD *)(v102 + 4);
  if (v104)
  {
    if (v104 != 1)
    {
LABEL_167:
      v105 = *(_QWORD *)(v103 + 64760);
      if (!v105 || v102 != *(_QWORD *)(v105 + 8))
        v105 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_170;
    }
    v207 = *(unsigned __int8 **)(v102 + 8);
    if ((*(_BYTE *)(v102 + 16) & 4) != 0)
    {
      v208 = *v207;
    }
    else
    {
      v222 = *(unsigned __int16 *)v207;
      if (v222 > 0xFF)
        goto LABEL_167;
      v208 = v222;
    }
    v105 = *(_QWORD *)(v103 + 8 * v208 + 42216);
  }
  else
  {
    v105 = *(_QWORD *)(v103 + 41968);
  }
LABEL_170:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v106 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v106, v105, 0, (uint64_t)&v227);
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      result = WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v102);
    else
      *(_DWORD *)v106 -= 2;
  }
LABEL_174:
  if (*(_BYTE *)(a3 + 356))
  {
    v107 = *(unsigned int *)(a3 + 352);
    if ((v107 & 0x80000000) != 0)
      v108 = COERCE__INT64((double)v107) + 0x2000000000000;
    else
      v108 = v107 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v109 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v109, v108, 0, (uint64_t)&v227);
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
        result = WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v102);
      else
        *(_DWORD *)v109 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 372))
  {
    v110 = *(unsigned int *)(a3 + 368);
    if ((v110 & 0x80000000) != 0)
      v111 = COERCE__INT64((double)v110) + 0x2000000000000;
    else
      v111 = v110 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v112 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v112, v111, 0, (uint64_t)&v227);
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
        result = WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v102);
      else
        *(_DWORD *)v112 -= 2;
    }
  }
  if (!*(_BYTE *)(a3 + 272))
    goto LABEL_196;
  v113 = *(_QWORD *)(a3 + 264);
  if (HIDWORD(v113))
  {
    v197 = (double)v113;
  }
  else
  {
    if ((v113 & 0x80000000) == 0)
    {
      v114 = v113 | 0xFFFE000000000000;
      goto LABEL_192;
    }
    v197 = (double)v113;
  }
  v114 = *(_QWORD *)&v197 + 0x2000000000000;
LABEL_192:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v115 = v227;
  v227 = 0;
  v228 = v9;
  v229 = -1;
  v230 = 0x1000000;
  v231 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v115, v114, 0, (uint64_t)&v227);
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      result = WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v102);
    else
      *(_DWORD *)v115 -= 2;
  }
LABEL_196:
  if (!*(_BYTE *)(a3 + 336))
    goto LABEL_218;
  v116 = *(unsigned int *)(a3 + 332);
  v227 = 0;
  LODWORD(v228) = 0;
  HIDWORD(v228) = v116;
  if (!(_DWORD)v116)
  {
LABEL_204:
    v123 = WebCore::JSConverter<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLDouble>>::convert<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (unsigned int *)&v227);
    if (HIDWORD(v228))
    {
      v124 = v227;
      v125 = 16 * HIDWORD(v228);
      do
      {
        v126 = *(WTF::StringImpl **)v124;
        *(_QWORD *)v124 = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2)
            WTF::StringImpl::destroy(v126, v122);
          else
            *(_DWORD *)v126 -= 2;
        }
        v124 = (WTF *)((char *)v124 + 16);
        v125 -= 16;
      }
      while (v125);
    }
    v127 = v227;
    if (v227)
    {
      v227 = 0;
      LODWORD(v228) = 0;
      WTF::fastFree(v127, v122);
    }
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v128 = v227;
    v227 = 0;
    v228 = v9;
    v229 = -1;
    v230 = 0x1000000;
    v231 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v128, v123, 0, (uint64_t)&v227);
    if (v128)
    {
      if (*(_DWORD *)v128 == 2)
        WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v102);
      else
        *(_DWORD *)v128 -= 2;
    }
LABEL_218:
    if (!*(_BYTE *)(a3 + 316))
      goto LABEL_233;
    v129 = *(int *)(a3 + 312);
    v130 = *(_QWORD *)(a1 + 56);
    v131 = (uint64_t *)(v130 + 41968);
    if ((byte_1EE3366EC & 1) == 0)
    {
      dword_1ECE79B80 += 2;
      byte_1EE3366EC = 1;
      dword_1ECE79BA0 += 2;
      qword_1EE336890 = (uint64_t)&dword_1ECE79B80;
      unk_1EE336898 = &dword_1ECE79BA0;
      dword_1ECE79BC0 += 2;
      dword_1ECE79BE0 += 2;
      qword_1EE3368A0 = (uint64_t)&dword_1ECE79BC0;
      unk_1EE3368A8 = &dword_1ECE79BE0;
    }
    v132 = *(_QWORD *)&_MergedGlobals_514[8 * v129 + 424];
    if (!v132)
    {
      v135 = *v131;
LABEL_229:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v136 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v136, v135, 0, (uint64_t)&v227);
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, v137);
        else
          *(_DWORD *)v136 -= 2;
      }
LABEL_233:
      if (*(_BYTE *)(a3 + 348))
      {
        v138 = *(unsigned int *)(a3 + 344);
        if ((v138 & 0x80000000) != 0)
          v139 = COERCE__INT64((double)v138) + 0x2000000000000;
        else
          v139 = v138 | 0xFFFE000000000000;
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        WTF::AtomStringImpl::addLiteral();
        v140 = v227;
        v227 = 0;
        v228 = v9;
        v229 = -1;
        v230 = 0x1000000;
        v231 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v140, v139, 0, (uint64_t)&v227);
        if (v140)
        {
          if (*(_DWORD *)v140 == 2)
            WTF::StringImpl::destroy(v140, v141);
          else
            *(_DWORD *)v140 -= 2;
        }
      }
      v142 = *(_QWORD *)(a3 + 96);
      if (!v142)
        goto LABEL_250;
      v143 = *(_QWORD *)(a1 + 56);
      v144 = *(_DWORD *)(v142 + 4);
      if (v144)
      {
        if (v144 != 1)
        {
LABEL_243:
          v145 = *(_QWORD *)(v143 + 64760);
          if (!v145 || v142 != *(_QWORD *)(v145 + 8))
            v145 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_246;
        }
        v209 = *(unsigned __int8 **)(v142 + 8);
        if ((*(_BYTE *)(v142 + 16) & 4) != 0)
        {
          v210 = *v209;
        }
        else
        {
          v223 = *(unsigned __int16 *)v209;
          if (v223 > 0xFF)
            goto LABEL_243;
          v210 = v223;
        }
        v145 = *(_QWORD *)(v143 + 8 * v210 + 42216);
      }
      else
      {
        v145 = *(_QWORD *)(v143 + 41968);
      }
LABEL_246:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v146 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v146, v145, 0, (uint64_t)&v227);
      if (v146)
      {
        if (*(_DWORD *)v146 == 2)
          WTF::StringImpl::destroy(v146, v147);
        else
          *(_DWORD *)v146 -= 2;
      }
LABEL_250:
      if (!*(_BYTE *)(a3 + 152))
        goto LABEL_258;
      v148 = *(_QWORD *)(a3 + 144);
      if (HIDWORD(v148))
      {
        v198 = (double)v148;
      }
      else
      {
        if ((v148 & 0x80000000) == 0)
        {
          v149 = v148 | 0xFFFE000000000000;
          goto LABEL_254;
        }
        v198 = (double)v148;
      }
      v149 = *(_QWORD *)&v198 + 0x2000000000000;
LABEL_254:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v150 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v150, v149, 0, (uint64_t)&v227);
      if (v150)
      {
        if (*(_DWORD *)v150 == 2)
          WTF::StringImpl::destroy(v150, v151);
        else
          *(_DWORD *)v150 -= 2;
      }
LABEL_258:
      if (!*(_BYTE *)(a3 + 136))
        goto LABEL_266;
      v152 = *(_QWORD *)(a3 + 128);
      if (HIDWORD(v152))
      {
        v199 = (double)v152;
      }
      else
      {
        if ((v152 & 0x80000000) == 0)
        {
          v153 = v152 | 0xFFFE000000000000;
          goto LABEL_262;
        }
        v199 = (double)v152;
      }
      v153 = *(_QWORD *)&v199 + 0x2000000000000;
LABEL_262:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v154 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v154, v153, 0, (uint64_t)&v227);
      if (v154)
      {
        if (*(_DWORD *)v154 == 2)
          WTF::StringImpl::destroy(v154, v155);
        else
          *(_DWORD *)v154 -= 2;
      }
LABEL_266:
      v156 = *(_QWORD *)(a3 + 104);
      if (!v156)
        goto LABEL_276;
      v157 = *(_QWORD *)(a1 + 56);
      v158 = *(_DWORD *)(v156 + 4);
      if (v158)
      {
        if (v158 != 1)
        {
LABEL_269:
          v159 = *(_QWORD *)(v157 + 64760);
          if (!v159 || v156 != *(_QWORD *)(v159 + 8))
            v159 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_272;
        }
        v211 = *(unsigned __int8 **)(v156 + 8);
        if ((*(_BYTE *)(v156 + 16) & 4) != 0)
        {
          v212 = *v211;
        }
        else
        {
          v224 = *(unsigned __int16 *)v211;
          if (v224 > 0xFF)
            goto LABEL_269;
          v212 = v224;
        }
        v159 = *(_QWORD *)(v157 + 8 * v212 + 42216);
      }
      else
      {
        v159 = *(_QWORD *)(v157 + 41968);
      }
LABEL_272:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v160 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v160, v159, 0, (uint64_t)&v227);
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v161);
        else
          *(_DWORD *)v160 -= 2;
      }
LABEL_276:
      if (*(_BYTE *)(a3 + 164))
      {
        v162 = *(unsigned int *)(a3 + 160);
        if ((v162 & 0x80000000) != 0)
          v163 = COERCE__INT64((double)v162) + 0x2000000000000;
        else
          v163 = v162 | 0xFFFE000000000000;
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        WTF::AtomStringImpl::addLiteral();
        v164 = v227;
        v227 = 0;
        v228 = v9;
        v229 = -1;
        v230 = 0x1000000;
        v231 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v164, v163, 0, (uint64_t)&v227);
        if (v164)
        {
          if (*(_DWORD *)v164 == 2)
            WTF::StringImpl::destroy(v164, v165);
          else
            *(_DWORD *)v164 -= 2;
        }
      }
      v166 = *(_QWORD *)(a3 + 384);
      if (!v166)
        goto LABEL_293;
      v167 = *(_QWORD *)(a1 + 56);
      v168 = *(_DWORD *)(v166 + 4);
      if (v168)
      {
        if (v168 != 1)
        {
LABEL_286:
          v169 = *(_QWORD *)(v167 + 64760);
          if (!v169 || v166 != *(_QWORD *)(v169 + 8))
            v169 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_289;
        }
        v213 = *(unsigned __int8 **)(v166 + 8);
        if ((*(_BYTE *)(v166 + 16) & 4) != 0)
        {
          v214 = *v213;
        }
        else
        {
          v225 = *(unsigned __int16 *)v213;
          if (v225 > 0xFF)
            goto LABEL_286;
          v214 = v225;
        }
        v169 = *(_QWORD *)(v167 + 8 * v214 + 42216);
      }
      else
      {
        v169 = *(_QWORD *)(v167 + 41968);
      }
LABEL_289:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v170 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v170, v169, 0, (uint64_t)&v227);
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
          WTF::StringImpl::destroy(v170, v171);
        else
          *(_DWORD *)v170 -= 2;
      }
LABEL_293:
      if (*(_BYTE *)(a3 + 176))
      {
        v172 = *(double *)(a3 + 168);
        if ((*(_QWORD *)&v172 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v173 = (int)v172, v172 == (double)(int)v173)
          && ((_DWORD)v173 || (*(_QWORD *)&v172 & 0x8000000000000000) == 0))
        {
          v174 = v173 | 0xFFFE000000000000;
        }
        else
        {
          v174 = *(_QWORD *)&v172 + 0x2000000000000;
        }
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        WTF::AtomStringImpl::addLiteral();
        v175 = v227;
        v227 = 0;
        v228 = v9;
        v229 = -1;
        v230 = 0x1000000;
        v231 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v175, v174, 0, (uint64_t)&v227);
        if (v175)
        {
          if (*(_DWORD *)v175 == 2)
            WTF::StringImpl::destroy(v175, v176);
          else
            *(_DWORD *)v175 -= 2;
        }
      }
      if (*(_BYTE *)(a3 + 288))
      {
        v177 = *(double *)(a3 + 280);
        if ((*(_QWORD *)&v177 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v178 = (int)v177, v177 == (double)(int)v178)
          && ((_DWORD)v178 || (*(_QWORD *)&v177 & 0x8000000000000000) == 0))
        {
          v179 = v178 | 0xFFFE000000000000;
        }
        else
        {
          v179 = *(_QWORD *)&v177 + 0x2000000000000;
        }
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        WTF::AtomStringImpl::addLiteral();
        v180 = v227;
        v227 = 0;
        v228 = v9;
        v229 = -1;
        v230 = 0x1000000;
        v231 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v180, v179, 0, (uint64_t)&v227);
        if (v180)
        {
          if (*(_DWORD *)v180 == 2)
            WTF::StringImpl::destroy(v180, v181);
          else
            *(_DWORD *)v180 -= 2;
        }
      }
      if (!*(_BYTE *)(a3 + 192))
        goto LABEL_323;
      v182 = *(_QWORD *)(a3 + 184);
      if (HIDWORD(v182))
      {
        v200 = (double)v182;
      }
      else
      {
        if ((v182 & 0x80000000) == 0)
        {
          v183 = v182 | 0xFFFE000000000000;
          goto LABEL_319;
        }
        v200 = (double)v182;
      }
      v183 = *(_QWORD *)&v200 + 0x2000000000000;
LABEL_319:
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v184 = v227;
      v227 = 0;
      v228 = v9;
      v229 = -1;
      v230 = 0x1000000;
      v231 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v184, v183, 0, (uint64_t)&v227);
      if (v184)
      {
        if (*(_DWORD *)v184 == 2)
          WTF::StringImpl::destroy(v184, v185);
        else
          *(_DWORD *)v184 -= 2;
      }
LABEL_323:
      if (!*(_BYTE *)(a3 + 304))
        return v9;
      v186 = *(double *)(a3 + 296);
      if ((*(_QWORD *)&v186 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v187 = (int)v186, v186 == (double)(int)v187)
        && ((_DWORD)v187 || (*(_QWORD *)&v186 & 0x8000000000000000) == 0))
      {
        v188 = v187 | 0xFFFE000000000000;
      }
      else
      {
        v188 = *(_QWORD *)&v186 + 0x2000000000000;
      }
      if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v189 = v227;
        v227 = 0;
        v228 = v9;
        v229 = -1;
        v230 = 0x1000000;
        v231 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v189, v188, 0, (uint64_t)&v227);
        if (v189)
        {
          if (*(_DWORD *)v189 == 2)
            WTF::StringImpl::destroy(v189, v190);
          else
            *(_DWORD *)v189 -= 2;
        }
        return v9;
      }
      return 0;
    }
    v133 = *(_DWORD *)v132;
    v134 = *(_DWORD *)(v132 + 4);
    *(_DWORD *)v132 += 2;
    if (v134)
    {
      if (v134 != 1)
      {
LABEL_224:
        v135 = *(_QWORD *)(v130 + 64760);
        if (!v135 || v132 != *(_QWORD *)(v135 + 8))
        {
          v135 = JSC::jsStringWithCacheSlowCase();
          v133 = *(_DWORD *)v132 - 2;
        }
        goto LABEL_227;
      }
      v215 = *(unsigned __int8 **)(v132 + 8);
      if ((*(_BYTE *)(v132 + 16) & 4) != 0)
      {
        v216 = *v215;
      }
      else
      {
        v226 = *(unsigned __int16 *)v215;
        if (v226 > 0xFF)
          goto LABEL_224;
        v216 = v226;
      }
      v135 = *(_QWORD *)(v130 + 8 * v216 + 42216);
    }
    else
    {
      v135 = *v131;
    }
LABEL_227:
    if (v133)
      *(_DWORD *)v132 = v133;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v132, (WTF::StringImpl *)v102);
    goto LABEL_229;
  }
  if (!(v116 >> 28))
  {
    v117 = (WTF *)WTF::fastMalloc((WTF *)(16 * v116));
    LODWORD(v228) = v116;
    v227 = v117;
    v118 = *(unsigned int *)(a3 + 332);
    if ((_DWORD)v118)
    {
      v119 = *(_QWORD *)(a3 + 320);
      v120 = v119 + 16 * v118;
      do
      {
        v121 = *(_DWORD **)v119;
        if (*(_QWORD *)v119)
          *v121 += 2;
        *(_QWORD *)v117 = v121;
        *((_QWORD *)v117 + 1) = *(_QWORD *)(v119 + 8);
        v119 += 16;
        v117 = (WTF *)((char *)v117 + 16);
      }
      while (v119 != v120);
    }
    goto LABEL_204;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSElement::JSElement(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSElement::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSElement::createPrototype(WebCore::JSElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
  Structure = WebCore::JSElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSElementPrototype::create(this, a2, Structure, v7);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElement>,(WebCore::DOMConstructorID)445>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3560);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSNode>,(WebCore::DOMConstructorID)466>(a1, a2);
  v8 = v7;
  LODWORD(v22) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v20);
    v6[2] = SlowCase + (int)v20;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v8, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = (_QWORD *)v6[165];
  v2 = v11[2846];
  if (v2 >= v11[2847])
  {
    v2 = v11[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v11[2849];
    v11[2847] = v2 + HIDWORD(v21);
    v11[2848] = v2 + (int)v21;
  }
  v11[2846] = v2 + 48;
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v12, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v22);
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v16 = *(_QWORD *)(v6[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v22);
  v17 = *(_QWORD *)(v6[227] + 2160);
  v19 = WebCore::JSElement::prototype((WebCore::JSElement *)a1, (JSC::VM *)a2, v18);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v19, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3560) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSElementPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElement>,(WebCore::DOMConstructorID)445>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsElement_namespaceURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 96) + 32);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsElement_prefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 96) + 16);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsElement_localName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 96) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsElement_tagName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 104))(&v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_8;
  }
  if (v5 != 1)
    goto LABEL_4;
  v8 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v9 = *v8;
LABEL_15:
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
    goto LABEL_16;
  }
  v10 = *(unsigned __int16 *)v8;
  if (v10 <= 0xFF)
  {
    v9 = v10;
    goto LABEL_15;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_16:
  v11 = 0;
LABEL_8:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsElement_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v11 = *(_DWORD *)(v3 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(uint64_t **)(v3 + 40);
      LODWORD(v13) = *(_DWORD *)(v3 + 52);
    }
    else
    {
      v12 = (uint64_t *)(v3 + 32);
      LODWORD(v13) = v11 >> 5;
    }
    if ((_DWORD)v13)
    {
      v13 = v13;
      while (1)
      {
        v14 = *v12;
        if (*v12 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v12 += 2;
        if (!--v13)
          goto LABEL_22;
      }
    }
    else
    {
LABEL_22:
      v12 = 0;
    }
    v4 = v12 + 1;
  }
  else
  {
    v4 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v5 = *v4;
  if (!*v4)
    return *(_QWORD *)(v2 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v2 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v15 = *(unsigned __int16 *)v9;
      if (v15 > 0xFF)
        goto LABEL_7;
      v10 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

BOOL WebCore::setJSElement_id(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v5 = v22;
  v6 = v22 == 0;
  if (!v22)
  {
    v7 = v21;
    v21 = 0;
    v28 = v7;
    v8 = *((_QWORD *)v3 + 13);
    if (v8
      && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
        ? (v10 = *(uint64_t **)(v8 + 40), v11 = *(_DWORD *)(v8 + 52))
        : (v10 = (uint64_t *)(v8 + 32), v11 = v9 >> 5),
          v11))
    {
      v12 = 0;
      while (1)
      {
        v13 = *v10;
        if (*v10 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        ++v12;
        v10 += 2;
        if (v11 == v12)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      v12 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v5 = v22;
  }
  if (v5 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v6;
}

unint64_t WebCore::jsElement_classList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::Element::classList(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::DOMTokenList>(a1, v3, v4);
}

BOOL WebCore::setJSElement_classList(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v13[2];
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v17 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v7 = (WTF::StringImpl *)v13[0];
  v8 = JSC::JSObject::get(a2, a1, v13[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_11;
  if ((v8 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  WTF::AtomStringImpl::addLiteral();
  v9 = (WTF::StringImpl *)v13[0];
  v13[0] = 0;
  v13[1] = v8;
  v14 = -1;
  v15 = 0x1000000;
  v16 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) + 0x48))(v8, a1, v9, a3, v13);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v11 = 1;
    if (!v9)
      goto LABEL_12;
  }
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v10);
  else
    *(_DWORD *)v9 -= 2;
LABEL_12:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v10);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v11;
}

uint64_t WebCore::jsElement_slot(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::slotAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_slot(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v5 = v22;
  v6 = v22 == 0;
  if (!v22)
  {
    v7 = v21;
    v21 = 0;
    v28 = v7;
    v8 = *((_QWORD *)v3 + 13);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) == 0)
      {
        v10 = (uint64_t *)(v8 + 32);
        v11 = v9 >> 5;
        if (!v11)
          goto LABEL_16;
LABEL_9:
        v12 = 0;
        while (1)
        {
          v13 = *v10;
          if (*v10 == WebCore::HTMLNames::slotAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 32))
          {
            goto LABEL_17;
          }
          ++v12;
          v10 += 2;
          if (v11 == v12)
            goto LABEL_16;
        }
      }
      v10 = *(uint64_t **)(v8 + 40);
      v11 = *(_DWORD *)(v8 + 52);
      if (v11)
        goto LABEL_9;
    }
LABEL_16:
    v12 = 0xFFFFFFFFLL;
LABEL_17:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::slotAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v5 = v22;
  }
  if (v5 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v6;
}

unint64_t WebCore::jsElement_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::Element::part(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::DOMTokenList>(a1, v3, v4);
}

BOOL WebCore::setJSElement_part(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v13[2];
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v17 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v7 = (WTF::StringImpl *)v13[0];
  v8 = JSC::JSObject::get(a2, a1, v13[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_11;
  if ((v8 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  WTF::AtomStringImpl::addLiteral();
  v9 = (WTF::StringImpl *)v13[0];
  v13[0] = 0;
  v13[1] = v8;
  v14 = -1;
  v15 = 0x1000000;
  v16 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) + 0x48))(v8, a1, v9, a3, v13);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v11 = 1;
    if (!v9)
      goto LABEL_12;
  }
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v10);
  else
    *(_DWORD *)v9 -= 2;
LABEL_12:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v10);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v11;
}

uint64_t WebCore::jsElement_shadowRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;

  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 2;
  v4 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v4)
    return 2;
  v5 = *(void **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if (*(_BYTE *)(v4 + 193) != 2 && !*(_BYTE *)(*(_QWORD *)(a1 + 3320) + 52))
  {
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    return 2;
  }
  v2 = WebCore::wrap<WebCore::ShadowRoot>(a1, (JSC::VM *)v5, v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::jsElement_onfocusin(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 824), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onfocusin(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 824), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onfocusout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 832), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onfocusout(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 832), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_ongesturechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 888), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_ongesturechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 888), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_ongestureend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 896), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_ongestureend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 896), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_ongesturestart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 928), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_ongesturestart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 928), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onbeforeload(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 248), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onbeforeload(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 248), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitneedkey(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2448), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitneedkey(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2448), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitpresentationmodechanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2472), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitpresentationmodechanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2472), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitcurrentplaybacktargetiswirelesschanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2360), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitcurrentplaybacktargetiswirelesschanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2360), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitplaybacktargetavailabilitychanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2464), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitplaybacktargetavailabilitychanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2464), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_role(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_role(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v17 = 0;
LABEL_9:
    v16 = 0;
    v18 = v5;
    v6 = *((_QWORD *)v3 + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) == 0)
      {
        v8 = (uint64_t *)(v6 + 32);
        v9 = v7 >> 5;
        if (!v9)
          goto LABEL_22;
LABEL_15:
        v11 = 0;
        while (1)
        {
          v12 = *v8;
          if (*v8 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            goto LABEL_23;
          }
          ++v11;
          v8 += 2;
          if (v9 == v11)
            goto LABEL_22;
        }
      }
      v8 = *(uint64_t **)(v6 + 40);
      v9 = *(_DWORD *)(v6 + 52);
      if (v9)
        goto LABEL_15;
    }
LABEL_22:
    v11 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v11, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v18, 0);
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v10 = 1;
    v4 = v17;
    goto LABEL_27;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v18);
  LOBYTE(v16) = 0;
  v17 = -1;
  v4 = v19;
  if (v19 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v19])(&v20, &v16, &v18);
  v17 = v4;
  if (v19 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v19])(&v20, &v18);
    v4 = v17;
  }
  if (!v4)
  {
    v5 = v16;
    goto LABEL_9;
  }
  v10 = 0;
LABEL_27:
  if (v4 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v4])(&v18, &v16);
  return v10;
}

uint64_t WebCore::jsElement_ariaActiveDescendantElement(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::Element *v4;
  void *v5;
  unint64_t v6;
  WebCore::Node *v7;
  WebCore::Node *v9;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::getElementAttribute(*(WebCore::Element **)(a2 + 24), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_activedescendantAttr, (uint64_t *)&v9);
  if (!v9)
    return 2;
  v6 = WebCore::toJS(a1, v3, v9, v4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v6;
}

BOOL WebCore::setJSElement_ariaActiveDescendantElement(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  WebCore::Element *v5;
  WebCore::Element *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(WebCore::Element **)(a2 + 24);
  v15 = (WTF *)v17;
  a4.n128_u64[0] = 4;
  v16 = 4;
  v17[32] = 0;
  v18 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v19 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v15;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
  }
  else
  {
    v20 = v4;
    if ((a3 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(a3 + 5) != 241
      || (v6 = *(WebCore::Element **)(a3 + 24)) == 0)
    {
      WebCore::throwAttributeTypeError((int)a1, (int)&v20, "Element", 8, "ariaActiveDescendantElement", 28, "Element", 8);
      v8 = 0;
      goto LABEL_9;
    }
  }
  WebCore::Element::setElementAttribute(v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_activedescendantAttr, v6, a4);
  v8 = 1;
LABEL_9:
  if (HIDWORD(v16))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v15, v19);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v18;
    if (HIDWORD(v16))
    {
      v12 = v15;
      v13 = 8 * HIDWORD(v16);
      do
      {
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v18;
  }
  v9 = v15;
  if (v17 != (_BYTE *)v15 && v15 != 0)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v9, v7);
  }
  return v8;
}

uint64_t WebCore::jsElement_ariaAtomic(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_atomicAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_atomicAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_atomicAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaAtomic(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_atomicAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_atomicAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_atomicAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_atomicAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaAutoComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_autocompleteAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_autocompleteAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_autocompleteAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaAutoComplete(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_autocompleteAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_autocompleteAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_autocompleteAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_autocompleteAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaBrailleLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_braillelabelAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_braillelabelAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_braillelabelAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaBrailleLabel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_braillelabelAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_braillelabelAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_braillelabelAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_braillelabelAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaBrailleRoleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_brailleroledescriptionAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_brailleroledescriptionAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_brailleroledescriptionAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaBrailleRoleDescription(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_brailleroledescriptionAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_brailleroledescriptionAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_brailleroledescriptionAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_brailleroledescriptionAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaBusy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_busyAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_busyAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_busyAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaBusy(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_busyAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_busyAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_busyAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_busyAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaChecked(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_checkedAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_checkedAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_checkedAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaChecked(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_checkedAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_checkedAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_checkedAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_checkedAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaColCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_colcountAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colcountAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colcountAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaColCount(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_colcountAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colcountAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colcountAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_colcountAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaColIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_colindexAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colindexAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colindexAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaColIndex(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_colindexAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colindexAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colindexAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_colindexAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaColSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_colspanAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colspanAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colspanAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaColSpan(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_colspanAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_colspanAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_colspanAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_colspanAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaControlsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, a4);
}

BOOL WebCore::setJSElement_ariaControlsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_controlsAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaCurrent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_currentAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_currentAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_currentAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaCurrent(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_currentAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_currentAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_currentAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_currentAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaDescribedByElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr, a4);
}

BOOL WebCore::setJSElement_ariaDescribedByElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_describedbyAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_descriptionAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_descriptionAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_descriptionAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaDescription(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_descriptionAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_descriptionAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_descriptionAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_descriptionAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaDetailsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_detailsAttr, a4);
}

BOOL WebCore::setJSElement_ariaDetailsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_detailsAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaDisabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_disabledAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_disabledAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_disabledAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaDisabled(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_disabledAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_disabledAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_disabledAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_disabledAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaErrorMessageElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_errormessageAttr, a4);
}

BOOL WebCore::setJSElement_ariaErrorMessageElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_errormessageAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaExpanded(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_expandedAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_expandedAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_expandedAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaExpanded(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_expandedAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_expandedAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_expandedAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_expandedAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaFlowToElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, a4);
}

BOOL WebCore::setJSElement_ariaFlowToElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_flowtoAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaHasPopup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_haspopupAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_haspopupAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_haspopupAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaHasPopup(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_haspopupAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_haspopupAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_haspopupAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_haspopupAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaHidden(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_hiddenAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaHidden(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_hiddenAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_hiddenAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaInvalid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_invalidAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_invalidAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_invalidAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaInvalid(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_invalidAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_invalidAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_invalidAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_invalidAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaKeyShortcuts(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_keyshortcutsAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_keyshortcutsAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_keyshortcutsAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaKeyShortcuts(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_keyshortcutsAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_keyshortcutsAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_keyshortcutsAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_keyshortcutsAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaLabel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_labelAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaLabelledByElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, a4);
}

BOOL WebCore::setJSElement_ariaLabelledByElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelledbyAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_levelAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaLevel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_levelAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_levelAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_levelAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaLive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_liveAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaLive(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_liveAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_liveAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_liveAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaModal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_modalAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaModal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_modalAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_modalAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaMultiLine(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_multilineAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_multilineAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_multilineAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaMultiLine(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_multilineAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_multilineAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_multilineAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_multilineAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaMultiSelectable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_multiselectableAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_multiselectableAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_multiselectableAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaMultiSelectable(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_multiselectableAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_multiselectableAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_multiselectableAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_multiselectableAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaOrientation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_orientationAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_orientationAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_orientationAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaOrientation(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_orientationAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_orientationAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_orientationAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_orientationAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaOwnsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, a4);
}

BOOL WebCore::setJSElement_ariaOwnsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  WTF *v4;
  uint64_t v5;
  WebCore::Element *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  a4.n128_u64[0] = 4;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v36) = 0;
    v38 = 0;
    v39 = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
LABEL_17:
    WebCore::Element::setElementsArrayAttribute(v6, (WebCore::QualifiedName *)&WebCore::HTMLNames::aria_ownsAttr, (uint64_t)&v32, a4);
    if ((_BYTE)v34)
    {
      if (HIDWORD(v33))
      {
        v20 = v32;
        v21 = 8 * HIDWORD(v33);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v13 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v13, v12);
      }
    }
    v11 = 0;
    v14 = 1;
    goto LABEL_22;
  }
  v31 = v5;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 = 1;
    v34 = 1;
    goto LABEL_14;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v32);
  v7 = v34;
  if (!v34)
  {
    v8 = 0;
    v4 = v32;
    v36 = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    v37 = v19;
    v38 = 1;
LABEL_14:
    v39 = v8;
    v7 = v8;
    goto LABEL_15;
  }
  v8 = 1;
  v39 = 1;
  if (v34 == -1)
  {
    v14 = 0;
    v11 = 1;
    goto LABEL_22;
  }
LABEL_15:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v7])(&v31, &v32);
  v11 = 1;
  if (!v8)
  {
    v32 = v4;
    a4.n128_u64[0] = v37;
    v36 = 0;
    v37 = 0;
    v33 = a4.n128_u64[0];
    LOBYTE(v34) = 1;
    goto LABEL_17;
  }
  v14 = 0;
LABEL_22:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v11])(&v32, &v36);
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v23 = v26;
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v15);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v16 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v16, v15);
  }
  return v14;
}

uint64_t WebCore::jsElement_ariaPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_placeholderAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_placeholderAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_placeholderAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaPlaceholder(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_placeholderAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_placeholderAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_placeholderAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_placeholderAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaPosInSet(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_posinsetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_posinsetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_posinsetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaPosInSet(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_posinsetAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_posinsetAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_posinsetAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_posinsetAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaPressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_pressedAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_pressedAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_pressedAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaPressed(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_pressedAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_pressedAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_pressedAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_pressedAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaReadOnly(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_readonlyAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_readonlyAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_readonlyAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaReadOnly(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_readonlyAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_readonlyAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_readonlyAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_readonlyAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRelevant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_relevantAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_relevantAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_relevantAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRelevant(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_relevantAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_relevantAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_relevantAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_relevantAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRequired(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_requiredAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_requiredAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_requiredAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRequired(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_requiredAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_requiredAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_requiredAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_requiredAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRoleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_roledescriptionAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_roledescriptionAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_roledescriptionAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRoleDescription(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_roledescriptionAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_roledescriptionAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_roledescriptionAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_roledescriptionAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRowCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_rowcountAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowcountAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowcountAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRowCount(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_rowcountAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowcountAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowcountAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_rowcountAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRowIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_rowindexAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowindexAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowindexAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRowIndex(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_rowindexAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowindexAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowindexAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_rowindexAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaRowSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_rowspanAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowspanAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowspanAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaRowSpan(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_rowspanAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_rowspanAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_rowspanAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_rowspanAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_selectedAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaSelected(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_selectedAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_selectedAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_selectedAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaSetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_setsizeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_setsizeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_setsizeAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaSetSize(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_setsizeAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_setsizeAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_setsizeAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_setsizeAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaSort(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_sortAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_sortAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_sortAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaSort(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_sortAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_sortAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_sortAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_sortAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaValueMax(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_valuemaxAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuemaxAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuemaxAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaValueMax(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_valuemaxAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuemaxAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuemaxAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuemaxAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaValueMin(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_valueminAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valueminAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valueminAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaValueMin(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_valueminAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valueminAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valueminAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valueminAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaValueNow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_valuenowAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaValueNow(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_valuenowAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuenowAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

uint64_t WebCore::jsElement_ariaValueText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::aria_valuetextAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(v8 + 4);
  if (!v10)
    return *(_QWORD *)(v9 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSElement_ariaValueText(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v22 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v28);
  LOBYTE(v21) = 0;
  v22 = -1;
  v5 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v29])(&v30, &v21, &v28);
    v22 = v5;
    if (v29 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v29])(&v30, &v28);
      v5 = v22;
    }
    if (v5)
    {
      v11 = 0;
LABEL_27:
      if (v5 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
      goto LABEL_29;
    }
    v6 = v21;
LABEL_9:
    v21 = 0;
    v28 = v6;
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) == 0)
      {
        v9 = (uint64_t *)(v7 + 32);
        v10 = v8 >> 5;
        if (!v10)
          goto LABEL_22;
LABEL_15:
        v12 = 0;
        while (1)
        {
          v13 = *v9;
          if (*v9 == WebCore::HTMLNames::aria_valuetextAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 32))
          {
            goto LABEL_23;
          }
          ++v12;
          v9 += 2;
          if (v10 == v12)
            goto LABEL_22;
        }
      }
      v9 = *(uint64_t **)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 52);
      if (v10)
        goto LABEL_15;
    }
LABEL_22:
    v12 = 0xFFFFFFFFLL;
LABEL_23:
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuetextAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v5 = v22;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_29:
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v11;
}

unint64_t WebCore::jsElement_scrollTop(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 408))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSElement_scrollTop(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  JSC::VM *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = a3;
  v6 = *(_QWORD *)(a2 + 24);
  v15 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v8 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v13 = v4;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
      v4 = v13;
      v8 = v14;
    }
    v9 = (v8 >> 52) & 0x7FF;
    v10 = v9 - 1023;
    v11 = v8 >> (51 - (v8 >> 52));
    if (v9 > 0x433)
      LODWORD(v11) = v8 << ((v8 >> 52) - 51);
    if (v9 >= 0x41F)
      v12 = v11;
    else
      v12 = (((1 << ((v8 >> 52) + 1)) - 1) & v11) + (1 << ((v8 >> 52) + 1));
    if ((v8 & 0x8000000000000000) != 0)
      v12 = -v12;
    if (v10 <= 0x53)
      v5 = v12;
    else
      v5 = 0;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 424))(v6, v5);
  return 1;
}

unint64_t WebCore::jsElement_scrollLeft(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 400))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSElement_scrollLeft(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  JSC::VM *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = a3;
  v6 = *(_QWORD *)(a2 + 24);
  v15 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v8 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v13 = v4;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
      v4 = v13;
      v8 = v14;
    }
    v9 = (v8 >> 52) & 0x7FF;
    v10 = v9 - 1023;
    v11 = v8 >> (51 - (v8 >> 52));
    if (v9 > 0x433)
      LODWORD(v11) = v8 << ((v8 >> 52) - 51);
    if (v9 >= 0x41F)
      v12 = v11;
    else
      v12 = (((1 << ((v8 >> 52) + 1)) - 1) & v11) + (1 << ((v8 >> 52) + 1));
    if ((v8 & 0x8000000000000000) != 0)
      v12 = -v12;
    if (v10 <= 0x53)
      v5 = v12;
    else
      v5 = 0;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 416))(v6, v5);
  return 1;
}

unint64_t WebCore::jsElement_scrollWidth(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 432))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsElement_scrollHeight(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 440))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsElement_clientTop(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::clientTop(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsElement_clientLeft(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::clientLeft(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsElement_clientWidth(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::clientWidth(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsElement_clientHeight(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::clientHeight(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSElement_outerHTML(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  WebCore::Node *v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF *v9;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  _BYTE v19[40];
  uint64_t v20;
  JSC::JSGlobalObject *v21;
  JSC::VM *v22;
  unsigned __int8 v23[8];
  WTF::StringImpl *v24;
  char v25;
  unsigned __int8 v26[8];
  WTF::StringImpl *v27;
  char v28;
  _BYTE v29[8];
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(WebCore::Node **)(a2 + 24);
  v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v17 = (WTF *)v19;
  v18 = 4;
  v19[32] = 0;
  v20 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v21 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v17;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::convert(a1, a3, (uint64_t)v29);
  v7 = v31;
  v8 = v31 == 0;
  if (!v31)
  {
    WebCore::ConversionResult<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::releaseReturnValue((uint64_t)v26, (uint64_t)v29);
    WebCore::Element::setOuterHTML(v5, (uint64_t)v26, (uint64_t)v23);
    if ((_DWORD)v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E3273B28[v27])(&v28, v26);
    if (v25)
    {
      v26[0] = v23[0];
      v15 = v24;
      v24 = 0;
      v27 = v15;
      if (!*(_QWORD *)(v4 + 16))
      {
        WebCore::propagateExceptionSlowPath(a1, &v22, v26);
        v15 = v27;
      }
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (v25)
      {
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v6);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
    v7 = v31;
  }
  if (v7 != -1)
    ((void (*)(unsigned __int8 *, uint64_t *))off_1E3273B48[v7])(v23, &v30);
  if (HIDWORD(v18))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v17, v21);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v20;
    if (HIDWORD(v18))
    {
      v12 = v17;
      v13 = 8 * HIDWORD(v18);
      do
      {
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v6);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v20;
  }
  v9 = v17;
  if (v19 != (_BYTE *)v17 && v17 != 0)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v9, v6);
  }
  return v8;
}

uint64_t WebCore::jsElement_onfullscreenchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 848), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onfullscreenchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 848), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onfullscreenerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 856), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onfullscreenerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 856), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitfullscreenchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2376), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitfullscreenchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2376), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsElement_onwebkitfullscreenerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2384), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSElement_onwebkitfullscreenerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v6, (WTF::StringImpl **)(v9 + 2384), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

unint64_t WebCore::jsElement_previousElementSibling(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v4)
      break;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
  }
  return 2;
}

unint64_t WebCore::jsElement_nextElementSibling(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      break;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
  }
  return 2;
}

unint64_t WebCore::jsElement_children(int a1, WebCore::ContainerNode **a2)
{
  JSC::VM *v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::ContainerNode::children(a2[3], (WTF::StringImpl *)a2, &v7);
  v4 = WebCore::wrap<WebCore::HTMLCollection>(a1, v3, (uint64_t)v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return v4;
}

unint64_t WebCore::jsElement_firstElementChild(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v4)
    return 2;
  while ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

unint64_t WebCore::jsElement_lastElementChild(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v4)
    return 2;
  while ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v4)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

uint64_t WebCore::jsElement_childElementCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
  {
LABEL_4:
    v3 = 0;
    return v3 | 0xFFFE000000000000;
  }
  while ((*(_WORD *)(v2 + 28) & 8) == 0)
  {
    v2 = *(_QWORD *)(v2 + 56);
    if (!v2)
      goto LABEL_4;
  }
  v3 = 0;
LABEL_6:
  ++v3;
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 56);
    if (!v2)
      break;
    if ((*(_WORD *)(v2 + 28) & 8) != 0)
      goto LABEL_6;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 | 0xFFFE000000000000;
  return COERCE__INT64((double)v3) + 0x2000000000000;
}

uint64_t WebCore::jsElement_assignedSlot(WebCore *a1, uint64_t a2)
{
  const WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ShadowRoot *v8;
  JSC::JSGlobalObject *v9;
  WebCore::JSDOMGlobalObject *AssignedSlot;
  WebCore::HTMLElement *v11;

  v3 = *(const WebCore::Node **)(a2 + 24);
  v4 = *((_QWORD *)v3 + 4);
  if (v4
    && (*(_WORD *)(v4 + 28) & 8) != 0
    && (v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v8 = *(WebCore::ShadowRoot **)(v5 + 88)) != 0
    && *((_BYTE *)v8 + 193) == 2
    && (v9 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28),
        (AssignedSlot = (WebCore::JSDOMGlobalObject *)WebCore::ShadowRoot::findAssignedSlot(v8, v3)) != 0))
  {
    return WebCore::toJS(a1, v9, AssignedSlot, v11);
  }
  else
  {
    return 2;
  }
}

uint64_t jsElementPrototypeFunction_hasAttributesWithoutTypeCheck(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6)
    return 6;
  if ((*(_BYTE *)(v6 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(a2 + 24), (unsigned __int8 *)a2, a5, a3, a4);
  if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
  v7 = *(_QWORD *)(v5 + 104);
  if (!v7)
    return 6;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) != 0)
    v9 = *(_DWORD *)(v7 + 52);
  else
    v9 = v8 >> 5;
  if (v9)
    return 7;
  else
    return 6;
}

uint64_t jsElementPrototypeFunction_getAttributeWithoutTypeCheck(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *a3)
{
  uint64_t v4;
  WebCore::Element *v5;
  WTF::String *v6;
  __n128 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *var28[6];

  v4 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v4 + 40) = var28[5];
  v5 = *(WebCore::Element **)(a2 + 24);
  WebCore::DOMJIT::DirectConverter<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>::directConvert(var28, a1, a3);
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v12 = 0;
    goto LABEL_10;
  }
  WebCore::Element::getAttributeForBindings(v5, (const WTF::AtomString *)var28, 1, v6, &v18, v7);
  v8 = v18;
  if (!v18)
  {
    v12 = 2;
    goto LABEL_10;
  }
  v9 = *((_QWORD *)a1 + 7);
  v10 = (uint64_t *)(v9 + 41968);
  v11 = *((_DWORD *)v18 + 1);
  if (!v11)
    goto LABEL_20;
  if (v11 == 1)
  {
    v15 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
    if ((*((_BYTE *)v18 + 16) & 4) != 0)
    {
      v16 = *v15;
    }
    else
    {
      v17 = *(unsigned __int16 *)v15;
      if (v17 > 0xFF)
        goto LABEL_5;
      v16 = v17;
    }
    v10 = (uint64_t *)(v9 + 8 * v16 + 42216);
LABEL_20:
    v12 = *v10;
    goto LABEL_21;
  }
LABEL_5:
  v12 = *(_QWORD *)(v9 + 64760);
  if (!v12 || v18 != *(WTF::StringImpl **)(v12 + 8))
  {
    v12 = JSC::jsStringWithCacheSlowCase();
    v8 = v18;
    v18 = 0;
    if (!v8)
      goto LABEL_10;
    goto LABEL_8;
  }
LABEL_21:
  v18 = 0;
LABEL_8:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v8);
  else
    *(_DWORD *)v8 -= 2;
LABEL_10:
  v13 = var28[0];
  var28[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

uint64_t WebCore::DOMJIT::DirectConverter<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>::directConvert(_QWORD *a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *this)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;

  result = *((_QWORD *)this + 1);
  if ((result & 1) != 0)
    return JSC::JSRopeString::resolveRopeToAtomString(this, a2);
  if (!result)
  {
    *a1 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      return result;
    result = 0;
    v8 = *((_QWORD *)a2 + 7);
    goto LABEL_11;
  }
  v7 = *(_DWORD *)(result + 16);
  if ((v7 & 0x10) != 0)
  {
    *(_DWORD *)result += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, a2);
    result = (uint64_t)v14;
    v7 = *(_DWORD *)(*((_QWORD *)this + 1) + 16);
  }
  *a1 = result;
  if ((v7 & 0x10) == 0)
  {
    v8 = *((_QWORD *)a2 + 7);
    if (result)
      *(_DWORD *)result += 2;
LABEL_11:
    __dmb(0xAu);
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    v14 = v9;
    v10 = (_QWORD *)(v8 + 808);
    v11 = *(unsigned int *)(v8 + 820);
    if ((_DWORD)v11 == *(_DWORD *)(v8 + 816))
    {
      v13 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v14);
      v11 = *(unsigned int *)(v8 + 820);
      v12 = (WTF::StringImpl **)(*(_QWORD *)(v8 + 808) + 8 * v11);
      v9 = *v13;
    }
    else
    {
      v12 = (WTF::StringImpl **)(*v10 + 8 * v11);
      v13 = &v14;
    }
    *v13 = 0;
    *v12 = v9;
    *(_DWORD *)(v8 + 820) = v11 + 1;
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t jsElementPrototypeFunction_getAttributeNodeWithoutTypeCheck(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  JSC::VM *v10;
  void *v11;
  uint64_t v12;
  WebCore::Node *v13;
  WTF::StringImpl *v14;
  WebCore::Node *v16;
  WTF::StringImpl *var28[6];

  v4 = (int)a1;
  v5 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v5 + 40) = var28[5];
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::DOMJIT::DirectConverter<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>::directConvert(var28, a1, a3);
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
  {
    v12 = 0;
  }
  else
  {
    v10 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    WebCore::Element::getAttributeNode(v6, (const WTF::AtomString *)var28, v7, v8, &v16, v9);
    if (v16)
    {
      v12 = WebCore::wrap<WebCore::Attr>(v4, v10, (uint64_t)v16);
      v13 = v16;
      v16 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v11);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
    }
    else
    {
      v12 = 2;
    }
  }
  v14 = var28[0];
  var28[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v12;
}

unint64_t jsElementPrototypeFunction_getElementsByTagNameWithoutTypeCheck(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *a3)
{
  int v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  JSC::VM *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v13;
  WTF::StringImpl *var28[6];

  v4 = (int)a1;
  v5 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v5 + 40) = var28[5];
  v6 = *(WebCore::ContainerNode **)(a2 + 24);
  WebCore::DOMJIT::DirectConverter<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>::directConvert(var28, a1, a3);
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
  {
    v9 = 0;
  }
  else
  {
    v7 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    WebCore::ContainerNode::getElementsByTagName(v6, (const WTF::AtomString *)var28, (uint64_t *)&v13);
    v9 = WebCore::wrap<WebCore::HTMLCollection>(v4, v7, (uint64_t)v13);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[4];
    }
  }
  v11 = var28[0];
  var28[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v9;
}

uint64_t WebCore::JSElement::subspaceForImpl(WebCore::JSElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3640);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 3640);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 3640);
    *(_QWORD *)(v8 + 3640) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3640);
  *(_QWORD *)(v3 + 3640) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSElement::toWrapped(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return 0;
  else
    return *(_QWORD *)(a2 + 24);
}

_DWORD **WebCore::JSElementInternals::destroy(WebCore::JSElementInternals *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref((_DWORD **)this + 3, a2);
}

uint64_t WebCore::JSElementInternals::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSElementInternals::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 22) & 8) == 0)
      {
        while (1)
        {
          v7 = v6;
          if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
          {
            v9 = *(_QWORD *)(v6 + 200);
            if (!v9)
              goto LABEL_12;
            v8 = (uint64_t *)(v9 + 8);
          }
          else
          {
            v8 = (uint64_t *)(v6 + 32);
          }
          v6 = *v8;
          if (!v6)
            goto LABEL_12;
        }
      }
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
LABEL_12:
      if (v7 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD *)(a2 + 120);
        v10 = *(_QWORD *)(result + 48);
        v11 = *(_DWORD *)(v10 + 4);
        v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = v15;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
          if (!v17)
            break;
          if (v7 == v17)
            return result;
          v16 = (v16 + 1) & v11;
          if (v16 == v15)
          {
            __break(0xC471u);
            JUMPOUT(0x194AC7AA0);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::JSElementInternals::visitChildren(WebCore::JSElementInternals *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194AC7B74);
  }
  *((_QWORD *)a2 + 11) = v20;
  result = JSC::JSObject::visitChildren();
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 22) & 8) == 0)
      {
        while (1)
        {
          v9 = v8;
          if ((*(_WORD *)(v8 + 28) & 0x80) != 0)
          {
            v11 = *(_QWORD *)(v8 + 200);
            if (!v11)
              goto LABEL_15;
            v10 = (uint64_t *)(v11 + 8);
          }
          else
          {
            v10 = (uint64_t *)(v8 + 32);
          }
          v8 = *v10;
          if (!v8)
            goto LABEL_15;
        }
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
LABEL_15:
      if (v9 && !*((_BYTE *)a2 + 130))
      {
        result = *((_QWORD *)a2 + 15);
        v12 = *(_QWORD *)(result + 48);
        v13 = *(_DWORD *)(v12 + 4);
        v14 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = v17;
        while (1)
        {
          v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
          if (!v19)
            break;
          if (v9 == v19)
            goto LABEL_5;
          v18 = (v18 + 1) & v13;
          if (v18 == v17)
          {
            __break(0xC471u);
            JUMPOUT(0x194AC7C48);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v9);
          ++*((_QWORD *)a2 + 9);
        }
      }
    }
  }
LABEL_5:
  *(_QWORD *)(v20[0] + 88) = v21;
  return result;
}

uint64_t WebCore::JSElementInternalsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSElementInternalsPrototype::create(WebCore::JSElementInternalsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  uint64_t i;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 305; i += 5)
  {
    v11 = (&WebCore::JSElementInternalsPrototypeTableValues)[i + 1];
    if (v11)
    {
      if (v11 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSElementInternalsPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v12 = v27[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSElementInternals::s_info, (unint64_t *)v27, (uint64_t)&(&WebCore::JSElementInternalsPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v14 && *(_BYTE *)(v14 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194AC8104);
  }
  v15 = v14 - 192;
  if (!v14)
    v15 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 672) & 0x4000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v27[0];
    v17 = *v9;
    *v9 = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, v27);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v28 = 0;
  v29 = v24;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElementInternals>,(WebCore::DOMConstructorID)446>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3568);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSElementInternals>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSElementInternals::s_info + ~((_QWORD)&WebCore::JSElementInternals::s_info << 32)) ^ (((unint64_t)&WebCore::JSElementInternals::s_info + ~((_QWORD)&WebCore::JSElementInternals::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSElementInternals::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSElementInternals::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSElementInternalsPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSElementInternalsPrototype::create((WebCore::JSElementInternalsPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSElementInternals::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSElementInternals::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3568) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsElementInternalsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSElementInternalsPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElementInternals>,(WebCore::DOMConstructorID)446>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsElementInternals_shadowRoot(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::VM *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v10;

  v2 = *(_QWORD *)(a2[3] + 16);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 2;
  v5 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_4;
  v6 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (v6)
  {
    v10 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v10 + 2;
    if ((*(_BYTE *)(v6 + 192) & 0x20) == 0)
    {
      if (v10)
      {
        *(_DWORD *)(v6 + 24) = v10;
      }
      else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
LABEL_4:
      v6 = 0;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (!v6)
    return 2;
  v8 = WebCore::wrap<WebCore::ShadowRoot>(a1, v5, v6);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v8;
}

uint64_t WebCore::jsElementInternals_form(WebCore *a1, int *a2)
{
  int v3;
  uint64_t v4;
  JSC::VM *v5;
  JSC::JSGlobalObject *v6;
  WTF::StringImpl *v7;
  WebCore::HTMLElement *v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  JSC::VM *v19;
  unsigned __int8 v20[8];
  WTF::StringImpl *v21;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v19 = v5;
  v6 = *(JSC::JSGlobalObject **)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  WebCore::ElementInternals::form(v4, (uint64_t)&v16);
  v9 = v18;
  if (!v18)
  {
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      v12 = WebCore::toJS(a1, v6, v10, v8);
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v11);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    else
    {
      v12 = 2;
    }
LABEL_6:
    ((void (*)(unsigned __int8 *, WebCore::JSDOMGlobalObject **))off_1E3275C18[v9])(v20, &v16);
    return v12;
  }
  if (v18 == 1)
  {
    v20[0] = v16;
    v14 = v17;
    v17 = 0;
    v21 = v14;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v19, v20);
      v14 = v21;
    }
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v12 = 0;
    goto LABEL_6;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsElementInternals_willValidate(v15);
}

uint64_t WebCore::jsElementInternals_willValidate(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  JSC::VM *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  JSC::VM *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = v4;
  WebCore::ElementInternals::willValidate(v3, (uint64_t)&v11);
  if (!v13)
  {
    v6 = 0;
    if ((_BYTE)v11)
      v7 = 7;
    else
      v7 = 6;
LABEL_5:
    off_1E3273A08[v6](&v15, &v11);
    return v7;
  }
  if (v13 == 1)
  {
    LOBYTE(v15) = (_BYTE)v11;
    v9 = v12;
    v12 = 0;
    v16 = v9;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v14, (unsigned __int8 *)&v15);
      v9 = v16;
    }
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = 0;
    v6 = 1;
    goto LABEL_5;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsElementInternals_validity(v10);
}

uint64_t WebCore::jsElementInternals_validity(JSC *a1, int *a2)
{
  int v3;
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  unint64_t v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  JSC::VM *v17;
  unsigned __int8 v18[8];
  WTF::StringImpl *v19;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v17 = v5;
  v6 = *(_QWORD *)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  WebCore::ElementInternals::validity(v4, (uint64_t)&v14);
  v8 = v16;
  if (!v16)
  {
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      v10 = WebCore::toJS((uint64_t)a1, v6, v9);
      (*(void (**)(WTF *))(*(_QWORD *)v9 + 96))(v9);
    }
    else
    {
      v10 = 2;
    }
LABEL_5:
    ((void (*)(unsigned __int8 *, WTF **))off_1E3275C28[v8])(v18, &v14);
    return v10;
  }
  if (v16 == 1)
  {
    v18[0] = v14;
    v12 = v15;
    v15 = 0;
    v19 = v12;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v17, v18);
      v12 = v19;
    }
    v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v10 = 0;
    goto LABEL_5;
  }
  v13 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsElementInternals_validationMessage(v13);
}

uint64_t WebCore::jsElementInternals_validationMessage(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  JSC::VM *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v17 = v4;
  WebCore::ElementInternals::validationMessage(v3, (uint64_t)&v14);
  v6 = v16;
  if (!v16)
  {
    v7 = v14;
    v14 = 0;
    v18 = v7;
    v9 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)a1, (uint64_t *)&v18);
    v10 = v18;
    v18 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
LABEL_5:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32753E8[v6])(&v18, &v14);
    return v9;
  }
  if (v16 == 1)
  {
    LOBYTE(v18) = (_BYTE)v14;
    v12 = v15;
    v15 = 0;
    v19 = v12;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v17, (unsigned __int8 *)&v18);
      v12 = v19;
    }
    v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
    v9 = 0;
    goto LABEL_5;
  }
  v13 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsElementInternals_labels(v13);
}

uint64_t WebCore::jsElementInternals_labels(JSC *a1, int *a2)
{
  int v3;
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t Wrapper;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  JSC::VM *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v29 = v5;
  v6 = *(_QWORD *)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  WebCore::ElementInternals::labels(v4, (uint64_t)&v26);
  v8 = v28;
  if (!v28)
  {
    v9 = v26;
    v26 = 0;
    if (!v9)
    {
      v10 = 2;
LABEL_4:
      ((void (*)(_DWORD **, uint64_t *))off_1E3275C38[v8])(&v30, &v26);
      return v10;
    }
    v13 = *(_QWORD *)(v6 + 3320);
    if (*(_DWORD *)(v13 + 48))
    {
      v16 = *(_QWORD *)(v13 + 32);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = *(_QWORD *)(v16 + 16 * v21);
        if (v22 == v9)
        {
LABEL_32:
          v14 = *(_QWORD *)(v16 + 16 * v21 + 8);
          if (v14)
            goto LABEL_16;
        }
        else
        {
          v23 = 1;
          while (v22)
          {
            v21 = ((_DWORD)v21 + v23) & v17;
            v22 = *(_QWORD *)(v16 + 16 * v21);
            ++v23;
            if (v22 == v9)
              goto LABEL_32;
          }
        }
      }
    }
    else
    {
      v14 = *(_QWORD *)(v9 + 8);
      if (v14)
      {
LABEL_16:
        if ((*(_BYTE *)(v14 + 8) & 3) == 0)
        {
          Wrapper = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
            goto LABEL_21;
        }
      }
    }
    ++*(_DWORD *)(v9 + 16);
    v30 = (_DWORD *)v9;
    Wrapper = WebCore::createWrapper(v6, (uint64_t *)&v30);
    v15 = v30;
    v30 = 0;
    if (v15)
    {
      if (v15[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[4];
    }
LABEL_21:
    if (*(_DWORD *)(v9 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 16);
    v10 = Wrapper;
    if ((_DWORD)v8 == -1)
      return v10;
    goto LABEL_4;
  }
  if (v28 == 1)
  {
    LOBYTE(v30) = v26;
    v12 = v27;
    v27 = 0;
    v31 = v12;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v29, (unsigned __int8 *)&v30);
      v12 = v31;
    }
    v31 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v10 = 0;
    goto LABEL_4;
  }
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsElementInternals_states(v24);
}

unint64_t WebCore::jsElementInternals_states(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Element *v5;
  WTF *v6;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v4)
    v5 = *(WebCore::Element **)(v4 + 8);
  else
    v5 = 0;
  v6 = (WTF *)WebCore::Element::ensureCustomStateSet(v5);
  return WebCore::wrap<WebCore::CustomStateSet>(a1, v3, v6);
}

uint64_t WebCore::jsElementInternals_role(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::roleAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_role(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::roleAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaActiveDescendantElement(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::Element *v4;
  void *v5;
  unint64_t v6;
  WebCore::Node *v7;
  WebCore::Node *v9;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::ElementInternals::getElementAttribute(*(unsigned int **)(a2 + 24), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_activedescendantAttr, &v9);
  if (!v9)
    return 2;
  v6 = WebCore::toJS(a1, v3, v9, v4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v5);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v6;
}

uint64_t WebCore::setJSElementInternals_ariaActiveDescendantElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  WebCore::Element *v9;
  uint64_t v11;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(a3 + 5) != 241
      || (v9 = *(WebCore::Element **)(a3 + 24)) == 0)
    {
      WebCore::throwAttributeTypeError(a1, (int)&v11, "ElementInternals", 17, "ariaActiveDescendantElement", 28, "Element", 8);
      return 0;
    }
  }
  WebCore::ElementInternals::setElementAttribute(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_activedescendantAttr, v9);
  return 1;
}

uint64_t WebCore::jsElementInternals_ariaAtomic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_atomicAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaAtomic(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_atomicAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaAutoComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_autocompleteAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaAutoComplete(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_autocompleteAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaBrailleLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_braillelabelAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaBrailleLabel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_braillelabelAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaBrailleRoleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_brailleroledescriptionAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaBrailleRoleDescription(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_brailleroledescriptionAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaBusy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_busyAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaBusy(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_busyAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaChecked(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_checkedAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaChecked(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_checkedAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaColCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colcountAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaColCount(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colcountAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaColIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colindexAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaColIndex(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colindexAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaColSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_colspanAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaColSpan(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_colspanAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaControlsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaControlsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaCurrent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_currentAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaCurrent(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_currentAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaDescribedByElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaDescribedByElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaDetailsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_detailsAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaDetailsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_detailsAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaDisabled(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_disabledAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaDisabled(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_disabledAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaErrorMessageElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_errormessageAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaErrorMessageElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_errormessageAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaExpanded(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_expandedAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaExpanded(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_expandedAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaFlowToElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaFlowToElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaHasPopup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_haspopupAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaHasPopup(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_haspopupAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaHidden(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_hiddenAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaHidden(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_hiddenAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaInvalid(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_invalidAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaInvalid(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_invalidAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaKeyShortcuts(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_keyshortcutsAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaKeyShortcuts(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_keyshortcutsAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaLabel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaLabelledByElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaLabelledByElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_levelAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaLevel(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_levelAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaLive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_liveAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaLive(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_liveAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaModal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_modalAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaModal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_modalAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaMultiLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_multilineAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaMultiLine(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_multilineAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaMultiSelectable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_multiselectableAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaMultiSelectable(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_multiselectableAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaOrientation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_orientationAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaOrientation(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_orientationAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaOwnsElements(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a1, a2, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, a4);
}

BOOL WebCore::setJSElementInternals_ariaOwnsElements(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSElementInternals::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSElementInternals::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v27) = 0;
LABEL_26:
    WebCore::ElementInternals::setElementsArrayAttribute(v9, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, (const WebCore::QualifiedName *)&v25);
    if ((_BYTE)v27)
    {
      if (HIDWORD(v26))
      {
        v21 = v25;
        v22 = 8 * HIDWORD(v26);
        do
        {
          v23 = *(_QWORD *)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          v21 = (WTF *)((char *)v21 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      v17 = v25;
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v17, v16);
      }
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_31;
  }
  v24 = *((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v11 = 1;
    v27 = 1;
    goto LABEL_23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a1, a3, (uint64_t)&v25);
  v10 = v27;
  if (!v27)
  {
    v11 = 0;
    v3 = v25;
    v29 = v25;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    v30 = v20;
    v31 = 1;
LABEL_23:
    v32 = v11;
    v10 = v11;
    goto LABEL_24;
  }
  v11 = 1;
  v32 = 1;
  if (v27 == -1)
  {
    v18 = 0;
    v14 = 1;
    goto LABEL_31;
  }
LABEL_24:
  ((void (*)(uint64_t *, WTF **))off_1E3275BF8[v10])(&v24, &v25);
  v14 = 1;
  if (!v11)
  {
    v25 = v3;
    v15 = v30;
    v29 = 0;
    v30 = 0;
    v26 = v15;
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_31:
  ((void (*)(WTF **, WTF **))off_1E3275C08[v14])(&v25, &v29);
  return v18;
}

uint64_t WebCore::jsElementInternals_ariaPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_placeholderAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaPlaceholder(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_placeholderAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaPosInSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_posinsetAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaPosInSet(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_posinsetAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaPressed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_pressedAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaPressed(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_pressedAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaReadOnly(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_readonlyAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaReadOnly(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_readonlyAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRelevant(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_relevantAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRelevant(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_relevantAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRequired(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_requiredAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRequired(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_requiredAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRoleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_roledescriptionAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRoleDescription(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_roledescriptionAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRowCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowcountAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRowCount(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowcountAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRowIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowindexAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRowIndex(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowindexAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaRowSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_rowspanAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaRowSpan(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_rowspanAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_selectedAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaSelected(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_selectedAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaSetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_setsizeAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaSetSize(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_setsizeAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaSort(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_sortAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaSort(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_sortAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaValueMax(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_valuemaxAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaValueMax(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuemaxAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaValueMin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_valueminAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaValueMin(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valueminAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaValueNow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_valuenowAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaValueNow(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuenowAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::jsElementInternals_ariaValueText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(*(WebCore::ElementInternals **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_valuetextAttr);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

BOOL WebCore::setJSElementInternals_ariaValueText(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::ElementInternals *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSElementInternals::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSElementInternals::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::ElementInternals **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v16 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v17);
  LOBYTE(v15) = 0;
  v16 = -1;
  v9 = v18;
  if (v18 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v18])(&v19, &v15, &v17);
  v16 = v9;
  if (v18 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32712B8[v18])(&v19, &v17);
    v9 = v16;
  }
  if (!v9)
  {
    v10 = v15;
LABEL_18:
    v15 = 0;
    v17 = v10;
    WebCore::ElementInternals::setAttributeWithoutSynchronization(v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_valuetextAttr, (const WTF::AtomString *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = 1;
    v9 = v16;
    goto LABEL_22;
  }
  v13 = 0;
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v17, &v15);
  return v13;
}

uint64_t WebCore::JSElementInternalsOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::ConcurrentPtrHashSet *v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from ElementInternalsOwner";
    a5[1] = 37;
  }
  if ((*(_BYTE *)(v6 + 22) & 8) == 0)
  {
    while (1)
    {
      v7 = (void *)v6;
      if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
      {
        v9 = *(_QWORD *)(v6 + 200);
        if (!v9)
          goto LABEL_13;
        v8 = (uint64_t *)(v9 + 8);
      }
      else
      {
        v8 = (uint64_t *)(v6 + 32);
      }
      v6 = *v8;
      if (!v6)
        goto LABEL_13;
    }
  }
  v7 = *(void **)(*(_QWORD *)(v6 + 40) + 8);
LABEL_13:
  v10 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v11 = (_DWORD *)*((_QWORD *)v10 + 6);
  if ((_DWORD *)((char *)v10 + 56) != v11)
  {
    v12 = v11[1];
    v13 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = v16;
    while (1)
    {
      v18 = *(void **)&v11[2 * v17 + 4];
      if (!v18)
        return 0;
      if (v7 == v18)
        goto LABEL_22;
      v17 = (v17 + 1) & v12;
      if (v17 == v16)
      {
        __break(0xC471u);
        JUMPOUT(0x194AD048CLL);
      }
    }
  }
  v20 = a4;
  v21 = v7;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v10, v7);
  a4 = v20;
  v7 = v21;
  if ((_DWORD)result)
  {
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
    return 1;
  }
  return result;
}

_DWORD **WebCore::JSElementInternalsOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v25;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v25 = v3;
  if (*(_DWORD *)(a3 + 48))
  {
    v7 = *(_QWORD *)(a3 + 32);
    v5 = (uint64_t *)(a3 + 32);
    v6 = v7;
    if (v7)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_DWORD **)(v6 + 16 * v12);
      if (v13 != v3)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_DWORD **)(v6 + 16 * v12);
          ++v14;
          if (v13 == v3)
            goto LABEL_10;
        }
        v12 = *(unsigned int *)(v6 - 4);
      }
LABEL_10:
      if (v12 != *(_DWORD *)(v6 - 4))
      {
        v15 = (_QWORD *)(v6 + 16 * v12);
        *v15 = -1;
        v18 = v15[1];
        v16 = v15 + 1;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v16 = 0;
        }
        ++*(_DWORD *)(*v5 - 16);
        v19 = *v5;
        if (*v5)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v5;
        if (*v5)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v23 >> 1, 0);
        }
      }
    }
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v25, a2);
}

unint64_t WebCore::wrap<WebCore::ElementInternals>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *Allocator;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  _DWORD *v58;
  _QWORD *v59;
  WTF *v60;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_DWORD **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_DWORD **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
LABEL_5:
      ++a3[2];
      v58 = a3;
      v8 = *(_QWORD *)(a2 + 3296);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = ((unint64_t)&WebCore::JSElementInternals::s_info
             + ~((_QWORD)&WebCore::JSElementInternals::s_info << 32)) ^ (((unint64_t)&WebCore::JSElementInternals::s_info
                                                                        + ~((_QWORD)&WebCore::JSElementInternals::s_info << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(char ***)(v8 + 16 * v13);
        if (v14 == &WebCore::JSElementInternals::s_info)
        {
LABEL_10:
          v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
          if (v16)
            goto LABEL_12;
        }
        else
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(char ***)(v8 + 16 * v13);
            ++v15;
            if (v14 == &WebCore::JSElementInternals::s_info)
              goto LABEL_10;
          }
        }
      }
      v17 = *(uint64_t **)(a2 + 56);
      Structure = WebCore::JSElementInternalsPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v21 = (JSC::JSCell *)WebCore::JSElementInternalsPrototype::create((WebCore::JSElementInternalsPrototype *)v17, Structure, v19, v20);
      v22 = WebCore::JSElementInternals::createStructure(v17, a2, v21);
      v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSElementInternals::s_info);
LABEL_12:
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_QWORD *)(v23 + 41456);
      v25 = *(_QWORD *)(v24 + 23536);
      v26 = *(_QWORD **)(v25 + 3648);
      if (v26)
        goto LABEL_32;
      v27 = *(_QWORD *)(v24 + 22648);
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v27);
LABEL_17:
      v29 = *(_QWORD *)(v27 + 2824);
      if (!*(_QWORD *)(v29 + 3648))
      {
        v30 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v60, "IsoSpace T");
        v59 = 0;
        MEMORY[0x19AEA3204](v30, &v60, v23 + 192, v23 + 1872, 32, 8, &v59);
        v32 = (uint64_t)v59;
        v59 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = v60;
        v60 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree(v33, v31);
          else
            --*(_DWORD *)v33;
        }
        v34 = *(_QWORD *)(v29 + 3648);
        *(_QWORD *)(v29 + 3648) = v30;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v35 = *(_QWORD *)(v25 + 3648);
      *(_QWORD *)(v25 + 3648) = v26;
      if (v35)
      {
        v36 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v36, v37);
      }
      v38 = __ldxr((unsigned __int8 *)v27);
      if (v38 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
LABEL_32:
          SlowCase = v26[3];
          if (SlowCase >= v26[4])
          {
            SlowCase = v26[5];
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM();
              SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
              *(_DWORD *)SlowCase = 0;
              WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
              v39 = v58;
              v58 = 0;
              *(_QWORD *)(SlowCase + 24) = v39;
              if (*(_BYTE *)(v23 + 755))
                __dmb(0xAu);
              v40 = *(_QWORD *)(a2 + 3320);
              if ((byte_1EE3353F0 & 1) == 0)
              {
                qword_1EE3353E8 = (uint64_t)&off_1E3270FF0;
                byte_1EE3353F0 = 1;
              }
              if (*(_DWORD *)(v40 + 48))
              {
                v60 = (WTF *)a3;
                if ((SlowCase & 8) != 0)
                  v46 = (SlowCase - 112) | 1;
                else
                  v46 = SlowCase & 0xFFFFFFFFFFFFC000;
                if ((v46 & 1) != 0)
                  v47 = v46 + 47;
                else
                  v47 = *(_QWORD *)v46 + 32;
                Allocator = *(_QWORD **)(v47 + 16);
                if (!Allocator)
                  Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
                *(_QWORD *)(v47 + 16) = *Allocator;
                *Allocator = SlowCase;
                Allocator[1] = &qword_1EE3353E8;
                Allocator[2] = v40;
                v59 = Allocator;
                JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v60, (uint64_t *)&v59);
                v44 = (uint64_t)v59;
                if (!v59)
                  goto LABEL_47;
              }
              else
              {
                if ((SlowCase & 8) != 0)
                  v41 = (SlowCase - 112) | 1;
                else
                  v41 = SlowCase & 0xFFFFFFFFFFFFC000;
                if ((v41 & 1) != 0)
                  v42 = v41 + 47;
                else
                  v42 = *(_QWORD *)v41 + 32;
                v43 = *(_QWORD **)(v42 + 16);
                if (!v43)
                  v43 = (_QWORD *)JSC::WeakSet::findAllocator();
                *(_QWORD *)(v42 + 16) = *v43;
                *v43 = SlowCase;
                v43[1] = &qword_1EE3353E8;
                v43[2] = v40;
                v44 = *(_QWORD *)a3;
                *(_QWORD *)a3 = v43;
                if (!v44)
                  goto LABEL_47;
              }
              *(_QWORD *)(v44 + 8) = 3;
LABEL_47:
              WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v58, (void *)v41);
              return SlowCase;
            }
            v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
            v26[4] = SlowCase + HIDWORD(v57);
            v26[5] = SlowCase + (int)v57;
          }
          v26[3] = SlowCase + 32;
          goto LABEL_34;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      goto LABEL_32;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_5;
  SlowCase = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_5;
  return SlowCase;
}

uint64_t WebCore::parseEnumeration<WebCore::EndingType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "native" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 110 || *(_DWORD *)(v6 + 1) != 1986622561 || *(_DWORD *)(v6 + 2) != 1702259060)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 110)
        goto LABEL_16;
      v13 = *(_QWORD *)(v6 + 2);
      v14 = *(_QWORD *)(v6 + 4);
      if (v13 != 0x76006900740061 || v14 != 0x65007600690074)
        goto LABEL_16;
    }
LABEL_41:
    v12 = &WebCore::parseEnumerationFromString<WebCore::EndingType>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "native" && v7 == 6)
    goto LABEL_41;
  if (v6 == "transparent" || v7 != 11)
  {
    if (v7 != 11 || v6 != "transparent")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 == 116)
    {
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BF6E0);
      v17.i16[0] = vminvq_u16(v17);
      if (v17.i32[0])
      {
        v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968BF6F0);
        v18.i16[0] = vminvq_u16(v18);
        if (v18.i32[0])
          goto LABEL_30;
      }
    }
LABEL_16:
    v9 = 0;
    goto LABEL_43;
  }
  if (*v6 != 116 || *(_QWORD *)(v6 + 1) != 0x65726170736E6172 || *(_QWORD *)(v6 + 3) != 0x746E65726170736ELL)
    goto LABEL_16;
LABEL_30:
  v12 = &off_1E326E398;
LABEL_42:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

WebCore::JSErrorCallback *WebCore::JSErrorCallback::JSErrorCallback(WebCore::JSErrorCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E326E3C0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSErrorCallback::~JSErrorCallback(WebCore::JSErrorCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSErrorCallback::handleEvent(uint64_t **this, WebCore::DOMException *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::DOMException>(v5, v5, a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

uint64_t WebCore::JSErrorEvent::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = a2[11];
  if (v2 && *(_BYTE *)(v2 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194AD1170);
  }
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 104);
  if (v3)
  {
    if ((v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t *)*v3;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 24))(a2, v3);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  JSC::JSCell *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  double v23;
  BOOL v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  BOOL v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  JSC::VM *v34;
  double v35;
  BOOL v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  void (***v59)(WebCore::ErrorEvent *__hidden);
  WTF::StringImpl *v60;
  WebCore::JSDOMGlobalObject *v61;
  JSC::VM *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  unint64_t v71;
  WebCore::JSErrorEvent *v72;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  JSCell *v75;
  JSC::JSCell *v76;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v78;
  JSC::JSGlobalObject *v79;
  JSC::VM *v80;
  WebCore::JSDOMGlobalObject *v81;
  JSC::Structure *v82;
  JSC::VM *FunctionRealm;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char **v90;
  int v91;
  JSC::JSCell *v92;
  uint64_t v93;
  unint64_t SubclassStructure;
  _DWORD *v95;
  WTF::StringImpl **v97;
  JSValue v98;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  int *v110;
  int v111;
  BOOL v112;
  int v113;
  uint64_t v114;
  int *v115;
  int v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  JSC::VM *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  __int128 v125;
  __int16 v126;
  BOOL v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  __int128 v130;
  int v131;
  WTF::StringImpl *v132;
  int v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  JSC::VM *v138;
  WTF::StringImpl *v139;
  _QWORD v140[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v98.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v98);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v6, (uint64_t)&v132);
  v7 = v133;
  if (!v133)
  {
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    v120 = v3;
    v121 = v5;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v11 = v6;
      v138 = (JSC::VM *)*((_QWORD *)a1 + 7);
      goto LABEL_7;
    }
    v9 = *(JSC::JSCell **)(a2 + 56);
    v10 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
    v138 = v10;
    if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v11 = v6;
LABEL_7:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v137 = 0;
      v17 = 1;
      v18 = 10;
LABEL_8:
      v10 = *v8;
      if (*v8)
        *(_DWORD *)v10 += 2;
      LODWORD(v123) = 0;
      v122 = 0;
      if ((v17 & 1) != 0)
      {
        v19 = 0;
        v136 = 0;
LABEL_82:
        v52 = *v8;
        if (*v8)
          *(_DWORD *)v52 += 2;
        v135 = 0;
        goto LABEL_94;
      }
      v117 = v16;
      v118 = v15;
      v119 = v14;
LABEL_68:
      WTF::AtomStringImpl::addLiteral();
      v47 = (WTF::StringImpl *)v134;
      v49 = JSC::JSObject::get((JSC::Structure *)v13, a1, v134);
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v48);
        else
          *(_DWORD *)v47 -= 2;
      }
      if (*((_DWORD *)v138 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v138))
      {
        v55 = 1;
        v131 = 1;
        v6 = v11;
        goto LABEL_96;
      }
      if (v49 == 10)
      {
        v19 = 0;
        v136 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v49, &v136);
        if (HIDWORD(v136))
        {
LABEL_173:
          v55 = 1;
          v131 = 1;
          v6 = v11;
          goto LABEL_96;
        }
        v19 = v136;
      }
      WTF::AtomStringImpl::addLiteral();
      v50 = (WTF::StringImpl *)v134;
      v13 = JSC::JSObject::get((JSC::Structure *)v13, a1, v134);
      v15 = v118;
      v14 = v119;
      v16 = v117;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
        {
          WTF::StringImpl::destroy(v50, v51);
          v16 = v117;
          v15 = v118;
          v14 = v119;
        }
        else
        {
          *(_DWORD *)v50 -= 2;
        }
      }
      if (*((_DWORD *)v138 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v138);
        v16 = v117;
        v15 = v118;
        v14 = v119;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_173;
      }
      if (v13 == 10)
      {
        v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
        goto LABEL_82;
      }
      v140[0] = v13;
      v53 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v140, a1);
        v16 = v117;
        v15 = v118;
        v14 = v119;
        goto LABEL_91;
      }
      v54 = *(WTF::StringImpl **)(v13 + 8);
      if ((v54 & 1) != 0)
      {
        v97 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, a1);
        v16 = v117;
        v15 = v118;
        v14 = v119;
        v54 = *v97;
        if (!*v97)
          goto LABEL_90;
      }
      else if (!v54)
      {
LABEL_90:
        v139 = v54;
LABEL_91:
        if (*((_DWORD *)v53 + 20))
        {
          v101 = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
          v52 = v139;
          if (v101)
          {
            v135 = 1;
            v139 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v100);
              else
                *(_DWORD *)v52 -= 2;
            }
            v55 = 1;
            goto LABEL_95;
          }
          v15 = v118;
          v14 = v119;
          v16 = v117;
        }
        else
        {
          v52 = v139;
        }
        v135 = 0;
LABEL_94:
        v55 = 0;
        v134 = 0;
        LOBYTE(v126) = v14;
        HIBYTE(v126) = v15;
        v127 = v16;
        v128 = v52;
        v129 = v10;
        *(_QWORD *)&v130 = __PAIR64__(v12, v19);
        *((_QWORD *)&v130 + 1) = v18;
        v10 = 0;
LABEL_95:
        v131 = v55;
        ((void (*)(_QWORD *, unint64_t *))off_1E3272138[v55])(v140, &v134);
        v6 = v11;
LABEL_96:
        v46 = (int)v123;
        while (1)
        {
          if (v46 != -1)
            ((void (*)(unint64_t *, WTF::StringImpl **))off_1E3272138[v46])(&v134, &v122);
          if (!v10)
            goto LABEL_102;
          if (*(_DWORD *)v10 != 2)
            break;
          WTF::StringImpl::destroy(v10, v45);
          v55 = v131;
          if (v131)
          {
LABEL_144:
            v75 = 0;
            if (v55 == -1)
              goto LABEL_139;
            goto LABEL_138;
          }
LABEL_103:
          if (!v133)
          {
            v56 = v132;
            v132 = 0;
            v140[0] = v56;
            LOWORD(v122) = v126;
            BYTE2(v122) = v127;
            v57 = v128;
            v58 = v129;
            v128 = 0;
            v129 = 0;
            v123 = v57;
            v124 = v58;
            v125 = v130;
            v59 = (void (***)(WebCore::ErrorEvent *__hidden))bmalloc::api::isoAllocate();
            v134 = WebCore::ErrorEvent::ErrorEvent((uint64_t)v59, v140, (unsigned __int8 *)&v122, 0);
            if (!v58)
              goto LABEL_107;
            if (*(_DWORD *)v58 == 2)
            {
              WTF::StringImpl::destroy(v58, v60);
              if (v57)
                goto LABEL_108;
            }
            else
            {
              *(_DWORD *)v58 -= 2;
LABEL_107:
              if (v57)
              {
LABEL_108:
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v60);
                else
                  *(_DWORD *)v57 -= 2;
              }
            }
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, v60);
              else
                *(_DWORD *)v56 -= 2;
            }
            if (*v59 != off_1E33A4A80)
            {
              __break(0xC471u);
              JUMPOUT(0x194AD1C60);
            }
            v62 = *(JSC::VM **)(v121 + 40);
            v63 = *((_QWORD *)v62 + 412);
            if (v63)
            {
              v64 = *(_DWORD *)(v63 - 8);
              v65 = ((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) >> 22);
              v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
              v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
              v68 = v64 & ((v67 >> 31) ^ v67);
              v69 = *(char ***)(v63 + 16 * v68);
              if (v69 != &WebCore::JSErrorEvent::s_info)
              {
                v70 = 1;
                while (v69)
                {
                  v68 = ((_DWORD)v68 + v70) & v64;
                  v69 = *(char ***)(v63 + 16 * v68);
                  ++v70;
                  if (v69 == &WebCore::JSErrorEvent::s_info)
                    goto LABEL_119;
                }
                goto LABEL_120;
              }
LABEL_119:
              v71 = *(_QWORD *)(v63 + 16 * v68 + 8);
              if (!v71)
                goto LABEL_120;
            }
            else
            {
LABEL_120:
              v72 = (WebCore::JSErrorEvent *)*((_QWORD *)v62 + 7);
              Prototype = (JSC::JSCell *)WebCore::JSErrorEvent::createPrototype(v72, v62, v61);
              Structure = WebCore::JSErrorEvent::createStructure((uint64_t *)v72, (uint64_t)v62, Prototype);
              v71 = WebCore::cacheDOMStructure((JSCell *)v62, Structure, (uint64_t)&WebCore::JSErrorEvent::s_info);
            }
            v75 = (JSCell *)WebCore::JSErrorEvent::create(v71, v62, (uint64_t *)&v134);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v62 + 415), (uint64_t)v59, (uint64_t)v75);
            v76 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v76 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v76)) == 0
              || (v79 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v80 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v78),
                  *((_DWORD *)v80 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
            {
LABEL_134:
              if (*((_DWORD *)v120 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v120) & 1) != 0)
                v75 = 0;
              v95 = (_DWORD *)v134;
              v134 = 0;
              if (v95)
              {
                if (v95[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 8))(v95);
                else
                  --v95[4];
              }
              goto LABEL_138;
            }
            v84 = *((_QWORD *)FunctionRealm + 412);
            if (v84)
            {
              v85 = *(_DWORD *)(v84 - 8);
              v86 = ((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) >> 22);
              v87 = 9 * ((v86 + ~(v86 << 13)) ^ ((v86 + ~(v86 << 13)) >> 8));
              v88 = (v87 ^ (v87 >> 15)) + ~((v87 ^ (v87 >> 15)) << 27);
              v89 = v85 & ((v88 >> 31) ^ v88);
              v90 = *(char ***)(v84 + 16 * v89);
              if (v90 != &WebCore::JSErrorEvent::s_info)
              {
                v91 = 1;
                while (v90)
                {
                  v89 = ((_DWORD)v89 + v91) & v85;
                  v90 = *(char ***)(v84 + 16 * v89);
                  ++v91;
                  if (v90 == &WebCore::JSErrorEvent::s_info)
                    goto LABEL_130;
                }
                goto LABEL_131;
              }
LABEL_130:
              v81 = *(WebCore::JSDOMGlobalObject **)(v84 + 16 * v89 + 8);
              if (!v81)
                goto LABEL_131;
            }
            else
            {
LABEL_131:
              v92 = (JSC::JSCell *)WebCore::JSErrorEvent::createPrototype(v80, FunctionRealm, v81);
              v93 = WebCore::JSErrorEvent::createStructure((uint64_t *)v80, (uint64_t)FunctionRealm, v92);
              v81 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v93, (uint64_t)&WebCore::JSErrorEvent::s_info);
            }
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v79, v81, v82);
            if (!*((_DWORD *)v80 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) == 0)
              JSC::JSObject::setStructure(v75, v80, SubclassStructure);
            goto LABEL_134;
          }
          v22 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_205:
          v102 = (_DWORD)v18 == 0;
LABEL_245:
          v24 = !v102;
LABEL_25:
          v119 = v24;
          if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
            goto LABEL_163;
LABEL_26:
          WTF::AtomStringImpl::addLiteral();
          v25 = v122;
          v27 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v26);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
            goto LABEL_163;
          if (v27 == 10)
          {
            v118 = 0;
            goto LABEL_37;
          }
          v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v27 >= 0xFFFE000000000000)
          {
            v107 = (_DWORD)v27 == 0;
            goto LABEL_249;
          }
          *(_QWORD *)&v29 = v27 - 0x2000000000000;
          if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v27 & 0xFFFE000000000002) != 0)
            {
              v30 = v27 == 7;
              goto LABEL_36;
            }
            v108 = *(unsigned __int8 *)(v27 + 5);
            if (v108 == 3)
            {
              v111 = *(_DWORD *)(v27 + 8);
            }
            else
            {
              if (v108 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_239:
                  v30 = 1;
                  goto LABEL_36;
                }
                v107 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_249;
              }
              v109 = *(_QWORD *)(v27 + 8);
              if ((v109 & 1) != 0)
                v110 = (int *)(v27 + 16);
              else
                v110 = (int *)(v109 + 4);
              v111 = *v110;
            }
            v107 = v111 == 0;
LABEL_249:
            v30 = !v107;
            goto LABEL_36;
          }
          if (v29 > 0.0)
            goto LABEL_239;
          v30 = v29 < 0.0;
LABEL_36:
          v118 = v30;
          if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
            goto LABEL_163;
LABEL_37:
          WTF::AtomStringImpl::addLiteral();
          v31 = v122;
          v33 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
            goto LABEL_163;
          if (v33 == 10)
          {
            v117 = 0;
            goto LABEL_48;
          }
          v34 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v33 >= 0xFFFE000000000000)
          {
            v112 = (_DWORD)v33 == 0;
            goto LABEL_253;
          }
          *(_QWORD *)&v35 = v33 - 0x2000000000000;
          if (v33 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v33 & 0xFFFE000000000002) != 0)
            {
              v36 = v33 == 7;
              goto LABEL_47;
            }
            v113 = *(unsigned __int8 *)(v33 + 5);
            if (v113 == 3)
            {
              v116 = *(_DWORD *)(v33 + 8);
            }
            else
            {
              if (v113 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_243:
                  v36 = 1;
                  goto LABEL_47;
                }
                v112 = *(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_253;
              }
              v114 = *(_QWORD *)(v33 + 8);
              if ((v114 & 1) != 0)
                v115 = (int *)(v33 + 16);
              else
                v115 = (int *)(v114 + 4);
              v116 = *v115;
            }
            v112 = v116 == 0;
LABEL_253:
            v36 = !v112;
            goto LABEL_47;
          }
          if (v35 > 0.0)
            goto LABEL_243;
          v36 = v35 < 0.0;
LABEL_47:
          v117 = v36;
          if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
            goto LABEL_163;
LABEL_48:
          WTF::AtomStringImpl::addLiteral();
          v37 = v122;
          v39 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v38);
            else
              *(_DWORD *)v37 -= 2;
          }
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
            goto LABEL_163;
          v11 = v6;
          if (v39 == 10)
          {
            v12 = 0;
            v137 = 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v39, &v137);
            if (HIDWORD(v137))
              goto LABEL_189;
            v12 = v137;
          }
          WTF::AtomStringImpl::addLiteral();
          v40 = v122;
          v18 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v41);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
            goto LABEL_189;
          WTF::AtomStringImpl::addLiteral();
          v42 = v122;
          v44 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v43);
            else
              *(_DWORD *)v42 -= 2;
          }
          if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          {
LABEL_189:
            v131 = 1;
            goto LABEL_164;
          }
          if (v44 == 10)
          {
            v17 = 0;
            v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
            v15 = v118;
            v14 = v119;
            v16 = v117;
            goto LABEL_8;
          }
          WebCore::valueToUSVString(a1, v44, (uint64_t)&v122);
          v46 = (int)v123;
          if (!(_DWORD)v123)
          {
            v10 = v122;
            v122 = 0;
            goto LABEL_68;
          }
          v10 = 0;
          v55 = 1;
          v131 = 1;
          v6 = v11;
        }
        *(_DWORD *)v10 -= 2;
LABEL_102:
        if (v55)
          goto LABEL_144;
        goto LABEL_103;
      }
      *(_DWORD *)v54 += 2;
      goto LABEL_90;
    }
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (v20 = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
LABEL_163:
      v131 = 1;
LABEL_164:
      v75 = 0;
      v55 = 1;
LABEL_138:
      ((void (*)(WTF::StringImpl **, __int16 *))off_1E32744F0[v55])(&v122, &v126);
LABEL_139:
      v7 = v133;
      goto LABEL_140;
    }
    v13 = v20;
    WTF::AtomStringImpl::addLiteral();
    v18 = JSC::JSObject::get((JSC::Structure *)v13, a1, (unint64_t)v122);
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
        WTF::StringImpl::destroy(v122, v21);
      else
        *(_DWORD *)v122 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
      goto LABEL_163;
    if (v18 == 10)
    {
      v119 = 0;
      goto LABEL_26;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v18 >= 0xFFFE000000000000)
      goto LABEL_205;
    *(_QWORD *)&v23 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v23 <= 0.0)
      {
        v24 = v23 < 0.0;
        goto LABEL_25;
      }
    }
    else
    {
      if ((v18 & 0xFFFE000000000002) != 0)
      {
        v24 = v18 == 7;
        goto LABEL_25;
      }
      v103 = *(unsigned __int8 *)(v18 + 5);
      if (v103 == 3)
      {
        v106 = *(_DWORD *)(v18 + 8);
LABEL_233:
        v102 = v106 == 0;
        goto LABEL_245;
      }
      if (v103 == 2)
      {
        v104 = *(_QWORD *)(v18 + 8);
        if ((v104 & 1) != 0)
          v105 = (int *)(v18 + 16);
        else
          v105 = (int *)(v104 + 4);
        v106 = *v105;
        goto LABEL_233;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v102 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_245;
      }
    }
    v24 = 1;
    goto LABEL_25;
  }
  v75 = 0;
LABEL_140:
  if (v7 != -1)
    ((void (*)(__int16 *, WTF::StringImpl **))off_1E32712B8[v7])(&v126, &v132);
  return v75;
}

uint64_t WebCore::JSErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSErrorEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSErrorEvent::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSErrorEvent::visitChildren(WebCore::JSErrorEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren();
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 104);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

unint64_t WebCore::JSErrorEvent::createPrototype(WebCore::JSErrorEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSEventPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSEvent::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSEvent::s_info);
  }
  v18 = WebCore::JSErrorEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSErrorEventPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSErrorEventPrototype::create(WebCore::JSErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSErrorEvent::s_info, &WebCore::JSErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3576);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSErrorEvent::createPrototype((WebCore::JSErrorEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSErrorEvent::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSErrorEvent::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3576) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSErrorEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsErrorEvent_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsErrorEvent_filename(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsErrorEvent_lineno(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 88);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsErrorEvent_colno(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 92);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsErrorEvent_error(JSC::JSGlobalObject *a1, uint64_t a2)
{
  return WebCore::ErrorEvent::error(*(WebCore::ErrorEvent **)(a2 + 24), a1);
}

uint64_t WebCore::JSErrorEvent::subspaceForImpl(WebCore::JSErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3656);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 3656);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 3656);
    *(_QWORD *)(v8 + 3656) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3656);
  *(_QWORD *)(v3 + 3656) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  JSC::JSCell *v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3584);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v31);
    v6[2] = SlowCase + (int)v31;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v6[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_11;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_11:
    v10[2846] = v2 + 48;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v6[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v6[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v16 = *(_QWORD *)(v6[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSEvent::s_info)
    {
LABEL_18:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_20;
    }
    else
    {
      v30 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v30) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v30;
        if (v23 == &WebCore::JSEvent::s_info)
          goto LABEL_18;
      }
    }
  }
  Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSEventPrototype::create((WebCore::JSEventPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSEvent::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSEvent::s_info);
LABEL_20:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v29, 14, (uint64_t)&v33);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSEvent::s_info, &WebCore::JSEventConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3584) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSEventPrototype::s_info != (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsEvent_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsEvent_target(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 48);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsEvent_currentTarget(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 32);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

unint64_t WebCore::jsEvent_eventPhase(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 20) >> 12) & 3 | 0xFFFE000000000000;
}

uint64_t WebCore::jsEvent_cancelBubble(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 0x30) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSEvent_cancelBubble(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t result;
  int hasExceptionsAfterHandlingTraps;
  char v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 239)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (_DWORD)a3 == 0;
    goto LABEL_31;
  }
  *(_QWORD *)&v5 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v6 = a3 == 7;
      goto LABEL_7;
    }
    v12 = *(unsigned __int8 *)(a3 + 5);
    if (v12 == 3)
    {
      v15 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v12 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v6 = 1;
          goto LABEL_7;
        }
        v11 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_31;
      }
      v13 = *(_QWORD *)(a3 + 8);
      if ((v13 & 1) != 0)
        v14 = (int *)(a3 + 16);
      else
        v14 = (int *)(v13 + 4);
      v15 = *v14;
    }
    v11 = v15 == 0;
LABEL_31:
    v6 = !v11;
    goto LABEL_7;
  }
  v6 = v5 > 0.0 || v5 < 0.0;
LABEL_7:
  v7 = *(_QWORD *)(a2 + 24);
  if (!*((_DWORD *)v4 + 20))
  {
    if (!v6)
      return 1;
LABEL_9:
    *(_DWORD *)(v7 + 20) |= 0x10u;
    return 1;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
  v10 = hasExceptionsAfterHandlingTraps;
  result = hasExceptionsAfterHandlingTraps ^ 1u;
  if ((v10 & 1) == 0 && v6)
    goto LABEL_9;
  return result;
}

uint64_t WebCore::jsEvent_bubbles(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 2) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsEvent_cancelable(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 4) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsEvent_defaultPrevented(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 0x40) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsEvent_composed(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 8) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsEvent_isTrusted(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 21) & 2) != 0)
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsEvent_timeStamp(uint64_t a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext *v3;
  double v4;
  uint64_t v5;

  v3 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  if (!v3)
    return 10;
  v4 = WebCore::Event::timeStampForBindings(*(WebCore::Event **)(a2 + 24), v3);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v4, v4 == (double)(int)v5)
    && ((_DWORD)v5 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

uint64_t WebCore::jsEvent_srcElement(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 48);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsEvent_returnValue(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 20) & 0x40) != 0)
    return 6;
  else
    return 7;
}

uint64_t WebCore::setJSEvent_returnValue(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  int hasExceptionsAfterHandlingTraps;
  BOOL v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 239)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v10 = (_DWORD)a3 == 0;
    goto LABEL_31;
  }
  *(_QWORD *)&v5 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v6 = a3 == 7;
      goto LABEL_7;
    }
    v11 = *(unsigned __int8 *)(a3 + 5);
    if (v11 == 3)
    {
      v14 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v11 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v6 = 1;
          goto LABEL_7;
        }
        v10 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_31;
      }
      v12 = *(_QWORD *)(a3 + 8);
      if ((v12 & 1) != 0)
        v13 = (int *)(a3 + 16);
      else
        v13 = (int *)(v12 + 4);
      v14 = *v13;
    }
    v10 = v14 == 0;
LABEL_31:
    v6 = !v10;
    goto LABEL_7;
  }
  v6 = v5 > 0.0 || v5 < 0.0;
LABEL_7:
  v7 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if (((hasExceptionsAfterHandlingTraps | v6) & 1) != 0)
      return hasExceptionsAfterHandlingTraps ^ 1u;
    goto LABEL_9;
  }
  if (!v6)
  {
LABEL_9:
    if ((*(_DWORD *)(v7 + 20) & 0x404) == 4)
      *(_DWORD *)(v7 + 20) |= 0x40u;
  }
  return 1;
}

uint64_t WebCore::JSEventOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSEvent::toWrapped(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 239)
    return 0;
  else
    return *(_QWORD *)(a2 + 24);
}

uint64_t WebCore::convertDictionary<WebCore::EventListenerOptions>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  WTF::StringImpl *v18;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_19;
    }
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v7, a2, (unint64_t)v18);
    v9 = result;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_19;
    }
    if (v9 == 10)
      goto LABEL_9;
    result = *((_QWORD *)a2 + 7);
    if (v9 >= 0xFFFE000000000000)
    {
      v13 = (_DWORD)v9 == 0;
    }
    else
    {
      *(_QWORD *)&v11 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v10 = v11 > 0.0 || v11 < 0.0;
LABEL_14:
        if (!*(_DWORD *)(result + 80))
          goto LABEL_15;
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
        if ((result & 1) == 0)
          goto LABEL_15;
LABEL_19:
        v12 = 1;
        goto LABEL_16;
      }
      if ((v9 & 0xFFFE000000000002) != 0)
      {
        v10 = v9 == 7;
        goto LABEL_14;
      }
      v14 = *(unsigned __int8 *)(v9 + 5);
      if (v14 == 3)
      {
        v17 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        if (v14 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v10 = 1;
            goto LABEL_14;
          }
          v13 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
          goto LABEL_25;
        }
        v15 = *(_QWORD *)(v9 + 8);
        if ((v15 & 1) != 0)
          v16 = (int *)(v9 + 16);
        else
          v16 = (int *)(v15 + 4);
        v17 = *v16;
      }
      v13 = v17 == 0;
    }
LABEL_25:
    v10 = !v13;
    goto LABEL_14;
  }
LABEL_9:
  v10 = 0;
LABEL_15:
  v12 = 0;
  *(_BYTE *)v3 = v10;
LABEL_16:
  *(_DWORD *)(v3 + 4) = v12;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSEventSource>::construct(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::SecurityContext *v7;
  int v8;
  JSC::JSCell *v9;
  WTF::StringImpl *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  JSC::VM *v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF::StringImpl *v20;
  int v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  JSCell *v24;
  JSC::JSCell *v25;
  JSC::JSGlobalObject *v26;
  JSC::JSObject *v27;
  JSC::JSGlobalObject *v28;
  JSC::VM *v29;
  JSC::JSObject *v30;
  JSC::Structure *v31;
  JSC::VM *FunctionRealm;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  int v40;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t SubclassStructure;
  JSValue v45;
  WTF::StringImpl *v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  char v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  JSC::VM *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;

  v3 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, this, v45);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v59, (uint64_t)"EventSource", 12);
  v7 = (WebCore::SecurityContext *)v6;
  WebCore::valueToUSVString(this, *(_QWORD *)(a2 + 48), (uint64_t)&v57);
  v8 = v58;
  if (!v58)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) < 0xFFFFFFFFFFFFFFFELL)
    {
      v9 = *(JSC::JSCell **)(a2 + 56);
      v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      v60 = v10;
      if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
        {
          JSC::throwTypeError();
LABEL_54:
          v24 = 0;
LABEL_46:
          v8 = v58;
          goto LABEL_47;
        }
        v12 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v14 = JSC::JSObject::get(v12, this, (unint64_t)v54);
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v13);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          goto LABEL_54;
        if (v14 != 10)
        {
          v15 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v14 >= 0xFFFE000000000000)
            goto LABEL_82;
          *(_QWORD *)&v16 = v14 - 0x2000000000000;
          if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            LODWORD(v14) = v16 > 0.0 || v16 < 0.0;
            goto LABEL_19;
          }
          if ((v14 & 0xFFFE000000000002) != 0)
          {
            LODWORD(v14) = v14 == 7;
            goto LABEL_19;
          }
          v49 = *(unsigned __int8 *)(v14 + 5);
          if (v49 == 3)
          {
            v52 = *(_DWORD *)(v14 + 8);
          }
          else
          {
            if (v49 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v48 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
                goto LABEL_97;
              }
              LODWORD(v14) = 1;
              goto LABEL_19;
            }
            v50 = *(_QWORD *)(v14 + 8);
            if ((v50 & 1) != 0)
              v51 = (int *)(v14 + 16);
            else
              v51 = (int *)(v50 + 4);
            v52 = *v51;
          }
          v48 = v52 == 0;
          goto LABEL_97;
        }
      }
      LODWORD(v14) = 0;
      goto LABEL_20;
    }
    LODWORD(v14) = 0;
LABEL_20:
    while (1)
    {
      if (!v58)
      {
        v17 = v57;
        v57 = 0;
        v60 = v17;
        v53 = v14;
        WebCore::EventSource::create(v7, &v53, (uint64_t)&v54);
        v20 = v60;
        v60 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
        if (*(_DWORD *)(v3 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3))
        {
          v24 = 0;
          v21 = v56;
          goto LABEL_44;
        }
        v21 = v56;
        if (!v56)
        {
          v22 = *(JSC::VM **)(v5 + 40);
          v23 = v54;
          v54 = 0;
          v60 = v23;
          v24 = (JSCell *)WebCore::toJSNewlyCreated(v22, (uint64_t (****)(WebCore::EventSource *__hidden))&v60, v19);
          if (v60)
          {
            if (*((_DWORD *)v60 + 6) == 1)
              (*(void (**)(void))(*(_QWORD *)v60 + 72))();
            else
              --*((_DWORD *)v60 + 6);
          }
          goto LABEL_29;
        }
        if (v56 == 1)
          break;
      }
      v15 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
      v48 = (_DWORD)v14 == 0;
LABEL_97:
      LODWORD(v14) = !v48;
LABEL_19:
      if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
        goto LABEL_54;
    }
    LOBYTE(v60) = (_BYTE)v54;
    v47 = v55;
    v55 = 0;
    v61 = v47;
    if (!*(_QWORD *)(v3 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v59, (unsigned __int8 *)&v60);
      v47 = v61;
    }
    v61 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v18);
      else
        *(_DWORD *)v47 -= 2;
    }
    v24 = 0;
LABEL_29:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    {
      v24 = 0;
      goto LABEL_45;
    }
    v25 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v25 & 0xFFFE000000000002) != 0
      || (v26 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v25)) == 0
      || (v28 = v26, v26 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v29 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v26, v27),
          *((_DWORD *)v29 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) != 0)
    {
LABEL_43:
      if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
        v24 = 0;
LABEL_44:
      if (v21 == -1)
        goto LABEL_46;
LABEL_45:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3274A28[v21])(&v60, &v54);
      goto LABEL_46;
    }
    v33 = *((_QWORD *)FunctionRealm + 412);
    if (v33)
    {
      v34 = *(_DWORD *)(v33 - 8);
      v35 = ((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      v39 = *(char ***)(v33 + 16 * v38);
      if (v39 == &WebCore::JSEventSource::s_info)
      {
LABEL_39:
        v30 = *(JSC::JSObject **)(v33 + 16 * v38 + 8);
        if (v30)
        {
LABEL_41:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v28, v30, v31);
          if (!*((_DWORD *)v29 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) == 0)
            JSC::JSObject::setStructure(v24, v29, SubclassStructure);
          goto LABEL_43;
        }
      }
      else
      {
        v40 = 1;
        while (v39)
        {
          v38 = ((_DWORD)v38 + v40) & v34;
          v39 = *(char ***)(v33 + 16 * v38);
          ++v40;
          if (v39 == &WebCore::JSEventSource::s_info)
            goto LABEL_39;
        }
      }
    }
    Prototype = (JSC::JSCell *)WebCore::JSEventSource::createPrototype(v29, FunctionRealm, v30);
    Structure = WebCore::JSEventSource::createStructure((uint64_t *)v29, (uint64_t)FunctionRealm, Prototype);
    v30 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, Structure, (uint64_t)&WebCore::JSEventSource::s_info);
    goto LABEL_41;
  }
  v24 = 0;
LABEL_47:
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v8])(&v54, &v57);
  return v24;
}

uint64_t WebCore::JSEventSource::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::~Ref(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
    }
  }
  return a1;
}

uint64_t WebCore::JSEventSource::createPrototype(WebCore::JSEventSource *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  JSC::JSCell *v19;
  JSC::JSObject *Object;
  uint64_t *v21;
  unint64_t SlowCase;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::Structure *v29;
  int v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34[6];
  int v35;
  int v36;
  JSC::Structure *v37;
  int v38;

  v5 = (unint64_t *)((char *)this + 40136);
  v6 = *((_QWORD *)a2 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSEventTarget::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSEventTarget::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    Structure = WebCore::JSEventTargetPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSEventTargetPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSEventTarget::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSEventTarget::s_info);
  }
  v19 = *(JSC::JSCell **)(v14 + 48);
  LODWORD(v34[0]) = 23;
  if (((unint64_t)v19 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v19);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v21 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v5;
  if (*v5 < v5[1])
    goto LABEL_12;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_12:
    *v5 = SlowCase + 128;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v19, v34, &WebCore::JSEventSourcePrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v23 = *v21;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_16;
  v23 = *((_QWORD *)this + 4865);
  if ((v23 & 1) == 0)
  {
    v33 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v23 + HIDWORD(v33);
    *((_QWORD *)this + 4865) = v23 + (int)v33;
LABEL_16:
    *v21 = v23 + 16;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM();
  v23 = JSC::LocalAllocator::allocateSlowCase();
LABEL_17:
  *(_DWORD *)v23 = 0;
  v24 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v23 = SlowCase >> 4;
  *(_DWORD *)(v23 + 4) = v24;
  *(_QWORD *)(v23 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSEventSource::s_info, (uint64_t)&WebCore::JSEventSourcePrototypeTableValues, (JSC::JSObject *)v23);
  v25 = *(_QWORD *)(v5[227] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = JSC::JSString::create((uint64_t)this, v34);
  v28 = v34[0];
  v34[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE));
  v38 = *(_DWORD *)v23;
  v37 = v29;
  v30 = JSC::Structure::outOfLineCapacity(v29);
  v35 = 0;
  v36 = v30;
  v34[0] = (WTF::StringImpl *)&v36;
  v34[1] = (WTF::StringImpl *)v23;
  v34[2] = this;
  v34[3] = (WTF::StringImpl *)&v38;
  v34[4] = (WTF::StringImpl *)&v37;
  v34[5] = (WTF::StringImpl *)&v35;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v29, this, v25, 6, (uint64_t)v34);
  if ((*(_BYTE *)((16 * *(unsigned int *)v23) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v23, (uint64_t)this, v35, v27);
  *((_DWORD *)v29 + 4) |= 0x10u;
  return v23;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventSource>,(WebCore::DOMConstructorID)713>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5704);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSEventSource>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSEventSource::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSEventSource::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSEventSource::createPrototype((WebCore::JSEventSource *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSEventSource::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSEventSource::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSEventSource::s_info, &WebCore::JSEventSourceConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5704) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsEventSourceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSEventSourcePrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventSource>,(WebCore::DOMConstructorID)713>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsEventSource_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsEventSource_withCredentials(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 120))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsEventSource_readyState(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 122) | 0xFFFE000000000000;
}

uint64_t WebCore::jsEventSource_onopen(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1376), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSEventSource_onopen(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSEventSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSEventSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1376), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsEventSource_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSEventSource_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSEventSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSEventSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1192), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsEventSource_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSEventSource_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSEventSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSEventSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSEventTarget::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSEventSourceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[8];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[9] || (result = (*(uint64_t (**)(_QWORD *))(v5[7] + 64))(v5 + 7), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSEventSourceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::toJSNewlyCreated(JSC::VM *a1, uint64_t (****a2)(WebCore::EventSource *__hidden this), WebCore::JSDOMGlobalObject *a3)
{
  uint64_t (***v3)(WebCore::EventSource *__hidden);
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventSource *v15;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  int v34;
  unint64_t SlowCase;
  uint64_t (***v36)(WebCore::EventSource *__hidden);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (**Allocator)(WebCore::EventSource *__hidden);
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  WTF *v49;

  v3 = *a2;
  if (**a2 != off_1E33FE5E8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AD5818);
  }
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventSource::s_info + ~((_QWORD)&WebCore::JSEventSource::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSEventSource::s_info)
    {
LABEL_7:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_9;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSEventSource::s_info)
          goto LABEL_7;
      }
    }
  }
  v15 = (WebCore::JSEventSource *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSEventSource::createPrototype(v15, a1, a3);
  Structure = WebCore::JSEventSource::createStructure((uint64_t *)v15, (uint64_t)a1, Prototype);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSEventSource::s_info);
LABEL_9:
  v18 = *((_QWORD *)a1 + 7);
  v19 = *(_QWORD *)(v18 + 41456);
  v20 = *(_QWORD *)(v19 + 23536);
  v21 = *(_QWORD **)(v20 + 5784);
  if (v21)
    goto LABEL_31;
  v22 = *(_QWORD *)(v19 + 22648);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_14:
  v24 = *(_QWORD *)(v22 + 2824);
  v47 = *(_QWORD *)(v24 + 5784);
  if (!v47)
  {
    v25 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v49, "IsoSpace T");
    v48 = 0;
    MEMORY[0x19AEA3204](v25, &v49, v18 + 192, v18 + 1872, 32, 8, &v48);
    v27 = (uint64_t)v48;
    v48 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v49;
    v49 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        WTF::fastFree(v28, v26);
      else
        --*(_DWORD *)v28;
    }
    v47 = v25;
    v29 = *(_QWORD *)(v24 + 5784);
    *(_QWORD *)(v24 + 5784) = v25;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = *(unsigned int *)(v22 + 2844);
    if ((_DWORD)v30 == *(_DWORD *)(v22 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v22 + 2832, (unint64_t)&v47);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v22 + 2832) + 8 * v30) = v25;
      *(_DWORD *)(v22 + 2844) = v30 + 1;
    }
  }
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v31 = *(_QWORD *)(v20 + 5784);
  *(_QWORD *)(v20 + 5784) = v21;
  if (v31)
  {
    v32 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v32, v33);
  }
  v34 = __ldxr((unsigned __int8 *)v22);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_31:
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_32:
    v21[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v46 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v46);
    v21[5] = SlowCase + (int)v46;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v36 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v36;
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  v37 = *((_QWORD *)a1 + 415);
  if ((byte_1EE335400 & 1) == 0)
  {
    qword_1EE3353F8 = (uint64_t)&off_1E3271020;
    byte_1EE335400 = 1;
  }
  if (!*(_DWORD *)(v37 + 48))
  {
    if ((SlowCase & 8) != 0)
      v38 = (SlowCase - 112) | 1;
    else
      v38 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v38 & 1) != 0)
      v39 = v38 + 47;
    else
      v39 = *(_QWORD *)v38 + 32;
    Allocator = *(uint64_t (***)(WebCore::EventSource *__hidden))(v39 + 16);
    if (!Allocator)
      Allocator = (uint64_t (**)(WebCore::EventSource *__hidden))JSC::WeakSet::findAllocator();
    *(_QWORD *)(v39 + 16) = *Allocator;
    *Allocator = (uint64_t (*)(WebCore::EventSource *__hidden))SlowCase;
    Allocator[1] = (uint64_t (*)(WebCore::EventSource *__hidden))&qword_1EE3353F8;
    Allocator[2] = (uint64_t (*)(WebCore::EventSource *__hidden))v37;
    v41 = (uint64_t)v3[1];
    v3[1] = Allocator;
    if (!v41)
      return SlowCase;
LABEL_55:
    *(_QWORD *)(v41 + 8) = 3;
    return SlowCase;
  }
  v49 = (WTF *)v3;
  if ((SlowCase & 8) != 0)
    v43 = (SlowCase - 112) | 1;
  else
    v43 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v43 & 1) != 0)
    v44 = v43 + 47;
  else
    v44 = *(_QWORD *)v43 + 32;
  v45 = *(_QWORD **)(v44 + 16);
  if (!v45)
    v45 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v44 + 16) = *v45;
  *v45 = SlowCase;
  v45[1] = &qword_1EE3353F8;
  v45[2] = v37;
  v48 = v45;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v37 + 32), (uint64_t *)&v49, (uint64_t *)&v48);
  v41 = (uint64_t)v48;
  if (v48)
    goto LABEL_55;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::EventSource>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (***v15)(WebCore::EventSource *__hidden);

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v7 + 16 * v12);
      if (v13 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v15 = (uint64_t (***)(WebCore::EventSource *__hidden))a3;
  v5 = WebCore::toJSNewlyCreated(a2, &v15, (WebCore::JSDOMGlobalObject *)a3);
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 1)
      ((void (*)(void))(*v15)[9])();
    else
      --*((_DWORD *)v15 + 6);
  }
  return v5;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSEventTarget>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::EventTarget *v6;
  JSCell *v7;
  uint64_t v9;
  JSC::VM *v10;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v10 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (WebCore::EventTarget *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v10, (uint64_t)"EventTarget", 12);
  WebCore::EventTarget::create(v6, (WebCore::EventTargetConcrete *)&v9);
  v7 = (JSCell *)WebCore::toJSNewlyCreated((uint64_t)a1, *(_QWORD *)(v5 + 40), &v9);
  WebCore::setSubclassStructureIfNeeded<WebCore::EventTarget>(a1, a2, v7);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v7 = 0;
  WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::~Ref(&v9);
  return v7;
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::EventTarget>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  JSC::JSCell **FunctionRealm;
  JSC::JSObject *v12;
  JSC::Structure *v13;
  unint64_t SubclassStructure;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = *((_QWORD *)a1 + 7);
      FunctionRealm = (JSC::JSCell **)JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      if (!*(_DWORD *)(v10 + 80)
        || (result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10),
            (result & 1) == 0))
      {
        v12 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSEventTarget>((uint64_t *)v10, FunctionRealm);
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v12, v13);
        if (!*(_DWORD *)(v10 + 80))
          return JSC::JSObject::setStructure(a3, (JSC::VM *)v10, SubclassStructure);
        result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10);
        if ((result & 1) == 0)
          return JSC::JSObject::setStructure(a3, (JSC::VM *)v10, SubclassStructure);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSEventTarget::JSEventTarget(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  JSC::JSCell *v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3600);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v31);
    v6[2] = SlowCase + (int)v31;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSEventTarget>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v6[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_11;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_11:
    v10[2846] = v2 + 48;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v6[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v6[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v16 = *(_QWORD *)(v6[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSEventTarget::s_info)
    {
LABEL_18:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_20;
    }
    else
    {
      v30 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v30) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v30;
        if (v23 == &WebCore::JSEventTarget::s_info)
          goto LABEL_18;
      }
    }
  }
  Structure = WebCore::JSEventTargetPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSEventTargetPrototype::create((WebCore::JSEventTargetPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSEventTarget::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSEventTarget::s_info);
LABEL_20:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3600) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsEventTargetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSEventTargetPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSEventTarget::subspaceForImpl(WebCore::JSEventTarget *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3680);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 3680);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 3680);
    *(_QWORD *)(v9 + 3680) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSEventTarget::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSEventTargetOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t *WebCore::JSEventTargetOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (v4)
    v5 = (*(_QWORD *)(v4 + 16) & 0x2000000000000) == 0;
  else
    v5 = 1;
  if (v5)
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 88))(*(_QWORD *)(*(_QWORD *)a2 + 24));
  else
    *(_DWORD *)(v4 + 24) += 2;
  v8 = v4;
  v6 = v4 + 8;
  if (!v4)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v4);
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  return WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::~Ref(&v8);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  JSC::Structure *v3;
  unint64_t v4;
  JSC::VM *v6;
  int v8;
  JSC::JSCell *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t Object;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  double v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  double v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  WebCore::JSDOMGlobalObject *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  unint64_t v60;
  WebCore::JSExtendableCookieChangeEvent *v61;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  JSCell *v64;
  JSC::JSCell *v65;
  JSC::JSGlobalObject *v66;
  JSC::JSObject *v67;
  JSC::JSGlobalObject *v68;
  JSC::VM *v69;
  JSC::JSObject *v70;
  JSC::Structure *v71;
  JSC::VM *FunctionRealm;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char **v79;
  int v80;
  JSC::JSCell *v81;
  uint64_t v82;
  unint64_t SubclassStructure;
  _DWORD *v84;
  JSCell *v85;
  JSValue v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  JSC::VM *v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  WTF::StringImpl *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  JSC::VM *v119;
  _BYTE v120[9];

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v87.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v6, a1, v87);
  }
  v105 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v114);
  v8 = v115;
  if (v115)
  {
    v85 = 0;
    goto LABEL_95;
  }
  v104 = v6;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v4 = 0;
    v15 = 0;
    v119 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v16 = 0;
    goto LABEL_59;
  }
  v9 = *(JSC::JSCell **)(a2 + 56);
  v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v119 = v2;
  if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_107;
    }
    v3 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v18 = (WTF::StringImpl *)v116;
    v4 = JSC::JSObject::get(v3, a1, v116);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
      goto LABEL_107;
    if (v4 == 10)
    {
      v103 = 0;
      goto LABEL_20;
    }
    v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v4 >= 0xFFFE000000000000)
      goto LABEL_142;
    *(_QWORD *)&v21 = v4 - 0x2000000000000;
    if (v4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v21 <= 0.0)
      {
        v22 = v21 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v4 & 0xFFFE000000000002) != 0)
      {
        v22 = v4 == 7;
        goto LABEL_19;
      }
      v89 = *(unsigned __int8 *)(v4 + 5);
      if (v89 == 3)
      {
        v92 = *(_DWORD *)(v4 + 8);
LABEL_170:
        v88 = v92 == 0;
        goto LABEL_182;
      }
      if (v89 == 2)
      {
        v90 = *(_QWORD *)(v4 + 8);
        if ((v90 & 1) != 0)
          v91 = (int *)(v4 + 16);
        else
          v91 = (int *)(v90 + 4);
        v92 = *v91;
        goto LABEL_170;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v88 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_182;
      }
    }
    v22 = 1;
    goto LABEL_19;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v4 = 0;
  v15 = 0;
  v16 = 0;
LABEL_59:
  v106 = v10;
  v107 = v11;
  v108 = v12;
  v109 = v4;
  v110 = __PAIR64__(v13, v14);
  v111 = v15;
  v112 = v16;
  v113 = 0;
  while (1)
  {
    v36 = v113;
    if (v113)
    {
      v64 = 0;
      goto LABEL_94;
    }
    if (!v115)
      break;
    v20 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_142:
    v88 = (_DWORD)v4 == 0;
LABEL_182:
    v22 = !v88;
LABEL_19:
    v103 = v22;
    if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    {
LABEL_107:
      v113 = 1;
    }
    else
    {
LABEL_20:
      WTF::AtomStringImpl::addLiteral();
      v23 = (WTF::StringImpl *)v116;
      v4 = JSC::JSObject::get(v3, a1, v116);
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v24);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
        goto LABEL_107;
      if (v4 == 10)
      {
        v11 = 0;
        goto LABEL_31;
      }
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v4 >= 0xFFFE000000000000)
      {
        v93 = (_DWORD)v4 == 0;
        goto LABEL_186;
      }
      *(_QWORD *)&v26 = v4 - 0x2000000000000;
      if (v4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v4 & 0xFFFE000000000002) != 0)
        {
          v11 = v4 == 7;
          goto LABEL_30;
        }
        v94 = *(unsigned __int8 *)(v4 + 5);
        if (v94 == 3)
        {
          v97 = *(_DWORD *)(v4 + 8);
        }
        else
        {
          if (v94 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_176:
              v11 = 1;
              goto LABEL_30;
            }
            v93 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_186;
          }
          v95 = *(_QWORD *)(v4 + 8);
          if ((v95 & 1) != 0)
            v96 = (int *)(v4 + 16);
          else
            v96 = (int *)(v95 + 4);
          v97 = *v96;
        }
        v93 = v97 == 0;
LABEL_186:
        v11 = !v93;
        goto LABEL_30;
      }
      if (v26 > 0.0)
        goto LABEL_176;
      v11 = v26 < 0.0;
LABEL_30:
      if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
        goto LABEL_107;
LABEL_31:
      WTF::AtomStringImpl::addLiteral();
      v27 = (WTF::StringImpl *)v116;
      v4 = JSC::JSObject::get(v3, a1, v116);
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v28);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
        goto LABEL_107;
      if (v4 == 10)
      {
        v12 = 0;
        goto LABEL_42;
      }
      v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v4 >= 0xFFFE000000000000)
      {
        v98 = (_DWORD)v4 == 0;
        goto LABEL_190;
      }
      *(_QWORD *)&v30 = v4 - 0x2000000000000;
      if (v4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v4 & 0xFFFE000000000002) != 0)
        {
          v12 = v4 == 7;
          goto LABEL_41;
        }
        v99 = *(unsigned __int8 *)(v4 + 5);
        if (v99 == 3)
        {
          v102 = *(_DWORD *)(v4 + 8);
        }
        else
        {
          if (v99 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_180:
              v12 = 1;
              goto LABEL_41;
            }
            v98 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_190;
          }
          v100 = *(_QWORD *)(v4 + 8);
          if ((v100 & 1) != 0)
            v101 = (int *)(v4 + 16);
          else
            v101 = (int *)(v100 + 4);
          v102 = *v101;
        }
        v98 = v102 == 0;
LABEL_190:
        v12 = !v98;
        goto LABEL_41;
      }
      if (v30 > 0.0)
        goto LABEL_180;
      v12 = v30 < 0.0;
LABEL_41:
      if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29))
        goto LABEL_107;
LABEL_42:
      WTF::AtomStringImpl::addLiteral();
      v31 = (WTF::StringImpl *)v116;
      v4 = JSC::JSObject::get(v3, a1, v116);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
        goto LABEL_107;
      if (v4 == 10)
      {
        v13 = 0;
        v14 = 0;
        v4 = 0;
        goto LABEL_50;
      }
      WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CookieListItem>>>::convert(a1, v4, (uint64_t)&v116);
      if (v118)
      {
        v113 = 1;
        if (v118 != -1)
          ((void (*)(_BYTE *, unint64_t *))off_1E3274DF0[v118])(v120, &v116);
      }
      else
      {
        v4 = v116;
        v14 = v117;
        v13 = HIDWORD(v117);
LABEL_50:
        WTF::AtomStringImpl::addLiteral();
        v33 = (WTF::StringImpl *)v116;
        v3 = (JSC::Structure *)JSC::JSObject::get(v3, a1, v116);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v34);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
        {
          v113 = 1;
        }
        else
        {
          if (v3 == (JSC::Structure *)10)
          {
            v15 = 0;
            v16 = 0;
LABEL_58:
            v10 = v103;
            goto LABEL_59;
          }
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CookieListItem>>>::convert(a1, (uint64_t)v3, (uint64_t)&v116);
          if (!v118)
          {
            v15 = v116;
            v16 = v117;
            goto LABEL_58;
          }
          v113 = 1;
          if (v118 != -1)
            ((void (*)(_BYTE *, unint64_t *))off_1E3274DF0[v118])(v120, &v116);
        }
        if (v13)
          WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct((WTF::StringImpl *)v4, (WTF::StringImpl *)(v4 + 56 * v13));
        if (v4)
          WTF::fastFree((WTF *)v4, v35);
      }
    }
  }
  v37 = v114;
  v114 = 0;
  v38 = v106;
  v39 = v107;
  v40 = v108;
  v41 = v109;
  v109 = 0;
  v42 = v110;
  v110 = 0;
  v43 = v111;
  v111 = 0;
  v44 = v112;
  v112 = 0;
  v45 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v45);
  *(_QWORD *)(v45 + 8) = 0;
  if (v38)
    v49 = 2031618;
  else
    v49 = 2031616;
  v50 = v49 | (v37 != 0) | (4 * v39) | (8 * v40) | *(_DWORD *)(v45 + 20) & 0xFFC00000;
  *(_DWORD *)(v45 + 16) = 1;
  *(_DWORD *)(v45 + 20) = v50;
  if (v37)
  {
    *(_DWORD *)v37 += 2;
    v50 = *(_DWORD *)(v45 + 20);
  }
  *(_QWORD *)(v45 + 24) = v37;
  *(_QWORD *)(v45 + 32) = 0;
  *(_OWORD *)(v45 + 40) = 0u;
  *(_QWORD *)(v45 + 56) = v48;
  *(_DWORD *)(v45 + 20) = v50 | 0x4000;
  *(_OWORD *)(v45 + 64) = 0u;
  *(_DWORD *)(v45 + 80) = 0;
  *(_OWORD *)(v45 + 88) = 0u;
  *(_QWORD *)v45 = off_1E3354658;
  *(_QWORD *)(v45 + 104) = v41;
  *(_QWORD *)(v45 + 112) = v42;
  *(_QWORD *)(v45 + 120) = v43;
  *(_QWORD *)(v45 + 128) = v44;
  v116 = v45;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::destroy(v37, v46);
      if (*(void (***)(WebCore::ExtendableCookieChangeEvent *__hidden))v45 != off_1E3354658)
      {
        __break(0xC471u);
        JUMPOUT(0x194AD6A04);
      }
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v51 = *(_QWORD *)(v105 + 40);
  v52 = *(_QWORD *)(v51 + 3296);
  if (!v52)
    goto LABEL_76;
  v53 = *(_DWORD *)(v52 - 8);
  v54 = ((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
       + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) >> 22);
  v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
  v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
  v57 = v53 & ((v56 >> 31) ^ v56);
  v58 = *(char ***)(v52 + 16 * v57);
  if (v58 == &WebCore::JSExtendableCookieChangeEvent::s_info)
  {
LABEL_75:
    v60 = *(_QWORD *)(v52 + 16 * v57 + 8);
    if (!v60)
      goto LABEL_76;
  }
  else
  {
    v59 = 1;
    while (v58)
    {
      v57 = ((_DWORD)v57 + v59) & v53;
      v58 = *(char ***)(v52 + 16 * v57);
      ++v59;
      if (v58 == &WebCore::JSExtendableCookieChangeEvent::s_info)
        goto LABEL_75;
    }
LABEL_76:
    v61 = *(WebCore::JSExtendableCookieChangeEvent **)(v51 + 56);
    Prototype = (JSC::JSCell *)WebCore::JSExtendableCookieChangeEvent::createPrototype(v61, *(JSC::VM **)(v105 + 40), v47);
    Structure = WebCore::JSExtendableCookieChangeEvent::createStructure((uint64_t *)v61, v51, Prototype);
    v60 = WebCore::cacheDOMStructure((JSCell *)v51, Structure, (uint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info);
  }
  v64 = (JSCell *)WebCore::JSExtendableCookieChangeEvent::create(v60, (JSC::VM *)v51, (uint64_t *)&v116);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*(_QWORD *)(v51 + 3320), v45, (uint64_t)v64);
  v65 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v65 & 0xFFFE000000000002) == 0)
  {
    v66 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v65);
    if (v66)
    {
      v68 = v66;
      if (v66 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v69 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v66, v67);
        if (!*((_DWORD *)v69 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) == 0)
        {
          v73 = *((_QWORD *)FunctionRealm + 412);
          if (v73)
          {
            v74 = *(_DWORD *)(v73 - 8);
            v75 = ((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
                 + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
                                                                                       + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) >> 22);
            v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
            v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
            v78 = v74 & ((v77 >> 31) ^ v77);
            v79 = *(char ***)(v73 + 16 * v78);
            if (v79 == &WebCore::JSExtendableCookieChangeEvent::s_info)
            {
LABEL_86:
              v70 = *(JSC::JSObject **)(v73 + 16 * v78 + 8);
              if (v70)
              {
LABEL_88:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v68, v70, v71);
                if (!*((_DWORD *)v69 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) == 0)
                  JSC::JSObject::setStructure(v64, v69, SubclassStructure);
                goto LABEL_90;
              }
            }
            else
            {
              v80 = 1;
              while (v79)
              {
                v78 = ((_DWORD)v78 + v80) & v74;
                v79 = *(char ***)(v73 + 16 * v78);
                ++v80;
                if (v79 == &WebCore::JSExtendableCookieChangeEvent::s_info)
                  goto LABEL_86;
              }
            }
          }
          v81 = (JSC::JSCell *)WebCore::JSExtendableCookieChangeEvent::createPrototype(v69, FunctionRealm, v70);
          v82 = WebCore::JSExtendableCookieChangeEvent::createStructure((uint64_t *)v69, (uint64_t)FunctionRealm, v81);
          v70 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v82, (uint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info);
          goto LABEL_88;
        }
      }
    }
  }
LABEL_90:
  if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
    v64 = 0;
  v84 = (_DWORD *)v116;
  v116 = 0;
  if (v84)
  {
    if (v84[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
    else
      --v84[4];
  }
LABEL_94:
  ((void (*)(unint64_t *, BOOL *))off_1E3274D68[v36])(&v116, &v106);
  v85 = v64;
  v8 = v115;
LABEL_95:
  if (v8 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E32712B8[v8])(&v106, &v114);
  return v85;
}

uint64_t WebCore::JSExtendableCookieChangeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSExtendableEvent::JSExtendableEvent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::JSExtendableCookieChangeEvent::createPrototype(WebCore::JSExtendableCookieChangeEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  JSC::Structure *v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  v16 = WebCore::JSExtendableCookieChangeEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  return WebCore::JSExtendableCookieChangeEventPrototype::create(this, a2, v16, v17);
}

uint64_t WebCore::JSExtendableCookieChangeEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableEvent::prototype(WebCore::JSExtendableEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSExtendableCookieChangeEventPrototype::create(WebCore::JSExtendableCookieChangeEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info, &WebCore::JSExtendableCookieChangeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>,(WebCore::DOMConstructorID)72>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 576);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
         + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSExtendableCookieChangeEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSExtendableCookieChangeEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSExtendableCookieChangeEvent::createPrototype((WebCore::JSExtendableCookieChangeEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSExtendableCookieChangeEvent::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 576) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsExtendableCookieChangeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSExtendableCookieChangeEventPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableCookieChangeEvent>,(WebCore::DOMConstructorID)72>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsExtendableCookieChangeEvent_changed(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDictionary<WebCore::CookieListItem>>>::convert<WebCore::CookieListItem,0ul>(a1, *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 104);
}

uint64_t WebCore::jsExtendableCookieChangeEvent_deleted(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDictionary<WebCore::CookieListItem>>>::convert<WebCore::CookieListItem,0ul>(a1, *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 120);
}

uint64_t WebCore::JSExtendableCookieChangeEvent::subspaceForImpl(WebCore::JSExtendableCookieChangeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 576);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 576))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 576);
    *(_QWORD *)(v8 + 576) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 576);
  *(_QWORD *)(v3 + 576) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSExtendableEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  JSC::VM *v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  JSC::JSCell *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::JSDOMGlobalObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  JSCell *v36;
  JSC::JSCell *v37;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  JSC::VM *v41;
  WebCore::JSDOMGlobalObject *v42;
  JSC::Structure *v43;
  JSC::VM *FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t SubclassStructure;
  _DWORD *v56;
  JSValue v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  int *v67;
  int v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  int *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  JSC::VM *v76;
  unint64_t v77;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v58.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v58);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 48);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v7, (uint64_t)&v74);
    v8 = v75;
    if (v75)
    {
      v36 = 0;
    }
    else
    {
      if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 = 0;
        v11 = 0;
        LODWORD(v12) = 0;
        goto LABEL_42;
      }
      v9 = *(JSC::JSCell **)(a2 + 56);
      v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v76 = v2;
      if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v10 = 0;
        v11 = 0;
LABEL_36:
        LODWORD(v12) = 0;
        while (1)
        {
LABEL_42:
          if (!v75)
          {
            v27 = v74;
            v74 = 0;
            v28 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v28);
            *(_QWORD *)(v28 + 8) = 0;
            if (v11)
              v32 = 4;
            else
              v32 = 0;
            if ((_DWORD)v12)
              v33 = 8;
            else
              v33 = 0;
            if (v10)
              v34 = 2064386;
            else
              v34 = 2064384;
            v35 = v32 | v34 | v33 | (v27 != 0) | *(_DWORD *)(v28 + 20) & 0xFFC00000;
            *(_DWORD *)(v28 + 16) = 1;
            *(_DWORD *)(v28 + 20) = v35;
            if (v27)
            {
              *(_DWORD *)v27 += 2;
              v35 = *(_DWORD *)(v28 + 20);
            }
            *(_QWORD *)(v28 + 24) = v27;
            *(_QWORD *)(v28 + 32) = 0;
            *(_OWORD *)(v28 + 40) = 0u;
            *(_QWORD *)(v28 + 56) = v31;
            *(_DWORD *)(v28 + 20) = v35 | 0x4000;
            *(_OWORD *)(v28 + 64) = 0u;
            *(_QWORD *)v28 = off_1E347DF20;
            *(_DWORD *)(v28 + 80) = 0;
            *(_OWORD *)(v28 + 88) = 0u;
            v77 = v28;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v29);
              else
                *(_DWORD *)v27 -= 2;
            }
            v36 = (JSCell *)WebCore::toJSNewlyCreated(*(JSC::VM **)(v6 + 40), (uint64_t *)&v77, v30);
            v37 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v37 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v37)) == 0
              || (v40 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v41 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v39),
                  *((_DWORD *)v41 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
            {
LABEL_70:
              if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                v36 = 0;
              v56 = (_DWORD *)v77;
              v77 = 0;
              if (v56)
              {
                if (v56[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
                else
                  --v56[4];
              }
              goto LABEL_74;
            }
            v45 = *((_QWORD *)FunctionRealm + 412);
            if (v45)
            {
              v46 = *(_DWORD *)(v45 - 8);
              v47 = ((unint64_t)&WebCore::JSExtendableEvent::s_info
                   + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
              v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
              v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
              v50 = v46 & ((v49 >> 31) ^ v49);
              v51 = *(char ***)(v45 + 16 * v50);
              if (v51 != &WebCore::JSExtendableEvent::s_info)
              {
                v52 = 1;
                while (v51)
                {
                  v50 = ((_DWORD)v50 + v52) & v46;
                  v51 = *(char ***)(v45 + 16 * v50);
                  ++v52;
                  if (v51 == &WebCore::JSExtendableEvent::s_info)
                    goto LABEL_66;
                }
                goto LABEL_67;
              }
LABEL_66:
              v42 = *(WebCore::JSDOMGlobalObject **)(v45 + 16 * v50 + 8);
              if (!v42)
                goto LABEL_67;
            }
            else
            {
LABEL_67:
              Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(v41, FunctionRealm, v42);
              Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, Prototype);
              v42 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
            }
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v40, v42, v43);
            if (!*((_DWORD *)v41 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) == 0)
              JSC::JSObject::setStructure(v36, v41, SubclassStructure);
            goto LABEL_70;
          }
          v16 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_106:
          v59 = (_DWORD)v12 == 0;
LABEL_147:
          v10 = !v59;
LABEL_19:
          if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
            goto LABEL_84;
LABEL_20:
          WTF::AtomStringImpl::addLiteral();
          v18 = (WTF::StringImpl *)v77;
          v20 = JSC::JSObject::get((JSC::Structure *)v7, a1, v77);
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v19);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
            goto LABEL_84;
          if (v20 == 10)
          {
            v11 = 0;
            goto LABEL_31;
          }
          v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v20 >= 0xFFFE000000000000)
            break;
          *(_QWORD *)&v22 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v20 & 0xFFFE000000000002) != 0)
            {
              v11 = v20 == 7;
              goto LABEL_30;
            }
            v65 = *(unsigned __int8 *)(v20 + 5);
            if (v65 == 3)
            {
              v68 = *(_DWORD *)(v20 + 8);
              goto LABEL_139;
            }
            if (v65 == 2)
            {
              v66 = *(_QWORD *)(v20 + 8);
              if ((v66 & 1) != 0)
                v67 = (int *)(v20 + 16);
              else
                v67 = (int *)(v66 + 4);
              v68 = *v67;
LABEL_139:
              v64 = v68 == 0;
            }
            else
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_141:
                v11 = 1;
                goto LABEL_30;
              }
              v64 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            }
LABEL_151:
            v11 = !v64;
            goto LABEL_30;
          }
          if (v22 > 0.0)
            goto LABEL_141;
          v11 = v22 < 0.0;
LABEL_30:
          if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
            goto LABEL_84;
LABEL_31:
          WTF::AtomStringImpl::addLiteral();
          v23 = (WTF::StringImpl *)v77;
          v7 = JSC::JSObject::get((JSC::Structure *)v7, a1, v77);
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
            goto LABEL_84;
          if (v7 == 10)
            goto LABEL_36;
          v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v7 >= 0xFFFE000000000000)
          {
            v69 = (_DWORD)v7 == 0;
            goto LABEL_155;
          }
          *(_QWORD *)&v26 = v7 - 0x2000000000000;
          if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v26 <= 0.0)
            {
              LODWORD(v12) = v26 < 0.0;
              goto LABEL_41;
            }
          }
          else
          {
            if ((v7 & 0xFFFE000000000002) != 0)
            {
              LODWORD(v12) = v7 == 7;
              goto LABEL_41;
            }
            v70 = *(unsigned __int8 *)(v7 + 5);
            if (v70 == 3)
            {
              v73 = *(_DWORD *)(v7 + 8);
LABEL_143:
              v69 = v73 == 0;
              goto LABEL_155;
            }
            if (v70 == 2)
            {
              v71 = *(_QWORD *)(v7 + 8);
              if ((v71 & 1) != 0)
                v72 = (int *)(v7 + 16);
              else
                v72 = (int *)(v71 + 4);
              v73 = *v72;
              goto LABEL_143;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v69 = *(_QWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_155:
              LODWORD(v12) = !v69;
              goto LABEL_41;
            }
          }
          LODWORD(v12) = 1;
LABEL_41:
          if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
            goto LABEL_84;
        }
        v64 = (_DWORD)v20 == 0;
        goto LABEL_151;
      }
      if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (v13 = JSC::JSCell::getObject(v9)) == 0)
      {
        JSC::throwTypeError();
      }
      else
      {
        v7 = v13;
        WTF::AtomStringImpl::addLiteral();
        v14 = (WTF::StringImpl *)v77;
        v12 = JSC::JSObject::get((JSC::Structure *)v7, a1, v77);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v15);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (!*((_DWORD *)v2 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) == 0)
        {
          if (v12 == 10)
          {
            v10 = 0;
            goto LABEL_20;
          }
          v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v12 >= 0xFFFE000000000000)
            goto LABEL_106;
          *(_QWORD *)&v17 = v12 - 0x2000000000000;
          if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v10 = v17 > 0.0 || v17 < 0.0;
            goto LABEL_19;
          }
          if ((v12 & 0xFFFE000000000002) != 0)
          {
            v10 = v12 == 7;
            goto LABEL_19;
          }
          v60 = *(unsigned __int8 *)(v12 + 5);
          if (v60 == 3)
          {
            v63 = *(_DWORD *)(v12 + 8);
          }
          else
          {
            if (v60 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v59 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_147;
              }
              v10 = 1;
              goto LABEL_19;
            }
            v61 = *(_QWORD *)(v12 + 8);
            if ((v61 & 1) != 0)
              v62 = (int *)(v12 + 16);
            else
              v62 = (int *)(v61 + 4);
            v63 = *v62;
          }
          v59 = v63 == 0;
          goto LABEL_147;
        }
      }
LABEL_84:
      v36 = 0;
LABEL_74:
      v8 = v75;
    }
    if (v8 != -1)
      ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32712B8[v8])(&v77, &v74);
  }
  return v36;
}

uint64_t WebCore::JSExtendableEvent::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 16);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSExtendableEvent::createPrototype(WebCore::JSExtendableEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSEventPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSEvent::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSEvent::s_info);
  }
  v18 = WebCore::JSExtendableEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSExtendableEventPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSExtendableEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSExtendableEventPrototype::create(WebCore::JSExtendableEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSExtendableEvent::s_info, (uint64_t)&WebCore::JSExtendableEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7192);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSExtendableEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSExtendableEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype((WebCore::JSExtendableEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7192) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsExtendableEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSExtendableEventPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSExtendableEvent::subspaceForImpl(WebCore::JSExtendableEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7272);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 7272))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 7272);
    *(_QWORD *)(v8 + 7272) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7272);
  *(_QWORD *)(v3 + 7272) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::toJS(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  v5 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  v5 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (!v8)
      goto LABEL_5;
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != a3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v15;
        if (v14 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  if (*(void (***)(WebCore::PushEvent *__hidden))a3 == off_1E3365E78)
  {
    v5 = WebCore::createWrapper<WebCore::PushEvent,WebCore::PushEvent>(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[4];
    }
    return v5;
  }
  result = 250;
  __break(0xC471u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (!v8)
      goto LABEL_5;
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != a3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v15;
        if (v14 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  if (*(void (***)(WebCore::PushSubscriptionChangeEvent *__hidden))a3 == off_1E3366008)
  {
    v5 = WebCore::createWrapper<WebCore::PushSubscriptionChangeEvent,WebCore::PushSubscriptionChangeEvent>(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[4];
    }
    return v5;
  }
  result = 265;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSExtendableEvent::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSExtendableEvent::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSExtendableEvent::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSExtendableMessageEvent::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;

  v4 = a2[11];
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 112);
    if (!v5 || (v5[1] & 3) != 0)
      v6 = 0;
    else
      v6 = *v5;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v6);
    v7 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 184);
    if (!v7 || (v7[1] & 3) != 0)
      v8 = 0;
    else
      v8 = *v7;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v8);
  }
  return result;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::ExtendableMessageEvent::Init>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  BOOL v11;
  JSC::VM *v12;
  double v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  BOOL v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  BOOL v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _BOOL4 v50;
  char **v51;
  BOOL v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *result;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t (*v77)();
  int v78;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  int *v84;
  int v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  int *v89;
  int v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  uint64_t v103;
  int v104;
  __int16 v105;
  BOOL v106;
  uint64_t v107;
  WTF::StringImpl *v108[2];
  _BYTE v109[8];
  int v110;
  unsigned __int8 v111;
  WTF *v112;
  uint64_t v113;
  JSC::VM *v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  int v118;
  char v119;
  char v120;
  WTF::StringImpl *v121;
  _BYTE v122[8];
  int v123;
  unsigned __int8 v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v114 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 72) = 1;
    return result;
  }
  v105 = 0;
  v106 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v108[0] = 0;
  v108[1] = 0;
  v107 = 0;
  v109[0] = 0;
  v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if (v6 == 2)
  {
    v107 = 2;
    goto LABEL_51;
  }
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v9);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
  {
LABEL_251:
    *(_DWORD *)(a3 + 72) = 1;
    goto LABEL_146;
  }
  if (v10 == 10)
  {
    v11 = 0;
    goto LABEL_18;
  }
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (v10 >= 0xFFFE000000000000)
  {
    v81 = (_DWORD)v10 == 0;
    goto LABEL_307;
  }
  *(_QWORD *)&v13 = v10 - 0x2000000000000;
  if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v11 = v10 == 7;
      goto LABEL_17;
    }
    v82 = *(unsigned __int8 *)(v10 + 5);
    if (v82 == 3)
    {
      v85 = *(_DWORD *)(v10 + 8);
    }
    else
    {
      if (v82 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_17;
        }
        v81 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_307;
      }
      v83 = *(_QWORD *)(v10 + 8);
      if ((v83 & 1) != 0)
        v84 = (int *)(v10 + 16);
      else
        v84 = (int *)(v83 + 4);
      v85 = *v84;
    }
    v81 = v85 == 0;
LABEL_307:
    v11 = !v81;
    goto LABEL_17;
  }
  v11 = v13 > 0.0 || v13 < 0.0;
LABEL_17:
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_251;
LABEL_18:
  LOBYTE(v105) = v11;
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v14);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_251;
  if (v15 == 10)
  {
    v16 = 0;
    goto LABEL_29;
  }
  v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (v15 >= 0xFFFE000000000000)
  {
    v86 = (_DWORD)v15 == 0;
    goto LABEL_311;
  }
  *(_QWORD *)&v18 = v15 - 0x2000000000000;
  if (v15 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v18 <= 0.0)
    {
      v16 = v18 < 0.0;
      goto LABEL_28;
    }
    goto LABEL_298;
  }
  if ((v15 & 0xFFFE000000000002) != 0)
  {
    v16 = v15 == 7;
    goto LABEL_28;
  }
  v87 = *(unsigned __int8 *)(v15 + 5);
  if (v87 == 3)
  {
    v90 = *(_DWORD *)(v15 + 8);
LABEL_296:
    v86 = v90 == 0;
    goto LABEL_311;
  }
  if (v87 == 2)
  {
    v88 = *(_QWORD *)(v15 + 8);
    if ((v88 & 1) != 0)
      v89 = (int *)(v15 + 16);
    else
      v89 = (int *)(v88 + 4);
    v90 = *v89;
    goto LABEL_296;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_298:
    v16 = 1;
    goto LABEL_28;
  }
  v86 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_311:
  v16 = !v86;
LABEL_28:
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    goto LABEL_251;
LABEL_29:
  HIBYTE(v105) = v16;
  WTF::AtomStringImpl::addLiteral();
  v20 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v19);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_251;
  if (v20 == 10)
  {
    v21 = 0;
    goto LABEL_40;
  }
  v22 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (v20 >= 0xFFFE000000000000)
  {
    v91 = (_DWORD)v20 == 0;
    goto LABEL_301;
  }
  *(_QWORD *)&v23 = v20 - 0x2000000000000;
  if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v23 <= 0.0)
    {
      v21 = v23 < 0.0;
      goto LABEL_39;
    }
    goto LABEL_305;
  }
  if ((v20 & 0xFFFE000000000002) != 0)
  {
    v21 = v20 == 7;
    goto LABEL_39;
  }
  v92 = *(unsigned __int8 *)(v20 + 5);
  if (v92 == 3)
  {
    v95 = *(_DWORD *)(v20 + 8);
LABEL_300:
    v91 = v95 == 0;
    goto LABEL_301;
  }
  if (v92 == 2)
  {
    v93 = *(_QWORD *)(v20 + 8);
    if ((v93 & 1) != 0)
      v94 = (int *)(v20 + 16);
    else
      v94 = (int *)(v93 + 4);
    v95 = *v94;
    goto LABEL_300;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_305:
    v21 = 1;
    goto LABEL_39;
  }
  v91 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_301:
  v21 = !v91;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
    goto LABEL_251;
LABEL_40:
  v106 = v21;
  WTF::AtomStringImpl::addLiteral();
  v25 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v24);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_251;
  v26 = 2;
  if (v25 != 10)
    v26 = v25;
  v107 = v26;
  WTF::AtomStringImpl::addLiteral();
  v27 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, this);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_251;
  if (v27 == 10)
  {
LABEL_51:
    v28 = *v8;
    if (*v8)
      *(_DWORD *)v28 += 2;
    goto LABEL_61;
  }
  v121 = (WTF::StringImpl *)v27;
  v29 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v27 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v27 + 5) == 2)
  {
    v30 = *(_QWORD *)(v27 + 8);
    if ((v30 & 1) != 0)
    {
      v30 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, a2);
      if (!v30)
        goto LABEL_58;
    }
    else if (!v30)
    {
LABEL_58:
      v126 = (WTF::StringImpl *)v30;
      goto LABEL_59;
    }
    *(_DWORD *)v30 += 2;
    goto LABEL_58;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v121, a2);
LABEL_59:
  if (*((_DWORD *)v29 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
    v28 = v126;
    if (hasExceptionsAfterHandlingTraps)
    {
      v104 = 1;
      v126 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, this);
        else
          *(_DWORD *)v28 -= 2;
      }
      v62 = 1;
      goto LABEL_257;
    }
  }
  else
  {
    v28 = v126;
  }
LABEL_61:
  v104 = 0;
  v103 = 0;
  v31 = v108[1];
  v108[1] = v28;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, this);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (v6 == 2)
    goto LABEL_70;
  WTF::AtomStringImpl::addLiteral();
  v32 = v121;
  v33 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, this);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
  {
    v62 = 0;
LABEL_257:
    *(_DWORD *)(a3 + 72) = 1;
LABEL_145:
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3272138[v62])(&v121, &v103);
    goto LABEL_146;
  }
  if (v33 == 10)
  {
LABEL_70:
    v34 = *v8;
    if (*v8)
      *(_DWORD *)v34 += 2;
    v102 = 0;
LABEL_75:
    v101 = 0;
    v36 = v108[0];
    v108[0] = v34;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, this);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (v6 == 2)
      goto LABEL_84;
    WTF::AtomStringImpl::addLiteral();
    v37 = v121;
    v38 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, this);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    {
      *(_DWORD *)(a3 + 72) = 1;
LABEL_141:
      v35 = v102;
      goto LABEL_142;
    }
    if (v38 == 10)
    {
LABEL_84:
      v39 = 0;
      v100 = 0;
      v40 = 0;
    }
    else
    {
      WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MessagePort>>>::convert(a2, v38, (uint64_t)&v98);
      v41 = v100;
      if (v100)
      {
        *(_DWORD *)(a3 + 72) = 1;
LABEL_139:
        if (v41 != -1)
          ((void (*)(WTF::StringImpl **, WTF **))off_1E3274EB8[v41])(&v121, &v98);
        goto LABEL_141;
      }
      v39 = v98;
      v40 = v99;
    }
    v98 = 0;
    v99 = 0;
    v42 = (uint64_t *)v112;
    if (HIDWORD(v113))
    {
      v96 = v40;
      v43 = 8 * HIDWORD(v113);
      do
      {
        v42 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v42, this)+ 1;
        v43 -= 8;
      }
      while (v43);
      v42 = (uint64_t *)v112;
      v40 = v96;
    }
    if (v42)
    {
      v112 = 0;
      LODWORD(v113) = 0;
      v97 = v40;
      WTF::fastFree((WTF *)v42, this);
      v40 = v97;
    }
    v112 = v39;
    v113 = v40;
    if (v6 == 2)
      goto LABEL_99;
    WTF::AtomStringImpl::addLiteral();
    v44 = v121;
    v46 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v45);
      else
        *(_DWORD *)v44 -= 2;
    }
    if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    {
      *(_DWORD *)(a3 + 72) = 1;
LABEL_138:
      v41 = v100;
      goto LABEL_139;
    }
    if ((v46 | 8) == 0xA)
    {
LABEL_99:
      v47 = 0;
      v122[0] = 0;
      v124 = 0;
      v125 = 0;
      LOBYTE(v126) = 0;
      LOBYTE(v128) = 0;
      goto LABEL_100;
    }
    v115 = *((_QWORD *)a2 + 7);
    LOBYTE(v117) = 0;
    v119 = 0;
    if ((v46 & 0xFFFE000000000002) == 0)
    {
      v49 = *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C);
      v50 = *(_DWORD *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C) != 0;
      v51 = (char **)(16 * v49);
      if ((_DWORD)v49)
        v52 = v51 == &WebCore::JSServiceWorkerClient::s_info;
      else
        v52 = 1;
      v53 = *(_DWORD *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C) != 0;
      if (!v52)
      {
        v54 = 16 * v49;
        do
        {
          v54 = *(_QWORD *)(v54 + 16);
          v53 = v54 != 0;
        }
        while ((char **)v54 != &WebCore::JSServiceWorkerClient::s_info && v54 != 0);
      }
      if (v53)
      {
        v56 = *(_QWORD *)(v46 + 24);
        if (v56)
        {
          v57 = 0;
          ++*(_DWORD *)(v56 + 16);
          v117 = (_BYTE *)v56;
          v118 = 0;
LABEL_169:
          v119 = 1;
          LOBYTE(v127) = 0;
          v128 = -1;
LABEL_170:
          ((void (*)(char *, int *, _BYTE **))off_1E3274E78[v57])(&v120, &v127, &v117);
          v128 = v57;
          v129 = 0;
          if (!v119
            || v118 == -1
            || (((void (*)(char *, _BYTE **))off_1E3274E60[v118])(&v120, &v117), (v68 = v129) == 0))
          {
LABEL_209:
            LOBYTE(v115) = 0;
            v116 = -1;
            v76 = v128;
            if (v128 == -1)
            {
              LOBYTE(v117) = 0;
              v119 = 1;
              v122[0] = 0;
              v123 = -1;
              v124 = 1;
              v125 = 0;
            }
            else
            {
              v77 = off_1E3274E78[v128];
              ((void (*)(_BYTE **, uint64_t *, int *))v77)(&v117, &v115, &v127);
              v116 = v76;
              LOBYTE(v117) = 0;
              v118 = -1;
              ((void (*)(char *, _BYTE **, uint64_t *))v77)(&v120, &v117, &v115);
              v118 = v76;
              v119 = 1;
              v122[0] = 0;
              v124 = 0;
              v123 = -1;
              ((void (*)(char *, _BYTE *, _BYTE **))v77)(&v120, v122, &v117);
              v123 = v76;
              v124 = 1;
              v125 = 0;
              if (!v119)
              {
LABEL_215:
                if (v116 != -1)
                  ((void (*)(char *, uint64_t *))off_1E3274E60[v116])(&v120, &v115);
                v68 = v129;
                goto LABEL_218;
              }
              if (v118 != -1)
                ((void (*)(char *, _BYTE **))off_1E3274E60[v118])(&v120, &v117);
            }
            v118 = -1;
            goto LABEL_215;
          }
LABEL_207:
          v125 = 1;
LABEL_218:
          if (v68 != -1)
            ((void (*)(_BYTE **, int *))off_1E3275C48[v68])(&v117, &v127);
          v61 = v125;
          if (v125)
          {
            *(_DWORD *)(a3 + 72) = 1;
LABEL_136:
            if (v61 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3274EA8[v61])(&v126, v122);
            goto LABEL_138;
          }
          v47 = v124;
          LOBYTE(v126) = 0;
          LOBYTE(v128) = 0;
          if (v124)
          {
            v127 = -1;
            v78 = v123;
            if (v123 != -1)
            {
              ((void (*)(_BYTE **, WTF::StringImpl **, _BYTE *))off_1E3274E78[v123])(&v117, &v126, v122);
              v127 = v78;
            }
            v47 = 1;
            LOBYTE(v128) = 1;
          }
LABEL_100:
          if (v111 != v47)
          {
            if (v111)
            {
              if (v110 != -1)
                ((void (*)(_BYTE **, _BYTE *))off_1E3274E60[v110])(&v117, v109);
              v110 = -1;
              v111 = 0;
            }
            else
            {
              v109[0] = 0;
              v110 = -1;
              v48 = v127;
              if (v127 != -1)
              {
                ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))off_1E3274E78[v127])(&v117, v109, &v126);
                v110 = v48;
              }
              v111 = 1;
            }
            goto LABEL_128;
          }
          if (!v111)
          {
LABEL_131:
            *(_WORD *)a3 = v105;
            *(_BYTE *)(a3 + 2) = v106;
            *(_QWORD *)(a3 + 8) = v107;
            v58 = *(_OWORD *)v108;
            v108[0] = 0;
            v108[1] = 0;
            *(_OWORD *)(a3 + 16) = v58;
            *(_BYTE *)(a3 + 32) = 0;
            this = (JSC::JSCell *)(a3 + 32);
            *(_BYTE *)(a3 + 48) = 0;
            if (v111)
            {
              *(_DWORD *)(a3 + 40) = -1;
              v59 = v110;
              if (v110 != -1)
              {
                ((void (*)(WTF::StringImpl **, JSC::JSCell *, _BYTE *))off_1E3274E78[v110])(&v126, this, v109);
                *(_DWORD *)(a3 + 40) = v59;
              }
              *(_BYTE *)(a3 + 48) = 1;
            }
            *(_QWORD *)(a3 + 56) = v112;
            v60 = v113;
            v112 = 0;
            v113 = 0;
            *(_QWORD *)(a3 + 64) = v60;
            *(_DWORD *)(a3 + 72) = 0;
            v61 = v125;
            goto LABEL_136;
          }
          if (v110 == -1)
          {
            if (v127 == -1)
              goto LABEL_128;
          }
          else if (v127 == -1)
          {
            ((void (*)(_BYTE **, _BYTE *))off_1E3274E60[v110])(&v117, v109);
            v110 = -1;
LABEL_128:
            if ((_BYTE)v128 && v127 != -1)
              ((void (*)(_BYTE **, WTF::StringImpl **))off_1E3274E60[v127])(&v117, &v126);
            goto LABEL_131;
          }
          v117 = v109;
          ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))off_1E3274E90[v127])(&v117, v109, &v126);
          goto LABEL_128;
        }
      }
      if ((_DWORD)v49 && v51 != &WebCore::JSServiceWorker::s_info)
      {
        do
        {
          v51 = (char **)v51[2];
          v50 = v51 != 0;
        }
        while (v51 != &WebCore::JSServiceWorker::s_info && v51 != 0);
      }
      if (v50)
      {
        v67 = *(_QWORD *)(v46 + 24);
        if (v67)
        {
          ++*(_DWORD *)(v67 + 24);
          v117 = (_BYTE *)v67;
          v57 = 1;
          v118 = 1;
          goto LABEL_169;
        }
      }
    }
    v69 = JSC::jsDynamicCast<WebCore::JSMessagePort *>(v46);
    if (!v69)
    {
LABEL_206:
      JSC::throwTypeError();
      v68 = 1;
      v129 = 1;
      goto LABEL_207;
    }
    v70 = *(_QWORD *)(v69 + 24);
    v71 = *(_QWORD *)(v70 + 24);
    if (__ldaxr((unsigned __int8 *)v71))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v71))
    {
      goto LABEL_193;
    }
    MEMORY[0x19AEA534C](v71);
LABEL_193:
    v73 = v70 - 24;
    ++*(_QWORD *)(v71 + 8);
    v74 = __ldxr((unsigned __int8 *)v71);
    if (v74 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v71))
      {
LABEL_198:
        v126 = (WTF::StringImpl *)v73;
        v75 = 2;
        v127 = 2;
        if (v119)
        {
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<WebCore::ServiceWorkerClient,WTF::RawPtrTraits<WebCore::ServiceWorkerClient>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorkerClient>>,WTF::RefPtr<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::__assign_alt[abi:sn180100]<2ul,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>((uint64_t)&v117, (uint64_t *)&v117, (uint64_t *)&v126);
          v75 = v127;
          if (v127 == -1)
          {
LABEL_203:
            if (v119)
            {
              v57 = v118;
              LOBYTE(v127) = 0;
              v128 = -1;
              if (v118 == -1)
              {
                v129 = 0;
                goto LABEL_209;
              }
              goto LABEL_170;
            }
            goto LABEL_206;
          }
        }
        else
        {
          v126 = 0;
          v117 = (_BYTE *)v73;
          v118 = 2;
          v119 = 1;
        }
        ((void (*)(char *, WTF::StringImpl **))off_1E3274E60[v75])(&v120, &v126);
        goto LABEL_203;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v71);
    goto LABEL_198;
  }
  WebCore::valueToUSVString(a2, v33, (uint64_t)&v101);
  v35 = v102;
  if (!v102)
  {
    v34 = v101;
    goto LABEL_75;
  }
  *(_DWORD *)(a3 + 72) = 1;
LABEL_142:
  if (v35 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v35])(&v121, &v101);
  v62 = v104;
  if (v104 != -1)
    goto LABEL_145;
LABEL_146:
  v63 = (uint64_t *)v112;
  if (HIDWORD(v113))
  {
    v80 = 8 * HIDWORD(v113);
    do
    {
      v63 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v63, this)+ 1;
      v80 -= 8;
    }
    while (v80);
    v63 = (uint64_t *)v112;
    if (!v112)
      goto LABEL_148;
    goto LABEL_261;
  }
  if (v112)
  {
LABEL_261:
    v112 = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((WTF *)v63, this);
  }
LABEL_148:
  if (v111)
  {
    if (v110 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3274E60[v110])(&v121, v109);
    v110 = -1;
  }
  v64 = v108[1];
  v108[1] = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, this);
    else
      *(_DWORD *)v64 -= 2;
  }
  result = v108[0];
  v108[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, this);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSExtendableMessageEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSExtendableMessageEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSExtendableMessageEvent::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSExtendableMessageEvent::visitChildren(WebCore::JSExtendableMessageEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  char v13;

  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v12 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v11;
    JSC::JSObject::visitChildren();
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 112);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    v8 = *(uint64_t **)(*((_QWORD *)this + 3) + 184);
    if (!v8 || (v8[1] & 3) != 0)
      v9 = 0;
    else
      v9 = *v8;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
    *(_QWORD *)(v11[0] + 88) = v12;
  }
  return result;
}

unint64_t WebCore::JSExtendableMessageEvent::createPrototype(WebCore::JSExtendableMessageEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  JSC::Structure *v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  v16 = WebCore::JSExtendableMessageEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  return WebCore::JSExtendableMessageEventPrototype::create(this, a2, v16, v17);
}

uint64_t WebCore::JSExtendableMessageEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSExtendableMessageEventPrototype::create(WebCore::JSExtendableMessageEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSExtendableMessageEvent::s_info, &WebCore::JSExtendableMessageEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableMessageEvent>,(WebCore::DOMConstructorID)900>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7200);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSExtendableMessageEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSExtendableMessageEvent::s_info
         + ~((_QWORD)&WebCore::JSExtendableMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableMessageEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSExtendableMessageEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSExtendableMessageEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSExtendableMessageEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSExtendableMessageEvent::createPrototype((WebCore::JSExtendableMessageEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSExtendableMessageEvent::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableMessageEvent::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7200) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsExtendableMessageEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSExtendableMessageEventPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableMessageEvent>,(WebCore::DOMConstructorID)900>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsExtendableMessageEvent_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE *v4;

  v2 = *(_QWORD *)(a2 + 24);
  result = *(_QWORD *)(v2 + 104);
  if (!result)
  {
    v4 = *(_BYTE **)(v2 + 112);
    if (v4 && *(_QWORD *)v4)
    {
      if ((v4[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v4;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::jsExtendableMessageEvent_origin(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsExtendableMessageEvent_lastEventId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsExtendableMessageEvent_source(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 152))
    return 2;
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v11) = 0;
  v12 = -1;
  v4 = *(unsigned int *)(v2 + 144);
  if ((_DWORD)v4 == -1)
    goto LABEL_21;
  ((void (*)(char *, uint64_t *, uint64_t))off_1E3275C58[v4])(&v13, &v11, v2 + 136);
  v12 = v4;
  switch((_DWORD)v4)
  {
    case 2:
      if (!v11)
      {
        v7 = 2;
        v8 = 2;
LABEL_19:
        ((void (*)(char *, uint64_t *))off_1E3274E60[v8])(&v13, &v11);
        return v7;
      }
      v6 = WebCore::wrap<WebCore::MessagePort>(a1, v3, v11);
      goto LABEL_13;
    case 1:
      if (!v11)
      {
        v8 = 1;
LABEL_18:
        v7 = 2;
        goto LABEL_19;
      }
      v6 = WebCore::wrap<WebCore::ServiceWorker>(a1, v3, v11);
LABEL_13:
      v7 = v6;
      v8 = v12;
      if (v12 == -1)
        return v7;
      goto LABEL_19;
    case 0:
      if (v11)
      {
        v6 = WebCore::wrap<WebCore::ServiceWorkerClient>(a1, v3, v11);
        goto LABEL_13;
      }
      v8 = 0;
      goto LABEL_18;
  }
LABEL_21:
  v10 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsExtendableMessageEvent_ports(v10);
}

uint64_t WebCore::jsExtendableMessageEvent_ports(JSC::JSGlobalObject *a1, WebCore::JSExtendableMessageEvent *a2)
{
  return WebCore::JSExtendableMessageEvent::ports(a2, a1);
}

uint64_t WebCore::JSExtendableMessageEvent::subspaceForImpl(WebCore::JSExtendableMessageEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7280);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 7280);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 7280);
    *(_QWORD *)(v8 + 7280) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7280);
  *(_QWORD *)(v3 + 7280) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSFaceDetector>::construct(JSC::VM **a1, uint64_t a2)
{
  JSC *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  JSC::JSCell *v8;
  WTF *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  JSC *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t Object;
  JSC::Structure *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  _BOOL4 v41;
  JSC::VM *v42;
  double v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  JSC::VM *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  int v56;
  unint64_t SlowCase;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *Allocator;
  JSC::JSCell *v62;
  JSC::JSGlobalObject *v63;
  JSC::JSObject *v64;
  JSC::JSGlobalObject *v65;
  JSC::VM *v66;
  JSC::Structure *v67;
  uint64_t FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSObject *v77;
  unint64_t v78;
  WebCore::JSDOMGlobalObject *v79;
  JSC::Structure *v80;
  JSC::JSCell *v81;
  uint64_t v82;
  unint64_t SubclassStructure;
  double v85;
  double v86;
  double v87;
  long double v88;
  double v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  double v92;
  char hasExceptionsAfterHandlingTraps;
  BOOL v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  WebCore::JSFaceDetector *v99;
  JSC::JSCell *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  int v103;
  JSC::VM *v104;
  WTF *v105;
  WTF::StringImpl *v106;
  _QWORD *v107;

  v3 = (JSC *)a1;
  v4 = a1[7];
  v104 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(v3, &v104, (uint64_t)"FaceDetector", 13);
  v7 = (_QWORD *)v6;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v10 = 0xFFFF;
    goto LABEL_6;
  }
  v8 = *(JSC::JSCell **)(a2 + 48);
  v9 = (WTF *)*((_QWORD *)v3 + 7);
  v105 = v9;
  if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0xFFFF;
    goto LABEL_6;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v38 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v40 = JSC::JSObject::get(v38, v3, (unint64_t)v101);
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v39);
    else
      *(_DWORD *)v101 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v40 == 10)
  {
    v41 = 1;
    goto LABEL_32;
  }
  v42 = (JSC::VM *)*((_QWORD *)v3 + 7);
  if (v40 >= 0xFFFE000000000000)
  {
    v94 = (_DWORD)v40 == 0;
LABEL_147:
    v41 = !v94;
    goto LABEL_31;
  }
  *(_QWORD *)&v43 = v40 - 0x2000000000000;
  if (v40 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v40 & 0xFFFE000000000002) != 0)
    {
      v41 = v40 == 7;
      goto LABEL_31;
    }
    v95 = *(unsigned __int8 *)(v40 + 5);
    if (v95 == 3)
    {
      v98 = *(_DWORD *)(v40 + 8);
LABEL_160:
      v41 = v98 != 0;
      goto LABEL_31;
    }
    if (v95 == 2)
    {
      v96 = *(_QWORD *)(v40 + 8);
      if ((v96 & 1) != 0)
        v97 = (int *)(v40 + 16);
      else
        v97 = (int *)(v96 + 4);
      v98 = *v97;
      goto LABEL_160;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) == 0)
    {
      v41 = 1;
      goto LABEL_31;
    }
    v94 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == (_QWORD)v3;
    goto LABEL_147;
  }
  v41 = v43 > 0.0 || v43 < 0.0;
LABEL_31:
  if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
    return 0;
LABEL_32:
  WTF::AtomStringImpl::addLiteral();
  v45 = JSC::JSObject::get(v38, v3, (unint64_t)v101);
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v44);
    else
      *(_DWORD *)v101 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v45 != 10)
  {
    v101 = (WTF::StringImpl *)v45;
    v46 = (JSC::VM *)*((_QWORD *)v3 + 7);
    if (v45 >= 0xFFFE000000000000 && (v45 & 0x80000000) == 0)
      goto LABEL_106;
    if (v45 >= 0xFFFE000000000000)
    {
      v85 = (double)(int)v45;
    }
    else if (v45 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v101, v3);
    }
    else
    {
      *(_QWORD *)&v85 = v45 - 0x2000000000000;
    }
    if (!*((_DWORD *)v46 + 20)
      || (v92 = v85,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v46),
          v85 = v92,
          (hasExceptionsAfterHandlingTraps & 1) == 0))
    {
      LOWORD(v45) = 0;
      if (fabs(v85) != INFINITY && v85 != 0.0)
      {
        v86 = -floor(-v85);
        v87 = floor(v85);
        if (v85 >= 0.0)
          v88 = v87;
        else
          v88 = v86;
        v89 = fmod(v88, 65536.0);
        if (v89 < 0.0)
          v89 = v89 + 65536.0;
        LODWORD(v45) = (int)v89;
      }
LABEL_106:
      v10 = (unsigned __int16)v45;
      if (!v41)
      {
        v11 = 0;
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    return 0;
  }
  v10 = 0xFFFF;
  if (!v41)
  {
    v11 = 0;
    goto LABEL_7;
  }
LABEL_6:
  v11 = 0x10000;
LABEL_7:
  LODWORD(v105) = v11 | v10;
  WebCore::FaceDetector::create(v7, (unsigned __int16 *)&v105, (uint64_t)&v101);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_128;
  if (!v103)
  {
    v13 = *(_QWORD *)(v5 + 40);
    v14 = v101;
    v101 = 0;
    v15 = *(_QWORD *)(v13 + 3296);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = ((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = *(char ***)(v15 + 16 * v20);
      if (v21 == &WebCore::JSFaceDetector::s_info)
      {
LABEL_14:
        v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
        if (v23)
          goto LABEL_16;
      }
      else
      {
        v22 = 1;
        while (v21)
        {
          v20 = ((_DWORD)v20 + v22) & v16;
          v21 = *(char ***)(v15 + 16 * v20);
          ++v22;
          if (v21 == &WebCore::JSFaceDetector::s_info)
            goto LABEL_14;
        }
      }
    }
    v24 = *(uint64_t **)(v13 + 56);
    Structure = WebCore::JSFaceDetectorPrototype::createStructure(v24, v13, *(JSC::JSCell **)(v13 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSFaceDetectorPrototype::create((WebCore::JSFaceDetectorPrototype *)v24, Structure, v26, v27);
    v29 = WebCore::JSFaceDetector::createStructure(v24, v13, v28);
    v23 = WebCore::cacheDOMStructure((JSCell *)v13, v29, (uint64_t)&WebCore::JSFaceDetector::s_info);
LABEL_16:
    v30 = v3;
    v31 = *(_QWORD *)(v13 + 56);
    v32 = *(_QWORD *)(v31 + 41456);
    v33 = *(_QWORD *)(v32 + 23536);
    v34 = *(_QWORD **)(v33 + 48);
    if (v34)
      goto LABEL_59;
    v35 = *(_QWORD *)(v32 + 22648);
    if (__ldaxr((unsigned __int8 *)v35))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v35))
    {
      goto LABEL_44;
    }
    MEMORY[0x19AEA534C](v35);
LABEL_44:
    v47 = *(_QWORD *)(v35 + 2824);
    if (!*(_QWORD *)(v47 + 48))
    {
      v48 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v105, "IsoSpace T");
      v107 = 0;
      MEMORY[0x19AEA3204](v48, &v105, v31 + 192, v31 + 1872, 32, 8, &v107);
      v50 = (uint64_t)v107;
      v107 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v51 = v105;
      v105 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
          WTF::fastFree(v51, v49);
        else
          --*(_DWORD *)v51;
      }
      v52 = *(_QWORD *)(v47 + 48);
      *(_QWORD *)(v47 + 48) = v48;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v53 = *(_QWORD *)(v33 + 48);
    *(_QWORD *)(v33 + 48) = v34;
    if (v53)
    {
      v54 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v54, v55);
    }
    v56 = __ldxr((unsigned __int8 *)v35);
    if (v56 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v35))
      {
LABEL_59:
        SlowCase = v34[3];
        if (SlowCase >= v34[4])
        {
          SlowCase = v34[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_61;
          }
          v91 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
          v34[4] = SlowCase + HIDWORD(v91);
          v34[5] = SlowCase + (int)v91;
        }
        v34[3] = SlowCase + 32;
LABEL_61:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
        *(_QWORD *)(SlowCase + 24) = v14;
        v3 = v30;
        if (*(_BYTE *)(v31 + 755))
          __dmb(0xAu);
        v58 = *(_QWORD *)(v13 + 3320);
        if ((byte_1EE335410 & 1) == 0)
        {
          qword_1EE335408 = (uint64_t)&off_1E3271050;
          byte_1EE335410 = 1;
        }
        v105 = v14;
        if ((SlowCase & 8) != 0)
          v59 = (SlowCase - 112) | 1;
        else
          v59 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v59 & 1) != 0)
          v60 = v59 + 47;
        else
          v60 = *(_QWORD *)v59 + 32;
        Allocator = *(_QWORD **)(v60 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v60 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE335408;
        Allocator[2] = v58;
        v107 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)&v105, (uint64_t *)&v107);
        if (v107)
          v107[1] = 3;
        v4 = v104;
        goto LABEL_75;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
    goto LABEL_59;
  }
  if (v103 == 1)
  {
    LOBYTE(v105) = (_BYTE)v101;
    v90 = v102;
    v102 = 0;
    v106 = v90;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(v3, &v104, (unsigned __int8 *)&v105);
      v90 = v106;
    }
    v106 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v12);
      else
        *(_DWORD *)v90 -= 2;
    }
    SlowCase = 0;
LABEL_75:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_128:
      SlowCase = 0;
LABEL_90:
      if (v103 != -1)
        ((void (*)(WTF **, WTF::StringImpl **))off_1E3274FB8[v103])(&v105, &v101);
      return (_QWORD *)SlowCase;
    }
    v62 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v62 & 0xFFFE000000000002) != 0
      || (v63 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v62)) == 0
      || (v65 = v63, v63 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v66 = (JSC::VM *)*((_QWORD *)v3 + 7),
          FunctionRealm = JSC::getFunctionRealm(v3, v63, v64),
          *((_DWORD *)v66 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
    {
LABEL_89:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_90;
      goto LABEL_128;
    }
    v69 = *(_QWORD *)(FunctionRealm + 3296);
    if (v69)
    {
      v70 = *(_DWORD *)(v69 - 8);
      v71 = ((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) >> 22);
      v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
      v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
      v74 = v70 & ((v73 >> 31) ^ v73);
      v75 = *(char ***)(v69 + 16 * v74);
      if (v75 == &WebCore::JSFaceDetector::s_info)
      {
LABEL_85:
        v77 = *(JSC::JSObject **)(v69 + 16 * v74 + 8);
        if (v77)
        {
LABEL_87:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(v3, v65, v77, v67);
          if (!*((_DWORD *)v66 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v66, SubclassStructure);
          goto LABEL_89;
        }
      }
      else
      {
        v76 = 1;
        while (v75)
        {
          v74 = ((_DWORD)v74 + v76) & v70;
          v75 = *(char ***)(v69 + 16 * v74);
          ++v76;
          if (v75 == &WebCore::JSFaceDetector::s_info)
            goto LABEL_85;
        }
      }
    }
    v78 = WebCore::JSFaceDetectorPrototype::createStructure((uint64_t *)v66, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v78 + 16) |= 0x80000u;
    v81 = (JSC::JSCell *)WebCore::JSFaceDetectorPrototype::create(v66, v78, v79, v80);
    v82 = WebCore::JSFaceDetector::createStructure((uint64_t *)v66, FunctionRealm, v81);
    v77 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v82, (uint64_t)&WebCore::JSFaceDetector::s_info);
    goto LABEL_87;
  }
  v99 = (WebCore::JSFaceDetector *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::JSFaceDetector::destroy(v99, v100);
}

uint64_t WebCore::JSFaceDetector::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSFaceDetector::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFaceDetectorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFaceDetectorPrototype::create(WebCore::JSFaceDetectorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSFaceDetector::s_info, (uint64_t)&WebCore::JSFaceDetectorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFaceDetector>,(WebCore::DOMConstructorID)6>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 48);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSFaceDetector>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSFaceDetector::s_info + ~((_QWORD)&WebCore::JSFaceDetector::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFaceDetector::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFaceDetector::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFaceDetectorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFaceDetectorPrototype::create((WebCore::JSFaceDetectorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFaceDetector::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFaceDetector::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 48) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFaceDetectorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFaceDetectorPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFaceDetector>,(WebCore::DOMConstructorID)6>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFaceDetectorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSFaceDetectorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::convert<WebCore::IDLBoolean>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  double v6;
  char v7;
  int v8;
  uint64_t v9;

  result = *(_QWORD *)(a1 + 56);
  if (a2 >= 0xFFFE000000000000)
  {
    v7 = (_DWORD)a2 != 0;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v7 = v6 > 0.0 || v6 < 0.0;
    }
    else if ((a2 & 0xFFFE000000000002) != 0)
    {
      v7 = a2 == 7;
    }
    else
    {
      v9 = result;
      v7 = JSC::JSCell::toBoolean(a2, a1);
      result = v9;
    }
  }
  if (*(_DWORD *)(result + 80)
    && (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) != 0))
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a3 = v7;
  }
  *(_DWORD *)(a3 + 4) = v8;
  return result;
}

uint64_t WebCore::JSFetchEvent::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSFetchEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFetchEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  uint64_t v5;
  JSC::VM **v6;
  int v7;
  JSC::JSCell *v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t Object;
  WTF::StringImpl *v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  BOOL v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  BOOL v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  JSC::VM *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::JSDOMGlobalObject *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSCell *v54;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *v56;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t SubclassStructure;
  JSC::VM **v74;
  JSCell *v75;
  JSValue v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  JSC::VM *v80;
  WTF::StringImpl *v81;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v83;
  _DWORD *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::VM **v107;
  uint64_t v108;
  WTF::StringImpl *v109[2];
  WTF::StringImpl *v110[2];
  WTF::StringImpl *v111;
  __int128 v112;
  __int128 v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  JSC::VM **Event;
  int v118;
  JSC::VM *v119;
  _QWORD v120[2];

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v77.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v77);
  }
  v5 = a2;
  v6 = *(JSC::VM ***)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v115);
  v7 = v116;
  if (v116)
  {
    v75 = 0;
    goto LABEL_131;
  }
  v8 = *(JSC::JSCell **)(v5 + 56);
  v119 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v9 = (_DWORD *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7);
  v106 = v5;
  v107 = v6;
  if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v2 = 0;
    v10 = 0;
    v105 = 0;
    goto LABEL_45;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
  {
    JSC::throwTypeError();
    v114 = 1;
    goto LABEL_95;
  }
  v2 = Object;
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v12);
    else
      *(_DWORD *)v111 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
  {
LABEL_193:
    v114 = 1;
    v6 = v107;
    goto LABEL_95;
  }
  if (v13 == 10)
  {
    v10 = 0;
    goto LABEL_18;
  }
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v88 = (_DWORD)v13 == 0;
    goto LABEL_264;
  }
  *(_QWORD *)&v15 = v13 - 0x2000000000000;
  if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      v10 = v13 == 7;
      goto LABEL_17;
    }
    v89 = *(unsigned __int8 *)(v13 + 5);
    if (v89 == 3)
    {
      v92 = *(_DWORD *)(v13 + 8);
    }
    else
    {
      if (v89 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v10 = 1;
          goto LABEL_17;
        }
        v88 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_264;
      }
      v90 = *(_QWORD *)(v13 + 8);
      if ((v90 & 1) != 0)
        v91 = (int *)(v13 + 16);
      else
        v91 = (int *)(v90 + 4);
      v92 = *v91;
    }
    v88 = v92 == 0;
LABEL_264:
    v10 = !v88;
    goto LABEL_17;
  }
  v10 = v15 > 0.0 || v15 < 0.0;
LABEL_17:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    goto LABEL_193;
LABEL_18:
  WTF::AtomStringImpl::addLiteral();
  v17 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v16);
    else
      *(_DWORD *)v111 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_193;
  if (v17 == 10)
  {
    BYTE4(v105) = 0;
    goto LABEL_29;
  }
  v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v17 >= 0xFFFE000000000000)
  {
    v93 = (_DWORD)v17 == 0;
    goto LABEL_268;
  }
  *(_QWORD *)&v19 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v19 <= 0.0)
    {
      v20 = v19 < 0.0;
      goto LABEL_28;
    }
    goto LABEL_258;
  }
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    v20 = v17 == 7;
    goto LABEL_28;
  }
  v94 = *(unsigned __int8 *)(v17 + 5);
  if (v94 == 3)
  {
    v97 = *(_DWORD *)(v17 + 8);
LABEL_256:
    v93 = v97 == 0;
    goto LABEL_268;
  }
  if (v94 == 2)
  {
    v95 = *(_QWORD *)(v17 + 8);
    if ((v95 & 1) != 0)
      v96 = (int *)(v17 + 16);
    else
      v96 = (int *)(v95 + 4);
    v97 = *v96;
    goto LABEL_256;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_258:
    v20 = 1;
    goto LABEL_28;
  }
  v93 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_268:
  v20 = !v93;
LABEL_28:
  BYTE4(v105) = v20;
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    goto LABEL_193;
LABEL_29:
  WTF::AtomStringImpl::addLiteral();
  v22 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v21);
    else
      *(_DWORD *)v111 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_193;
  if (v22 == 10)
  {
    LOBYTE(v105) = 0;
    goto LABEL_40;
  }
  v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v22 >= 0xFFFE000000000000)
  {
    v98 = (_DWORD)v22 == 0;
    goto LABEL_272;
  }
  *(_QWORD *)&v24 = v22 - 0x2000000000000;
  if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v24 <= 0.0)
    {
      v25 = v24 < 0.0;
      goto LABEL_39;
    }
    goto LABEL_262;
  }
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v25 = v22 == 7;
    goto LABEL_39;
  }
  v99 = *(unsigned __int8 *)(v22 + 5);
  if (v99 == 3)
  {
    v102 = *(_DWORD *)(v22 + 8);
LABEL_260:
    v98 = v102 == 0;
    goto LABEL_272;
  }
  if (v99 == 2)
  {
    v100 = *(_QWORD *)(v22 + 8);
    if ((v100 & 1) != 0)
      v101 = (int *)(v22 + 16);
    else
      v101 = (int *)(v100 + 4);
    v102 = *v101;
    goto LABEL_260;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_262:
    v25 = 1;
    goto LABEL_39;
  }
  v98 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_272:
  v25 = !v98;
LABEL_39:
  LOBYTE(v105) = v25;
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    goto LABEL_193;
LABEL_40:
  WTF::AtomStringImpl::addLiteral();
  v27 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v26);
    else
      *(_DWORD *)v111 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_193;
  if (v27 == 10)
  {
LABEL_45:
    v6 = (JSC::VM **)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v6 += 2;
    v5 = 0;
    LODWORD(v109[0]) = 0;
    v108 = 0;
    if (v9 == (_DWORD *)2)
      goto LABEL_72;
    goto LABEL_58;
  }
  v111 = (WTF::StringImpl *)v27;
  v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v111, a1);
    goto LABEL_55;
  }
  v29 = *(_QWORD *)(v27 + 8);
  if ((v29 & 1) != 0)
  {
    v29 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, a1);
    if (!v29)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (v29)
LABEL_53:
    *(_DWORD *)v29 += 2;
LABEL_54:
  Event = (JSC::VM **)v29;
LABEL_55:
  if (*((_DWORD *)v28 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    v6 = Event;
    if (hasExceptionsAfterHandlingTraps)
    {
      LODWORD(v109[0]) = 1;
      Event = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v6, v34);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 = 0;
      v6 = 0;
      v9 = 0;
      v114 = 1;
      goto LABEL_84;
    }
  }
  else
  {
    v6 = Event;
  }
  LODWORD(v109[0]) = 0;
  v108 = 0;
LABEL_58:
  v104 = (unint64_t)v8 & 0xFFFFFFFFFFFFFFF7;
  WTF::AtomStringImpl::addLiteral();
  v30 = v111;
  v32 = (JSC::JSGlobalObject *)JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
  {
    v5 = 0;
    goto LABEL_83;
  }
  v103 = v10;
  if (v32 == (JSC::JSGlobalObject *)10)
  {
    v33 = v4;
    v5 = 0;
  }
  else
  {
    WebCore::Converter<WebCore::IDLPromise<WebCore::IDLUndefined>>::convert<WebCore::DefaultExceptionThrower>(a1, v32, (JSValue)&v111, (uint64_t)&Event);
    if (v118)
    {
      v114 = 1;
      if (v118 != -1)
        ((void (*)(_QWORD *, JSC::VM ***))off_1E3274E50[v118])(v120, &Event);
      v5 = 0;
      v9 = 0;
      goto LABEL_84;
    }
    v33 = v4;
    v5 = (uint64_t)Event;
  }
  WTF::AtomStringImpl::addLiteral();
  v35 = v111;
  v37 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
  {
    v9 = 0;
    v114 = 1;
    v4 = v33;
    goto LABEL_84;
  }
  if (v37 != 10)
  {
    v111 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
    v4 = v33;
    if ((v37 & 0xFFFE000000000002) == 0)
    {
      v38 = *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C);
      v39 = *(_DWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v38)
      {
        v40 = 16 * v38;
        if ((char **)v40 != &WebCore::JSFetchRequest::s_info)
        {
          do
          {
            v40 = *(_QWORD *)(v40 + 16);
            v39 = v40 != 0;
          }
          while ((char **)v40 != &WebCore::JSFetchRequest::s_info && v40 != 0);
        }
      }
      if (v39)
      {
        v9 = *(_DWORD **)(v37 + 24);
        if (v9)
        {
          ++v9[6];
          if (v104 == 2)
            goto LABEL_166;
          WTF::AtomStringImpl::addLiteral();
          v78 = v111;
          v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v111);
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v79);
            else
              *(_DWORD *)v78 -= 2;
          }
          v80 = v119;
          if (*((_DWORD *)v119 + 20))
            goto LABEL_216;
          goto LABEL_165;
        }
      }
    }
    JSC::throwTypeError();
    goto LABEL_83;
  }
  v4 = v33;
LABEL_72:
  WebCore::throwRequiredMemberTypeError((int)a1, (int)&v119, "request", 8, "FetchEventInit", 15, "FetchRequest", 13);
LABEL_83:
  v9 = 0;
  v114 = 1;
  while (1)
  {
LABEL_84:
    if (LODWORD(v109[0]) != -1)
      ((void (*)(JSC::VM ***, uint64_t *))off_1E3272138[LODWORD(v109[0])])(&Event, &v108);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 16);
    }
    v5 = v106;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v6, v34);
      else
        *(_DWORD *)v6 -= 2;
    }
    v6 = v107;
    if (v9)
    {
      if (v9[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[6];
    }
LABEL_95:
    v42 = v114;
    if (v114)
      break;
    if (!v116)
    {
      v43 = (unint64_t)v6[5];
      v44 = v115;
      v115 = 0;
      v120[0] = v44;
      LOWORD(v108) = (_WORD)v111;
      BYTE2(v108) = BYTE2(v111);
      *(_OWORD *)v109 = v112;
      v45 = v113;
      v112 = 0u;
      v113 = 0u;
      *(_OWORD *)v110 = v45;
      v46 = bmalloc::api::isoAllocate();
      Event = (JSC::VM **)WebCore::FetchEvent::FetchEvent(v46, v43, v120, (unsigned __int8 *)&v108, 0);
      v49 = v110[1];
      v110[1] = 0;
      if (v49)
      {
        if (*((_DWORD *)v49 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 16))(v49);
        else
          --*((_DWORD *)v49 + 4);
      }
      v50 = v110[0];
      v110[0] = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v47);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v109[1];
      v109[1] = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v47);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = v109[0];
      v109[0] = 0;
      if (v52)
      {
        if (*((_DWORD *)v52 + 6) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 16))(v52);
        else
          --*((_DWORD *)v52 + 6);
      }
      v53 = (WTF::StringImpl *)v120[0];
      v120[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v47);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = (JSCell *)WebCore::toJSNewlyCreated(v6[5], (uint64_t *)&Event, v48);
      v55 = *(JSC::JSCell **)(v5 + 40);
      if (((unint64_t)v55 & 0xFFFE000000000002) != 0
        || (v56 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55)) == 0
        || (v58 = v56, v56 == *(JSC::JSGlobalObject **)(v5 + 24))
        || (v59 = (JSC::VM *)*((_QWORD *)a1 + 7),
            FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v56, v57),
            *((_DWORD *)v59 + 20))
        && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
      {
LABEL_125:
        if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
          v54 = 0;
        v74 = Event;
        Event = 0;
        if (v74)
        {
          if (*((_DWORD *)v74 + 4) == 1)
            (*((void (**)(JSC::VM **))*v74 + 1))(v74);
          else
            --*((_DWORD *)v74 + 4);
        }
        goto LABEL_129;
      }
      v63 = *((_QWORD *)FunctionRealm + 412);
      if (v63)
      {
        v64 = *(_DWORD *)(v63 - 8);
        v65 = ((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) >> 22);
        v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
        v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
        v68 = v64 & ((v67 >> 31) ^ v67);
        v69 = *(char ***)(v63 + 16 * v68);
        if (v69 != &WebCore::JSFetchEvent::s_info)
        {
          v70 = 1;
          while (v69)
          {
            v68 = ((_DWORD)v68 + v70) & v64;
            v69 = *(char ***)(v63 + 16 * v68);
            ++v70;
            if (v69 == &WebCore::JSFetchEvent::s_info)
              goto LABEL_121;
          }
          goto LABEL_122;
        }
LABEL_121:
        v60 = *(WebCore::JSDOMGlobalObject **)(v63 + 16 * v68 + 8);
        if (!v60)
          goto LABEL_122;
      }
      else
      {
LABEL_122:
        Prototype = (JSC::JSCell *)WebCore::JSFetchEvent::createPrototype(v59, FunctionRealm, v60);
        Structure = WebCore::JSFetchEvent::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, Prototype);
        v60 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, Structure, (uint64_t)&WebCore::JSFetchEvent::s_info);
      }
      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v58, v60, v61);
      if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
        JSC::JSObject::setStructure(v54, v59, SubclassStructure);
      goto LABEL_125;
    }
    v80 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_216:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v80))
    {
      v114 = 1;
    }
    else
    {
LABEL_165:
      if (v2 == 10)
      {
LABEL_166:
        v81 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v81 += 2;
        v118 = 0;
        goto LABEL_208;
      }
      v111 = (WTF::StringImpl *)v2;
      v83 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if ((v2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v2 + 5) == 2)
      {
        v84 = *(_DWORD **)(v2 + 8);
        if ((v84 & 1) != 0)
        {
          v84 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
          if (v84)
LABEL_203:
            *v84 += 2;
        }
        else if (v84)
        {
          goto LABEL_203;
        }
        v120[0] = v84;
        goto LABEL_205;
      }
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v111, a1);
LABEL_205:
      if (!*((_DWORD *)v83 + 20))
      {
        v81 = (WTF::StringImpl *)v120[0];
LABEL_207:
        v118 = 0;
LABEL_208:
        v85 = 0;
        Event = 0;
        LOBYTE(v111) = v103;
        BYTE1(v111) = BYTE4(v105);
        BYTE2(v111) = v105;
        *(_QWORD *)&v112 = v9;
        *((_QWORD *)&v112 + 1) = v6;
        *(_QWORD *)&v113 = v81;
        *((_QWORD *)&v113 + 1) = v5;
        v5 = 0;
        v6 = 0;
        v9 = 0;
        goto LABEL_209;
      }
      v87 = JSC::VM::hasExceptionsAfterHandlingTraps(v83);
      v81 = (WTF::StringImpl *)v120[0];
      if (!v87)
        goto LABEL_207;
      v118 = 1;
      v120[0] = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v86);
        else
          *(_DWORD *)v81 -= 2;
      }
      v85 = 1;
LABEL_209:
      v114 = v85;
      ((void (*)(_QWORD *, JSC::VM ***))off_1E3272138[v85])(v120, &Event);
    }
  }
  v54 = 0;
  v75 = 0;
  if (v114 != -1)
  {
LABEL_129:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32750C8[v42])(&v108, &v111);
    v75 = v54;
  }
  v7 = v116;
LABEL_131:
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32712B8[v7])(&v111, &v115);
  return v75;
}

uint64_t WebCore::JSFetchEvent::prototype(WebCore::JSFetchEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFetchEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFetchEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSFetchEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSFetchEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFetchEvent::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSFetchEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFetchEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSFetchEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSFetchEvent::visitChildren(WebCore::JSFetchEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSFetchEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSFetchEvent::JSFetchEvent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSFetchEvent::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 16);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSFetchEvent::createPrototype(WebCore::JSFetchEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  JSC::Structure *v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  v16 = WebCore::JSFetchEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  return WebCore::JSFetchEventPrototype::create(this, a2, v16, v17);
}

uint64_t WebCore::JSFetchEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFetchEventPrototype::create(WebCore::JSFetchEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSFetchEvent::s_info, &WebCore::JSFetchEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 464) & 0x40) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchEvent>,(WebCore::DOMConstructorID)901>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7208);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructor<WebCore::JSFetchEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFetchEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFetchEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSFetchEvent::createPrototype((WebCore::JSFetchEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFetchEvent::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFetchEvent::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7208) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFetchEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFetchEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchEvent>,(WebCore::DOMConstructorID)901>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFetchEvent_request(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::FetchRequest>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_DWORD **)(*(_QWORD *)(a2 + 24) + 104));
}

uint64_t WebCore::jsFetchEvent_preloadResponse(WebCore::JSDOMGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::ScriptExecutionContext *v9;
  unint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::VM *v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::DOMGuardedObject *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int v34;
  unsigned __int8 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v42[8];
  WTF::StringImpl *v43;
  objc_class *v44;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSFetchEvent::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSFetchEvent::s_info && v6 != 0);
    }
    if (v5)
    {
      v9 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
      if (!v9)
        return 10;
      v10 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v11 = WebCore::FetchEvent::preloadResponse(*(WebCore::FetchEvent **)(a2 + 24), v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3275C80;
      v13[1] = v11;
      v14 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v11 + 32);
        v16 = 8 * v14;
        while (1)
        {
          v17 = *(_QWORD *)(*(_QWORD *)v15 + 32);
          if (v17)
          {
            if ((*(_BYTE *)(v17 + 8) & 3) == 0 && *(_QWORD *)v17 == v10)
              break;
          }
          v15 += 8;
          v16 -= 8;
          if (!v16)
            goto LABEL_19;
        }
        v30 = *(_QWORD *)(*(_QWORD *)v15 + 24);
        if (v30 && (v31 = *(_QWORD *)v30) != 0 && (*(_BYTE *)(v30 + 8) & 3) == 0)
        {
          if ((v31 & 0xFFFE000000000002) != 0)
          {
            v32 = 0;
          }
          else if (*(_BYTE *)(v31 + 5) == 68)
          {
            v32 = *(_QWORD *)v30;
          }
          else
          {
            v32 = 0;
          }
        }
        else
        {
          v32 = 10;
        }
        goto LABEL_62;
      }
LABEL_19:
      v18 = *(_DWORD *)(v10 + 1164);
      if (v18)
        v19 = (JSC::VM *)(16 * (v18 & 0xFFFFFFFE));
      else
        v19 = 0;
      v20 = JSC::JSPromise::create(*(JSC::JSPromise **)(v10 + 56), v19, v12);
      v21 = WTF::fastMalloc((WTF *)0x30);
      v22 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v21, v10, v20);
      *(_QWORD *)v22 = &off_1E3226868;
      *((_DWORD *)v22 + 10) = 1;
      *((_BYTE *)v22 + 44) = 0;
      v23 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v23 == *(_DWORD *)(v11 + 40))
      {
        v24 = v23 + (v23 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v23 + 1)
          v26 = v23 + 1;
        else
          v26 = v25;
        v27 = *(void **)(v11 + 32);
        if (v26 < 2)
        {
          v28 = (void *)(v11 + 48);
          *(_QWORD *)(v11 + 32) = v11 + 48;
          *(_DWORD *)(v11 + 40) = 1;
        }
        else
        {
          if (v26 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194ADE510);
          }
          v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
          *(_DWORD *)(v11 + 40) = v26;
          *(_QWORD *)(v11 + 32) = v28;
        }
        memcpy(v28, v27, 8 * v23);
        if ((void *)(v11 + 48) != v27 && v27)
        {
          if (*(void **)(v11 + 32) == v27)
          {
            *(_QWORD *)(v11 + 32) = 0;
            *(_DWORD *)(v11 + 40) = 0;
          }
          WTF::fastFree((WTF *)v27, v33);
        }
        v23 = *(unsigned int *)(v11 + 44);
        v29 = (uint64_t *)(*(_QWORD *)(v11 + 32) + 8 * v23);
      }
      else
      {
        v29 = (uint64_t *)(*(_QWORD *)(v11 + 32) + 8 * v23);
      }
      ++*(_DWORD *)(v21 + 16);
      *v29 = v21;
      *(_DWORD *)(v11 + 44) = v23 + 1;
      if (!*(_BYTE *)(v11 + 24))
        goto LABEL_52;
      v34 = *(_DWORD *)(v11 + 16);
      if (!v34)
      {
        (*(void (**)(_QWORD *, uint64_t))(*v13 + 16))(v13, v21);
        goto LABEL_52;
      }
      if (v34 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_79;
      }
      v35 = *(_BYTE *)v11;
      v36 = *(WTF::StringImpl **)(v11 + 8);
      if (v36)
        *(_DWORD *)v36 += 4;
      v43 = v36;
      v44 = 0;
      v42[0] = v35;
      WebCore::DeferredPromise::reject(v21, v42, 0, &v44);
      v38 = v43;
      v43 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::destroy(v38, v37);
          if (v36)
          {
LABEL_49:
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v37);
            else
              *(_DWORD *)v36 -= 2;
          }
LABEL_52:
          v39 = *(_QWORD *)(v21 + 24);
          if (!v39 || (v40 = *(_QWORD *)v39) == 0 || (*(_BYTE *)(v39 + 8) & 3) != 0)
          {
            v32 = 10;
            goto LABEL_60;
          }
          if ((v40 & 0xFFFE000000000002) == 0)
          {
            if (*(_BYTE *)(v40 + 5) == 68)
              v32 = *(_QWORD *)v39;
            else
              v32 = 0;
            goto LABEL_60;
          }
LABEL_79:
          v32 = 0;
LABEL_60:
          if (*(_DWORD *)(v21 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
          else
            --*(_DWORD *)(v21 + 16);
LABEL_62:
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
          return v32;
        }
        *(_DWORD *)v38 -= 2;
      }
      if (v36)
        goto LABEL_49;
      goto LABEL_52;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFetchEvent::s_info, a3);
}

uint64_t WebCore::jsFetchEvent_clientId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsFetchEvent_resultingClientId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsFetchEvent_handled(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFetchEvent::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSFetchEvent::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSFetchEvent::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFetchEvent::s_info, a3);
  v8 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 144) + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v8 + 5) == 68)
    return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 144) + 24);
  return 0;
}

uint64_t WebCore::JSFetchEvent::subspaceForImpl(WebCore::JSFetchEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7288);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 7288);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 7288);
    *(_QWORD *)(v8 + 7288) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7288);
  *(_QWORD *)(v3 + 7288) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFetchEvent::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSFetchEvent::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSFetchEvent::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::construct(JSC *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t (*v8)();
  int v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  JSCell *v15;
  WTF *v16;
  JSC::JSCell *v17;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v19;
  JSC::JSGlobalObject *v20;
  WebCore::JSFetchHeaders *v21;
  JSC::JSCell **FunctionRealm;
  JSC::JSObject *v23;
  JSC::Structure *v24;
  unint64_t SubclassStructure;
  uint64_t v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v36;
  _BYTE v37[16];
  int v38;
  WTF *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  char v43;
  _BYTE v44[16];
  int v45;
  char v46;
  int v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v36 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 32) == 1 || *(_QWORD *)(a2 + 48) == 10)
  {
    v44[0] = 0;
    v46 = 0;
    v47 = 0;
    LOBYTE(v48) = 0;
    LOBYTE(v51) = 0;
    goto LABEL_22;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::convert((uint64_t)&v48, this, *(JSC::JSGlobalObject **)(a2 + 48));
  v6 = v52;
  if (!v52)
  {
    v37[0] = 0;
    v38 = -1;
    v7 = v51;
    if (v51 == -1)
    {
      LOBYTE(v39) = 0;
      v42 = 1;
      v44[0] = 0;
      v45 = -1;
      v46 = 1;
      v47 = 0;
    }
    else
    {
      v8 = off_1E3275200[v51];
      ((void (*)(WTF **, _BYTE *, WTF::StringImpl **))v8)(&v39, v37, &v49);
      v38 = v7;
      LOBYTE(v39) = 0;
      v41 = -1;
      ((void (*)(char *, WTF **, _BYTE *))v8)(&v43, &v39, v37);
      v41 = v7;
      v42 = 1;
      v44[0] = 0;
      v46 = 0;
      v45 = -1;
      ((void (*)(char *, _BYTE *, WTF **))v8)(&v43, v44, &v39);
      v45 = v7;
      v46 = 1;
      v47 = 0;
      if (!v42)
      {
LABEL_12:
        if (v38 != -1)
          ((void (*)(char *, _BYTE *))off_1E32751F0[v38])(&v43, v37);
        v6 = v52;
        goto LABEL_15;
      }
      if (v41 != -1)
        ((void (*)(char *, WTF **))off_1E32751F0[v41])(&v43, &v39);
    }
    v41 = -1;
    goto LABEL_12;
  }
  v47 = 1;
LABEL_15:
  if (v6 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32758A8[v6])(&v39, &v49);
  v9 = v47;
  if (v47)
  {
    v15 = 0;
    goto LABEL_41;
  }
  LOBYTE(v48) = 0;
  LOBYTE(v51) = 0;
  if (v46)
  {
    v50 = -1;
    v10 = v45;
    if (v45 != -1)
    {
      ((void (*)(_BYTE *, WTF::StringImpl ****, _BYTE *))off_1E3275200[v45])(v37, &v48, v44);
      v50 = v10;
    }
    LOBYTE(v51) = 1;
  }
LABEL_22:
  WebCore::FetchHeaders::create((uint64_t)&v48, (uint64_t)&v39);
  if ((_BYTE)v51 && v50 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl ****))off_1E32751F0[v50])(v37, &v48);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_60;
  if (v41)
  {
    if (v41 != 1)
    {
      v34 = std::__throw_bad_variant_access[abi:sn180100]();
      return (JSCell *)WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::initializeProperties(v34);
    }
    LOBYTE(v48) = (_BYTE)v39;
    v30 = v40;
    v40 = 0;
    v49 = v30;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v36, (unsigned __int8 *)&v48);
      v30 = v49;
    }
    v49 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v11);
      else
        *(_DWORD *)v30 -= 2;
    }
    v15 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 40);
    v13 = v39;
    v39 = 0;
    v48 = (WTF::StringImpl ***)v13;
    v15 = (JSCell *)WebCore::toJSNewlyCreated(v12, (WTF **)&v48);
    v16 = (WTF *)v48;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        v27 = *((unsigned int *)v48 + 13);
        if ((_DWORD)v27)
        {
          v31 = v48[5];
          v32 = 8 * v27;
          do
          {
            v33 = *v31;
            *v31 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
              {
                v35 = v32;
                WTF::StringImpl::destroy(v33, v14);
                v32 = v35;
              }
              else
              {
                *(_DWORD *)v33 -= 2;
              }
            }
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
        v28 = (WTF *)*((_QWORD *)v16 + 5);
        if (v28)
        {
          *((_QWORD *)v16 + 5) = 0;
          *((_DWORD *)v16 + 12) = 0;
          WTF::fastFree(v28, v14);
        }
        WebCore::HTTPHeaderMap::~HTTPHeaderMap((WTF *)((char *)v16 + 8), v14);
        WTF::fastFree(v16, v29);
      }
      else
      {
        --*(_DWORD *)v48;
      }
    }
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_60;
  v17 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v17 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v17);
    if (Object)
    {
      v20 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v21 = (WebCore::JSFetchHeaders *)*((_QWORD *)this + 7);
        FunctionRealm = (JSC::JSCell **)JSC::getFunctionRealm(this, Object, v19);
        if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
        {
          v23 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSFetchHeaders>(v21, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v20, v23, v24);
          if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
            JSC::JSObject::setStructure(v15, v21, SubclassStructure);
        }
      }
    }
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
LABEL_60:
    v15 = 0;
  if (v41 != -1)
    ((void (*)(WTF::StringImpl ****, WTF **))off_1E3275210[v41])(&v48, &v39);
  v9 = v47;
LABEL_41:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl ****, _BYTE *))off_1E3275220[v9])(&v48, v44);
  return v15;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSFetchHeaders>((WebCore::JSFetchHeaders *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSFetchHeadersPrototype::finishCreation(WebCore::JSFetchHeadersPrototype *this, JSC::VM *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t Direct;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(a2, (uint64_t)&WebCore::JSFetchHeaders::s_info, (uint64_t)&WebCore::JSFetchHeadersPrototypeTableValues, this);
  v4 = *((_QWORD *)a2 + 5244);
  v5 = *(_QWORD *)(v4 + 2712);
  Direct = JSC::JSObject::getDirect((uint64_t)this, a2, *(_QWORD *)(*(_QWORD *)(v4 + 48) + 3952));
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v5, Direct, 4);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString((uint64_t)a2, &v11);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v7, v8, 6);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::JSFetchHeaders::destroy(WebCore::JSFetchHeaders *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref((uint64_t *)this + 3, a2);
}

uint64_t WebCore::JSFetchHeaders::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFetchHeaders::createPrototype(WebCore::JSFetchHeaders *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSFetchHeadersPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSFetchHeadersPrototype::create(WebCore::JSFetchHeadersPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSFetchHeadersPrototype::finishCreation((WebCore::JSFetchHeadersPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>,(WebCore::DOMConstructorID)89>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 712);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 712) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsFetchHeadersConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFetchHeadersPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>,(WebCore::DOMConstructorID)89>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t *WebCore::JSDOMIteratorBase<WebCore::JSFetchHeaders,WebCore::FetchHeadersIteratorTraits>::destroy(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (*((_BYTE *)result + 72))
  {
    v2 = result;
    v3 = result + 3;
    v4 = *((unsigned int *)result + 15);
    if ((_DWORD)v4)
    {
      v6 = (WTF::StringImpl **)result[6];
      v7 = 8 * v4;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v5 = (WTF *)v2[6];
    if (v5)
    {
      v2[6] = 0;
      *((_DWORD *)v2 + 14) = 0;
      WTF::fastFree(v5, a2);
    }
    return WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref(v3, a2);
  }
  return result;
}

uint64_t WebCore::JSFetchHeadersOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSFetchHeadersOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  WTF *v25;
  void *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl **v31;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(unsigned int *)(v3 + 52);
    if ((_DWORD)v24)
    {
      v27 = *(WTF::StringImpl ***)(v3 + 40);
      v28 = 8 * v24;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            v30 = v28;
            v31 = v27;
            WTF::StringImpl::destroy(v29, a2);
            v28 = v30;
            v27 = v31;
          }
          else
          {
            *(_DWORD *)v29 -= 2;
          }
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
    v25 = *(WTF **)(v3 + 40);
    if (v25)
    {
      *(_QWORD *)(v3 + 40) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      WTF::fastFree(v25, a2);
    }
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v3 + 8), a2);
    WTF::fastFree((WTF *)v3, v26);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, WTF **a2)
{
  WTF *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  unint64_t v29;
  _QWORD *v30;
  WTF *v31;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSFetchHeaders>(*(WebCore::JSFetchHeaders **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 41456);
  v8 = *(_QWORD *)(v7 + 23536);
  v9 = *(_QWORD **)(v8 + 720);
  if (!v9)
  {
    v10 = *(_QWORD *)(v7 + 22648);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_6:
    v12 = *(_QWORD *)(v10 + 2824);
    if (!*(_QWORD *)(v12 + 720))
    {
      v13 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v31, "IsoSpace T");
      v30 = 0;
      MEMORY[0x19AEA3204](v13, &v31, v6 + 192, v6 + 1872, 32, 8, &v30);
      v15 = (uint64_t)v30;
      v30 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v31;
      v31 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v14);
        else
          --*(_DWORD *)v16;
      }
      v17 = *(_QWORD *)(v12 + 720);
      *(_QWORD *)(v12 + 720) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v8 + 720);
    *(_QWORD *)(v8 + 720) = v9;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v10);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
LABEL_21:
  SlowCase = v9[3];
  if (SlowCase < v9[4])
  {
LABEL_22:
    v9[3] = SlowCase + 32;
    goto LABEL_23;
  }
  SlowCase = v9[5];
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ v9[6];
    v9[4] = SlowCase + HIDWORD(v29);
    v9[5] = SlowCase + (int)v29;
    goto LABEL_22;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_23:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v5);
  v23 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v23;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v24 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335420 & 1) == 0)
  {
    qword_1EE335418 = (uint64_t)&off_1E3271080;
    byte_1EE335420 = 1;
  }
  v31 = v4;
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  Allocator = *(_QWORD **)(v26 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335418;
  Allocator[2] = v24;
  v30 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v24 + 32), (uint64_t *)&v31, (uint64_t *)&v30);
  if (v30)
    v30[1] = 3;
  return SlowCase;
}

{
  WTF *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  unint64_t v29;
  _QWORD *v30;
  WTF *v31;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSIDBIndex>(*(WebCore::JSIDBIndex **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 41456);
  v8 = *(_QWORD *)(v7 + 23536);
  v9 = *(_QWORD **)(v8 + 912);
  if (!v9)
  {
    v10 = *(_QWORD *)(v7 + 22648);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_6:
    v12 = *(_QWORD *)(v10 + 2824);
    if (!*(_QWORD *)(v12 + 912))
    {
      v13 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v31, "IsoSpace T");
      v30 = 0;
      MEMORY[0x19AEA3204](v13, &v31, v6 + 192, v6 + 1872, 40, 8, &v30);
      v15 = (uint64_t)v30;
      v30 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v31;
      v31 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v14);
        else
          --*(_DWORD *)v16;
      }
      v17 = *(_QWORD *)(v12 + 912);
      *(_QWORD *)(v12 + 912) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v8 + 912);
    *(_QWORD *)(v8 + 912) = v9;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v10);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
LABEL_21:
  SlowCase = v9[3];
  if (SlowCase < v9[4])
  {
LABEL_22:
    v9[3] = SlowCase + 48;
    goto LABEL_23;
  }
  SlowCase = v9[5];
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ v9[6];
    v9[4] = SlowCase + HIDWORD(v29);
    v9[5] = SlowCase + (int)v29;
    goto LABEL_22;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_23:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v5);
  v23 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v23;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v24 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335D70 & 1) == 0)
  {
    qword_1EE335D68 = (uint64_t)&off_1E32A8020;
    byte_1EE335D70 = 1;
  }
  v31 = v4;
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  Allocator = *(_QWORD **)(v26 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D68;
  Allocator[2] = v24;
  v30 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v24 + 32), (uint64_t *)&v31, (uint64_t *)&v30);
  if (v30)
    v30[1] = 3;
  return SlowCase;
}

{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  WTF *v50;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSRTCIceCandidate::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSRTCIceCandidate::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSRTCIceCandidatePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSRTCIceCandidatePrototype::create((WebCore::JSRTCIceCandidatePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSRTCIceCandidate::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSRTCIceCandidate::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1264);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 1264))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v50, "IsoSpace T");
    v49 = 0;
    MEMORY[0x19AEA3204](v27, &v50, v20 + 192, v20 + 1872, 32, 8, &v49);
    v29 = (uint64_t)v49;
    v49 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v50;
    v50 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 1264);
    *(_QWORD *)(v26 + 1264) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 1264);
  *(_QWORD *)(v22 + 1264) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v48 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v48);
    v23[5] = SlowCase + (int)v48;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3365C0 & 1) == 0)
  {
    qword_1EE3365B8 = (uint64_t)&off_1E32D28B0;
    byte_1EE3365C0 = 1;
  }
  if (v4)
    v39 = (uint64_t *)((char *)v4 + 8);
  else
    v39 = 0;
  if (!*(_DWORD *)(v38 + 48))
  {
    if ((SlowCase & 8) != 0)
      v40 = (SlowCase - 112) | 1;
    else
      v40 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v40 & 1) != 0)
      v41 = v40 + 47;
    else
      v41 = *(_QWORD *)v40 + 32;
    Allocator = *(_QWORD **)(v41 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v41 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3365B8;
    Allocator[2] = v38;
    v43 = *v39;
    *v39 = (uint64_t)Allocator;
    if (!v43)
      return SlowCase;
LABEL_55:
    *(_QWORD *)(v43 + 8) = 3;
    return SlowCase;
  }
  v50 = v4;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  v47 = *(_QWORD **)(v46 + 16);
  if (!v47)
    v47 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *v47;
  *v47 = SlowCase;
  v47[1] = &qword_1EE3365B8;
  v47[2] = v38;
  v49 = v47;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v50, (uint64_t *)&v49);
  v43 = (uint64_t)v49;
  if (v49)
    goto LABEL_55;
  return SlowCase;
}

{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  WTF *v50;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSRTCSessionDescription::s_info
        + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCSessionDescription::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSRTCSessionDescription::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSRTCSessionDescription::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSRTCSessionDescriptionPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSRTCSessionDescriptionPrototype::create((WebCore::JSRTCSessionDescriptionPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSRTCSessionDescription::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSRTCSessionDescription::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1368);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 1368))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v50, "IsoSpace T");
    v49 = 0;
    MEMORY[0x19AEA3204](v27, &v50, v20 + 192, v20 + 1872, 32, 8, &v49);
    v29 = (uint64_t)v49;
    v49 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v50;
    v50 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 1368);
    *(_QWORD *)(v26 + 1368) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 1368);
  *(_QWORD *)(v22 + 1368) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v48 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v48);
    v23[5] = SlowCase + (int)v48;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336768 & 1) == 0)
  {
    qword_1EE336760 = (uint64_t)&off_1E32DAC50;
    byte_1EE336768 = 1;
  }
  if (v4)
    v39 = (uint64_t *)((char *)v4 + 8);
  else
    v39 = 0;
  if (!*(_DWORD *)(v38 + 48))
  {
    if ((SlowCase & 8) != 0)
      v40 = (SlowCase - 112) | 1;
    else
      v40 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v40 & 1) != 0)
      v41 = v40 + 47;
    else
      v41 = *(_QWORD *)v40 + 32;
    Allocator = *(_QWORD **)(v41 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v41 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336760;
    Allocator[2] = v38;
    v43 = *v39;
    *v39 = (uint64_t)Allocator;
    if (!v43)
      return SlowCase;
LABEL_55:
    *(_QWORD *)(v43 + 8) = 3;
    return SlowCase;
  }
  v50 = v4;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  v47 = *(_QWORD **)(v46 + 16);
  if (!v47)
    v47 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *v47;
  *v47 = SlowCase;
  v47[1] = &qword_1EE336760;
  v47[2] = v38;
  v49 = v47;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v50, (uint64_t *)&v49);
  v43 = (uint64_t)v49;
  if (v49)
    goto LABEL_55;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::FetchHeaders>(uint64_t a1, WTF::StringImpl ***a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl ***v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == (WTF *)a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == (WTF *)a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v23 = a2;
  v11 = WebCore::toJSNewlyCreated(a1, (WTF **)&v23);
  v13 = (WTF *)v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      v15 = *((unsigned int *)v23 + 13);
      if ((_DWORD)v15)
      {
        v18 = v23[5];
        v19 = 8 * v15;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              v21 = v19;
              v22 = v18;
              WTF::StringImpl::destroy(v20, v12);
              v19 = v21;
              v18 = v22;
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      v16 = (WTF *)*((_QWORD *)v13 + 5);
      if (v16)
      {
        *((_QWORD *)v13 + 5) = 0;
        *((_DWORD *)v13 + 12) = 0;
        WTF::fastFree(v16, v12);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WTF *)((char *)v13 + 8), v12);
      WTF::fastFree(v13, v17);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  return v11;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFetchRequest>::construct(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t (***v12)(WebCore::ContextDestructionObserver *__hidden);
  int v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t (***v19)(WebCore::ContextDestructionObserver *__hidden);
  JSCell *v20;
  JSC::JSCell *v21;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v23;
  JSC::JSGlobalObject *v24;
  JSC::VM *v25;
  JSC::Structure *v26;
  uint64_t FunctionRealm;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  int v35;
  JSC::JSObject *v36;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v38;
  JSC::Structure *v39;
  JSC::JSCell *v40;
  uint64_t v41;
  unint64_t SubclassStructure;
  JSValue v44;
  WTF::StringImpl *v46;
  uint64_t (***v47)(WebCore::ContextDestructionObserver *__hidden);
  WTF::StringImpl *v48;
  int v49;
  char v50;
  char v51[8];
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  char v60[8];
  int v61;
  uint64_t (***v62)(WebCore::ContextDestructionObserver *__hidden);
  WTF::StringImpl *v63;
  int v64;
  uint64_t (***v65)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  unsigned int v78;
  JSC::VM *v79;
  char v80[8];
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 7);
  v79 = (JSC::VM *)v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, this, v44);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v79, (uint64_t)"Request", 8);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::FetchRequest>,WebCore::IDLUSVString>>::convert((uint64_t *)this, *(_QWORD *)(a2 + 48), (uint64_t)v80);
  v8 = v83;
  if (!v83)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v9 = 10;
    else
      v9 = *(_QWORD *)(a2 + 56);
    WebCore::convertDictionary<WebCore::FetchRequestInit>(this, (JSC::JSCell *)v9, (uint64_t)&v65);
    v10 = v78;
    if (v78)
    {
      v20 = 0;
LABEL_45:
      if (v10 != -1)
        (*(&off_1E3275498 + v10))((int)&v47, (WebCore::FetchRequestInit *)&v65);
      v8 = v83;
      goto LABEL_48;
    }
    if (!v83)
    {
      v60[0] = 0;
      v61 = -1;
      v11 = v82;
      if (v82 == -1
        || (((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), char *, uint64_t *))off_1E3275408[v82])(&v47, v60, &v81), v61 = v11, !v78))
      {
        v12 = v65;
        v65 = 0;
        v47 = v12;
        LOBYTE(v48) = 0;
        v50 = 0;
        if (v68)
        {
          v49 = -1;
          v13 = v67;
          if (v67 != -1)
          {
            ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), WTF::StringImpl **, uint64_t *))off_1E3275200[v67])(&v62, &v48, &v66);
            v49 = v13;
          }
          v50 = 1;
        }
        v51[0] = 0;
        v53 = 0;
        if (v71)
        {
          v52 = -1;
          v14 = v70;
          if (v70 != -1)
          {
            ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), char *, uint64_t *))off_1E3275450[v70])(&v62, v51, &v69);
            v52 = v14;
          }
          v53 = 1;
        }
        v54 = v72;
        v55 = v73;
        v56 = v74;
        v15 = v75;
        v72 = 0;
        v75 = 0;
        v57 = v15;
        v58 = v76;
        v59 = v77;
        WebCore::FetchRequest::create(v7, (uint64_t)v60, (uint64_t)&v47, (uint64_t)&v62);
        WebCore::FetchRequestInit::~FetchRequestInit((WebCore::FetchRequestInit *)&v47, v16);
        if (v61 != -1)
          ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), char *))off_1E32753F8[v61])(&v47, v60);
        if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
          goto LABEL_70;
        if (!v64)
        {
          v18 = *(_QWORD *)(v5 + 40);
          v19 = v62;
          v62 = 0;
          v47 = v19;
          if (*v19 != &off_1E3355D08)
          {
            __break(0xC471u);
            JUMPOUT(0x194AE02C8);
          }
          v20 = (JSCell *)WebCore::createWrapper<WebCore::FetchRequest,WebCore::FetchRequest>(v18, (JSC::VM *)&v47);
          if (v47)
          {
            if (*((_DWORD *)v47 + 6) == 1)
              ((void (*)(void))(*v47)[2])();
            else
              --*((_DWORD *)v47 + 6);
          }
          goto LABEL_27;
        }
        if (v64 == 1)
        {
          LOBYTE(v47) = (_BYTE)v62;
          v46 = v63;
          v63 = 0;
          v48 = v46;
          if (!*(_QWORD *)(v3 + 16))
          {
            WebCore::propagateExceptionSlowPath(this, &v79, (unsigned __int8 *)&v47);
            v46 = v48;
          }
          v48 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v17);
            else
              *(_DWORD *)v46 -= 2;
          }
          v20 = 0;
LABEL_27:
          if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
          {
LABEL_70:
            v20 = 0;
LABEL_42:
            if (v64 != -1)
              ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E3275488[v64])(&v47, &v62);
            v10 = v78;
            goto LABEL_45;
          }
          v21 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v21 & 0xFFFE000000000002) != 0
            || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v21)) == 0
            || (v24 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v25 = (JSC::VM *)*((_QWORD *)this + 7),
                FunctionRealm = JSC::getFunctionRealm(this, Object, v23),
                *((_DWORD *)v25 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
          {
LABEL_41:
            if (!*(_DWORD *)(v3 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) == 0)
              goto LABEL_42;
            goto LABEL_70;
          }
          v28 = *(_QWORD *)(FunctionRealm + 3296);
          if (v28)
          {
            v29 = *(_DWORD *)(v28 - 8);
            v30 = ((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) >> 22);
            v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
            v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
            v33 = v29 & ((v32 >> 31) ^ v32);
            v34 = *(char ***)(v28 + 16 * v33);
            if (v34 == &WebCore::JSFetchRequest::s_info)
            {
LABEL_37:
              v36 = *(JSC::JSObject **)(v28 + 16 * v33 + 8);
              if (v36)
              {
LABEL_39:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v24, v36, v26);
                if (!*((_DWORD *)v25 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) == 0)
                  JSC::JSObject::setStructure(v20, v25, SubclassStructure);
                goto LABEL_41;
              }
            }
            else
            {
              v35 = 1;
              while (v34)
              {
                v33 = ((_DWORD)v33 + v35) & v29;
                v34 = *(char ***)(v28 + 16 * v33);
                ++v35;
                if (v34 == &WebCore::JSFetchRequest::s_info)
                  goto LABEL_37;
              }
            }
          }
          Structure = WebCore::JSFetchRequestPrototype::createStructure((uint64_t *)v25, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v40 = (JSC::JSCell *)WebCore::JSFetchRequestPrototype::create(v25, Structure, v38, v39);
          v41 = WebCore::JSFetchRequest::createStructure((uint64_t *)v25, FunctionRealm, v40);
          v36 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v41, (uint64_t)&WebCore::JSFetchRequest::s_info);
          goto LABEL_39;
        }
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v20 = 0;
LABEL_48:
  if (v8 != -1)
    ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), uint64_t *))off_1E32754A8[v8])(&v65, &v81);
  return v20;
}

uint64_t WebCore::JSFetchRequest::prototype(WebCore::JSFetchRequest *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFetchRequest::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFetchRequest::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSFetchRequestPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSFetchRequestPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSFetchRequest::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSFetchRequest::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSFetchRequest::destroy(WebCore::JSFetchRequest *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSFetchRequest::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFetchRequest::JSFetchRequest(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSFetchRequest::createPrototype(WebCore::JSFetchRequest *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSFetchRequestPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSFetchRequestPrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSFetchRequestPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFetchRequestPrototype::create(WebCore::JSFetchRequestPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<23u>(this, (uint64_t)&WebCore::JSFetchRequest::s_info, (uint64_t)&WebCore::JSFetchRequestPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchRequest>,(WebCore::DOMConstructorID)90>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 720);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSFetchRequest>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFetchRequest::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFetchRequest::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFetchRequestPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFetchRequestPrototype::create((WebCore::JSFetchRequestPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFetchRequest::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFetchRequest::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 720) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFetchRequestConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFetchRequestPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchRequest>,(WebCore::DOMConstructorID)90>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFetchRequest_method(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v3 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v3 + 288));
    *(_BYTE *)(v3 + 472) |= 1u;
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(v3 + 376);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_6;
      v10 = v11;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_6:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

uint64_t WebCore::jsFetchRequest_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 488);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsFetchRequest_headers(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::FetchHeaders>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF::StringImpl ****)(*(_QWORD *)(a2 + 24) + 152));
}

uint64_t WebCore::jsFetchRequest_destination(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  WebCore::convertEnumerationToString(*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 560), &v11);
  v5 = v11;
  if (!v11)
    return *v3;
  v6 = *((_DWORD *)v11 + 1);
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v11 != *(WTF::StringImpl **)(v7 + 8))
        v7 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

uint64_t WebCore::jsFetchRequest_referrer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (MEMORY[0x19AEA53F4](*(_QWORD *)(v3 + 616), "no-referrer", 11))
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 56);
LABEL_3:
    v6 = *(_QWORD *)(v5 + 41968);
    goto LABEL_15;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)(v3 + 616), "client", 6))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = v11;
  }
  else
  {
    v4 = *(WTF::StringImpl **)(v3 + 616);
    if (v4)
      *(_DWORD *)v4 += 2;
    v11 = v4;
  }
  v5 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_3;
  v7 = *((_DWORD *)v4 + 1);
  if (!v7)
    goto LABEL_3;
  if (v7 != 1)
    goto LABEL_12;
  v9 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  if ((*((_BYTE *)v4 + 16) & 4) != 0)
  {
    v10 = *v9;
LABEL_24:
    v6 = *(_QWORD *)(v5 + 8 * v10 + 42216);
    goto LABEL_16;
  }
  v10 = *(unsigned __int16 *)v9;
  if (v10 <= 0xFF)
  {
    v10 = v10;
    goto LABEL_24;
  }
LABEL_12:
  v6 = *(_QWORD *)(v5 + 64760);
  if (!v6 || v4 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
LABEL_15:
    if (!v4)
      return v6;
  }
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsFetchRequest_referrerPolicy(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 565);
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl += 2;
    a2 = (WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl
                      + 2);
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[0] = (uint64_t)v13;
    unk_1EE2F45C0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl;
    qword_1EE2F45C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl;
    unk_1EE2F45D0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl;
    qword_1EE2F45D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl;
    unk_1EE2F45E0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F45E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl;
    unk_1EE2F45F0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F45F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_8;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_5;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_8:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, (WTF::StringImpl *)a2);
  return v8;
}

uint64_t WebCore::jsFetchRequest_mode(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 561);
  {
    WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_0::operator() const(void)::impl;
    unk_1EE2F4610 = &WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_1::operator() const(void)::impl;
    qword_1EE2F4618 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_2::operator() const(void)::impl;
    unk_1EE2F4620 = &WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_3::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsFetchRequest_credentials(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 562);
  if ((byte_1EE3352B1 & 1) == 0)
  {
    dword_1ECE775E0 += 2;
    byte_1EE3352B1 = 1;
    dword_1ECE77600 += 2;
    qword_1EE335448 = (uint64_t)&dword_1ECE775E0;
    unk_1EE335450 = &dword_1ECE77600;
    dword_1ECE77620 += 2;
    qword_1EE335458 = (uint64_t)&dword_1ECE77620;
  }
  v5 = *(_QWORD *)&_MergedGlobals_924[8 * v4 + 408];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsFetchRequest_cache(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 563);
  if ((_MergedGlobals_924[0] & 1) == 0)
  {
    _MergedGlobals_14 += 2;
    dword_1ECE77540 += 2;
    qword_1EE335478 = (uint64_t)&_MergedGlobals_14;
    unk_1EE335480 = &dword_1ECE77540;
    dword_1ECE77560 += 2;
    dword_1ECE77580 += 2;
    qword_1EE335488 = (uint64_t)&dword_1ECE77560;
    unk_1EE335490 = &dword_1ECE77580;
    dword_1ECE775A0 += 2;
    dword_1ECE775C0 += 2;
    qword_1EE335498 = (uint64_t)&dword_1ECE775A0;
    unk_1EE3354A0 = &dword_1ECE775C0;
    _MergedGlobals_924[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_924[8 * v4 + 456];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsFetchRequest_redirect(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 564);
  if ((byte_1EE3352B3 & 1) == 0)
  {
    dword_1ECE778C0 += 2;
    byte_1EE3352B3 = 1;
    dword_1ECE778E0 += 2;
    qword_1EE335460 = (uint64_t)&dword_1ECE778C0;
    unk_1EE335468 = &dword_1ECE778E0;
    dword_1ECE77900 += 2;
    qword_1EE335470 = (uint64_t)&dword_1ECE77900;
  }
  v5 = *(_QWORD *)&_MergedGlobals_924[8 * v4 + 432];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsFetchRequest_integrity(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 568);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsFetchRequest_keepalive(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 566))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsFetchRequest_signal(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AbortSignal>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 624));
}

uint64_t WebCore::jsFetchRequest_body(JSC *a1, int *a2)
{
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  JSC::VM *v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(WTF::StringImpl **)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  if (!*(_BYTE *)(v4 + 128) || *(_BYTE *)(v4 + 192))
  {
    v9[0] = 0;
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD **)(v4 + 120);
  if (v6)
    goto LABEL_8;
  WebCore::FetchBodyOwner::createReadableStream((WebCore::FetchBodyOwner *)v4, (uint64_t)a1, (uint64_t)v12);
  if (!v14)
  {
    if (*(_BYTE *)(v4 + 128))
    {
      v6 = *(_DWORD **)(v4 + 120);
      if (!v6)
      {
LABEL_9:
        v9[0] = v6;
        goto LABEL_10;
      }
LABEL_8:
      ++*v6;
      goto LABEL_9;
    }
    __break(1u);
  }
  LOBYTE(v9[0]) = v12[0];
  v9[1] = v13;
  v10 = 1;
LABEL_11:
  v7 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::ReadableStream>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>>>(a1, v5, &v11, (uint64_t)v9);
  if (v10 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E3275C98[v10])(v12, v9);
  return v7;
}

uint64_t WebCore::jsFetchRequest_bodyUsed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 128)
    && (*(_BYTE *)(v2 + 136)
     || (v4 = *(_QWORD *)(v2 + 120)) != 0
     && WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v4 + 8))))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t WebCore::JSFetchRequest::subspaceForImpl(WebCore::JSFetchRequest *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 736);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 736))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 736);
    *(_QWORD *)(v8 + 736) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 736);
  *(_QWORD *)(v3 + 736) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFetchRequestOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[1];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v8[2] || ((*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
  {
LABEL_17:
    *a5 = "Reachable from FetchRequest";
    a5[1] = 28;
  }
LABEL_5:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_19;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x194AE1C80);
    }
  }
}

_QWORD *WebCore::JSFetchRequestOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::FetchRequest,WebCore::FetchRequest>(uint64_t a1, JSC::VM *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSFetchRequest *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchRequest::s_info + ~((_QWORD)&WebCore::JSFetchRequest::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSFetchRequest::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSFetchRequest::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSFetchRequestPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSFetchRequestPrototype::create((WebCore::JSFetchRequestPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSFetchRequest::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSFetchRequest::s_info);
LABEL_8:
  v20 = *(WebCore::JSFetchRequest **)(a1 + 56);
  v21 = (_QWORD *)WebCore::JSFetchRequest::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v29);
    v21[5] = SlowCase + (int)v29;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v23 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v23;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v24 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335430 & 1) == 0)
  {
    qword_1EE335428 = (uint64_t)&off_1E32710B0;
    byte_1EE335430 = 1;
  }
  v31 = v4;
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  Allocator = *(_QWORD **)(v26 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335428;
  Allocator[2] = v24;
  v30 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v24 + 32), &v31, (uint64_t *)&v30);
  if (v30)
    v30[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::FetchRequest>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[6];
  v14 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E3355D08)
  {
    v12 = WebCore::createWrapper<WebCore::FetchRequest,WebCore::FetchRequest>(a2, (JSC::VM *)&v14);
    if (v14)
    {
      if (v14[6] == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --v14[6];
    }
    return v12;
  }
  result = 632;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFetchRequest::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSFetchRequest::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSFetchRequest::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

unint64_t JSC::jsDynamicCast<WebCore::JSFetchRequest *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSFetchRequest::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSFetchRequest::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::FetchOptionsCredentials>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  int v18;
  int v19;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  unint64_t v25;

  v3 = a1;
  v25 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a1);
  v4 = v24;
  if (!v24)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "include" && v7 == 7)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 105 || *(_DWORD *)(v6 + 1) != 1970037614 || *(_DWORD *)(v6 + 3) != 1701082476)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 105)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *(_QWORD *)(v6 + 6);
      if (v14 != 0x75006C0063006ELL || v15 != 0x6500640075006CLL)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v6 == "include" && v7 == 7)
  {
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::FetchOptionsCredentials>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 != "omit" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 111 || *(_WORD *)(v6 + 1) != 26989 || *((_WORD *)v6 + 1) != 29801)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 111)
        goto LABEL_16;
      v18 = *(_DWORD *)(v6 + 2);
      v19 = *((_DWORD *)v6 + 1);
      if (v18 != 6881389 || v19 != 7602281)
        goto LABEL_16;
    }
  }
  else if (v6 != "omit" || v7 != 4)
  {
    if (v6 == "same-origin" || v7 != 11)
    {
      if (v7 == 11 && v6 == "same-origin")
        goto LABEL_68;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 115 && *(_QWORD *)(v6 + 1) == 0x6769726F2D656D61 && *(_QWORD *)(v6 + 3) == 0x6E696769726F2D65)
      {
LABEL_68:
        v13 = &off_1E32706B0;
        goto LABEL_42;
      }
    }
    else if (*(_WORD *)v6 == 115)
    {
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BF700);
      v22.i16[0] = vminvq_u16(v22);
      if (v22.i32[0])
      {
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968BF710);
        v23.i16[0] = vminvq_u16(v23);
        if (v23.i32[0])
          goto LABEL_68;
      }
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_43;
  }
  v13 = &off_1E3270698;
LABEL_42:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::parseEnumerationFromString<WebCore::FetchOptionsDestination>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  char **v7;
  unint64_t v8;
  char **v9;
  int v10;

  v1 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v1 + 4);
    if ((_DWORD)v4)
    {
      v5 = *(unsigned __int8 **)(v1 + 8);
      v6 = v4 | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
      v7 = &WebCore::parseEnumerationFromString<WebCore::FetchOptionsDestination>(WTF::String const&)::mappings;
      v8 = 20;
      do
      {
        v9 = &v7[3 * (v8 >> 1)];
        v10 = WTF::codePointCompare();
        if (v10 >= 0)
          v8 >>= 1;
        else
          v8 += ~(v8 >> 1);
        if (v10 < 0)
          v7 = v9 + 3;
      }
      while (v8);
      if (v7 == &WebCore::parseEnumerationFromString<WebCore::FetchOptionsMode>(WTF::String const&)::mappings
        || !WTF::operator==(v5, v6, (unsigned __int8 *)*v7, (uint64_t)v7[1]))
      {
        LODWORD(v1) = 0;
        v2 = 0;
        return v1 | (v2 << 8);
      }
      LODWORD(v1) = *((unsigned __int8 *)v7 + 16);
    }
    else
    {
      LODWORD(v1) = 0;
    }
  }
  v2 = 1;
  return v1 | (v2 << 8);
}

void WebCore::convertDictionary<WebCore::FetchRequestInit>(WebCore::JSDOMGlobalObject *this@<X0>, JSC::JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  JSC::JSArrayBufferView *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  int v28;
  __int16 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSC::JSRopeString *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  JSC::JSGlobalObject *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  JSC::JSRopeString *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  WTF::StringImpl *v87;
  int v88;
  int v89;
  WTF::StringImpl *v90;
  _BYTE v91[16];
  int v92;
  char v93;
  _BYTE v94[8];
  int v95;
  char v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  __int16 v99;
  WTF::StringImpl *v100;
  __int128 v101;
  __int128 v102;
  JSC::VM *v103;
  JSC::VM *v104;
  WTF::StringImpl *v105;
  _DWORD v106[6];
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v103 = v5;
  v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_3;
  }
  if (((unint64_t)a2 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(a2);
    if (Object)
    {
LABEL_3:
      v90 = 0;
      v91[0] = 0;
      v93 = 0;
      v94[0] = 0;
      v96 = 0;
      v100 = 0;
      LOWORD(v101) = 0;
      *((_QWORD *)&v101 + 1) = 0;
      LOWORD(v102) = 0;
      *((_QWORD *)&v102 + 1) = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      if (v6 == 2)
        goto LABEL_4;
      WTF::AtomStringImpl::addLiteral();
      v18 = (JSC::JSArrayBufferView *)JSC::JSObject::get(Object, this, (unint64_t)v105);
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v17);
        else
          *(_DWORD *)v105 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_234;
      if (v18 != (JSC::JSArrayBufferView *)10)
      {
        WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::convert(this, v18, (uint64_t)&v105);
        v71 = v107;
        if (v107)
        {
          *(_DWORD *)(a3 + 128) = 1;
          v72 = v71;
        }
        else
        {
          WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>>::releaseReturnValue((uint64_t)&v105, (uint64_t)&v87);
          std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]((uint64_t)v94, (uint64_t)&v87);
          if ((_BYTE)v89 && v88 != -1)
            ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E3275418[v88])(&v104, &v87);
          v72 = v107;
        }
        if (v72 != -1)
          ((void (*)(WTF::StringImpl **, _DWORD *))off_1E3275888[v72])(&v87, v106);
        if (v71)
          goto LABEL_16;
      }
      WTF::AtomStringImpl::addLiteral();
      v19 = v105;
      v20 = JSC::JSObject::get(Object, this, (unint64_t)v105);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v12);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_234;
      if (v20 == 10)
      {
LABEL_52:
        WTF::AtomStringImpl::addLiteral();
        v31 = v105;
        v33 = (JSC::JSRopeString *)JSC::JSObject::get(Object, this, (unint64_t)v105);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v32);
          else
            *(_DWORD *)v31 -= 2;
        }
        if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
          goto LABEL_234;
        if (v33 != (JSC::JSRopeString *)10)
        {
          WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsCredentials>>((uint64_t)&v105, this, v33);
          if (HIDWORD(v105))
            goto LABEL_234;
          WORD2(v98) = v105 | 0x100;
        }
        WTF::AtomStringImpl::addLiteral();
        v34 = v105;
        v36 = (JSC::JSGlobalObject *)JSC::JSObject::get(Object, this, (unint64_t)v105);
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v35);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
          goto LABEL_234;
        if (v36 != (JSC::JSGlobalObject *)10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::convert((uint64_t)&v105, this, v36);
          v73 = v107;
          if (v107)
          {
            *(_DWORD *)(a3 + 128) = 1;
            v74 = v73;
          }
          else
          {
            WebCore::ConversionResult<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::releaseReturnValue((uint64_t)&v87, (uint64_t)&v105);
            std::optional<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::operator=[abi:sn180100]<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>((uint64_t)v91, (uint64_t)&v87);
            if (v89 != -1)
              ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32751F0[v89])(&v104, &v87);
            v74 = v107;
          }
          if (v74 != -1)
            ((void (*)(WTF::StringImpl **, _DWORD *))off_1E32758A8[v74])(&v87, v106);
          if (v73)
            goto LABEL_16;
        }
        WTF::AtomStringImpl::addLiteral();
        v37 = v105;
        v39 = JSC::JSObject::get(Object, this, (unint64_t)v105);
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v38);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
          goto LABEL_234;
        if (v39 == 10)
          goto LABEL_67;
        WebCore::Converter<WebCore::IDLDOMString>::convert(this, v39, (uint64_t)&v105);
        v75 = v106[0];
        if (v106[0])
        {
          *(_DWORD *)(a3 + 128) = 1;
          v78 = v75;
        }
        else
        {
          v76 = v105;
          v105 = 0;
          v77 = v100;
          v100 = v76;
          if (!v77)
          {
            v78 = 0;
            goto LABEL_184;
          }
          if (*(_DWORD *)v77 != 2)
          {
            v78 = 0;
            *(_DWORD *)v77 -= 2;
            goto LABEL_184;
          }
          WTF::StringImpl::destroy(v77, v12);
          v78 = v106[0];
        }
        if (v78 == -1)
        {
LABEL_185:
          if (v75)
            goto LABEL_16;
LABEL_67:
          WTF::AtomStringImpl::addLiteral();
          v40 = v105;
          v42 = JSC::JSObject::get(Object, this, (unint64_t)v105);
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v41);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            goto LABEL_234;
          if (v42 != 10)
          {
            WebCore::convert<WebCore::IDLBoolean>((uint64_t)this, v42, (uint64_t)&v105);
            if (HIDWORD(v105))
              goto LABEL_234;
            LOWORD(v101) = v105 | 0x100;
          }
          WTF::AtomStringImpl::addLiteral();
          v43 = v105;
          v45 = JSC::JSObject::get(Object, this, (unint64_t)v105);
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v44);
            else
              *(_DWORD *)v43 -= 2;
          }
          if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            goto LABEL_234;
          if (v45 == 10)
          {
LABEL_77:
            WTF::AtomStringImpl::addLiteral();
            v46 = v105;
            v48 = JSC::JSObject::get(Object, this, (unint64_t)v105);
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, v47);
              else
                *(_DWORD *)v46 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
              goto LABEL_234;
            if (v48 != 10)
            {
              WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsMode>>((uint64_t)&v105, this, v48);
              if (HIDWORD(v105))
                goto LABEL_234;
              WORD1(v98) = v105 | 0x100;
            }
LABEL_4:
            v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
            if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8) + 440) & 0x8000000000000000) != 0)
            {
              if (v6 == 2)
              {
LABEL_6:
                v9 = 10;
                *((_QWORD *)&v101 + 1) = 10;
LABEL_7:
                v10 = v90;
                *((_QWORD *)&v102 + 1) = v9;
                v90 = 0;
                *(_QWORD *)a3 = v10;
                *(_BYTE *)(a3 + 8) = 0;
                *(_BYTE *)(a3 + 32) = 0;
                if (v93)
                {
                  *(_DWORD *)(a3 + 24) = -1;
                  v11 = v92;
                  if (v92 != -1)
                  {
                    ((void (*)(WTF::StringImpl **, uint64_t, _BYTE *))off_1E3275200[v92])(&v105, a3 + 8, v91);
                    *(_DWORD *)(a3 + 24) = v11;
                  }
                  *(_BYTE *)(a3 + 32) = 1;
                }
                *(_BYTE *)(a3 + 40) = 0;
                v12 = (WTF::StringImpl *)(a3 + 40);
                *(_BYTE *)(a3 + 56) = 0;
                if (v96)
                {
                  *(_DWORD *)(a3 + 48) = -1;
                  v13 = v95;
                  if (v95 != -1)
                  {
                    ((void (*)(WTF::StringImpl **))off_1E3275450[v95])(&v105);
                    *(_DWORD *)(a3 + 48) = v13;
                  }
                  *(_BYTE *)(a3 + 56) = 1;
                }
                v14 = v98;
                *(_QWORD *)(a3 + 64) = v97;
                *(_QWORD *)(a3 + 72) = v14;
                *(_WORD *)(a3 + 80) = v99;
                v15 = v100;
                v97 = 0;
                v100 = 0;
                *(_QWORD *)(a3 + 88) = v15;
                v16 = v102;
                *(_OWORD *)(a3 + 96) = v101;
                *(_OWORD *)(a3 + 112) = v16;
                *(_DWORD *)(a3 + 128) = 0;
                goto LABEL_16;
              }
              WTF::AtomStringImpl::addLiteral();
              v49 = v105;
              v51 = (JSC::JSRopeString *)JSC::JSObject::get(Object, this, (unint64_t)v105);
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v50);
                else
                  *(_DWORD *)v49 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_234;
              if (v51 != (JSC::JSRopeString *)10)
              {
                WebCore::convert<WebCore::IDLEnumeration<WebCore::RequestPriority>>((uint64_t)&v105, this, v51);
                if (HIDWORD(v105))
                  goto LABEL_234;
                LOWORD(v102) = v105 | 0x100;
              }
            }
            else if (v6 == 2)
            {
              goto LABEL_6;
            }
            WTF::AtomStringImpl::addLiteral();
            v52 = v105;
            v54 = JSC::JSObject::get(Object, this, (unint64_t)v105);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v53);
              else
                *(_DWORD *)v52 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
              goto LABEL_234;
            if (v54 != 10)
            {
              WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsRedirect>>((uint64_t)&v105, this, v54);
              if (HIDWORD(v105))
                goto LABEL_234;
              v99 = v105 | 0x100;
            }
            WTF::AtomStringImpl::addLiteral();
            v55 = v105;
            v57 = JSC::JSObject::get(Object, this, (unint64_t)v105);
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v56);
              else
                *(_DWORD *)v55 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
              goto LABEL_234;
            if (v57 == 10)
              goto LABEL_99;
            WebCore::valueToUSVString(this, v57, (uint64_t)&v105);
            v79 = v106[0];
            if (v106[0])
            {
              *(_DWORD *)(a3 + 128) = 1;
              v82 = v79;
            }
            else
            {
              v80 = v105;
              v105 = 0;
              v81 = v97;
              v97 = v80;
              if (!v81)
              {
                v82 = 0;
                goto LABEL_203;
              }
              if (*(_DWORD *)v81 != 2)
              {
                v82 = 0;
                *(_DWORD *)v81 -= 2;
                goto LABEL_203;
              }
              WTF::StringImpl::destroy(v81, v12);
              v82 = v106[0];
            }
            if (v82 == -1)
            {
LABEL_204:
              if (!v79)
              {
LABEL_99:
                WTF::AtomStringImpl::addLiteral();
                v58 = v105;
                v60 = JSC::JSObject::get(Object, this, (unint64_t)v105);
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, v59);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v61 = v103;
                if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                  goto LABEL_234;
                if (v60 == 10)
                {
LABEL_104:
                  WTF::AtomStringImpl::addLiteral();
                  v62 = v105;
                  v64 = JSC::JSObject::get(Object, this, (unint64_t)v105);
                  if (v62)
                  {
                    if (*(_DWORD *)v62 == 2)
                      WTF::StringImpl::destroy(v62, v63);
                    else
                      *(_DWORD *)v62 -= 2;
                  }
                  if (!*((_DWORD *)v61 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v61))
                  {
                    *((_QWORD *)&v101 + 1) = v64;
                    WTF::AtomStringImpl::addLiteral();
                    v65 = v105;
                    v9 = JSC::JSObject::get(Object, this, (unint64_t)v105);
                    if (v65)
                    {
                      if (*(_DWORD *)v65 == 2)
                        WTF::StringImpl::destroy(v65, v66);
                      else
                        *(_DWORD *)v65 -= 2;
                    }
                    if (!*((_DWORD *)v61 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v61))
                      goto LABEL_7;
                  }
                  goto LABEL_234;
                }
                WebCore::convert<WebCore::IDLEnumeration<WebCore::ReferrerPolicy>>((uint64_t)&v105, this, v60);
                if (!HIDWORD(v105))
                {
                  LOWORD(v98) = v105 | 0x100;
                  goto LABEL_104;
                }
LABEL_234:
                *(_DWORD *)(a3 + 128) = 1;
              }
LABEL_16:
              WebCore::FetchRequestInit::~FetchRequestInit((WebCore::FetchRequestInit *)&v90, v12);
              return;
            }
LABEL_203:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v82])(&v87, &v105);
            goto LABEL_204;
          }
          WebCore::valueToByteString(this, v45, (uint64_t)&v105);
          v67 = v106[0];
          if (v106[0])
          {
            *(_DWORD *)(a3 + 128) = 1;
            v70 = v67;
          }
          else
          {
            v68 = v105;
            v105 = 0;
            v69 = v90;
            v90 = v68;
            if (!v69)
            {
              v70 = 0;
              goto LABEL_160;
            }
            if (*(_DWORD *)v69 != 2)
            {
              v70 = 0;
              *(_DWORD *)v69 -= 2;
              goto LABEL_160;
            }
            WTF::StringImpl::destroy(v69, v12);
            v70 = v106[0];
          }
          if (v70 == -1)
          {
LABEL_161:
            if (v67)
              goto LABEL_16;
            goto LABEL_77;
          }
LABEL_160:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v70])(&v87, &v105);
          goto LABEL_161;
        }
LABEL_184:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v78])(&v87, &v105);
        goto LABEL_185;
      }
      v21 = (JSC::VM *)*((_QWORD *)this + 7);
      v104 = v21;
      v105 = (WTF::StringImpl *)v20;
      if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v105, this);
        v22 = v87;
      }
      else
      {
        v22 = *(WTF::StringImpl **)(v20 + 8);
        if ((v22 & 1) != 0)
          v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, this);
        if (v22)
          *(_DWORD *)v22 += 2;
        v87 = v22;
      }
      if (!v22)
      {
        v23 = 0;
        v26 = 0x100000000;
        goto LABEL_124;
      }
      v23 = *((_QWORD *)v22 + 1);
      v24 = *((_DWORD *)v22 + 1);
      v25 = ((unint64_t)*((unsigned int *)v22 + 4) >> 2) & 1;
      v26 = v24 | (v25 << 32);
      if ((char *)v23 != "default" && v24 == 7)
      {
        if ((_DWORD)v25)
        {
          if (*(_BYTE *)v23 == 100 && *(_DWORD *)(v23 + 1) == 1969317477 && *(_DWORD *)(v23 + 3) == 1953264993)
          {
LABEL_44:
            v27 = &WebCore::parseEnumerationFromString<WebCore::FetchOptionsCache>(WTF::String const&)::mappings;
LABEL_45:
            v28 = 0;
            v29 = *((unsigned __int8 *)v27 + 16);
LABEL_46:
            v30 = v87;
            v87 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v12);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
              goto LABEL_234;
            if (v28)
            {
              JSC::throwTypeError();
              goto LABEL_234;
            }
            HIWORD(v98) = v29 | 0x100;
            goto LABEL_52;
          }
        }
        else if (*(_WORD *)v23 == 100
               && *(_QWORD *)(v23 + 2) == 0x75006100660065
               && *(_QWORD *)(v23 + 6) == 0x74006C00750061)
        {
          goto LABEL_44;
        }
LABEL_124:
        if ((char *)v23 != "no-store" && (_DWORD)v26 == 8)
        {
          if ((v26 & 0xFF00000000) != 0)
          {
            if (*(_BYTE *)v23 == 110 && *(_DWORD *)(v23 + 1) == 1953705327 && *(_DWORD *)(v23 + 4) == 1701998452)
            {
LABEL_130:
              v27 = &off_1E3270638;
              goto LABEL_45;
            }
          }
          else if (*(_WORD *)v23 == 110)
          {
            v29 = 0;
            v28 = 1;
            if (*(_QWORD *)(v23 + 2) != 0x740073002D006FLL || *(_QWORD *)(v23 + 8) != 0x650072006F0074)
              goto LABEL_46;
            goto LABEL_130;
          }
LABEL_224:
          v29 = 0;
          v28 = 1;
          goto LABEL_46;
        }
        if ((char *)v23 == "no-store" && (_DWORD)v26 == 8)
          goto LABEL_130;
        if ((char *)v23 == "only-if-cached" || (_DWORD)v26 != 14)
        {
          if ((char *)v23 != "only-if-cached" || (_DWORD)v26 != 14)
          {
            if ((char *)v23 == "reload" || (_DWORD)v26 != 6)
            {
              v29 = 0;
              v28 = 1;
              if ((char *)v23 != "reload" || (_DWORD)v26 != 6)
                goto LABEL_46;
            }
            else if ((v26 & 0xFF00000000) != 0)
            {
              if (*(_BYTE *)v23 != 114 || *(_DWORD *)(v23 + 1) != 1634692197 || *(_DWORD *)(v23 + 2) != 1684107116)
                goto LABEL_224;
            }
            else
            {
              if (*(_WORD *)v23 != 114)
                goto LABEL_224;
              v29 = 0;
              v28 = 1;
              if (*(_QWORD *)(v23 + 2) != 0x61006F006C0065 || *(_QWORD *)(v23 + 4) != 0x640061006F006CLL)
                goto LABEL_46;
            }
            v27 = &off_1E3270668;
            goto LABEL_45;
          }
        }
        else if ((v26 & 0xFF00000000) != 0)
        {
          if (*(_BYTE *)v23 != 111
            || *(_QWORD *)(v23 + 1) != 0x632D66692D796C6ELL
            || *(_QWORD *)(v23 + 6) != 0x6465686361632D66)
          {
            goto LABEL_224;
          }
        }
        else
        {
          if (*(_WORD *)v23 != 111)
            goto LABEL_224;
          v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v23 + 2), (int16x8_t)xmmword_1968BF740);
          v85.i16[0] = vminvq_u16(v85);
          if (!v85.i32[0])
            goto LABEL_224;
          v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v23 + 12), (int16x8_t)xmmword_1968BF750);
          v86.i16[0] = vminvq_u16(v86);
          if (!v86.i32[0])
            goto LABEL_224;
        }
        v27 = &off_1E3270650;
        goto LABEL_45;
      }
      if ((char *)v23 == "default" && v24 == 7)
        goto LABEL_44;
      if ((char *)v23 == "force-cache" || v24 != 11)
      {
        if ((char *)v23 != "force-cache" || v24 != 11)
        {
          if ((char *)v23 == "no-cache" || v24 != 8)
          {
            if ((char *)v23 != "no-cache" || v24 != 8)
              goto LABEL_124;
          }
          else if ((_DWORD)v25)
          {
            if (*(_BYTE *)v23 != 110 || *(_DWORD *)(v23 + 1) != 1633889647 || *(_DWORD *)(v23 + 4) != 1701340001)
              goto LABEL_124;
          }
          else if (*(_WORD *)v23 != 110
                 || *(_QWORD *)(v23 + 2) != 0x610063002D006FLL
                 || *(_QWORD *)(v23 + 8) != 0x65006800630061)
          {
            goto LABEL_124;
          }
          v27 = &off_1E3270620;
          goto LABEL_45;
        }
      }
      else if ((_DWORD)v25)
      {
        if (*(_BYTE *)v23 != 102
          || *(_QWORD *)(v23 + 1) != 0x6361632D6563726FLL
          || *(_QWORD *)(v23 + 3) != 0x65686361632D6563)
        {
          goto LABEL_124;
        }
      }
      else
      {
        if (*(_WORD *)v23 != 102)
          goto LABEL_124;
        v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v23 + 2), (int16x8_t)xmmword_1968BF720);
        v83.i16[0] = vminvq_u16(v83);
        if (!v83.i32[0])
          goto LABEL_124;
        v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v23 + 6), (int16x8_t)xmmword_1968BF730);
        v84.i16[0] = vminvq_u16(v84);
        if (!v84.i32[0])
          goto LABEL_124;
      }
      v27 = &off_1E3270608;
      goto LABEL_45;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 128) = 1;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = *(unsigned int *)(a1 + 8);
      v4 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v3 == -1)
      {
        if ((_DWORD)v4 == -1)
          return a1;
      }
      else if ((_DWORD)v4 == -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E3275418[v3])(&v9, a1, a2);
        *(_DWORD *)(a1 + 8) = -1;
        return a1;
      }
      v8 = a1;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3275850[v4])(&v8, a1, a2);
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t, uint64_t))off_1E3275418[v5])(&v10, a1, a2);
    *(_DWORD *)(a1 + 8) = -1;
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v6 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3275450[v6])(&v11, a1, a2);
      *(_DWORD *)(a1 + 8) = v6;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsCredentials>>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *this)
{
  JSC::VM *v4;
  uint64_t result;
  unsigned __int16 v6;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  result = WebCore::parseEnumeration<WebCore::FetchOptionsCredentials>(a2, (unint64_t)this);
  v6 = result;
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_8;
  }
  if (v6 <= 0xFFu)
  {
    result = JSC::throwTypeError();
LABEL_8:
    *(_DWORD *)(a1 + 4) = 1;
    return result;
  }
  *(_BYTE *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

uint64_t WebCore::ConversionResult<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::releaseReturnValue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)(a2 + 32))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::optional<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::operator=[abi:sn180100]<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>(v4, v5);
  }
  else
  {
    v2 = result;
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 16) = -1;
    v3 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3275200[v3])(&v6, result, a2 + 8);
      *(_DWORD *)(v2 + 16) = v3;
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::operator=[abi:sn180100]<std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int *)(a1 + 16);
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32751F0[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 16) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3275898[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3275200[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsMode>>(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t result;
  int v6;
  const char *v7;
  int v8;
  int v10;
  char v11;
  char **v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v25 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    result = *(_QWORD *)(this + 8);
    if ((result & 1) != 0)
    {
      result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
      if (!result)
      {
LABEL_6:
        if (result)
          goto LABEL_7;
LABEL_34:
        v11 = 0;
        v10 = 0;
        goto LABEL_45;
      }
    }
    else if (!result)
    {
      goto LABEL_6;
    }
    *(_DWORD *)result += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a2);
  result = v24;
  if (!v24)
    goto LABEL_34;
LABEL_7:
  v6 = *(_DWORD *)(result + 16);
  v7 = *(const char **)(result + 8);
  v8 = *(_DWORD *)(result + 4);
  if (v7 != "cors" && v8 == 4)
  {
    if ((v6 & 4) != 0)
    {
      if (*v7 != 99 || *(_WORD *)(v7 + 1) != 29295 || *((_WORD *)v7 + 1) != 29554)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v7 != 99)
        goto LABEL_16;
      v15 = *(_DWORD *)(v7 + 2);
      v16 = *((_DWORD *)v7 + 1);
      if (v15 != 7471215 || v16 != 7536754)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v7 == "cors" && v8 == 4)
  {
LABEL_41:
    v14 = &WebCore::parseEnumerationFromString<WebCore::FetchOptionsMode>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v7 != "navigate" && v8 == 8)
  {
    if ((v6 & 4) != 0)
    {
      if (*v7 != 110 || *(_DWORD *)(v7 + 1) != 1734964833 || *((_DWORD *)v7 + 1) != 1702125927)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v7 != 110)
        goto LABEL_16;
      v18 = *(_QWORD *)(v7 + 2);
      v19 = *((_QWORD *)v7 + 1);
      if (v18 != 0x67006900760061 || v19 != 0x65007400610067)
        goto LABEL_16;
    }
    goto LABEL_30;
  }
  if (v7 == "navigate" && v8 == 8)
  {
LABEL_30:
    v14 = &off_1E32708C0;
LABEL_42:
    v11 = *((_BYTE *)v14 + 16);
    v10 = 1;
    goto LABEL_43;
  }
  if (v7 == "no-cors" || v8 != 7)
  {
    if (v7 == "no-cors" && v8 == 7)
      goto LABEL_68;
    if (v7 == "same-origin" || v8 != 11)
    {
      if (v8 != 11 || v7 != "same-origin")
        goto LABEL_16;
    }
    else if ((v6 & 4) != 0)
    {
      if (*v7 != 115 || *(_QWORD *)(v7 + 1) != 0x6769726F2D656D61 || *(_QWORD *)(v7 + 3) != 0x6E696769726F2D65)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v7 != 115)
        goto LABEL_16;
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 2), (int16x8_t)xmmword_1968BF700);
      v22.i16[0] = vminvq_u16(v22);
      if (!v22.i32[0])
        goto LABEL_16;
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 6), (int16x8_t)xmmword_1968BF710);
      v23.i16[0] = vminvq_u16(v23);
      if (!v23.i32[0])
        goto LABEL_16;
    }
    v14 = &off_1E32708F0;
    goto LABEL_42;
  }
  if ((v6 & 4) != 0)
  {
    if (*v7 == 110 && *(_DWORD *)(v7 + 1) == 1868770671 && *(_DWORD *)(v7 + 3) == 1936879459)
      goto LABEL_68;
LABEL_16:
    v10 = 0;
    v11 = 0;
    goto LABEL_43;
  }
  if (*(_WORD *)v7 != 110)
    goto LABEL_16;
  v10 = 0;
  if (*(_QWORD *)(v7 + 2) == 0x6F0063002D006FLL)
  {
    v11 = 0;
    if (*(_QWORD *)(v7 + 6) == 0x730072006F0063)
    {
LABEL_68:
      v14 = &off_1E32708D8;
      goto LABEL_42;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_43:
  if (*(_DWORD *)result == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  else
    *(_DWORD *)result -= 2;
LABEL_45:
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), !(_DWORD)result))
  {
    if (v10)
    {
      *(_BYTE *)a1 = v11;
      *(_DWORD *)(a1 + 4) = 0;
      return result;
    }
    result = JSC::throwTypeError();
  }
  *(_DWORD *)(a1 + 4) = 1;
  return result;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::RequestPriority>>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *this)
{
  JSC::VM *v4;
  uint64_t result;
  unsigned __int16 v6;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  result = WebCore::parseEnumeration<WebCore::RequestPriority>(a2, (unint64_t)this);
  v6 = result;
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_8;
  }
  if (v6 <= 0xFFu)
  {
    result = JSC::throwTypeError();
LABEL_8:
    *(_DWORD *)(a1 + 4) = 1;
    return result;
  }
  *(_BYTE *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::FetchOptionsRedirect>>(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t result;
  const char *v6;
  int v7;
  unint64_t v8;
  int v10;
  char v11;
  uint64_t v13;
  BOOL v14;
  char **v15;
  int v16;
  uint64_t v20;
  unint64_t v21;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    result = *(_QWORD *)(this + 8);
    if ((result & 1) != 0)
    {
      result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
      if (!result)
      {
LABEL_6:
        if (result)
          goto LABEL_7;
LABEL_40:
        v11 = 0;
        v10 = 0;
        goto LABEL_47;
      }
    }
    else if (!result)
    {
      goto LABEL_6;
    }
    *(_DWORD *)result += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a2);
  result = v20;
  if (!v20)
    goto LABEL_40;
LABEL_7:
  v6 = *(const char **)(result + 8);
  v7 = *(_DWORD *)(result + 4);
  v8 = ((unint64_t)*(unsigned int *)(result + 16) >> 2) & 1;
  if (v6 != "error" && v7 == 5)
  {
    if ((_DWORD)v8)
    {
      if (*v6 != 101 || *(_WORD *)(v6 + 1) != 29298 || *(_WORD *)(v6 + 3) != 29295)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 101 || *(_QWORD *)(v6 + 2) != 0x72006F00720072)
    {
      goto LABEL_16;
    }
LABEL_43:
    v15 = &WebCore::parseEnumerationFromString<WebCore::FetchOptionsRedirect>(WTF::String const&)::mappings;
    goto LABEL_44;
  }
  if (v6 == "error" && v7 == 5)
    goto LABEL_43;
  v13 = v8 << 32;
  v14 = v7 != 6;
  if (v6 == "follow" || v7 != 6)
  {
    v16 = *(_DWORD *)(result + 4);
    if (v6 == "follow" && v7 == 6)
      goto LABEL_27;
LABEL_31:
    if (v6 == "manual" || v14)
    {
      if (v7 == 6 && v6 == "manual")
        goto LABEL_38;
    }
    else
    {
      if (!v16)
      {
LABEL_38:
        v15 = &off_1E3270938;
        goto LABEL_44;
      }
      if (v13)
      {
        if (*v6 == 109 && *(_DWORD *)(v6 + 1) == 1635085921 && *(_DWORD *)(v6 + 2) == 1818326382)
          goto LABEL_38;
      }
      else if (*(_WORD *)v6 == 109
             && *(_QWORD *)(v6 + 4) == 0x6C00610075006ELL
             && *(_QWORD *)(v6 + 2) == 0x610075006E0061)
      {
        goto LABEL_38;
      }
    }
LABEL_16:
    v10 = 0;
    v11 = 0;
    goto LABEL_45;
  }
  if (!(_DWORD)v8)
  {
    if (*(_WORD *)v6 == 102 && *(_QWORD *)(v6 + 2) == 0x6F006C006C006FLL && *(_QWORD *)(v6 + 4) == 0x77006F006C006CLL)
      goto LABEL_27;
    v14 = 0;
    v16 = 6;
    goto LABEL_31;
  }
  if (*v6 != 102 || *(_DWORD *)(v6 + 1) != 1869376623 || *(_DWORD *)(v6 + 2) != 2003790956)
  {
    v14 = 0;
    v16 = 6;
    v13 = 0x100000000;
    goto LABEL_31;
  }
LABEL_27:
  v15 = &off_1E3270920;
LABEL_44:
  v11 = *((_BYTE *)v15 + 16);
  v10 = 1;
LABEL_45:
  if (*(_DWORD *)result == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  else
    *(_DWORD *)result -= 2;
LABEL_47:
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), !(_DWORD)result))
  {
    if (v10)
    {
      *(_BYTE *)a1 = v11;
      *(_DWORD *)(a1 + 4) = 0;
      return result;
    }
    result = JSC::throwTypeError();
  }
  *(_DWORD *)(a1 + 4) = 1;
  return result;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::ReferrerPolicy>>(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t result;
  unsigned int v6;
  int v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  __int32 v13;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint8x16_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v38 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, a2);
    result = (uint64_t)v37;
    if (!v37)
      goto LABEL_7;
    goto LABEL_11;
  }
  result = *(_QWORD *)(this + 8);
  if ((result & 1) == 0)
  {
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
  if (result)
LABEL_5:
    *(_DWORD *)result += 2;
LABEL_6:
  if (!result)
  {
LABEL_7:
    v6 = 256;
    goto LABEL_56;
  }
LABEL_11:
  v7 = *(_DWORD *)(result + 4);
  if (!v7)
  {
    v13 = 0;
LABEL_53:
    v18 = 1;
    goto LABEL_54;
  }
  v8 = *(const char **)(result + 8);
  v9 = ((unint64_t)*(unsigned int *)(result + 16) >> 2) & 1;
  v10 = v9 << 32;
  v11 = v7 != 11;
  if (v8 == "no-referrer" || v7 != 11)
  {
    if (v7 == 11 && v8 == "no-referrer")
      goto LABEL_51;
    if (v8 != "no-referrer-when-downgrade" && v7 == 26)
    {
      if ((_DWORD)v9)
      {
        if (*v8 != 110)
          goto LABEL_19;
        v15 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v8 + 10), (int8x16_t)xmmword_1968BF790), vceqq_s8(*(int8x16_t *)(v8 + 1), (int8x16_t)xmmword_1968BF780));
        v15.i8[0] = vminvq_u8((uint8x16_t)v15);
      }
      else
      {
        if (*(_WORD *)v8 != 110)
          goto LABEL_19;
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF760);
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0])
          goto LABEL_19;
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 4), (int16x8_t)xmmword_1968BF7A0);
        v24.i16[0] = vminvq_u16(v24);
        if (!v24.i32[0])
          goto LABEL_19;
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 20), (int16x8_t)xmmword_1968BF7B0);
        v25.i16[0] = vminvq_u16(v25);
        if (!v25.i32[0])
          goto LABEL_19;
        v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 36), (int16x8_t)xmmword_1968BF7C0);
        v15.i16[0] = vminvq_u16(v15);
      }
      if (!v15.i32[0])
        goto LABEL_19;
LABEL_44:
      v12 = &off_1E3270248;
      goto LABEL_52;
    }
    if (v7 == 26 && v8 == "no-referrer-when-downgrade")
      goto LABEL_44;
    if (v8 != "origin" && v7 == 6)
    {
      if (!(_DWORD)v9)
      {
        if (*(_WORD *)v8 != 111
          || *(_QWORD *)(v8 + 2) != 0x69006700690072
          || *(_QWORD *)(v8 + 4) != 0x6E006900670069)
        {
          goto LABEL_19;
        }
LABEL_94:
        v12 = &off_1E3270260;
        goto LABEL_52;
      }
      if (*v8 == 111 && *(_DWORD *)(v8 + 1) == 1768384882 && *(_DWORD *)(v8 + 2) == 1852401513)
        goto LABEL_94;
LABEL_120:
      v10 = 0x100000000;
      goto LABEL_19;
    }
    if (v7 == 6 && v8 == "origin")
      goto LABEL_94;
    if (v8 == "origin-when-cross-origin" || v7 != 24)
    {
      if (v7 != 24 || v8 != "origin-when-cross-origin")
        goto LABEL_19;
    }
    else if ((_DWORD)v9)
    {
      if (*v8 != 111)
        goto LABEL_120;
      v30 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v8 + 8), (int8x16_t)xmmword_1968BF7E0), vceqq_s8(*(int8x16_t *)(v8 + 1), (int8x16_t)xmmword_1968BF7D0));
      v30.i8[0] = vminvq_u8(v30);
      if (!v30.i32[0])
        goto LABEL_120;
    }
    else
    {
      if (*(_WORD *)v8 != 111)
        goto LABEL_19;
      v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF7F0);
      v34.i16[0] = vminvq_u16(v34);
      if (!v34.i32[0])
        goto LABEL_19;
      v35 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v8 + 1), (int16x8_t)xmmword_1968BF800);
      v35.i16[0] = vminvq_u16(v35);
      if (!v35.i32[0])
        goto LABEL_19;
      v36 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v8 + 2), (int16x8_t)xmmword_1968BF810);
      v36.i16[0] = vminvq_u16(v36);
      if (!v36.i32[0])
        goto LABEL_19;
    }
    v12 = &off_1E3270278;
    goto LABEL_52;
  }
  if ((_DWORD)v9)
  {
    if (*v8 != 110 || *(_QWORD *)(v8 + 1) != 0x7272656665722D6FLL || *(_QWORD *)(v8 + 3) != 0x7265727265666572)
      goto LABEL_18;
    goto LABEL_51;
  }
  if (*(_WORD *)v8 != 110)
  {
LABEL_18:
    v11 = 0;
    goto LABEL_19;
  }
  v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF760);
  v16.i16[0] = vminvq_u16(v16);
  v11 = v16.i8[0];
  if (v16.i32[0])
  {
    v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 6), (int16x8_t)xmmword_1968BF770);
    v17.i16[0] = vminvq_u16(v17);
    v11 = v17.i8[0];
    if (v17.i32[0])
    {
LABEL_51:
      v12 = &WebCore::parseEnumerationFromString<WebCore::ReferrerPolicy>(WTF::String const&)::mappings;
      goto LABEL_52;
    }
  }
LABEL_19:
  if (v8 == "same-origin" || v11)
  {
    if (v7 == 11 && v8 == "same-origin")
      goto LABEL_47;
  }
  else
  {
    if ((v10 & 0x100000000) != 0)
    {
      if (*v8 != 115 || *(_QWORD *)(v8 + 1) != 0x6769726F2D656D61 || *(_QWORD *)(v8 + 3) != 0x6E696769726F2D65)
      {
        v10 = 0x100000000;
        goto LABEL_26;
      }
LABEL_47:
      v12 = &off_1E3270290;
      goto LABEL_52;
    }
    if (*(_WORD *)v8 == 115)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF700);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 6), (int16x8_t)xmmword_1968BF710);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
          goto LABEL_47;
      }
    }
  }
LABEL_26:
  if (v8 == "strict-origin" || v7 != 13)
  {
    if (v7 == 13 && v8 == "strict-origin")
      goto LABEL_32;
    if (v8 != "strict-origin-when-cross-origin" && v7 == 31)
    {
      if ((v10 & 0x100000000) != 0)
      {
        if (*v8 != 115)
          goto LABEL_133;
        v26 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v8 + 15), (int8x16_t)xmmword_1968BF7E0), vceqq_s8(*(int8x16_t *)(v8 + 1), (int8x16_t)xmmword_1968BF840));
        v26.i8[0] = vminvq_u8((uint8x16_t)v26);
      }
      else
      {
        if (*(_WORD *)v8 != 115)
          goto LABEL_133;
        v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF820);
        v27.i16[0] = vminvq_u16(v27);
        v18 = v27.i32[0];
        if (!v27.i32[0])
          goto LABEL_135;
        v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 14), (int16x8_t)xmmword_1968BF850);
        v28.i16[0] = vminvq_u16(v28);
        v18 = v28.i32[0];
        if (!v28.i32[0])
          goto LABEL_135;
        v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 30), (int16x8_t)xmmword_1968BF800);
        v29.i16[0] = vminvq_u16(v29);
        v18 = v29.i32[0];
        if (!v29.i32[0])
          goto LABEL_135;
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 46), (int16x8_t)xmmword_1968BF810);
        v26.i16[0] = vminvq_u16(v26);
      }
      v13 = v26.i32[0];
      if (v26.i32[0])
      {
LABEL_85:
        v12 = &off_1E32702C0;
        goto LABEL_52;
      }
LABEL_134:
      v18 = 0;
      goto LABEL_54;
    }
    if (v7 == 31 && v8 == "strict-origin-when-cross-origin")
      goto LABEL_85;
    if (v8 == "unsafe-url" || v7 != 10)
    {
      if (v8 != "unsafe-url" || v7 != 10)
        goto LABEL_133;
    }
    else if ((v10 & 0x100000000) != 0)
    {
      if (*v8 != 117 || *(_QWORD *)(v8 + 1) != 0x72752D656661736ELL || *(_QWORD *)(v8 + 2) != 0x6C72752D65666173)
        goto LABEL_133;
    }
    else
    {
      if (*(_WORD *)v8 != 117)
        goto LABEL_133;
      v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF860);
      v32.i16[0] = vminvq_u16(v32);
      v18 = v32.i32[0];
      if (!v32.i32[0])
        goto LABEL_135;
      v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 4), (int16x8_t)xmmword_1968BF870);
      v33.i16[0] = vminvq_u16(v33);
      v13 = v33.i32[0];
      if (!v33.i32[0])
        goto LABEL_134;
    }
    v12 = &off_1E32702D8;
    goto LABEL_52;
  }
  if ((v10 & 0x100000000) != 0)
  {
    if (*v8 == 115 && *(_QWORD *)(v8 + 1) == 0x726F2D7463697274 && *(_QWORD *)(v8 + 5) == 0x6E696769726F2D74)
      goto LABEL_32;
    goto LABEL_133;
  }
  if (*(_WORD *)v8 != 115)
  {
LABEL_133:
    v13 = 0;
    goto LABEL_134;
  }
  v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1968BF820);
  v21.i16[0] = vminvq_u16(v21);
  v18 = v21.i32[0];
  if (v21.i32[0])
  {
    v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 10), (int16x8_t)xmmword_1968BF830);
    v22.i16[0] = vminvq_u16(v22);
    v13 = v22.i32[0];
    if (v22.i32[0])
    {
LABEL_32:
      v12 = &off_1E32702A8;
LABEL_52:
      v13 = *((unsigned __int8 *)v12 + 16);
      goto LABEL_53;
    }
    goto LABEL_134;
  }
LABEL_135:
  v13 = 0;
LABEL_54:
  v6 = v13 | (v18 << 8);
  if (*(_DWORD *)result == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  else
    *(_DWORD *)result -= 2;
LABEL_56:
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), !(_DWORD)result))
  {
    if (v6 > 0xFF)
    {
      *(_BYTE *)a1 = v6;
      *(_DWORD *)(a1 + 4) = 0;
      return result;
    }
    result = JSC::throwTypeError();
  }
  *(_DWORD *)(a1 + 4) = 1;
  return result;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::FetchResponse::Init>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  JSC::JSGlobalObject *v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)();
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *result;
  double v30;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v32;
  _BYTE v33[16];
  int v34;
  __int16 v35;
  WTF::StringImpl *v36;
  _BYTE v37[16];
  int v38;
  char v39;
  JSC::VM *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  _DWORD v43[4];
  unsigned int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v40 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v36 = 0;
    v37[0] = 0;
    v39 = 0;
    v35 = 200;
    goto LABEL_52;
  }
  v5 = a2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a1 + 48) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  v35 = 200;
  v36 = 0;
  v37[0] = 0;
  v39 = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = (JSC::JSGlobalObject *)JSC::JSObject::get(v7, v5, (unint64_t)v42);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v8);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    goto LABEL_90;
  if (v9 != (JSC::JSGlobalObject *)10)
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::convert((uint64_t)&v42, v5, v9);
    v10 = v45;
    if (v45)
    {
      *(_DWORD *)(a1 + 48) = 1;
      v13 = v10;
LABEL_24:
      if (v13 != -1)
        ((void (*)(_BYTE *, _DWORD *))off_1E32758A8[v13])(v33, v43);
      if (v10)
        goto LABEL_67;
      goto LABEL_27;
    }
    v33[0] = 0;
    v34 = -1;
    v11 = v44;
    if (v44 == -1)
    {
      if (v39)
      {
        if (v38 == -1)
        {
LABEL_23:
          v13 = v45;
          goto LABEL_24;
        }
        ((void (*)(_BYTE **, _BYTE *))off_1E32751F0[v38])(&v41, v37);
        v38 = -1;
LABEL_21:
        if (v34 != -1)
          ((void (*)(_BYTE **, _BYTE *))off_1E32751F0[v34])(&v41, v33);
        goto LABEL_23;
      }
      v37[0] = 0;
      v38 = -1;
    }
    else
    {
      v12 = off_1E3275200[v44];
      ((void (*)(_BYTE **, _BYTE *, _DWORD *))v12)(&v41, v33, v43);
      v34 = v11;
      if (v39)
      {
        v41 = v37;
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E3275898[v11])(&v41, v37, v33);
        goto LABEL_21;
      }
      v37[0] = 0;
      v38 = -1;
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))v12)(&v41, v37, v33);
      v38 = v11;
    }
    v39 = 1;
    goto LABEL_21;
  }
LABEL_27:
  WTF::AtomStringImpl::addLiteral();
  v14 = v42;
  v16 = JSC::JSObject::get(v7, v5, (unint64_t)v42);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    goto LABEL_90;
  if (v16 == 10)
  {
    LOWORD(v16) = 200;
  }
  else
  {
    v42 = (WTF::StringImpl *)v16;
    v17 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if (v16 < 0xFFFE000000000000 || (v16 & 0x80000000) != 0)
    {
      if (v16 >= 0xFFFE000000000000)
      {
        v18 = (double)(int)v16;
      }
      else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v32 = (JSC::VM *)*((_QWORD *)v5 + 7);
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v42, v5);
        v17 = v32;
      }
      else
      {
        *(_QWORD *)&v18 = v16 - 0x2000000000000;
      }
      if (*((_DWORD *)v17 + 20))
      {
        v30 = v18;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
        v18 = v30;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_90;
      }
      LOWORD(v16) = 0;
      if (fabs(v18) != INFINITY && v18 != 0.0)
      {
        v19 = -floor(-v18);
        v20 = floor(v18);
        if (v18 >= 0.0)
          v21 = v20;
        else
          v21 = v19;
        v22 = fmod(v21, 65536.0);
        if (v22 < 0.0)
          v22 = v22 + 65536.0;
        LODWORD(v16) = (int)v22;
      }
    }
  }
  v35 = v16;
  WTF::AtomStringImpl::addLiteral();
  v23 = v42;
  v24 = JSC::JSObject::get(v7, v5, (unint64_t)v42);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v4))
  {
    if (v24 != 10)
    {
      WebCore::valueToByteAtomString(v5, v24, (uint64_t)&v42);
      v26 = v43[0];
      if (v43[0])
      {
        *(_DWORD *)(a1 + 48) = 1;
LABEL_65:
        if (v26 != -1)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32712B8[v26])(v33, &v42);
        goto LABEL_67;
      }
      v25 = v42;
LABEL_57:
      v42 = 0;
      v27 = v36;
      v36 = v25;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, a2);
          v25 = v36;
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      *(_WORD *)a1 = v35;
      v36 = 0;
      *(_QWORD *)(a1 + 8) = v25;
      *(_BYTE *)(a1 + 16) = 0;
      a2 = (JSC::JSGlobalObject *)(a1 + 16);
      *(_BYTE *)(a1 + 40) = 0;
      if (v39)
      {
        *(_DWORD *)(a1 + 32) = -1;
        v28 = v38;
        if (v38 != -1)
        {
          ((void (*)(_BYTE *, JSC::JSGlobalObject *, _BYTE *))off_1E3275200[v38])(v33, a2, v37);
          *(_DWORD *)(a1 + 32) = v28;
        }
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_DWORD *)(a1 + 48) = 0;
      v26 = v43[0];
      goto LABEL_65;
    }
LABEL_52:
    v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *(_DWORD *)v25 += 2;
    v43[0] = 0;
    goto LABEL_57;
  }
LABEL_90:
  *(_DWORD *)(a1 + 48) = 1;
LABEL_67:
  if (v39)
  {
    if (v38 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E32751F0[v38])(&v42, v37);
    v38 = -1;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFetchResponse>::construct(JSC *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t hasExceptionsAfterHandlingTraps;
  uint64_t v16;
  _DWORD *v17;
  JSCell *v18;
  JSC::JSCell *v19;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v21;
  JSC::JSGlobalObject *v22;
  WebCore::JSFetchResponse *v23;
  WebCore::JSDOMGlobalObject *v24;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v26;
  JSC::Structure *v27;
  unint64_t SubclassStructure;
  WTF::StringImpl *v30;
  WebCore::JSFetchResponse *v31;
  JSC::VM *v32;
  WebCore::JSDOMGlobalObject *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  _BYTE v36[16];
  int v37;
  char v38;
  char v39[8];
  int v40;
  char v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  int v44;
  __int16 v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  char v49;
  int v50;
  JSC::VM *v51;
  char v52;
  char v53[8];
  _BYTE v54[24];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 7);
  v51 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v51, (uint64_t)"Response", 9);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  v8 = *(_DWORD *)(a2 + 32);
  if (v8 == 1 || *(_QWORD *)(a2 + 48) == 10)
  {
    v54[0] = 0;
    v54[16] = 0;
    v55 = 0;
  }
  else
  {
    WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::convert(a1, *(JSC::JSArrayBufferView **)(a2 + 48), (uint64_t)v53);
    v9 = v55;
    if (v55)
    {
      v18 = 0;
LABEL_45:
      if (v9 != -1)
        ((void (*)(__int16 *, _BYTE *))off_1E3275888[v9])(&v45, v54);
      return v18;
    }
    v8 = *(_DWORD *)(a2 + 32);
  }
  if ((unint64_t)(v8 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v10 = 10;
  else
    v10 = *(_QWORD *)(a2 + 56);
  WebCore::convertDictionary<WebCore::FetchResponse::Init>((uint64_t)&v45, a1, (JSC::JSCell *)v10);
  v11 = v50;
  if (v50)
  {
    v18 = 0;
LABEL_42:
    if (v11 != -1)
      ((void (*)(_DWORD **, __int16 *))off_1E32758C8[v11])(&v34, &v45);
    v9 = v55;
    goto LABEL_45;
  }
  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>>::releaseReturnValue((uint64_t)v53, (uint64_t)v39);
  if (!v50)
  {
    LOWORD(v34) = v45;
    v12 = v46;
    v46 = 0;
    v35 = v12;
    v36[0] = 0;
    v38 = 0;
    if (v49)
    {
      v37 = -1;
      v13 = v48;
      if (v48 != -1)
      {
        ((void (*)(_DWORD **, _BYTE *, uint64_t *))off_1E3275200[v48])(&v42, v36, &v47);
        v37 = v13;
      }
      v38 = 1;
    }
    WebCore::FetchResponse::create(v7, (uint64_t)v39, (unsigned __int16 *)&v34, (uint64_t)&v42);
    if (v38)
    {
      if (v37 != -1)
        ((void (*)(char *, _BYTE *))off_1E32751F0[v37])(&v52, v36);
      v37 = -1;
    }
    hasExceptionsAfterHandlingTraps = (uint64_t)v35;
    v35 = 0;
    if (hasExceptionsAfterHandlingTraps)
    {
      if (*(_DWORD *)hasExceptionsAfterHandlingTraps == 2)
        hasExceptionsAfterHandlingTraps = WTF::StringImpl::destroy((WTF::StringImpl *)hasExceptionsAfterHandlingTraps, v14);
      else
        *(_DWORD *)hasExceptionsAfterHandlingTraps -= 2;
    }
    if (v41 && v40 != -1)
      hasExceptionsAfterHandlingTraps = ((uint64_t (*)(_DWORD **, char *))off_1E3275418[v40])(&v34, v39);
    if (*(_DWORD *)(v4 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      {
LABEL_65:
        v18 = 0;
LABEL_39:
        if (v44 != -1)
          ((void (*)(_DWORD **, _DWORD **))off_1E32758B8[v44])(&v34, &v42);
        v11 = v50;
        goto LABEL_42;
      }
    }
    if (!v44)
    {
      v16 = *(_QWORD *)(v5 + 40);
      v17 = v42;
      v42 = 0;
      v34 = v17;
      v18 = (JSCell *)WebCore::toJSNewlyCreated(hasExceptionsAfterHandlingTraps, v16, (WebCore::JSDOMGlobalObject *)&v34);
      if (v34)
      {
        if (v34[6] == 1)
          (*(void (**)(void))(*(_QWORD *)v34 + 16))();
        else
          --v34[6];
      }
      goto LABEL_31;
    }
    if (v44 == 1)
    {
      LOBYTE(v34) = (_BYTE)v42;
      v30 = v43;
      v43 = 0;
      v35 = v30;
      if (!*(_QWORD *)(v4 + 16))
      {
        WebCore::propagateExceptionSlowPath(a1, &v51, (unsigned __int8 *)&v34);
        v30 = v35;
      }
      v35 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v14);
        else
          *(_DWORD *)v30 -= 2;
      }
      v18 = 0;
LABEL_31:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
        v19 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v19 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v19);
          if (Object)
          {
            v22 = Object;
            if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
            {
              v23 = (WebCore::JSFetchResponse *)*((_QWORD *)a1 + 7);
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v21);
              if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
              {
                v26 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSFetchResponse>(v23, FunctionRealm, v24);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v22, v26, v27);
                if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
                  JSC::JSObject::setStructure(v18, v23, SubclassStructure);
              }
            }
          }
        }
        if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
          goto LABEL_39;
      }
      goto LABEL_65;
    }
  }
  v31 = (WebCore::JSFetchResponse *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSFetchResponse::prototype(v31, v32, v33);
}

uint64_t WebCore::JSFetchResponse::prototype(WebCore::JSFetchResponse *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSFetchResponse>(this, a2, a3) + 48);
}

WTF::StringImpl *WebCore::JSFetchResponsePrototype::finishCreation(WebCore::JSFetchResponsePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(a2, (uint64_t)&WebCore::JSFetchResponse::s_info, (uint64_t)&WebCore::JSFetchResponsePrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSFetchResponse::destroy(WebCore::JSFetchResponse *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSFetchResponse::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFetchResponse::JSFetchResponse(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSFetchResponse::createPrototype(WebCore::JSFetchResponse *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSFetchResponsePrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSFetchResponsePrototype::create(WebCore::JSFetchResponsePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSFetchResponsePrototype::finishCreation((WebCore::JSFetchResponsePrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchResponse>,(WebCore::DOMConstructorID)91>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 728);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructor<WebCore::JSFetchResponse>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSFetchResponse>((WebCore::JSFetchResponse *)a1, (JSC::VM *)a2, v16)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSFetchResponse::s_info, &WebCore::JSFetchResponseConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 728) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFetchResponseConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFetchResponsePrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFetchResponse>,(WebCore::DOMConstructorID)91>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFetchResponse_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *((_QWORD *)a2 + 3);
  v3 = v2 + 288;
  v4 = *(unsigned __int8 *)(v2 + 544);
  v5 = v2 + 552;
  if (v4)
    v5 = v3;
  v6 = *(_BYTE *)(v5 + 234) & 7;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (uint64_t *)(v7 + 41968);
  if ((byte_1EE3352B4 & 1) == 0)
  {
    dword_1ECE77920 += 2;
    byte_1EE3352B4 = 1;
    dword_1ECE77940 += 2;
    qword_1EE3354A8 = (uint64_t)&dword_1ECE77920;
    unk_1EE3354B0 = &dword_1ECE77940;
    dword_1ECE77960 += 2;
    qword_1EE3354B8 = (uint64_t)&dword_1ECE77960;
    dword_1ECE77980 += 2;
    qword_1EE3354C0 = (uint64_t)&dword_1ECE77980;
    dword_1ECE779A0 += 2;
    qword_1EE3354C8 = (uint64_t)&dword_1ECE779A0;
    dword_1ECE779C0 += 2;
    qword_1EE3354D0 = (uint64_t)&dword_1ECE779C0;
  }
  v9 = *(_QWORD *)&_MergedGlobals_924[8 * v6 + 504];
  if (!v9)
    return *v8;
  v10 = *(_DWORD *)v9;
  v11 = *(_DWORD *)(v9 + 4);
  *(_DWORD *)v9 += 2;
  if (v11)
  {
    if (v11 != 1)
    {
LABEL_8:
      v12 = *(_QWORD *)(v7 + 64760);
      if (!v12 || v9 != *(_QWORD *)(v12 + 8))
      {
        v12 = JSC::jsStringWithCacheSlowCase();
        v10 = *(_DWORD *)v9 - 2;
      }
      goto LABEL_11;
    }
    v14 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v15 = *v14;
    }
    else
    {
      v16 = *(unsigned __int16 *)v14;
      if (v16 > 0xFF)
        goto LABEL_8;
      v15 = v16;
    }
    v12 = *(_QWORD *)(v7 + 8 * v15 + 42216);
  }
  else
  {
    v12 = *v8;
  }
LABEL_11:
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, a2);
  return v12;
}

uint64_t WebCore::jsFetchResponse_url(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::FetchResponse::url(*(WebCore::FetchResponse **)(a2 + 24));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *((_DWORD *)v5 + 1);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(WTF::StringImpl **)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

uint64_t WebCore::jsFetchResponse_redirected(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = v2 + 288;
  v4 = *(unsigned __int8 *)(v2 + 544);
  v5 = v2 + 552;
  if (v4)
    v5 = v3;
  if ((*(_WORD *)(v5 + 232) & 0x40) != 0)
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsFetchResponse_status(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = v2 + 288;
  v4 = *(unsigned __int8 *)(v2 + 544);
  v5 = v2 + 552;
  if (v4)
    v6 = v3;
  else
    v6 = v5;
  WebCore::ResourceResponse::platformLazyInit(v6, 1);
  return *(unsigned __int16 *)(v6 + 136) | 0xFFFE000000000000;
}

uint64_t WebCore::jsFetchResponse_ok(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = v2 + 288;
  v4 = *(unsigned __int8 *)(v2 + 544);
  v5 = v2 + 552;
  if (v4)
    v6 = v3;
  else
    v6 = v5;
  WebCore::ResourceResponse::platformLazyInit(v6, 1);
  if ((*(__int16 *)(v6 + 136) - 200) >= 0x64)
    return 6;
  else
    return 7;
}

uint64_t WebCore::jsFetchResponse_statusText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = v3 + 288;
  v5 = *(unsigned __int8 *)(v3 + 544);
  v6 = v3 + 552;
  if (v5)
    v7 = v4;
  else
    v7 = v6;
  WebCore::ResourceResponse::platformLazyInit(v7, 2);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v7 + 64);
  if (!v9)
    return *(_QWORD *)(v8 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v8 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_7;
      v14 = v15;
    }
    return *(_QWORD *)(v8 + 8 * v14 + 42216);
  }
LABEL_7:
  v11 = *(_QWORD *)(v8 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

unint64_t WebCore::jsFetchResponse_headers(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::FetchHeaders>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF::StringImpl ****)(*(_QWORD *)(a2 + 24) + 152));
}

uint64_t WebCore::jsFetchResponse_body(JSC *a1, int *a2)
{
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  JSC::VM *v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(WTF::StringImpl **)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  if (!*(_BYTE *)(v4 + 128) || *(_BYTE *)(v4 + 192))
  {
    v9[0] = 0;
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD **)(v4 + 120);
  if (v6)
    goto LABEL_8;
  WebCore::FetchBodyOwner::createReadableStream((WebCore::FetchBodyOwner *)v4, (uint64_t)a1, (uint64_t)v12);
  if (!v14)
  {
    if (*(_BYTE *)(v4 + 128))
    {
      v6 = *(_DWORD **)(v4 + 120);
      if (!v6)
      {
LABEL_9:
        v9[0] = v6;
        goto LABEL_10;
      }
LABEL_8:
      ++*v6;
      goto LABEL_9;
    }
    __break(1u);
  }
  LOBYTE(v9[0]) = v12[0];
  v9[1] = v13;
  v10 = 1;
LABEL_11:
  v7 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::ReadableStream>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>>>(a1, v5, &v11, (uint64_t)v9);
  if (v10 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E3275C98[v10])(v12, v9);
  return v7;
}

uint64_t WebCore::jsFetchResponse_bodyUsed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 128)
    && (*(_BYTE *)(v2 + 136)
     || (v4 = *(_QWORD *)(v2 + 120)) != 0
     && WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v4 + 8))))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t WebCore::JSFetchResponse::subspaceForImpl(WebCore::JSFetchResponse *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 744);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 744))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 744);
    *(_QWORD *)(v9 + 744) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 744);
  *(_QWORD *)(v3 + 744) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSFetchResponseOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSFetchResponseOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

unint64_t WebCore::wrap<WebCore::FetchResponse>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[6];
  v14 = a3;
  v12 = WebCore::toJSNewlyCreated(a1, a2, (WebCore::JSDOMGlobalObject *)&v14);
  if (v14)
  {
    if (v14[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 16))();
    else
      --v14[6];
  }
  return v12;
}

unint64_t WebCore::JSFetchResponse::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSFetchResponse *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSFetchResponse *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSFetchResponse::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSFetchResponse::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

void WebCore::JSEXTBlendMinMaxOwner::~JSEXTBlendMinMaxOwner(WebCore::JSEXTBlendMinMaxOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTClipControlOwner::~JSEXTClipControlOwner(WebCore::JSEXTClipControlOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTColorBufferFloatOwner::~JSEXTColorBufferFloatOwner(WebCore::JSEXTColorBufferFloatOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTColorBufferHalfFloatOwner::~JSEXTColorBufferHalfFloatOwner(WebCore::JSEXTColorBufferHalfFloatOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTConservativeDepthOwner::~JSEXTConservativeDepthOwner(WebCore::JSEXTConservativeDepthOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTDepthClampOwner::~JSEXTDepthClampOwner(WebCore::JSEXTDepthClampOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTDisjointTimerQueryOwner::~JSEXTDisjointTimerQueryOwner(WebCore::JSEXTDisjointTimerQueryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTDisjointTimerQueryWebGL2Owner::~JSEXTDisjointTimerQueryWebGL2Owner(WebCore::JSEXTDisjointTimerQueryWebGL2Owner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTFloatBlendOwner::~JSEXTFloatBlendOwner(WebCore::JSEXTFloatBlendOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTFragDepthOwner::~JSEXTFragDepthOwner(WebCore::JSEXTFragDepthOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTPolygonOffsetClampOwner::~JSEXTPolygonOffsetClampOwner(WebCore::JSEXTPolygonOffsetClampOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTRenderSnormOwner::~JSEXTRenderSnormOwner(WebCore::JSEXTRenderSnormOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTShaderTextureLODOwner::~JSEXTShaderTextureLODOwner(WebCore::JSEXTShaderTextureLODOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTTextureCompressionBPTCOwner::~JSEXTTextureCompressionBPTCOwner(WebCore::JSEXTTextureCompressionBPTCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTTextureCompressionRGTCOwner::~JSEXTTextureCompressionRGTCOwner(WebCore::JSEXTTextureCompressionRGTCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTTextureFilterAnisotropicOwner::~JSEXTTextureFilterAnisotropicOwner(WebCore::JSEXTTextureFilterAnisotropicOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTTextureMirrorClampToEdgeOwner::~JSEXTTextureMirrorClampToEdgeOwner(WebCore::JSEXTTextureMirrorClampToEdgeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTTextureNorm16Owner::~JSEXTTextureNorm16Owner(WebCore::JSEXTTextureNorm16Owner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEXTsRGBOwner::~JSEXTsRGBOwner(WebCore::JSEXTsRGBOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSElementInternalsOwner::~JSElementInternalsOwner(WebCore::JSElementInternalsOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSErrorCallback::hasCallback(WebCore::JSErrorCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSEventOwner::~JSEventOwner(WebCore::JSEventOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEventSourceOwner::~JSEventSourceOwner(WebCore::JSEventSourceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSEventTargetOwner::~JSEventTargetOwner(WebCore::JSEventTargetOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFaceDetectorOwner::~JSFaceDetectorOwner(WebCore::JSFaceDetectorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFetchHeadersOwner::~JSFetchHeadersOwner(WebCore::JSFetchHeadersOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFetchRequestOwner::~JSFetchRequestOwner(WebCore::JSFetchRequestOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFetchResponseOwner::~JSFetchResponseOwner(WebCore::JSFetchResponseOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_getElementById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::DocumentFragment *v10;
  JSC::JSRopeString *v11;
  JSC::JSRopeString *v12;
  WTF::StringImpl *v13;
  JSC::JSGlobalObject *v14;
  WebCore::Node *ElementById;
  WTF::StringImpl *v16;
  WebCore::Element *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  JSValue v23;
  JSC::VM *v24;
  JSC::JSRopeString *v25;
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "DocumentFragment", "getElementById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentFragment::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentFragment::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "DocumentFragment", "getElementById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v10 = *(WebCore::DocumentFragment **)(v5 + 24);
  v11 = (JSC::JSRopeString *)*((_QWORD *)a2 + 6);
  v25 = v11;
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || (v12 = v11, *((_BYTE *)v11 + 5) != 2))
    v12 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v25, this);
  v13 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  if ((v13 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString(v12, this);
  }
  else
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v13 += 2;
      goto LABEL_14;
    }
    WTF::AtomStringImpl::lookUpSlowCase(v13, a2);
  }
  v13 = v26;
LABEL_14:
  v14 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v26 = v13;
  ElementById = WebCore::DocumentFragment::getElementById(v10, (const WTF::AtomString *)&v26);
  if (ElementById)
    v18 = WebCore::toJS(this, v14, ElementById, v17);
  else
    v18 = 2;
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_prepend(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  char v35;
  WTF::StringImpl *v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentFragment", "prepend");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentFragment::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentFragment::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentFragment", "prepend");
  v11 = *(_QWORD *)(v5 + 24);
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v29);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_53;
  WebCore::ContainerNode::prepend(v11, (unsigned int **)&v29, (uint64_t)v37);
  if (v39)
  {
    v12 = (WTF::StringImpl *)v37[0];
    v35 = v37[0];
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37[0], (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v13 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v27, v12);
      }
    }
LABEL_53:
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 10;
LABEL_15:
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    v16 = (char *)v14 + 8;
    v15 = *(unsigned int *)v14;
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      do
      {
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 != -1)
          ((void (*)(_BYTE *, char *))off_1E3271300[v18])(v37, v16);
        *((_DWORD *)v16 + 2) = -1;
        v16 += 16;
        v17 -= 16;
      }
      while (v17);
    }
    WTF::fastFree(v14, v12);
  }
  if (HIDWORD(v31))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    if (HIDWORD(v31))
    {
      v22 = v30;
      v23 = 8 * HIDWORD(v31);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v12);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v12);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_append(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32;
  JSC::JSGlobalObject *v33;
  JSC::VM *v34;
  unsigned __int8 v35[8];
  WTF::StringImpl *v36;
  unsigned __int8 v37[8];
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "DocumentFragment", "append");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentFragment::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentFragment::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "DocumentFragment", "append");
  v10 = *(_QWORD *)(v5 + 24);
  v34 = (JSC::VM *)v4;
  v29 = (WTF *)v31;
  v30 = 4;
  v31[32] = 0;
  v32 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v33 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v29;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v28);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
LABEL_33:
    v12 = 0;
    goto LABEL_11;
  }
  WebCore::ContainerNode::append(v10, (unsigned int **)&v28, (uint64_t)v37);
  if (v39)
  {
    v35[0] = v37[0];
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v34, v35);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v11);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v26 = v38;
      v38 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 != 2)
        {
          v12 = 0;
          *(_DWORD *)v26 -= 2;
          goto LABEL_11;
        }
        WTF::StringImpl::destroy(v26, v11);
      }
    }
    goto LABEL_33;
  }
  v12 = 10;
LABEL_11:
  v13 = v28;
  v28 = 0;
  if (v13)
  {
    v15 = (char *)v13 + 8;
    v14 = *(unsigned int *)v13;
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      do
      {
        v17 = *((unsigned int *)v15 + 2);
        if ((_DWORD)v17 != -1)
          ((void (*)(unsigned __int8 *, char *))off_1E3271300[v17])(v37, v15);
        *((_DWORD *)v15 + 2) = -1;
        v15 += 16;
        v16 -= 16;
      }
      while (v16);
    }
    WTF::fastFree(v13, v11);
  }
  if (HIDWORD(v30))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v29, v33);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v32;
    if (HIDWORD(v30))
    {
      v22 = v29;
      v23 = 8 * HIDWORD(v30);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v11);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v32;
  }
  v18 = v29;
  if (v31 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    WTF::fastFree(v18, v11);
  }
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_replaceChildren(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  char v35;
  WTF::StringImpl *v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentFragment", "replaceChildren");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentFragment::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentFragment::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentFragment", "replaceChildren");
  v11 = *(_QWORD *)(v5 + 24);
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v29);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_53;
  WebCore::ContainerNode::replaceChildren(v11, (unsigned int **)&v29, (uint64_t)v37);
  if (v39)
  {
    v12 = (WTF::StringImpl *)v37[0];
    v35 = v37[0];
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37[0], (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v13 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v27, v12);
      }
    }
LABEL_53:
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 10;
LABEL_15:
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    v16 = (char *)v14 + 8;
    v15 = *(unsigned int *)v14;
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      do
      {
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 != -1)
          ((void (*)(_BYTE *, char *))off_1E3271300[v18])(v37, v16);
        *((_DWORD *)v16 + 2) = -1;
        v16 += 16;
        v17 -= 16;
      }
      while (v17);
    }
    WTF::fastFree(v14, v12);
  }
  if (HIDWORD(v31))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    if (HIDWORD(v31))
    {
      v22 = v30;
      v23 = 8 * HIDWORD(v31);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v12);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v12);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_querySelector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::ContainerNode *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSGlobalObject *v15;
  WTF::StringImpl *v16;
  WebCore::Element *v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v26;
  WTF::StringImpl *v27;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v29;
  WebCore *v30;
  JSC::JSGlobalObject *v31;
  JSC::CallFrame *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WebCore::JSDOMGlobalObject *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  int v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  v5 = *((_QWORD *)this + 7);
  v33 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "DocumentFragment", "querySelector");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSDocumentFragment::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSDocumentFragment::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "DocumentFragment", "querySelector");
  v40 = (JSC::VM *)v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v26);
  }
  v11 = *(WebCore::ContainerNode **)(v6 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v35 = (WebCore::JSDOMGlobalObject *)v12;
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, this);
  }
  else
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
    if (v13)
      *(_DWORD *)v13 += 2;
    v41 = v13;
  }
  if (*(_DWORD *)(v5 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    v14 = v41;
    if (hasExceptionsAfterHandlingTraps)
    {
      v39 = 1;
      v41 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v27);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v22 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v41;
  }
  v39 = 0;
  v15 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
  v38 = 0;
  v34 = v14;
  WebCore::ContainerNode::querySelector(v11, &v34, (uint64_t)&v35, a4);
  if (!v37)
  {
    if (v35)
    {
      v18 = WebCore::toJS(this, v15, v35, v17);
      v19 = 0;
    }
    else
    {
      v19 = 0;
      v18 = 2;
    }
LABEL_21:
    ((void (*)(WTF::StringImpl **, WebCore::JSDOMGlobalObject **))off_1E3271318[v19])(&v41, &v35);
    v37 = -1;
    v21 = v34;
    v34 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = 0;
LABEL_25:
    ((void (*)(WebCore::JSDOMGlobalObject **, uint64_t *))off_1E3272138[v22])(&v35, &v38);
    return (_BYTE *)v18;
  }
  if (v37 == 1)
  {
    LOBYTE(v41) = (_BYTE)v35;
    v29 = v36;
    v36 = 0;
    v42 = v29;
    if (!*(_QWORD *)(v5 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v40, (unsigned __int8 *)&v41);
      v29 = v42;
    }
    v42 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v16);
      else
        *(_DWORD *)v29 -= 2;
    }
    v18 = 0;
    v19 = 1;
    goto LABEL_21;
  }
  v30 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsDocumentFragmentPrototypeFunction_querySelectorAll(v30, v31, v32);
}

_BYTE *WebCore::jsDocumentFragmentPrototypeFunction_querySelectorAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::ContainerNode *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t Wrapper;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v27;
  WebCore *v28;
  JSC::JSGlobalObject *v29;
  JSC::CallFrame *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  int v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v4 = *((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "DocumentFragment", "querySelectorAll");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentFragment::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentFragment::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "DocumentFragment", "querySelectorAll");
  v38 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v24);
  }
  v10 = *(WebCore::ContainerNode **)(v5 + 24);
  v11 = *((_QWORD *)a2 + 6);
  v33 = v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, this);
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    if ((v12 & 1) != 0)
      v12 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
    if (v12)
      *(_DWORD *)v12 += 2;
    v39 = (WTF::StringImpl *)v12;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v13 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v37 = 1;
      v39 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v25);
        else
          *(_DWORD *)v13 -= 2;
      }
      Wrapper = 0;
      v20 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v13 = v39;
  }
  v37 = 0;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v36 = 0;
  v32 = v13;
  WebCore::ContainerNode::querySelectorAll(v10, &v32, (uint64_t)&v33);
  if (!v35)
  {
    v16 = v33;
    v33 = 0;
    v39 = (WTF::StringImpl *)v16;
    Wrapper = WebCore::createWrapper(v14, (uint64_t *)&v39);
    v18 = v39;
    v39 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 4);
    }
LABEL_22:
    if (v35 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3271328[v35])(&v39, &v33);
    v35 = -1;
    v19 = v32;
    v32 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = 0;
LABEL_28:
    ((void (*)(uint64_t *, uint64_t *))off_1E3272138[v20])(&v33, &v36);
    return (_BYTE *)Wrapper;
  }
  if (v35 == 1)
  {
    LOBYTE(v39) = v33;
    v27 = v34;
    v34 = 0;
    v40 = v27;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v38, (unsigned __int8 *)&v39);
      v27 = v40;
    }
    v40 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v15);
      else
        *(_DWORD *)v27 -= 2;
    }
    Wrapper = 0;
    goto LABEL_22;
  }
  v28 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsDocumentTimelinePrototypeFunction_animate(v28, v29, v30);
}

_BYTE *WebCore::jsDocumentTimelinePrototypeFunction_animate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  unsigned int v20;
  WebCore::JSCustomEffectCallback *v21;
  JSC::JSCell *v22;
  int v23;
  JSC::VM *v24;
  double v25;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v27;
  int v28;
  int v29;
  int v30;
  uint64_t (*v31)();
  int v32;
  JSC::VM *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  WebCore::JSCustomEffectCallback *v37;
  uint64_t v38;
  JSValue v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSValue v44;
  int v45;
  uint64_t v46;
  double v47;
  double v48;
  JSC::VM *v49;
  WebCore::JSCustomEffectCallback *v50;
  WebCore::JSCustomEffectCallback *v51;
  int v52;
  uint64_t v53;
  char v54[8];
  _BYTE v55[80];
  int v56;
  unsigned __int8 v57;
  int v58;
  JSC::VM *v59;
  char v60[8];
  double v61[9];
  int v62;
  int v63;
  int v64;
  char v65[8];
  WTF::StringImpl *v66[10];
  int v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  int v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v49 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v49, "DocumentTimeline", "animate");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSDocumentTimeline::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSDocumentTimeline::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v49, "DocumentTimeline", "animate");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v41);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v19 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v59 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || (v20 = *(unsigned __int8 *)(v18 + 5), v20 < 0x17)
    || (v20 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v18 + 6) & 4) == 0
     || ((*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v53, v18), !(_BYTE)v53)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v59, 0, "callback", 9, "DocumentTimeline", 17, a8, "animate", 8);
    v36 = 0;
    v38 = 1;
    v52 = 1;
LABEL_67:
    ((void (*)(uint64_t *, WebCore::JSCustomEffectCallback **))off_1E3271430[v38])(&v53, &v51);
    return (_BYTE *)v36;
  }
  v21 = (WebCore::JSCustomEffectCallback *)WTF::fastMalloc((WTF *)0x20);
  v51 = WebCore::JSCustomEffectCallback::JSCustomEffectCallback(v21, v18, v19);
  v52 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v22 = (JSC::JSCell *)*((_QWORD *)a2 + 7), v22 == (JSC::JSCell *)10))
  {
    v23 = 0;
    v54[0] = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_48;
  }
  if (((unint64_t)v22 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_20;
  if (((unint64_t)v22 & 0xFFFE000000000002) != 0)
  {
    if ((unint64_t)v22 >> 49)
    {
      v24 = (JSC::VM *)*((_QWORD *)this + 7);
      v25 = (double)(int)v22;
      if ((unint64_t)v22 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v25 = (char *)v22 - 0x2000000000000;
      if (*((_DWORD *)v24 + 20))
      {
        v47 = v25;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
        v25 = v47;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_83;
      }
      goto LABEL_31;
    }
LABEL_30:
    v59 = v22;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v59, this);
    if (*((_DWORD *)v27 + 20))
    {
      v48 = v25;
      v45 = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
      v25 = v48;
      if (v45)
      {
LABEL_83:
        v28 = 1;
        goto LABEL_32;
      }
    }
LABEL_31:
    v28 = 0;
    v61[0] = v25;
    v63 = 0;
LABEL_32:
    v64 = v28;
    goto LABEL_33;
  }
  if (*((unsigned __int8 *)v22 + 5) < 0x17u)
    goto LABEL_30;
LABEL_20:
  WebCore::convertDictionary<WebCore::CustomAnimationOptions>(v22, this, (uint64_t)&v68);
  WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::CustomAnimationOptions>>::ConversionResultStorage<WebCore::CustomAnimationOptions>(WebCore::Detail::ConversionResultStorage<WebCore::CustomAnimationOptions> &&)::{lambda(void)#1}::operator()((WTF::StringImpl *)&v59, (uint64_t)&v68);
  if (v71 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E32713F0[v71])(v65, &v69);
LABEL_33:
  v29 = v64;
  if (!v64)
  {
    LOBYTE(v66[0]) = 0;
    v67 = -1;
    v30 = v63;
    if (v63 == -1)
    {
      LOBYTE(v69) = 0;
      v72 = 1;
      v54[0] = 0;
      v55[0] = 0;
      v56 = -1;
      v57 = 1;
      v58 = 0;
    }
    else
    {
      v31 = off_1E32713C0[v63];
      ((void (*)(_DWORD **, WTF::StringImpl **, double *))v31)(&v68, v66, v61);
      v67 = v30;
      LOBYTE(v69) = 0;
      v71 = -1;
      ((void (*)(WebCore::JSCustomEffectCallback **))v31)(&v50);
      v71 = v30;
      v72 = 1;
      v54[0] = 0;
      v57 = 0;
      v55[0] = 0;
      v56 = -1;
      ((void (*)(WebCore::JSCustomEffectCallback **, _BYTE *, WTF::StringImpl **))v31)(&v50, v55, &v69);
      v56 = v30;
      v57 = 1;
      v58 = 0;
      if (!v72)
      {
LABEL_41:
        if (v67 != -1)
          ((uint64_t (**)(WebCore::JSCustomEffectCallback **, uint64_t))off_1E32713B0)[v67](&v50, (uint64_t)v66);
        v29 = v64;
        goto LABEL_44;
      }
      if (v71 != -1)
        ((uint64_t (**)(WebCore::JSCustomEffectCallback **, uint64_t))off_1E32713B0)[v71](&v50, (uint64_t)&v69);
    }
    v71 = -1;
    goto LABEL_41;
  }
  v58 = 1;
LABEL_44:
  if (v29 != -1)
    ((void (*)(_DWORD **, char *))off_1E3271400[v29])(&v68, v60);
  v32 = v58;
  if (v58)
  {
    v36 = 0;
LABEL_64:
    if (v32 != -1)
      ((void (*)(JSC::VM **, char *))off_1E3271420[v32])(&v59, v54);
    v38 = 0;
    goto LABEL_67;
  }
  v23 = v57;
LABEL_48:
  v33 = *(JSC::VM **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v50 = v21;
  v51 = 0;
  LOBYTE(v59) = 0;
  LOBYTE(v63) = 0;
  if (v23)
  {
    v60[0] = 0;
    v62 = -1;
    v34 = v56;
    if (v56 != -1)
    {
      ((void (*)(_DWORD **, char *, _BYTE *))off_1E32713C0[v56])(&v68, v60, v55);
      v62 = v34;
    }
    LOBYTE(v63) = 1;
  }
  WebCore::DocumentTimeline::animate(v17, (WTF::StringImpl *)&v50, (uint64_t)&v59, (uint64_t)&v68);
  if (!v70)
  {
    v35 = v68;
    v68 = 0;
    v36 = WebCore::wrap<WebCore::WebAnimation>((uint64_t)this, v33, v35);
    if (v35[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 72))(v35);
    else
      --v35[6];
LABEL_55:
    if (v70 != -1)
      ((void (*)(char *, _DWORD **))off_1E3271410[v70])(v65, &v68);
    v70 = -1;
    if ((_BYTE)v63 && v62 != -1)
      off_1E32713B0[v62](v65, (uint64_t)v60);
    v37 = v50;
    v50 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 4) == 1)
        (*(void (**)(WebCore::JSCustomEffectCallback *))(*(_QWORD *)v37 + 16))(v37);
      else
        --*((_DWORD *)v37 + 4);
    }
    v32 = v58;
    goto LABEL_64;
  }
  if (v70 == 1)
  {
    v42 = (WTF::StringImpl *)v68;
    v65[0] = (char)v68;
    v43 = v69;
    v69 = 0;
    v66[0] = v43;
    if (!*((_QWORD *)v9 + 2))
    {
      v44.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v68, (JSC::JSGlobalObject *)v66);
      JSC::VM::throwException(v9, this, v44);
      v43 = v66[0];
    }
    v66[0] = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    v36 = 0;
    goto LABEL_55;
  }
  v46 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore22CustomAnimationOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(v46);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore22CustomAnimationOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;

  v3 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32713D0[v5])(&v6, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore22CustomAnimationOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore22CustomAnimationOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E32713E0[v5])(&v10, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  result = *(__n128 *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  return result;
}

WTF::StringImpl *WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::CustomAnimationOptions>>::ConversionResultStorage<WebCore::CustomAnimationOptions>(WebCore::Detail::ConversionResultStorage<WebCore::CustomAnimationOptions> &&)::{lambda(void)#1}::operator()(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  __int128 v5;
  WTF::StringImpl *v6;
  __int16 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  __int128 v12;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  int v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  __int16 v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char v22;
  _BYTE v23[8];
  _BYTE v24[8];
  int v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  __int16 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v2 = result;
  v33 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 88))
  {
    *((_DWORD *)result + 26) = 1;
  }
  else
  {
    v14[0] = 0;
    v15 = -1;
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E32713E0[v4])(v23, v14, a2 + 8);
      v15 = v4;
    }
    v5 = *(_OWORD *)(a2 + 40);
    v16 = *(_OWORD *)(a2 + 24);
    v17 = v5;
    v6 = *(WTF::StringImpl **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v18 = v6;
    v7 = *(_WORD *)(a2 + 64);
    v19 = v7;
    v8 = *(WTF::StringImpl **)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    v20 = v8;
    v21 = v9;
    v24[0] = 0;
    v25 = -1;
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_1E32713E0[v4])(&v22, v24, v14);
      v25 = v4;
      v6 = v18;
      v7 = v19;
      v8 = v20;
      v9 = v21;
    }
    v26 = v16;
    v27 = v17;
    v28 = v6;
    v29 = v7;
    v18 = 0;
    v20 = 0;
    v30 = v8;
    v31 = v9;
    v32 = 1;
    *((_BYTE *)v2 + 16) = 0;
    v10 = (WTF::StringImpl *)((char *)v2 + 16);
    *((_DWORD *)v2 + 24) = -1;
    *((_DWORD *)v2 + 6) = -1;
    if ((_DWORD)v4 == -1)
    {
      v11 = 1;
    }
    else
    {
      ((void (*)(char *))off_1E32713E0[v4])(&v22);
      *((_DWORD *)v2 + 6) = v4;
      v6 = v28;
      v7 = v29;
      v8 = v30;
      v9 = v31;
      v11 = v32;
    }
    v12 = v27;
    *((_OWORD *)v2 + 2) = v26;
    *((_OWORD *)v2 + 3) = v12;
    *((_QWORD *)v2 + 8) = v6;
    *((_WORD *)v2 + 36) = v7;
    v28 = 0;
    v30 = 0;
    *((_QWORD *)v2 + 10) = v8;
    *((_QWORD *)v2 + 11) = v9;
    *((_DWORD *)v2 + 24) = 1;
    *((_DWORD *)v2 + 26) = 0;
    if (v11 != -1)
      off_1E32713B0[v11](&v22, (uint64_t)v24);
    v32 = -1;
    v13 = v20;
    v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (v15 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E32713D0[v15])(&v22, v14);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22CustomAnimationOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;

  v3 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32713D0[v5])(&v6, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJdN7WebCore22CustomAnimationOptionsEEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v3 != -1)
    result = off_1E32713B0[v3](&v5, a2 + 8);
  *(_DWORD *)(a2 + 88) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12WebAnimationENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12WebAnimationENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJdN7WebCore22CustomAnimationOptionsEEEEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 96))
  {
    v3 = *(unsigned int *)(a2 + 88);
    if ((_DWORD)v3 != -1)
      result = off_1E32713B0[v3](&v5, a2 + 8);
    *(_DWORD *)(a2 + 88) = -1;
  }
  return result;
}

_BYTE *WebCore::jsDocumentTypePrototypeFunction_before(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  char v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "before");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentType::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentType::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "before");
  v11 = *(unsigned int **)(v5 + 24);
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v29);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_53;
  WebCore::Node::before(v11, (unsigned int **)&v29, &v37);
  if (v39)
  {
    v12 = (WTF::StringImpl *)v37;
    v35 = v37;
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v13 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v27, v12);
      }
    }
LABEL_53:
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 10;
LABEL_15:
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    v16 = (char *)v14 + 8;
    v15 = *(unsigned int *)v14;
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      do
      {
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v18])(&v37, v16);
        *((_DWORD *)v16 + 2) = -1;
        v16 += 16;
        v17 -= 16;
      }
      while (v17);
    }
    WTF::fastFree(v14, v12);
  }
  if (HIDWORD(v31))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    if (HIDWORD(v31))
    {
      v22 = v30;
      v23 = 8 * HIDWORD(v31);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v12);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v12);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsDocumentTypePrototypeFunction_after(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  char v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "after");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentType::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentType::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "after");
  v11 = *(unsigned int **)(v5 + 24);
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v29);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_53;
  WebCore::Node::after(v11, (unsigned int **)&v29, &v37);
  if (v39)
  {
    v12 = (WTF::StringImpl *)v37;
    v35 = v37;
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v13 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v27, v12);
      }
    }
LABEL_53:
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 10;
LABEL_15:
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    v16 = (char *)v14 + 8;
    v15 = *(unsigned int *)v14;
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      do
      {
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v18])(&v37, v16);
        *((_DWORD *)v16 + 2) = -1;
        v16 += 16;
        v17 -= 16;
      }
      while (v17);
    }
    WTF::fastFree(v14, v12);
  }
  if (HIDWORD(v31))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    if (HIDWORD(v31))
    {
      v22 = v30;
      v23 = 8 * HIDWORD(v31);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v12);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v12);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsDocumentTypePrototypeFunction_replaceWith(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  char v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "replaceWith");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentType::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentType::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "DocumentType", "replaceWith");
  v11 = *(unsigned int **)(v5 + 24);
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v29);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_53;
  WebCore::Node::replaceWith(v11, (unsigned int **)&v29, &v37);
  if (v39)
  {
    v12 = (WTF::StringImpl *)v37;
    v35 = v37;
    v25 = v38;
    v38 = 0;
    v36 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v36;
    }
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v39)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v13 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v27, v12);
      }
    }
LABEL_53:
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 10;
LABEL_15:
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    v16 = (char *)v14 + 8;
    v15 = *(unsigned int *)v14;
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      do
      {
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v18])(&v37, v16);
        *((_DWORD *)v16 + 2) = -1;
        v16 += 16;
        v17 -= 16;
      }
      while (v17);
    }
    WTF::fastFree(v14, v12);
  }
  if (HIDWORD(v31))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    if (HIDWORD(v31))
    {
      v22 = v30;
      v23 = 8 * HIDWORD(v31);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v12);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v12);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsDocumentTypePrototypeFunction_remove(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  __int16 v17;
  __int16 v18;
  WTF::StringImpl *v19;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "DocumentType", "remove");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDocumentType::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDocumentType::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "DocumentType", "remove");
  v11 = *(_QWORD *)(v4 + 24);
  v26 = (WTF *)v28;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  v12 = *(_QWORD *)(v11 + 32);
  if (v12)
  {
    *(_DWORD *)(v12 + 24) += 2;
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v12, (WebCore::Node *)v11, &v33);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v17 = *(_WORD *)(v12 + 30);
      if ((v17 & 0x400) == 0)
      {
        v18 = *(_WORD *)(v12 + 28);
        if ((v18 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v12, (void *)v11);
        }
        else
        {
          if ((v18 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v17 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v17 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  if ((_BYTE)v35)
  {
    v11 = v33;
    v31 = v33;
    v19 = v34;
    v34 = 0;
    v32 = v19;
    if (!*((_QWORD *)v5 + 2))
    {
      v20.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException(v5, this, v20);
      v19 = v32;
    }
    v32 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v19 -= 2;
    }
    if ((_BYTE)v35)
    {
      v21 = v34;
      v34 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 != 2)
        {
          v13 = 0;
          *(_DWORD *)v21 -= 2;
          goto LABEL_17;
        }
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v11);
      }
    }
    v13 = 0;
    goto LABEL_17;
  }
  v13 = 10;
LABEL_17:
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v22 = v26;
      v23 = 8 * HIDWORD(v27);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, (void *)v11);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v14 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v14, (void *)v11);
  }
  return (_BYTE *)v13;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13DragEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::DataTransfer *v3;
  unsigned int *result;
  WTF *v5;
  WTF *v6;
  void *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (WebCore::DataTransfer *)a2[10];
  a2[10] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  result = (unsigned int *)a2[9];
  a2[9] = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  v5 = (WTF *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v8)
      {
        if (*v8)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v8, (WTF::StringImpl *)a2);
        WTF::fastFree((WTF *)v8, a2);
      }
      v9 = (unsigned int *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      return (unsigned int *)WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

uint64_t WebCore::jsEXTClipControlPrototypeFunction_clipControlEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  JSValue v17;
  JSC::VM *v18;
  _DWORD v19[2];
  _DWORD v20[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "EXTClipControl", "clipControlEXT");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSEXTClipControl::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSEXTClipControl::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "EXTClipControl", "clipControlEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v17);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v20);
    if (v20[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v19);
      if (v19[1])
      {
        return 0;
      }
      else
      {
        v13 = v20[0];
        v14 = v19[0];
        if (*(_QWORD *)(v12 + 16))
        {
          v15 = *(_DWORD **)(*(_QWORD *)(v12 + 16) + 88);
          if (v15)
            ++v15[2];
          (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v15 + 2168))(v15, v13, v14);
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
        return 10;
      }
    }
  }
}

unint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_createQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v16;
  WTF::StringImpl *v17;

  v4 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "EXTDisjointTimerQuery", "createQueryEXT");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSEXTDisjointTimerQuery::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "EXTDisjointTimerQuery", "createQueryEXT");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v11 + 16))
    return 2;
  WebCore::WebGLTimerQueryEXT::create(*(WebCore::WebGLTimerQueryEXT **)(v11 + 16), a2, (unsigned int **)&v17);
  v13 = v17;
  if (!v17)
    return 2;
  v14 = WebCore::wrap<WebCore::WebGLTimerQueryEXT>((uint64_t)this, v12, v17);
  if (*((_DWORD *)v13 + 2) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  else
    --*((_DWORD *)v13 + 2);
  return v14;
}

uint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_deleteQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::WebGLTimerQueryEXT *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQuery", "deleteQueryEXT");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSEXTDisjointTimerQuery::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQuery", "deleteQueryEXT");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(WTF::StringImpl **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v27 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLTimerQueryEXT::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLTimerQueryEXT::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLTimerQueryEXT **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "query", 6, "EXTDisjointTimerQuery", 22, a8, "deleteQueryEXT", 15, "WebGLTimerQueryEXT", 19);
        return 0;
      }
    }
    WebCore::EXTDisjointTimerQuery::deleteQueryEXT(v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_isQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  JSValue v31;
  JSC::VM *v32;
  JSC::VM *v33;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "EXTDisjointTimerQuery", "isQueryEXT");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSEXTDisjointTimerQuery::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "EXTDisjointTimerQuery", "isQueryEXT");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v33 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_25;
      v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v20 = (char **)(16 * v18);
      if ((_DWORD)v18)
        v21 = v20 == &WebCore::JSWebGLTimerQueryEXT::s_info;
      else
        v21 = 1;
      if (!v21)
      {
        do
        {
          v20 = (char **)v20[2];
          v19 = v20 != 0;
        }
        while (v20 != &WebCore::JSWebGLTimerQueryEXT::s_info && v20 != 0);
      }
      if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_25:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "query", 6, "EXTDisjointTimerQuery", 22, a8, "isQueryEXT", 11, "WebGLTimerQueryEXT", 19);
        return 0;
      }
      if (*(_QWORD *)(v16 + 16))
      {
        v25 = *(_QWORD *)(v16 + 16);
        v26 = *(_QWORD *)(v24 + 16);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
            v26 = v27 - 8;
          else
            v26 = 0;
        }
        if (v26 == v25 && *(_DWORD *)(v24 + 24) && !*(_BYTE *)(v24 + 32))
        {
          v28 = *(_DWORD **)(v25 + 88);
          if (v28)
            ++v28[2];
          v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 2016))(v28);
          v30 = v29;
          if (v28[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
            if (v30)
              return 7;
          }
          else
          {
            --v28[2];
            if (v29)
              return 7;
          }
        }
      }
    }
    return 6;
  }
  v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v31);
}

uint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_beginQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  WebCore::WebGLTimerQueryEXT *v22;
  JSValue v23;
  JSC::VM *v24;
  unsigned int v25[2];
  uint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "EXTDisjointTimerQuery", "beginQueryEXT");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSEXTDisjointTimerQuery::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "EXTDisjointTimerQuery", "beginQueryEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(WTF::StringImpl **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v25);
    if (v25[1])
    {
      return 0;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 7);
      v26 = *((_QWORD *)this + 7);
      if ((v15 & 0xFFFE000000000002) != 0)
        goto LABEL_25;
      v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
      v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
      v18 = (char **)(16 * v16);
      if ((_DWORD)v16)
        v19 = v18 == &WebCore::JSWebGLTimerQueryEXT::s_info;
      else
        v19 = 1;
      if (!v19)
      {
        do
        {
          v18 = (char **)v18[2];
          v17 = v18 != 0;
        }
        while (v18 != &WebCore::JSWebGLTimerQueryEXT::s_info && v18 != 0);
      }
      if (v17 && (v22 = *(WebCore::WebGLTimerQueryEXT **)(v15 + 24)) != 0)
      {
        WebCore::EXTDisjointTimerQuery::beginQueryEXT(v12, v25[0], v22, v13);
        return 10;
      }
      else
      {
LABEL_25:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v26, 1, "query", 6, "EXTDisjointTimerQuery", 22, v14, "beginQueryEXT", 14, "WebGLTimerQueryEXT", 19);
        return 0;
      }
    }
  }
}

uint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_endQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v11;
  JSValue v13;
  JSC::VM *v14;
  unsigned int v15[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "EXTDisjointTimerQuery", "endQueryEXT");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSEXTDisjointTimerQuery::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "EXTDisjointTimerQuery", "endQueryEXT");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(WTF::StringImpl **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v15);
    if (v15[1])
    {
      return 0;
    }
    else
    {
      WebCore::EXTDisjointTimerQuery::endQueryEXT(v11, v15[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsEXTDisjointTimerQueryPrototypeFunction_queryCounterEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WebCore::WebGLTimerQueryEXT *v24;
  JSValue v25;
  JSC::VM *v26;
  unsigned int v27[2];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQuery", "queryCounterEXT");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSEXTDisjointTimerQuery::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQuery", "queryCounterEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(WTF::StringImpl **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLTimerQueryEXT::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLTimerQueryEXT::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(WebCore::WebGLTimerQueryEXT **)(v17 + 24)) != 0)
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v27);
      if (v27[1])
      {
        return 0;
      }
      else
      {
        WebCore::EXTDisjointTimerQuery::queryCounterEXT(v16, v24, v27[0]);
        return 10;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "query", 6, "EXTDisjointTimerQuery", 22, a8, "queryCounterEXT", 16, "WebGLTimerQueryEXT", 19);
      return 0;
    }
  }
}

_BYTE *WebCore::jsEXTDisjointTimerQueryPrototypeFunction_getQueryEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v17;
  WebCore *v18;
  JSC::JSGlobalObject *v19;
  JSC::CallFrame *v20;
  JSC::VM *v21;
  _BYTE v22[16];
  int v23;
  unsigned int v24[2];
  unsigned int v25[2];
  _QWORD v26[34];
  _QWORD *v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "EXTDisjointTimerQuery", "getQueryEXT");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSEXTDisjointTimerQuery::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "EXTDisjointTimerQuery", "getQueryEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v17);
  }
  v12 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v25);
  if (v25[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v24);
  if (v24[1])
    return 0;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::EXTDisjointTimerQuery::getQueryEXT(v12, v25[0], v24[0], (uint64_t)v22);
  v26[0] = this;
  v26[1] = v13;
  v26[2] = v13;
  v26[3] = v13;
  v26[4] = this;
  v26[5] = v13;
  v26[6] = this;
  v26[7] = v13;
  v26[8] = this;
  v26[9] = v13;
  v26[10] = this;
  v26[11] = v13;
  v26[12] = this;
  v26[13] = v13;
  v26[14] = this;
  v26[15] = v13;
  v26[16] = this;
  v26[17] = v13;
  v26[18] = this;
  v26[19] = v13;
  v26[20] = this;
  v26[21] = v13;
  v26[22] = this;
  v26[23] = v13;
  v26[24] = this;
  v26[25] = v13;
  v26[26] = this;
  v26[27] = v13;
  v26[28] = this;
  v26[29] = v13;
  v26[30] = this;
  v26[31] = v13;
  v26[32] = this;
  v26[33] = v13;
  if (v23 != -1)
  {
    v27 = v26;
    v14 = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v23])(&v27, v22);
    if (v23 != -1)
      off_1E3271B90[v23](v26, v22);
    return (_BYTE *)v14;
  }
  v18 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsEXTDisjointTimerQueryPrototypeFunction_getQueryObjectEXT(v18, v19, v20);
}

_BYTE *WebCore::jsEXTDisjointTimerQueryPrototypeFunction_getQueryObjectEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLTimerQueryEXT *v24;
  uint64_t v25;
  JSValue v28;
  uint64_t v29;
  JSC::VM *v30;
  _BYTE v31[16];
  int v32;
  unsigned int v33[2];
  _QWORD v34[34];
  _QWORD *v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "EXTDisjointTimerQuery", "getQueryObjectEXT");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSEXTDisjointTimerQuery::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSEXTDisjointTimerQuery::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "EXTDisjointTimerQuery", "getQueryObjectEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v28);
  }
  v16 = *(WTF::StringImpl **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v34[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLTimerQueryEXT::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLTimerQueryEXT::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLTimerQueryEXT **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v34, 0, "query", 6, "EXTDisjointTimerQuery", 22, a8, "getQueryObjectEXT", 18, "WebGLTimerQueryEXT", 19);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v33);
  if (v33[1])
    return 0;
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  WebCore::EXTDisjointTimerQuery::getQueryObjectEXT(v16, v24, v33[0], (uint64_t)v31);
  v34[0] = this;
  v34[1] = v25;
  v34[2] = v25;
  v34[3] = v25;
  v34[4] = this;
  v34[5] = v25;
  v34[6] = this;
  v34[7] = v25;
  v34[8] = this;
  v34[9] = v25;
  v34[10] = this;
  v34[11] = v25;
  v34[12] = this;
  v34[13] = v25;
  v34[14] = this;
  v34[15] = v25;
  v34[16] = this;
  v34[17] = v25;
  v34[18] = this;
  v34[19] = v25;
  v34[20] = this;
  v34[21] = v25;
  v34[22] = this;
  v34[23] = v25;
  v34[24] = this;
  v34[25] = v25;
  v34[26] = this;
  v34[27] = v25;
  v34[28] = this;
  v34[29] = v25;
  v34[30] = this;
  v34[31] = v25;
  v34[32] = this;
  v34[33] = v25;
  if (v32 != -1)
  {
    v35 = v34;
    v23 = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v32])(&v35, v31);
    if (v32 != -1)
      off_1E3271B90[v32](v34, v31);
    return (_BYTE *)v23;
  }
  v29 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(v29);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2F_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEEEEDcS2H_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::jsEXTDisjointTimerQueryWebGL2PrototypeFunction_queryCounterEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WebCore::WebGLQuery *v24;
  JSValue v25;
  JSC::VM *v26;
  unsigned int v27[2];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQueryWebGL2", "queryCounterEXT");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSEXTDisjointTimerQueryWebGL2::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSEXTDisjointTimerQueryWebGL2::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EXTDisjointTimerQueryWebGL2", "queryCounterEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(WTF::StringImpl **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLQuery::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLQuery::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(WebCore::WebGLQuery **)(v17 + 24)) != 0)
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v27);
      if (v27[1])
      {
        return 0;
      }
      else
      {
        WebCore::EXTDisjointTimerQueryWebGL2::queryCounterEXT(v16, v24, v27[0]);
        return 10;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "query", 6, "EXTDisjointTimerQueryWebGL2", 28, a8, "queryCounterEXT", 16, "WebGLQuery", 11);
      return 0;
    }
  }
}

uint64_t WebCore::jsEXTPolygonOffsetClampPrototypeFunction_polygonOffsetClampEXT(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, double a5, __n128 a6)
{
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  unint64_t v19;
  JSC::VM *v20;
  double v21;
  float v22;
  unint64_t v23;
  JSC::VM *v24;
  double v25;
  _DWORD *v26;
  JSValue v28;
  int v29;
  int v30;
  unsigned __int32 v31;
  double v32;
  double v33;
  double v34;
  JSC::VM *v35;
  unint64_t v36;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v7;
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "EXTPolygonOffsetClamp", "polygonOffsetClampEXT");
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSEXTPolygonOffsetClamp::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSEXTPolygonOffsetClamp::s_info && v12 != 0);
  }
  if (!v11)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "EXTPolygonOffsetClamp", "polygonOffsetClampEXT");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v7, this, v28);
  }
  v15 = *(_QWORD *)(v8 + 24);
  v16 = *((_QWORD *)a2 + 6);
  v36 = v16;
  if (v16 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v36, this);
    v17 = v32;
  }
  else
  {
    *(_QWORD *)&v17 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    return 0;
  if (v17 < -3.40282347e38)
  {
    *(float *)&v29 = -INFINITY;
  }
  else
  {
    if (v17 <= 3.40282347e38)
    {
      v18 = v17;
      goto LABEL_20;
    }
    *(float *)&v29 = INFINITY;
  }
  v18 = *(float *)&v29;
LABEL_20:
  v19 = *((_QWORD *)a2 + 7);
  v36 = v19;
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v19 >= 0xFFFE000000000000)
  {
    v21 = (double)(int)v19;
  }
  else if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v36, this);
    v21 = v33;
  }
  else
  {
    *(_QWORD *)&v21 = v19 - 0x2000000000000;
  }
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    return 0;
  if (v21 < -3.40282347e38)
  {
    *(float *)&v30 = -INFINITY;
  }
  else
  {
    if (v21 <= 3.40282347e38)
    {
      v22 = v21;
      goto LABEL_27;
    }
    *(float *)&v30 = INFINITY;
  }
  v22 = *(float *)&v30;
LABEL_27:
  v23 = *((_QWORD *)a2 + 8);
  v36 = v23;
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v23 >= 0xFFFE000000000000)
  {
    v25 = (double)(int)v23;
  }
  else if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v36, this);
    v25 = v34;
  }
  else
  {
    *(_QWORD *)&v25 = v23 - 0x2000000000000;
  }
  if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
    return 0;
  if (v25 < -3.40282347e38)
  {
    v31 = -8388608;
LABEL_60:
    a6.n128_u32[0] = v31;
    goto LABEL_34;
  }
  if (v25 > 3.40282347e38)
  {
    v31 = 2139095040;
    goto LABEL_60;
  }
  a6.n128_f32[0] = v25;
LABEL_34:
  if (*(_QWORD *)(v15 + 16))
  {
    v26 = *(_DWORD **)(*(_QWORD *)(v15 + 16) + 88);
    if (v26)
      ++v26[2];
    (*(void (**)(_DWORD *, float, float, __n128))(*(_QWORD *)v26 + 2192))(v26, v18, v22, a6);
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
    else
      --v26[2];
  }
  return 10;
}

uint64_t WebCore::CryptoAlgorithmEcKeyParams::parametersClass(WebCore::CryptoAlgorithmEcKeyParams *this)
{
  return 5;
}

uint64_t WebCore::CryptoAlgorithmEcdhKeyDeriveParams::parametersClass(WebCore::CryptoAlgorithmEcdhKeyDeriveParams *this)
{
  return 6;
}

uint64_t WebCore::CryptoAlgorithmEcdsaParams::parametersClass(WebCore::CryptoAlgorithmEcdsaParams *this)
{
  return 7;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    *a2 = 0;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *result = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  JSC::HandleSet *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  JSC::HandleSet *v15;

  *a2 = 0;
  if (*a3)
  {
    v3 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (!v4)
    {
      v15 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = a3;
      v14 = a2;
      result = JSC::HandleSet::grow(v3);
      v3 = v15;
      a3 = v13;
      a2 = v14;
      v4 = (_QWORD *)*((_QWORD *)v15 + 5);
    }
    *((_QWORD *)v3 + 5) = *v4;
    v4[2] = 0;
    v5 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    *a2 = v4 + 2;
    v6 = (_QWORD *)*a3;
    if (*a3)
      v6 = (_QWORD *)*v6;
    v7 = (unint64_t)(v5 - 2);
    if ((v6 != 0) != (*v5 != 0))
    {
      if (v6)
      {
        v8 = *(unint64_t **)((v7 & 0xFFFFFFFFFFFFF000) + 0x10);
        v9 = v8[3];
        v8 += 3;
        *(_QWORD *)v7 = v9;
        *(v5 - 1) = v8;
        *v8 = v7;
        *(_QWORD *)(v9 + 8) = v7;
      }
      else
      {
        v12 = *(_QWORD *)v7;
        v11 = (_QWORD *)*(v5 - 1);
        *v11 = *(_QWORD *)v7;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v5 = (_QWORD *)*a2;
      }
    }
    *v5 = v6;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::__assign_alt[abi:sn180100]<0ul,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(*a1, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3272198[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::__assign_alt[abi:sn180100]<0ul,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(uint64_t *result, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  if (*((_DWORD *)result + 2))
    return (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::__emplace[abi:sn180100]<0ul,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>((uint64_t)result, a3);
  v3 = *a3;
  if (!*a3)
    return JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear(a2);
  v6 = *v3;
  v5 = (unint64_t)(v3 - 2);
  v4 = v6;
  v7 = (_QWORD *)*a2;
  if (!*a2)
  {
    v8 = **(_QWORD **)((v5 & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = *(_QWORD **)(v8 + 712);
    if (!v9)
    {
      v17 = a2;
      v15 = v4;
      v16 = v8;
      result = (uint64_t *)JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672));
      v4 = v15;
      v8 = v16;
      a2 = v17;
      v9 = *(_QWORD **)(v16 + 712);
    }
    *(_QWORD *)(v8 + 712) = *v9;
    v9[2] = 0;
    v7 = v9 + 2;
    *v9 = 0;
    v9[1] = 0;
    *a2 = (uint64_t)(v9 + 2);
  }
  v10 = (unint64_t)(v7 - 2);
  if ((v4 != 0) != (*v7 != 0))
  {
    if (v4)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = v11[3];
      v11 += 3;
      *(_QWORD *)v10 = v12;
      *(v7 - 1) = v11;
      *v11 = v10;
      *(_QWORD *)(v12 + 8) = v10;
    }
    else
    {
      v14 = *(_QWORD *)v10;
      v13 = (_QWORD *)*(v7 - 1);
      *v13 = *(_QWORD *)v10;
      *(_QWORD *)(v14 + 8) = v13;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v7 = (_QWORD *)*a2;
    }
  }
  *v7 = v4;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::__emplace[abi:sn180100]<0ul,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  JSC::HandleSet *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  JSC::HandleSet *v15;
  char v16;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3272198[v4])(&v16, a1);
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = 0;
  if (*a2)
  {
    v5 = *(JSC::HandleSet **)(((*a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = (_QWORD *)*((_QWORD *)v5 + 5);
    if (!v6)
    {
      v15 = *(JSC::HandleSet **)(((*a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v5);
      v5 = v15;
      v6 = (_QWORD *)*((_QWORD *)v15 + 5);
    }
    *((_QWORD *)v5 + 5) = *v6;
    v6[2] = 0;
    v7 = v6 + 2;
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)a1 = v6 + 2;
    v8 = (_QWORD *)*a2;
    if (*a2)
      v8 = (_QWORD *)*v8;
    v9 = (unint64_t)(v7 - 2);
    if ((v8 != 0) != (*v7 != 0))
    {
      if (v8)
      {
        v10 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
        v11 = v10[3];
        v10 += 3;
        *(_QWORD *)v9 = v11;
        *(v7 - 1) = v10;
        *v10 = v9;
        *(_QWORD *)(v11 + 8) = v9;
      }
      else
      {
        v14 = *(_QWORD *)v9;
        v13 = (_QWORD *)*(v7 - 1);
        *v13 = *(_QWORD *)v9;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v7 = *(_QWORD **)a1;
      }
    }
    *v7 = v8;
  }
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3JSC6StrongINS9_8JSObjectELNS9_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3272198[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::jsElementPrototypeFunction_hasAttributes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  v5 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "Element", "hasAttributes");
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v6 + 104);
  if (!v7)
    return 6;
  if ((*(_BYTE *)(v7 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v6, (unsigned __int8 *)a2, a5, (uint64_t)a3, a4);
  if ((*(_WORD *)(v6 + 28) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v6);
  v8 = *(_QWORD *)(v6 + 104);
  if (!v8)
    return 6;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
    v10 = *(_DWORD *)(v8 + 52);
  else
    v10 = v9 >> 5;
  if (v10)
    return 7;
  else
    return 6;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAttribute(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  WTF::String *v7;
  __n128 v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  JSValue v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "getAttribute");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v26);
  v9 = v27;
  if (!v27)
  {
    v10 = v26;
    v26 = 0;
    v24 = v10;
    WebCore::Element::getAttributeForBindings(v6, (const WTF::AtomString *)&v24, 1, v7, &v25, v8);
    v11 = v25;
    if (!v25)
    {
      v25 = 0;
      v15 = 2;
      goto LABEL_13;
    }
    v12 = *((_QWORD *)this + 7);
    v13 = (uint64_t *)(v12 + 41968);
    v14 = *((_DWORD *)v25 + 1);
    if (v14)
    {
      if (v14 != 1)
      {
LABEL_8:
        v15 = *(_QWORD *)(v12 + 64760);
        if (!v15 || v25 != *(WTF::StringImpl **)(v15 + 8))
        {
          v15 = JSC::jsStringWithCacheSlowCase();
          v11 = v25;
          v25 = 0;
          if (v11)
            goto LABEL_11;
LABEL_13:
          v16 = v24;
          v24 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v11);
            else
              *(_DWORD *)v16 -= 2;
          }
          v9 = v27;
          goto LABEL_17;
        }
LABEL_27:
        v25 = 0;
LABEL_11:
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v11);
        else
          *(_DWORD *)v11 -= 2;
        goto LABEL_13;
      }
      v18 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
      if ((*((_BYTE *)v25 + 16) & 4) != 0)
      {
        v19 = *v18;
      }
      else
      {
        v20 = *(unsigned __int16 *)v18;
        if (v20 > 0xFF)
          goto LABEL_8;
        v19 = v20;
      }
      v13 = (uint64_t *)(v12 + 8 * v19 + 42216);
    }
    v15 = *v13;
    goto LABEL_27;
  }
  v15 = 0;
LABEL_17:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v25, &v26);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAttributeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::String *v12;
  __n128 v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v25;
  JSValue v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl **v36;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Element", "getAttributeNS");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v27);
  }
  v8 = *(_QWORD *)(v6 + 24);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v32 = 0;
    v33 = 0;
  }
  else
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v34);
    LOBYTE(v32) = 0;
    v33 = -1;
    v3 = v35;
    if (v35 == -1)
      return 0;
    ((void (*)(WTF::StringImpl ***, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v35])(&v36, &v32, &v34);
    v33 = v3;
    if (v35 != -1)
    {
      ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v35])(&v36, &v34);
      v3 = v33;
    }
    if (v3)
      goto LABEL_57;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v34);
  v9 = v35;
  if (v35)
  {
    v19 = 0;
LABEL_39:
    if (v9 != -1)
      ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v9])(&v36, &v34);
    v3 = v33;
    goto LABEL_42;
  }
  if (!v33)
  {
    v10 = v32;
    v32 = 0;
    v11 = v34;
    v34 = 0;
    v29 = v11;
    v30 = v10;
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v36, MEMORY[0x1E0CBF2F8], &v29, &v30);
    WebCore::Element::getAttributeForBindings(v8, (unsigned __int8 *)&v36, 1, v12, &v31, v13);
    v14 = v36;
    v36 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
    v15 = v31;
    if (!v31)
    {
      v31 = 0;
      v19 = 2;
      if (v11)
        goto LABEL_33;
      goto LABEL_35;
    }
    v16 = *((_QWORD *)this + 7);
    v17 = (uint64_t *)(v16 + 41968);
    v18 = *((_DWORD *)v31 + 1);
    if (v18)
    {
      if (v18 != 1)
      {
LABEL_17:
        v19 = *(_QWORD *)(v16 + 64760);
        if (!v19 || v31 != *(WTF::StringImpl **)(v19 + 8))
        {
          v19 = JSC::jsStringWithCacheSlowCase();
          v15 = v31;
          v31 = 0;
          if (!v15)
            goto LABEL_32;
          goto LABEL_30;
        }
LABEL_29:
        v31 = 0;
LABEL_30:
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy(v15, v15);
          if (v11)
          {
LABEL_33:
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v15);
            else
              *(_DWORD *)v11 -= 2;
          }
LABEL_35:
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v15);
            else
              *(_DWORD *)v10 -= 2;
          }
          v9 = v35;
          goto LABEL_39;
        }
        *(_DWORD *)v15 -= 2;
LABEL_32:
        if (v11)
          goto LABEL_33;
        goto LABEL_35;
      }
      v22 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
      if ((*((_BYTE *)v31 + 16) & 4) != 0)
      {
        v23 = *v22;
      }
      else
      {
        v25 = *(unsigned __int16 *)v22;
        if (v25 > 0xFF)
          goto LABEL_17;
        v23 = v25;
      }
      v17 = (uint64_t *)(v16 + 8 * v23 + 42216);
    }
    v19 = *v17;
    goto LABEL_29;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
  v19 = 0;
LABEL_42:
  if (v3 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v3])(&v34, &v32);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsElementPrototypeFunction_setAttributeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  _BOOL4 v19;
  uint64_t v20;
  JSC::VM *v23;
  JSC::JSRopeString *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  int32x4_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  _QWORD *v43;
  uint64_t v44;
  WTF::AtomStringImpl **v45;
  WTF::AtomStringImpl **v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  JSValue v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v55;
  JSValue v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  JSC::VM *v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF *v67;
  uint64_t v68;
  _BYTE v69[40];
  uint64_t v70;
  JSC::JSGlobalObject *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  char v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::AtomStringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v62, "Element", "setAttributeNS");
  v7 = *(WebCore::Element **)(v5 + 24);
  v67 = (WTF *)v69;
  v68 = 4;
  v69[32] = 0;
  v70 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v71 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v67;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v49.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v37 = JSC::VM::throwException(v4, this, v49);
  }
  else
  {
    if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v65 = 0;
      v66 = 0;
      goto LABEL_9;
    }
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v80);
    LOBYTE(v65) = 0;
    v66 = -1;
    v9 = (int)v81;
    if ((_DWORD)v81 != -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl **, WTF::AtomStringImpl **))off_1E3273988[v81])(&v76, &v65, &v80);
      v66 = v9;
      if ((_DWORD)v81 != -1)
      {
        ((void (*)(uint64_t *, WTF::AtomStringImpl **))off_1E32712B8[v81])(&v76, &v80);
        v9 = v66;
      }
      if (v9)
      {
        v37 = 0;
LABEL_71:
        if (v9 != -1)
          ((void (*)(WTF::AtomStringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v80, &v65);
        goto LABEL_74;
      }
LABEL_9:
      WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v63);
      v10 = v64;
      if (v64)
      {
        v37 = 0;
LABEL_68:
        if (v10 != -1)
          ((void (*)(WTF::AtomStringImpl **, WTF::StringImpl **))off_1E32712B8[v10])(&v80, &v63);
        v9 = v66;
        goto LABEL_71;
      }
      v11 = *((_QWORD *)a2 + 8);
      LOBYTE(v76) = 0;
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v72 = v11;
        v23 = (JSC::VM *)*((_QWORD *)this + 7);
      }
      else
      {
        v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
        v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
        v14 = (char **)(16 * v12);
        if ((_DWORD)v12)
          v15 = v14 == &WebCore::JSTrustedHTML::s_info;
        else
          v15 = 1;
        v16 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
        if (!v15)
        {
          v17 = 16 * v12;
          do
          {
            v17 = *(_QWORD *)(v17 + 16);
            v16 = v17 != 0;
          }
          while ((char **)v17 != &WebCore::JSTrustedHTML::s_info && v17 != 0);
        }
        if (v16)
        {
          v61 = *(_QWORD *)(v11 + 24);
          if (v61)
          {
            v59 = 0;
            ++*(_DWORD *)(v61 + 8);
            v76 = v61;
            LODWORD(v77) = 0;
            goto LABEL_139;
          }
        }
        v19 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v12)
        {
          v19 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
          if (v14 != &WebCore::JSTrustedScript::s_info)
          {
            v20 = 16 * v12;
            do
            {
              v20 = *(_QWORD *)(v20 + 16);
              v19 = v20 != 0;
            }
            while ((char **)v20 != &WebCore::JSTrustedScript::s_info && v20 != 0);
          }
        }
        if (v19)
        {
          v58 = *(_QWORD *)(v11 + 24);
          if (v58)
          {
            ++*(_DWORD *)(v58 + 8);
            v76 = v58;
            v59 = 1;
LABEL_136:
            LODWORD(v77) = v59;
LABEL_139:
            v78 = 1;
            LOBYTE(v81) = 0;
            v82 = -1;
            ((void (*)(uint64_t *, WTF::StringImpl **, uint64_t *))off_1E32739D8[v59])(&v72, &v81, &v76);
            v82 = v59;
            v83 = 0;
            if (v78 && (_DWORD)v77 != -1)
              ((void (*)(uint64_t *, uint64_t *))off_1E3273998[v77])(&v72, &v76);
LABEL_49:
            v31 = v83;
            if (v83)
            {
              v37 = 0;
              goto LABEL_65;
            }
            if (v66 || (v32 = v65, v65 = 0, v79 = v32, v64))
              std::__throw_bad_variant_access[abi:sn180100]();
            v33 = v63;
            v63 = 0;
            v74 = v33;
            LOBYTE(v72) = 0;
            LODWORD(v73) = -1;
            v34 = v82;
            if (v82 != -1)
            {
              ((void (*)(uint64_t *, uint64_t *, WTF::StringImpl **))off_1E32739D8[v82])(&v76, &v72, &v81);
              LODWORD(v73) = v34;
            }
            WebCore::Element::setAttributeNS(&v79, (WTF::AtomString *)&v74, v7, (uint64_t)&v72, &v76, v30);
            if ((_DWORD)v73 != -1)
              ((void (*)(char *, uint64_t *))off_1E3273998[v73])(&v75, &v72);
            v35 = v74;
            v74 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v8);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v79;
            v79 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v8);
              else
                *(_DWORD *)v36 -= 2;
            }
            if (!v78)
            {
              v37 = 10;
LABEL_64:
              v31 = v83;
LABEL_65:
              if (v31 != -1)
                ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32739F8[v31])(&v76, &v81);
              v10 = v64;
              goto LABEL_68;
            }
            v8 = (WTF::StringImpl *)v76;
            LOBYTE(v72) = v76;
            v55 = v77;
            v77 = 0;
            v73 = v55;
            if (!*((_QWORD *)v4 + 2))
            {
              v56.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v76, (JSC::JSGlobalObject *)&v73);
              JSC::VM::throwException(v4, this, v56);
              v55 = v73;
            }
            v73 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v8);
              else
                *(_DWORD *)v55 -= 2;
            }
            if (v78)
            {
              v57 = v77;
              v77 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 != 2)
                {
                  v37 = 0;
                  *(_DWORD *)v57 -= 2;
                  goto LABEL_64;
                }
                WTF::StringImpl::destroy(v57, v8);
              }
            }
            v37 = 0;
            goto LABEL_64;
          }
        }
        if ((_DWORD)v12 && v14 != &WebCore::JSTrustedScriptURL::s_info)
        {
          do
          {
            v14 = (char **)v14[2];
            v13 = v14 != 0;
          }
          while (v14 != &WebCore::JSTrustedScriptURL::s_info && v14 != 0);
        }
        if (v13)
        {
          v60 = *(_QWORD *)(v11 + 24);
          if (v60)
          {
            ++*(_DWORD *)(v60 + 8);
            v76 = v60;
            v59 = 2;
            goto LABEL_136;
          }
        }
        v72 = v11;
        v23 = (JSC::VM *)*((_QWORD *)this + 7);
        v24 = (JSC::JSRopeString *)v11;
        if (*(_BYTE *)(v11 + 5) == 2)
        {
LABEL_40:
          v25 = (WTF::AtomStringImpl *)*((_QWORD *)v24 + 1);
          if ((v25 & 1) != 0)
          {
            JSC::JSRopeString::resolveRopeToAtomString(v24, this);
            goto LABEL_45;
          }
          if (v25)
          {
            if ((*((_BYTE *)v25 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v25 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v25, v8);
              v25 = v80;
            }
            v26 = *((_QWORD *)v24 + 1);
            v79 = v25;
            if ((*(_BYTE *)(v26 + 16) & 0x10) != 0)
              goto LABEL_45;
            v41 = *((_QWORD *)this + 7);
            if (v25)
              *(_DWORD *)v25 += 2;
          }
          else
          {
            v79 = 0;
            if ((MEMORY[0x10] & 0x10) != 0)
              goto LABEL_45;
            v25 = 0;
            v41 = *((_QWORD *)this + 7);
          }
          __dmb(0xAu);
          v42 = (WTF::AtomStringImpl *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = v25;
          v80 = v42;
          v43 = (_QWORD *)(v41 + 808);
          v44 = *(unsigned int *)(v41 + 820);
          if ((_DWORD)v44 == *(_DWORD *)(v41 + 816))
          {
            v48 = v41;
            v46 = (WTF::AtomStringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v80);
            v41 = v48;
            v44 = *(unsigned int *)(v48 + 820);
            v45 = (WTF::AtomStringImpl **)(*(_QWORD *)(v48 + 808) + 8 * v44);
            v42 = *v46;
          }
          else
          {
            v45 = (WTF::AtomStringImpl **)(*v43 + 8 * v44);
            v46 = &v80;
          }
          *v46 = 0;
          *v45 = v42;
          *(_DWORD *)(v41 + 820) = v44 + 1;
          v47 = v80;
          v80 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v8);
            else
              *(_DWORD *)v47 -= 2;
          }
LABEL_45:
          if (*((_DWORD *)v23 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
            v27 = v79;
            if (hasExceptionsAfterHandlingTraps)
            {
              LODWORD(v77) = 1;
              v79 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v53);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = 1;
              v29 = 1;
              goto LABEL_48;
            }
          }
          else
          {
            v27 = v79;
          }
          v28 = 0;
          v29 = 0;
          LODWORD(v77) = 0;
          v76 = 0;
          v81 = v27;
          v82 = 3;
LABEL_48:
          v83 = v28;
          ((void (*)(uint64_t *, uint64_t *))off_1E32712B8[v29])(&v72, &v76);
          goto LABEL_49;
        }
      }
      v24 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v72, this);
      goto LABEL_40;
    }
    v37 = 0;
  }
LABEL_74:
  if (HIDWORD(v68))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v67, v71);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v70;
    if (HIDWORD(v68))
    {
      v50 = v67;
      v51 = 8 * HIDWORD(v68);
      do
      {
        v52 = *(_QWORD *)v50;
        *(_QWORD *)v50 = 0;
        if (v52)
        {
          if (*(_DWORD *)(v52 + 24) == 2)
          {
            if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v52, v8);
          }
          else
          {
            *(_DWORD *)(v52 + 24) -= 2;
          }
        }
        v50 = (WTF *)((char *)v50 + 8);
        v51 -= 8;
      }
      while (v51);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v70;
  }
  v38 = v67;
  if (v69 != (_BYTE *)v67 && v67 != 0)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v38, v8);
  }
  return (_BYTE *)v37;
}

_BYTE *WebCore::jsElementPrototypeFunction_removeAttribute(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  JSValue v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  _BYTE v24[40];
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  WTF::StringImpl *v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "Element", "removeAttribute");
  v6 = *(WebCore::Element **)(v5 + 24);
  v22 = (WTF *)v24;
  v23 = 4;
  v24[32] = 0;
  v25 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v26 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v22;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v11 = JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v20);
    v8 = v21;
    if (v21)
    {
      v11 = 0;
    }
    else
    {
      v9 = v20;
      v20 = 0;
      v27 = v9;
      WebCore::Element::removeAttribute(v6, (const WTF::AtomString *)&v27);
      v10 = v27;
      v27 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v8 = v21;
      v11 = 10;
    }
    if (v8 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v8])(&v27, &v20);
  }
  if (HIDWORD(v23))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v22, v26);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v25;
    if (HIDWORD(v23))
    {
      v16 = v22;
      v17 = 8 * HIDWORD(v23);
      do
      {
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18, v7);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v25;
  }
  v12 = v22;
  if (v24 != (_BYTE *)v22 && v22 != 0)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v12, v7);
  }
  return (_BYTE *)v11;
}

_BYTE *WebCore::jsElementPrototypeFunction_removeAttributeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF *v14;
  WTF *v17;
  void *v18;
  JSValue v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "removeAttributeNS");
  v7 = *(_QWORD *)(v5 + 24);
  v26 = (uint64_t *)v28;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v7 = JSC::VM::throwException(v4, this, v19);
    goto LABEL_27;
  }
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_9;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v31);
  LOBYTE(v24) = 0;
  v25 = -1;
  v9 = v32;
  if (v32 == -1)
  {
    v7 = 0;
    goto LABEL_27;
  }
  ((void (*)(WTF::StringImpl ***, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v32])(&v35, &v24, &v31);
  v25 = v9;
  if (v32 != -1)
  {
    ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v32])(&v35, &v31);
    v9 = v25;
  }
  if (!v9)
  {
LABEL_9:
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v31);
    v10 = v32;
    if (v32)
    {
      v7 = 0;
LABEL_21:
      if (v10 != -1)
        ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v10])(&v35, &v31);
      v9 = v25;
      goto LABEL_24;
    }
    if (v25)
    {
      v14 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
      v26 = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v14, v8);
      return (_BYTE *)v7;
    }
    v11 = v24;
    v24 = 0;
    v12 = v31;
    v31 = 0;
    v33 = v12;
    v34 = v11;
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v35, MEMORY[0x1E0CBF2F8], &v33, &v34);
    WebCore::Element::removeAttribute((WebCore::Element *)v7, (const WebCore::QualifiedName *)&v35);
    v13 = v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v13);
        WTF::fastFree(v17, v18);
        if (v12)
        {
LABEL_15:
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_17:
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v11 -= 2;
        }
        v10 = v32;
        v7 = 10;
        goto LABEL_21;
      }
      --*(_DWORD *)v13;
    }
    if (v12)
      goto LABEL_15;
    goto LABEL_17;
  }
  v7 = 0;
LABEL_24:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v31, &v24);
LABEL_27:
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v20 = v26;
      v21 = 8 * HIDWORD(v27);
      do
      {
        v22 = *v20;
        *v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v8);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v14 = (WTF *)v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
    goto LABEL_53;
  return (_BYTE *)v7;
}

_BYTE *WebCore::jsElementPrototypeFunction_toggleAttribute(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::String *v9;
  int32x4_t v10;
  int v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  _BOOL4 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  JSValue v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSValue v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  _BYTE v45[40];
  uint64_t v46;
  JSC::JSGlobalObject *v47;
  uint64_t v48;
  WTF::StringImpl *v49;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "Element", "toggleAttribute");
  v7 = *(_QWORD *)(v5 + 24);
  v43 = (WTF *)v45;
  v44 = 4;
  v45[32] = 0;
  v46 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v47 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v43;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v41);
    v11 = v42;
    if (v42)
    {
      v20 = 0;
LABEL_23:
      if (v11 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v11])(&v38, &v41);
      goto LABEL_25;
    }
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL || (v12 = *((_QWORD *)a2 + 7), v12 == 10))
    {
      v16 = 0;
      goto LABEL_14;
    }
    v13 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v12 >= 0xFFFE000000000000)
    {
      v31 = (_DWORD)v12 == 0;
    }
    else
    {
      *(_QWORD *)&v14 = v12 - 0x2000000000000;
      if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v10.i64[0] = v12 - 0x2000000000000;
        v15 = v14 > 0.0 || v14 < 0.0;
LABEL_11:
        if (*((_DWORD *)v13 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
          {
            v20 = 0;
LABEL_22:
            v11 = v42;
            goto LABEL_23;
          }
          if (v42)
            goto LABEL_57;
        }
        v16 = v15 | 0x100;
LABEL_14:
        v17 = v41;
        v41 = 0;
        v37 = v17;
        WebCore::Element::toggleAttribute((WTF::AtomString *)&v37, v7, v16, v9, (uint64_t)&v38, v10);
        v18 = v40;
        if (!v40)
        {
          if ((_BYTE)v38)
            v19 = 7;
          else
            v19 = 6;
          goto LABEL_18;
        }
        if (v40 == 1)
        {
          v8 = (WTF::StringImpl *)v38;
          LOBYTE(v48) = (_BYTE)v38;
          v29 = v39;
          v39 = 0;
          v49 = v29;
          if (!*((_QWORD *)v4 + 2))
          {
            v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v38, (JSC::JSGlobalObject *)&v49);
            JSC::VM::throwException(v4, this, v30);
            v29 = v49;
          }
          v49 = 0;
          if (!v29)
          {
LABEL_52:
            v19 = 0;
            v20 = 0;
            v18 = v40;
            if (v40 == -1)
            {
LABEL_19:
              v40 = -1;
              v21 = v37;
              v37 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v8);
                else
                  *(_DWORD *)v21 -= 2;
              }
              goto LABEL_22;
            }
LABEL_18:
            off_1E3273A08[v18](&v48, &v38);
            v20 = v19;
            goto LABEL_19;
          }
          if (*(_DWORD *)v29 != 2)
          {
            *(_DWORD *)v29 -= 2;
            goto LABEL_52;
          }
LABEL_58:
          WTF::StringImpl::destroy(v29, v8);
          goto LABEL_52;
        }
LABEL_57:
        v29 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_58;
      }
      if ((v12 & 0xFFFE000000000002) != 0)
      {
        v15 = v12 == 7;
        goto LABEL_11;
      }
      v32 = *(unsigned __int8 *)(v12 + 5);
      if (v32 == 3)
      {
        v35 = *(_DWORD *)(v12 + 8);
      }
      else
      {
        if (v32 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v15 = 1;
            goto LABEL_11;
          }
          v31 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_71;
        }
        v33 = *(_QWORD *)(v12 + 8);
        if ((v33 & 1) != 0)
          v34 = (int *)(v12 + 16);
        else
          v34 = (int *)(v33 + 4);
        v35 = *v34;
      }
      v31 = v35 == 0;
    }
LABEL_71:
    v15 = !v31;
    goto LABEL_11;
  }
  v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  v20 = JSC::VM::throwException(v4, this, v25);
LABEL_25:
  if (HIDWORD(v44))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v43, v47);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v46;
    if (HIDWORD(v44))
    {
      v26 = v43;
      v27 = 8 * HIDWORD(v44);
      do
      {
        v28 = *(_QWORD *)v26;
        *(_QWORD *)v26 = 0;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v28, v8);
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        v26 = (WTF *)((char *)v26 + 8);
        v27 -= 8;
      }
      while (v27);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v46;
  }
  v22 = v43;
  if (v45 != (_BYTE *)v43 && v43 != 0)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v22, v8);
  }
  return (_BYTE *)v20;
}

_BYTE *WebCore::jsElementPrototypeFunction_hasAttribute(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  JSValue v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "Element", "hasAttribute");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v19);
  v10 = v20;
  if (v20)
  {
    v12 = 0;
  }
  else
  {
    v18 = v19;
    v19 = 0;
    if (WebCore::Element::hasAttribute(v6, (const WTF::AtomString *)&v18, v7, v8, v9))
      v12 = 7;
    else
      v12 = 6;
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v10 = v20;
  }
  if (v10 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v10])(&v18, &v19);
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsElementPrototypeFunction_hasAttributeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  JSC::VM *v5;
  uint64_t v6;
  WebCore::Element *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Element", "hasAttributeNS");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v17);
  }
  v8 = *(WebCore::Element **)(v6 + 24);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v23);
    LOBYTE(v21) = 0;
    v22 = -1;
    v3 = v24;
    if (v24 == -1)
      return 0;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v24])(&v20, &v21, &v23);
    v22 = v3;
    if (v24 != -1)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v24])(&v20, &v23);
      v3 = v22;
    }
    if (v3)
      goto LABEL_36;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v23);
  v9 = v24;
  if (v24)
  {
    v12 = 0;
LABEL_21:
    if (v9 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v9])(&v20, &v23);
    v3 = v22;
    goto LABEL_24;
  }
  if (!v22)
  {
    v20 = v21;
    v21 = 0;
    v10 = v23;
    v23 = 0;
    v19 = v10;
    if (WebCore::Element::hasAttributeNS(v8, &v20, &v19))
      v12 = 7;
    else
      v12 = 6;
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v9 = v24;
    goto LABEL_21;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
  v12 = 0;
LABEL_24:
  if (v3 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v3])(&v23, &v21);
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAttributeNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  int v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  int v24;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "Element", "getAttributeNode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v6 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v23);
  v10 = v24;
  if (v24)
  {
    v14 = 0;
  }
  else
  {
    v11 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v12 = v23;
    v23 = 0;
    v21 = v12;
    WebCore::Element::getAttributeNode(v6, (const WTF::AtomString *)&v21, v7, v8, &v22, v9);
    if (v22)
    {
      v14 = WebCore::wrap<WebCore::Attr>((int)this, v11, (uint64_t)v22);
      v15 = v22;
      v22 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v13);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
    }
    else
    {
      v22 = 0;
      v14 = 2;
    }
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v10 = v24;
  }
  if (v10 != -1)
    ((void (*)(WebCore::Node **, WTF::StringImpl **))off_1E32712B8[v10])(&v22, &v23);
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAttributeNodeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  JSC::VM *v5;
  uint64_t v6;
  WebCore::QualifiedName::QualifiedNameImpl *v8;
  int v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Element", "getAttributeNodeNS");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v20);
  }
  v8 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v6 + 24);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v27);
    LOBYTE(v25) = 0;
    v26 = -1;
    v3 = v28;
    if (v28 == -1)
      return 0;
    ((void (*)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v28])(&v24, &v25, &v27);
    v26 = v3;
    if (v28 != -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32712B8[v28])(&v24, &v27);
      v3 = v26;
    }
    if (v3)
      goto LABEL_39;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
  v9 = v28;
  if (v28)
  {
    v15 = 0;
LABEL_21:
    if (v9 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32712B8[v9])(&v24, &v27);
    v3 = v26;
    goto LABEL_24;
  }
  if (!v26)
  {
    v10 = *(JSC::VM **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v11 = v25;
    v25 = 0;
    v12 = v27;
    v27 = 0;
    v22 = v12;
    v23 = v11;
    WebCore::Element::getAttributeNodeNS(v8, &v23, &v22, &v24);
    v14 = v24;
    if (v24)
    {
      v15 = WebCore::wrap<WebCore::Attr>((int)this, v10, v24);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v13);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    else
    {
      v15 = 2;
    }
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v9 = v28;
    goto LABEL_21;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_39:
  v15 = 0;
LABEL_24:
  if (v3 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v3])(&v27, &v25);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsElementPrototypeFunction_setAttributeNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  WebCore::Attr *v8;
  uint64_t v9;
  JSC::VM *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  JSValue v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  JSC::VM *v26;
  int v27[2];
  WTF::StringImpl *v28;
  int v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Element", "setAttributeNode");
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v13 = JSC::VM::throwException(v4, this, v17);
LABEL_11:
    if (HIDWORD(v31))
    {
      WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
      if (HIDWORD(v31))
      {
        v18 = v30;
        v19 = 8 * HIDWORD(v31);
        do
        {
          v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24) == 2)
            {
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v20, v11);
            }
            else
            {
              *(_DWORD *)(v20 + 24) -= 2;
            }
          }
          v18 = (WTF *)((char *)v18 + 8);
          v19 -= 8;
        }
        while (v19);
      }
    }
    else
    {
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    }
    v14 = v30;
    if (v32 != (_BYTE *)v30 && v30 != 0)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v14, v11);
    }
    return (_BYTE *)v13;
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v27 = v4;
  v8 = (WebCore::Attr *)WebCore::JSAttr::toWrapped((uint64_t)v4, v7);
  if (!v8)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "attr", 5, "Element", 8, v9, "setAttributeNode", 17, "Attr", 5);
    v13 = 0;
    goto LABEL_11;
  }
  v10 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::setAttributeNode(v6, v8, (uint64_t)v27);
  if (!v29)
  {
    v12 = *(_QWORD *)v27;
    *(_QWORD *)v27 = 0;
    if (v12)
    {
      v13 = WebCore::wrap<WebCore::Attr>((int)this, v10, v12);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    else
    {
      v13 = 2;
    }
LABEL_9:
    if (v29 != -1)
      ((void (*)(_BYTE *, int *))off_1E3273A50[v29])(v35, v27);
    goto LABEL_11;
  }
  if (v29 == 1)
  {
    v11 = (void *)LOBYTE(v27[0]);
    v35[0] = v27[0];
    v21 = v28;
    v28 = 0;
    v36 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException(v4, this, v22);
      v21 = v36;
    }
    v36 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v21 -= 2;
    }
    v13 = 0;
    goto LABEL_9;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementPrototypeFunction_setAttributeNodeNS(v23, v24, v25);
}

_BYTE *WebCore::jsElementPrototypeFunction_setAttributeNodeNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  WebCore::Attr *v8;
  uint64_t v9;
  JSC::VM *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  JSValue v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  JSC::VM *v26;
  int v27[2];
  WTF::StringImpl *v28;
  int v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Element", "setAttributeNodeNS");
  v30 = (WTF *)v32;
  v31 = 4;
  v32[32] = 0;
  v33 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v34 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v30;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v13 = JSC::VM::throwException(v4, this, v17);
LABEL_11:
    if (HIDWORD(v31))
    {
      WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v30, v34);
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
      if (HIDWORD(v31))
      {
        v18 = v30;
        v19 = 8 * HIDWORD(v31);
        do
        {
          v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24) == 2)
            {
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v20, v11);
            }
            else
            {
              *(_DWORD *)(v20 + 24) -= 2;
            }
          }
          v18 = (WTF *)((char *)v18 + 8);
          v19 -= 8;
        }
        while (v19);
      }
    }
    else
    {
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v33;
    }
    v14 = v30;
    if (v32 != (_BYTE *)v30 && v30 != 0)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v14, v11);
    }
    return (_BYTE *)v13;
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v27 = v4;
  v8 = (WebCore::Attr *)WebCore::JSAttr::toWrapped((uint64_t)v4, v7);
  if (!v8)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "attr", 5, "Element", 8, v9, "setAttributeNodeNS", 19, "Attr", 5);
    v13 = 0;
    goto LABEL_11;
  }
  v10 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::setAttributeNodeNS(v6, v8, (uint64_t)v27);
  if (!v29)
  {
    v12 = *(_QWORD *)v27;
    *(_QWORD *)v27 = 0;
    if (v12)
    {
      v13 = WebCore::wrap<WebCore::Attr>((int)this, v10, v12);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    else
    {
      v13 = 2;
    }
LABEL_9:
    if (v29 != -1)
      ((void (*)(_BYTE *, int *))off_1E3273A50[v29])(v35, v27);
    goto LABEL_11;
  }
  if (v29 == 1)
  {
    v11 = (void *)LOBYTE(v27[0]);
    v35[0] = v27[0];
    v21 = v28;
    v28 = 0;
    v36 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException(v4, this, v22);
      v21 = v36;
    }
    v36 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v21 -= 2;
    }
    v13 = 0;
    goto LABEL_9;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementPrototypeFunction_removeAttributeNode(v23, v24, v25);
}

_BYTE *WebCore::jsElementPrototypeFunction_removeAttributeNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WTF::String *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  WebCore::Attr *v18;
  JSC::VM *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  JSValue v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  JSC::VM *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[40];
  uint64_t v42;
  JSC::JSGlobalObject *v43;
  JSC::VM *v44;
  unsigned __int8 v45[8];
  WTF::StringImpl *v46;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "Element", "removeAttributeNode");
  v44 = v10;
  v39 = (WTF *)v41;
  a5.n128_u64[0] = 4;
  v40 = 4;
  v41[32] = 0;
  v42 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v43 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v39;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v22 = JSC::VM::throwException(v10, this, v27);
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v11 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v36 = v10;
  if ((v13 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v14 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
  v15 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
  v16 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v17 = v16 == &WebCore::JSAttr::s_info;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v16 = (char **)v16[2];
      v15 = v16 != 0;
    }
    while (v16 != &WebCore::JSAttr::s_info && v16 != 0);
  }
  if (!v15 || (v18 = *(WebCore::Attr **)(v13 + 24)) == 0)
  {
LABEL_33:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v36, 0, "attr", 5, "Element", 8, a9, "removeAttributeNode", 20, "Attr", 5);
    v22 = 0;
LABEL_17:
    if (HIDWORD(v40))
    {
      WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v39, v43);
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v42;
      if (HIDWORD(v40))
      {
        v28 = v39;
        v29 = 8 * HIDWORD(v40);
        do
        {
          v30 = *(_QWORD *)v28;
          *(_QWORD *)v28 = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30, v20);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          v28 = (WTF *)((char *)v28 + 8);
          v29 -= 8;
        }
        while (v29);
      }
    }
    else
    {
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v42;
    }
    v23 = v39;
    if (v41 != (_BYTE *)v39 && v39 != 0)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree(v23, v20);
    }
    return (_BYTE *)v22;
  }
  v19 = *(JSC::VM **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::removeAttributeNode(v12, v18, (uint64_t)a3, a4, (uint64_t)&v36, a5);
  if (!v38)
  {
    v21 = (uint64_t)v36;
    v36 = 0;
    v22 = WebCore::wrap<WebCore::Attr>((int)this, v19, v21);
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v20);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
LABEL_15:
    if (v38 != -1)
      ((void (*)(unsigned __int8 *, JSC::VM **))off_1E3273A60[v38])(v45, &v36);
    goto LABEL_17;
  }
  if (v38 == 1)
  {
    v45[0] = v36;
    v31 = v37;
    v37 = 0;
    v46 = v31;
    if (!*((_QWORD *)v10 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v44, v45);
      v31 = v46;
    }
    v46 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v31 -= 2;
    }
    v22 = 0;
    goto LABEL_15;
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementPrototypeFunction_attachShadow(v32, v33, v34);
}

_BYTE *WebCore::jsElementPrototypeFunction_attachShadow(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  unsigned int *v6;
  JSC::VM *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  JSValue v12;
  WTF::StringImpl *v13;
  WebCore *v14;
  JSC::JSGlobalObject *v15;
  JSC::CallFrame *v16;
  JSC::VM *v17;
  int v18;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  char v24;
  int v25;
  JSC::VM *v26;
  unsigned __int8 v27[8];
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "Element", "attachShadow");
  v26 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v12);
  }
  v6 = *(unsigned int **)(v5 + 24);
  WebCore::convertDictionary<WebCore::ShadowRootInit>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v23);
  if (v25)
    return 0;
  v7 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v19 = v24;
  v18 = v23;
  WebCore::Element::attachShadow(v6, (const WTF::AtomString *)&v18, (uint64_t)&v20);
  if (!v22)
  {
    v9 = WebCore::wrap<WebCore::ShadowRoot>((int)this, v7, v20);
LABEL_7:
    if (v22 != -1)
      ((void (*)(unsigned __int8 *, uint64_t *))off_1E3273A70[v22])(v27, &v20);
    return (_BYTE *)v9;
  }
  if (v22 == 1)
  {
    v27[0] = v20;
    v13 = v21;
    v21 = 0;
    v28 = v13;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v26, v27);
      v13 = v28;
    }
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v9 = 0;
    goto LABEL_7;
  }
  v14 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementPrototypeFunction_closest(v14, v15, v16);
}

_BYTE *WebCore::jsElementPrototypeFunction_closest(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSC::JSGlobalObject *v11;
  __n128 v12;
  int v13;
  WebCore::Element *v14;
  WebCore::Element *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  WTF::StringImpl *v27;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore::Element *v32;
  int v33;
  uint64_t v34;
  int v35;
  JSC::VM *v36;
  uint64_t v37;
  WebCore::Element *v38;
  int v39;
  char v40;

  v5 = *((_QWORD *)this + 7);
  v29 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Element", "closest");
  v36 = (JSC::VM *)v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v26);
  }
  v7 = *(WebCore::Element **)(v6 + 24);
  v8 = *((_QWORD *)a2 + 6);
  v37 = v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v37, this);
  }
  else
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
    if (v9)
      *(_DWORD *)v9 += 2;
    v31 = v9;
  }
  if (*(_DWORD *)(v5 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    v10 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v35 = 1;
      v31 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v27);
        else
          *(_DWORD *)v10 -= 2;
      }
      v19 = 0;
      v23 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v10 = v31;
  }
  v35 = 0;
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
  v34 = 0;
  v30 = v10;
  WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)v7 + 5) + 8), &v30, (uint64_t)&v37, a4);
  v13 = v39;
  if (v39)
  {
    if (v39 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_46;
    }
    v17 = v37;
    v7 = v38;
    v38 = 0;
    LOBYTE(v31) = v37;
    v32 = v7;
    v16 = 1;
    v33 = 1;
  }
  else
  {
    v14 = WebCore::SelectorDataList::closest((const WebCore::CSSSelector ***)(v37 + 8), v7, v12);
    v31 = v14;
    v33 = 0;
    v16 = v39;
    if (v39 == -1)
      goto LABEL_17;
    v17 = (char)v14;
  }
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v16])(&v40, &v37);
  if (!v13)
  {
LABEL_17:
    if (v31)
    {
      v19 = WebCore::toJS(this, v11, v31, v15);
      v20 = 0;
    }
    else
    {
      v20 = 0;
      v19 = 2;
    }
    goto LABEL_19;
  }
  LOBYTE(v37) = v17;
  v32 = 0;
  v38 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
    WebCore::propagateExceptionSlowPath(this, &v36, (unsigned __int8 *)&v37);
    v7 = v38;
  }
  v38 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_42;
    }
LABEL_46:
    WTF::StringImpl::destroy(v7, v18);
    v19 = 0;
    v20 = v33;
    if (v33 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  v19 = 0;
  v20 = 1;
LABEL_19:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3271318[v20])(&v37, &v31);
LABEL_20:
  v33 = -1;
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = 0;
LABEL_24:
  ((void (*)(uint64_t *, uint64_t *))off_1E3272138[v23])(&v37, &v34);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsElementPrototypeFunction_getElementsByTagName(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  int v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  JSValue v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "Element", "getElementsByTagName");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  v6 = *(WebCore::ContainerNode **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v20);
  v7 = v21;
  if (v21)
  {
    v11 = 0;
  }
  else
  {
    v8 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v9 = v20;
    v20 = 0;
    v18 = v9;
    WebCore::ContainerNode::getElementsByTagName(v6, (const WTF::AtomString *)&v18, (uint64_t *)&v19);
    v11 = WebCore::wrap<WebCore::HTMLCollection>((int)this, v8, (uint64_t)v19);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      if (v12[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[4];
    }
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v7 = v21;
  }
  if (v7 != -1)
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E32712B8[v7])(&v19, &v20);
  return (_BYTE *)v11;
}

_BYTE *WebCore::jsElementPrototypeFunction_getElementsByTagNameNS(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  JSC::VM *v5;
  uint64_t v6;
  WebCore::ContainerNode *v8;
  int v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Element", "getElementsByTagNameNS");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v20);
  }
  v8 = *(WebCore::ContainerNode **)(v6 + 24);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v27);
    LOBYTE(v25) = 0;
    v26 = -1;
    v3 = v28;
    if (v28 == -1)
      return 0;
    ((void (*)(WTF::StringImpl ***, WTF::StringImpl **, WTF::StringImpl **))off_1E3273988[v28])(&v24, &v25, &v27);
    v26 = v3;
    if (v28 != -1)
    {
      ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v28])(&v24, &v27);
      v3 = v26;
    }
    if (v3)
      goto LABEL_37;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
  v9 = v28;
  if (v28)
  {
    v14 = 0;
LABEL_21:
    if (v9 != -1)
      ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E32712B8[v9])(&v24, &v27);
    v3 = v26;
    goto LABEL_24;
  }
  if (!v26)
  {
    v10 = *(JSC::VM **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v11 = v25;
    v25 = 0;
    v12 = v27;
    v27 = 0;
    v22 = v12;
    v23 = v11;
    WebCore::ContainerNode::getElementsByTagNameNS(v8, &v23, &v22, &v24);
    v14 = WebCore::wrap<WebCore::HTMLCollection>((int)this, v10, (uint64_t)v24);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 4) == 1)
        (*((void (**)(WTF::StringImpl **))*v15 + 1))(v15);
      else
        --*((_DWORD *)v15 + 4);
    }
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v9 = v28;
    goto LABEL_21;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
  v14 = 0;
LABEL_24:
  if (v3 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v3])(&v27, &v25);
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsElementPrototypeFunction_getElementsByClassName(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  int v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  JSValue v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "Element", "getElementsByClassName");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  v6 = *(WebCore::ContainerNode **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v20);
  v7 = v21;
  if (v21)
  {
    v11 = 0;
  }
  else
  {
    v8 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v9 = v20;
    v20 = 0;
    v18 = v9;
    WebCore::ContainerNode::getElementsByClassName(v6, (const WTF::AtomString *)&v18, (uint64_t *)&v19);
    v11 = WebCore::wrap<WebCore::HTMLCollection>((int)this, v8, (uint64_t)v19);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      if (v12[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[4];
    }
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v7 = v21;
  }
  if (v7 != -1)
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E32712B8[v7])(&v19, &v20);
  return (_BYTE *)v11;
}

_BYTE *WebCore::jsElementPrototypeFunction_insertAdjacentElement(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WebCore::Element *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Element *v17;
  JSC::JSGlobalObject *v18;
  WebCore::Element *v19;
  unint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  void *v24;
  WTF *v25;
  JSValue v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  JSValue v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WebCore::JSDOMGlobalObject *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  _BYTE v49[40];
  uint64_t v50;
  JSC::JSGlobalObject *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  v9 = *((_QWORD *)this + 7);
  v40 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "Element", "insertAdjacentElement");
  v47 = (WTF *)v49;
  v48 = 4;
  v49[32] = 0;
  v50 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v51 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v47;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v20 = JSC::VM::throwException((JSC::VM *)v9, this, v28);
    goto LABEL_23;
  }
  v12 = *(WebCore::Element **)(v10 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v42 = (WebCore::JSDOMGlobalObject *)v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_9;
    }
    else if (!v14)
    {
LABEL_9:
      v52 = v14;
      goto LABEL_10;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, this);
LABEL_10:
  if (*(_DWORD *)(v9 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9);
    v15 = v52;
    if (hasExceptionsAfterHandlingTraps)
    {
      v46 = 1;
      v52 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v33);
        else
          *(_DWORD *)v15 -= 2;
      }
      v20 = 0;
      v23 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    v15 = v52;
  }
  v45 = v15;
  v46 = 0;
  v16 = *((_QWORD *)a2 + 7);
  v42 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v16 + 5) != 241
    || (v17 = *(WebCore::Element **)(v16 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 1, "element", 8, "Element", 8, a8, "insertAdjacentElement", 22, "Element", 8);
    v20 = 0;
LABEL_21:
    v23 = 0;
LABEL_22:
    ((void (*)(WebCore::JSDOMGlobalObject **, WTF::StringImpl **))off_1E3272138[v23])(&v42, &v45);
LABEL_23:
    if (HIDWORD(v48))
    {
      WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v47, v51);
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v50;
      if (HIDWORD(v48))
      {
        v29 = v47;
        v30 = 8 * HIDWORD(v48);
        do
        {
          v31 = *(_QWORD *)v29;
          *(_QWORD *)v29 = 0;
          if (v31)
          {
            if (*(_DWORD *)(v31 + 24) == 2)
            {
              if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v31, v24);
            }
            else
            {
              *(_DWORD *)(v31 + 24) -= 2;
            }
          }
          v29 = (WTF *)((char *)v29 + 8);
          v30 -= 8;
        }
        while (v30);
      }
    }
    else
    {
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v50;
    }
    v25 = v47;
    if (v49 != (_BYTE *)v47 && v47 != 0)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree(v25, v24);
    }
    return (_BYTE *)v20;
  }
  v18 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v45 = 0;
  v41 = v15;
  WebCore::Element::insertAdjacentElement(v12, (const WTF::String *)&v41, v17, (uint64_t)&v42);
  if (!v44)
  {
    if (v42)
    {
      v20 = WebCore::toJS(this, v18, v42, v19);
      v21 = 0;
    }
    else
    {
      v21 = 0;
      v20 = 2;
    }
LABEL_18:
    ((void (*)(WTF::StringImpl **, WebCore::JSDOMGlobalObject **))off_1E3271318[v21])(&v52, &v42);
    v44 = -1;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v22);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_21;
  }
  if (v44 == 1)
  {
    v34 = (WTF::StringImpl *)v42;
    LOBYTE(v52) = (_BYTE)v42;
    v35 = v43;
    v43 = 0;
    v53 = v35;
    if (!*(_QWORD *)(v9 + 16))
    {
      v36.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v42, (JSC::JSGlobalObject *)&v53);
      JSC::VM::throwException((JSC::VM *)v9, this, v36);
      v35 = v53;
    }
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    v20 = 0;
    v21 = 1;
    goto LABEL_18;
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementPrototypeFunction_insertAdjacentText(v37, v38, v39);
}

_BYTE *WebCore::jsElementPrototypeFunction_insertAdjacentText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36[2];
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;

  v4 = *((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Element", "insertAdjacentText");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v22);
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v36 = v8;
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
    {
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v9)
        goto LABEL_9;
    }
    else if (!v9)
    {
LABEL_9:
      v34 = v9;
      goto LABEL_10;
    }
    *(_DWORD *)v9 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v36, this);
LABEL_10:
  if (*(_DWORD *)(v4 + 80))
  {
    v10 = v34;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    {
      v33 = 1;
      v34 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v23);
        else
          *(_DWORD *)v10 -= 2;
      }
      v17 = 0;
      v19 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v10 = v34;
  }
  v32 = v10;
  v33 = 0;
  v11 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v36 = v11;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v11 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
      if (!v13)
        goto LABEL_17;
    }
    else if (!v13)
    {
LABEL_17:
      v34 = v13;
      goto LABEL_18;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v36, this);
LABEL_18:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v14 = v34;
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v34 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v24);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v14 = v34;
  }
  v31 = 0;
  v32 = 0;
  v34 = v10;
  v30 = 0;
  v39 = v14;
  WebCore::Element::insertAdjacentText(v7, (uint64_t *)&v34, (_DWORD **)&v39, v36);
  v16 = v39;
  v39 = 0;
  if (!v16)
  {
LABEL_23:
    if (v10)
      goto LABEL_24;
    goto LABEL_26;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v16, v15);
  if (v10)
  {
LABEL_24:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v15);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_26:
  if (v38)
  {
    v26 = (WTF::StringImpl *)LOBYTE(v36[0]);
    LOBYTE(v34) = v36[0];
    v27 = v37;
    v35 = v37;
    if (!*(_QWORD *)(v4 + 16))
    {
      v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v36[0]), (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException((JSC::VM *)v4, this, v28);
      v27 = v35;
    }
    v35 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 10;
  }
  v18 = 0;
LABEL_29:
  ((void (*)(int *, uint64_t *))off_1E3272138[v18])(v36, &v30);
  v19 = 0;
LABEL_30:
  ((void (*)(int *, WTF::StringImpl **))off_1E3272138[v19])(v36, &v32);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsElementPrototypeFunction_animate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  JSC::JSCell *v10;
  JSC::VM *v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t (*v16)();
  int v17;
  JSC::JSCell **v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSCell **v21;
  JSC::JSCell *v22;
  unsigned int v23;
  _DWORD *v24;
  JSC::JSCell **v25;
  uint64_t v26;
  JSC::JSCell **v27;
  JSC::JSCell *v28;
  JSC::JSCell *v30;
  JSC::JSCell *v31;
  JSValue v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  JSValue v36;
  _QWORD *v37;
  JSC::VM *v38;
  JSC::JSCell **v39;
  JSC::JSCell **v40;
  int v41;
  char v42[8];
  int v43;
  _BYTE v44[104];
  int v45;
  char v46;
  int v47;
  char v48[8];
  char v49[8];
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char v54[8];
  WTF::StringImpl *v55[13];
  unsigned int v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "Element", "animate");
  v7 = *((_DWORD *)a2 + 8);
  if (v7 == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v8 = *(_QWORD *)(v5 + 24);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v40 = 0;
    v41 = 0;
LABEL_11:
    if ((unint64_t)(v7 - 3) >= 0xFFFFFFFFFFFFFFFELL
      || (v10 = (JSC::JSCell *)*((_QWORD *)a2 + 7), v10 == (JSC::JSCell *)10))
    {
      LOBYTE(v43) = 0;
      v46 = 0;
      v47 = 0;
      v11 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
      goto LABEL_40;
    }
    if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) == 2
      || ((unint64_t)v10 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v10 + 5) >= 0x17u)
    {
      WebCore::convertDictionary<WebCore::KeyframeAnimationOptions>(v10, this, (uint64_t)&v57);
      WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::KeyframeAnimationOptions>>::ConversionResultStorage<WebCore::KeyframeAnimationOptions>(WebCore::Detail::ConversionResultStorage<WebCore::KeyframeAnimationOptions> &&)::{lambda(void)#1}::operator()((uint64_t)v48, (uint64_t)&v57);
      if (v60 != -1)
        (*(&off_1E3273AF8 + v60))((int)v54, (WebCore::KeyframeAnimationOptions *)&v58);
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnrestrictedDouble>::convert(this, (unint64_t)v10, (uint64_t)&v57);
      v13 = (int)v58;
      if ((_DWORD)v58)
      {
        v13 = 1;
      }
      else
      {
        v50 = v57;
        v52 = 0;
      }
      v53 = v13;
    }
    v14 = v53;
    if (v53)
    {
      v47 = 1;
LABEL_35:
      if (v14 != -1)
        ((void (*)(_DWORD **, char *))off_1E3273B08[v14])(&v57, v49);
      v17 = v47;
      if (v47)
      {
        v12 = 0;
LABEL_63:
        if (v17 != -1)
          ((void (*)(char *, int *))off_1E3273B18[v17])(v48, &v43);
        v9 = v41;
        goto LABEL_66;
      }
      if (v41)
        goto LABEL_84;
      v11 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
LABEL_40:
      v39 = 0;
      v18 = v40;
      if (!v40)
      {
LABEL_46:
        v48[0] = 0;
        LOBYTE(v52) = 0;
        if (v46)
        {
          v49[0] = 0;
          v51 = -1;
          v23 = v45;
          if (v45 != -1)
          {
            ((void (*)(char *, char *, _BYTE *))off_1E3273AE8[v45])(v54, v49, v44);
            v51 = v23;
          }
          LOBYTE(v52) = 1;
        }
        WebCore::Element::animate(v8, this, &v39, (uint64_t)v48, (uint64_t)&v57);
        if (!v59)
        {
          v24 = v57;
          v57 = 0;
          v12 = WebCore::wrap<WebCore::WebAnimation>((uint64_t)this, v11, v24);
          if (v24[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
          else
            --v24[6];
LABEL_53:
          if (v59 != -1)
            ((void (*)(char *, _DWORD **))off_1E3271410[v59])(v54, &v57);
          v59 = -1;
          if ((_BYTE)v52 && v51 != -1)
            ((void (*)(char *, char *))*(&off_1E3273AD8 + v51))(v54, v49);
          if (v39)
          {
            v25 = v39 - 2;
            v26 = *(_QWORD *)(((unint64_t)(v39 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v27 = (JSC::JSCell **)*(v39 - 1);
            if (v27)
            {
              v28 = *v25;
              *v27 = *v25;
              *((_QWORD *)v28 + 1) = v27;
              *v25 = 0;
              v25[1] = 0;
            }
            *v25 = *(JSC::JSCell **)(v26 + 40);
            *(_QWORD *)(v26 + 40) = v25;
          }
          v17 = v47;
          goto LABEL_63;
        }
        if (v59 == 1)
        {
          v34 = (WTF::StringImpl *)v57;
          v54[0] = (char)v57;
          v35 = v58;
          v58 = 0;
          v55[0] = v35;
          if (!*((_QWORD *)v4 + 2))
          {
            v36.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v57, (JSC::JSGlobalObject *)v55);
            JSC::VM::throwException(v4, this, v36);
            v35 = v55[0];
          }
          v55[0] = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v34);
            else
              *(_DWORD *)v35 -= 2;
          }
          v12 = 0;
          goto LABEL_53;
        }
LABEL_84:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      v19 = *(_QWORD *)(((unint64_t)(v40 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v20 = *(_QWORD *)(v19 + 40);
      if (v20)
      {
        *(_QWORD *)(v19 + 40) = *(_QWORD *)v20;
        *(_QWORD *)(v20 + 16) = 0;
        v21 = (JSC::JSCell **)(v20 + 16);
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        v39 = (JSC::JSCell **)(v20 + 16);
      }
      else
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v40 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
        v37 = *(_QWORD **)(v19 + 40);
        v18 = v40;
        *(_QWORD *)(v19 + 40) = *v37;
        *v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        v21 = (JSC::JSCell **)(v37 + 2);
        v39 = v21;
        if (!v18)
        {
          v22 = 0;
          goto LABEL_45;
        }
      }
      v22 = *v18;
      if (*v18)
      {
        v30 = *(JSC::JSCell **)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v31 = (JSC::JSCell *)*((_QWORD *)v30 + 3);
        v30 = (JSC::JSCell *)((char *)v30 + 24);
        *(v21 - 2) = v31;
        *(v21 - 1) = v30;
        *(_QWORD *)v30 = v21 - 2;
        *((_QWORD *)v31 + 1) = v21 - 2;
      }
LABEL_45:
      *v21 = v22;
      if (v47)
        goto LABEL_84;
      goto LABEL_46;
    }
    LOBYTE(v55[0]) = 0;
    v56 = -1;
    v15 = v52;
    if (v52 == -1)
    {
      LOBYTE(v58) = 0;
      v61 = 1;
      LOBYTE(v43) = 0;
      v44[0] = 0;
      v45 = -1;
      v46 = 1;
      v47 = 0;
    }
    else
    {
      v16 = off_1E3273AE8[v52];
      ((void (*)(_DWORD **, WTF::StringImpl **, _DWORD **))v16)(&v57, v55, &v50);
      v56 = v15;
      LOBYTE(v58) = 0;
      v60 = -1;
      ((void (*)(JSC::JSCell ***, WTF::StringImpl **, WTF::StringImpl **))v16)(&v39, &v58, v55);
      v60 = v15;
      v61 = 1;
      LOBYTE(v43) = 0;
      v46 = 0;
      v44[0] = 0;
      v45 = -1;
      ((void (*)(JSC::JSCell ***, _BYTE *, WTF::StringImpl **))v16)(&v39, v44, &v58);
      v45 = v15;
      v46 = 1;
      v47 = 0;
      if (!v61)
      {
LABEL_32:
        if (v56 != -1)
          ((void (*)(JSC::JSCell ***, WTF::StringImpl **))*(&off_1E3273AD8 + v56))(&v39, v55);
        v14 = v53;
        goto LABEL_35;
      }
      if (v60 != -1)
        ((void (*)(JSC::JSCell ***, WTF::StringImpl **))*(&off_1E3273AD8 + v60))(&v39, &v58);
    }
    v60 = -1;
    goto LABEL_32;
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)this, *((_QWORD *)a2 + 6), (uint64_t)v42);
  LOBYTE(v40) = 0;
  v41 = -1;
  v9 = v43;
  if (v43 == -1)
    return 0;
  ((void (*)(char *, JSC::JSCell ***, char *))off_1E3273AC8[v43])(v48, &v40, v42);
  v41 = v9;
  if (v43 != -1)
  {
    ((void (*)(char *, char *))off_1E3273AB8[v43])(v48, v42);
    v9 = v41;
  }
  if (!v9)
  {
    v7 = *((_DWORD *)a2 + 8);
    goto LABEL_11;
  }
  v12 = 0;
LABEL_66:
  if (v9 != -1)
    ((void (*)(char *, JSC::JSCell ***))off_1E3273AB8[v9])(v42, &v40);
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAnimations(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  _BYTE v19[4];
  int v20;

  v15 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "Element", "getAnimations");
  if (*((_DWORD *)a2 + 8) == 1)
    v5 = 10;
  else
    v5 = *((_QWORD *)a2 + 6);
  v6 = *(_QWORD *)(v4 + 24);
  WebCore::convertDictionary<WebCore::GetAnimationsOptions>((JSC::JSCell *)v5, (unint64_t)this, (uint64_t)v19);
  if (v20)
    return 0;
  v7 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::getAnimations(v6, v19[0] | 0x100, (uint64_t)&v16);
  v9 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebAnimation>>>::convert<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul>((uint64_t)this, v7, (uint64_t)&v16);
  if (v18)
  {
    v10 = v16;
    v11 = 8 * v18;
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (v12[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 72))(v12);
        else
          --v12[6];
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  v13 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree(v13, v8);
  }
  return (_BYTE *)v9;
}

_BYTE *WebCore::jsElementPrototypeFunction_before(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  JSC::JSGlobalObject *v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "before");
  v6 = *(unsigned int **)(v5 + 24);
  v25 = (WTF *)v27;
  v26 = 4;
  v27[32] = 0;
  v28 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v29 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v25;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v24);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_44;
  WebCore::Node::before(v6, (unsigned int **)&v24, &v32);
  if (v34)
  {
    v7 = (WTF::StringImpl *)v32;
    v30 = v32;
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v22 = v33;
      v33 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          v8 = 0;
          *(_DWORD *)v22 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v22, v7);
      }
    }
LABEL_44:
    v8 = 0;
    goto LABEL_6;
  }
  v8 = 10;
LABEL_6:
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v13])(&v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v26))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v25, v29);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
    if (HIDWORD(v26))
    {
      v17 = v25;
      v18 = 8 * HIDWORD(v26);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
  }
  v14 = v25;
  if (v27 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

_BYTE *WebCore::jsElementPrototypeFunction_after(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  JSC::JSGlobalObject *v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "after");
  v6 = *(unsigned int **)(v5 + 24);
  v25 = (WTF *)v27;
  v26 = 4;
  v27[32] = 0;
  v28 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v29 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v25;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v24);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_44;
  WebCore::Node::after(v6, (unsigned int **)&v24, &v32);
  if (v34)
  {
    v7 = (WTF::StringImpl *)v32;
    v30 = v32;
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v22 = v33;
      v33 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          v8 = 0;
          *(_DWORD *)v22 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v22, v7);
      }
    }
LABEL_44:
    v8 = 0;
    goto LABEL_6;
  }
  v8 = 10;
LABEL_6:
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v13])(&v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v26))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v25, v29);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
    if (HIDWORD(v26))
    {
      v17 = v25;
      v18 = 8 * HIDWORD(v26);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
  }
  v14 = v25;
  if (v27 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

_BYTE *WebCore::jsElementPrototypeFunction_replaceWith(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  JSC::JSGlobalObject *v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "replaceWith");
  v6 = *(unsigned int **)(v5 + 24);
  v25 = (WTF *)v27;
  v26 = 4;
  v27[32] = 0;
  v28 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v29 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v25;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v24);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_44;
  WebCore::Node::replaceWith(v6, (unsigned int **)&v24, &v32);
  if (v34)
  {
    v7 = (WTF::StringImpl *)v32;
    v30 = v32;
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v22 = v33;
      v33 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          v8 = 0;
          *(_DWORD *)v22 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v22, v7);
      }
    }
LABEL_44:
    v8 = 0;
    goto LABEL_6;
  }
  v8 = 10;
LABEL_6:
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(uint64_t *, char *))off_1E3271300[v13])(&v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v26))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v25, v29);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
    if (HIDWORD(v26))
    {
      v17 = v25;
      v18 = 8 * HIDWORD(v26);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
  }
  v14 = v25;
  if (v27 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

_BYTE *WebCore::jsElementPrototypeFunction_remove(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  __int16 v12;
  __int16 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  WTF *v20;
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  JSC::VM *v25;
  unsigned __int8 v26[8];
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "Element", "remove");
  v6 = *(WebCore::Node **)(v4 + 24);
  v25 = v5;
  v20 = (WTF *)v22;
  v21 = 4;
  v22[32] = 0;
  v23 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v24 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v20;
  v7 = *((_QWORD *)v6 + 4);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v7, v6, &v28);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v12 = *(_WORD *)(v7 + 30);
      if ((v12 & 0x400) == 0)
      {
        v13 = *(_WORD *)(v7 + 28);
        if ((v13 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, v6);
        }
        else
        {
          if ((v13 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v12 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v12 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }
  if ((_BYTE)v30)
  {
    v26[0] = v28;
    v14 = v29;
    v29 = 0;
    v27 = v14;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v25, v26);
      v14 = v27;
    }
    v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v6);
      else
        *(_DWORD *)v14 -= 2;
    }
    if ((_BYTE)v30)
    {
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 != 2)
        {
          v8 = 0;
          *(_DWORD *)v15 -= 2;
          goto LABEL_8;
        }
        WTF::StringImpl::destroy(v15, v6);
      }
    }
    v8 = 0;
    goto LABEL_8;
  }
  v8 = 10;
LABEL_8:
  if (HIDWORD(v21))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v20, v24);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v23;
    if (HIDWORD(v21))
    {
      v16 = v20;
      v17 = 8 * HIDWORD(v21);
      do
      {
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18, v6);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v23;
  }
  v9 = v20;
  if (v22 != (_BYTE *)v20 && v20 != 0)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    WTF::fastFree(v9, v6);
  }
  return (_BYTE *)v8;
}

_BYTE *WebCore::jsElementPrototypeFunction_getClientRects(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  WebCore::DOMRectList *v6;
  void *v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v11;
  bmalloc::api **v12;
  uint64_t v13;
  bmalloc::api *v14;
  WTF *v15;
  bmalloc::api **v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;

  v4 = *((_QWORD *)a2 + 5);
  v18 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Element", "getClientRects");
  v5 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::getClientRects(*(WebCore::Element **)(v4 + 24), &v19);
  v8 = WebCore::toJS(this, v5, v19, v6);
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v11 = *((unsigned int *)v9 + 5);
      if ((_DWORD)v11)
      {
        v12 = (bmalloc::api **)*((_QWORD *)v9 + 1);
        v13 = 8 * v11;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 2) == 1)
            {
              v16 = v12;
              v17 = v13;
              if (*(_QWORD *)v14)
              {
                *(_QWORD *)(*(_QWORD *)v14 + 8) = 3;
                *(_QWORD *)v14 = 0;
              }
              bmalloc::api::isoDeallocate(v14, v7);
              v12 = v16;
              v13 = v17;
            }
            else
            {
              --*((_DWORD *)v14 + 2);
            }
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v15 = (WTF *)*((_QWORD *)v9 + 1);
      if (v15)
      {
        *((_QWORD *)v9 + 1) = 0;
        *((_DWORD *)v9 + 4) = 0;
        WTF::fastFree(v15, v7);
      }
      WTF::fastFree(v9, v7);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return (_BYTE *)v8;
}

uint64_t WebCore::jsElementPrototypeFunction_checkVisibility(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  char v11;
  int v12;

  v7 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v7, "Element", "checkVisibility");
  if (*((_DWORD *)a2 + 8) == 1)
    v4 = 10;
  else
    v4 = *((_QWORD *)a2 + 6);
  v5 = *(WebCore::Node **)(v3 + 24);
  WebCore::convertDictionary<WebCore::CheckVisibilityOptions>((JSC::JSCell *)v4, (unint64_t)this, (uint64_t)&v10);
  if (v12)
    return 0;
  v9 = v11;
  v8 = v10;
  if (WebCore::Element::checkVisibility(v5, (unsigned __int8 *)&v8))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsElementPrototypeFunction_scrollIntoView(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  char hasExceptionsAfterHandlingTraps;
  BOOL v22;
  JSC::VM *v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  char v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned __int8 *)(v5 + 5);
    if ((_DWORD)v6 == 241)
    {
      v7 = *(WebCore::Element **)(v5 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        goto LABEL_42;
      }
      v8 = *((_QWORD *)a2 + 6);
      if (v8 == 10)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
LABEL_42:
        v28 = v11 | v9;
        v29 = v6;
        v30 = v10;
        v31 = v24;
        v32 = v25;
        WebCore::Element::scrollIntoView(v7, (uint64_t)&v28);
        return 10;
      }
      if ((v8 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_8;
      if ((v8 & 0xFFFE000000000002) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v12 = v8 == 7;
        }
        else
        {
          v18 = COERCE_DOUBLE(v8 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v8 - 0x2000000000000) < 0.0;
          if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            v19 = v18;
          else
            v19 = v8 == 7;
          if (v8 >= 0xFFFE000000000000)
            v12 = (_DWORD)v8 != 0;
          else
            v12 = v19;
        }
        goto LABEL_39;
      }
      v14 = *(unsigned __int8 *)(v8 + 5);
      if (v14 >= 0x17)
      {
LABEL_8:
        WebCore::convertDictionary<WebCore::ScrollIntoViewOptions>(*((JSC::JSCell **)a2 + 6), (unint64_t)this, (uint64_t)&v28);
        if (HIDWORD(v29))
          return 0;
        LOWORD(v27) = v29;
        HIDWORD(v26) = HIDWORD(v28);
        HIDWORD(v27) = 1;
LABEL_41:
        v6 = v27;
        v9 = v26 & 0xFFFFFFFFFFFFFF00;
        v11 = v26;
        v10 = 1;
        goto LABEL_42;
      }
      if (v14 == 3)
      {
        v17 = *(_DWORD *)(v8 + 8);
      }
      else
      {
        if (v14 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v12 = 1;
LABEL_39:
            if (*((_DWORD *)v4 + 20))
            {
              v22 = v12;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
              v12 = v22;
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                return 0;
            }
            BYTE4(v26) = v12;
            HIDWORD(v27) = 0;
            goto LABEL_41;
          }
          v20 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_36:
          v12 = !v20;
          goto LABEL_39;
        }
        v15 = *(_QWORD *)(v8 + 8);
        if ((v15 & 1) != 0)
          v16 = (int *)(v8 + 16);
        else
          v16 = (int *)(v15 + 4);
        v17 = *v16;
      }
      v20 = v17 == 0;
      goto LABEL_36;
    }
  }
  return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "scrollIntoView");
}

uint64_t WebCore::jsElementPrototypeFunction_scroll(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int v19;
  int hasExceptionsAfterHandlingTraps;
  WebCore *v21;
  double v22;
  JSC::JSGlobalObject *v23;
  WebCore *v24;
  double v25;
  JSC::VM *v26;
  JSC::VM *v27;
  _QWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v3 = (WebCore *)this;
  v36 = *MEMORY[0x1E0C80C00];
  v4 = this[7];
  v28[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)v3, (int)v28, "Element", "scroll");
  v28[1] = v4;
  v6 = *((int *)a2 + 8);
  v7 = v6 - 1;
  if ((unint64_t)(v6 - 1) >= 2)
    v7 = 2;
  if (v7 == 2)
  {
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *((_QWORD *)a2 + 6);
    v31 = v10;
    if (v10 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v10;
    }
    else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v23 = a2;
      v26 = v4;
      v21 = v3;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v31, v3);
      a2 = v23;
      v4 = v26;
      v3 = v21;
      v11 = v22;
    }
    else
    {
      *(_QWORD *)&v11 = v10 - 0x2000000000000;
    }
    if (*((_DWORD *)v4 + 20)
      && (v24 = v3, v18 = a2, v19 = JSC::VM::hasExceptionsAfterHandlingTraps(v4), a2 = v18, v3 = v24, v19))
    {
      return 0;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      v31 = v12;
      v13 = (JSC::VM *)*((_QWORD *)v3 + 7);
      if (v12 >= 0xFFFE000000000000)
      {
        v14 = (double)(int)v12;
      }
      else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v27 = (JSC::VM *)*((_QWORD *)v3 + 7);
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v31, v3);
        v13 = v27;
      }
      else
      {
        *(_QWORD *)&v14 = v12 - 0x2000000000000;
      }
      if (*((_DWORD *)v13 + 20)
        && (v25 = v14,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13),
            v14 = v25,
            hasExceptionsAfterHandlingTraps))
      {
        return 0;
      }
      else
      {
        LOWORD(v31) = 256;
        *(double *)&v32 = v11;
        BYTE8(v32) = 1;
        *(double *)&v33 = v14;
        BYTE8(v33) = 1;
        (*(void (**)(uint64_t, unint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 392))(v9, &v31, 1, 1, 0, 0);
        return 10;
      }
    }
  }
  else if (v7 == 1)
  {
    if ((_DWORD)v6 == 1)
      v16 = 10;
    else
      v16 = *((_QWORD *)a2 + 6);
    v17 = *(_QWORD *)(v5 + 24);
    WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v16, (uint64_t)v3, (uint64_t)&v31);
    if (!v35)
    {
LABEL_27:
      v29[0] = v32;
      v29[1] = v33;
      v30 = v34;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 392))(v17, v29, 1, 1, 0, 0);
      return 10;
    }
    return 0;
  }
  else
  {
    if (v7)
      return JSC::throwTypeError();
    if ((_DWORD)v6 == 1)
      v8 = 10;
    else
      v8 = *((_QWORD *)a2 + 6);
    v17 = *(_QWORD *)(v5 + 24);
    WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v8, (uint64_t)v3, (uint64_t)&v31);
    if (!v35)
      goto LABEL_27;
    return 0;
  }
}

uint64_t WebCore::jsElementPrototypeFunction_scrollTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSElement *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  JSC::VM *v19;
  double v20;
  double v21;
  _QWORD v22[2];
  _OWORD v23[2];
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v22[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v22, "Element", "scrollTo");
  v22[1] = v5;
  v8 = *((int *)a2 + 8);
  v9 = v8 - 1;
  if ((unint64_t)(v8 - 1) >= 2)
    v9 = 2;
  if (v9 == 1)
  {
    if ((_DWORD)v8 == 1)
      v10 = 10;
    else
      v10 = *((_QWORD *)a2 + 6);
    v11 = *(_QWORD *)(v6 + 24);
    WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v10, (uint64_t)this, (uint64_t)&v25);
    if (v29)
    {
      return 0;
    }
    else
    {
      v23[0] = v26;
      v23[1] = v27;
      v24 = v28;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 392))(v11, v23, 1, 1, 0, 0);
      return 10;
    }
  }
  else if (v9 == 2)
  {
    v13 = *(_QWORD *)(v6 + 24);
    v14 = *((_QWORD *)a2 + 6);
    v25 = v14;
    if (v14 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v14;
    }
    else if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v19 = v5;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v25, this);
      v5 = v19;
      v15 = v20;
    }
    else
    {
      *(_QWORD *)&v15 = v14 - 0x2000000000000;
    }
    if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    {
      return 0;
    }
    else
    {
      v16 = *((_QWORD *)a2 + 7);
      v25 = v16;
      v17 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v16 >= 0xFFFE000000000000)
      {
        v18 = (double)(int)v16;
      }
      else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v25, this);
        v18 = v21;
      }
      else
      {
        *(_QWORD *)&v18 = v16 - 0x2000000000000;
      }
      if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
      {
        return 0;
      }
      else
      {
        LOWORD(v25) = 256;
        *(double *)&v26 = v15;
        BYTE8(v26) = 1;
        *(double *)&v27 = v18;
        BYTE8(v27) = 1;
        (*(void (**)(uint64_t, unint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 392))(v13, &v25, 1, 1, 0, 0);
        return 10;
      }
    }
  }
  else if (v9)
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::jsElementPrototypeFunction_scrollTo1Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
}

uint64_t WebCore::jsElementPrototypeFunction_scrollBy(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  double v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  JSC::VM *v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  int v33;
  int hasExceptionsAfterHandlingTraps;
  double v36;
  double v37;
  JSC::JSGlobalObject *v38;
  _QWORD v39[2];
  _QWORD v40[2];
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v3 = (WebCore *)this;
  v51 = *MEMORY[0x1E0C80C00];
  v4 = this[7];
  v39[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v39, "Element", "scrollBy");
  v39[1] = v4;
  v6 = *((int *)a2 + 8);
  v7 = v6 - 1;
  if ((unint64_t)(v6 - 1) >= 2)
    v7 = 2;
  if (v7 == 2)
  {
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *((_QWORD *)a2 + 6);
    v44 = v10;
    if (v10 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v10;
    }
    else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v38 = a2;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v44, (JSC::JSGlobalObject *)this);
      a2 = v38;
      v3 = (WebCore *)this;
      v11 = v36;
    }
    else
    {
      *(_QWORD *)&v11 = v10 - 0x2000000000000;
    }
    if (*((_DWORD *)v4 + 20)
      && (v30 = v4, v31 = v3, v32 = a2, v33 = JSC::VM::hasExceptionsAfterHandlingTraps(v30), a2 = v32, v3 = v31, v33))
    {
      return 0;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      v44 = v12;
      v13 = (JSC::VM *)*((_QWORD *)v3 + 7);
      if (v12 >= 0xFFFE000000000000)
      {
        v14 = (double)(int)v12;
      }
      else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v44, v3);
      }
      else
      {
        *(_QWORD *)&v14 = v12 - 0x2000000000000;
      }
      if (*((_DWORD *)v13 + 20)
        && (v37 = v14,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13),
            v14 = v37,
            hasExceptionsAfterHandlingTraps))
      {
        return 0;
      }
      else
      {
        LOWORD(v44) = 256;
        v46 = 1;
        *(_QWORD *)&v48 = 1;
        if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          v11 = 0.0;
        if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          v15 = 0.0;
        else
          v15 = v14;
        v45 = v11 + (double)(*(int (**)(uint64_t))(*(_QWORD *)v9 + 400))(v9);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 408))(v9);
        *(float *)&v17 = v15;
        *(float *)&v18 = v11;
        v47 = v15 + (double)v16;
        (*(void (**)(uint64_t, unint64_t *, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v9 + 392))(v9, &v44, 1, 0, v18 | ((unint64_t)v17 << 32), 1);
        return 10;
      }
    }
  }
  else if (v7 == 1)
  {
    if ((_DWORD)v6 == 1)
      v20 = 10;
    else
      v20 = *((_QWORD *)a2 + 6);
    v21 = *(_QWORD *)(v5 + 24);
    WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v20, (uint64_t)this, (uint64_t)&v44);
    if (!v50)
    {
      v26 = *(double *)&v46;
      *(double *)v40 = v45;
      v41 = v47;
      v43 = v49;
      if ((v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        v26 = 0.0;
      if (LOBYTE(v47))
        v24 = v26;
      else
        v24 = 0.0;
      LOBYTE(v41) = 1;
      if ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        v22.n128_f64[0] = 0.0;
      else
        v22.n128_f64[0] = v48;
      if ((_BYTE)v49)
        v25 = v22.n128_f64[0];
      else
        v25 = 0.0;
      goto LABEL_53;
    }
    return 0;
  }
  else
  {
    if (v7)
      return JSC::throwTypeError();
    if ((_DWORD)v6 == 1)
      v8 = 10;
    else
      v8 = *((_QWORD *)a2 + 6);
    v21 = *(_QWORD *)(v5 + 24);
    WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v8, (uint64_t)this, (uint64_t)&v44);
    if (!v50)
    {
      v23 = *(double *)&v46;
      *(double *)v40 = v45;
      v41 = v47;
      v43 = v49;
      if ((v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        v23 = 0.0;
      if (LOBYTE(v47))
        v24 = v23;
      else
        v24 = 0.0;
      LOBYTE(v41) = 1;
      if ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        v22.n128_f64[0] = 0.0;
      else
        v22.n128_f64[0] = v48;
      if ((_BYTE)v49)
        v25 = v22.n128_f64[0];
      else
        v25 = 0.0;
LABEL_53:
      LOBYTE(v43) = 1;
      *(double *)&v40[1] = v24 + (double)(*(int (**)(uint64_t, __n128))(*(_QWORD *)v21 + 400))(v21, v22);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 408))(v21);
      *(float *)&v28 = v25;
      *(float *)&v29 = v24;
      v42 = v25 + (double)v27;
      (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v21 + 392))(v21, v40, 1, 0, v29 | ((unint64_t)v28 << 32), 1);
      return 10;
    }
    return 0;
  }
}

uint64_t WebCore::jsElementPrototypeFunction_scrollIntoViewIfNeeded(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  unint64_t v7;
  _BOOL4 v8;
  double v9;
  BOOL v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  WebCore::Element *v16;
  _BOOL4 v17;
  JSC::VM *v18;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "Element", "scrollIntoViewIfNeeded");
  v6 = *(WebCore::Element **)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v8 = 1;
    goto LABEL_12;
  }
  v7 = *((_QWORD *)a2 + 6);
  if (v7 == 10)
  {
    v8 = 1;
LABEL_12:
    WebCore::Element::scrollIntoViewIfNeeded(v6, v8);
    return 10;
  }
  if (v7 >= 0xFFFE000000000000)
  {
    v11 = (_DWORD)v7 == 0;
    goto LABEL_32;
  }
  *(_QWORD *)&v9 = v7 - 0x2000000000000;
  if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v8 = v9 > 0.0 || v9 < 0.0;
    goto LABEL_11;
  }
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    v12 = *(unsigned __int8 *)(v7 + 5);
    if (v12 == 3)
    {
      v15 = *(_DWORD *)(v7 + 8);
    }
    else
    {
      if (v12 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v8 = 1;
          goto LABEL_11;
        }
        v11 = *(_QWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_32:
        v8 = !v11;
        goto LABEL_11;
      }
      v13 = *(_QWORD *)(v7 + 8);
      if ((v13 & 1) != 0)
        v14 = (int *)(v7 + 16);
      else
        v14 = (int *)(v13 + 4);
      v15 = *v14;
    }
    v11 = v15 == 0;
    goto LABEL_32;
  }
  v8 = v7 == 7;
LABEL_11:
  if (!*((_DWORD *)v4 + 20))
    goto LABEL_12;
  v17 = v8;
  v16 = v6;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    v6 = v16;
    v8 = v17;
    goto LABEL_12;
  }
  return 0;
}

uint64_t WebCore::jsElementPrototypeFunction_computedStyleMap(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;

  v4 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "Element", "computedStyleMap");
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v7 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    WebCore::Node::materializeRareData((WebCore::Node *)v5);
    v7 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  }
  v8 = *(_QWORD *)(v7 + 192);
  if (v8)
    return WebCore::wrap<WebCore::StylePropertyMapReadOnly>((uint64_t)this, v6, (WTF *)v8);
  v8 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E339F118;
  *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(v8 + 16) = v5;
  v9 = *(_DWORD **)(v7 + 192);
  *(_QWORD *)(v7 + 192) = v8;
  if (!v9)
    return WebCore::wrap<WebCore::StylePropertyMapReadOnly>((uint64_t)this, v6, (WTF *)v8);
  if (v9[2] != 1)
  {
    --v9[2];
    return WebCore::wrap<WebCore::StylePropertyMapReadOnly>((uint64_t)this, v6, (WTF *)v8);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  v8 = *(_QWORD *)(v7 + 192);
  if (v8)
    return WebCore::wrap<WebCore::StylePropertyMapReadOnly>((uint64_t)this, v6, (WTF *)v8);
  return 2;
}

_BYTE *WebCore::jsElementPrototypeFunction_insertAdjacentHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  JSValue v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF *v32;
  uint64_t v33;
  _BYTE v34[40];
  uint64_t v35;
  JSC::JSGlobalObject *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  char v39;
  _BYTE v40[8];
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Element", "insertAdjacentHTML");
  v7 = *(_QWORD *)(v5 + 24);
  v32 = (WTF *)v34;
  v33 = 4;
  v34[32] = 0;
  v35 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v36 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v32;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v14 = JSC::VM::throwException((JSC::VM *)v4, this, v20);
    goto LABEL_27;
  }
  v8 = *((_QWORD *)a2 + 6);
  v44 = v8;
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
    {
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v9)
        goto LABEL_9;
    }
    else if (!v9)
    {
LABEL_9:
      v37 = v9;
      goto LABEL_10;
    }
    *(_DWORD *)v9 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v44, this);
LABEL_10:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v10 = v37;
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v37 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v25);
        else
          *(_DWORD *)v10 -= 2;
      }
      v14 = 0;
      v15 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v10 = v37;
  }
  v30 = v10;
  v31 = 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLDOMString>>::convert((JSC::VM **)this, *((_QWORD *)a2 + 7), (uint64_t)&v44);
  v11 = v47;
  if (v47)
  {
    v14 = 0;
  }
  else
  {
    v30 = 0;
    v42 = v10;
    v40[0] = 0;
    LODWORD(v41) = -1;
    v12 = v46;
    if (v46 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))off_1E3273B38[v46])(&v37, v40, &v45);
      LODWORD(v41) = v12;
    }
    WebCore::Element::insertAdjacentHTML(v7, (uint64_t *)&v42, (uint64_t)v40, (uint64_t)&v37);
    if ((_DWORD)v41 != -1)
      ((void (*)(char *, _BYTE *))off_1E3273B28[v41])(&v43, v40);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v13);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v39)
    {
      v26 = (WTF::StringImpl *)v37;
      v40[0] = (_BYTE)v37;
      v27 = v38;
      v41 = v38;
      if (!*(_QWORD *)(v4 + 16))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)&v41);
        JSC::VM::throwException((JSC::VM *)v4, this, v28);
        v27 = v41;
      }
      v41 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v14 = 0;
    }
    else
    {
      v14 = 10;
    }
    v11 = v47;
  }
  if (v11 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3273B48[v11])(&v37, &v45);
  v15 = 0;
LABEL_26:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3272138[v15])(&v44, &v30);
LABEL_27:
  if (HIDWORD(v33))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v32, v36);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v35;
    if (HIDWORD(v33))
    {
      v21 = v32;
      v22 = 8 * HIDWORD(v33);
      do
      {
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v23)
        {
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, v16);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
        v21 = (WTF *)((char *)v21 + 8);
        v22 -= 8;
      }
      while (v22);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v35;
  }
  v17 = v32;
  if (v34 != (_BYTE *)v32 && v32 != 0)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v17, v16);
  }
  return (_BYTE *)v14;
}

unint64_t WebCore::jsElementPrototypeFunction_requestFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::DOMGuardedObject *v20;
  uint64_t v21;
  objc_class *v23;
  WebCore::DOMGuardedObject *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  WebCore::DOMGuardedObject *v28;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF1710);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) != 241)
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Element", "requestFullscreen", v16);
LABEL_29:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_23;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v18 = 10;
  else
    v18 = *((_QWORD *)a2 + 6);
  v19 = *(_QWORD *)(v17 + 24);
  WebCore::convertDictionary<WebCore::FullscreenOptions>(this, (JSC::JSCell *)v18, (uint64_t)&v25);
  if (v26)
    goto LABEL_29;
  v27 = v25;
  v28 = v14;
  (*(void (**)(uint64_t, __int16 *, WebCore::DOMGuardedObject **))(*(_QWORD *)v19 + 976))(v19, &v27, &v28);
  v20 = v28;
  v28 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v20 + 16))(v20);
    else
      --*((_DWORD *)v20 + 4);
  }
LABEL_23:
  v21 = *(_QWORD *)(v10 + 16);
  if (v21)
  {
    if (*(_QWORD *)(v10 + 24) != v21)
    {
      v23 = *(objc_class **)(v21 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v28);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v28, v23, 0);
      v24 = v28;
      v28 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v24 + 16))(v24);
        else
          --*((_DWORD *)v24 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsElementPrototypeFunction_webkitRequestFullScreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  __int16 v9;

  v3 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v7, "Element", "webkitRequestFullScreen");
  v4 = *(_QWORD *)(v3 + 24);
  v9 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, __int16 *, _DWORD **))(*(_QWORD *)v4 + 976))(v4, &v9, &v8);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return 10;
}

uint64_t WebCore::jsElementPrototypeFunction_webkitRequestFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  __int16 v9;

  v3 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v7, "Element", "webkitRequestFullscreen");
  v4 = *(_QWORD *)(v3 + 24);
  v9 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, __int16 *, _DWORD **))(*(_QWORD *)v4 + 976))(v4, &v9, &v8);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return 10;
}

uint64_t WebCore::jsElementPrototypeFunction_setPointerCapture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  WTF *v20;
  void *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  WTF::StringImpl *v30;
  int v31[2];
  WTF::StringImpl *v32;
  uint64_t v33;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "Element", "setPointerCapture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v22);
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v31 = v7;
  if (v7 < 0xFFFE000000000000)
  {
    v14 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v31, this);
      v14 = v27;
    }
    v15 = (v14 >> 52) & 0x7FF;
    v16 = v15 - 1023;
    v17 = v14 >> (51 - (v14 >> 52));
    if (v15 > 0x433)
      LODWORD(v17) = v14 << ((v14 >> 52) - 51);
    if (v15 >= 0x41F)
      v18 = v17;
    else
      v18 = (((1 << ((v14 >> 52) + 1)) - 1) & v17) + (1 << ((v14 >> 52) + 1));
    if ((v14 & 0x8000000000000000) == 0)
      v19 = v18;
    else
      v19 = -v18;
    if (v16 <= 0x53)
      v8 = v19;
    else
      v8 = 0;
  }
  else
  {
    v8 = v7;
  }
  if (!*(_DWORD *)(v4 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 528);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0)
    {
      ++*(_DWORD *)v12;
      WebCore::PointerCaptureController::setPointerCapture(*(WebCore::PointerCaptureController::CapturingData **)(v12 + 88), v6, v8, (uint64_t)v31);
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::Page::~Page(v12);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    else
    {
      *(_QWORD *)v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    if (!(_BYTE)v33)
      return 10;
    v23 = (WTF::StringImpl *)LOBYTE(v31[0]);
    v29 = v31[0];
    v24 = v32;
    v32 = 0;
    v30 = v24;
    if (!*(_QWORD *)(v4 + 16))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v31[0]), (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException((JSC::VM *)v4, this, v25);
      v24 = v30;
    }
    v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if ((_BYTE)v33)
    {
      v26 = v32;
      v32 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 != 2)
        {
          result = 0;
          *(_DWORD *)v26 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v26, v23);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsElementPrototypeFunction_releasePointerCapture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  WTF *v20;
  void *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  WTF::StringImpl *v30;
  int v31[2];
  WTF::StringImpl *v32;
  uint64_t v33;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "Element", "releasePointerCapture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v22);
  }
  v6 = *(WebCore::Element **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v31 = v7;
  if (v7 < 0xFFFE000000000000)
  {
    v14 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v31, this);
      v14 = v27;
    }
    v15 = (v14 >> 52) & 0x7FF;
    v16 = v15 - 1023;
    v17 = v14 >> (51 - (v14 >> 52));
    if (v15 > 0x433)
      LODWORD(v17) = v14 << ((v14 >> 52) - 51);
    if (v15 >= 0x41F)
      v18 = v17;
    else
      v18 = (((1 << ((v14 >> 52) + 1)) - 1) & v17) + (1 << ((v14 >> 52) + 1));
    if ((v14 & 0x8000000000000000) == 0)
      v19 = v18;
    else
      v19 = -v18;
    if (v16 <= 0x53)
      v8 = v19;
    else
      v8 = 0;
  }
  else
  {
    v8 = v7;
  }
  if (!*(_DWORD *)(v4 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 528);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0)
    {
      ++*(_DWORD *)v12;
      WebCore::PointerCaptureController::releasePointerCapture(*(WebCore::PointerCaptureController::CapturingData **)(v12 + 88), v6, v8, (uint64_t)v31);
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::Page::~Page(v12);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    else
    {
      *(_QWORD *)v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    if (!(_BYTE)v33)
      return 10;
    v23 = (WTF::StringImpl *)LOBYTE(v31[0]);
    v29 = v31[0];
    v24 = v32;
    v32 = 0;
    v30 = v24;
    if (!*(_QWORD *)(v4 + 16))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v31[0]), (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException((JSC::VM *)v4, this, v25);
      v24 = v30;
    }
    v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if ((_BYTE)v33)
    {
      v26 = v32;
      v32 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 != 2)
        {
          result = 0;
          *(_DWORD *)v26 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v26, v23);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsElementPrototypeFunction_hasPointerCapture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Element *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  JSValue v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "Element", "hasPointerCapture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v6 = *(WebCore::Element **)(v5 + 24);
    v7 = *((_QWORD *)a2 + 6);
    v19 = v7;
    if (v7 < 0xFFFE000000000000)
    {
      v10 = v7 - 0x2000000000000;
      if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
        v10 = v17;
      }
      v11 = (v10 >> 52) & 0x7FF;
      v12 = v11 - 1023;
      v13 = v10 >> (51 - (v10 >> 52));
      if (v11 > 0x433)
        LODWORD(v13) = v10 << ((v10 >> 52) - 51);
      if (v11 >= 0x41F)
        v14 = v13;
      else
        v14 = (((1 << ((v10 >> 52) + 1)) - 1) & v13) + (1 << ((v10 >> 52) + 1));
      if ((v10 & 0x8000000000000000) == 0)
        v15 = v14;
      else
        v15 = -v14;
      if (v12 <= 0x53)
        v8 = (WTF::StringImpl *)v15;
      else
        v8 = 0;
    }
    else
    {
      v8 = (WTF::StringImpl *)v7;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      return 0;
    }
    else if (WebCore::Element::hasPointerCapture(v6, v8))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

_BYTE *WebCore::jsElementPrototypeFunction_setHTMLUnsafe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t v10;
  WTF *v11;
  JSValue v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  WTF *v22;
  uint64_t v23;
  _BYTE v24[40];
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  _BYTE v30[8];
  WTF::StringImpl *v31;
  char v32;
  _BYTE v33[8];
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Element", "setHTMLUnsafe");
  v6 = *(_QWORD *)(v5 + 24);
  v22 = (WTF *)v24;
  v23 = 4;
  v24[32] = 0;
  v25 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v26 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v22;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLDOMString>>::convert((JSC::VM **)this, *((_QWORD *)a2 + 6), (uint64_t)v33);
    v8 = v36;
    if (v36)
    {
      v10 = 0;
LABEL_12:
      if (v8 != -1)
        ((void (*)(int *, uint64_t *))off_1E3273B48[v8])(&v27, &v34);
      goto LABEL_14;
    }
    v30[0] = 0;
    LODWORD(v31) = -1;
    v9 = v35;
    if (v35 != -1)
    {
      ((void (*)(int *, _BYTE *, uint64_t *))off_1E3273B38[v35])(&v27, v30, &v34);
      LODWORD(v31) = v9;
    }
    WebCore::Element::setHTMLUnsafe(v6, (uint64_t)v30, (uint64_t)&v27);
    if ((_DWORD)v31 != -1)
      ((void (*)(char *, _BYTE *))off_1E3273B28[v31])(&v32, v30);
    if (!v29)
    {
      v10 = 10;
LABEL_11:
      v8 = v36;
      goto LABEL_12;
    }
    v7 = (WTF::StringImpl *)v27;
    v30[0] = v27;
    v18 = v28;
    v28 = 0;
    v31 = v18;
    if (!*((_QWORD *)v4 + 2))
    {
      v19.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException(v4, this, v19);
      v18 = v31;
    }
    v31 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v7);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (v29)
    {
      v20 = v28;
      v28 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 != 2)
        {
          v10 = 0;
          *(_DWORD *)v20 -= 2;
          goto LABEL_11;
        }
        WTF::StringImpl::destroy(v20, v7);
      }
    }
    v10 = 0;
    goto LABEL_11;
  }
  v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  v10 = JSC::VM::throwException(v4, this, v14);
LABEL_14:
  if (HIDWORD(v23))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v22, v26);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v25;
    if (HIDWORD(v23))
    {
      v15 = v22;
      v16 = 8 * HIDWORD(v23);
      do
      {
        v17 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v7);
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
        v15 = (WTF *)((char *)v15 + 8);
        v16 -= 8;
      }
      while (v16);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v25;
  }
  v11 = v22;
  if (v24 != (_BYTE *)v22 && v22 != 0)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v11, v7);
  }
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsElementPrototypeFunction_getHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  int v30;
  char v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];

  v21 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Element", "getHTML");
  if (*((_DWORD *)a2 + 8) == 1)
    v5 = 10;
  else
    v5 = *((_QWORD *)a2 + 6);
  v6 = *(_QWORD *)(v4 + 24);
  WebCore::convertDictionary<WebCore::GetHTMLOptions>((JSC::JSCell *)v5, this, (uint64_t)v22);
  v7 = v25;
  if (!v25)
  {
    v26 = 0;
    v27 = 0;
    v28[0] = &off_1E33AD290;
    v28[1] = 0;
    v29[0] = 0;
    v29[1] = 0;
    v30 = 0;
    v31 = 1;
    v32 = 1;
    v34 = 0;
    v33 = 0;
    v35 = 0;
    v36 = v22[0];
    v37 = v23;
    v8 = v24;
    v23 = 0;
    v24 = 0;
    v38 = v8;
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v39, (uint64_t *)&v26);
    v39[16] = 0;
    v39[32] = 0;
    WebCore::MarkupAccumulator::serializeNodesWithNamespaces((WebCore::MarkupAccumulator *)v28, v6, 1, 0);
    v10 = v29[0];
    if (v29[0]
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v29),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v29),
          (v10 = v29[0]) != 0))
    {
      *(_DWORD *)v10 += 2;
    }
    WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v28, v9);
    if (HIDWORD(v27))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v26, (WTF *)((char *)v26 + 24 * HIDWORD(v27)));
    v12 = v26;
    if (v26)
    {
      v26 = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v12, v11);
    }
    v13 = *((_QWORD *)this + 7);
    v14 = (uint64_t *)(v13 + 41968);
    if (!v10)
    {
      v16 = *v14;
LABEL_22:
      v7 = v25;
      goto LABEL_23;
    }
    v15 = *(_DWORD *)(v10 + 4);
    if (v15)
    {
      if (v15 != 1)
      {
LABEL_17:
        v16 = *(_QWORD *)(v13 + 64760);
        if (!v16 || v10 != *(_QWORD *)(v16 + 8))
          v16 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_20;
      }
      v18 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        v19 = *v18;
      }
      else
      {
        v20 = *(unsigned __int16 *)v18;
        if (v20 > 0xFF)
          goto LABEL_17;
        v19 = v20;
      }
      v16 = *(_QWORD *)(v13 + 8 * v19 + 42216);
    }
    else
    {
      v16 = *v14;
    }
LABEL_20:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v10 -= 2;
    goto LABEL_22;
  }
  v16 = 0;
LABEL_23:
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3273B58[v7])(v28, v22);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsElementPrototypeFunction_prepend(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  JSC::JSGlobalObject *v29;
  char v30;
  WTF::StringImpl *v31;
  _BYTE v32[8];
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Element", "prepend");
  v6 = *(_QWORD *)(v5 + 24);
  v25 = (WTF *)v27;
  v26 = 4;
  v27[32] = 0;
  v28 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v29 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v25;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v24);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_44;
  WebCore::ContainerNode::prepend(v6, (unsigned int **)&v24, (uint64_t)v32);
  if (v34)
  {
    v7 = (WTF::StringImpl *)v32[0];
    v30 = v32[0];
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32[0], (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v22 = v33;
      v33 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          v8 = 0;
          *(_DWORD *)v22 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v22, v7);
      }
    }
LABEL_44:
    v8 = 0;
    goto LABEL_6;
  }
  v8 = 10;
LABEL_6:
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(_BYTE *, char *))off_1E3271300[v13])(v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v26))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v25, v29);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
    if (HIDWORD(v26))
    {
      v17 = v25;
      v18 = 8 * HIDWORD(v26);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v28;
  }
  v14 = v25;
  if (v27 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

_BYTE *WebCore::jsElementPrototypeFunction_replaceChildren(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  JSC::VM *v29;
  unsigned __int8 v30[8];
  WTF::StringImpl *v31;
  unsigned __int8 v32[8];
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "Element", "replaceChildren");
  v6 = *(_QWORD *)(v5 + 24);
  v29 = (JSC::VM *)v4;
  v24 = (WTF *)v26;
  v25 = 4;
  v26[32] = 0;
  v27 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v28 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v24;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v23);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
LABEL_23:
    v8 = 0;
    goto LABEL_6;
  }
  WebCore::ContainerNode::replaceChildren(v6, (unsigned int **)&v23, (uint64_t)v32);
  if (v34)
  {
    v30[0] = v32[0];
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v29, v30);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v21 = v33;
      v33 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 != 2)
        {
          v8 = 0;
          *(_DWORD *)v21 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v21, v7);
      }
    }
    goto LABEL_23;
  }
  v8 = 10;
LABEL_6:
  v9 = v23;
  v23 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(unsigned __int8 *, char *))off_1E3271300[v13])(v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v25))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v24, v28);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
    if (HIDWORD(v25))
    {
      v17 = v24;
      v18 = 8 * HIDWORD(v25);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
  }
  v14 = v24;
  if (v26 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3273998[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 8) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32739B8[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E32739D8[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SO_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SO_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SO_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SO_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3273998[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (v7[2] == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3273998[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (v7[2] == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3273998[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (v7[2] == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS14_EEEDcSW_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3273998[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13TrustedScriptENSC_ISH_EENSE_ISH_EEEENS9_INSA_16TrustedScriptURLENSC_ISL_EENSE_ISL_EEEENS8_10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_13TrustedScriptENSD_ISI_EENSF_ISI_EEEENSA_INSB_16TrustedScriptURLENSD_ISM_EENSF_ISM_EEEENS9_10AtomStringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSR_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3273998[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore10ShadowRootENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN7WebCore25ConversionResultExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  JSC::HandleSet *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  JSC::HandleSet *v15;

  *a2 = 0;
  if (*a3)
  {
    v3 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (!v4)
    {
      v15 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = a3;
      v14 = a2;
      result = JSC::HandleSet::grow(v3);
      v3 = v15;
      a3 = v13;
      a2 = v14;
      v4 = (_QWORD *)*((_QWORD *)v15 + 5);
    }
    *((_QWORD *)v3 + 5) = *v4;
    v4[2] = 0;
    v5 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    *a2 = v4 + 2;
    v6 = (_QWORD *)*a3;
    if (*a3)
      v6 = (_QWORD *)*v6;
    v7 = (unint64_t)(v5 - 2);
    if ((v6 != 0) != (*v5 != 0))
    {
      if (v6)
      {
        v8 = *(unint64_t **)((v7 & 0xFFFFFFFFFFFFF000) + 0x10);
        v9 = v8[3];
        v8 += 3;
        *(_QWORD *)v7 = v9;
        *(v5 - 1) = v8;
        *v8 = v7;
        *(_QWORD *)(v9 + 8) = v7;
      }
      else
      {
        v12 = *(_QWORD *)v7;
        v11 = (_QWORD *)*(v5 - 1);
        *v11 = *(_QWORD *)v7;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v5 = (_QWORD *)*a2;
      }
    }
    *v5 = v6;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore24KeyframeAnimationOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(int a1, WebCore::KeyframeAnimationOptions *this)
{
  WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions(this, this);
}

void WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions(WebCore::KeyframeAnimationOptions *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;

  if (*((_BYTE *)this + 88))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, WebCore::KeyframeAnimationOptions *))off_1E32713D0[v7])(&v8, this);
  *((_DWORD *)this + 2) = -1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore24KeyframeAnimationOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore24KeyframeAnimationOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E32713E0[v5])(&v12, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  *(_WORD *)(a2 + 58) = *(_WORD *)(a3 + 58);
  v9 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 72) = v10;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    v11 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a2 + 80) = v11;
    *(_BYTE *)(a2 + 88) = 1;
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  return result;
}

void WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::KeyframeAnimationOptions>>::ConversionResultStorage<WebCore::KeyframeAnimationOptions>(WebCore::Detail::ConversionResultStorage<WebCore::KeyframeAnimationOptions> &&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[8];
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[8];
  _BYTE v31[8];
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 112))
  {
    *(_DWORD *)(a1 + 128) = 1;
  }
  else
  {
    v17[0] = 0;
    v18 = -1;
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E32713E0[v4])(v30, v17, a2 + 8);
      v18 = v4;
    }
    v5 = *(_OWORD *)(a2 + 40);
    v19 = *(_OWORD *)(a2 + 24);
    v20 = v5;
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v21 = v6;
    v7 = *(_WORD *)(a2 + 64);
    v22 = v7;
    v8 = *(_WORD *)(a2 + 66);
    v23 = v8;
    v9 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v24 = v9;
    v25 = v10;
    LOBYTE(v26) = 0;
    v27 = 0;
    v11 = *(unsigned __int8 *)(a2 + 96);
    if (*(_BYTE *)(a2 + 96))
    {
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 88) = 0;
      v26 = v12;
      v11 = 1;
      v27 = 1;
    }
    v28 = *(_QWORD *)(a2 + 104);
    v31[0] = 0;
    v32 = -1;
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_1E32713E0[v4])(&v29, v31, v17);
      v32 = v4;
      v6 = v21;
      v7 = v22;
      v8 = v23;
      v9 = v24;
      v10 = v25;
      v11 = v27;
    }
    v33 = v19;
    v34 = v20;
    v35 = v6;
    v36 = v7;
    v37 = v8;
    v24 = 0;
    v25 = 0;
    v21 = 0;
    v38 = v9;
    v39 = v10;
    LOBYTE(v40) = 0;
    v41 = 0;
    if (v11)
    {
      v13 = v26;
      v26 = 0;
      v40 = v13;
      v11 = 1;
      v41 = 1;
    }
    v42 = v28;
    v43 = 1;
    *(_BYTE *)(a1 + 16) = 0;
    v14 = (WTF::StringImpl *)(a1 + 16);
    *(_DWORD *)(a1 + 120) = -1;
    *(_DWORD *)(a1 + 24) = -1;
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *))off_1E32713E0[v4])(&v29);
      *(_DWORD *)(a1 + 24) = v4;
      v6 = v35;
      v7 = v36;
      v8 = v37;
      v9 = v38;
      v10 = v39;
      v11 = v41;
    }
    v15 = v34;
    *(_OWORD *)(a1 + 32) = v33;
    *(_OWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 64) = v6;
    *(_WORD *)(a1 + 72) = v7;
    *(_WORD *)(a1 + 74) = v8;
    v38 = 0;
    v39 = 0;
    v35 = 0;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v11)
    {
      v16 = v40;
      v40 = 0;
      *(_QWORD *)(a1 + 96) = v16;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_QWORD *)(a1 + 112) = v42;
    *(_DWORD *)(a1 + 120) = 1;
    *(_DWORD *)(a1 + 128) = 0;
    if (v43 != -1)
      ((void (*)(char *, _BYTE *))*(&off_1E3273AD8 + v43))(&v29, v31);
    v43 = -1;
    WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions((WebCore::KeyframeAnimationOptions *)v17, v14);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24KeyframeAnimationOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::KeyframeAnimationOptions *this)
{
  WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJdN7WebCore24KeyframeAnimationOptionsEEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3273AD8 + v3))(&v5, a2 + 8);
  *(_DWORD *)(a2 + 112) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJdN7WebCore24KeyframeAnimationOptionsEEEEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 120))
  {
    v3 = *(unsigned int *)(a2 + 112);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3273AD8 + v3))(&v5, a2 + 8);
    *(_DWORD *)(a2 + 112) = -1;
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLBoolean>::convert(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  double v5;
  char v6;
  int v7;
  uint64_t v8;

  result = *(_QWORD *)(a2 + 56);
  if (a3 >= 0xFFFE000000000000)
  {
    v6 = (_DWORD)a3 != 0;
  }
  else
  {
    *(_QWORD *)&v5 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v6 = v5 > 0.0 || v5 < 0.0;
    }
    else if ((a3 & 0xFFFE000000000002) != 0)
    {
      v6 = a3 == 7;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 56);
      v6 = JSC::JSCell::toBoolean(a3, a2);
      result = v8;
    }
  }
  if (*(_DWORD *)(result + 80)
    && (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) != 0))
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a1 = v6;
  }
  *(_DWORD *)(a1 + 4) = v7;
  return result;
}

uint64_t WebCore::jsElementPrototypeFunction_scrollTo1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSElement *a4)
{
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 8) == 1)
    v5 = 10;
  else
    v5 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::ScrollToOptions>((JSC::JSCell *)v5, (uint64_t)this, (uint64_t)v9);
  if (v13)
    return 0;
  v7[0] = v10;
  v7[1] = v11;
  v8 = v12;
  (*(void (**)(JSC::CallFrame *, _OWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 392))(a3, v7, 1, 1, 0, 0);
  return 10;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14GetHTMLOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(a2 + 8);
    v5 = 8 * v2;
    v7 = a2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      ++v4;
      v5 -= 8;
      a2 = v7;
    }
    while (v5);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

_BYTE *WebCore::jsElementInternalsPrototypeFunction_setFormValue(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::JSElementInternals *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v11 = *((_QWORD *)this + 7);
  v4 = (WebCore::JSElementInternals *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v11, "ElementInternals", "setFormValue");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSElementInternals::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSElementInternals::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v11, "ElementInternals", "setFormValue");
  else
    return (_BYTE *)WebCore::JSElementInternals::setFormValue(v4, this, a2);
}

_BYTE *WebCore::jsElementInternalsPrototypeFunction_setValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const WebCore::Node ***v21;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int hasExceptionsAfterHandlingTraps;
  WebCore *v36;
  JSC::JSGlobalObject *v37;
  JSC::CallFrame *v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  int v41;
  unsigned __int16 v42[2];
  int v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  char v49;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "ElementInternals", "setValidity");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSElementInternals::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSElementInternals::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "ElementInternals", "setValidity");
  v12 = *(_QWORD *)(v5 + 24);
  v44 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::ValidityStateFlags>((JSC::JSCell *)v13, (uint64_t)this, (uint64_t)v42);
  if (v43)
    return 0;
  v15 = *((int *)a2 + 8);
  if ((unint64_t)(v15 - 3) >= 0xFFFFFFFFFFFFFFFELL || (v16 = *((_QWORD *)a2 + 7), v16 == 10))
  {
    v17 = 0;
    v40 = 0;
    v41 = 0;
    goto LABEL_28;
  }
  v47 = *((_QWORD *)a2 + 7);
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, this);
    goto LABEL_25;
  }
  v19 = *(WTF::StringImpl **)(v16 + 8);
  if ((v19 & 1) != 0)
  {
    v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
    if (!v19)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v19)
LABEL_23:
    *(_DWORD *)v19 += 2;
LABEL_24:
  v45 = v19;
LABEL_25:
  if (*((_DWORD *)v18 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
    v17 = v45;
    if (hasExceptionsAfterHandlingTraps)
    {
      v41 = 1;
      v45 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v34);
        else
          *(_DWORD *)v17 -= 2;
      }
      v29 = 0;
      v30 = 1;
      goto LABEL_51;
    }
  }
  else
  {
    v17 = v45;
  }
  v40 = v17;
  v41 = 0;
  v15 = *((int *)a2 + 8);
LABEL_28:
  if ((unint64_t)(v15 - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v21 = 0;
  }
  else
  {
    v20 = *((_QWORD *)a2 + 8);
    if (v20 == 10)
    {
      v21 = 0;
    }
    else
    {
      v47 = *((_QWORD *)this + 7);
      if ((v20 & 0xFFFE000000000002) != 0)
        goto LABEL_68;
      v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v24 = (char **)(16 * v22);
      if ((_DWORD)v22)
        v25 = v24 == &WebCore::JSHTMLElement::s_info;
      else
        v25 = 1;
      if (!v25)
      {
        do
        {
          v24 = (char **)v24[2];
          v23 = v24 != 0;
        }
        while (v24 != &WebCore::JSHTMLElement::s_info && v24 != 0);
      }
      if (!v23 || (v21 = *(const WebCore::Node ****)(v20 + 24)) == 0)
      {
LABEL_68:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v47, 2, "validationAnchor", 17, "ElementInternals", 17, v14, "setValidity", 12, "HTMLElement", 12);
        goto LABEL_69;
      }
    }
  }
  if (!v43)
  {
    v40 = 0;
    v45 = v17;
    WebCore::ElementInternals::setValidity(v12, v42[0], &v45, v21, (uint64_t)&v47);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (!v49)
    {
      v29 = 10;
LABEL_50:
      v30 = 0;
LABEL_51:
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3272138[v30])(&v47, &v40);
      return (_BYTE *)v29;
    }
    LOBYTE(v45) = v47;
    v32 = v48;
    v48 = 0;
    v46 = v32;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v44, (unsigned __int8 *)&v45);
      v32 = v46;
    }
    v46 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v27);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (v49)
    {
      v33 = v48;
      v48 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 != 2)
        {
          v29 = 0;
          *(_DWORD *)v33 -= 2;
          goto LABEL_50;
        }
        WTF::StringImpl::destroy(v33, v27);
      }
    }
LABEL_69:
    v29 = 0;
    goto LABEL_50;
  }
  v36 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementInternalsPrototypeFunction_checkValidity(v36, v37, v38);
}

_BYTE *WebCore::jsElementInternalsPrototypeFunction_checkValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WebCore *v17;
  JSC::JSGlobalObject *v18;
  JSC::CallFrame *v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  JSC::VM *v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "ElementInternals", "checkValidity");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSElementInternals::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSElementInternals::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "ElementInternals", "checkValidity");
  v11 = *(_QWORD *)(v4 + 24);
  v24 = v5;
  WebCore::ElementInternals::checkValidity(v11, (uint64_t)&v21);
  if (!v23)
  {
    v13 = 0;
    if ((_BYTE)v21)
      v14 = 7;
    else
      v14 = 6;
LABEL_16:
    off_1E3273A08[v13](&v25, &v21);
    return (_BYTE *)v14;
  }
  if (v23 == 1)
  {
    LOBYTE(v25) = (_BYTE)v21;
    v16 = v22;
    v22 = 0;
    v26 = v16;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v24, (unsigned __int8 *)&v25);
      v16 = v26;
    }
    v26 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v14 = 0;
    v13 = 1;
    goto LABEL_16;
  }
  v17 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsElementInternalsPrototypeFunction_reportValidity(v17, v18, v19);
}

_BYTE *WebCore::jsElementInternalsPrototypeFunction_reportValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  JSC::VM *v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "ElementInternals", "reportValidity");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSElementInternals::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSElementInternals::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "ElementInternals", "reportValidity");
  v11 = *(_QWORD *)(v4 + 24);
  v22 = v5;
  WebCore::ElementInternals::reportValidity(v11, (uint64_t)&v19);
  if (!v21)
  {
    v13 = 0;
    if ((_BYTE)v19)
      v14 = 7;
    else
      v14 = 6;
LABEL_16:
    off_1E3273A08[v13](&v23, &v19);
    return (_BYTE *)v14;
  }
  if (v21 == 1)
  {
    LOBYTE(v23) = (_BYTE)v19;
    v16 = v20;
    v20 = 0;
    v24 = v16;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v22, (unsigned __int8 *)&v23);
      v16 = v24;
    }
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v14 = 0;
    v13 = 1;
    goto LABEL_16;
  }
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(v17);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsEventPrototypeFunction_composedPath(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::EventTarget *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  WebCore::EventPath *v10;
  uint64_t v11;
  void *v12;
  JSC::VM *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject **v15;
  uint64_t v16;
  objc_class *v17;
  int v18;
  BOOL v19;
  JSValue v20;
  void *v21;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  _QWORD *v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  WTF *v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  WTF *v38;
  _OWORD v39[4];
  uint64_t v40;
  JSC::VM *v41;

  v5 = *((_QWORD *)a2 + 5);
  v31 = *((_QWORD *)this + 7);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 239)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "Event", "composedPath");
  v6 = *(_DWORD *)v5;
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(JSC::JSGlobalObject **)(16 * (v6 & 0xFFFFFFFE) + 0x28);
  v9 = *(_QWORD *)(v7 + 40);
  if (v9 && (v10 = *(WebCore::EventPath **)(v9 + 8)) != 0)
  {
    v11 = *(_QWORD *)(v7 + 32);
    if (v11)
    {
      if ((*(_BYTE *)(v11 + 22) & 2) != 0)
        *(_DWORD *)(v11 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
    }
    WebCore::EventPath::computePathUnclosedToTarget(v10, (const WebCore::EventTarget *)v11, (uint64_t)&v32);
    if ((*(_BYTE *)(v11 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    }
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v13;
  v36 = 0;
  v37 = 0x800000000;
  v38 = (WTF *)((char *)v39 + 8);
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  v14 = HIDWORD(v33);
  if (HIDWORD(v33) >= 9)
  {
    v36 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v37) == 1;
    v14 = HIDWORD(v33);
    if (HIDWORD(v33))
    {
LABEL_14:
      v15 = (WebCore::JSDOMGlobalObject **)v32;
      v16 = 8 * v14;
      do
      {
        v17 = (objc_class *)WebCore::toJS((WebCore::DOMWrapperWorld **)this, v8, *v15, a4);
        if (*((_DWORD *)v13 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
            goto LABEL_57;
        }
        v18 = v37;
        if ((_DWORD)v37 != HIDWORD(v37) && (v38 != (WTF *)((char *)v39 + 8) ? (v19 = v38 == 0) : (v19 = 1), v19))
        {
          *((_QWORD *)v38 + v37) = v17;
          LODWORD(v37) = v18 + 1;
        }
        else
        {
          v20.super.isa = v17;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v37, v20) == 1)
            v36 = 1;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
  else if (HIDWORD(v33))
  {
    goto LABEL_14;
  }
  if (v36)
  {
    JSC::throwOutOfMemoryError();
LABEL_57:
    v23 = 0;
    goto LABEL_35;
  }
  v34 = v38;
  v35 = v37;
  v22 = (JSC::VM *)*((_QWORD *)v8 + 7);
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    goto LABEL_57;
  v23 = JSC::constructArray();
LABEL_35:
  v24 = *(uint64_t **)&v39[0];
  if (*(_QWORD *)&v39[0])
  {
    v34 = (WTF *)&v37;
    v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v39[0], (uint64_t *)&v34);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v24, v30);
  }
  if (v38 != (WTF *)((char *)v39 + 8) && v38)
    WTF::fastFree(v38, v21);
  if (HIDWORD(v33))
  {
    v25 = v32;
    v26 = 8 * HIDWORD(v33);
    do
    {
      v27 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if ((*(_BYTE *)(v27 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v21);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  v28 = v32;
  if (v32)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v28, v21);
  }
  return (_BYTE *)v23;
}

uint64_t WebCore::jsEventPrototypeFunction_stopPropagation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSEvent>::call<&WebCore::jsEventPrototypeFunction_stopPropagationBody,(WebCore::CastedThisErrorBehavior)0>((uint64_t)this, *((_QWORD *)a2 + 5));
}

uint64_t WebCore::jsEventPrototypeFunction_stopImmediatePropagation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSEvent>::call<&WebCore::jsEventPrototypeFunction_stopImmediatePropagationBody,(WebCore::CastedThisErrorBehavior)0>((uint64_t)this, *((_QWORD *)a2 + 5));
}

uint64_t WebCore::jsEventPrototypeFunction_preventDefault(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *((_QWORD *)a2 + 5);
  v6 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) != 239)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v6, "Event", "preventDefault");
  v4 = *(_QWORD *)(v3 + 24);
  if ((*(_DWORD *)(v4 + 20) & 0x404) == 4)
    *(_DWORD *)(v4 + 20) |= 0x40u;
  return 10;
}

_BYTE *WebCore::jsEventPrototypeFunction_initEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  _BOOL4 v17;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  JSValue v29;
  BOOL i;
  BOOL v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;

  v3 = (uint64_t)this;
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 239)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "Event", "initEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, (JSC::JSGlobalObject *)v3, v29);
  }
  v7 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v33);
  v8 = v34;
  if (v34)
  {
    v26 = 0;
    goto LABEL_37;
  }
  v9 = *((int *)a2 + 8);
  if ((unint64_t)(v9 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = *(JSC::VM **)(v3 + 56);
    v10 = 10;
    goto LABEL_16;
  }
  v10 = *((_QWORD *)a2 + 7);
  v11 = *(JSC::VM **)(v3 + 56);
  if (v10 >= 0xFFFE000000000000)
    goto LABEL_51;
  *(_QWORD *)&v12 = v10 - 0x2000000000000;
  if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v12 > 0.0 || v12 < 0.0;
    goto LABEL_17;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_16:
    v17 = v10 == 7;
    goto LABEL_17;
  }
  v13 = *(unsigned __int8 *)(v10 + 5);
  if (v13 == 3)
  {
    v16 = *(_DWORD *)(v10 + 8);
  }
  else
  {
    if (v13 != 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
      {
        v17 = 1;
        goto LABEL_17;
      }
      i = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == v3;
      goto LABEL_68;
    }
    v14 = *(_QWORD *)(v10 + 8);
    if ((v14 & 1) != 0)
      v15 = (int *)(v10 + 16);
    else
      v15 = (int *)(v14 + 4);
    v16 = *v15;
  }
  for (i = v16 == 0; ; i = (_DWORD)v10 == 0)
  {
LABEL_68:
    v17 = !i;
LABEL_17:
    if (*((_DWORD *)v11 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
      {
        v26 = 0;
        goto LABEL_36;
      }
      v9 = *((int *)a2 + 8);
    }
    if ((unint64_t)(v9 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = *(JSC::VM **)(v3 + 56);
      v18 = 10;
LABEL_29:
      v3 = v18 == 7;
      goto LABEL_30;
    }
    v18 = *((_QWORD *)a2 + 8);
    v19 = *(JSC::VM **)(v3 + 56);
    if (v18 >= 0xFFFE000000000000)
    {
      v31 = (_DWORD)v18 == 0;
      goto LABEL_72;
    }
    if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_29;
      v20 = *(unsigned __int8 *)(v18 + 5);
      if (v20 == 3)
      {
        v23 = *(_DWORD *)(v18 + 8);
      }
      else
      {
        if (v20 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v3 = 1;
            goto LABEL_30;
          }
          v31 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == v3;
          goto LABEL_72;
        }
        v21 = *(_QWORD *)(v18 + 8);
        if ((v21 & 1) != 0)
          v22 = (int *)(v18 + 16);
        else
          v22 = (int *)(v21 + 4);
        v23 = *v22;
      }
      v31 = v23 == 0;
LABEL_72:
      v3 = !v31;
      goto LABEL_30;
    }
    v3 = COERCE_DOUBLE(v18 - 0x2000000000000) > 0.0
      || (unint64_t)(COERCE_DOUBLE(v18 - 0x2000000000000) < 0.0);
LABEL_30:
    if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
    {
      v26 = 0;
      goto LABEL_36;
    }
    if (!v34)
      break;
    v11 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_51:
    ;
  }
  v24 = v33;
  v33 = 0;
  v35 = v24;
  WebCore::Event::initEvent(v7, (const WTF::AtomString *)&v35, v17, v3);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  v26 = 10;
LABEL_36:
  v8 = v34;
LABEL_37:
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v8])(&v35, &v33);
  return (_BYTE *)v26;
}

uint64_t WebCore::IDLOperation<WebCore::JSEvent>::call<&WebCore::jsEventPrototypeFunction_stopPropagationBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 239)
    return (uint64_t)WebCore::throwThisTypeError(a1, (int)&v3, "Event", "stopPropagation");
  *(_DWORD *)(*(_QWORD *)(a2 + 24) + 20) |= 0x10u;
  return 10;
}

uint64_t WebCore::IDLOperation<WebCore::JSEvent>::call<&WebCore::jsEventPrototypeFunction_stopImmediatePropagationBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 239)
    return (uint64_t)WebCore::throwThisTypeError(a1, (int)&v3, "Event", "stopImmediatePropagation");
  *(_DWORD *)(*(_QWORD *)(a2 + 24) + 20) |= 0x20u;
  return 10;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11EventSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11EventSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsEventSourcePrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "EventSource", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSEventSource::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSEventSource::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "EventSource", "close");
  WebCore::EventSource::close(*(_QWORD *)(v3 + 24), a2);
  return 10;
}

uint64_t WebCore::jsEventTargetPrototypeFunction_removeEventListener(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSValue v39;
  JSC::VM *v40;
  WebCore *v41;
  JSC::JSGlobalObject *v42;
  JSC::CallFrame *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  unint64_t v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl **v53;
  _QWORD *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl **v56;
  _QWORD *v57;
  _QWORD v58[2];

  v6 = *((_QWORD *)this + 7);
  v44 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    if ((v7 & 0xFFFFFFFFFFFFFFF7) != 2)
      goto LABEL_7;
    goto LABEL_38;
  }
  if ((v7 & 0xFFFFFFFFFFFFFFF7) == 2 || *(unsigned __int8 *)(v7 + 5) - 51 < 6)
LABEL_38:
    v7 = (unint64_t)this;
LABEL_7:
  v9 = (WTF::StringImpl *)WebCore::jsEventTargetCast(v6, v7);
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "EventTarget", "removeEventListener");
  v11 = v9;
  v12 = v10;
  if ((**(unsigned int (***)(WTF::StringImpl *))v9)(v9) == 54)
  {
    v35 = *((_QWORD *)v11 + 9);
    if (!v35)
      return 10;
    v36 = *(_QWORD *)(v35 + 8);
    if (!v36)
      return 10;
    if (*(_BYTE *)(v36 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x194AF4ED0);
    }
    v37 = *(_QWORD *)(v36 + 240);
    if (!v37
      || !*(_QWORD *)(v37 + 8)
      || !WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)this, v11, 2))
    {
      return 10;
    }
  }
  v14 = (_DWORD *)*((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v13);
    return JSC::VM::throwException((JSC::VM *)v14, this, v39);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v47);
  v17 = v48;
  if (v48)
  {
    v29 = 0;
LABEL_34:
    if (v17 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v17])(&v52, &v47);
    return v29;
  }
  v18 = *((_QWORD *)a2 + 7);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v3 = 0;
    v45 = 0;
    v46 = 0;
  }
  else
  {
    v45 = *((_QWORD *)this + 7);
    if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
    {
      v21 = 1;
      WebCore::throwArgumentMustBeObjectError((uint64_t)this, (uint64_t)&v45, 1, "listener", 9, "EventTarget", 12, v16, "removeEventListener", 20);
      v23 = 0;
      LODWORD(v53) = 1;
      v22 = 1;
    }
    else
    {
      v19 = *((_QWORD *)this + 415);
      v3 = WTF::fastMalloc((WTF *)0x48);
      v20 = WebCore::JSEventListener::JSEventListener(v3, v18, v12, 0, 0, v19);
      v21 = 0;
      v22 = 0;
      LODWORD(v53) = 0;
      v52 = 0;
      v23 = 1;
      v45 = v20;
    }
    v46 = v21;
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3274D08[v22])(v58, &v52);
    if (!v23)
    {
      v29 = 0;
      v30 = 1;
      goto LABEL_33;
    }
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v25 = 0x100000000;
    goto LABEL_20;
  }
  v24 = *((_QWORD *)a2 + 8);
  if (v24 == 10)
  {
    v25 = 0x100000000;
    goto LABEL_20;
  }
  if ((v24 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if ((v24 & 0xFFFE000000000002) != 0)
    {
      if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v32 = (JSC::VM *)*((_QWORD *)this + 7);
        v33 = v24 == 7;
        goto LABEL_44;
      }
      goto LABEL_74;
    }
    if (*(unsigned __int8 *)(v24 + 5) < 0x17u)
    {
      if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v40 = (JSC::VM *)*((_QWORD *)this + 7);
        v33 = JSC::JSCell::toBoolean(v24, (uint64_t)this);
        v32 = v40;
LABEL_44:
        if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
          goto LABEL_66;
        v34 = v33;
LABEL_46:
        v25 = v34 | 0x100000000;
        goto LABEL_20;
      }
LABEL_74:
      WebCore::Converter<WebCore::IDLBoolean>::convert((uint64_t)&v52, (uint64_t)this, v24);
      if (HIDWORD(v52))
        goto LABEL_66;
      v34 = v52;
      goto LABEL_46;
    }
  }
  WebCore::convertDictionary<WebCore::EventListenerOptions>((uint64_t)&v52, this, (JSC::JSCell *)v24);
  if (HIDWORD(v52))
    goto LABEL_66;
  v25 = v52;
LABEL_20:
  if (!v48)
  {
    v26 = v47;
    v47 = 0;
    v50 = (_DWORD *)v3;
    v51 = v26;
    v45 = 0;
    v49 = v25;
    if (v3)
    {
      v52 = v11;
      v53 = &v51;
      v54 = &v50;
      v55 = v11;
      v56 = &v51;
      v57 = &v50;
      v58[0] = &v52;
      (*(void (**)(_QWORD *, unint64_t *))((char *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore11EventTarget30removeEventListenerForBindingsERKNS6_10AtomStringEONS6_6RefPtrINS8_13EventListenerENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEONS_7variantIJNS8_20EventListenerOptionsEbEEEE3__0JZNS9_30removeEventListenerForBindingsESC_SK_SO_E3__1EEEEEJRNS0_6__implIJSM_bEEEEEEDcOT_DpOT0____fmatrix
                                                           + ((v25 >> 29) & 8)))(v58, &v49);
      v27 = v50;
      v50 = 0;
      if (v27)
      {
        if (v27[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
        else
          --v27[4];
      }
    }
    v28 = v51;
    v51 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v15);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (!v14[20] || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) == 0)
    {
      if ((v18 & 0xFFFE000000000002) == 0)
      {
        v29 = 10;
        if (!v12 || !v18)
          goto LABEL_32;
        if (v14[190] >= *(unsigned __int8 *)(v12 + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v14 + 48), (const JSCell *)v12);
      }
      v29 = 10;
LABEL_32:
      v30 = 0;
LABEL_33:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3274D58[v30])(&v52, &v45);
      v17 = v48;
      goto LABEL_34;
    }
LABEL_66:
    v29 = 0;
    goto LABEL_32;
  }
  v41 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsEventTargetPrototypeFunction_dispatchEvent(v41, v42, v43);
}

uint64_t WebCore::jsEventTargetPrototypeFunction_dispatchEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  JSC::VM *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v5 = *((_QWORD *)this + 7);
  v26 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF7) != 2)
      goto LABEL_7;
    goto LABEL_18;
  }
  if ((v6 & 0xFFFFFFFFFFFFFFF7) == 2 || *(unsigned __int8 *)(v6 + 5) - 51 < 6)
LABEL_18:
    v6 = (unint64_t)this;
LABEL_7:
  v8 = (WTF::StringImpl *)WebCore::jsEventTargetCast(v5, v6);
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "EventTarget", "dispatchEvent");
  v9 = v8;
  if ((**(unsigned int (***)(WTF::StringImpl *))v8)(v8) != 54)
    goto LABEL_9;
  v18 = *((_QWORD *)v9 + 9);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x194AF519CLL);
      }
      v20 = *(_QWORD *)(v19 + 240);
      if (v20)
      {
        if (*(_QWORD *)(v20 + 8)
          && WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)this, v9, 2))
        {
LABEL_9:
          v12 = (JSC::VM *)*((_QWORD *)this + 7);
          v29 = v12;
          if (*((_DWORD *)a2 + 8) != 1)
          {
            v13 = *((_QWORD *)a2 + 6);
            v27[0] = v12;
            if ((v13 & 0xFFFE000000000002) != 0
              || *(unsigned __int8 *)(v13 + 5) != 239
              || (v14 = *(_QWORD *)(v13 + 24)) == 0)
            {
              WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "event", 6, "EventTarget", 12, v11, "dispatchEvent", 14, "Event", 6);
              return 0;
            }
            if ((*(_DWORD *)(v14 + 20) & 0x3001) != 1)
            {
              LOBYTE(v27[0]) = 8;
              v28 = 1;
              LOBYTE(v30) = 8;
              v27[1] = 0;
              v31 = 0;
              if (!*((_QWORD *)v12 + 2))
              {
                WebCore::propagateExceptionSlowPath(this, &v29, (unsigned __int8 *)&v30);
                v24 = v31;
                v31 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, v23);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              v17 = 0;
              v16 = 1;
              goto LABEL_37;
            }
            if ((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9))
            {
              *(_DWORD *)(v14 + 20) &= ~0x200u;
              (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v9 + 48))(v9, v14);
              v15 = *(_DWORD *)(v14 + 20);
              LOBYTE(v27[0]) = (v15 & 0x40) == 0;
              v28 = 0;
              if ((v15 & 0x40) == 0)
              {
                v16 = 0;
                v17 = 7;
LABEL_37:
                off_1E3273A08[v16](&v30, (WTF::StringImpl **)v27);
                return v17;
              }
            }
            else
            {
              LOBYTE(v27[0]) = 0;
              v28 = 0;
            }
            v16 = 0;
            v17 = 6;
            goto LABEL_37;
          }
          v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v10);
          return JSC::VM::throwException(v12, this, v22);
        }
      }
    }
  }
  return 10;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15JSEventListenerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::AbortSignal *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsEbEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_bEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::AbortSignal *result;
  bmalloc::api *v3;
  void *v4;

  result = (WebCore::AbortSignal *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(result, a2);
      return (WebCore::AbortSignal *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsEbEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bEEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  uint64_t v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_WORD *)(a3 + 1);
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(a3 + 3);
  *(_WORD *)(a2 + 1) = v3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsEbEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WebCore::AbortSignal *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::AbortSignal *result;
  bmalloc::api *v3;
  void *v4;

  result = (WebCore::AbortSignal *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(result, a2);
      return (WebCore::AbortSignal *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN7WebCore23AddEventListenerOptionsEbEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3274D18[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15JSEventListenerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31ExtendableCookieChangeEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *v4;
  unsigned int v5;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 36);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*(WTF::StringImpl **)(a2 + 24), (WTF::StringImpl *)(*(_QWORD *)(a2 + 24) + 56 * v3));
  v4 = *(WTF **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  v5 = *(_DWORD *)(a2 + 20);
  if (v5)
    WTF::VectorDestructor<true,WebCore::CookieListItem>::destruct(*(WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(*(_QWORD *)(a2 + 8) + 56 * v5));
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

_BYTE *WebCore::jsExtendableEventPrototypeFunction_waitUntil(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  JSC::VM *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "ExtendableEvent", "waitUntil");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSExtendableEvent::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSExtendableEvent::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "ExtendableEvent", "waitUntil");
  v11 = *(_QWORD *)(v5 + 24);
  v25 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  WebCore::Converter<WebCore::IDLPromise<WebCore::IDLAny>>::convert<WebCore::DefaultExceptionThrower>(this, *((JSC::JSGlobalObject **)a2 + 6), (JSValue)v28, (uint64_t)&v23);
  v12 = v24;
  if (!v24)
  {
    v13 = v23;
    v23 = 0;
    v26 = (_DWORD *)v13;
    WebCore::ExtendableEvent::waitUntil(v11, (uint64_t *)&v26, (uint64_t)v28);
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      if (v15[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
      else
        --v15[4];
    }
    if (!v30)
    {
      v16 = 10;
LABEL_19:
      v12 = v24;
      goto LABEL_20;
    }
    LOBYTE(v26) = v28[0];
    v20 = v29;
    v29 = 0;
    v27 = v20;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v25, (unsigned __int8 *)&v26);
      v20 = v27;
    }
    v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v30)
    {
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 != 2)
        {
          v16 = 0;
          *(_DWORD *)v21 -= 2;
          goto LABEL_19;
        }
        WTF::StringImpl::destroy(v21, v14);
      }
    }
    v16 = 0;
    goto LABEL_19;
  }
  v16 = 0;
LABEL_20:
  if (v12 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E3274E50[v12])(v28, &v23);
  return (_BYTE *)v16;
}

_QWORD *WebCore::Converter<WebCore::IDLPromise<WebCore::IDLAny>>::convert<WebCore::DefaultExceptionThrower>@<X0>(JSC::JSPromise *this@<X0>, JSC::JSGlobalObject *a2@<X1>, JSValue a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  int v16;
  unint64_t v17;
  WebCore::DOMGuardedObject *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  int v24;
  uint64_t v25;

  v6 = *((_QWORD *)this + 7);
  v7 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSDOMGlobalObject::s_info && v9 != 0);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF56C4);
  }
  v12 = JSC::JSPromise::resolvedPromise(this, a2, a3);
  if (!*(_QWORD *)(v6 + 16))
  {
    v17 = v12;
    v18 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    result = WebCore::DOMGuardedObject::DOMGuardedObject(v18, (unint64_t)this, v17);
    v16 = 0;
    *result = &off_1E3251870;
    *(_QWORD *)a4 = result;
    goto LABEL_16;
  }
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v13)
  {
    v14 = v13;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)(v14 + 344);
      if (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v6 + 16))
        goto LABEL_30;
      if (!v19)
        goto LABEL_14;
      v20 = *(_QWORD *)(v14 + 344);
      v21 = (unsigned __int8 *)(v19 + 40);
      if (__ldaxr((unsigned __int8 *)(v19 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v21))
      {
        goto LABEL_24;
      }
      result = (_QWORD *)MEMORY[0x19AEA534C](v21);
LABEL_24:
      v23 = *(unsigned __int8 *)(v20 + 41);
      v24 = __ldxr(v21);
      if (v24 == 1)
      {
        if (!__stlxr(0, v21))
        {
LABEL_29:
          v19 = v20;
          if (!v23)
            goto LABEL_14;
LABEL_30:
          v25 = *(_QWORD *)(v19 + 8);
          v16 = 1;
          *(_BYTE *)(v25 + 93442) = 1;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
      goto LABEL_29;
    }
  }
LABEL_14:
  result = (_QWORD *)JSC::throwTypeError();
  v16 = 1;
LABEL_16:
  *(_DWORD *)(a4 + 8) = v16;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::ServiceWorker *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WebCore::ServiceWorker **a2)
{
  WebCore::ServiceWorker *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(result, a2);
      return (WebCore::ServiceWorker *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::MessagePort *v7;
  BOOL v8;
  int v9;
  bmalloc::api *v10;
  void *v11;
  uint64_t v12;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v7 = *(WebCore::MessagePort **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v12 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      return;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v6)
    return;
LABEL_14:
  if (v7)
  {
    WebCore::MessagePort::~MessagePort(v7, a2);
    bmalloc::api::isoDeallocate(v10, v11);
  }
  if (!v8)
    WTF::fastFree((WTF *)v3, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3274E60[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::ServiceWorker *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(WebCore::ServiceWorker *result, WebCore::ServiceWorker **a2, WebCore::ServiceWorker **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ServiceWorker *v6;
  WebCore::ServiceWorker *v7;
  bmalloc::api *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WebCore::ServiceWorker *)((uint64_t (*)(char *, uint64_t))off_1E3274E60[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(result, a2);
      return (WebCore::ServiceWorker *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<WebCore::ServiceWorkerClient,WTF::RawPtrTraits<WebCore::ServiceWorkerClient>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorkerClient>>,WTF::RefPtr<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::__assign_alt[abi:sn180100]<2ul,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<WebCore::ServiceWorkerClient,WTF::RawPtrTraits<WebCore::ServiceWorkerClient>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorkerClient>>,WTF::RefPtr<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::__assign_alt[abi:sn180100]<2ul,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::MessagePort *v13;
  BOOL v14;
  int v15;
  bmalloc::api *v16;
  void *v17;
  uint64_t v18;
  char v19;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3274E60[v5])(&v19, result);
LABEL_7:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 48);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_10;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_10:
  v11 = *(_QWORD *)(v8 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v8 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v18 = *(_QWORD *)(v8 + 16);
    v13 = *(WebCore::MessagePort **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v14 = v18 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v8);
  if (v15 != 1)
  {
    __clrex();
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v12)
      return result;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_17;
  if (v12)
    return result;
LABEL_18:
  if (v13)
  {
    WebCore::MessagePort::~MessagePort(v13, a2);
    result = bmalloc::api::isoDeallocate(v16, v17);
  }
  if (!v14)
    return WTF::fastFree((WTF *)v8, a2);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_13ServiceWorkerENSE_ISJ_EENSG_ISJ_EEEENSB_INSC_11MessagePortENSE_ISN_EENSG_ISN_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3274E60[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore11MessagePortENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t *v5;
  uint64_t v6;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)a2;
    v6 = 8 * v3;
    do
    {
      v5 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v5, a2)+ 1;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FaceDetectorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FaceDetectorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsFaceDetectorPrototypeFunction_detect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  JSC::VM *v36;
  JSValue v37;
  char v38[8];
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  char v46;
  int v47;
  _QWORD v48[3];
  _QWORD *v49;
  char v50[8];
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF5FD8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_45;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSFaceDetector::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSFaceDetector::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_45:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FaceDetector", "detect", v17);
    goto LABEL_39;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v36, this, v37);
LABEL_39:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_41;
  }
  v24 = *(_QWORD *)(v18 + 24);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v25)
    goto LABEL_39;
  v26 = v25;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::SVGImageElement>,WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::CSSStyleImageValue>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLInterface<WebCore::ImageData>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)v50);
  v27 = v53;
  if (!v53)
  {
    v38[0] = 0;
    v39 = -1;
    v28 = v52;
    if (v52 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E3275068[v52])(&v41, v38, &v51);
      v39 = v28;
    }
    v41 = 0x200000000;
    v42 = 1;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 1;
    v29 = *(_QWORD *)(v24 + 8);
    ++*(_DWORD *)(v29 + 8);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v30 = &off_1E334D410;
    v30[1] = v29;
    v30[2] = v14;
    v40 = v30;
    v48[0] = v26;
    v48[1] = &v41;
    v48[2] = &v40;
    if (v39 == -1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v49 = v48;
    ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11ImageBitmap23createCompletionHandlerERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSD_INS8_16HTMLVideoElementENSF_ISK_EENSH_ISK_EEEENSD_INS8_17HTMLCanvasElementENSF_ISO_EENSH_ISO_EEEENSD_INS8_15SVGImageElementENSF_ISS_EENSH_ISS_EEEENSD_IS9_NSF_IS9_EENSH_IS9_EEEENSD_INS8_15OffscreenCanvasENSF_ISZ_EENSH_ISZ_EEEENSD_INS8_18CSSStyleImageValueENSF_IS13_EENSH_IS13_EEEENSD_INS8_19WebCodecsVideoFrameENSF_IS17_EENSH_IS17_EEEENSD_INS8_4BlobENSF_IS1B_EENSH_IS1B_EEEENSD_INS8_9ImageDataENSF_IS1F_EENSH_IS1F_EEEEEEEONS8_18ImageBitmapOptionsEONS6_17CompletionHandlerIFvONS8_11ExceptionOrINS6_3RefIS9_SW_SX_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_SR_SV_SY_S12_S16_S1A_S1E_S1I_EEEEEEDcOT_DpOT0____fmatrix[v39])(&v49, v38);
    v31 = v40;
    v40 = 0;
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    if (v39 != -1)
      ((void (*)(uint64_t *, char *))off_1E3275018[v39])(&v41, v38);
    v14 = 0;
    v27 = v53;
  }
  if (v27 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E32750B8[v27])(&v41, &v51);
  if (v14)
    goto LABEL_39;
LABEL_41:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v34 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)&v41);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(v41, v34, 0);
      v35 = (WebCore::DOMGuardedObject *)v41;
      v41 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10FetchEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *result;

  v3 = (_DWORD *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (_DWORD *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_BYTE *WebCore::jsFetchEventPrototypeFunction_respondWith(WebCore *this, JSC::JSGlobalObject *a2, JSValue a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WebCore::DOMGuardedObject *v24;
  WebCore::DOMGuardedObject *v25;
  WTF::StringImpl *v26;
  WebCore::DOMGuardedObject *v27;
  JSValue v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;
  int v40;
  JSC::VM *v41;
  WebCore::DOMGuardedObject *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  char v46;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "FetchEvent", "respondWith");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchEvent::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchEvent::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "FetchEvent", "respondWith");
  v11 = *(_QWORD *)(v5 + 24);
  v41 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v30);
  }
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
  v44 = v4;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSDOMGlobalObject::s_info && v15 != 0);
  }
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF6398);
  }
  v18 = JSC::JSPromise::resolvedPromise(this, v12, a3);
  if (!*((_QWORD *)v4 + 2))
  {
    v23 = v18;
    v24 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    v25 = WebCore::DOMGuardedObject::DOMGuardedObject(v24, (unint64_t)this, v23);
    *(_QWORD *)v25 = &off_1E3251870;
    v40 = 0;
    v39 = 0;
    v42 = v25;
    WebCore::FetchEvent::respondWith(v11, (uint64_t *)&v42, (uint64_t)&v44);
    v27 = v42;
    v42 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v27 + 16))(v27);
      else
        --*((_DWORD *)v27 + 4);
    }
    if (!v46)
    {
      v21 = 10;
LABEL_33:
      v22 = 0;
      goto LABEL_34;
    }
    LOBYTE(v42) = (_BYTE)v44;
    v31 = v45;
    v45 = 0;
    v43 = v31;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v41, (unsigned __int8 *)&v42);
      v31 = v43;
    }
    v43 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v26);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (v46)
    {
      v32 = v45;
      v45 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 != 2)
        {
          v21 = 0;
          *(_DWORD *)v32 -= 2;
          goto LABEL_33;
        }
        WTF::StringImpl::destroy(v32, v26);
      }
    }
    v21 = 0;
    goto LABEL_33;
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v19)
    goto LABEL_26;
  v20 = v19;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 64))(v19))
    goto LABEL_26;
  v33 = *(_QWORD *)(v20 + 344);
  if (*((_QWORD *)v4 + 3) == *((_QWORD *)v4 + 2))
  {
LABEL_62:
    *(_BYTE *)(*(_QWORD *)(v33 + 8) + 93442) = 1;
    goto LABEL_27;
  }
  if (v33)
  {
    v34 = (unsigned __int8 *)(v33 + 40);
    if (__ldaxr((unsigned __int8 *)(v33 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_56;
    }
    MEMORY[0x19AEA534C](v33 + 40);
LABEL_56:
    v36 = *(unsigned __int8 *)(v33 + 41);
    v37 = __ldxr(v34);
    if (v37 == 1)
    {
      if (!__stlxr(0, v34))
      {
LABEL_61:
        if (v36)
          goto LABEL_62;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v33 + 40));
    goto LABEL_61;
  }
LABEL_26:
  JSC::throwTypeError();
LABEL_27:
  v21 = 0;
  v22 = 1;
  v40 = 1;
LABEL_34:
  ((void (*)(JSC::VM **, uint64_t *))off_1E3274E50[v22])(&v44, &v39);
  return (_BYTE *)v21;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchHeadersENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref(a2, (WTF::StringImpl *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchHeadersENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6VectorINSB_INSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEELm0ESD_Lm16ESE_EENSB_INSA_12KeyValuePairISC_SC_EELm0ESD_Lm16ESE_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSL_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32751F0[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_append(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *result;
  JSValue v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Headers", "append");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFetchHeaders::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFetchHeaders::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Headers", "append");
  v12 = *(_QWORD *)(v5 + 24);
  v30 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v28);
  v13 = v29;
  if (!v29)
  {
    WebCore::valueToByteString(this, *((_QWORD *)a2 + 7), (uint64_t)&v26);
    v14 = v27;
    if (v27)
    {
      v20 = 0;
      v21 = 0;
      if (v27 == -1)
        goto LABEL_24;
    }
    else
    {
      v15 = v28;
      v28 = 0;
      v31 = v15;
      v16 = v26;
      v26 = 0;
      v36 = v16;
      ++*(_QWORD *)(v12 + 56);
      WebCore::appendToHeaderMap(&v33, &v31, (uint64_t)&v36, v12 + 8, v12 + 40, *(unsigned __int8 *)(v12 + 4));
      v18 = v36;
      v36 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v31;
      v31 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (v35)
      {
        LOBYTE(v31) = v33;
        v24 = v34;
        v32 = v34;
        if (!*((_QWORD *)v4 + 2))
        {
          WebCore::propagateExceptionSlowPath(this, &v30, (unsigned __int8 *)&v31);
          v24 = v32;
        }
        v32 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v17);
          else
            *(_DWORD *)v24 -= 2;
        }
        v20 = 0;
      }
      else
      {
        v20 = 10;
      }
    }
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3272138[v14])(&v33, &v26);
    v21 = v20;
LABEL_24:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3272138[v13])(&v33, &v28);
    return (_BYTE *)v21;
  }
  v21 = 0;
  result = 0;
  if (v29 != -1)
    goto LABEL_24;
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::FetchHeaders *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _BYTE *result;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Headers", "delete");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchHeaders::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchHeaders::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "Headers", "delete");
  v11 = *(WebCore::FetchHeaders **)(v5 + 24);
  v24 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v18);
  }
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v22);
  v12 = v23;
  if (!v23)
  {
    v13 = v22;
    v22 = 0;
    v25 = v13;
    WebCore::FetchHeaders::remove(v11, (const WTF::String *)&v25, (uint64_t)v27);
    v15 = v25;
    v25 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (!v29)
    {
      v16 = 10;
LABEL_19:
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3272138[v12])(v27, &v22);
      return (_BYTE *)v16;
    }
    LOBYTE(v25) = v27[0];
    v19 = v28;
    v28 = 0;
    v26 = v19;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v24, (unsigned __int8 *)&v25);
      v19 = v26;
    }
    v26 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v29)
    {
      v20 = v28;
      v28 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 != 2)
        {
          v16 = 0;
          *(_DWORD *)v20 -= 2;
          goto LABEL_19;
        }
        WTF::StringImpl::destroy(v20, v14);
      }
    }
    v16 = 0;
    goto LABEL_19;
  }
  v16 = 0;
  result = 0;
  if (v23 != -1)
    goto LABEL_19;
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::FetchHeaders *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _BYTE *result;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  JSValue v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  JSC::JSGlobalObject *v27;
  JSC::CallFrame *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  JSC::VM *v36;
  unsigned __int8 v37[8];
  WTF::StringImpl *v38;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Headers", "get");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchHeaders::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchHeaders::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Headers", "get");
  v11 = *(WebCore::FetchHeaders **)(v5 + 24);
  v36 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v34);
  v12 = v35;
  if (!v35)
  {
    v13 = v34;
    v34 = 0;
    v30 = v13;
    WebCore::FetchHeaders::get(v11, (const WTF::String *)&v30, (uint64_t)&v31);
    if (v33)
    {
      if (v33 != 1)
      {
        v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsFetchHeadersPrototypeFunction_getSetCookie(v26, v27, v28);
      }
      v37[0] = v31;
      v25 = v32;
      v32 = 0;
      v38 = v25;
      if (!*((_QWORD *)v4 + 2))
      {
        WebCore::propagateExceptionSlowPath(this, &v36, v37);
        v25 = v38;
      }
      v38 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v14);
        else
          *(_DWORD *)v25 -= 2;
      }
      v18 = 0;
      goto LABEL_24;
    }
    v15 = v31;
    v31 = 0;
    if (!v15)
    {
      v18 = 2;
LABEL_24:
      if (v33 != -1)
        ((void (*)(unsigned __int8 *, WTF::StringImpl **))off_1E32753E8[v33])(v37, &v31);
      v33 = -1;
      v19 = v30;
      v30 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      goto LABEL_29;
    }
    v16 = *((_QWORD *)this + 7);
    v17 = *((_DWORD *)v15 + 1);
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_18:
        v18 = *(_QWORD *)(v16 + 64760);
        if (!v18 || v15 != *(WTF::StringImpl **)(v18 + 8))
          v18 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_21;
      }
      v21 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      if ((*((_BYTE *)v15 + 16) & 4) != 0)
      {
        v22 = *v21;
      }
      else
      {
        v23 = *(unsigned __int16 *)v21;
        if (v23 > 0xFF)
          goto LABEL_18;
        v22 = v23;
      }
      v18 = *(_QWORD *)(v16 + 8 * v22 + 42216);
    }
    else
    {
      v18 = *(_QWORD *)(v16 + 41968);
    }
LABEL_21:
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
    goto LABEL_24;
  }
  v18 = 0;
  result = 0;
  if (v35 != -1)
  {
LABEL_29:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v12])(&v31, &v34);
    return (_BYTE *)v18;
  }
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_getSetCookie(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  int v18;
  objc_class *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  JSValue v24;
  void *v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v30;
  JSC::VM *v31;
  WTF *v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  WTF *v36;
  _OWORD v37[4];
  uint64_t v38;
  JSC::VM *v39;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "Headers", "getSetCookie");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchHeaders::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchHeaders::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "Headers", "getSetCookie");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v39 = v5;
  v34 = 0;
  v35 = 0x800000000;
  v36 = (WTF *)((char *)v37 + 8);
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  v13 = *(_DWORD *)(v11 + 52);
  if (v13 >= 9)
  {
    v34 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v35) == 1;
    v13 = *(_DWORD *)(v11 + 52);
    if (v13)
      goto LABEL_14;
  }
  else if (v13)
  {
LABEL_14:
    v14 = *(uint64_t **)(v11 + 40);
    for (i = 8 * v13; i; i -= 8)
    {
      v16 = *((_QWORD *)this + 7);
      v17 = *v14;
      if (*v14 && (v18 = *(_DWORD *)(v17 + 4)) != 0)
      {
        if (v18 != 1)
          goto LABEL_18;
        v21 = *(unsigned __int8 **)(v17 + 8);
        if ((*(_BYTE *)(v17 + 16) & 4) != 0)
        {
          v22 = *v21;
        }
        else
        {
          v23 = *(unsigned __int16 *)v21;
          if (v23 > 0xFF)
          {
LABEL_18:
            v19 = *(objc_class **)(v16 + 64760);
            if (!v19 || v17 != *((_QWORD *)v19 + 1))
              v19 = (objc_class *)JSC::jsStringWithCacheSlowCase();
            goto LABEL_21;
          }
          v22 = v23;
        }
        v19 = *(objc_class **)(v16 + 8 * v22 + 42216);
      }
      else
      {
        v19 = *(objc_class **)(v16 + 41968);
      }
LABEL_21:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_51;
      v20 = v35;
      if ((_DWORD)v35 == HIDWORD(v35) || v36 != (WTF *)((char *)v37 + 8) && v36)
      {
        v24.super.isa = v19;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v35, v24) == 1)
          v34 = 1;
      }
      else
      {
        *((_QWORD *)v36 + v35) = v19;
        LODWORD(v35) = v20 + 1;
      }
      ++v14;
    }
  }
  if (v34)
  {
    JSC::throwOutOfMemoryError();
LABEL_51:
    v27 = 0;
    goto LABEL_42;
  }
  v32 = v36;
  v33 = v35;
  v26 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    goto LABEL_51;
  v27 = JSC::constructArray();
LABEL_42:
  v28 = *(uint64_t **)&v37[0];
  if (*(_QWORD *)&v37[0])
  {
    v32 = (WTF *)&v35;
    v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v37[0], (uint64_t *)&v32);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v28, v30);
  }
  if (v36 != (WTF *)((char *)v37 + 8) && v36)
    WTF::fastFree(v36, v25);
  return (_BYTE *)v27;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::FetchHeaders *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _BYTE *result;
  JSValue v20;
  WTF::StringImpl *v21;
  WebCore *v22;
  JSC::JSGlobalObject *v23;
  JSC::CallFrame *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  JSC::VM *v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Headers", "has");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchHeaders::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchHeaders::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Headers", "has");
  v11 = *(WebCore::FetchHeaders **)(v5 + 24);
  v32 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v30);
  v12 = v31;
  if (!v31)
  {
    v13 = v30;
    v30 = 0;
    v26 = v13;
    WebCore::FetchHeaders::has(v11, (const WTF::String *)&v26, (uint64_t)&v27);
    v15 = v29;
    if (v29)
    {
      if (v29 != 1)
      {
        v22 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsFetchHeadersPrototypeFunction_set(v22, v23, v24);
      }
      LOBYTE(v33) = (_BYTE)v27;
      v21 = v28;
      v28 = 0;
      v34 = v21;
      if (!*((_QWORD *)v4 + 2))
      {
        WebCore::propagateExceptionSlowPath(this, &v32, (unsigned __int8 *)&v33);
        v21 = v34;
      }
      v34 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v14);
        else
          *(_DWORD *)v21 -= 2;
      }
      v16 = 0;
      v17 = 0;
      v15 = v29;
      if (v29 == -1)
        goto LABEL_19;
    }
    else if ((_BYTE)v27)
    {
      v16 = 7;
    }
    else
    {
      v16 = 6;
    }
    off_1E3273A08[v15](&v33, &v27);
    v17 = v16;
LABEL_19:
    v29 = -1;
    v18 = v26;
    v26 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_22;
  }
  v17 = 0;
  result = 0;
  if (v31 != -1)
  {
LABEL_22:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v12])(&v27, &v30);
    return (_BYTE *)v17;
  }
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_set(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::FetchHeaders *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *result;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34[8];
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Headers", "set");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFetchHeaders::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFetchHeaders::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Headers", "set");
  v12 = *(WebCore::FetchHeaders **)(v5 + 24);
  v31 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v29);
  v13 = v30;
  if (!v30)
  {
    WebCore::valueToByteString(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
    v14 = v28;
    if (v28)
    {
      v20 = 0;
      v21 = 0;
      if (v28 == -1)
        goto LABEL_24;
      goto LABEL_23;
    }
    v15 = v29;
    v29 = 0;
    v32 = v15;
    v16 = v27;
    v27 = 0;
    v37 = v16;
    WebCore::FetchHeaders::set(v12, (const WTF::String *)&v32, (uint64_t)v34);
    v18 = v37;
    v37 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v32;
    v32 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (!v36)
    {
      v20 = 10;
LABEL_23:
      ((void (*)(char *, WTF::StringImpl **))off_1E3272138[v14])(v34, &v27);
      v21 = v20;
LABEL_24:
      ((void (*)(char *, WTF::StringImpl **))off_1E3272138[v13])(v34, &v29);
      return (_BYTE *)v21;
    }
    LOBYTE(v32) = v34[0];
    v24 = v35;
    v35 = 0;
    v33 = v24;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v31, (unsigned __int8 *)&v32);
      v24 = v33;
    }
    v33 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v36)
    {
      v25 = v35;
      v35 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 != 2)
        {
          v20 = 0;
          *(_DWORD *)v25 -= 2;
          goto LABEL_23;
        }
        WTF::StringImpl::destroy(v25, v17);
      }
    }
    v20 = 0;
    goto LABEL_23;
  }
  v21 = 0;
  result = 0;
  if (v30 != -1)
    goto LABEL_24;
  return result;
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFetchHeaders::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFetchHeaders::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FetchHeadersIterator>(v3, 2);
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "keys");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFetchHeaders::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFetchHeaders::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "keys");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FetchHeadersIterator>(v3, 0);
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFetchHeaders::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFetchHeaders::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "Headers", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FetchHeadersIterator>(v3, 1);
}

_BYTE *WebCore::jsFetchHeadersPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  WTF *v19;
  JSValue v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl **v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  JSValue v36;
  JSValue v37;
  _QWORD *v38;
  WTF::StringImpl **v40;
  uint64_t v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  char v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57[9];
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl **v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65[3];
  uint64_t v66;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)this + 7);
  v51 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "Headers", "forEach");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFetchHeaders::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFetchHeaders::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "Headers", "forEach");
  v66 = v4;
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0))
  {
    LOBYTE(v65[0]) = 0;
    return (_BYTE *)JSC::throwTypeError();
  }
  if (*(_BYTE *)(v11 + 5) == 26)
    JSC::JSFunction::getCallData(*((JSC::JSFunction **)a2 + 6), (JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v65, *((_QWORD *)a2 + 6));
  if (!LOBYTE(v65[0]))
    return (_BYTE *)JSC::throwTypeError();
  v12 = *(WTF::StringImpl ***)(v5 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v3);
  ++*(_DWORD *)v12;
  v62 = 0u;
  v63 = 0u;
  v61 = v12;
  v64 = 0;
  do
  {
    while (1)
    {
      WebCore::FetchHeaders::Iterator::next(&v61, v13, (uint64_t)&v58);
      if (!v60)
        goto LABEL_87;
      v54 = 0;
      v55 = 0x800000000;
      v56 = (WTF *)&v57[1];
      memset(v57, 0, sizeof(v57));
      v14 = *(_QWORD **)(v3 + 56);
      v15 = v14 + 5246;
      v13 = v59;
      if (!v59)
        goto LABEL_31;
      v16 = *((_DWORD *)v59 + 1);
      if (!v16)
        goto LABEL_31;
      if (v16 == 1)
      {
        v21 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
        if ((*((_BYTE *)v59 + 16) & 4) != 0)
        {
          v22 = *v21;
LABEL_30:
          v15 = &v14[v22 + 5277];
LABEL_31:
          v17 = (_QWORD *)*v15;
LABEL_32:
          v18 = 0;
          v19 = (WTF *)&v57[1];
LABEL_33:
          *((_QWORD *)v19 + v18) = v17;
          LODWORD(v55) = v18 + 1;
          goto LABEL_34;
        }
        v34 = *(unsigned __int16 *)v21;
        if (v34 <= 0xFF)
        {
          v22 = v34;
          goto LABEL_30;
        }
      }
      v17 = (_QWORD *)v14[8095];
      if (v17 && v59 == (WTF::StringImpl *)v17[1])
        goto LABEL_32;
      v14 = (_QWORD *)JSC::jsStringWithCacheSlowCase();
      v17 = v14;
      v18 = v55;
      if ((_DWORD)v55 != HIDWORD(v55))
      {
        v19 = v56;
        if (v56 == (WTF *)&v57[1])
          goto LABEL_33;
      }
      v20.super.isa = (Class)v14;
      v14 = (_QWORD *)JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v20);
      if ((_DWORD)v14 == 1)
        v54 = 1;
LABEL_34:
      if (!v60)
      {
        __break(1u);
        goto LABEL_101;
      }
      v23 = *(_QWORD *)(v3 + 56);
      if (v58 && (v24 = *((_DWORD *)v58 + 1)) != 0)
      {
        if (v24 == 1)
        {
          v32 = (unsigned __int8 *)*((_QWORD *)v58 + 1);
          if ((*((_BYTE *)v58 + 16) & 4) != 0)
          {
            v33 = *v32;
LABEL_69:
            v25 = *(WTF::StringImpl ***)(v23 + 8 * v33 + 42216);
            goto LABEL_41;
          }
          v35 = *(unsigned __int16 *)v32;
          if (v35 <= 0xFF)
          {
            v33 = v35;
            goto LABEL_69;
          }
        }
        v25 = *(WTF::StringImpl ***)(v23 + 64760);
        if (!v25 || v58 != v25[1])
          v25 = (WTF::StringImpl **)JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v25 = *(WTF::StringImpl ***)(v23 + 41968);
      }
LABEL_41:
      v26 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)&v57[1] && v56)
      {
        v36.super.isa = (Class)v25;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v36) == 1)
          v54 = 1;
      }
      else
      {
        *((_QWORD *)v56 + v55) = v25;
        LODWORD(v55) = v26 + 1;
      }
      v27 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)&v57[1] && v56)
      {
        v37.super.isa = (Class)v5;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v37) == 1)
        {
          v54 = 1;
LABEL_82:
          JSC::throwOutOfMemoryError();
          v28 = 1;
          goto LABEL_51;
        }
      }
      else
      {
        *((_QWORD *)v56 + v55) = v5;
        LODWORD(v55) = v27 + 1;
      }
      if (v54)
        goto LABEL_82;
      v52 = v56;
      v53 = v55;
      JSC::call();
      v28 = *(_QWORD *)(v66 + 16) ? 3 : 0;
LABEL_51:
      v29 = v57[0];
      if (v57[0])
      {
        v52 = (WTF *)&v55;
        v38 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v57[0], (uint64_t *)&v52);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v29, v38);
      }
      if (v56 != (WTF *)&v57[1] && v56)
        WTF::fastFree(v56, v13);
      if (!v60)
        goto LABEL_61;
      v30 = v59;
      v59 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v13);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v58;
      v58 = 0;
      if (!v31)
        goto LABEL_61;
      if (*(_DWORD *)v31 == 2)
        break;
      *(_DWORD *)v31 -= 2;
LABEL_61:
      if (v28)
        goto LABEL_86;
    }
    WTF::StringImpl::destroy(v31, v13);
  }
  while (!v28);
LABEL_86:
  if (v28 == 3)
LABEL_87:
    v3 = 10;
  else
    v3 = 0;
  if (HIDWORD(v63))
  {
    v45 = (WTF::StringImpl **)v63;
    v46 = 8 * HIDWORD(v63);
    do
    {
      v47 = *v45;
      *v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v13);
        else
          *(_DWORD *)v47 -= 2;
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  v14 = (_QWORD *)v63;
  if ((_QWORD)v63)
  {
LABEL_101:
    *(_QWORD *)&v63 = 0;
    DWORD2(v63) = 0;
    WTF::fastFree((WTF *)v14, v13);
  }
  v40 = v61;
  v61 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      v42 = *((unsigned int *)v40 + 13);
      if ((_DWORD)v42)
      {
        v48 = (WTF::StringImpl **)v40[5];
        v49 = 8 * v42;
        do
        {
          v50 = *v48;
          *v48 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v13);
            else
              *(_DWORD *)v50 -= 2;
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      v43 = v40[5];
      if (v43)
      {
        v40[5] = 0;
        *((_DWORD *)v40 + 12) = 0;
        WTF::fastFree(v43, v13);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v40 + 1), v13);
      WTF::fastFree((WTF *)v40, v44);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  return (_BYTE *)v3;
}

unint64_t WebCore::iteratorCreate<WebCore::FetchHeadersIterator>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::Structure *v28;
  int v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54[6];
  int v55;
  int v56;
  int v57;
  JSC::Structure *v58;

  v4 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (unint64_t *)(v5 + 40136);
  v7 = *(_QWORD *)(v4 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::FetchHeadersIterator::s_info
        + ~((_QWORD)&WebCore::FetchHeadersIterator::s_info << 32)) ^ (((unint64_t)&WebCore::FetchHeadersIterator::s_info
                                                                     + ~((_QWORD)&WebCore::FetchHeadersIterator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::FetchHeadersIterator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_32;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::FetchHeadersIterator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(JSC::JSCell **)(v4 + 696);
  LODWORD(v54[0]) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v18 = (uint64_t *)(v5 + 38904);
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v51 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v51);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v51;
LABEL_11:
    *v6 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, v4, v16, v54, &WebCore::JSDOMIteratorPrototype<WebCore::JSFetchHeaders,WebCore::FetchHeadersIteratorTraits>::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v5 + 38904) < *(_QWORD *)(v5 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v5 + 38920);
  if ((v20 & 1) == 0)
  {
    v52 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v20 + HIDWORD(v52);
    *(_QWORD *)(v5 + 38920) = v20 + (int)v52;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 2000);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v54[0] = v22;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  else
  {
    v54[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = JSC::JSString::create(v5, v54);
  v27 = v54[0];
  v54[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v57 = *(_DWORD *)v20;
  v58 = v28;
  v29 = JSC::Structure::outOfLineCapacity(v28);
  v55 = 0;
  v56 = v29;
  v54[0] = (WTF::StringImpl *)&v56;
  v54[1] = (WTF::StringImpl *)v20;
  v54[2] = (WTF::StringImpl *)v5;
  v54[3] = (WTF::StringImpl *)&v57;
  v54[4] = (WTF::StringImpl *)&v58;
  v54[5] = (WTF::StringImpl *)&v55;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v28, (JSC::VM *)v5, v24, 6, (uint64_t)v54);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v5, v55, v26);
  *((_DWORD *)v28 + 4) |= 0x10u;
  LODWORD(v54[0]) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v30)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v5);
  }
  v31 = *v6;
  if (*v6 >= *(_QWORD *)(v5 + 40144))
  {
    v31 = *(_QWORD *)(v5 + 40152);
    if ((v31 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v31 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v53 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v31 + HIDWORD(v53);
    *(_QWORD *)(v5 + 40152) = v31 + (int)v53;
  }
  *v6 = v31 + 128;
LABEL_29:
  *(_DWORD *)v31 = 0;
  MEMORY[0x19AEA4278](v31, v5, v4, v20, v54, &WebCore::FetchHeadersIterator::s_info, 0, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::cacheDOMStructure((JSCell *)v4, v31, (uint64_t)&WebCore::FetchHeadersIterator::s_info);
LABEL_32:
  v32 = *(_QWORD *)(v5 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 728);
  if (v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_37:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 728))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v54, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v38, v54, v5 + 192, v5 + 1872, 88, 8, &v58);
    v40 = v58;
    v58 = 0;
    if (v40)
      (*(void (**)(JSC::Structure *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v54[0];
    v54[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 728);
    *(_QWORD *)(v37 + 728) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v33 + 728);
  *(_QWORD *)(v33 + 728) = v34;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v35);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_52:
  v47 = v34[3];
  if (v47 < v34[4])
  {
LABEL_53:
    v34[3] = v47 + 96;
    goto LABEL_54;
  }
  v47 = v34[5];
  if ((v47 & 1) == 0)
  {
    v50 = *(_QWORD *)(v47 + 8) ^ v34[6];
    v34[4] = v47 + HIDWORD(v50);
    v34[5] = v47 + (int)v50;
    goto LABEL_53;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_54:
  *(_DWORD *)v47 = 0;
  WebCore::JSDOMObject::JSDOMObject(v47, v15);
  v48 = *(_DWORD **)(a1 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                    * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                    + 0x28));
  ++*v48;
  *(_QWORD *)(v47 + 24) = v48;
  *(_OWORD *)(v47 + 32) = 0u;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_QWORD *)(v47 + 64) = 0;
  *(_BYTE *)(v47 + 72) = 1;
  *(_DWORD *)(v47 + 80) = a2;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return v47;
}

uint64_t WebCore::JSDOMIteratorPrototype<WebCore::JSFetchHeaders,WebCore::FetchHeadersIteratorTraits>::next(JSC *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t IteratorResultObject;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  uint64_t v14;
  JSC::JSGlobalObject **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  JSC::VM *v26;
  void *v27;
  JSC::JSGlobalObject *v28;
  uint64_t *v29;
  int v30;
  JSValue v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned __int8 v51;
  uint64_t *v52;
  int v53;
  char v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMIteratorBase<WebCore::JSFetchHeaders,WebCore::FetchHeadersIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMIteratorBase<WebCore::JSFetchHeaders,WebCore::FetchHeadersIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  if (!*(_BYTE *)(v3 + 72))
    goto LABEL_60;
  IteratorResultObject = v3 + 24;
  WebCore::FetchHeaders::Iterator::next((WTF::StringImpl ***)(v3 + 24), a2, (uint64_t)&v49);
  v12 = v51;
  if (v51)
  {
    v13 = *(_DWORD *)(v3 + 80);
    if (v13 != 2)
    {
      if (v13 == 1)
      {
        v14 = *((_QWORD *)this + 7);
        v15 = (JSC::JSGlobalObject **)(v14 + 41968);
        v16 = v50;
        if (!v50)
          goto LABEL_66;
      }
      else
      {
        if (v13)
        {
          v28 = 0;
LABEL_51:
          v31.super.isa = 0;
          IteratorResultObject = JSC::createIteratorResultObject(this, v28, v31);
          goto LABEL_52;
        }
        v14 = *((_QWORD *)this + 7);
        v15 = (JSC::JSGlobalObject **)(v14 + 41968);
        v16 = v49;
        if (!v49)
        {
LABEL_66:
          v28 = *v15;
          goto LABEL_51;
        }
      }
      v30 = *((_DWORD *)v16 + 1);
      if (!v30)
        goto LABEL_66;
      if (v30 != 1)
      {
LABEL_47:
        v28 = v15[2849];
        if (!v28 || v16 != *((WTF::StringImpl **)v28 + 1))
          v28 = (JSC::JSGlobalObject *)JSC::jsStringWithCacheSlowCase();
        goto LABEL_51;
      }
      v36 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
      if ((*((_BYTE *)v16 + 16) & 4) != 0)
      {
        v37 = *v36;
      }
      else
      {
        v42 = *(unsigned __int16 *)v36;
        if (v42 > 0xFF)
          goto LABEL_47;
        v37 = v42;
      }
      v28 = *(JSC::JSGlobalObject **)(v14 + 8 * v37 + 42216);
      goto LABEL_51;
    }
    v20 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
    v21 = *((_QWORD *)this + 7);
    if (!v49 || (v22 = *((_DWORD *)v49 + 1)) == 0)
    {
      v23 = *(_QWORD *)(v21 + 41968);
      goto LABEL_31;
    }
    if (v22 != 1)
    {
LABEL_28:
      v23 = *(_QWORD *)(v21 + 64760);
      if (!v23 || v49 != *(WTF::StringImpl **)(v23 + 8))
      {
        v23 = JSC::jsStringWithCacheSlowCase();
        v21 = *((_QWORD *)this + 7);
      }
LABEL_31:
      if (v50 && (v24 = *((_DWORD *)v50 + 1)) != 0)
      {
        if (v24 != 1)
        {
LABEL_34:
          v25 = *(_QWORD *)(v21 + 64760);
          if (!v25 || v50 != *(WTF::StringImpl **)(v25 + 8))
            v25 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_37;
        }
        v40 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
        if ((*((_BYTE *)v50 + 16) & 4) != 0)
        {
          v41 = *v40;
        }
        else
        {
          v44 = *(unsigned __int16 *)v40;
          if (v44 > 0xFF)
            goto LABEL_34;
          v41 = v44;
        }
        v25 = *(_QWORD *)(v21 + 8 * v41 + 42216);
      }
      else
      {
        v25 = *(_QWORD *)(v21 + 41968);
      }
LABEL_37:
      v54 = 0;
      v56 = (WTF *)&v58;
      v57 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v58 = v23;
      v59 = (unint64_t)v25;
      v55 = 0x800000002;
      v26 = *(JSC::VM **)(v20 + 56);
      v52 = &v58;
      v53 = 2;
      if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
        v28 = 0;
      else
        v28 = (JSC::JSGlobalObject *)JSC::constructArray();
      v29 = v57;
      if (v57)
      {
        v52 = &v55;
        v48 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v57, (uint64_t *)&v52);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v29, v48);
      }
      if (v56 != (WTF *)&v58 && v56)
        WTF::fastFree(v56, v27);
      goto LABEL_51;
    }
    v38 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
    if ((*((_BYTE *)v49 + 16) & 4) != 0)
    {
      v39 = *v38;
    }
    else
    {
      v43 = *(unsigned __int16 *)v38;
      if (v43 > 0xFF)
        goto LABEL_28;
      v39 = v43;
    }
    v23 = *(_QWORD *)(v21 + 8 * v39 + 42216);
    goto LABEL_31;
  }
  if (!*(_BYTE *)(v3 + 72))
    goto LABEL_60;
  v17 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v17)
  {
    v45 = *(WTF::StringImpl ***)(v3 + 48);
    v46 = 8 * v17;
    do
    {
      v47 = *v45;
      *v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v11);
        else
          *(_DWORD *)v47 -= 2;
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  v18 = *(WTF **)(v3 + 48);
  if (v18)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    WTF::fastFree(v18, v11);
  }
  WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref((uint64_t *)(v3 + 24), v11);
  *(_BYTE *)(v3 + 72) = 0;
LABEL_52:
  if (v51)
  {
    v32 = v50;
    v50 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v19);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v49;
    v49 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::destroy(v33, v19);
        if (v12)
          return IteratorResultObject;
        goto LABEL_60;
      }
      *(_DWORD *)v33 -= 2;
    }
  }
  if (!v12)
  {
LABEL_60:
    v34.super.isa = (Class)1;
    return JSC::createIteratorResultObject(this, (JSC::JSGlobalObject *)0xA, v34);
  }
  return IteratorResultObject;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3275450[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12FetchRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsFetchRequestPrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  JSC::VM *v5;
  unint64_t v6;
  int v7;
  WebCore::FetchRequest *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t (***v11)(WebCore::ContextDestructionObserver *__hidden);
  unint64_t v12;
  WTF::StringImpl *v14;
  WebCore *v15;
  JSC::JSGlobalObject *v16;
  JSC::CallFrame *v17;
  JSC::VM *v18;
  uint64_t (***v19)(WebCore::ContextDestructionObserver *__hidden);
  WTF::StringImpl *v20;
  int v21;
  JSC::VM *v22;
  uint64_t (***v23)(WebCore::ContextDestructionObserver *__hidden);
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(v4);
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Request", "clone");
  v7 = *(_DWORD *)v6;
  v8 = *(WebCore::FetchRequest **)(v6 + 24);
  v22 = v5;
  v9 = *(_QWORD *)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::FetchRequest::clone(v8, (uint64_t)&v19);
  if (!v21)
  {
    v11 = v19;
    v19 = 0;
    v23 = v11;
    if (*v11 != &off_1E3355D08)
    {
      __break(0xC471u);
      JUMPOUT(0x194AF89B8);
    }
    v12 = WebCore::createWrapper<WebCore::FetchRequest,WebCore::FetchRequest>(v9, (JSC::VM *)&v23);
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 1)
        ((void (*)(void))(*v23)[2])();
      else
        --*((_DWORD *)v23 + 6);
    }
LABEL_7:
    if (v21 != -1)
      ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E3275488[v21])(&v23, &v19);
    return (_BYTE *)v12;
  }
  if (v21 == 1)
  {
    LOBYTE(v23) = (_BYTE)v19;
    v14 = v20;
    v20 = 0;
    v24 = v14;
    if (!*((_QWORD *)v5 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v22, (unsigned __int8 *)&v23);
      v14 = v24;
    }
    v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v12 = 0;
    goto LABEL_7;
  }
  v15 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsFetchRequestPrototypeFunction_arrayBuffer(v15, v16, v17);
}

unint64_t WebCore::jsFetchRequestPrototypeFunction_arrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF8B18);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::arrayBuffer(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "arrayBuffer", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchRequestPrototypeFunction_blob(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF8D0CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::blob(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "blob", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchRequestPrototypeFunction_bytes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF8F00);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::bytes(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "bytes", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

